
Integration Prototyping.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e10  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  08009fb0  08009fb0  00019fb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5b0  0800a5b0  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5b0  0800a5b0  0001a5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5b8  0800a5b8  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5b8  0800a5b8  0001a5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5bc  0800a5bc  0001a5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800a5c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  200001f0  0800a7b0  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  0800a7b0  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010796  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002110  00000000  00000000  000309f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  00032b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cd7  00000000  00000000  00033b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b85  00000000  00000000  00034817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013586  00000000  00000000  0004d39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e6df  00000000  00000000  00060922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c28  00000000  00000000  000ff004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  00104c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009f98 	.word	0x08009f98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08009f98 	.word	0x08009f98

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <main>:
uint8_t lightAddressSDA = 0x46;
uint8_t lightAddressSCL = 0x47;
///////////////////////////////////

int main(void)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b093      	sub	sp, #76	; 0x4c
 8000f58:	af02      	add	r7, sp, #8

  HAL_Init();
 8000f5a:	f001 fd51 	bl	8002a00 <HAL_Init>

  SystemClock_Config();
 8000f5e:	f001 f8a3 	bl	80020a8 <SystemClock_Config>

  MX_GPIO_Init();
 8000f62:	f001 fa2f 	bl	80023c4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f66:	f001 f909 	bl	800217c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000f6a:	f001 f959 	bl	8002220 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000f6e:	f001 f9d5 	bl	800231c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f72:	f001 f9fd 	bl	8002370 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f76:	f001 f981 	bl	800227c <MX_TIM1_Init>

  ///////////////////////////////////////////////////////////////
  //GPS
  float lat = -1;
 8000f7a:	4b32      	ldr	r3, [pc, #200]	; (8001044 <main+0xf0>)
 8000f7c:	613b      	str	r3, [r7, #16]
  float longi = -1;
 8000f7e:	4b31      	ldr	r3, [pc, #196]	; (8001044 <main+0xf0>)
 8000f80:	60fb      	str	r3, [r7, #12]
  float time = -1;
 8000f82:	4b30      	ldr	r3, [pc, #192]	; (8001044 <main+0xf0>)
 8000f84:	60bb      	str	r3, [r7, #8]
  float date = -1;
 8000f86:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <main+0xf0>)
 8000f88:	607b      	str	r3, [r7, #4]
  char longiDir = 'x';
 8000f8a:	2378      	movs	r3, #120	; 0x78
 8000f8c:	70fb      	strb	r3, [r7, #3]
  char latDir = 'x';
 8000f8e:	2378      	movs	r3, #120	; 0x78
 8000f90:	70bb      	strb	r3, [r7, #2]

  for (int i = 0; i < 50; i++) {
 8000f92:	2300      	movs	r3, #0
 8000f94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f96:	e010      	b.n	8000fba <main+0x66>
   getGpsData(&lat, &longi, &time, &date, &longiDir, &latDir);
 8000f98:	1d3c      	adds	r4, r7, #4
 8000f9a:	f107 0208 	add.w	r2, r7, #8
 8000f9e:	f107 010c 	add.w	r1, r7, #12
 8000fa2:	f107 0010 	add.w	r0, r7, #16
 8000fa6:	1cbb      	adds	r3, r7, #2
 8000fa8:	9301      	str	r3, [sp, #4]
 8000faa:	1cfb      	adds	r3, r7, #3
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	4623      	mov	r3, r4
 8000fb0:	f000 f990 	bl	80012d4 <getGpsData>
  for (int i = 0; i < 50; i++) {
 8000fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fbc:	2b31      	cmp	r3, #49	; 0x31
 8000fbe:	ddeb      	ble.n	8000f98 <main+0x44>
  }
  //////////////////////////////////////////////////////////////
  //LIGHT SENSOR
  setupLightSensor(lightAddressGND);
 8000fc0:	4b21      	ldr	r3, [pc, #132]	; (8001048 <main+0xf4>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 f841 	bl	800104c <setupLightSensor>
  float lightDataGND = 0;
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
  float lightDataVDD = 0;
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	633b      	str	r3, [r7, #48]	; 0x30
  float lightDataSDA = 0;
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  float lightDataSCL = 0;
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28

  //////////////////////////////////////////////////////////////
  //MAGNETOMETER
  float xCal, yCal, zCal;
  xCal = 0;
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  yCal = 0;
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
  zCal = 0;
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
  setupMag();
 8000ff4:	f000 fd10 	bl	8001a18 <setupMag>
//  hardIronCal(&xCal, &yCal, &zCal);

  //Direction Angle
  float direction = 0;
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	61bb      	str	r3, [r7, #24]
  //////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////
  //SOLAR PANEL VOLTAGE
  float solarPanelVoltage = 0;
 8000ffe:	f04f 0300 	mov.w	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  //////////////////////////////////////////////////////////////

  int count = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	63bb      	str	r3, [r7, #56]	; 0x38
  while (1)
  {

    direction = magnetometerData(xCal, yCal, zCal);
 8001008:	ed97 1a07 	vldr	s2, [r7, #28]
 800100c:	edd7 0a08 	vldr	s1, [r7, #32]
 8001010:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001014:	f000 fca4 	bl	8001960 <magnetometerData>
 8001018:	ed87 0a06 	vstr	s0, [r7, #24]
    lightDataGND = getLightData(lightAddressGND);
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <main+0xf4>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f83d 	bl	80010a0 <getLightData>
 8001026:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    solarPanelVoltage = getSolarPanelVoltage();
 800102a:	f000 f8e1 	bl	80011f0 <getSolarPanelVoltage>
 800102e:	ed87 0a05 	vstr	s0, [r7, #20]
//    	count = 0;
//    }



    count += 1;
 8001032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001034:	3301      	adds	r3, #1
 8001036:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_Delay(500);
 8001038:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800103c:	f001 fd52 	bl	8002ae4 <HAL_Delay>
    direction = magnetometerData(xCal, yCal, zCal);
 8001040:	e7e2      	b.n	8001008 <main+0xb4>
 8001042:	bf00      	nop
 8001044:	bf800000 	.word	0xbf800000
 8001048:	2000000a 	.word	0x2000000a

0800104c <setupLightSensor>:
			(unsigned int)lightDataSCL, (unsigned int)lightDataSCL%100, (unsigned int)solarPanelVoltage, (unsigned int)solarPanelVoltage%100);

	HAL_UART_Transmit_IT(&huart1, bluetoothBuffer, sizeof (bluetoothBuffer));
}

void setupLightSensor(uint8_t lightAddress) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af02      	add	r7, sp, #8
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	uint8_t data_send[3] = {0};
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <setupLightSensor+0x4c>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	81bb      	strh	r3, [r7, #12]
 800105c:	2300      	movs	r3, #0
 800105e:	73bb      	strb	r3, [r7, #14]
	data_send[0] = 0x0A;
 8001060:	230a      	movs	r3, #10
 8001062:	733b      	strb	r3, [r7, #12]
	data_send[1] = 0x32;
 8001064:	2332      	movs	r3, #50	; 0x32
 8001066:	737b      	strb	r3, [r7, #13]
	data_send[2] = 0xF8;
 8001068:	23f8      	movs	r3, #248	; 0xf8
 800106a:	73bb      	strb	r3, [r7, #14]
	while (HAL_I2C_Master_Transmit(&hi2c1, (lightAddress << 1), data_send, 3, 20) != HAL_OK){}
 800106c:	bf00      	nop
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	b29b      	uxth	r3, r3
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	b299      	uxth	r1, r3
 8001076:	f107 020c 	add.w	r2, r7, #12
 800107a:	2314      	movs	r3, #20
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2303      	movs	r3, #3
 8001080:	4806      	ldr	r0, [pc, #24]	; (800109c <setupLightSensor+0x50>)
 8001082:	f002 fd0d 	bl	8003aa0 <HAL_I2C_Master_Transmit>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1f0      	bne.n	800106e <setupLightSensor+0x22>
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	0800a05c 	.word	0x0800a05c
 800109c:	20000254 	.word	0x20000254

080010a0 <getLightData>:

float getLightData(uint8_t lightAddress) {
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	b08c      	sub	sp, #48	; 0x30
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	uint8_t data_send[4] = {0};
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
	uint8_t data_in [2] = {0};
 80010ae:	2300      	movs	r3, #0
 80010b0:	82bb      	strh	r3, [r7, #20]
	uint16_t exp;
	uint16_t man;
	uint16_t alldata;
	uint8_t buf[12];
	float ans = 0;
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24

	data_send[0] = 0x00;
 80010b8:	2300      	movs	r3, #0
 80010ba:	763b      	strb	r3, [r7, #24]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80010bc:	bf00      	nop
 80010be:	4848      	ldr	r0, [pc, #288]	; (80011e0 <getLightData+0x140>)
 80010c0:	f003 f812 	bl	80040e8 <HAL_I2C_GetState>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b20      	cmp	r3, #32
 80010c8:	d1f9      	bne.n	80010be <getLightData+0x1e>
	while (HAL_I2C_Master_Transmit(&hi2c1, (lightAddress << 1), data_send, 1, 20) != HAL_OK){}
 80010ca:	bf00      	nop
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	b299      	uxth	r1, r3
 80010d4:	f107 0218 	add.w	r2, r7, #24
 80010d8:	2314      	movs	r3, #20
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2301      	movs	r3, #1
 80010de:	4840      	ldr	r0, [pc, #256]	; (80011e0 <getLightData+0x140>)
 80010e0:	f002 fcde 	bl	8003aa0 <HAL_I2C_Master_Transmit>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f0      	bne.n	80010cc <getLightData+0x2c>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80010ea:	bf00      	nop
 80010ec:	483c      	ldr	r0, [pc, #240]	; (80011e0 <getLightData+0x140>)
 80010ee:	f002 fffb 	bl	80040e8 <HAL_I2C_GetState>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b20      	cmp	r3, #32
 80010f6:	d1f9      	bne.n	80010ec <getLightData+0x4c>
	while (HAL_I2C_Master_Receive(&hi2c1, (lightAddress << 1 | 1), data_in, 2, HAL_MAX_DELAY)){}
 80010f8:	bf00      	nop
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	b21b      	sxth	r3, r3
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	b21b      	sxth	r3, r3
 8001106:	b299      	uxth	r1, r3
 8001108:	f107 0214 	add.w	r2, r7, #20
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2302      	movs	r3, #2
 8001114:	4832      	ldr	r0, [pc, #200]	; (80011e0 <getLightData+0x140>)
 8001116:	f002 fdc1 	bl	8003c9c <HAL_I2C_Master_Receive>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1ec      	bne.n	80010fa <getLightData+0x5a>

	alldata = data_in[0];
 8001120:	7d3b      	ldrb	r3, [r7, #20]
 8001122:	847b      	strh	r3, [r7, #34]	; 0x22
	alldata = (alldata << 8) | data_in[1];
 8001124:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b21a      	sxth	r2, r3
 800112a:	7d7b      	ldrb	r3, [r7, #21]
 800112c:	b21b      	sxth	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	b21b      	sxth	r3, r3
 8001132:	847b      	strh	r3, [r7, #34]	; 0x22
	man = alldata & 0x0FFF;
 8001134:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800113a:	843b      	strh	r3, [r7, #32]
	exp = (alldata & 0xF000) >> 12;
 800113c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800113e:	0b1b      	lsrs	r3, r3, #12
 8001140:	83fb      	strh	r3, [r7, #30]

	ans = man * (0.01 * pow(2,exp));
 8001142:	8c3b      	ldrh	r3, [r7, #32]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f9f5 	bl	8000534 <__aeabi_i2d>
 800114a:	4604      	mov	r4, r0
 800114c:	460d      	mov	r5, r1
 800114e:	8bfb      	ldrh	r3, [r7, #30]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f9df 	bl	8000514 <__aeabi_ui2d>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	ec43 2b11 	vmov	d1, r2, r3
 800115e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80011d0 <getLightData+0x130>
 8001162:	f007 fd75 	bl	8008c50 <pow>
 8001166:	ec51 0b10 	vmov	r0, r1, d0
 800116a:	a31b      	add	r3, pc, #108	; (adr r3, 80011d8 <getLightData+0x138>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	f7ff fa4a 	bl	8000608 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4620      	mov	r0, r4
 800117a:	4629      	mov	r1, r5
 800117c:	f7ff fa44 	bl	8000608 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f7ff fd16 	bl	8000bb8 <__aeabi_d2f>
 800118c:	4603      	mov	r3, r0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24

	sprintf((char*)buf,"LUX: %.2f\r\n",ans);
 8001190:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001192:	f7ff f9e1 	bl	8000558 <__aeabi_f2d>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	f107 0008 	add.w	r0, r7, #8
 800119e:	4911      	ldr	r1, [pc, #68]	; (80011e4 <getLightData+0x144>)
 80011a0:	f005 fc38 	bl	8006a14 <siprintf>
	HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80011a4:	f107 0308 	add.w	r3, r7, #8
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f869 	bl	8000280 <strlen>
 80011ae:	4603      	mov	r3, r0
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	f107 0108 	add.w	r1, r7, #8
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	480b      	ldr	r0, [pc, #44]	; (80011e8 <getLightData+0x148>)
 80011bc:	f004 fa53 	bl	8005666 <HAL_UART_Transmit>

	return ans;
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	ee07 3a90 	vmov	s15, r3
}
 80011c6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bdb0      	pop	{r4, r5, r7, pc}
 80011d0:	00000000 	.word	0x00000000
 80011d4:	40000000 	.word	0x40000000
 80011d8:	47ae147b 	.word	0x47ae147b
 80011dc:	3f847ae1 	.word	0x3f847ae1
 80011e0:	20000254 	.word	0x20000254
 80011e4:	0800a060 	.word	0x0800a060
 80011e8:	20000334 	.word	0x20000334
 80011ec:	00000000 	.word	0x00000000

080011f0 <getSolarPanelVoltage>:


float getSolarPanelVoltage() {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08e      	sub	sp, #56	; 0x38
 80011f4:	af00      	add	r7, sp, #0
	unsigned int analogValue = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_ADC_Start(&hadc1);
 80011fa:	4831      	ldr	r0, [pc, #196]	; (80012c0 <getSolarPanelVoltage+0xd0>)
 80011fc:	f001 fcda 	bl	8002bb4 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 300) == HAL_OK) {
 8001200:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001204:	482e      	ldr	r0, [pc, #184]	; (80012c0 <getSolarPanelVoltage+0xd0>)
 8001206:	f001 fdbc 	bl	8002d82 <HAL_ADC_PollForConversion>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d103      	bne.n	8001218 <getSolarPanelVoltage+0x28>
		analogValue = HAL_ADC_GetValue(&hadc1);
 8001210:	482b      	ldr	r0, [pc, #172]	; (80012c0 <getSolarPanelVoltage+0xd0>)
 8001212:	f001 fe41 	bl	8002e98 <HAL_ADC_GetValue>
 8001216:	6378      	str	r0, [r7, #52]	; 0x34
	}

	HAL_ADC_Stop(&hadc1);
 8001218:	4829      	ldr	r0, [pc, #164]	; (80012c0 <getSolarPanelVoltage+0xd0>)
 800121a:	f001 fd7f 	bl	8002d1c <HAL_ADC_Stop>

	//Value obtained from voltage divider
	int voltageDividerLargeRes = 14;
 800121e:	230e      	movs	r3, #14
 8001220:	633b      	str	r3, [r7, #48]	; 0x30
	float voltageDividerSmallRes = 3.1;
 8001222:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <getSolarPanelVoltage+0xd4>)
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
	float measuredVoltage = (analogValue * 3.1 /  4096);
 8001226:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001228:	f7ff f974 	bl	8000514 <__aeabi_ui2d>
 800122c:	a322      	add	r3, pc, #136	; (adr r3, 80012b8 <getSolarPanelVoltage+0xc8>)
 800122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001232:	f7ff f9e9 	bl	8000608 <__aeabi_dmul>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <getSolarPanelVoltage+0xd8>)
 8001244:	f7ff fb0a 	bl	800085c <__aeabi_ddiv>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f7ff fcb2 	bl	8000bb8 <__aeabi_d2f>
 8001254:	4603      	mov	r3, r0
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
	float solarPanelVoltage = (measuredVoltage * (voltageDividerLargeRes + voltageDividerSmallRes) / voltageDividerSmallRes);
 8001258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001262:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001266:	ee37 7a27 	vadd.f32	s14, s14, s15
 800126a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800126e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001272:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800127a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24


	uint8_t buf[30];
	sprintf((char*)buf,"Solar Panel Voltage: %.2f\r\n",solarPanelVoltage);
 800127e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001280:	f7ff f96a 	bl	8000558 <__aeabi_f2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	1d38      	adds	r0, r7, #4
 800128a:	4910      	ldr	r1, [pc, #64]	; (80012cc <getSolarPanelVoltage+0xdc>)
 800128c:	f005 fbc2 	bl	8006a14 <siprintf>
	HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	4618      	mov	r0, r3
 8001294:	f7fe fff4 	bl	8000280 <strlen>
 8001298:	4603      	mov	r3, r0
 800129a:	b29a      	uxth	r2, r3
 800129c:	1d39      	adds	r1, r7, #4
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	480b      	ldr	r0, [pc, #44]	; (80012d0 <getSolarPanelVoltage+0xe0>)
 80012a4:	f004 f9df 	bl	8005666 <HAL_UART_Transmit>

	return solarPanelVoltage;
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	ee07 3a90 	vmov	s15, r3
}
 80012ae:	eeb0 0a67 	vmov.f32	s0, s15
 80012b2:	3738      	adds	r7, #56	; 0x38
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	cccccccd 	.word	0xcccccccd
 80012bc:	4008cccc 	.word	0x4008cccc
 80012c0:	2000020c 	.word	0x2000020c
 80012c4:	40466666 	.word	0x40466666
 80012c8:	40b00000 	.word	0x40b00000
 80012cc:	0800a06c 	.word	0x0800a06c
 80012d0:	20000334 	.word	0x20000334

080012d4 <getGpsData>:

void getGpsData(float* lat, float* longi, float* time, float* date, char* longDir, char* latDir) {
 80012d4:	b5b0      	push	{r4, r5, r7, lr}
 80012d6:	b0b8      	sub	sp, #224	; 0xe0
 80012d8:	af02      	add	r7, sp, #8
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
 80012e0:	603b      	str	r3, [r7, #0]
	uint8_t gpsDataTx [10] = {0}; //Data to send to GPS module
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80012e8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	809a      	strh	r2, [r3, #4]
	uint8_t gpsDataReady [2] = {0}; //Data to check if gps module ready
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	uint8_t gpsDataRx1 [32] = {0}; //Buffer 1
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80012fe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
 800130e:	615a      	str	r2, [r3, #20]
 8001310:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx2 [32] = {0}; //Buffer 2
 8001312:	2300      	movs	r3, #0
 8001314:	667b      	str	r3, [r7, #100]	; 0x64
 8001316:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]
 8001326:	615a      	str	r2, [r3, #20]
 8001328:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx3 [32] = {0}; //Buffer 3
 800132a:	2300      	movs	r3, #0
 800132c:	647b      	str	r3, [r7, #68]	; 0x44
 800132e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]
 800133e:	615a      	str	r2, [r3, #20]
 8001340:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx4 [4] = {0}; //Buffer 4
 8001342:	2300      	movs	r3, #0
 8001344:	643b      	str	r3, [r7, #64]	; 0x40

	//////////////////////////////////////////////////////////////////////////////////////////
	//INITIALIZATION
	gpsDataTx[0] = 0xB5;
 8001346:	23b5      	movs	r3, #181	; 0xb5
 8001348:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	gpsDataTx[1] = 0x62;
 800134c:	2362      	movs	r3, #98	; 0x62
 800134e:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
	gpsDataTx[2] = 0xF0;
 8001352:	23f0      	movs	r3, #240	; 0xf0
 8001354:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
	gpsDataTx[3] = 0x04;
 8001358:	2304      	movs	r3, #4
 800135a:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800135e:	bf00      	nop
 8001360:	480e      	ldr	r0, [pc, #56]	; (800139c <getGpsData+0xc8>)
 8001362:	f002 fec1 	bl	80040e8 <HAL_I2C_GetState>
 8001366:	4603      	mov	r3, r0
 8001368:	2b20      	cmp	r3, #32
 800136a:	d1f9      	bne.n	8001360 <getGpsData+0x8c>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 4, 20) != HAL_OK){}
 800136c:	bf00      	nop
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <getGpsData+0xcc>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	b299      	uxth	r1, r3
 8001376:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800137a:	2314      	movs	r3, #20
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	2304      	movs	r3, #4
 8001380:	4806      	ldr	r0, [pc, #24]	; (800139c <getGpsData+0xc8>)
 8001382:	f002 fb8d 	bl	8003aa0 <HAL_I2C_Master_Transmit>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f0      	bne.n	800136e <getGpsData+0x9a>

//		/////////////////////////////////////////////////////////////////////////////////////////
//
//		//WAITING FOR DATA READY
	gpsDataReady[0] = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
	gpsDataReady[1] = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
	while ((gpsDataReady[0] == 0) && (gpsDataReady[1] == 0)) //We leave as soon as read something non zero
 8001398:	e02b      	b.n	80013f2 <getGpsData+0x11e>
 800139a:	bf00      	nop
 800139c:	20000254 	.word	0x20000254
 80013a0:	20000008 	.word	0x20000008
	{
		gpsDataTx[0] = 0xFD;
 80013a4:	23fd      	movs	r3, #253	; 0xfd
 80013a6:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
		HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, HAL_MAX_DELAY);
 80013aa:	4bb5      	ldr	r3, [pc, #724]	; (8001680 <getGpsData+0x3ac>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	b299      	uxth	r1, r3
 80013b2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2301      	movs	r3, #1
 80013be:	48b1      	ldr	r0, [pc, #708]	; (8001684 <getGpsData+0x3b0>)
 80013c0:	f002 fb6e 	bl	8003aa0 <HAL_I2C_Master_Transmit>
		gpsDataReady[0] = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
		gpsDataReady[1] = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
		HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataReady, 2, HAL_MAX_DELAY);
 80013d0:	4bab      	ldr	r3, [pc, #684]	; (8001680 <getGpsData+0x3ac>)
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	b21b      	sxth	r3, r3
 80013de:	b299      	uxth	r1, r3
 80013e0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2302      	movs	r3, #2
 80013ec:	48a5      	ldr	r0, [pc, #660]	; (8001684 <getGpsData+0x3b0>)
 80013ee:	f002 fc55 	bl	8003c9c <HAL_I2C_Master_Receive>
	while ((gpsDataReady[0] == 0) && (gpsDataReady[1] == 0)) //We leave as soon as read something non zero
 80013f2:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d103      	bne.n	8001402 <getGpsData+0x12e>
 80013fa:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0d0      	beq.n	80013a4 <getGpsData+0xd0>
	}


//		//Buffer 1
	gpsDataTx[0] = 0xFF;
 8001402:	23ff      	movs	r3, #255	; 0xff
 8001404:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8001408:	bf00      	nop
 800140a:	489e      	ldr	r0, [pc, #632]	; (8001684 <getGpsData+0x3b0>)
 800140c:	f002 fe6c 	bl	80040e8 <HAL_I2C_GetState>
 8001410:	4603      	mov	r3, r0
 8001412:	2b20      	cmp	r3, #32
 8001414:	d1f9      	bne.n	800140a <getGpsData+0x136>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 8001416:	bf00      	nop
 8001418:	4b99      	ldr	r3, [pc, #612]	; (8001680 <getGpsData+0x3ac>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	b299      	uxth	r1, r3
 8001420:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001424:	2314      	movs	r3, #20
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2301      	movs	r3, #1
 800142a:	4896      	ldr	r0, [pc, #600]	; (8001684 <getGpsData+0x3b0>)
 800142c:	f002 fb38 	bl	8003aa0 <HAL_I2C_Master_Transmit>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f0      	bne.n	8001418 <getGpsData+0x144>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8001436:	bf00      	nop
 8001438:	4892      	ldr	r0, [pc, #584]	; (8001684 <getGpsData+0x3b0>)
 800143a:	f002 fe55 	bl	80040e8 <HAL_I2C_GetState>
 800143e:	4603      	mov	r3, r0
 8001440:	2b20      	cmp	r3, #32
 8001442:	d1f9      	bne.n	8001438 <getGpsData+0x164>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx1, 32, HAL_MAX_DELAY)){}
 8001444:	bf00      	nop
 8001446:	4b8e      	ldr	r3, [pc, #568]	; (8001680 <getGpsData+0x3ac>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	b21b      	sxth	r3, r3
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	b21b      	sxth	r3, r3
 8001454:	b299      	uxth	r1, r3
 8001456:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2320      	movs	r3, #32
 8001462:	4888      	ldr	r0, [pc, #544]	; (8001684 <getGpsData+0x3b0>)
 8001464:	f002 fc1a 	bl	8003c9c <HAL_I2C_Master_Receive>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1eb      	bne.n	8001446 <getGpsData+0x172>
//
//		//Buffer 2
	gpsDataTx[0] = 0xFF;
 800146e:	23ff      	movs	r3, #255	; 0xff
 8001470:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8001474:	bf00      	nop
 8001476:	4883      	ldr	r0, [pc, #524]	; (8001684 <getGpsData+0x3b0>)
 8001478:	f002 fe36 	bl	80040e8 <HAL_I2C_GetState>
 800147c:	4603      	mov	r3, r0
 800147e:	2b20      	cmp	r3, #32
 8001480:	d1f9      	bne.n	8001476 <getGpsData+0x1a2>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 8001482:	bf00      	nop
 8001484:	4b7e      	ldr	r3, [pc, #504]	; (8001680 <getGpsData+0x3ac>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	b299      	uxth	r1, r3
 800148c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001490:	2314      	movs	r3, #20
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2301      	movs	r3, #1
 8001496:	487b      	ldr	r0, [pc, #492]	; (8001684 <getGpsData+0x3b0>)
 8001498:	f002 fb02 	bl	8003aa0 <HAL_I2C_Master_Transmit>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <getGpsData+0x1b0>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80014a2:	bf00      	nop
 80014a4:	4877      	ldr	r0, [pc, #476]	; (8001684 <getGpsData+0x3b0>)
 80014a6:	f002 fe1f 	bl	80040e8 <HAL_I2C_GetState>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b20      	cmp	r3, #32
 80014ae:	d1f9      	bne.n	80014a4 <getGpsData+0x1d0>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx2, 32, HAL_MAX_DELAY)){}
 80014b0:	bf00      	nop
 80014b2:	4b73      	ldr	r3, [pc, #460]	; (8001680 <getGpsData+0x3ac>)
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	b21b      	sxth	r3, r3
 80014c0:	b299      	uxth	r1, r3
 80014c2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2320      	movs	r3, #32
 80014ce:	486d      	ldr	r0, [pc, #436]	; (8001684 <getGpsData+0x3b0>)
 80014d0:	f002 fbe4 	bl	8003c9c <HAL_I2C_Master_Receive>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1eb      	bne.n	80014b2 <getGpsData+0x1de>
//
//		//Buffer 3
	gpsDataTx[0] = 0xFF;
 80014da:	23ff      	movs	r3, #255	; 0xff
 80014dc:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80014e0:	bf00      	nop
 80014e2:	4868      	ldr	r0, [pc, #416]	; (8001684 <getGpsData+0x3b0>)
 80014e4:	f002 fe00 	bl	80040e8 <HAL_I2C_GetState>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b20      	cmp	r3, #32
 80014ec:	d1f9      	bne.n	80014e2 <getGpsData+0x20e>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 80014ee:	bf00      	nop
 80014f0:	4b63      	ldr	r3, [pc, #396]	; (8001680 <getGpsData+0x3ac>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	b299      	uxth	r1, r3
 80014f8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80014fc:	2314      	movs	r3, #20
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2301      	movs	r3, #1
 8001502:	4860      	ldr	r0, [pc, #384]	; (8001684 <getGpsData+0x3b0>)
 8001504:	f002 facc 	bl	8003aa0 <HAL_I2C_Master_Transmit>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <getGpsData+0x21c>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800150e:	bf00      	nop
 8001510:	485c      	ldr	r0, [pc, #368]	; (8001684 <getGpsData+0x3b0>)
 8001512:	f002 fde9 	bl	80040e8 <HAL_I2C_GetState>
 8001516:	4603      	mov	r3, r0
 8001518:	2b20      	cmp	r3, #32
 800151a:	d1f9      	bne.n	8001510 <getGpsData+0x23c>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx3, 32, HAL_MAX_DELAY)){}
 800151c:	bf00      	nop
 800151e:	4b58      	ldr	r3, [pc, #352]	; (8001680 <getGpsData+0x3ac>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	b21b      	sxth	r3, r3
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	b21b      	sxth	r3, r3
 800152c:	b299      	uxth	r1, r3
 800152e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2320      	movs	r3, #32
 800153a:	4852      	ldr	r0, [pc, #328]	; (8001684 <getGpsData+0x3b0>)
 800153c:	f002 fbae 	bl	8003c9c <HAL_I2C_Master_Receive>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1eb      	bne.n	800151e <getGpsData+0x24a>

	//Buffer 4
	gpsDataTx[0] = 0xFF;
 8001546:	23ff      	movs	r3, #255	; 0xff
 8001548:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800154c:	bf00      	nop
 800154e:	484d      	ldr	r0, [pc, #308]	; (8001684 <getGpsData+0x3b0>)
 8001550:	f002 fdca 	bl	80040e8 <HAL_I2C_GetState>
 8001554:	4603      	mov	r3, r0
 8001556:	2b20      	cmp	r3, #32
 8001558:	d1f9      	bne.n	800154e <getGpsData+0x27a>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 800155a:	bf00      	nop
 800155c:	4b48      	ldr	r3, [pc, #288]	; (8001680 <getGpsData+0x3ac>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	b299      	uxth	r1, r3
 8001564:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001568:	2314      	movs	r3, #20
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2301      	movs	r3, #1
 800156e:	4845      	ldr	r0, [pc, #276]	; (8001684 <getGpsData+0x3b0>)
 8001570:	f002 fa96 	bl	8003aa0 <HAL_I2C_Master_Transmit>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <getGpsData+0x288>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800157a:	bf00      	nop
 800157c:	4841      	ldr	r0, [pc, #260]	; (8001684 <getGpsData+0x3b0>)
 800157e:	f002 fdb3 	bl	80040e8 <HAL_I2C_GetState>
 8001582:	4603      	mov	r3, r0
 8001584:	2b20      	cmp	r3, #32
 8001586:	d1f9      	bne.n	800157c <getGpsData+0x2a8>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx4, 4, HAL_MAX_DELAY)){}
 8001588:	bf00      	nop
 800158a:	4b3d      	ldr	r3, [pc, #244]	; (8001680 <getGpsData+0x3ac>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	b21b      	sxth	r3, r3
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	b21b      	sxth	r3, r3
 8001598:	b299      	uxth	r1, r3
 800159a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	2304      	movs	r3, #4
 80015a6:	4837      	ldr	r0, [pc, #220]	; (8001684 <getGpsData+0x3b0>)
 80015a8:	f002 fb78 	bl	8003c9c <HAL_I2C_Master_Receive>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1eb      	bne.n	800158a <getGpsData+0x2b6>


	//Create concaterated buffer
	 size_t totalSize = sizeof(gpsDataRx1) + sizeof(gpsDataRx2) + sizeof(gpsDataRx3) + sizeof(gpsDataRx4);
 80015b2:	2364      	movs	r3, #100	; 0x64
 80015b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	// Allocate memory for the concatenated array
	uint8_t *concatenatedArray = (uint8_t *)malloc(totalSize);
 80015b8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80015bc:	f004 fbcc 	bl	8005d58 <malloc>
 80015c0:	4603      	mov	r3, r0
 80015c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	// Copy the contents of each array into the concatenated array
	size_t offset = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx1, sizeof(gpsDataRx1));
 80015cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80015d4:	4413      	add	r3, r2
 80015d6:	461d      	mov	r5, r3
 80015d8:	f107 0484 	add.w	r4, r7, #132	; 0x84
 80015dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015de:	6028      	str	r0, [r5, #0]
 80015e0:	6069      	str	r1, [r5, #4]
 80015e2:	60aa      	str	r2, [r5, #8]
 80015e4:	60eb      	str	r3, [r5, #12]
 80015e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e8:	6128      	str	r0, [r5, #16]
 80015ea:	6169      	str	r1, [r5, #20]
 80015ec:	61aa      	str	r2, [r5, #24]
 80015ee:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx1);
 80015f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80015f4:	3320      	adds	r3, #32
 80015f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx2, sizeof(gpsDataRx2));
 80015fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001602:	4413      	add	r3, r2
 8001604:	461d      	mov	r5, r3
 8001606:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800160a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800160c:	6028      	str	r0, [r5, #0]
 800160e:	6069      	str	r1, [r5, #4]
 8001610:	60aa      	str	r2, [r5, #8]
 8001612:	60eb      	str	r3, [r5, #12]
 8001614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001616:	6128      	str	r0, [r5, #16]
 8001618:	6169      	str	r1, [r5, #20]
 800161a:	61aa      	str	r2, [r5, #24]
 800161c:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx2);
 800161e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001622:	3320      	adds	r3, #32
 8001624:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx3, sizeof(gpsDataRx3));
 8001628:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800162c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001630:	4413      	add	r3, r2
 8001632:	461d      	mov	r5, r3
 8001634:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163a:	6028      	str	r0, [r5, #0]
 800163c:	6069      	str	r1, [r5, #4]
 800163e:	60aa      	str	r2, [r5, #8]
 8001640:	60eb      	str	r3, [r5, #12]
 8001642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001644:	6128      	str	r0, [r5, #16]
 8001646:	6169      	str	r1, [r5, #20]
 8001648:	61aa      	str	r2, [r5, #24]
 800164a:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx3);
 800164c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001650:	3320      	adds	r3, #32
 8001652:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx4, sizeof(gpsDataRx4));
 8001656:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800165a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800165e:	4413      	add	r3, r2
 8001660:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001662:	601a      	str	r2, [r3, #0]


	//String comparisons
	const char* GNRMC = "NRMC,";
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <getGpsData+0x3b4>)
 8001666:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	const char* minus1 = "-1";
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <getGpsData+0x3b8>)
 800166c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	const char* comma = ",";
 8001670:	4b07      	ldr	r3, [pc, #28]	; (8001690 <getGpsData+0x3bc>)
 8001672:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	char* gpsDataList[12];

	for (int i = 0; i < 12; i++) {
 8001676:	2300      	movs	r3, #0
 8001678:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800167c:	e017      	b.n	80016ae <getGpsData+0x3da>
 800167e:	bf00      	nop
 8001680:	20000008 	.word	0x20000008
 8001684:	20000254 	.word	0x20000254
 8001688:	0800a088 	.word	0x0800a088
 800168c:	0800a090 	.word	0x0800a090
 8001690:	0800a094 	.word	0x0800a094
	    gpsDataList[i] = "-1";
 8001694:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	33d8      	adds	r3, #216	; 0xd8
 800169c:	443b      	add	r3, r7
 800169e:	4aad      	ldr	r2, [pc, #692]	; (8001954 <getGpsData+0x680>)
 80016a0:	f843 2cc8 	str.w	r2, [r3, #-200]
	for (int i = 0; i < 12; i++) {
 80016a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80016a8:	3301      	adds	r3, #1
 80016aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80016ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80016b2:	2b0b      	cmp	r3, #11
 80016b4:	ddee      	ble.n	8001694 <getGpsData+0x3c0>
	}

	//Parsing the data and updating our values

	if (strncmp(concatenatedArray, GNRMC, strlen(GNRMC)) == 0) {
 80016b6:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80016ba:	f7fe fde1 	bl	8000280 <strlen>
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80016c6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80016ca:	f005 fa0e 	bl	8006aea <strncmp>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d122      	bne.n	800171a <getGpsData+0x446>
		char* individualGpsData = strtok(concatenatedArray, ","); // Initialize strtok with the buffer
 80016d4:	49a0      	ldr	r1, [pc, #640]	; (8001958 <getGpsData+0x684>)
 80016d6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80016da:	f005 fa19 	bl	8006b10 <strtok>
 80016de:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		int index = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

		while (individualGpsData != NULL) {
 80016e8:	e013      	b.n	8001712 <getGpsData+0x43e>
			gpsDataList[index] = individualGpsData; // Store the token in an array
 80016ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	33d8      	adds	r3, #216	; 0xd8
 80016f2:	443b      	add	r3, r7
 80016f4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80016f8:	f843 2cc8 	str.w	r2, [r3, #-200]
			individualGpsData = strtok(NULL, ","); // Get the next token
 80016fc:	4996      	ldr	r1, [pc, #600]	; (8001958 <getGpsData+0x684>)
 80016fe:	2000      	movs	r0, #0
 8001700:	f005 fa06 	bl	8006b10 <strtok>
 8001704:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
			index++;
 8001708:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800170c:	3301      	adds	r3, #1
 800170e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		while (individualGpsData != NULL) {
 8001712:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1e7      	bne.n	80016ea <getGpsData+0x416>
		}
	}

	//if the value is different from both -1 and ,, we update our time
	if ((strncmp(gpsDataList[1], minus1, strlen(minus1)) != 0) &&
 800171a:	697c      	ldr	r4, [r7, #20]
 800171c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001720:	f7fe fdae 	bl	8000280 <strlen>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800172c:	4620      	mov	r0, r4
 800172e:	f005 f9dc 	bl	8006aea <strncmp>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d019      	beq.n	800176c <getGpsData+0x498>
	   (strncmp(gpsDataList[1], comma, strlen(comma)) != 0)) {
 8001738:	697c      	ldr	r4, [r7, #20]
 800173a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800173e:	f7fe fd9f 	bl	8000280 <strlen>
 8001742:	4603      	mov	r3, r0
 8001744:	461a      	mov	r2, r3
 8001746:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800174a:	4620      	mov	r0, r4
 800174c:	f005 f9cd 	bl	8006aea <strncmp>
 8001750:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[1], minus1, strlen(minus1)) != 0) &&
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00a      	beq.n	800176c <getGpsData+0x498>
		*time = atoi(gpsDataList[1]);
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	4618      	mov	r0, r3
 800175a:	f004 faf9 	bl	8005d50 <atoi>
 800175e:	ee07 0a90 	vmov	s15, r0
 8001762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((strncmp(gpsDataList[3], minus1, strlen(minus1)) != 0) &&
 800176c:	69fc      	ldr	r4, [r7, #28]
 800176e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001772:	f7fe fd85 	bl	8000280 <strlen>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800177e:	4620      	mov	r0, r4
 8001780:	f005 f9b3 	bl	8006aea <strncmp>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d019      	beq.n	80017be <getGpsData+0x4ea>
	   (strncmp(gpsDataList[3], comma, strlen(comma)) != 0)) {
 800178a:	69fc      	ldr	r4, [r7, #28]
 800178c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001790:	f7fe fd76 	bl	8000280 <strlen>
 8001794:	4603      	mov	r3, r0
 8001796:	461a      	mov	r2, r3
 8001798:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800179c:	4620      	mov	r0, r4
 800179e:	f005 f9a4 	bl	8006aea <strncmp>
 80017a2:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[3], minus1, strlen(minus1)) != 0) &&
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00a      	beq.n	80017be <getGpsData+0x4ea>
		*lat = atoi(gpsDataList[3]);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 fad0 	bl	8005d50 <atoi>
 80017b0:	ee07 0a90 	vmov	s15, r0
 80017b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((strncmp(gpsDataList[4], minus1, strlen(minus1)) != 0) &&
 80017be:	6a3c      	ldr	r4, [r7, #32]
 80017c0:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80017c4:	f7fe fd5c 	bl	8000280 <strlen>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80017d0:	4620      	mov	r0, r4
 80017d2:	f005 f98a 	bl	8006aea <strncmp>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d014      	beq.n	8001806 <getGpsData+0x532>
	   (strncmp(gpsDataList[4], comma, strlen(comma)) != 0)) {
 80017dc:	6a3c      	ldr	r4, [r7, #32]
 80017de:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80017e2:	f7fe fd4d 	bl	8000280 <strlen>
 80017e6:	4603      	mov	r3, r0
 80017e8:	461a      	mov	r2, r3
 80017ea:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80017ee:	4620      	mov	r0, r4
 80017f0:	f005 f97b 	bl	8006aea <strncmp>
 80017f4:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[4], minus1, strlen(minus1)) != 0) &&
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d005      	beq.n	8001806 <getGpsData+0x532>
		strcpy(latDir, gpsDataList[4]);
 80017fa:	6a3b      	ldr	r3, [r7, #32]
 80017fc:	4619      	mov	r1, r3
 80017fe:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8001802:	f005 fa67 	bl	8006cd4 <strcpy>
	}

	if ((strncmp(gpsDataList[5], minus1, strlen(minus1)) != 0) &&
 8001806:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001808:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800180c:	f7fe fd38 	bl	8000280 <strlen>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001818:	4620      	mov	r0, r4
 800181a:	f005 f966 	bl	8006aea <strncmp>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d019      	beq.n	8001858 <getGpsData+0x584>
	   (strncmp(gpsDataList[5], comma, strlen(comma)) != 0)) {
 8001824:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001826:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800182a:	f7fe fd29 	bl	8000280 <strlen>
 800182e:	4603      	mov	r3, r0
 8001830:	461a      	mov	r2, r3
 8001832:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001836:	4620      	mov	r0, r4
 8001838:	f005 f957 	bl	8006aea <strncmp>
 800183c:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[5], minus1, strlen(minus1)) != 0) &&
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00a      	beq.n	8001858 <getGpsData+0x584>
		*longi = atoi(gpsDataList[5]);
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	4618      	mov	r0, r3
 8001846:	f004 fa83 	bl	8005d50 <atoi>
 800184a:	ee07 0a90 	vmov	s15, r0
 800184e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((strncmp(gpsDataList[6], minus1, strlen(minus1)) != 0) &&
 8001858:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800185a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800185e:	f7fe fd0f 	bl	8000280 <strlen>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800186a:	4620      	mov	r0, r4
 800186c:	f005 f93d 	bl	8006aea <strncmp>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d014      	beq.n	80018a0 <getGpsData+0x5cc>
	   (strncmp(gpsDataList[6], comma, strlen(comma)) != 0)) {
 8001876:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001878:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800187c:	f7fe fd00 	bl	8000280 <strlen>
 8001880:	4603      	mov	r3, r0
 8001882:	461a      	mov	r2, r3
 8001884:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001888:	4620      	mov	r0, r4
 800188a:	f005 f92e 	bl	8006aea <strncmp>
 800188e:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[6], minus1, strlen(minus1)) != 0) &&
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <getGpsData+0x5cc>
		strcpy(longDir, gpsDataList[6]);
 8001894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001896:	4619      	mov	r1, r3
 8001898:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800189c:	f005 fa1a 	bl	8006cd4 <strcpy>
	}

	if ((strncmp(gpsDataList[8], minus1, strlen(minus1)) != 0) &&
 80018a0:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80018a2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80018a6:	f7fe fceb 	bl	8000280 <strlen>
 80018aa:	4603      	mov	r3, r0
 80018ac:	461a      	mov	r2, r3
 80018ae:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80018b2:	4620      	mov	r0, r4
 80018b4:	f005 f919 	bl	8006aea <strncmp>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d019      	beq.n	80018f2 <getGpsData+0x61e>
	   (strncmp(gpsDataList[8], comma, strlen(comma)) != 0)) {
 80018be:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80018c0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80018c4:	f7fe fcdc 	bl	8000280 <strlen>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80018d0:	4620      	mov	r0, r4
 80018d2:	f005 f90a 	bl	8006aea <strncmp>
 80018d6:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[8], minus1, strlen(minus1)) != 0) &&
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00a      	beq.n	80018f2 <getGpsData+0x61e>
		*date = atoi(gpsDataList[8]);
 80018dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018de:	4618      	mov	r0, r3
 80018e0:	f004 fa36 	bl	8005d50 <atoi>
 80018e4:	ee07 0a90 	vmov	s15, r0
 80018e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	edc3 7a00 	vstr	s15, [r3]
	}


		//Sending data via UART
	HAL_UART_Transmit(&huart2, gpsDataRx1, sizeof(gpsDataRx1), HAL_MAX_DELAY);
 80018f2:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
 80018fa:	2220      	movs	r2, #32
 80018fc:	4817      	ldr	r0, [pc, #92]	; (800195c <getGpsData+0x688>)
 80018fe:	f003 feb2 	bl	8005666 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, gpsDataRx2, sizeof(gpsDataRx2), HAL_MAX_DELAY);
 8001902:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	2220      	movs	r2, #32
 800190c:	4813      	ldr	r0, [pc, #76]	; (800195c <getGpsData+0x688>)
 800190e:	f003 feaa 	bl	8005666 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, gpsDataRx3, sizeof(gpsDataRx3), HAL_MAX_DELAY);
 8001912:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
 800191a:	2220      	movs	r2, #32
 800191c:	480f      	ldr	r0, [pc, #60]	; (800195c <getGpsData+0x688>)
 800191e:	f003 fea2 	bl	8005666 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, gpsDataRx4, sizeof(gpsDataRx4), HAL_MAX_DELAY);
 8001922:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	2204      	movs	r2, #4
 800192c:	480b      	ldr	r0, [pc, #44]	; (800195c <getGpsData+0x688>)
 800192e:	f003 fe9a 	bl	8005666 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, concatenatedArray, sizeof(concatenatedArray), HAL_MAX_DELAY);
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	2204      	movs	r2, #4
 8001938:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800193c:	4807      	ldr	r0, [pc, #28]	; (800195c <getGpsData+0x688>)
 800193e:	f003 fe92 	bl	8005666 <HAL_UART_Transmit>

	free(concatenatedArray);
 8001942:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001946:	f004 fa0f 	bl	8005d68 <free>
}
 800194a:	bf00      	nop
 800194c:	37d8      	adds	r7, #216	; 0xd8
 800194e:	46bd      	mov	sp, r7
 8001950:	bdb0      	pop	{r4, r5, r7, pc}
 8001952:	bf00      	nop
 8001954:	0800a090 	.word	0x0800a090
 8001958:	0800a094 	.word	0x0800a094
 800195c:	20000334 	.word	0x20000334

08001960 <magnetometerData>:

float magnetometerData(float xCal,float yCal,float zCal) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b08c      	sub	sp, #48	; 0x30
 8001964:	af02      	add	r7, sp, #8
 8001966:	ed87 0a03 	vstr	s0, [r7, #12]
 800196a:	edc7 0a02 	vstr	s1, [r7, #8]
 800196e:	ed87 1a01 	vstr	s2, [r7, #4]
	int16_t magnetometerVal [3] = {0};
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	809a      	strh	r2, [r3, #4]

	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &dataRegister, 1, 20) != HAL_OK){} //send data register address
 800197c:	bf00      	nop
 800197e:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <magnetometerData+0xac>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	b29b      	uxth	r3, r3
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	b299      	uxth	r1, r3
 8001988:	2314      	movs	r3, #20
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2301      	movs	r3, #1
 800198e:	4a20      	ldr	r2, [pc, #128]	; (8001a10 <magnetometerData+0xb0>)
 8001990:	4820      	ldr	r0, [pc, #128]	; (8001a14 <magnetometerData+0xb4>)
 8001992:	f002 f885 	bl	8003aa0 <HAL_I2C_Master_Transmit>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1f0      	bne.n	800197e <magnetometerData+0x1e>
	while (HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), magnetometerVal, 6, HAL_MAX_DELAY)){}
 800199c:	bf00      	nop
 800199e:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <magnetometerData+0xac>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	b299      	uxth	r1, r3
 80019ae:	f107 0214 	add.w	r2, r7, #20
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2306      	movs	r3, #6
 80019ba:	4816      	ldr	r0, [pc, #88]	; (8001a14 <magnetometerData+0xb4>)
 80019bc:	f002 f96e 	bl	8003c9c <HAL_I2C_Master_Receive>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1eb      	bne.n	800199e <magnetometerData+0x3e>

	int16_t xMag = magnetometerVal[0];
 80019c6:	8abb      	ldrh	r3, [r7, #20]
 80019c8:	84fb      	strh	r3, [r7, #38]	; 0x26

	int16_t yMag = magnetometerVal[1];
 80019ca:	8afb      	ldrh	r3, [r7, #22]
 80019cc:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t zMag = magnetometerVal[2];
 80019ce:	8b3b      	ldrh	r3, [r7, #24]
 80019d0:	847b      	strh	r3, [r7, #34]	; 0x22

	float direction = getDirectionAngle(xMag, yMag, zMag, xCal, yCal, zCal);
 80019d2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80019d6:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	; 0x24
 80019da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80019de:	ed97 1a01 	vldr	s2, [r7, #4]
 80019e2:	edd7 0a02 	vldr	s1, [r7, #8]
 80019e6:	ed97 0a03 	vldr	s0, [r7, #12]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f948 	bl	8001c80 <getDirectionAngle>
 80019f0:	ed87 0a07 	vstr	s0, [r7, #28]
	printDirection(direction);
 80019f4:	ed97 0a07 	vldr	s0, [r7, #28]
 80019f8:	f000 f9f0 	bl	8001ddc <printDirection>

	return direction;
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	ee07 3a90 	vmov	s15, r3
}
 8001a02:	eeb0 0a67 	vmov.f32	s0, s15
 8001a06:	3728      	adds	r7, #40	; 0x28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000001 	.word	0x20000001
 8001a14:	20000254 	.word	0x20000254

08001a18 <setupMag>:


void setupMag() {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af02      	add	r7, sp, #8
//
//	//Values to send
//	uint8_t initRegA = 0x0C;
//	uint8_t disRegA = 0x0E;
//	uint8_t initRegC = 0x10;
	uint8_t magSetupRX = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	71fb      	strb	r3, [r7, #7]

	uint8_t magSetupTX [2] = {0};
 8001a22:	2300      	movs	r3, #0
 8001a24:	80bb      	strh	r3, [r7, #4]

	//1
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegC, 1, HAL_MAX_DELAY) != HAL_OK){} //send address pointer
 8001a26:	bf00      	nop
 8001a28:	4b8d      	ldr	r3, [pc, #564]	; (8001c60 <setupMag+0x248>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	b299      	uxth	r1, r3
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2301      	movs	r3, #1
 8001a3a:	4a8a      	ldr	r2, [pc, #552]	; (8001c64 <setupMag+0x24c>)
 8001a3c:	488a      	ldr	r0, [pc, #552]	; (8001c68 <setupMag+0x250>)
 8001a3e:	f002 f82f 	bl	8003aa0 <HAL_I2C_Master_Transmit>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1ef      	bne.n	8001a28 <setupMag+0x10>

	//2
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8001a48:	4b85      	ldr	r3, [pc, #532]	; (8001c60 <setupMag+0x248>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	b299      	uxth	r1, r3
 8001a58:	1dfa      	adds	r2, r7, #7
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2301      	movs	r3, #1
 8001a62:	4881      	ldr	r0, [pc, #516]	; (8001c68 <setupMag+0x250>)
 8001a64:	f002 f91a 	bl	8003c9c <HAL_I2C_Master_Receive>


	//3
	magSetupTX[0] = cfgRegC;
 8001a68:	4b7e      	ldr	r3, [pc, #504]	; (8001c64 <setupMag+0x24c>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = initRegC;
 8001a6e:	4b7f      	ldr	r3, [pc, #508]	; (8001c6c <setupMag+0x254>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 8001a74:	bf00      	nop
 8001a76:	4b7a      	ldr	r3, [pc, #488]	; (8001c60 <setupMag+0x248>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	b299      	uxth	r1, r3
 8001a80:	1d3a      	adds	r2, r7, #4
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2302      	movs	r3, #2
 8001a8a:	4877      	ldr	r0, [pc, #476]	; (8001c68 <setupMag+0x250>)
 8001a8c:	f002 f808 	bl	8003aa0 <HAL_I2C_Master_Transmit>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1ef      	bne.n	8001a76 <setupMag+0x5e>

	//4
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegA, 1, HAL_MAX_DELAY) != HAL_OK){}
 8001a96:	bf00      	nop
 8001a98:	4b71      	ldr	r3, [pc, #452]	; (8001c60 <setupMag+0x248>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	b299      	uxth	r1, r3
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	4a71      	ldr	r2, [pc, #452]	; (8001c70 <setupMag+0x258>)
 8001aac:	486e      	ldr	r0, [pc, #440]	; (8001c68 <setupMag+0x250>)
 8001aae:	f001 fff7 	bl	8003aa0 <HAL_I2C_Master_Transmit>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1ef      	bne.n	8001a98 <setupMag+0x80>

	//5
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8001ab8:	4b69      	ldr	r3, [pc, #420]	; (8001c60 <setupMag+0x248>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	b299      	uxth	r1, r3
 8001ac8:	1dfa      	adds	r2, r7, #7
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	4865      	ldr	r0, [pc, #404]	; (8001c68 <setupMag+0x250>)
 8001ad4:	f002 f8e2 	bl	8003c9c <HAL_I2C_Master_Receive>

	//6
	magSetupTX[0] = cfgRegA;
 8001ad8:	4b65      	ldr	r3, [pc, #404]	; (8001c70 <setupMag+0x258>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = disRegA;
 8001ade:	4b65      	ldr	r3, [pc, #404]	; (8001c74 <setupMag+0x25c>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 8001ae4:	bf00      	nop
 8001ae6:	4b5e      	ldr	r3, [pc, #376]	; (8001c60 <setupMag+0x248>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	b299      	uxth	r1, r3
 8001af0:	1d3a      	adds	r2, r7, #4
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2302      	movs	r3, #2
 8001afa:	485b      	ldr	r0, [pc, #364]	; (8001c68 <setupMag+0x250>)
 8001afc:	f001 ffd0 	bl	8003aa0 <HAL_I2C_Master_Transmit>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1ef      	bne.n	8001ae6 <setupMag+0xce>

	//7
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegA, 1, HAL_MAX_DELAY) != HAL_OK){}
 8001b06:	bf00      	nop
 8001b08:	4b55      	ldr	r3, [pc, #340]	; (8001c60 <setupMag+0x248>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	b299      	uxth	r1, r3
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	4a55      	ldr	r2, [pc, #340]	; (8001c70 <setupMag+0x258>)
 8001b1c:	4852      	ldr	r0, [pc, #328]	; (8001c68 <setupMag+0x250>)
 8001b1e:	f001 ffbf 	bl	8003aa0 <HAL_I2C_Master_Transmit>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1ef      	bne.n	8001b08 <setupMag+0xf0>

	//8
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8001b28:	4b4d      	ldr	r3, [pc, #308]	; (8001c60 <setupMag+0x248>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	b21b      	sxth	r3, r3
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	b299      	uxth	r1, r3
 8001b38:	1dfa      	adds	r2, r7, #7
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	2301      	movs	r3, #1
 8001b42:	4849      	ldr	r0, [pc, #292]	; (8001c68 <setupMag+0x250>)
 8001b44:	f002 f8aa 	bl	8003c9c <HAL_I2C_Master_Receive>

	//9
	magSetupTX[0] = cfgRegA;
 8001b48:	4b49      	ldr	r3, [pc, #292]	; (8001c70 <setupMag+0x258>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = disRegA;
 8001b4e:	4b49      	ldr	r3, [pc, #292]	; (8001c74 <setupMag+0x25c>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 8001b54:	bf00      	nop
 8001b56:	4b42      	ldr	r3, [pc, #264]	; (8001c60 <setupMag+0x248>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	b299      	uxth	r1, r3
 8001b60:	1d3a      	adds	r2, r7, #4
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2302      	movs	r3, #2
 8001b6a:	483f      	ldr	r0, [pc, #252]	; (8001c68 <setupMag+0x250>)
 8001b6c:	f001 ff98 	bl	8003aa0 <HAL_I2C_Master_Transmit>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1ef      	bne.n	8001b56 <setupMag+0x13e>

	//10
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegC, 1, HAL_MAX_DELAY) != HAL_OK){}
 8001b76:	bf00      	nop
 8001b78:	4b39      	ldr	r3, [pc, #228]	; (8001c60 <setupMag+0x248>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	b299      	uxth	r1, r3
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	2301      	movs	r3, #1
 8001b8a:	4a36      	ldr	r2, [pc, #216]	; (8001c64 <setupMag+0x24c>)
 8001b8c:	4836      	ldr	r0, [pc, #216]	; (8001c68 <setupMag+0x250>)
 8001b8e:	f001 ff87 	bl	8003aa0 <HAL_I2C_Master_Transmit>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1ef      	bne.n	8001b78 <setupMag+0x160>

	//11
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8001b98:	4b31      	ldr	r3, [pc, #196]	; (8001c60 <setupMag+0x248>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	b21b      	sxth	r3, r3
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	b21b      	sxth	r3, r3
 8001ba6:	b299      	uxth	r1, r3
 8001ba8:	1dfa      	adds	r2, r7, #7
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	482d      	ldr	r0, [pc, #180]	; (8001c68 <setupMag+0x250>)
 8001bb4:	f002 f872 	bl	8003c9c <HAL_I2C_Master_Receive>


	//12
	magSetupTX[0] = cfgRegC;
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <setupMag+0x24c>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = initRegC;
 8001bbe:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <setupMag+0x254>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 8001bc4:	bf00      	nop
 8001bc6:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <setupMag+0x248>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	b299      	uxth	r1, r3
 8001bd0:	1d3a      	adds	r2, r7, #4
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2302      	movs	r3, #2
 8001bda:	4823      	ldr	r0, [pc, #140]	; (8001c68 <setupMag+0x250>)
 8001bdc:	f001 ff60 	bl	8003aa0 <HAL_I2C_Master_Transmit>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1ef      	bne.n	8001bc6 <setupMag+0x1ae>

	//13
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegA, 2, HAL_MAX_DELAY) != HAL_OK){}
 8001be6:	bf00      	nop
 8001be8:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <setupMag+0x248>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	b299      	uxth	r1, r3
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	4a1d      	ldr	r2, [pc, #116]	; (8001c70 <setupMag+0x258>)
 8001bfc:	481a      	ldr	r0, [pc, #104]	; (8001c68 <setupMag+0x250>)
 8001bfe:	f001 ff4f 	bl	8003aa0 <HAL_I2C_Master_Transmit>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1ef      	bne.n	8001be8 <setupMag+0x1d0>

	//14
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8001c08:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <setupMag+0x248>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	b21b      	sxth	r3, r3
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	b299      	uxth	r1, r3
 8001c18:	1dfa      	adds	r2, r7, #7
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2301      	movs	r3, #1
 8001c22:	4811      	ldr	r0, [pc, #68]	; (8001c68 <setupMag+0x250>)
 8001c24:	f002 f83a 	bl	8003c9c <HAL_I2C_Master_Receive>


	//15
	magSetupTX[0] = cfgRegA;
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <setupMag+0x258>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = initRegA;
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <setupMag+0x260>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 8001c34:	bf00      	nop
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <setupMag+0x248>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	b299      	uxth	r1, r3
 8001c40:	1d3a      	adds	r2, r7, #4
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	2302      	movs	r3, #2
 8001c4a:	4807      	ldr	r0, [pc, #28]	; (8001c68 <setupMag+0x250>)
 8001c4c:	f001 ff28 	bl	8003aa0 <HAL_I2C_Master_Transmit>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1ef      	bne.n	8001c36 <setupMag+0x21e>
}
 8001c56:	bf00      	nop
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000000 	.word	0x20000000
 8001c64:	20000003 	.word	0x20000003
 8001c68:	20000254 	.word	0x20000254
 8001c6c:	20000006 	.word	0x20000006
 8001c70:	20000002 	.word	0x20000002
 8001c74:	20000005 	.word	0x20000005
 8001c78:	20000004 	.word	0x20000004
 8001c7c:	00000000 	.word	0x00000000

08001c80 <getDirectionAngle>:
  *xCal = (xMax + xMin) / 2;
  *yCal = (yMax + yMin) / 2;
  *zCal = (zMax + zMin) / 2;
}

float getDirectionAngle(int16_t xMag, int16_t yMag, int16_t zMag, float xCal, float yCal, float zCal){
 8001c80:	b5b0      	push	{r4, r5, r7, lr}
 8001c82:	b08c      	sub	sp, #48	; 0x30
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c8c:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c90:	ed87 1a01 	vstr	s2, [r7, #4]
 8001c94:	82fb      	strh	r3, [r7, #22]
 8001c96:	460b      	mov	r3, r1
 8001c98:	82bb      	strh	r3, [r7, #20]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	827b      	strh	r3, [r7, #18]
  xMag -= xCal;
 8001c9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ca2:	ee07 3a90 	vmov	s15, r3
 8001ca6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001caa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cb6:	ee17 3a90 	vmov	r3, s15
 8001cba:	82fb      	strh	r3, [r7, #22]
  yMag -= yCal;
 8001cbc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001cc0:	ee07 3a90 	vmov	s15, r3
 8001cc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cd4:	ee17 3a90 	vmov	r3, s15
 8001cd8:	82bb      	strh	r3, [r7, #20]
  zMag -= zCal;
 8001cda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001cde:	ee07 3a90 	vmov	s15, r3
 8001ce2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ce6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cf2:	ee17 3a90 	vmov	r3, s15
 8001cf6:	827b      	strh	r3, [r7, #18]

  float D = atan2(xMag, yMag) * (180 / M_PI);
 8001cf8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fc19 	bl	8000534 <__aeabi_i2d>
 8001d02:	4604      	mov	r4, r0
 8001d04:	460d      	mov	r5, r1
 8001d06:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fc12 	bl	8000534 <__aeabi_i2d>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	ec43 2b11 	vmov	d1, r2, r3
 8001d18:	ec45 4b10 	vmov	d0, r4, r5
 8001d1c:	f006 ff96 	bl	8008c4c <atan2>
 8001d20:	ec51 0b10 	vmov	r0, r1, d0
 8001d24:	a32b      	add	r3, pc, #172	; (adr r3, 8001dd4 <getDirectionAngle+0x154>)
 8001d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2a:	f7fe fc6d 	bl	8000608 <__aeabi_dmul>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f7fe ff3f 	bl	8000bb8 <__aeabi_d2f>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (D > 360) {
 8001d3e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d42:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001dc8 <getDirectionAngle+0x148>
 8001d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	dd08      	ble.n	8001d62 <getDirectionAngle+0xe2>
    D -= 360;
 8001d50:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d54:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001dc8 <getDirectionAngle+0x148>
 8001d58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d5c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8001d60:	e00e      	b.n	8001d80 <getDirectionAngle+0x100>
  }
  else if (D < 0){
 8001d62:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6e:	d507      	bpl.n	8001d80 <getDirectionAngle+0x100>
    D += 360;
 8001d70:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d74:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001dc8 <getDirectionAngle+0x148>
 8001d78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d7c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  }

  uint8_t buf[20];
  sprintf((char*)buf, "D = %u \r\n", (unsigned int)D);
 8001d80:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d88:	f107 0318 	add.w	r3, r7, #24
 8001d8c:	ee17 2a90 	vmov	r2, s15
 8001d90:	490e      	ldr	r1, [pc, #56]	; (8001dcc <getDirectionAngle+0x14c>)
 8001d92:	4618      	mov	r0, r3
 8001d94:	f004 fe3e 	bl	8006a14 <siprintf>
  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001d98:	f107 0318 	add.w	r3, r7, #24
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fa6f 	bl	8000280 <strlen>
 8001da2:	4603      	mov	r3, r0
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	f107 0118 	add.w	r1, r7, #24
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dae:	4808      	ldr	r0, [pc, #32]	; (8001dd0 <getDirectionAngle+0x150>)
 8001db0:	f003 fc59 	bl	8005666 <HAL_UART_Transmit>

  return D;
 8001db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db6:	ee07 3a90 	vmov	s15, r3
}
 8001dba:	eeb0 0a67 	vmov.f32	s0, s15
 8001dbe:	3730      	adds	r7, #48	; 0x30
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001dc4:	f3af 8000 	nop.w
 8001dc8:	43b40000 	.word	0x43b40000
 8001dcc:	0800a0b8 	.word	0x0800a0b8
 8001dd0:	20000334 	.word	0x20000334
 8001dd4:	1a63c1f8 	.word	0x1a63c1f8
 8001dd8:	404ca5dc 	.word	0x404ca5dc

08001ddc <printDirection>:

void printDirection(float D) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b0a2      	sub	sp, #136	; 0x88
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	ed87 0a01 	vstr	s0, [r7, #4]
	if (D > 337.25 || D < 22.5)
 8001de6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dea:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8002064 <printDirection+0x288>
 8001dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df6:	dc08      	bgt.n	8001e0a <printDirection+0x2e>
 8001df8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dfc:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8002068 <printDirection+0x28c>
 8001e00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e08:	d514      	bpl.n	8001e34 <printDirection+0x58>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "North \r\n");
 8001e0a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e0e:	4997      	ldr	r1, [pc, #604]	; (800206c <printDirection+0x290>)
 8001e10:	4618      	mov	r0, r3
 8001e12:	f004 fdff 	bl	8006a14 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001e16:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fa30 	bl	8000280 <strlen>
 8001e20:	4603      	mov	r3, r0
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2c:	4890      	ldr	r0, [pc, #576]	; (8002070 <printDirection+0x294>)
 8001e2e:	f003 fc1a 	bl	8005666 <HAL_UART_Transmit>
	{
 8001e32:	e112      	b.n	800205a <printDirection+0x27e>
	}
	else if (D >= 292.5 && D <= 337.25)
 8001e34:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e38:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002074 <printDirection+0x298>
 8001e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e44:	db1d      	blt.n	8001e82 <printDirection+0xa6>
 8001e46:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e4a:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8002064 <printDirection+0x288>
 8001e4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e56:	d814      	bhi.n	8001e82 <printDirection+0xa6>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "North-West \r\n");
 8001e58:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e5c:	4986      	ldr	r1, [pc, #536]	; (8002078 <printDirection+0x29c>)
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f004 fdd8 	bl	8006a14 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001e64:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fa09 	bl	8000280 <strlen>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	487d      	ldr	r0, [pc, #500]	; (8002070 <printDirection+0x294>)
 8001e7c:	f003 fbf3 	bl	8005666 <HAL_UART_Transmit>
	{
 8001e80:	e0eb      	b.n	800205a <printDirection+0x27e>
	}
	else if (D >= 247.5 && D < 292.5)
 8001e82:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e86:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800207c <printDirection+0x2a0>
 8001e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e92:	db1d      	blt.n	8001ed0 <printDirection+0xf4>
 8001e94:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e98:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002074 <printDirection+0x298>
 8001e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea4:	d514      	bpl.n	8001ed0 <printDirection+0xf4>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "West \r\n");
 8001ea6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001eaa:	4975      	ldr	r1, [pc, #468]	; (8002080 <printDirection+0x2a4>)
 8001eac:	4618      	mov	r0, r3
 8001eae:	f004 fdb1 	bl	8006a14 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001eb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe f9e2 	bl	8000280 <strlen>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec8:	4869      	ldr	r0, [pc, #420]	; (8002070 <printDirection+0x294>)
 8001eca:	f003 fbcc 	bl	8005666 <HAL_UART_Transmit>
	{
 8001ece:	e0c4      	b.n	800205a <printDirection+0x27e>
	}
	else if (D >= 202.5 && D < 247.5)
 8001ed0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ed4:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8002084 <printDirection+0x2a8>
 8001ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee0:	db1d      	blt.n	8001f1e <printDirection+0x142>
 8001ee2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ee6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800207c <printDirection+0x2a0>
 8001eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef2:	d514      	bpl.n	8001f1e <printDirection+0x142>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "South-West \r\n");
 8001ef4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ef8:	4963      	ldr	r1, [pc, #396]	; (8002088 <printDirection+0x2ac>)
 8001efa:	4618      	mov	r0, r3
 8001efc:	f004 fd8a 	bl	8006a14 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001f00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe f9bb 	bl	8000280 <strlen>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295
 8001f16:	4856      	ldr	r0, [pc, #344]	; (8002070 <printDirection+0x294>)
 8001f18:	f003 fba5 	bl	8005666 <HAL_UART_Transmit>
	{
 8001f1c:	e09d      	b.n	800205a <printDirection+0x27e>
	}
	else if (D >= 157.5 && D < 202.5)
 8001f1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f22:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800208c <printDirection+0x2b0>
 8001f26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2e:	db1d      	blt.n	8001f6c <printDirection+0x190>
 8001f30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f34:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002084 <printDirection+0x2a8>
 8001f38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f40:	d514      	bpl.n	8001f6c <printDirection+0x190>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "South \r\n");
 8001f42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f46:	4952      	ldr	r1, [pc, #328]	; (8002090 <printDirection+0x2b4>)
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f004 fd63 	bl	8006a14 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001f4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe f994 	bl	8000280 <strlen>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001f60:	f04f 33ff 	mov.w	r3, #4294967295
 8001f64:	4842      	ldr	r0, [pc, #264]	; (8002070 <printDirection+0x294>)
 8001f66:	f003 fb7e 	bl	8005666 <HAL_UART_Transmit>
	{
 8001f6a:	e076      	b.n	800205a <printDirection+0x27e>
	}
	else if (D >= 112.5 && D < 157.5)
 8001f6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f70:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002094 <printDirection+0x2b8>
 8001f74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7c:	db1d      	blt.n	8001fba <printDirection+0x1de>
 8001f7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f82:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800208c <printDirection+0x2b0>
 8001f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8e:	d514      	bpl.n	8001fba <printDirection+0x1de>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "South-East \r\n");
 8001f90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f94:	4940      	ldr	r1, [pc, #256]	; (8002098 <printDirection+0x2bc>)
 8001f96:	4618      	mov	r0, r3
 8001f98:	f004 fd3c 	bl	8006a14 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001f9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe f96d 	bl	8000280 <strlen>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb2:	482f      	ldr	r0, [pc, #188]	; (8002070 <printDirection+0x294>)
 8001fb4:	f003 fb57 	bl	8005666 <HAL_UART_Transmit>
	{
 8001fb8:	e04f      	b.n	800205a <printDirection+0x27e>
	}
	else if (D >= 67.5 && D < 112.5)
 8001fba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fbe:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800209c <printDirection+0x2c0>
 8001fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fca:	db1d      	blt.n	8002008 <printDirection+0x22c>
 8001fcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fd0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002094 <printDirection+0x2b8>
 8001fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fdc:	d514      	bpl.n	8002008 <printDirection+0x22c>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "East \r\n");
 8001fde:	f107 0318 	add.w	r3, r7, #24
 8001fe2:	492f      	ldr	r1, [pc, #188]	; (80020a0 <printDirection+0x2c4>)
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f004 fd15 	bl	8006a14 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001fea:	f107 0318 	add.w	r3, r7, #24
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe f946 	bl	8000280 <strlen>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	f107 0118 	add.w	r1, r7, #24
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8002000:	481b      	ldr	r0, [pc, #108]	; (8002070 <printDirection+0x294>)
 8002002:	f003 fb30 	bl	8005666 <HAL_UART_Transmit>
	{
 8002006:	e028      	b.n	800205a <printDirection+0x27e>
	}
	else if (D >= 22.5 && D < 67.5)
 8002008:	edd7 7a01 	vldr	s15, [r7, #4]
 800200c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002068 <printDirection+0x28c>
 8002010:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002018:	da00      	bge.n	800201c <printDirection+0x240>
		uint8_t buf[15];
		sprintf((char*)buf, "North-East \r\n");
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
	}

}
 800201a:	e01e      	b.n	800205a <printDirection+0x27e>
	else if (D >= 22.5 && D < 67.5)
 800201c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002020:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800209c <printDirection+0x2c0>
 8002024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202c:	d400      	bmi.n	8002030 <printDirection+0x254>
}
 800202e:	e014      	b.n	800205a <printDirection+0x27e>
		sprintf((char*)buf, "North-East \r\n");
 8002030:	f107 0308 	add.w	r3, r7, #8
 8002034:	491b      	ldr	r1, [pc, #108]	; (80020a4 <printDirection+0x2c8>)
 8002036:	4618      	mov	r0, r3
 8002038:	f004 fcec 	bl	8006a14 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800203c:	f107 0308 	add.w	r3, r7, #8
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe f91d 	bl	8000280 <strlen>
 8002046:	4603      	mov	r3, r0
 8002048:	b29a      	uxth	r2, r3
 800204a:	f107 0108 	add.w	r1, r7, #8
 800204e:	f04f 33ff 	mov.w	r3, #4294967295
 8002052:	4807      	ldr	r0, [pc, #28]	; (8002070 <printDirection+0x294>)
 8002054:	f003 fb07 	bl	8005666 <HAL_UART_Transmit>
}
 8002058:	e7ff      	b.n	800205a <printDirection+0x27e>
 800205a:	bf00      	nop
 800205c:	3788      	adds	r7, #136	; 0x88
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	43a8a000 	.word	0x43a8a000
 8002068:	41b40000 	.word	0x41b40000
 800206c:	0800a0c4 	.word	0x0800a0c4
 8002070:	20000334 	.word	0x20000334
 8002074:	43924000 	.word	0x43924000
 8002078:	0800a0d0 	.word	0x0800a0d0
 800207c:	43778000 	.word	0x43778000
 8002080:	0800a0e0 	.word	0x0800a0e0
 8002084:	434a8000 	.word	0x434a8000
 8002088:	0800a0e8 	.word	0x0800a0e8
 800208c:	431d8000 	.word	0x431d8000
 8002090:	0800a0f8 	.word	0x0800a0f8
 8002094:	42e10000 	.word	0x42e10000
 8002098:	0800a104 	.word	0x0800a104
 800209c:	42870000 	.word	0x42870000
 80020a0:	0800a114 	.word	0x0800a114
 80020a4:	0800a11c 	.word	0x0800a11c

080020a8 <SystemClock_Config>:



void SystemClock_Config(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b094      	sub	sp, #80	; 0x50
 80020ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ae:	f107 0320 	add.w	r3, r7, #32
 80020b2:	2230      	movs	r2, #48	; 0x30
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f004 fd0f 	bl	8006ada <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020bc:	f107 030c 	add.w	r3, r7, #12
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020cc:	2300      	movs	r3, #0
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	4b28      	ldr	r3, [pc, #160]	; (8002174 <SystemClock_Config+0xcc>)
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	4a27      	ldr	r2, [pc, #156]	; (8002174 <SystemClock_Config+0xcc>)
 80020d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020da:	6413      	str	r3, [r2, #64]	; 0x40
 80020dc:	4b25      	ldr	r3, [pc, #148]	; (8002174 <SystemClock_Config+0xcc>)
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020e8:	2300      	movs	r3, #0
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	4b22      	ldr	r3, [pc, #136]	; (8002178 <SystemClock_Config+0xd0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a21      	ldr	r2, [pc, #132]	; (8002178 <SystemClock_Config+0xd0>)
 80020f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <SystemClock_Config+0xd0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002100:	607b      	str	r3, [r7, #4]
 8002102:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002104:	2302      	movs	r3, #2
 8002106:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002108:	2301      	movs	r3, #1
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800210c:	2310      	movs	r3, #16
 800210e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002110:	2302      	movs	r3, #2
 8002112:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002114:	2300      	movs	r3, #0
 8002116:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002118:	2310      	movs	r3, #16
 800211a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800211c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002120:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002122:	2304      	movs	r3, #4
 8002124:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002126:	2304      	movs	r3, #4
 8002128:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800212a:	f107 0320 	add.w	r3, r7, #32
 800212e:	4618      	mov	r0, r3
 8002130:	f002 fb16 	bl	8004760 <HAL_RCC_OscConfig>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800213a:	f000 f9dd 	bl	80024f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800213e:	230f      	movs	r3, #15
 8002140:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002142:	2302      	movs	r3, #2
 8002144:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800214a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800214e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002154:	f107 030c 	add.w	r3, r7, #12
 8002158:	2102      	movs	r1, #2
 800215a:	4618      	mov	r0, r3
 800215c:	f002 fd78 	bl	8004c50 <HAL_RCC_ClockConfig>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002166:	f000 f9c7 	bl	80024f8 <Error_Handler>
  }
}
 800216a:	bf00      	nop
 800216c:	3750      	adds	r7, #80	; 0x50
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	40007000 	.word	0x40007000

0800217c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002182:	463b      	mov	r3, r7
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800218e:	4b21      	ldr	r3, [pc, #132]	; (8002214 <MX_ADC1_Init+0x98>)
 8002190:	4a21      	ldr	r2, [pc, #132]	; (8002218 <MX_ADC1_Init+0x9c>)
 8002192:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002194:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <MX_ADC1_Init+0x98>)
 8002196:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800219a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800219c:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <MX_ADC1_Init+0x98>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80021a2:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <MX_ADC1_Init+0x98>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80021a8:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <MX_ADC1_Init+0x98>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021ae:	4b19      	ldr	r3, [pc, #100]	; (8002214 <MX_ADC1_Init+0x98>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021b6:	4b17      	ldr	r3, [pc, #92]	; (8002214 <MX_ADC1_Init+0x98>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021bc:	4b15      	ldr	r3, [pc, #84]	; (8002214 <MX_ADC1_Init+0x98>)
 80021be:	4a17      	ldr	r2, [pc, #92]	; (800221c <MX_ADC1_Init+0xa0>)
 80021c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021c2:	4b14      	ldr	r3, [pc, #80]	; (8002214 <MX_ADC1_Init+0x98>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <MX_ADC1_Init+0x98>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <MX_ADC1_Init+0x98>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <MX_ADC1_Init+0x98>)
 80021d8:	2201      	movs	r2, #1
 80021da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021dc:	480d      	ldr	r0, [pc, #52]	; (8002214 <MX_ADC1_Init+0x98>)
 80021de:	f000 fca5 	bl	8002b2c <HAL_ADC_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80021e8:	f000 f986 	bl	80024f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80021f0:	2301      	movs	r3, #1
 80021f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021f8:	463b      	mov	r3, r7
 80021fa:	4619      	mov	r1, r3
 80021fc:	4805      	ldr	r0, [pc, #20]	; (8002214 <MX_ADC1_Init+0x98>)
 80021fe:	f000 fe59 	bl	8002eb4 <HAL_ADC_ConfigChannel>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002208:	f000 f976 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	2000020c 	.word	0x2000020c
 8002218:	40012000 	.word	0x40012000
 800221c:	0f000001 	.word	0x0f000001

08002220 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <MX_I2C1_Init+0x50>)
 8002226:	4a13      	ldr	r2, [pc, #76]	; (8002274 <MX_I2C1_Init+0x54>)
 8002228:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800222a:	4b11      	ldr	r3, [pc, #68]	; (8002270 <MX_I2C1_Init+0x50>)
 800222c:	4a12      	ldr	r2, [pc, #72]	; (8002278 <MX_I2C1_Init+0x58>)
 800222e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002230:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <MX_I2C1_Init+0x50>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <MX_I2C1_Init+0x50>)
 8002238:	2200      	movs	r2, #0
 800223a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <MX_I2C1_Init+0x50>)
 800223e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002242:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002244:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <MX_I2C1_Init+0x50>)
 8002246:	2200      	movs	r2, #0
 8002248:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <MX_I2C1_Init+0x50>)
 800224c:	2200      	movs	r2, #0
 800224e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002250:	4b07      	ldr	r3, [pc, #28]	; (8002270 <MX_I2C1_Init+0x50>)
 8002252:	2200      	movs	r2, #0
 8002254:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <MX_I2C1_Init+0x50>)
 8002258:	2200      	movs	r2, #0
 800225a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800225c:	4804      	ldr	r0, [pc, #16]	; (8002270 <MX_I2C1_Init+0x50>)
 800225e:	f001 fadb 	bl	8003818 <HAL_I2C_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002268:	f000 f946 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20000254 	.word	0x20000254
 8002274:	40005400 	.word	0x40005400
 8002278:	000186a0 	.word	0x000186a0

0800227c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002282:	f107 0308 	add.w	r3, r7, #8
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002290:	463b      	mov	r3, r7
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002298:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <MX_TIM1_Init+0x98>)
 800229a:	4a1f      	ldr	r2, [pc, #124]	; (8002318 <MX_TIM1_Init+0x9c>)
 800229c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800229e:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <MX_TIM1_Init+0x98>)
 80022a0:	2247      	movs	r2, #71	; 0x47
 80022a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a4:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <MX_TIM1_Init+0x98>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80022aa:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <MX_TIM1_Init+0x98>)
 80022ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b2:	4b18      	ldr	r3, [pc, #96]	; (8002314 <MX_TIM1_Init+0x98>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022b8:	4b16      	ldr	r3, [pc, #88]	; (8002314 <MX_TIM1_Init+0x98>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <MX_TIM1_Init+0x98>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022c4:	4813      	ldr	r0, [pc, #76]	; (8002314 <MX_TIM1_Init+0x98>)
 80022c6:	f002 fee3 	bl	8005090 <HAL_TIM_Base_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80022d0:	f000 f912 	bl	80024f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022da:	f107 0308 	add.w	r3, r7, #8
 80022de:	4619      	mov	r1, r3
 80022e0:	480c      	ldr	r0, [pc, #48]	; (8002314 <MX_TIM1_Init+0x98>)
 80022e2:	f002 ff24 	bl	800512e <HAL_TIM_ConfigClockSource>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80022ec:	f000 f904 	bl	80024f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f0:	2300      	movs	r3, #0
 80022f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022f8:	463b      	mov	r3, r7
 80022fa:	4619      	mov	r1, r3
 80022fc:	4805      	ldr	r0, [pc, #20]	; (8002314 <MX_TIM1_Init+0x98>)
 80022fe:	f003 f8f7 	bl	80054f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002308:	f000 f8f6 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800230c:	bf00      	nop
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	200002a8 	.word	0x200002a8
 8002318:	40010000 	.word	0x40010000

0800231c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <MX_USART1_UART_Init+0x4c>)
 8002322:	4a12      	ldr	r2, [pc, #72]	; (800236c <MX_USART1_UART_Init+0x50>)
 8002324:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <MX_USART1_UART_Init+0x4c>)
 8002328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800232c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800232e:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <MX_USART1_UART_Init+0x4c>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <MX_USART1_UART_Init+0x4c>)
 8002336:	2200      	movs	r2, #0
 8002338:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800233a:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <MX_USART1_UART_Init+0x4c>)
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <MX_USART1_UART_Init+0x4c>)
 8002342:	220c      	movs	r2, #12
 8002344:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <MX_USART1_UART_Init+0x4c>)
 8002348:	2200      	movs	r2, #0
 800234a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <MX_USART1_UART_Init+0x4c>)
 800234e:	2200      	movs	r2, #0
 8002350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002352:	4805      	ldr	r0, [pc, #20]	; (8002368 <MX_USART1_UART_Init+0x4c>)
 8002354:	f003 f93a 	bl	80055cc <HAL_UART_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800235e:	f000 f8cb 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200002f0 	.word	0x200002f0
 800236c:	40011000 	.word	0x40011000

08002370 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002374:	4b11      	ldr	r3, [pc, #68]	; (80023bc <MX_USART2_UART_Init+0x4c>)
 8002376:	4a12      	ldr	r2, [pc, #72]	; (80023c0 <MX_USART2_UART_Init+0x50>)
 8002378:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <MX_USART2_UART_Init+0x4c>)
 800237c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002380:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002382:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <MX_USART2_UART_Init+0x4c>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <MX_USART2_UART_Init+0x4c>)
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <MX_USART2_UART_Init+0x4c>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002394:	4b09      	ldr	r3, [pc, #36]	; (80023bc <MX_USART2_UART_Init+0x4c>)
 8002396:	220c      	movs	r2, #12
 8002398:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <MX_USART2_UART_Init+0x4c>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <MX_USART2_UART_Init+0x4c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023a6:	4805      	ldr	r0, [pc, #20]	; (80023bc <MX_USART2_UART_Init+0x4c>)
 80023a8:	f003 f910 	bl	80055cc <HAL_UART_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023b2:	f000 f8a1 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000334 	.word	0x20000334
 80023c0:	40004400 	.word	0x40004400

080023c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	; 0x28
 80023c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	60da      	str	r2, [r3, #12]
 80023d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	4b42      	ldr	r3, [pc, #264]	; (80024e8 <MX_GPIO_Init+0x124>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	4a41      	ldr	r2, [pc, #260]	; (80024e8 <MX_GPIO_Init+0x124>)
 80023e4:	f043 0304 	orr.w	r3, r3, #4
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ea:	4b3f      	ldr	r3, [pc, #252]	; (80024e8 <MX_GPIO_Init+0x124>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	4b3b      	ldr	r3, [pc, #236]	; (80024e8 <MX_GPIO_Init+0x124>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a3a      	ldr	r2, [pc, #232]	; (80024e8 <MX_GPIO_Init+0x124>)
 8002400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b38      	ldr	r3, [pc, #224]	; (80024e8 <MX_GPIO_Init+0x124>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	4b34      	ldr	r3, [pc, #208]	; (80024e8 <MX_GPIO_Init+0x124>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a33      	ldr	r2, [pc, #204]	; (80024e8 <MX_GPIO_Init+0x124>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b31      	ldr	r3, [pc, #196]	; (80024e8 <MX_GPIO_Init+0x124>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	607b      	str	r3, [r7, #4]
 8002432:	4b2d      	ldr	r3, [pc, #180]	; (80024e8 <MX_GPIO_Init+0x124>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a2c      	ldr	r2, [pc, #176]	; (80024e8 <MX_GPIO_Init+0x124>)
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b2a      	ldr	r3, [pc, #168]	; (80024e8 <MX_GPIO_Init+0x124>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800244a:	2200      	movs	r2, #0
 800244c:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8002450:	4826      	ldr	r0, [pc, #152]	; (80024ec <MX_GPIO_Init+0x128>)
 8002452:	f001 f9c7 	bl	80037e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8002456:	2200      	movs	r2, #0
 8002458:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800245c:	4824      	ldr	r0, [pc, #144]	; (80024f0 <MX_GPIO_Init+0x12c>)
 800245e:	f001 f9c1 	bl	80037e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002462:	2200      	movs	r2, #0
 8002464:	2180      	movs	r1, #128	; 0x80
 8002466:	4823      	ldr	r0, [pc, #140]	; (80024f4 <MX_GPIO_Init+0x130>)
 8002468:	f001 f9bc 	bl	80037e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800246c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002472:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	4619      	mov	r1, r3
 8002482:	481c      	ldr	r0, [pc, #112]	; (80024f4 <MX_GPIO_Init+0x130>)
 8002484:	f001 f82a 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8
                           PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002488:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800248c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248e:	2301      	movs	r3, #1
 8002490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002496:	2300      	movs	r3, #0
 8002498:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249a:	f107 0314 	add.w	r3, r7, #20
 800249e:	4619      	mov	r1, r3
 80024a0:	4812      	ldr	r0, [pc, #72]	; (80024ec <MX_GPIO_Init+0x128>)
 80024a2:	f001 f81b 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80024a6:	f44f 638e 	mov.w	r3, #1136	; 0x470
 80024aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ac:	2301      	movs	r3, #1
 80024ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b4:	2300      	movs	r3, #0
 80024b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	4619      	mov	r1, r3
 80024be:	480c      	ldr	r0, [pc, #48]	; (80024f0 <MX_GPIO_Init+0x12c>)
 80024c0:	f001 f80c 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c8:	2301      	movs	r3, #1
 80024ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d0:	2300      	movs	r3, #0
 80024d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	4619      	mov	r1, r3
 80024da:	4806      	ldr	r0, [pc, #24]	; (80024f4 <MX_GPIO_Init+0x130>)
 80024dc:	f000 fffe 	bl	80034dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024e0:	bf00      	nop
 80024e2:	3728      	adds	r7, #40	; 0x28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40020000 	.word	0x40020000
 80024f0:	40020400 	.word	0x40020400
 80024f4:	40020800 	.word	0x40020800

080024f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024fc:	b672      	cpsid	i
}
 80024fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002500:	e7fe      	b.n	8002500 <Error_Handler+0x8>
	...

08002504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <HAL_MspInit+0x4c>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	4a0f      	ldr	r2, [pc, #60]	; (8002550 <HAL_MspInit+0x4c>)
 8002514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002518:	6453      	str	r3, [r2, #68]	; 0x44
 800251a:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <HAL_MspInit+0x4c>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_MspInit+0x4c>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	4a08      	ldr	r2, [pc, #32]	; (8002550 <HAL_MspInit+0x4c>)
 8002530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002534:	6413      	str	r3, [r2, #64]	; 0x40
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_MspInit+0x4c>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002542:	2007      	movs	r0, #7
 8002544:	f000 ff96 	bl	8003474 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40023800 	.word	0x40023800

08002554 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a17      	ldr	r2, [pc, #92]	; (80025d0 <HAL_ADC_MspInit+0x7c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d127      	bne.n	80025c6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	4b16      	ldr	r3, [pc, #88]	; (80025d4 <HAL_ADC_MspInit+0x80>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	4a15      	ldr	r2, [pc, #84]	; (80025d4 <HAL_ADC_MspInit+0x80>)
 8002580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002584:	6453      	str	r3, [r2, #68]	; 0x44
 8002586:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <HAL_ADC_MspInit+0x80>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <HAL_ADC_MspInit+0x80>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	4a0e      	ldr	r2, [pc, #56]	; (80025d4 <HAL_ADC_MspInit+0x80>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6313      	str	r3, [r2, #48]	; 0x30
 80025a2:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <HAL_ADC_MspInit+0x80>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025ae:	2301      	movs	r3, #1
 80025b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025b2:	2303      	movs	r3, #3
 80025b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	4619      	mov	r1, r3
 80025c0:	4805      	ldr	r0, [pc, #20]	; (80025d8 <HAL_ADC_MspInit+0x84>)
 80025c2:	f000 ff8b 	bl	80034dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025c6:	bf00      	nop
 80025c8:	3728      	adds	r7, #40	; 0x28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40012000 	.word	0x40012000
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40020000 	.word	0x40020000

080025dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08a      	sub	sp, #40	; 0x28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 0314 	add.w	r3, r7, #20
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a19      	ldr	r2, [pc, #100]	; (8002660 <HAL_I2C_MspInit+0x84>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d12c      	bne.n	8002658 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	4b18      	ldr	r3, [pc, #96]	; (8002664 <HAL_I2C_MspInit+0x88>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a17      	ldr	r2, [pc, #92]	; (8002664 <HAL_I2C_MspInit+0x88>)
 8002608:	f043 0302 	orr.w	r3, r3, #2
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b15      	ldr	r3, [pc, #84]	; (8002664 <HAL_I2C_MspInit+0x88>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800261a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800261e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002620:	2312      	movs	r3, #18
 8002622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002628:	2303      	movs	r3, #3
 800262a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800262c:	2304      	movs	r3, #4
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002630:	f107 0314 	add.w	r3, r7, #20
 8002634:	4619      	mov	r1, r3
 8002636:	480c      	ldr	r0, [pc, #48]	; (8002668 <HAL_I2C_MspInit+0x8c>)
 8002638:	f000 ff50 	bl	80034dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <HAL_I2C_MspInit+0x88>)
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	4a07      	ldr	r2, [pc, #28]	; (8002664 <HAL_I2C_MspInit+0x88>)
 8002646:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800264a:	6413      	str	r3, [r2, #64]	; 0x40
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_I2C_MspInit+0x88>)
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002658:	bf00      	nop
 800265a:	3728      	adds	r7, #40	; 0x28
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40005400 	.word	0x40005400
 8002664:	40023800 	.word	0x40023800
 8002668:	40020400 	.word	0x40020400

0800266c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <HAL_TIM_Base_MspInit+0x3c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d10d      	bne.n	800269a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <HAL_TIM_Base_MspInit+0x40>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	4a09      	ldr	r2, [pc, #36]	; (80026ac <HAL_TIM_Base_MspInit+0x40>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6453      	str	r3, [r2, #68]	; 0x44
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <HAL_TIM_Base_MspInit+0x40>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800269a:	bf00      	nop
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40010000 	.word	0x40010000
 80026ac:	40023800 	.word	0x40023800

080026b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08c      	sub	sp, #48	; 0x30
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	f107 031c 	add.w	r3, r7, #28
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a32      	ldr	r2, [pc, #200]	; (8002798 <HAL_UART_MspInit+0xe8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d12d      	bne.n	800272e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	4b31      	ldr	r3, [pc, #196]	; (800279c <HAL_UART_MspInit+0xec>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	4a30      	ldr	r2, [pc, #192]	; (800279c <HAL_UART_MspInit+0xec>)
 80026dc:	f043 0310 	orr.w	r3, r3, #16
 80026e0:	6453      	str	r3, [r2, #68]	; 0x44
 80026e2:	4b2e      	ldr	r3, [pc, #184]	; (800279c <HAL_UART_MspInit+0xec>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	61bb      	str	r3, [r7, #24]
 80026ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	4b2a      	ldr	r3, [pc, #168]	; (800279c <HAL_UART_MspInit+0xec>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	4a29      	ldr	r2, [pc, #164]	; (800279c <HAL_UART_MspInit+0xec>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	6313      	str	r3, [r2, #48]	; 0x30
 80026fe:	4b27      	ldr	r3, [pc, #156]	; (800279c <HAL_UART_MspInit+0xec>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800270a:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800270e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002710:	2302      	movs	r3, #2
 8002712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002718:	2303      	movs	r3, #3
 800271a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800271c:	2307      	movs	r3, #7
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002720:	f107 031c 	add.w	r3, r7, #28
 8002724:	4619      	mov	r1, r3
 8002726:	481e      	ldr	r0, [pc, #120]	; (80027a0 <HAL_UART_MspInit+0xf0>)
 8002728:	f000 fed8 	bl	80034dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800272c:	e030      	b.n	8002790 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a1c      	ldr	r2, [pc, #112]	; (80027a4 <HAL_UART_MspInit+0xf4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d12b      	bne.n	8002790 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002738:	2300      	movs	r3, #0
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	4b17      	ldr	r3, [pc, #92]	; (800279c <HAL_UART_MspInit+0xec>)
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	4a16      	ldr	r2, [pc, #88]	; (800279c <HAL_UART_MspInit+0xec>)
 8002742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002746:	6413      	str	r3, [r2, #64]	; 0x40
 8002748:	4b14      	ldr	r3, [pc, #80]	; (800279c <HAL_UART_MspInit+0xec>)
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	4b10      	ldr	r3, [pc, #64]	; (800279c <HAL_UART_MspInit+0xec>)
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	4a0f      	ldr	r2, [pc, #60]	; (800279c <HAL_UART_MspInit+0xec>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6313      	str	r3, [r2, #48]	; 0x30
 8002764:	4b0d      	ldr	r3, [pc, #52]	; (800279c <HAL_UART_MspInit+0xec>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002770:	230c      	movs	r3, #12
 8002772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	2302      	movs	r3, #2
 8002776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277c:	2303      	movs	r3, #3
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002780:	2307      	movs	r3, #7
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	4619      	mov	r1, r3
 800278a:	4805      	ldr	r0, [pc, #20]	; (80027a0 <HAL_UART_MspInit+0xf0>)
 800278c:	f000 fea6 	bl	80034dc <HAL_GPIO_Init>
}
 8002790:	bf00      	nop
 8002792:	3730      	adds	r7, #48	; 0x30
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40011000 	.word	0x40011000
 800279c:	40023800 	.word	0x40023800
 80027a0:	40020000 	.word	0x40020000
 80027a4:	40004400 	.word	0x40004400

080027a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027ac:	e7fe      	b.n	80027ac <NMI_Handler+0x4>

080027ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027b2:	e7fe      	b.n	80027b2 <HardFault_Handler+0x4>

080027b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <MemManage_Handler+0x4>

080027ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027be:	e7fe      	b.n	80027be <BusFault_Handler+0x4>

080027c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027c4:	e7fe      	b.n	80027c4 <UsageFault_Handler+0x4>

080027c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027f4:	f000 f956 	bl	8002aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027f8:	bf00      	nop
 80027fa:	bd80      	pop	{r7, pc}

080027fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return 1;
 8002800:	2301      	movs	r3, #1
}
 8002802:	4618      	mov	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <_kill>:

int _kill(int pid, int sig)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002816:	f004 fa31 	bl	8006c7c <__errno>
 800281a:	4603      	mov	r3, r0
 800281c:	2216      	movs	r2, #22
 800281e:	601a      	str	r2, [r3, #0]
  return -1;
 8002820:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <_exit>:

void _exit (int status)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002834:	f04f 31ff 	mov.w	r1, #4294967295
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ffe7 	bl	800280c <_kill>
  while (1) {}    /* Make sure we hang here */
 800283e:	e7fe      	b.n	800283e <_exit+0x12>

08002840 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	e00a      	b.n	8002868 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002852:	f3af 8000 	nop.w
 8002856:	4601      	mov	r1, r0
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	60ba      	str	r2, [r7, #8]
 800285e:	b2ca      	uxtb	r2, r1
 8002860:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	3301      	adds	r3, #1
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	429a      	cmp	r2, r3
 800286e:	dbf0      	blt.n	8002852 <_read+0x12>
  }

  return len;
 8002870:	687b      	ldr	r3, [r7, #4]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b086      	sub	sp, #24
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	e009      	b.n	80028a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	60ba      	str	r2, [r7, #8]
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3301      	adds	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	dbf1      	blt.n	800288c <_write+0x12>
  }
  return len;
 80028a8:	687b      	ldr	r3, [r7, #4]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <_close>:

int _close(int file)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028da:	605a      	str	r2, [r3, #4]
  return 0;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <_isatty>:

int _isatty(int file)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028f2:	2301      	movs	r3, #1
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002924:	4a14      	ldr	r2, [pc, #80]	; (8002978 <_sbrk+0x5c>)
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <_sbrk+0x60>)
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002930:	4b13      	ldr	r3, [pc, #76]	; (8002980 <_sbrk+0x64>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d102      	bne.n	800293e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <_sbrk+0x64>)
 800293a:	4a12      	ldr	r2, [pc, #72]	; (8002984 <_sbrk+0x68>)
 800293c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800293e:	4b10      	ldr	r3, [pc, #64]	; (8002980 <_sbrk+0x64>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	429a      	cmp	r2, r3
 800294a:	d207      	bcs.n	800295c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800294c:	f004 f996 	bl	8006c7c <__errno>
 8002950:	4603      	mov	r3, r0
 8002952:	220c      	movs	r2, #12
 8002954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002956:	f04f 33ff 	mov.w	r3, #4294967295
 800295a:	e009      	b.n	8002970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800295c:	4b08      	ldr	r3, [pc, #32]	; (8002980 <_sbrk+0x64>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002962:	4b07      	ldr	r3, [pc, #28]	; (8002980 <_sbrk+0x64>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	4a05      	ldr	r2, [pc, #20]	; (8002980 <_sbrk+0x64>)
 800296c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800296e:	68fb      	ldr	r3, [r7, #12]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20020000 	.word	0x20020000
 800297c:	00000400 	.word	0x00000400
 8002980:	20000378 	.word	0x20000378
 8002984:	200004d0 	.word	0x200004d0

08002988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <SystemInit+0x20>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	4a05      	ldr	r2, [pc, #20]	; (80029a8 <SystemInit+0x20>)
 8002994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029b0:	480d      	ldr	r0, [pc, #52]	; (80029e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029b2:	490e      	ldr	r1, [pc, #56]	; (80029ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029b4:	4a0e      	ldr	r2, [pc, #56]	; (80029f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029b8:	e002      	b.n	80029c0 <LoopCopyDataInit>

080029ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029be:	3304      	adds	r3, #4

080029c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029c4:	d3f9      	bcc.n	80029ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029c6:	4a0b      	ldr	r2, [pc, #44]	; (80029f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029c8:	4c0b      	ldr	r4, [pc, #44]	; (80029f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029cc:	e001      	b.n	80029d2 <LoopFillZerobss>

080029ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029d0:	3204      	adds	r2, #4

080029d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029d4:	d3fb      	bcc.n	80029ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029d6:	f7ff ffd7 	bl	8002988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029da:	f004 f955 	bl	8006c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029de:	f7fe fab9 	bl	8000f54 <main>
  bx  lr    
 80029e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029ec:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80029f0:	0800a5c0 	.word	0x0800a5c0
  ldr r2, =_sbss
 80029f4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80029f8:	200004cc 	.word	0x200004cc

080029fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029fc:	e7fe      	b.n	80029fc <ADC_IRQHandler>
	...

08002a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a04:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <HAL_Init+0x40>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a0d      	ldr	r2, [pc, #52]	; (8002a40 <HAL_Init+0x40>)
 8002a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_Init+0x40>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <HAL_Init+0x40>)
 8002a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a1c:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <HAL_Init+0x40>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a07      	ldr	r2, [pc, #28]	; (8002a40 <HAL_Init+0x40>)
 8002a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a28:	2003      	movs	r0, #3
 8002a2a:	f000 fd23 	bl	8003474 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f000 f808 	bl	8002a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a34:	f7ff fd66 	bl	8002504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023c00 	.word	0x40023c00

08002a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a4c:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_InitTick+0x54>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <HAL_InitTick+0x58>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	4619      	mov	r1, r3
 8002a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fd2d 	bl	80034c2 <HAL_SYSTICK_Config>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e00e      	b.n	8002a90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b0f      	cmp	r3, #15
 8002a76:	d80a      	bhi.n	8002a8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a80:	f000 fd03 	bl	800348a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a84:	4a06      	ldr	r2, [pc, #24]	; (8002aa0 <HAL_InitTick+0x5c>)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e000      	b.n	8002a90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	2000000c 	.word	0x2000000c
 8002a9c:	20000014 	.word	0x20000014
 8002aa0:	20000010 	.word	0x20000010

08002aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <HAL_IncTick+0x20>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	461a      	mov	r2, r3
 8002aae:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_IncTick+0x24>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <HAL_IncTick+0x24>)
 8002ab6:	6013      	str	r3, [r2, #0]
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000014 	.word	0x20000014
 8002ac8:	2000037c 	.word	0x2000037c

08002acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return uwTick;
 8002ad0:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <HAL_GetTick+0x14>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	2000037c 	.word	0x2000037c

08002ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aec:	f7ff ffee 	bl	8002acc <HAL_GetTick>
 8002af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afc:	d005      	beq.n	8002b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002afe:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <HAL_Delay+0x44>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4413      	add	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b0a:	bf00      	nop
 8002b0c:	f7ff ffde 	bl	8002acc <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d8f7      	bhi.n	8002b0c <HAL_Delay+0x28>
  {
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	bf00      	nop
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000014 	.word	0x20000014

08002b2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e033      	b.n	8002baa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff fd02 	bl	8002554 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d118      	bne.n	8002b9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b72:	f023 0302 	bic.w	r3, r3, #2
 8002b76:	f043 0202 	orr.w	r2, r3, #2
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 faca 	bl	8003118 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f023 0303 	bic.w	r3, r3, #3
 8002b92:	f043 0201 	orr.w	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40
 8002b9a:	e001      	b.n	8002ba0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_ADC_Start+0x1a>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e097      	b.n	8002cfe <HAL_ADC_Start+0x14a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d018      	beq.n	8002c16 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bf4:	4b45      	ldr	r3, [pc, #276]	; (8002d0c <HAL_ADC_Start+0x158>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a45      	ldr	r2, [pc, #276]	; (8002d10 <HAL_ADC_Start+0x15c>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	0c9a      	lsrs	r2, r3, #18
 8002c00:	4613      	mov	r3, r2
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	4413      	add	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c08:	e002      	b.n	8002c10 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f9      	bne.n	8002c0a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d15f      	bne.n	8002ce4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c2c:	f023 0301 	bic.w	r3, r3, #1
 8002c30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c62:	d106      	bne.n	8002c72 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c68:	f023 0206 	bic.w	r2, r3, #6
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	645a      	str	r2, [r3, #68]	; 0x44
 8002c70:	e002      	b.n	8002c78 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c80:	4b24      	ldr	r3, [pc, #144]	; (8002d14 <HAL_ADC_Start+0x160>)
 8002c82:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c8c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10f      	bne.n	8002cba <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d129      	bne.n	8002cfc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	e020      	b.n	8002cfc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a16      	ldr	r2, [pc, #88]	; (8002d18 <HAL_ADC_Start+0x164>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d11b      	bne.n	8002cfc <HAL_ADC_Start+0x148>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d114      	bne.n	8002cfc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ce0:	609a      	str	r2, [r3, #8]
 8002ce2:	e00b      	b.n	8002cfc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	f043 0210 	orr.w	r2, r3, #16
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	f043 0201 	orr.w	r2, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	2000000c 	.word	0x2000000c
 8002d10:	431bde83 	.word	0x431bde83
 8002d14:	40012300 	.word	0x40012300
 8002d18:	40012000 	.word	0x40012000

08002d1c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_ADC_Stop+0x16>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e021      	b.n	8002d76 <HAL_ADC_Stop+0x5a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0201 	bic.w	r2, r2, #1
 8002d48:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d109      	bne.n	8002d6c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	f043 0201 	orr.w	r2, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d9e:	d113      	bne.n	8002dc8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dae:	d10b      	bne.n	8002dc8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	f043 0220 	orr.w	r2, r3, #32
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e063      	b.n	8002e90 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002dc8:	f7ff fe80 	bl	8002acc <HAL_GetTick>
 8002dcc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002dce:	e021      	b.n	8002e14 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd6:	d01d      	beq.n	8002e14 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d007      	beq.n	8002dee <HAL_ADC_PollForConversion+0x6c>
 8002dde:	f7ff fe75 	bl	8002acc <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d212      	bcs.n	8002e14 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d00b      	beq.n	8002e14 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	f043 0204 	orr.w	r2, r3, #4
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e03d      	b.n	8002e90 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d1d6      	bne.n	8002dd0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f06f 0212 	mvn.w	r2, #18
 8002e2a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d123      	bne.n	8002e8e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d11f      	bne.n	8002e8e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d006      	beq.n	8002e6a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d111      	bne.n	8002e8e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d105      	bne.n	8002e8e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f043 0201 	orr.w	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x1c>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e113      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x244>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b09      	cmp	r3, #9
 8002ede:	d925      	bls.n	8002f2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68d9      	ldr	r1, [r3, #12]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	4613      	mov	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3b1e      	subs	r3, #30
 8002ef6:	2207      	movs	r2, #7
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43da      	mvns	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	400a      	ands	r2, r1
 8002f04:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68d9      	ldr	r1, [r3, #12]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	4618      	mov	r0, r3
 8002f18:	4603      	mov	r3, r0
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	4403      	add	r3, r0
 8002f1e:	3b1e      	subs	r3, #30
 8002f20:	409a      	lsls	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	60da      	str	r2, [r3, #12]
 8002f2a:	e022      	b.n	8002f72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6919      	ldr	r1, [r3, #16]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	4413      	add	r3, r2
 8002f40:	2207      	movs	r2, #7
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43da      	mvns	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	400a      	ands	r2, r1
 8002f4e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6919      	ldr	r1, [r3, #16]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	4618      	mov	r0, r3
 8002f62:	4603      	mov	r3, r0
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4403      	add	r3, r0
 8002f68:	409a      	lsls	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b06      	cmp	r3, #6
 8002f78:	d824      	bhi.n	8002fc4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	3b05      	subs	r3, #5
 8002f8c:	221f      	movs	r2, #31
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43da      	mvns	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	400a      	ands	r2, r1
 8002f9a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	4618      	mov	r0, r3
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3b05      	subs	r3, #5
 8002fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	635a      	str	r2, [r3, #52]	; 0x34
 8002fc2:	e04c      	b.n	800305e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b0c      	cmp	r3, #12
 8002fca:	d824      	bhi.n	8003016 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	3b23      	subs	r3, #35	; 0x23
 8002fde:	221f      	movs	r2, #31
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43da      	mvns	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	400a      	ands	r2, r1
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	3b23      	subs	r3, #35	; 0x23
 8003008:	fa00 f203 	lsl.w	r2, r0, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
 8003014:	e023      	b.n	800305e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	3b41      	subs	r3, #65	; 0x41
 8003028:	221f      	movs	r2, #31
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43da      	mvns	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	400a      	ands	r2, r1
 8003036:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	b29b      	uxth	r3, r3
 8003044:	4618      	mov	r0, r3
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	3b41      	subs	r3, #65	; 0x41
 8003052:	fa00 f203 	lsl.w	r2, r0, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800305e:	4b29      	ldr	r3, [pc, #164]	; (8003104 <HAL_ADC_ConfigChannel+0x250>)
 8003060:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a28      	ldr	r2, [pc, #160]	; (8003108 <HAL_ADC_ConfigChannel+0x254>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d10f      	bne.n	800308c <HAL_ADC_ConfigChannel+0x1d8>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b12      	cmp	r3, #18
 8003072:	d10b      	bne.n	800308c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a1d      	ldr	r2, [pc, #116]	; (8003108 <HAL_ADC_ConfigChannel+0x254>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d12b      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x23a>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a1c      	ldr	r2, [pc, #112]	; (800310c <HAL_ADC_ConfigChannel+0x258>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d003      	beq.n	80030a8 <HAL_ADC_ConfigChannel+0x1f4>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b11      	cmp	r3, #17
 80030a6:	d122      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a11      	ldr	r2, [pc, #68]	; (800310c <HAL_ADC_ConfigChannel+0x258>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d111      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030ca:	4b11      	ldr	r3, [pc, #68]	; (8003110 <HAL_ADC_ConfigChannel+0x25c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a11      	ldr	r2, [pc, #68]	; (8003114 <HAL_ADC_ConfigChannel+0x260>)
 80030d0:	fba2 2303 	umull	r2, r3, r2, r3
 80030d4:	0c9a      	lsrs	r2, r3, #18
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030e0:	e002      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	3b01      	subs	r3, #1
 80030e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f9      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	40012300 	.word	0x40012300
 8003108:	40012000 	.word	0x40012000
 800310c:	10000012 	.word	0x10000012
 8003110:	2000000c 	.word	0x2000000c
 8003114:	431bde83 	.word	0x431bde83

08003118 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003120:	4b79      	ldr	r3, [pc, #484]	; (8003308 <ADC_Init+0x1f0>)
 8003122:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	431a      	orrs	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800314c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	021a      	lsls	r2, r3, #8
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003170:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003192:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6899      	ldr	r1, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	4a58      	ldr	r2, [pc, #352]	; (800330c <ADC_Init+0x1f4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d022      	beq.n	80031f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6899      	ldr	r1, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6899      	ldr	r1, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	e00f      	b.n	8003216 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003204:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003214:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0202 	bic.w	r2, r2, #2
 8003224:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6899      	ldr	r1, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	7e1b      	ldrb	r3, [r3, #24]
 8003230:	005a      	lsls	r2, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d01b      	beq.n	800327c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003252:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003262:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6859      	ldr	r1, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	3b01      	subs	r3, #1
 8003270:	035a      	lsls	r2, r3, #13
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	e007      	b.n	800328c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800328a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800329a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	051a      	lsls	r2, r3, #20
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6899      	ldr	r1, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032ce:	025a      	lsls	r2, r3, #9
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6899      	ldr	r1, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	029a      	lsls	r2, r3, #10
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	609a      	str	r2, [r3, #8]
}
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	40012300 	.word	0x40012300
 800330c:	0f000001 	.word	0x0f000001

08003310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003320:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <__NVIC_SetPriorityGrouping+0x44>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800332c:	4013      	ands	r3, r2
 800332e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800333c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003342:	4a04      	ldr	r2, [pc, #16]	; (8003354 <__NVIC_SetPriorityGrouping+0x44>)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	60d3      	str	r3, [r2, #12]
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <__NVIC_GetPriorityGrouping+0x18>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	0a1b      	lsrs	r3, r3, #8
 8003362:	f003 0307 	and.w	r3, r3, #7
}
 8003366:	4618      	mov	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	6039      	str	r1, [r7, #0]
 800337e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003384:	2b00      	cmp	r3, #0
 8003386:	db0a      	blt.n	800339e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	b2da      	uxtb	r2, r3
 800338c:	490c      	ldr	r1, [pc, #48]	; (80033c0 <__NVIC_SetPriority+0x4c>)
 800338e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003392:	0112      	lsls	r2, r2, #4
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	440b      	add	r3, r1
 8003398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800339c:	e00a      	b.n	80033b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	4908      	ldr	r1, [pc, #32]	; (80033c4 <__NVIC_SetPriority+0x50>)
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	3b04      	subs	r3, #4
 80033ac:	0112      	lsls	r2, r2, #4
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	440b      	add	r3, r1
 80033b2:	761a      	strb	r2, [r3, #24]
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	e000e100 	.word	0xe000e100
 80033c4:	e000ed00 	.word	0xe000ed00

080033c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b089      	sub	sp, #36	; 0x24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f1c3 0307 	rsb	r3, r3, #7
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	bf28      	it	cs
 80033e6:	2304      	movcs	r3, #4
 80033e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	3304      	adds	r3, #4
 80033ee:	2b06      	cmp	r3, #6
 80033f0:	d902      	bls.n	80033f8 <NVIC_EncodePriority+0x30>
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	3b03      	subs	r3, #3
 80033f6:	e000      	b.n	80033fa <NVIC_EncodePriority+0x32>
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43da      	mvns	r2, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	401a      	ands	r2, r3
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003410:	f04f 31ff 	mov.w	r1, #4294967295
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	fa01 f303 	lsl.w	r3, r1, r3
 800341a:	43d9      	mvns	r1, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003420:	4313      	orrs	r3, r2
         );
}
 8003422:	4618      	mov	r0, r3
 8003424:	3724      	adds	r7, #36	; 0x24
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
	...

08003430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3b01      	subs	r3, #1
 800343c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003440:	d301      	bcc.n	8003446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003442:	2301      	movs	r3, #1
 8003444:	e00f      	b.n	8003466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003446:	4a0a      	ldr	r2, [pc, #40]	; (8003470 <SysTick_Config+0x40>)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3b01      	subs	r3, #1
 800344c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800344e:	210f      	movs	r1, #15
 8003450:	f04f 30ff 	mov.w	r0, #4294967295
 8003454:	f7ff ff8e 	bl	8003374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <SysTick_Config+0x40>)
 800345a:	2200      	movs	r2, #0
 800345c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800345e:	4b04      	ldr	r3, [pc, #16]	; (8003470 <SysTick_Config+0x40>)
 8003460:	2207      	movs	r2, #7
 8003462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	e000e010 	.word	0xe000e010

08003474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff ff47 	bl	8003310 <__NVIC_SetPriorityGrouping>
}
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800348a:	b580      	push	{r7, lr}
 800348c:	b086      	sub	sp, #24
 800348e:	af00      	add	r7, sp, #0
 8003490:	4603      	mov	r3, r0
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	607a      	str	r2, [r7, #4]
 8003496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800349c:	f7ff ff5c 	bl	8003358 <__NVIC_GetPriorityGrouping>
 80034a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	68b9      	ldr	r1, [r7, #8]
 80034a6:	6978      	ldr	r0, [r7, #20]
 80034a8:	f7ff ff8e 	bl	80033c8 <NVIC_EncodePriority>
 80034ac:	4602      	mov	r2, r0
 80034ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034b2:	4611      	mov	r1, r2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff ff5d 	bl	8003374 <__NVIC_SetPriority>
}
 80034ba:	bf00      	nop
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff ffb0 	bl	8003430 <SysTick_Config>
 80034d0:	4603      	mov	r3, r0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034dc:	b480      	push	{r7}
 80034de:	b089      	sub	sp, #36	; 0x24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
 80034f6:	e159      	b.n	80037ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034f8:	2201      	movs	r2, #1
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	4013      	ands	r3, r2
 800350a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	429a      	cmp	r2, r3
 8003512:	f040 8148 	bne.w	80037a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	2b01      	cmp	r3, #1
 8003520:	d005      	beq.n	800352e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800352a:	2b02      	cmp	r3, #2
 800352c:	d130      	bne.n	8003590 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	2203      	movs	r2, #3
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43db      	mvns	r3, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4013      	ands	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4313      	orrs	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003564:	2201      	movs	r2, #1
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4013      	ands	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	091b      	lsrs	r3, r3, #4
 800357a:	f003 0201 	and.w	r2, r3, #1
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	2b03      	cmp	r3, #3
 800359a:	d017      	beq.n	80035cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	2203      	movs	r2, #3
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d123      	bne.n	8003620 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	08da      	lsrs	r2, r3, #3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3208      	adds	r2, #8
 80035e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	220f      	movs	r2, #15
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	08da      	lsrs	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3208      	adds	r2, #8
 800361a:	69b9      	ldr	r1, [r7, #24]
 800361c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	2203      	movs	r2, #3
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 0203 	and.w	r2, r3, #3
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80a2 	beq.w	80037a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	4b57      	ldr	r3, [pc, #348]	; (80037c4 <HAL_GPIO_Init+0x2e8>)
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	4a56      	ldr	r2, [pc, #344]	; (80037c4 <HAL_GPIO_Init+0x2e8>)
 800366c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003670:	6453      	str	r3, [r2, #68]	; 0x44
 8003672:	4b54      	ldr	r3, [pc, #336]	; (80037c4 <HAL_GPIO_Init+0x2e8>)
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800367e:	4a52      	ldr	r2, [pc, #328]	; (80037c8 <HAL_GPIO_Init+0x2ec>)
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	089b      	lsrs	r3, r3, #2
 8003684:	3302      	adds	r3, #2
 8003686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800368a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	220f      	movs	r2, #15
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43db      	mvns	r3, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4013      	ands	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a49      	ldr	r2, [pc, #292]	; (80037cc <HAL_GPIO_Init+0x2f0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d019      	beq.n	80036de <HAL_GPIO_Init+0x202>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a48      	ldr	r2, [pc, #288]	; (80037d0 <HAL_GPIO_Init+0x2f4>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d013      	beq.n	80036da <HAL_GPIO_Init+0x1fe>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a47      	ldr	r2, [pc, #284]	; (80037d4 <HAL_GPIO_Init+0x2f8>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d00d      	beq.n	80036d6 <HAL_GPIO_Init+0x1fa>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a46      	ldr	r2, [pc, #280]	; (80037d8 <HAL_GPIO_Init+0x2fc>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d007      	beq.n	80036d2 <HAL_GPIO_Init+0x1f6>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a45      	ldr	r2, [pc, #276]	; (80037dc <HAL_GPIO_Init+0x300>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d101      	bne.n	80036ce <HAL_GPIO_Init+0x1f2>
 80036ca:	2304      	movs	r3, #4
 80036cc:	e008      	b.n	80036e0 <HAL_GPIO_Init+0x204>
 80036ce:	2307      	movs	r3, #7
 80036d0:	e006      	b.n	80036e0 <HAL_GPIO_Init+0x204>
 80036d2:	2303      	movs	r3, #3
 80036d4:	e004      	b.n	80036e0 <HAL_GPIO_Init+0x204>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e002      	b.n	80036e0 <HAL_GPIO_Init+0x204>
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <HAL_GPIO_Init+0x204>
 80036de:	2300      	movs	r3, #0
 80036e0:	69fa      	ldr	r2, [r7, #28]
 80036e2:	f002 0203 	and.w	r2, r2, #3
 80036e6:	0092      	lsls	r2, r2, #2
 80036e8:	4093      	lsls	r3, r2
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036f0:	4935      	ldr	r1, [pc, #212]	; (80037c8 <HAL_GPIO_Init+0x2ec>)
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	089b      	lsrs	r3, r3, #2
 80036f6:	3302      	adds	r3, #2
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036fe:	4b38      	ldr	r3, [pc, #224]	; (80037e0 <HAL_GPIO_Init+0x304>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	43db      	mvns	r3, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4013      	ands	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003722:	4a2f      	ldr	r2, [pc, #188]	; (80037e0 <HAL_GPIO_Init+0x304>)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003728:	4b2d      	ldr	r3, [pc, #180]	; (80037e0 <HAL_GPIO_Init+0x304>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	43db      	mvns	r3, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800374c:	4a24      	ldr	r2, [pc, #144]	; (80037e0 <HAL_GPIO_Init+0x304>)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003752:	4b23      	ldr	r3, [pc, #140]	; (80037e0 <HAL_GPIO_Init+0x304>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	43db      	mvns	r3, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4013      	ands	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003776:	4a1a      	ldr	r2, [pc, #104]	; (80037e0 <HAL_GPIO_Init+0x304>)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800377c:	4b18      	ldr	r3, [pc, #96]	; (80037e0 <HAL_GPIO_Init+0x304>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037a0:	4a0f      	ldr	r2, [pc, #60]	; (80037e0 <HAL_GPIO_Init+0x304>)
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	3301      	adds	r3, #1
 80037aa:	61fb      	str	r3, [r7, #28]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	2b0f      	cmp	r3, #15
 80037b0:	f67f aea2 	bls.w	80034f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop
 80037b8:	3724      	adds	r7, #36	; 0x24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40023800 	.word	0x40023800
 80037c8:	40013800 	.word	0x40013800
 80037cc:	40020000 	.word	0x40020000
 80037d0:	40020400 	.word	0x40020400
 80037d4:	40020800 	.word	0x40020800
 80037d8:	40020c00 	.word	0x40020c00
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40013c00 	.word	0x40013c00

080037e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	807b      	strh	r3, [r7, #2]
 80037f0:	4613      	mov	r3, r2
 80037f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037f4:	787b      	ldrb	r3, [r7, #1]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037fa:	887a      	ldrh	r2, [r7, #2]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003800:	e003      	b.n	800380a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003802:	887b      	ldrh	r3, [r7, #2]
 8003804:	041a      	lsls	r2, r3, #16
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	619a      	str	r2, [r3, #24]
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
	...

08003818 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e12b      	b.n	8003a82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fe fecc 	bl	80025dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2224      	movs	r2, #36	; 0x24
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0201 	bic.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800386a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800387a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800387c:	f001 fbe0 	bl	8005040 <HAL_RCC_GetPCLK1Freq>
 8003880:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4a81      	ldr	r2, [pc, #516]	; (8003a8c <HAL_I2C_Init+0x274>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d807      	bhi.n	800389c <HAL_I2C_Init+0x84>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4a80      	ldr	r2, [pc, #512]	; (8003a90 <HAL_I2C_Init+0x278>)
 8003890:	4293      	cmp	r3, r2
 8003892:	bf94      	ite	ls
 8003894:	2301      	movls	r3, #1
 8003896:	2300      	movhi	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	e006      	b.n	80038aa <HAL_I2C_Init+0x92>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4a7d      	ldr	r2, [pc, #500]	; (8003a94 <HAL_I2C_Init+0x27c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	bf94      	ite	ls
 80038a4:	2301      	movls	r3, #1
 80038a6:	2300      	movhi	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e0e7      	b.n	8003a82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4a78      	ldr	r2, [pc, #480]	; (8003a98 <HAL_I2C_Init+0x280>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	0c9b      	lsrs	r3, r3, #18
 80038bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4a6a      	ldr	r2, [pc, #424]	; (8003a8c <HAL_I2C_Init+0x274>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d802      	bhi.n	80038ec <HAL_I2C_Init+0xd4>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	3301      	adds	r3, #1
 80038ea:	e009      	b.n	8003900 <HAL_I2C_Init+0xe8>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	4a69      	ldr	r2, [pc, #420]	; (8003a9c <HAL_I2C_Init+0x284>)
 80038f8:	fba2 2303 	umull	r2, r3, r2, r3
 80038fc:	099b      	lsrs	r3, r3, #6
 80038fe:	3301      	adds	r3, #1
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	430b      	orrs	r3, r1
 8003906:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003912:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	495c      	ldr	r1, [pc, #368]	; (8003a8c <HAL_I2C_Init+0x274>)
 800391c:	428b      	cmp	r3, r1
 800391e:	d819      	bhi.n	8003954 <HAL_I2C_Init+0x13c>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	1e59      	subs	r1, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	fbb1 f3f3 	udiv	r3, r1, r3
 800392e:	1c59      	adds	r1, r3, #1
 8003930:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003934:	400b      	ands	r3, r1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <HAL_I2C_Init+0x138>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1e59      	subs	r1, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	fbb1 f3f3 	udiv	r3, r1, r3
 8003948:	3301      	adds	r3, #1
 800394a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394e:	e051      	b.n	80039f4 <HAL_I2C_Init+0x1dc>
 8003950:	2304      	movs	r3, #4
 8003952:	e04f      	b.n	80039f4 <HAL_I2C_Init+0x1dc>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d111      	bne.n	8003980 <HAL_I2C_Init+0x168>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	1e58      	subs	r0, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6859      	ldr	r1, [r3, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	440b      	add	r3, r1
 800396a:	fbb0 f3f3 	udiv	r3, r0, r3
 800396e:	3301      	adds	r3, #1
 8003970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003974:	2b00      	cmp	r3, #0
 8003976:	bf0c      	ite	eq
 8003978:	2301      	moveq	r3, #1
 800397a:	2300      	movne	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	e012      	b.n	80039a6 <HAL_I2C_Init+0x18e>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	1e58      	subs	r0, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6859      	ldr	r1, [r3, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	0099      	lsls	r1, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	fbb0 f3f3 	udiv	r3, r0, r3
 8003996:	3301      	adds	r3, #1
 8003998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_I2C_Init+0x196>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e022      	b.n	80039f4 <HAL_I2C_Init+0x1dc>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10e      	bne.n	80039d4 <HAL_I2C_Init+0x1bc>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	1e58      	subs	r0, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6859      	ldr	r1, [r3, #4]
 80039be:	460b      	mov	r3, r1
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	440b      	add	r3, r1
 80039c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c8:	3301      	adds	r3, #1
 80039ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039d2:	e00f      	b.n	80039f4 <HAL_I2C_Init+0x1dc>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1e58      	subs	r0, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6859      	ldr	r1, [r3, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	0099      	lsls	r1, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ea:	3301      	adds	r3, #1
 80039ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	6809      	ldr	r1, [r1, #0]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69da      	ldr	r2, [r3, #28]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6911      	ldr	r1, [r2, #16]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	68d2      	ldr	r2, [r2, #12]
 8003a2e:	4311      	orrs	r1, r2
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6812      	ldr	r2, [r2, #0]
 8003a34:	430b      	orrs	r3, r1
 8003a36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695a      	ldr	r2, [r3, #20]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	000186a0 	.word	0x000186a0
 8003a90:	001e847f 	.word	0x001e847f
 8003a94:	003d08ff 	.word	0x003d08ff
 8003a98:	431bde83 	.word	0x431bde83
 8003a9c:	10624dd3 	.word	0x10624dd3

08003aa0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	607a      	str	r2, [r7, #4]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	460b      	mov	r3, r1
 8003aae:	817b      	strh	r3, [r7, #10]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ab4:	f7ff f80a 	bl	8002acc <HAL_GetTick>
 8003ab8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	f040 80e0 	bne.w	8003c88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	2319      	movs	r3, #25
 8003ace:	2201      	movs	r2, #1
 8003ad0:	4970      	ldr	r1, [pc, #448]	; (8003c94 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fc66 	bl	80043a4 <I2C_WaitOnFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e0d3      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_I2C_Master_Transmit+0x50>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e0cc      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d007      	beq.n	8003b16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0201 	orr.w	r2, r2, #1
 8003b14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2221      	movs	r2, #33	; 0x21
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2210      	movs	r2, #16
 8003b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	893a      	ldrh	r2, [r7, #8]
 8003b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4a50      	ldr	r2, [pc, #320]	; (8003c98 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b58:	8979      	ldrh	r1, [r7, #10]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	6a3a      	ldr	r2, [r7, #32]
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 fad0 	bl	8004104 <I2C_MasterRequestWrite>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e08d      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b84:	e066      	b.n	8003c54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	6a39      	ldr	r1, [r7, #32]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fce0 	bl	8004550 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00d      	beq.n	8003bb2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d107      	bne.n	8003bae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e06b      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	781a      	ldrb	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d11b      	bne.n	8003c28 <HAL_I2C_Master_Transmit+0x188>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d017      	beq.n	8003c28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	781a      	ldrb	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	6a39      	ldr	r1, [r7, #32]
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 fcd0 	bl	80045d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00d      	beq.n	8003c54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d107      	bne.n	8003c50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e01a      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d194      	bne.n	8003b86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	e000      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c88:	2302      	movs	r3, #2
  }
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	00100002 	.word	0x00100002
 8003c98:	ffff0000 	.word	0xffff0000

08003c9c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08c      	sub	sp, #48	; 0x30
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	607a      	str	r2, [r7, #4]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	460b      	mov	r3, r1
 8003caa:	817b      	strh	r3, [r7, #10]
 8003cac:	4613      	mov	r3, r2
 8003cae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cb0:	f7fe ff0c 	bl	8002acc <HAL_GetTick>
 8003cb4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b20      	cmp	r3, #32
 8003cc0:	f040 820b 	bne.w	80040da <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	2319      	movs	r3, #25
 8003cca:	2201      	movs	r2, #1
 8003ccc:	497c      	ldr	r1, [pc, #496]	; (8003ec0 <HAL_I2C_Master_Receive+0x224>)
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 fb68 	bl	80043a4 <I2C_WaitOnFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e1fe      	b.n	80040dc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_I2C_Master_Receive+0x50>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e1f7      	b.n	80040dc <HAL_I2C_Master_Receive+0x440>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d007      	beq.n	8003d12 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 0201 	orr.w	r2, r2, #1
 8003d10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2222      	movs	r2, #34	; 0x22
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2210      	movs	r2, #16
 8003d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	893a      	ldrh	r2, [r7, #8]
 8003d42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4a5c      	ldr	r2, [pc, #368]	; (8003ec4 <HAL_I2C_Master_Receive+0x228>)
 8003d52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d54:	8979      	ldrh	r1, [r7, #10]
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 fa54 	bl	8004208 <I2C_MasterRequestRead>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e1b8      	b.n	80040dc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d113      	bne.n	8003d9a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d72:	2300      	movs	r3, #0
 8003d74:	623b      	str	r3, [r7, #32]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	623b      	str	r3, [r7, #32]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	623b      	str	r3, [r7, #32]
 8003d86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	e18c      	b.n	80040b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d11b      	bne.n	8003dda <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	61fb      	str	r3, [r7, #28]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	e16c      	b.n	80040b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d11b      	bne.n	8003e1a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	61bb      	str	r3, [r7, #24]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	61bb      	str	r3, [r7, #24]
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	e14c      	b.n	80040b4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e40:	e138      	b.n	80040b4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	f200 80f1 	bhi.w	800402e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d123      	bne.n	8003e9c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 fbfb 	bl	8004654 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e139      	b.n	80040dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e9a:	e10b      	b.n	80040b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d14e      	bne.n	8003f42 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eaa:	2200      	movs	r2, #0
 8003eac:	4906      	ldr	r1, [pc, #24]	; (8003ec8 <HAL_I2C_Master_Receive+0x22c>)
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 fa78 	bl	80043a4 <I2C_WaitOnFlagUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e10e      	b.n	80040dc <HAL_I2C_Master_Receive+0x440>
 8003ebe:	bf00      	nop
 8003ec0:	00100002 	.word	0x00100002
 8003ec4:	ffff0000 	.word	0xffff0000
 8003ec8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f40:	e0b8      	b.n	80040b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f48:	2200      	movs	r2, #0
 8003f4a:	4966      	ldr	r1, [pc, #408]	; (80040e4 <HAL_I2C_Master_Receive+0x448>)
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 fa29 	bl	80043a4 <I2C_WaitOnFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0bf      	b.n	80040dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691a      	ldr	r2, [r3, #16]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	494f      	ldr	r1, [pc, #316]	; (80040e4 <HAL_I2C_Master_Receive+0x448>)
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 f9fb 	bl	80043a4 <I2C_WaitOnFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e091      	b.n	80040dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800402c:	e042      	b.n	80040b4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800402e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004030:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 fb0e 	bl	8004654 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e04c      	b.n	80040dc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b04      	cmp	r3, #4
 8004080:	d118      	bne.n	80040b4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f47f aec2 	bne.w	8003e42 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	e000      	b.n	80040dc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80040da:	2302      	movs	r3, #2
  }
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3728      	adds	r7, #40	; 0x28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	00010004 	.word	0x00010004

080040e8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f6:	b2db      	uxtb	r3, r3
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b088      	sub	sp, #32
 8004108:	af02      	add	r7, sp, #8
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	607a      	str	r2, [r7, #4]
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	460b      	mov	r3, r1
 8004112:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2b08      	cmp	r3, #8
 800411e:	d006      	beq.n	800412e <I2C_MasterRequestWrite+0x2a>
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d003      	beq.n	800412e <I2C_MasterRequestWrite+0x2a>
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800412c:	d108      	bne.n	8004140 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	e00b      	b.n	8004158 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	2b12      	cmp	r3, #18
 8004146:	d107      	bne.n	8004158 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004156:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f91d 	bl	80043a4 <I2C_WaitOnFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00d      	beq.n	800418c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800417e:	d103      	bne.n	8004188 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004186:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e035      	b.n	80041f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004194:	d108      	bne.n	80041a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004196:	897b      	ldrh	r3, [r7, #10]
 8004198:	b2db      	uxtb	r3, r3
 800419a:	461a      	mov	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041a4:	611a      	str	r2, [r3, #16]
 80041a6:	e01b      	b.n	80041e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041a8:	897b      	ldrh	r3, [r7, #10]
 80041aa:	11db      	asrs	r3, r3, #7
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	f003 0306 	and.w	r3, r3, #6
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	f063 030f 	orn	r3, r3, #15
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	490e      	ldr	r1, [pc, #56]	; (8004200 <I2C_MasterRequestWrite+0xfc>)
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f943 	bl	8004452 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e010      	b.n	80041f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041d6:	897b      	ldrh	r3, [r7, #10]
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	4907      	ldr	r1, [pc, #28]	; (8004204 <I2C_MasterRequestWrite+0x100>)
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f933 	bl	8004452 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	00010008 	.word	0x00010008
 8004204:	00010002 	.word	0x00010002

08004208 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af02      	add	r7, sp, #8
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	607a      	str	r2, [r7, #4]
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	460b      	mov	r3, r1
 8004216:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800422c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b08      	cmp	r3, #8
 8004232:	d006      	beq.n	8004242 <I2C_MasterRequestRead+0x3a>
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d003      	beq.n	8004242 <I2C_MasterRequestRead+0x3a>
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004240:	d108      	bne.n	8004254 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	e00b      	b.n	800426c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	2b11      	cmp	r3, #17
 800425a:	d107      	bne.n	800426c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800426a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f893 	bl	80043a4 <I2C_WaitOnFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00d      	beq.n	80042a0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004292:	d103      	bne.n	800429c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800429a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e079      	b.n	8004394 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042a8:	d108      	bne.n	80042bc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042aa:	897b      	ldrh	r3, [r7, #10]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	611a      	str	r2, [r3, #16]
 80042ba:	e05f      	b.n	800437c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042bc:	897b      	ldrh	r3, [r7, #10]
 80042be:	11db      	asrs	r3, r3, #7
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	f003 0306 	and.w	r3, r3, #6
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	f063 030f 	orn	r3, r3, #15
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	4930      	ldr	r1, [pc, #192]	; (800439c <I2C_MasterRequestRead+0x194>)
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 f8b9 	bl	8004452 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e054      	b.n	8004394 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042ea:	897b      	ldrh	r3, [r7, #10]
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	4929      	ldr	r1, [pc, #164]	; (80043a0 <I2C_MasterRequestRead+0x198>)
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 f8a9 	bl	8004452 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e044      	b.n	8004394 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430a:	2300      	movs	r3, #0
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	613b      	str	r3, [r7, #16]
 800431e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800432e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f831 	bl	80043a4 <I2C_WaitOnFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00d      	beq.n	8004364 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004356:	d103      	bne.n	8004360 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800435e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e017      	b.n	8004394 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004364:	897b      	ldrh	r3, [r7, #10]
 8004366:	11db      	asrs	r3, r3, #7
 8004368:	b2db      	uxtb	r3, r3
 800436a:	f003 0306 	and.w	r3, r3, #6
 800436e:	b2db      	uxtb	r3, r3
 8004370:	f063 030e 	orn	r3, r3, #14
 8004374:	b2da      	uxtb	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	4907      	ldr	r1, [pc, #28]	; (80043a0 <I2C_MasterRequestRead+0x198>)
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f865 	bl	8004452 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	00010008 	.word	0x00010008
 80043a0:	00010002 	.word	0x00010002

080043a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	4613      	mov	r3, r2
 80043b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043b4:	e025      	b.n	8004402 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043bc:	d021      	beq.n	8004402 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043be:	f7fe fb85 	bl	8002acc <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d302      	bcc.n	80043d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d116      	bne.n	8004402 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f043 0220 	orr.w	r2, r3, #32
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e023      	b.n	800444a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	0c1b      	lsrs	r3, r3, #16
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b01      	cmp	r3, #1
 800440a:	d10d      	bne.n	8004428 <I2C_WaitOnFlagUntilTimeout+0x84>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	43da      	mvns	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4013      	ands	r3, r2
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	bf0c      	ite	eq
 800441e:	2301      	moveq	r3, #1
 8004420:	2300      	movne	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	461a      	mov	r2, r3
 8004426:	e00c      	b.n	8004442 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	43da      	mvns	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4013      	ands	r3, r2
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	bf0c      	ite	eq
 800443a:	2301      	moveq	r3, #1
 800443c:	2300      	movne	r3, #0
 800443e:	b2db      	uxtb	r3, r3
 8004440:	461a      	mov	r2, r3
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	429a      	cmp	r2, r3
 8004446:	d0b6      	beq.n	80043b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b084      	sub	sp, #16
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	607a      	str	r2, [r7, #4]
 800445e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004460:	e051      	b.n	8004506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004470:	d123      	bne.n	80044ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004480:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800448a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f043 0204 	orr.w	r2, r3, #4
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e046      	b.n	8004548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c0:	d021      	beq.n	8004506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c2:	f7fe fb03 	bl	8002acc <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d302      	bcc.n	80044d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d116      	bne.n	8004506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	f043 0220 	orr.w	r2, r3, #32
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e020      	b.n	8004548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	0c1b      	lsrs	r3, r3, #16
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	d10c      	bne.n	800452a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	43da      	mvns	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4013      	ands	r3, r2
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	bf14      	ite	ne
 8004522:	2301      	movne	r3, #1
 8004524:	2300      	moveq	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	e00b      	b.n	8004542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	43da      	mvns	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	4013      	ands	r3, r2
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	bf14      	ite	ne
 800453c:	2301      	movne	r3, #1
 800453e:	2300      	moveq	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d18d      	bne.n	8004462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800455c:	e02d      	b.n	80045ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 f8ce 	bl	8004700 <I2C_IsAcknowledgeFailed>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e02d      	b.n	80045ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004574:	d021      	beq.n	80045ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004576:	f7fe faa9 	bl	8002acc <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	429a      	cmp	r2, r3
 8004584:	d302      	bcc.n	800458c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d116      	bne.n	80045ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2220      	movs	r2, #32
 8004596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	f043 0220 	orr.w	r2, r3, #32
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e007      	b.n	80045ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c4:	2b80      	cmp	r3, #128	; 0x80
 80045c6:	d1ca      	bne.n	800455e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b084      	sub	sp, #16
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045de:	e02d      	b.n	800463c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 f88d 	bl	8004700 <I2C_IsAcknowledgeFailed>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e02d      	b.n	800464c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f6:	d021      	beq.n	800463c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f8:	f7fe fa68 	bl	8002acc <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	429a      	cmp	r2, r3
 8004606:	d302      	bcc.n	800460e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d116      	bne.n	800463c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	f043 0220 	orr.w	r2, r3, #32
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e007      	b.n	800464c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	2b04      	cmp	r3, #4
 8004648:	d1ca      	bne.n	80045e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004660:	e042      	b.n	80046e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	f003 0310 	and.w	r3, r3, #16
 800466c:	2b10      	cmp	r3, #16
 800466e:	d119      	bne.n	80046a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f06f 0210 	mvn.w	r2, #16
 8004678:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e029      	b.n	80046f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a4:	f7fe fa12 	bl	8002acc <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d302      	bcc.n	80046ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d116      	bne.n	80046e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	f043 0220 	orr.w	r2, r3, #32
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e007      	b.n	80046f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f2:	2b40      	cmp	r3, #64	; 0x40
 80046f4:	d1b5      	bne.n	8004662 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004716:	d11b      	bne.n	8004750 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004720:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	f043 0204 	orr.w	r2, r3, #4
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e000      	b.n	8004752 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e267      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d075      	beq.n	800486a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800477e:	4b88      	ldr	r3, [pc, #544]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 030c 	and.w	r3, r3, #12
 8004786:	2b04      	cmp	r3, #4
 8004788:	d00c      	beq.n	80047a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800478a:	4b85      	ldr	r3, [pc, #532]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004792:	2b08      	cmp	r3, #8
 8004794:	d112      	bne.n	80047bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004796:	4b82      	ldr	r3, [pc, #520]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800479e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047a2:	d10b      	bne.n	80047bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a4:	4b7e      	ldr	r3, [pc, #504]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d05b      	beq.n	8004868 <HAL_RCC_OscConfig+0x108>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d157      	bne.n	8004868 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e242      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c4:	d106      	bne.n	80047d4 <HAL_RCC_OscConfig+0x74>
 80047c6:	4b76      	ldr	r3, [pc, #472]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a75      	ldr	r2, [pc, #468]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80047cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	e01d      	b.n	8004810 <HAL_RCC_OscConfig+0xb0>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047dc:	d10c      	bne.n	80047f8 <HAL_RCC_OscConfig+0x98>
 80047de:	4b70      	ldr	r3, [pc, #448]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a6f      	ldr	r2, [pc, #444]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80047e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	4b6d      	ldr	r3, [pc, #436]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a6c      	ldr	r2, [pc, #432]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80047f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	e00b      	b.n	8004810 <HAL_RCC_OscConfig+0xb0>
 80047f8:	4b69      	ldr	r3, [pc, #420]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a68      	ldr	r2, [pc, #416]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80047fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	4b66      	ldr	r3, [pc, #408]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a65      	ldr	r2, [pc, #404]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 800480a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800480e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d013      	beq.n	8004840 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004818:	f7fe f958 	bl	8002acc <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004820:	f7fe f954 	bl	8002acc <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b64      	cmp	r3, #100	; 0x64
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e207      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004832:	4b5b      	ldr	r3, [pc, #364]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f0      	beq.n	8004820 <HAL_RCC_OscConfig+0xc0>
 800483e:	e014      	b.n	800486a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004840:	f7fe f944 	bl	8002acc <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004848:	f7fe f940 	bl	8002acc <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b64      	cmp	r3, #100	; 0x64
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e1f3      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800485a:	4b51      	ldr	r3, [pc, #324]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1f0      	bne.n	8004848 <HAL_RCC_OscConfig+0xe8>
 8004866:	e000      	b.n	800486a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d063      	beq.n	800493e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004876:	4b4a      	ldr	r3, [pc, #296]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 030c 	and.w	r3, r3, #12
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004882:	4b47      	ldr	r3, [pc, #284]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800488a:	2b08      	cmp	r3, #8
 800488c:	d11c      	bne.n	80048c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800488e:	4b44      	ldr	r3, [pc, #272]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d116      	bne.n	80048c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800489a:	4b41      	ldr	r3, [pc, #260]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d005      	beq.n	80048b2 <HAL_RCC_OscConfig+0x152>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d001      	beq.n	80048b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e1c7      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b2:	4b3b      	ldr	r3, [pc, #236]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	4937      	ldr	r1, [pc, #220]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048c6:	e03a      	b.n	800493e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d020      	beq.n	8004912 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048d0:	4b34      	ldr	r3, [pc, #208]	; (80049a4 <HAL_RCC_OscConfig+0x244>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d6:	f7fe f8f9 	bl	8002acc <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048de:	f7fe f8f5 	bl	8002acc <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e1a8      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f0:	4b2b      	ldr	r3, [pc, #172]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f0      	beq.n	80048de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048fc:	4b28      	ldr	r3, [pc, #160]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	4925      	ldr	r1, [pc, #148]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 800490c:	4313      	orrs	r3, r2
 800490e:	600b      	str	r3, [r1, #0]
 8004910:	e015      	b.n	800493e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004912:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <HAL_RCC_OscConfig+0x244>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004918:	f7fe f8d8 	bl	8002acc <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004920:	f7fe f8d4 	bl	8002acc <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e187      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004932:	4b1b      	ldr	r3, [pc, #108]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d036      	beq.n	80049b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d016      	beq.n	8004980 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004952:	4b15      	ldr	r3, [pc, #84]	; (80049a8 <HAL_RCC_OscConfig+0x248>)
 8004954:	2201      	movs	r2, #1
 8004956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004958:	f7fe f8b8 	bl	8002acc <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004960:	f7fe f8b4 	bl	8002acc <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e167      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004972:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <HAL_RCC_OscConfig+0x240>)
 8004974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCC_OscConfig+0x200>
 800497e:	e01b      	b.n	80049b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004980:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <HAL_RCC_OscConfig+0x248>)
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004986:	f7fe f8a1 	bl	8002acc <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800498c:	e00e      	b.n	80049ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800498e:	f7fe f89d 	bl	8002acc <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d907      	bls.n	80049ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e150      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
 80049a0:	40023800 	.word	0x40023800
 80049a4:	42470000 	.word	0x42470000
 80049a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049ac:	4b88      	ldr	r3, [pc, #544]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 80049ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1ea      	bne.n	800498e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 8097 	beq.w	8004af4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049c6:	2300      	movs	r3, #0
 80049c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ca:	4b81      	ldr	r3, [pc, #516]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10f      	bne.n	80049f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049d6:	2300      	movs	r3, #0
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	4b7d      	ldr	r3, [pc, #500]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	4a7c      	ldr	r2, [pc, #496]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 80049e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e4:	6413      	str	r3, [r2, #64]	; 0x40
 80049e6:	4b7a      	ldr	r3, [pc, #488]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ee:	60bb      	str	r3, [r7, #8]
 80049f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049f2:	2301      	movs	r3, #1
 80049f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f6:	4b77      	ldr	r3, [pc, #476]	; (8004bd4 <HAL_RCC_OscConfig+0x474>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d118      	bne.n	8004a34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a02:	4b74      	ldr	r3, [pc, #464]	; (8004bd4 <HAL_RCC_OscConfig+0x474>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a73      	ldr	r2, [pc, #460]	; (8004bd4 <HAL_RCC_OscConfig+0x474>)
 8004a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a0e:	f7fe f85d 	bl	8002acc <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a16:	f7fe f859 	bl	8002acc <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e10c      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a28:	4b6a      	ldr	r3, [pc, #424]	; (8004bd4 <HAL_RCC_OscConfig+0x474>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0f0      	beq.n	8004a16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d106      	bne.n	8004a4a <HAL_RCC_OscConfig+0x2ea>
 8004a3c:	4b64      	ldr	r3, [pc, #400]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a40:	4a63      	ldr	r2, [pc, #396]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004a42:	f043 0301 	orr.w	r3, r3, #1
 8004a46:	6713      	str	r3, [r2, #112]	; 0x70
 8004a48:	e01c      	b.n	8004a84 <HAL_RCC_OscConfig+0x324>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2b05      	cmp	r3, #5
 8004a50:	d10c      	bne.n	8004a6c <HAL_RCC_OscConfig+0x30c>
 8004a52:	4b5f      	ldr	r3, [pc, #380]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a56:	4a5e      	ldr	r2, [pc, #376]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004a58:	f043 0304 	orr.w	r3, r3, #4
 8004a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a5e:	4b5c      	ldr	r3, [pc, #368]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a62:	4a5b      	ldr	r2, [pc, #364]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004a64:	f043 0301 	orr.w	r3, r3, #1
 8004a68:	6713      	str	r3, [r2, #112]	; 0x70
 8004a6a:	e00b      	b.n	8004a84 <HAL_RCC_OscConfig+0x324>
 8004a6c:	4b58      	ldr	r3, [pc, #352]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	4a57      	ldr	r2, [pc, #348]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004a72:	f023 0301 	bic.w	r3, r3, #1
 8004a76:	6713      	str	r3, [r2, #112]	; 0x70
 8004a78:	4b55      	ldr	r3, [pc, #340]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7c:	4a54      	ldr	r2, [pc, #336]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004a7e:	f023 0304 	bic.w	r3, r3, #4
 8004a82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d015      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8c:	f7fe f81e 	bl	8002acc <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a92:	e00a      	b.n	8004aaa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a94:	f7fe f81a 	bl	8002acc <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e0cb      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aaa:	4b49      	ldr	r3, [pc, #292]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0ee      	beq.n	8004a94 <HAL_RCC_OscConfig+0x334>
 8004ab6:	e014      	b.n	8004ae2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ab8:	f7fe f808 	bl	8002acc <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004abe:	e00a      	b.n	8004ad6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac0:	f7fe f804 	bl	8002acc <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e0b5      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad6:	4b3e      	ldr	r3, [pc, #248]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1ee      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ae2:	7dfb      	ldrb	r3, [r7, #23]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d105      	bne.n	8004af4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ae8:	4b39      	ldr	r3, [pc, #228]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	4a38      	ldr	r2, [pc, #224]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004af2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 80a1 	beq.w	8004c40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004afe:	4b34      	ldr	r3, [pc, #208]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d05c      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d141      	bne.n	8004b96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b12:	4b31      	ldr	r3, [pc, #196]	; (8004bd8 <HAL_RCC_OscConfig+0x478>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b18:	f7fd ffd8 	bl	8002acc <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b20:	f7fd ffd4 	bl	8002acc <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e087      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b32:	4b27      	ldr	r3, [pc, #156]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f0      	bne.n	8004b20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69da      	ldr	r2, [r3, #28]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	019b      	lsls	r3, r3, #6
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b54:	085b      	lsrs	r3, r3, #1
 8004b56:	3b01      	subs	r3, #1
 8004b58:	041b      	lsls	r3, r3, #16
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	061b      	lsls	r3, r3, #24
 8004b62:	491b      	ldr	r1, [pc, #108]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b68:	4b1b      	ldr	r3, [pc, #108]	; (8004bd8 <HAL_RCC_OscConfig+0x478>)
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6e:	f7fd ffad 	bl	8002acc <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b76:	f7fd ffa9 	bl	8002acc <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e05c      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b88:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0f0      	beq.n	8004b76 <HAL_RCC_OscConfig+0x416>
 8004b94:	e054      	b.n	8004c40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b96:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <HAL_RCC_OscConfig+0x478>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fd ff96 	bl	8002acc <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ba4:	f7fd ff92 	bl	8002acc <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e045      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bb6:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <HAL_RCC_OscConfig+0x470>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x444>
 8004bc2:	e03d      	b.n	8004c40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d107      	bne.n	8004bdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e038      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	40007000 	.word	0x40007000
 8004bd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bdc:	4b1b      	ldr	r3, [pc, #108]	; (8004c4c <HAL_RCC_OscConfig+0x4ec>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d028      	beq.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d121      	bne.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d11a      	bne.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d111      	bne.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c22:	085b      	lsrs	r3, r3, #1
 8004c24:	3b01      	subs	r3, #1
 8004c26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d107      	bne.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d001      	beq.n	8004c40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e000      	b.n	8004c42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40023800 	.word	0x40023800

08004c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e0cc      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c64:	4b68      	ldr	r3, [pc, #416]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d90c      	bls.n	8004c8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c72:	4b65      	ldr	r3, [pc, #404]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7a:	4b63      	ldr	r3, [pc, #396]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d001      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e0b8      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d020      	beq.n	8004cda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ca4:	4b59      	ldr	r3, [pc, #356]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4a58      	ldr	r2, [pc, #352]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cbc:	4b53      	ldr	r3, [pc, #332]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4a52      	ldr	r2, [pc, #328]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc8:	4b50      	ldr	r3, [pc, #320]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	494d      	ldr	r1, [pc, #308]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d044      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d107      	bne.n	8004cfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cee:	4b47      	ldr	r3, [pc, #284]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d119      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e07f      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d003      	beq.n	8004d0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d107      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d0e:	4b3f      	ldr	r3, [pc, #252]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d109      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e06f      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d1e:	4b3b      	ldr	r3, [pc, #236]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e067      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d2e:	4b37      	ldr	r3, [pc, #220]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f023 0203 	bic.w	r2, r3, #3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	4934      	ldr	r1, [pc, #208]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d40:	f7fd fec4 	bl	8002acc <HAL_GetTick>
 8004d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d46:	e00a      	b.n	8004d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d48:	f7fd fec0 	bl	8002acc <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e04f      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d5e:	4b2b      	ldr	r3, [pc, #172]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 020c 	and.w	r2, r3, #12
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d1eb      	bne.n	8004d48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d70:	4b25      	ldr	r3, [pc, #148]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d20c      	bcs.n	8004d98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7e:	4b22      	ldr	r3, [pc, #136]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d86:	4b20      	ldr	r3, [pc, #128]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d001      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e032      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d008      	beq.n	8004db6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004da4:	4b19      	ldr	r3, [pc, #100]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	4916      	ldr	r1, [pc, #88]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d009      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dc2:	4b12      	ldr	r3, [pc, #72]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	490e      	ldr	r1, [pc, #56]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dd6:	f000 f821 	bl	8004e1c <HAL_RCC_GetSysClockFreq>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	490a      	ldr	r1, [pc, #40]	; (8004e10 <HAL_RCC_ClockConfig+0x1c0>)
 8004de8:	5ccb      	ldrb	r3, [r1, r3]
 8004dea:	fa22 f303 	lsr.w	r3, r2, r3
 8004dee:	4a09      	ldr	r2, [pc, #36]	; (8004e14 <HAL_RCC_ClockConfig+0x1c4>)
 8004df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004df2:	4b09      	ldr	r3, [pc, #36]	; (8004e18 <HAL_RCC_ClockConfig+0x1c8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fd fe24 	bl	8002a44 <HAL_InitTick>

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40023c00 	.word	0x40023c00
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	0800a12c 	.word	0x0800a12c
 8004e14:	2000000c 	.word	0x2000000c
 8004e18:	20000010 	.word	0x20000010

08004e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e20:	b094      	sub	sp, #80	; 0x50
 8004e22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	647b      	str	r3, [r7, #68]	; 0x44
 8004e28:	2300      	movs	r3, #0
 8004e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e34:	4b79      	ldr	r3, [pc, #484]	; (800501c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 030c 	and.w	r3, r3, #12
 8004e3c:	2b08      	cmp	r3, #8
 8004e3e:	d00d      	beq.n	8004e5c <HAL_RCC_GetSysClockFreq+0x40>
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	f200 80e1 	bhi.w	8005008 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <HAL_RCC_GetSysClockFreq+0x34>
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d003      	beq.n	8004e56 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e4e:	e0db      	b.n	8005008 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e50:	4b73      	ldr	r3, [pc, #460]	; (8005020 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e54:	e0db      	b.n	800500e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e56:	4b73      	ldr	r3, [pc, #460]	; (8005024 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e5a:	e0d8      	b.n	800500e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e5c:	4b6f      	ldr	r3, [pc, #444]	; (800501c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e66:	4b6d      	ldr	r3, [pc, #436]	; (800501c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d063      	beq.n	8004f3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e72:	4b6a      	ldr	r3, [pc, #424]	; (800501c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	099b      	lsrs	r3, r3, #6
 8004e78:	2200      	movs	r2, #0
 8004e7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e84:	633b      	str	r3, [r7, #48]	; 0x30
 8004e86:	2300      	movs	r3, #0
 8004e88:	637b      	str	r3, [r7, #52]	; 0x34
 8004e8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e8e:	4622      	mov	r2, r4
 8004e90:	462b      	mov	r3, r5
 8004e92:	f04f 0000 	mov.w	r0, #0
 8004e96:	f04f 0100 	mov.w	r1, #0
 8004e9a:	0159      	lsls	r1, r3, #5
 8004e9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ea0:	0150      	lsls	r0, r2, #5
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	1a51      	subs	r1, r2, r1
 8004eaa:	6139      	str	r1, [r7, #16]
 8004eac:	4629      	mov	r1, r5
 8004eae:	eb63 0301 	sbc.w	r3, r3, r1
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ec0:	4659      	mov	r1, fp
 8004ec2:	018b      	lsls	r3, r1, #6
 8004ec4:	4651      	mov	r1, sl
 8004ec6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004eca:	4651      	mov	r1, sl
 8004ecc:	018a      	lsls	r2, r1, #6
 8004ece:	4651      	mov	r1, sl
 8004ed0:	ebb2 0801 	subs.w	r8, r2, r1
 8004ed4:	4659      	mov	r1, fp
 8004ed6:	eb63 0901 	sbc.w	r9, r3, r1
 8004eda:	f04f 0200 	mov.w	r2, #0
 8004ede:	f04f 0300 	mov.w	r3, #0
 8004ee2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ee6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eee:	4690      	mov	r8, r2
 8004ef0:	4699      	mov	r9, r3
 8004ef2:	4623      	mov	r3, r4
 8004ef4:	eb18 0303 	adds.w	r3, r8, r3
 8004ef8:	60bb      	str	r3, [r7, #8]
 8004efa:	462b      	mov	r3, r5
 8004efc:	eb49 0303 	adc.w	r3, r9, r3
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	f04f 0300 	mov.w	r3, #0
 8004f0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f0e:	4629      	mov	r1, r5
 8004f10:	024b      	lsls	r3, r1, #9
 8004f12:	4621      	mov	r1, r4
 8004f14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f18:	4621      	mov	r1, r4
 8004f1a:	024a      	lsls	r2, r1, #9
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f22:	2200      	movs	r2, #0
 8004f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f2c:	f7fb fe94 	bl	8000c58 <__aeabi_uldivmod>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	4613      	mov	r3, r2
 8004f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f38:	e058      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f3a:	4b38      	ldr	r3, [pc, #224]	; (800501c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	099b      	lsrs	r3, r3, #6
 8004f40:	2200      	movs	r2, #0
 8004f42:	4618      	mov	r0, r3
 8004f44:	4611      	mov	r1, r2
 8004f46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f4a:	623b      	str	r3, [r7, #32]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f54:	4642      	mov	r2, r8
 8004f56:	464b      	mov	r3, r9
 8004f58:	f04f 0000 	mov.w	r0, #0
 8004f5c:	f04f 0100 	mov.w	r1, #0
 8004f60:	0159      	lsls	r1, r3, #5
 8004f62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f66:	0150      	lsls	r0, r2, #5
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4641      	mov	r1, r8
 8004f6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f72:	4649      	mov	r1, r9
 8004f74:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f8c:	ebb2 040a 	subs.w	r4, r2, sl
 8004f90:	eb63 050b 	sbc.w	r5, r3, fp
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	f04f 0300 	mov.w	r3, #0
 8004f9c:	00eb      	lsls	r3, r5, #3
 8004f9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fa2:	00e2      	lsls	r2, r4, #3
 8004fa4:	4614      	mov	r4, r2
 8004fa6:	461d      	mov	r5, r3
 8004fa8:	4643      	mov	r3, r8
 8004faa:	18e3      	adds	r3, r4, r3
 8004fac:	603b      	str	r3, [r7, #0]
 8004fae:	464b      	mov	r3, r9
 8004fb0:	eb45 0303 	adc.w	r3, r5, r3
 8004fb4:	607b      	str	r3, [r7, #4]
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fc2:	4629      	mov	r1, r5
 8004fc4:	028b      	lsls	r3, r1, #10
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fcc:	4621      	mov	r1, r4
 8004fce:	028a      	lsls	r2, r1, #10
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	61fa      	str	r2, [r7, #28]
 8004fdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fe0:	f7fb fe3a 	bl	8000c58 <__aeabi_uldivmod>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4613      	mov	r3, r2
 8004fea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fec:	4b0b      	ldr	r3, [pc, #44]	; (800501c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	0c1b      	lsrs	r3, r3, #16
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ffc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005000:	fbb2 f3f3 	udiv	r3, r2, r3
 8005004:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005006:	e002      	b.n	800500e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005008:	4b05      	ldr	r3, [pc, #20]	; (8005020 <HAL_RCC_GetSysClockFreq+0x204>)
 800500a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800500c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800500e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005010:	4618      	mov	r0, r3
 8005012:	3750      	adds	r7, #80	; 0x50
 8005014:	46bd      	mov	sp, r7
 8005016:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800501a:	bf00      	nop
 800501c:	40023800 	.word	0x40023800
 8005020:	00f42400 	.word	0x00f42400
 8005024:	007a1200 	.word	0x007a1200

08005028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800502c:	4b03      	ldr	r3, [pc, #12]	; (800503c <HAL_RCC_GetHCLKFreq+0x14>)
 800502e:	681b      	ldr	r3, [r3, #0]
}
 8005030:	4618      	mov	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	2000000c 	.word	0x2000000c

08005040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005044:	f7ff fff0 	bl	8005028 <HAL_RCC_GetHCLKFreq>
 8005048:	4602      	mov	r2, r0
 800504a:	4b05      	ldr	r3, [pc, #20]	; (8005060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	0a9b      	lsrs	r3, r3, #10
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	4903      	ldr	r1, [pc, #12]	; (8005064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005056:	5ccb      	ldrb	r3, [r1, r3]
 8005058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800505c:	4618      	mov	r0, r3
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40023800 	.word	0x40023800
 8005064:	0800a13c 	.word	0x0800a13c

08005068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800506c:	f7ff ffdc 	bl	8005028 <HAL_RCC_GetHCLKFreq>
 8005070:	4602      	mov	r2, r0
 8005072:	4b05      	ldr	r3, [pc, #20]	; (8005088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	0b5b      	lsrs	r3, r3, #13
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	4903      	ldr	r1, [pc, #12]	; (800508c <HAL_RCC_GetPCLK2Freq+0x24>)
 800507e:	5ccb      	ldrb	r3, [r1, r3]
 8005080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005084:	4618      	mov	r0, r3
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40023800 	.word	0x40023800
 800508c:	0800a13c 	.word	0x0800a13c

08005090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e041      	b.n	8005126 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d106      	bne.n	80050bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7fd fad8 	bl	800266c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4619      	mov	r1, r3
 80050ce:	4610      	mov	r0, r2
 80050d0:	f000 f8f4 	bl	80052bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005142:	2b01      	cmp	r3, #1
 8005144:	d101      	bne.n	800514a <HAL_TIM_ConfigClockSource+0x1c>
 8005146:	2302      	movs	r3, #2
 8005148:	e0b4      	b.n	80052b4 <HAL_TIM_ConfigClockSource+0x186>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2202      	movs	r2, #2
 8005156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005168:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005170:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005182:	d03e      	beq.n	8005202 <HAL_TIM_ConfigClockSource+0xd4>
 8005184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005188:	f200 8087 	bhi.w	800529a <HAL_TIM_ConfigClockSource+0x16c>
 800518c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005190:	f000 8086 	beq.w	80052a0 <HAL_TIM_ConfigClockSource+0x172>
 8005194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005198:	d87f      	bhi.n	800529a <HAL_TIM_ConfigClockSource+0x16c>
 800519a:	2b70      	cmp	r3, #112	; 0x70
 800519c:	d01a      	beq.n	80051d4 <HAL_TIM_ConfigClockSource+0xa6>
 800519e:	2b70      	cmp	r3, #112	; 0x70
 80051a0:	d87b      	bhi.n	800529a <HAL_TIM_ConfigClockSource+0x16c>
 80051a2:	2b60      	cmp	r3, #96	; 0x60
 80051a4:	d050      	beq.n	8005248 <HAL_TIM_ConfigClockSource+0x11a>
 80051a6:	2b60      	cmp	r3, #96	; 0x60
 80051a8:	d877      	bhi.n	800529a <HAL_TIM_ConfigClockSource+0x16c>
 80051aa:	2b50      	cmp	r3, #80	; 0x50
 80051ac:	d03c      	beq.n	8005228 <HAL_TIM_ConfigClockSource+0xfa>
 80051ae:	2b50      	cmp	r3, #80	; 0x50
 80051b0:	d873      	bhi.n	800529a <HAL_TIM_ConfigClockSource+0x16c>
 80051b2:	2b40      	cmp	r3, #64	; 0x40
 80051b4:	d058      	beq.n	8005268 <HAL_TIM_ConfigClockSource+0x13a>
 80051b6:	2b40      	cmp	r3, #64	; 0x40
 80051b8:	d86f      	bhi.n	800529a <HAL_TIM_ConfigClockSource+0x16c>
 80051ba:	2b30      	cmp	r3, #48	; 0x30
 80051bc:	d064      	beq.n	8005288 <HAL_TIM_ConfigClockSource+0x15a>
 80051be:	2b30      	cmp	r3, #48	; 0x30
 80051c0:	d86b      	bhi.n	800529a <HAL_TIM_ConfigClockSource+0x16c>
 80051c2:	2b20      	cmp	r3, #32
 80051c4:	d060      	beq.n	8005288 <HAL_TIM_ConfigClockSource+0x15a>
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	d867      	bhi.n	800529a <HAL_TIM_ConfigClockSource+0x16c>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d05c      	beq.n	8005288 <HAL_TIM_ConfigClockSource+0x15a>
 80051ce:	2b10      	cmp	r3, #16
 80051d0:	d05a      	beq.n	8005288 <HAL_TIM_ConfigClockSource+0x15a>
 80051d2:	e062      	b.n	800529a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6818      	ldr	r0, [r3, #0]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	6899      	ldr	r1, [r3, #8]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f000 f964 	bl	80054b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051f6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	609a      	str	r2, [r3, #8]
      break;
 8005200:	e04f      	b.n	80052a2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	6899      	ldr	r1, [r3, #8]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f000 f94d 	bl	80054b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005224:	609a      	str	r2, [r3, #8]
      break;
 8005226:	e03c      	b.n	80052a2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6818      	ldr	r0, [r3, #0]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	6859      	ldr	r1, [r3, #4]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	461a      	mov	r2, r3
 8005236:	f000 f8c1 	bl	80053bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2150      	movs	r1, #80	; 0x50
 8005240:	4618      	mov	r0, r3
 8005242:	f000 f91a 	bl	800547a <TIM_ITRx_SetConfig>
      break;
 8005246:	e02c      	b.n	80052a2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6818      	ldr	r0, [r3, #0]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	6859      	ldr	r1, [r3, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	461a      	mov	r2, r3
 8005256:	f000 f8e0 	bl	800541a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2160      	movs	r1, #96	; 0x60
 8005260:	4618      	mov	r0, r3
 8005262:	f000 f90a 	bl	800547a <TIM_ITRx_SetConfig>
      break;
 8005266:	e01c      	b.n	80052a2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6818      	ldr	r0, [r3, #0]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	6859      	ldr	r1, [r3, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	461a      	mov	r2, r3
 8005276:	f000 f8a1 	bl	80053bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2140      	movs	r1, #64	; 0x40
 8005280:	4618      	mov	r0, r3
 8005282:	f000 f8fa 	bl	800547a <TIM_ITRx_SetConfig>
      break;
 8005286:	e00c      	b.n	80052a2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4619      	mov	r1, r3
 8005292:	4610      	mov	r0, r2
 8005294:	f000 f8f1 	bl	800547a <TIM_ITRx_SetConfig>
      break;
 8005298:	e003      	b.n	80052a2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	73fb      	strb	r3, [r7, #15]
      break;
 800529e:	e000      	b.n	80052a2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a34      	ldr	r2, [pc, #208]	; (80053a0 <TIM_Base_SetConfig+0xe4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00f      	beq.n	80052f4 <TIM_Base_SetConfig+0x38>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052da:	d00b      	beq.n	80052f4 <TIM_Base_SetConfig+0x38>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a31      	ldr	r2, [pc, #196]	; (80053a4 <TIM_Base_SetConfig+0xe8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d007      	beq.n	80052f4 <TIM_Base_SetConfig+0x38>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a30      	ldr	r2, [pc, #192]	; (80053a8 <TIM_Base_SetConfig+0xec>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_Base_SetConfig+0x38>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a2f      	ldr	r2, [pc, #188]	; (80053ac <TIM_Base_SetConfig+0xf0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d108      	bne.n	8005306 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a25      	ldr	r2, [pc, #148]	; (80053a0 <TIM_Base_SetConfig+0xe4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d01b      	beq.n	8005346 <TIM_Base_SetConfig+0x8a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005314:	d017      	beq.n	8005346 <TIM_Base_SetConfig+0x8a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a22      	ldr	r2, [pc, #136]	; (80053a4 <TIM_Base_SetConfig+0xe8>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d013      	beq.n	8005346 <TIM_Base_SetConfig+0x8a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a21      	ldr	r2, [pc, #132]	; (80053a8 <TIM_Base_SetConfig+0xec>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00f      	beq.n	8005346 <TIM_Base_SetConfig+0x8a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a20      	ldr	r2, [pc, #128]	; (80053ac <TIM_Base_SetConfig+0xf0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00b      	beq.n	8005346 <TIM_Base_SetConfig+0x8a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a1f      	ldr	r2, [pc, #124]	; (80053b0 <TIM_Base_SetConfig+0xf4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d007      	beq.n	8005346 <TIM_Base_SetConfig+0x8a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a1e      	ldr	r2, [pc, #120]	; (80053b4 <TIM_Base_SetConfig+0xf8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d003      	beq.n	8005346 <TIM_Base_SetConfig+0x8a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a1d      	ldr	r2, [pc, #116]	; (80053b8 <TIM_Base_SetConfig+0xfc>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d108      	bne.n	8005358 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4313      	orrs	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a08      	ldr	r2, [pc, #32]	; (80053a0 <TIM_Base_SetConfig+0xe4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d103      	bne.n	800538c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	691a      	ldr	r2, [r3, #16]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	615a      	str	r2, [r3, #20]
}
 8005392:	bf00      	nop
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	40010000 	.word	0x40010000
 80053a4:	40000400 	.word	0x40000400
 80053a8:	40000800 	.word	0x40000800
 80053ac:	40000c00 	.word	0x40000c00
 80053b0:	40014000 	.word	0x40014000
 80053b4:	40014400 	.word	0x40014400
 80053b8:	40014800 	.word	0x40014800

080053bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	f023 0201 	bic.w	r2, r3, #1
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	011b      	lsls	r3, r3, #4
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f023 030a 	bic.w	r3, r3, #10
 80053f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	4313      	orrs	r3, r2
 8005400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	621a      	str	r2, [r3, #32]
}
 800540e:	bf00      	nop
 8005410:	371c      	adds	r7, #28
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800541a:	b480      	push	{r7}
 800541c:	b087      	sub	sp, #28
 800541e:	af00      	add	r7, sp, #0
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	f023 0210 	bic.w	r2, r3, #16
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005444:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	031b      	lsls	r3, r3, #12
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005456:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	4313      	orrs	r3, r2
 8005460:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	621a      	str	r2, [r3, #32]
}
 800546e:	bf00      	nop
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800547a:	b480      	push	{r7}
 800547c:	b085      	sub	sp, #20
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	f043 0307 	orr.w	r3, r3, #7
 800549c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	609a      	str	r2, [r3, #8]
}
 80054a4:	bf00      	nop
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	021a      	lsls	r2, r3, #8
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	431a      	orrs	r2, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	609a      	str	r2, [r3, #8]
}
 80054e4:	bf00      	nop
 80054e6:	371c      	adds	r7, #28
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005504:	2302      	movs	r3, #2
 8005506:	e050      	b.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1c      	ldr	r2, [pc, #112]	; (80055b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d018      	beq.n	800557e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005554:	d013      	beq.n	800557e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a18      	ldr	r2, [pc, #96]	; (80055bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d00e      	beq.n	800557e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a16      	ldr	r2, [pc, #88]	; (80055c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d009      	beq.n	800557e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a15      	ldr	r2, [pc, #84]	; (80055c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d004      	beq.n	800557e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a13      	ldr	r2, [pc, #76]	; (80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d10c      	bne.n	8005598 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005584:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	4313      	orrs	r3, r2
 800558e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40010000 	.word	0x40010000
 80055bc:	40000400 	.word	0x40000400
 80055c0:	40000800 	.word	0x40000800
 80055c4:	40000c00 	.word	0x40000c00
 80055c8:	40014000 	.word	0x40014000

080055cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e03f      	b.n	800565e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d106      	bne.n	80055f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7fd f85c 	bl	80026b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2224      	movs	r2, #36	; 0x24
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800560e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f929 	bl	8005868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005624:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	695a      	ldr	r2, [r3, #20]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005634:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005644:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b08a      	sub	sp, #40	; 0x28
 800566a:	af02      	add	r7, sp, #8
 800566c:	60f8      	str	r0, [r7, #12]
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	603b      	str	r3, [r7, #0]
 8005672:	4613      	mov	r3, r2
 8005674:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b20      	cmp	r3, #32
 8005684:	d17c      	bne.n	8005780 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <HAL_UART_Transmit+0x2c>
 800568c:	88fb      	ldrh	r3, [r7, #6]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e075      	b.n	8005782 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_UART_Transmit+0x3e>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e06e      	b.n	8005782 <HAL_UART_Transmit+0x11c>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2221      	movs	r2, #33	; 0x21
 80056b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056ba:	f7fd fa07 	bl	8002acc <HAL_GetTick>
 80056be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	88fa      	ldrh	r2, [r7, #6]
 80056c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	88fa      	ldrh	r2, [r7, #6]
 80056ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d4:	d108      	bne.n	80056e8 <HAL_UART_Transmit+0x82>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d104      	bne.n	80056e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	61bb      	str	r3, [r7, #24]
 80056e6:	e003      	b.n	80056f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056ec:	2300      	movs	r3, #0
 80056ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80056f8:	e02a      	b.n	8005750 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2200      	movs	r2, #0
 8005702:	2180      	movs	r1, #128	; 0x80
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 f840 	bl	800578a <UART_WaitOnFlagUntilTimeout>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e036      	b.n	8005782 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10b      	bne.n	8005732 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005728:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	3302      	adds	r3, #2
 800572e:	61bb      	str	r3, [r7, #24]
 8005730:	e007      	b.n	8005742 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	781a      	ldrb	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	3301      	adds	r3, #1
 8005740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1cf      	bne.n	80056fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2200      	movs	r2, #0
 8005762:	2140      	movs	r1, #64	; 0x40
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f810 	bl	800578a <UART_WaitOnFlagUntilTimeout>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e006      	b.n	8005782 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2220      	movs	r2, #32
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800577c:	2300      	movs	r3, #0
 800577e:	e000      	b.n	8005782 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005780:	2302      	movs	r3, #2
  }
}
 8005782:	4618      	mov	r0, r3
 8005784:	3720      	adds	r7, #32
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b090      	sub	sp, #64	; 0x40
 800578e:	af00      	add	r7, sp, #0
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	603b      	str	r3, [r7, #0]
 8005796:	4613      	mov	r3, r2
 8005798:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800579a:	e050      	b.n	800583e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800579c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800579e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a2:	d04c      	beq.n	800583e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d007      	beq.n	80057ba <UART_WaitOnFlagUntilTimeout+0x30>
 80057aa:	f7fd f98f 	bl	8002acc <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d241      	bcs.n	800583e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	330c      	adds	r3, #12
 80057c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	330c      	adds	r3, #12
 80057d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057da:	637a      	str	r2, [r7, #52]	; 0x34
 80057dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e5      	bne.n	80057ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3314      	adds	r3, #20
 80057f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	613b      	str	r3, [r7, #16]
   return(result);
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f023 0301 	bic.w	r3, r3, #1
 8005804:	63bb      	str	r3, [r7, #56]	; 0x38
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3314      	adds	r3, #20
 800580c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800580e:	623a      	str	r2, [r7, #32]
 8005810:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	69f9      	ldr	r1, [r7, #28]
 8005814:	6a3a      	ldr	r2, [r7, #32]
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	61bb      	str	r3, [r7, #24]
   return(result);
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e5      	bne.n	80057ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2220      	movs	r2, #32
 8005826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2220      	movs	r2, #32
 800582e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e00f      	b.n	800585e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	4013      	ands	r3, r2
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	429a      	cmp	r2, r3
 800584c:	bf0c      	ite	eq
 800584e:	2301      	moveq	r3, #1
 8005850:	2300      	movne	r3, #0
 8005852:	b2db      	uxtb	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	79fb      	ldrb	r3, [r7, #7]
 8005858:	429a      	cmp	r2, r3
 800585a:	d09f      	beq.n	800579c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3740      	adds	r7, #64	; 0x40
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800586c:	b0c0      	sub	sp, #256	; 0x100
 800586e:	af00      	add	r7, sp, #0
 8005870:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005884:	68d9      	ldr	r1, [r3, #12]
 8005886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	ea40 0301 	orr.w	r3, r0, r1
 8005890:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	431a      	orrs	r2, r3
 80058a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	431a      	orrs	r2, r3
 80058a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058c0:	f021 010c 	bic.w	r1, r1, #12
 80058c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058ce:	430b      	orrs	r3, r1
 80058d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e2:	6999      	ldr	r1, [r3, #24]
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	ea40 0301 	orr.w	r3, r0, r1
 80058ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	4b8f      	ldr	r3, [pc, #572]	; (8005b34 <UART_SetConfig+0x2cc>)
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d005      	beq.n	8005908 <UART_SetConfig+0xa0>
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	4b8d      	ldr	r3, [pc, #564]	; (8005b38 <UART_SetConfig+0x2d0>)
 8005904:	429a      	cmp	r2, r3
 8005906:	d104      	bne.n	8005912 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005908:	f7ff fbae 	bl	8005068 <HAL_RCC_GetPCLK2Freq>
 800590c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005910:	e003      	b.n	800591a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005912:	f7ff fb95 	bl	8005040 <HAL_RCC_GetPCLK1Freq>
 8005916:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800591a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005924:	f040 810c 	bne.w	8005b40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800592c:	2200      	movs	r2, #0
 800592e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005932:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005936:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800593a:	4622      	mov	r2, r4
 800593c:	462b      	mov	r3, r5
 800593e:	1891      	adds	r1, r2, r2
 8005940:	65b9      	str	r1, [r7, #88]	; 0x58
 8005942:	415b      	adcs	r3, r3
 8005944:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005946:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800594a:	4621      	mov	r1, r4
 800594c:	eb12 0801 	adds.w	r8, r2, r1
 8005950:	4629      	mov	r1, r5
 8005952:	eb43 0901 	adc.w	r9, r3, r1
 8005956:	f04f 0200 	mov.w	r2, #0
 800595a:	f04f 0300 	mov.w	r3, #0
 800595e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800596a:	4690      	mov	r8, r2
 800596c:	4699      	mov	r9, r3
 800596e:	4623      	mov	r3, r4
 8005970:	eb18 0303 	adds.w	r3, r8, r3
 8005974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005978:	462b      	mov	r3, r5
 800597a:	eb49 0303 	adc.w	r3, r9, r3
 800597e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800598e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005992:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005996:	460b      	mov	r3, r1
 8005998:	18db      	adds	r3, r3, r3
 800599a:	653b      	str	r3, [r7, #80]	; 0x50
 800599c:	4613      	mov	r3, r2
 800599e:	eb42 0303 	adc.w	r3, r2, r3
 80059a2:	657b      	str	r3, [r7, #84]	; 0x54
 80059a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80059a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80059ac:	f7fb f954 	bl	8000c58 <__aeabi_uldivmod>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	4b61      	ldr	r3, [pc, #388]	; (8005b3c <UART_SetConfig+0x2d4>)
 80059b6:	fba3 2302 	umull	r2, r3, r3, r2
 80059ba:	095b      	lsrs	r3, r3, #5
 80059bc:	011c      	lsls	r4, r3, #4
 80059be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059c2:	2200      	movs	r2, #0
 80059c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80059cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80059d0:	4642      	mov	r2, r8
 80059d2:	464b      	mov	r3, r9
 80059d4:	1891      	adds	r1, r2, r2
 80059d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80059d8:	415b      	adcs	r3, r3
 80059da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80059e0:	4641      	mov	r1, r8
 80059e2:	eb12 0a01 	adds.w	sl, r2, r1
 80059e6:	4649      	mov	r1, r9
 80059e8:	eb43 0b01 	adc.w	fp, r3, r1
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	f04f 0300 	mov.w	r3, #0
 80059f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a00:	4692      	mov	sl, r2
 8005a02:	469b      	mov	fp, r3
 8005a04:	4643      	mov	r3, r8
 8005a06:	eb1a 0303 	adds.w	r3, sl, r3
 8005a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a0e:	464b      	mov	r3, r9
 8005a10:	eb4b 0303 	adc.w	r3, fp, r3
 8005a14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	18db      	adds	r3, r3, r3
 8005a30:	643b      	str	r3, [r7, #64]	; 0x40
 8005a32:	4613      	mov	r3, r2
 8005a34:	eb42 0303 	adc.w	r3, r2, r3
 8005a38:	647b      	str	r3, [r7, #68]	; 0x44
 8005a3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a42:	f7fb f909 	bl	8000c58 <__aeabi_uldivmod>
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	4b3b      	ldr	r3, [pc, #236]	; (8005b3c <UART_SetConfig+0x2d4>)
 8005a4e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	2264      	movs	r2, #100	; 0x64
 8005a56:	fb02 f303 	mul.w	r3, r2, r3
 8005a5a:	1acb      	subs	r3, r1, r3
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a62:	4b36      	ldr	r3, [pc, #216]	; (8005b3c <UART_SetConfig+0x2d4>)
 8005a64:	fba3 2302 	umull	r2, r3, r3, r2
 8005a68:	095b      	lsrs	r3, r3, #5
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a70:	441c      	add	r4, r3
 8005a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a76:	2200      	movs	r2, #0
 8005a78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a84:	4642      	mov	r2, r8
 8005a86:	464b      	mov	r3, r9
 8005a88:	1891      	adds	r1, r2, r2
 8005a8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a8c:	415b      	adcs	r3, r3
 8005a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a94:	4641      	mov	r1, r8
 8005a96:	1851      	adds	r1, r2, r1
 8005a98:	6339      	str	r1, [r7, #48]	; 0x30
 8005a9a:	4649      	mov	r1, r9
 8005a9c:	414b      	adcs	r3, r1
 8005a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8005aa0:	f04f 0200 	mov.w	r2, #0
 8005aa4:	f04f 0300 	mov.w	r3, #0
 8005aa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005aac:	4659      	mov	r1, fp
 8005aae:	00cb      	lsls	r3, r1, #3
 8005ab0:	4651      	mov	r1, sl
 8005ab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ab6:	4651      	mov	r1, sl
 8005ab8:	00ca      	lsls	r2, r1, #3
 8005aba:	4610      	mov	r0, r2
 8005abc:	4619      	mov	r1, r3
 8005abe:	4603      	mov	r3, r0
 8005ac0:	4642      	mov	r2, r8
 8005ac2:	189b      	adds	r3, r3, r2
 8005ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ac8:	464b      	mov	r3, r9
 8005aca:	460a      	mov	r2, r1
 8005acc:	eb42 0303 	adc.w	r3, r2, r3
 8005ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ae0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ae4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ae8:	460b      	mov	r3, r1
 8005aea:	18db      	adds	r3, r3, r3
 8005aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aee:	4613      	mov	r3, r2
 8005af0:	eb42 0303 	adc.w	r3, r2, r3
 8005af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005af6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005afa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005afe:	f7fb f8ab 	bl	8000c58 <__aeabi_uldivmod>
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	4b0d      	ldr	r3, [pc, #52]	; (8005b3c <UART_SetConfig+0x2d4>)
 8005b08:	fba3 1302 	umull	r1, r3, r3, r2
 8005b0c:	095b      	lsrs	r3, r3, #5
 8005b0e:	2164      	movs	r1, #100	; 0x64
 8005b10:	fb01 f303 	mul.w	r3, r1, r3
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	00db      	lsls	r3, r3, #3
 8005b18:	3332      	adds	r3, #50	; 0x32
 8005b1a:	4a08      	ldr	r2, [pc, #32]	; (8005b3c <UART_SetConfig+0x2d4>)
 8005b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b20:	095b      	lsrs	r3, r3, #5
 8005b22:	f003 0207 	and.w	r2, r3, #7
 8005b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4422      	add	r2, r4
 8005b2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b30:	e106      	b.n	8005d40 <UART_SetConfig+0x4d8>
 8005b32:	bf00      	nop
 8005b34:	40011000 	.word	0x40011000
 8005b38:	40011400 	.word	0x40011400
 8005b3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b44:	2200      	movs	r2, #0
 8005b46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b52:	4642      	mov	r2, r8
 8005b54:	464b      	mov	r3, r9
 8005b56:	1891      	adds	r1, r2, r2
 8005b58:	6239      	str	r1, [r7, #32]
 8005b5a:	415b      	adcs	r3, r3
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b62:	4641      	mov	r1, r8
 8005b64:	1854      	adds	r4, r2, r1
 8005b66:	4649      	mov	r1, r9
 8005b68:	eb43 0501 	adc.w	r5, r3, r1
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	f04f 0300 	mov.w	r3, #0
 8005b74:	00eb      	lsls	r3, r5, #3
 8005b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b7a:	00e2      	lsls	r2, r4, #3
 8005b7c:	4614      	mov	r4, r2
 8005b7e:	461d      	mov	r5, r3
 8005b80:	4643      	mov	r3, r8
 8005b82:	18e3      	adds	r3, r4, r3
 8005b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b88:	464b      	mov	r3, r9
 8005b8a:	eb45 0303 	adc.w	r3, r5, r3
 8005b8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	f04f 0300 	mov.w	r3, #0
 8005baa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005bae:	4629      	mov	r1, r5
 8005bb0:	008b      	lsls	r3, r1, #2
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bb8:	4621      	mov	r1, r4
 8005bba:	008a      	lsls	r2, r1, #2
 8005bbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005bc0:	f7fb f84a 	bl	8000c58 <__aeabi_uldivmod>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	4b60      	ldr	r3, [pc, #384]	; (8005d4c <UART_SetConfig+0x4e4>)
 8005bca:	fba3 2302 	umull	r2, r3, r3, r2
 8005bce:	095b      	lsrs	r3, r3, #5
 8005bd0:	011c      	lsls	r4, r3, #4
 8005bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005bdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005be0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005be4:	4642      	mov	r2, r8
 8005be6:	464b      	mov	r3, r9
 8005be8:	1891      	adds	r1, r2, r2
 8005bea:	61b9      	str	r1, [r7, #24]
 8005bec:	415b      	adcs	r3, r3
 8005bee:	61fb      	str	r3, [r7, #28]
 8005bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bf4:	4641      	mov	r1, r8
 8005bf6:	1851      	adds	r1, r2, r1
 8005bf8:	6139      	str	r1, [r7, #16]
 8005bfa:	4649      	mov	r1, r9
 8005bfc:	414b      	adcs	r3, r1
 8005bfe:	617b      	str	r3, [r7, #20]
 8005c00:	f04f 0200 	mov.w	r2, #0
 8005c04:	f04f 0300 	mov.w	r3, #0
 8005c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c0c:	4659      	mov	r1, fp
 8005c0e:	00cb      	lsls	r3, r1, #3
 8005c10:	4651      	mov	r1, sl
 8005c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c16:	4651      	mov	r1, sl
 8005c18:	00ca      	lsls	r2, r1, #3
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4603      	mov	r3, r0
 8005c20:	4642      	mov	r2, r8
 8005c22:	189b      	adds	r3, r3, r2
 8005c24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c28:	464b      	mov	r3, r9
 8005c2a:	460a      	mov	r2, r1
 8005c2c:	eb42 0303 	adc.w	r3, r2, r3
 8005c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	f04f 0300 	mov.w	r3, #0
 8005c48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c4c:	4649      	mov	r1, r9
 8005c4e:	008b      	lsls	r3, r1, #2
 8005c50:	4641      	mov	r1, r8
 8005c52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c56:	4641      	mov	r1, r8
 8005c58:	008a      	lsls	r2, r1, #2
 8005c5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c5e:	f7fa fffb 	bl	8000c58 <__aeabi_uldivmod>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4611      	mov	r1, r2
 8005c68:	4b38      	ldr	r3, [pc, #224]	; (8005d4c <UART_SetConfig+0x4e4>)
 8005c6a:	fba3 2301 	umull	r2, r3, r3, r1
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	2264      	movs	r2, #100	; 0x64
 8005c72:	fb02 f303 	mul.w	r3, r2, r3
 8005c76:	1acb      	subs	r3, r1, r3
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	3332      	adds	r3, #50	; 0x32
 8005c7c:	4a33      	ldr	r2, [pc, #204]	; (8005d4c <UART_SetConfig+0x4e4>)
 8005c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c88:	441c      	add	r4, r3
 8005c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c8e:	2200      	movs	r2, #0
 8005c90:	673b      	str	r3, [r7, #112]	; 0x70
 8005c92:	677a      	str	r2, [r7, #116]	; 0x74
 8005c94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c98:	4642      	mov	r2, r8
 8005c9a:	464b      	mov	r3, r9
 8005c9c:	1891      	adds	r1, r2, r2
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	415b      	adcs	r3, r3
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ca8:	4641      	mov	r1, r8
 8005caa:	1851      	adds	r1, r2, r1
 8005cac:	6039      	str	r1, [r7, #0]
 8005cae:	4649      	mov	r1, r9
 8005cb0:	414b      	adcs	r3, r1
 8005cb2:	607b      	str	r3, [r7, #4]
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	f04f 0300 	mov.w	r3, #0
 8005cbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cc0:	4659      	mov	r1, fp
 8005cc2:	00cb      	lsls	r3, r1, #3
 8005cc4:	4651      	mov	r1, sl
 8005cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cca:	4651      	mov	r1, sl
 8005ccc:	00ca      	lsls	r2, r1, #3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	4642      	mov	r2, r8
 8005cd6:	189b      	adds	r3, r3, r2
 8005cd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cda:	464b      	mov	r3, r9
 8005cdc:	460a      	mov	r2, r1
 8005cde:	eb42 0303 	adc.w	r3, r2, r3
 8005ce2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	663b      	str	r3, [r7, #96]	; 0x60
 8005cee:	667a      	str	r2, [r7, #100]	; 0x64
 8005cf0:	f04f 0200 	mov.w	r2, #0
 8005cf4:	f04f 0300 	mov.w	r3, #0
 8005cf8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005cfc:	4649      	mov	r1, r9
 8005cfe:	008b      	lsls	r3, r1, #2
 8005d00:	4641      	mov	r1, r8
 8005d02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d06:	4641      	mov	r1, r8
 8005d08:	008a      	lsls	r2, r1, #2
 8005d0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d0e:	f7fa ffa3 	bl	8000c58 <__aeabi_uldivmod>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	4b0d      	ldr	r3, [pc, #52]	; (8005d4c <UART_SetConfig+0x4e4>)
 8005d18:	fba3 1302 	umull	r1, r3, r3, r2
 8005d1c:	095b      	lsrs	r3, r3, #5
 8005d1e:	2164      	movs	r1, #100	; 0x64
 8005d20:	fb01 f303 	mul.w	r3, r1, r3
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	3332      	adds	r3, #50	; 0x32
 8005d2a:	4a08      	ldr	r2, [pc, #32]	; (8005d4c <UART_SetConfig+0x4e4>)
 8005d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d30:	095b      	lsrs	r3, r3, #5
 8005d32:	f003 020f 	and.w	r2, r3, #15
 8005d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4422      	add	r2, r4
 8005d3e:	609a      	str	r2, [r3, #8]
}
 8005d40:	bf00      	nop
 8005d42:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d46:	46bd      	mov	sp, r7
 8005d48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d4c:	51eb851f 	.word	0x51eb851f

08005d50 <atoi>:
 8005d50:	220a      	movs	r2, #10
 8005d52:	2100      	movs	r1, #0
 8005d54:	f000 b93e 	b.w	8005fd4 <strtol>

08005d58 <malloc>:
 8005d58:	4b02      	ldr	r3, [pc, #8]	; (8005d64 <malloc+0xc>)
 8005d5a:	4601      	mov	r1, r0
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	f000 b82b 	b.w	8005db8 <_malloc_r>
 8005d62:	bf00      	nop
 8005d64:	20000070 	.word	0x20000070

08005d68 <free>:
 8005d68:	4b02      	ldr	r3, [pc, #8]	; (8005d74 <free+0xc>)
 8005d6a:	4601      	mov	r1, r0
 8005d6c:	6818      	ldr	r0, [r3, #0]
 8005d6e:	f001 be51 	b.w	8007a14 <_free_r>
 8005d72:	bf00      	nop
 8005d74:	20000070 	.word	0x20000070

08005d78 <sbrk_aligned>:
 8005d78:	b570      	push	{r4, r5, r6, lr}
 8005d7a:	4e0e      	ldr	r6, [pc, #56]	; (8005db4 <sbrk_aligned+0x3c>)
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	6831      	ldr	r1, [r6, #0]
 8005d80:	4605      	mov	r5, r0
 8005d82:	b911      	cbnz	r1, 8005d8a <sbrk_aligned+0x12>
 8005d84:	f000 ff58 	bl	8006c38 <_sbrk_r>
 8005d88:	6030      	str	r0, [r6, #0]
 8005d8a:	4621      	mov	r1, r4
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	f000 ff53 	bl	8006c38 <_sbrk_r>
 8005d92:	1c43      	adds	r3, r0, #1
 8005d94:	d00a      	beq.n	8005dac <sbrk_aligned+0x34>
 8005d96:	1cc4      	adds	r4, r0, #3
 8005d98:	f024 0403 	bic.w	r4, r4, #3
 8005d9c:	42a0      	cmp	r0, r4
 8005d9e:	d007      	beq.n	8005db0 <sbrk_aligned+0x38>
 8005da0:	1a21      	subs	r1, r4, r0
 8005da2:	4628      	mov	r0, r5
 8005da4:	f000 ff48 	bl	8006c38 <_sbrk_r>
 8005da8:	3001      	adds	r0, #1
 8005daa:	d101      	bne.n	8005db0 <sbrk_aligned+0x38>
 8005dac:	f04f 34ff 	mov.w	r4, #4294967295
 8005db0:	4620      	mov	r0, r4
 8005db2:	bd70      	pop	{r4, r5, r6, pc}
 8005db4:	20000384 	.word	0x20000384

08005db8 <_malloc_r>:
 8005db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dbc:	1ccd      	adds	r5, r1, #3
 8005dbe:	f025 0503 	bic.w	r5, r5, #3
 8005dc2:	3508      	adds	r5, #8
 8005dc4:	2d0c      	cmp	r5, #12
 8005dc6:	bf38      	it	cc
 8005dc8:	250c      	movcc	r5, #12
 8005dca:	2d00      	cmp	r5, #0
 8005dcc:	4607      	mov	r7, r0
 8005dce:	db01      	blt.n	8005dd4 <_malloc_r+0x1c>
 8005dd0:	42a9      	cmp	r1, r5
 8005dd2:	d905      	bls.n	8005de0 <_malloc_r+0x28>
 8005dd4:	230c      	movs	r3, #12
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	2600      	movs	r6, #0
 8005dda:	4630      	mov	r0, r6
 8005ddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005de0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005eb4 <_malloc_r+0xfc>
 8005de4:	f000 f868 	bl	8005eb8 <__malloc_lock>
 8005de8:	f8d8 3000 	ldr.w	r3, [r8]
 8005dec:	461c      	mov	r4, r3
 8005dee:	bb5c      	cbnz	r4, 8005e48 <_malloc_r+0x90>
 8005df0:	4629      	mov	r1, r5
 8005df2:	4638      	mov	r0, r7
 8005df4:	f7ff ffc0 	bl	8005d78 <sbrk_aligned>
 8005df8:	1c43      	adds	r3, r0, #1
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	d155      	bne.n	8005eaa <_malloc_r+0xf2>
 8005dfe:	f8d8 4000 	ldr.w	r4, [r8]
 8005e02:	4626      	mov	r6, r4
 8005e04:	2e00      	cmp	r6, #0
 8005e06:	d145      	bne.n	8005e94 <_malloc_r+0xdc>
 8005e08:	2c00      	cmp	r4, #0
 8005e0a:	d048      	beq.n	8005e9e <_malloc_r+0xe6>
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	4631      	mov	r1, r6
 8005e10:	4638      	mov	r0, r7
 8005e12:	eb04 0903 	add.w	r9, r4, r3
 8005e16:	f000 ff0f 	bl	8006c38 <_sbrk_r>
 8005e1a:	4581      	cmp	r9, r0
 8005e1c:	d13f      	bne.n	8005e9e <_malloc_r+0xe6>
 8005e1e:	6821      	ldr	r1, [r4, #0]
 8005e20:	1a6d      	subs	r5, r5, r1
 8005e22:	4629      	mov	r1, r5
 8005e24:	4638      	mov	r0, r7
 8005e26:	f7ff ffa7 	bl	8005d78 <sbrk_aligned>
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	d037      	beq.n	8005e9e <_malloc_r+0xe6>
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	442b      	add	r3, r5
 8005e32:	6023      	str	r3, [r4, #0]
 8005e34:	f8d8 3000 	ldr.w	r3, [r8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d038      	beq.n	8005eae <_malloc_r+0xf6>
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	42a2      	cmp	r2, r4
 8005e40:	d12b      	bne.n	8005e9a <_malloc_r+0xe2>
 8005e42:	2200      	movs	r2, #0
 8005e44:	605a      	str	r2, [r3, #4]
 8005e46:	e00f      	b.n	8005e68 <_malloc_r+0xb0>
 8005e48:	6822      	ldr	r2, [r4, #0]
 8005e4a:	1b52      	subs	r2, r2, r5
 8005e4c:	d41f      	bmi.n	8005e8e <_malloc_r+0xd6>
 8005e4e:	2a0b      	cmp	r2, #11
 8005e50:	d917      	bls.n	8005e82 <_malloc_r+0xca>
 8005e52:	1961      	adds	r1, r4, r5
 8005e54:	42a3      	cmp	r3, r4
 8005e56:	6025      	str	r5, [r4, #0]
 8005e58:	bf18      	it	ne
 8005e5a:	6059      	strne	r1, [r3, #4]
 8005e5c:	6863      	ldr	r3, [r4, #4]
 8005e5e:	bf08      	it	eq
 8005e60:	f8c8 1000 	streq.w	r1, [r8]
 8005e64:	5162      	str	r2, [r4, r5]
 8005e66:	604b      	str	r3, [r1, #4]
 8005e68:	4638      	mov	r0, r7
 8005e6a:	f104 060b 	add.w	r6, r4, #11
 8005e6e:	f000 f829 	bl	8005ec4 <__malloc_unlock>
 8005e72:	f026 0607 	bic.w	r6, r6, #7
 8005e76:	1d23      	adds	r3, r4, #4
 8005e78:	1af2      	subs	r2, r6, r3
 8005e7a:	d0ae      	beq.n	8005dda <_malloc_r+0x22>
 8005e7c:	1b9b      	subs	r3, r3, r6
 8005e7e:	50a3      	str	r3, [r4, r2]
 8005e80:	e7ab      	b.n	8005dda <_malloc_r+0x22>
 8005e82:	42a3      	cmp	r3, r4
 8005e84:	6862      	ldr	r2, [r4, #4]
 8005e86:	d1dd      	bne.n	8005e44 <_malloc_r+0x8c>
 8005e88:	f8c8 2000 	str.w	r2, [r8]
 8005e8c:	e7ec      	b.n	8005e68 <_malloc_r+0xb0>
 8005e8e:	4623      	mov	r3, r4
 8005e90:	6864      	ldr	r4, [r4, #4]
 8005e92:	e7ac      	b.n	8005dee <_malloc_r+0x36>
 8005e94:	4634      	mov	r4, r6
 8005e96:	6876      	ldr	r6, [r6, #4]
 8005e98:	e7b4      	b.n	8005e04 <_malloc_r+0x4c>
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	e7cc      	b.n	8005e38 <_malloc_r+0x80>
 8005e9e:	230c      	movs	r3, #12
 8005ea0:	603b      	str	r3, [r7, #0]
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	f000 f80e 	bl	8005ec4 <__malloc_unlock>
 8005ea8:	e797      	b.n	8005dda <_malloc_r+0x22>
 8005eaa:	6025      	str	r5, [r4, #0]
 8005eac:	e7dc      	b.n	8005e68 <_malloc_r+0xb0>
 8005eae:	605b      	str	r3, [r3, #4]
 8005eb0:	deff      	udf	#255	; 0xff
 8005eb2:	bf00      	nop
 8005eb4:	20000380 	.word	0x20000380

08005eb8 <__malloc_lock>:
 8005eb8:	4801      	ldr	r0, [pc, #4]	; (8005ec0 <__malloc_lock+0x8>)
 8005eba:	f000 bf09 	b.w	8006cd0 <__retarget_lock_acquire_recursive>
 8005ebe:	bf00      	nop
 8005ec0:	200004c8 	.word	0x200004c8

08005ec4 <__malloc_unlock>:
 8005ec4:	4801      	ldr	r0, [pc, #4]	; (8005ecc <__malloc_unlock+0x8>)
 8005ec6:	f000 bf04 	b.w	8006cd2 <__retarget_lock_release_recursive>
 8005eca:	bf00      	nop
 8005ecc:	200004c8 	.word	0x200004c8

08005ed0 <_strtol_l.constprop.0>:
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed6:	d001      	beq.n	8005edc <_strtol_l.constprop.0+0xc>
 8005ed8:	2b24      	cmp	r3, #36	; 0x24
 8005eda:	d906      	bls.n	8005eea <_strtol_l.constprop.0+0x1a>
 8005edc:	f000 fece 	bl	8006c7c <__errno>
 8005ee0:	2316      	movs	r3, #22
 8005ee2:	6003      	str	r3, [r0, #0]
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005fd0 <_strtol_l.constprop.0+0x100>
 8005eee:	460d      	mov	r5, r1
 8005ef0:	462e      	mov	r6, r5
 8005ef2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ef6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005efa:	f017 0708 	ands.w	r7, r7, #8
 8005efe:	d1f7      	bne.n	8005ef0 <_strtol_l.constprop.0+0x20>
 8005f00:	2c2d      	cmp	r4, #45	; 0x2d
 8005f02:	d132      	bne.n	8005f6a <_strtol_l.constprop.0+0x9a>
 8005f04:	782c      	ldrb	r4, [r5, #0]
 8005f06:	2701      	movs	r7, #1
 8005f08:	1cb5      	adds	r5, r6, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d05b      	beq.n	8005fc6 <_strtol_l.constprop.0+0xf6>
 8005f0e:	2b10      	cmp	r3, #16
 8005f10:	d109      	bne.n	8005f26 <_strtol_l.constprop.0+0x56>
 8005f12:	2c30      	cmp	r4, #48	; 0x30
 8005f14:	d107      	bne.n	8005f26 <_strtol_l.constprop.0+0x56>
 8005f16:	782c      	ldrb	r4, [r5, #0]
 8005f18:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005f1c:	2c58      	cmp	r4, #88	; 0x58
 8005f1e:	d14d      	bne.n	8005fbc <_strtol_l.constprop.0+0xec>
 8005f20:	786c      	ldrb	r4, [r5, #1]
 8005f22:	2310      	movs	r3, #16
 8005f24:	3502      	adds	r5, #2
 8005f26:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005f2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f2e:	f04f 0e00 	mov.w	lr, #0
 8005f32:	fbb8 f9f3 	udiv	r9, r8, r3
 8005f36:	4676      	mov	r6, lr
 8005f38:	fb03 8a19 	mls	sl, r3, r9, r8
 8005f3c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005f40:	f1bc 0f09 	cmp.w	ip, #9
 8005f44:	d816      	bhi.n	8005f74 <_strtol_l.constprop.0+0xa4>
 8005f46:	4664      	mov	r4, ip
 8005f48:	42a3      	cmp	r3, r4
 8005f4a:	dd24      	ble.n	8005f96 <_strtol_l.constprop.0+0xc6>
 8005f4c:	f1be 3fff 	cmp.w	lr, #4294967295
 8005f50:	d008      	beq.n	8005f64 <_strtol_l.constprop.0+0x94>
 8005f52:	45b1      	cmp	r9, r6
 8005f54:	d31c      	bcc.n	8005f90 <_strtol_l.constprop.0+0xc0>
 8005f56:	d101      	bne.n	8005f5c <_strtol_l.constprop.0+0x8c>
 8005f58:	45a2      	cmp	sl, r4
 8005f5a:	db19      	blt.n	8005f90 <_strtol_l.constprop.0+0xc0>
 8005f5c:	fb06 4603 	mla	r6, r6, r3, r4
 8005f60:	f04f 0e01 	mov.w	lr, #1
 8005f64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f68:	e7e8      	b.n	8005f3c <_strtol_l.constprop.0+0x6c>
 8005f6a:	2c2b      	cmp	r4, #43	; 0x2b
 8005f6c:	bf04      	itt	eq
 8005f6e:	782c      	ldrbeq	r4, [r5, #0]
 8005f70:	1cb5      	addeq	r5, r6, #2
 8005f72:	e7ca      	b.n	8005f0a <_strtol_l.constprop.0+0x3a>
 8005f74:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005f78:	f1bc 0f19 	cmp.w	ip, #25
 8005f7c:	d801      	bhi.n	8005f82 <_strtol_l.constprop.0+0xb2>
 8005f7e:	3c37      	subs	r4, #55	; 0x37
 8005f80:	e7e2      	b.n	8005f48 <_strtol_l.constprop.0+0x78>
 8005f82:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005f86:	f1bc 0f19 	cmp.w	ip, #25
 8005f8a:	d804      	bhi.n	8005f96 <_strtol_l.constprop.0+0xc6>
 8005f8c:	3c57      	subs	r4, #87	; 0x57
 8005f8e:	e7db      	b.n	8005f48 <_strtol_l.constprop.0+0x78>
 8005f90:	f04f 3eff 	mov.w	lr, #4294967295
 8005f94:	e7e6      	b.n	8005f64 <_strtol_l.constprop.0+0x94>
 8005f96:	f1be 3fff 	cmp.w	lr, #4294967295
 8005f9a:	d105      	bne.n	8005fa8 <_strtol_l.constprop.0+0xd8>
 8005f9c:	2322      	movs	r3, #34	; 0x22
 8005f9e:	6003      	str	r3, [r0, #0]
 8005fa0:	4646      	mov	r6, r8
 8005fa2:	b942      	cbnz	r2, 8005fb6 <_strtol_l.constprop.0+0xe6>
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	e79e      	b.n	8005ee6 <_strtol_l.constprop.0+0x16>
 8005fa8:	b107      	cbz	r7, 8005fac <_strtol_l.constprop.0+0xdc>
 8005faa:	4276      	negs	r6, r6
 8005fac:	2a00      	cmp	r2, #0
 8005fae:	d0f9      	beq.n	8005fa4 <_strtol_l.constprop.0+0xd4>
 8005fb0:	f1be 0f00 	cmp.w	lr, #0
 8005fb4:	d000      	beq.n	8005fb8 <_strtol_l.constprop.0+0xe8>
 8005fb6:	1e69      	subs	r1, r5, #1
 8005fb8:	6011      	str	r1, [r2, #0]
 8005fba:	e7f3      	b.n	8005fa4 <_strtol_l.constprop.0+0xd4>
 8005fbc:	2430      	movs	r4, #48	; 0x30
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1b1      	bne.n	8005f26 <_strtol_l.constprop.0+0x56>
 8005fc2:	2308      	movs	r3, #8
 8005fc4:	e7af      	b.n	8005f26 <_strtol_l.constprop.0+0x56>
 8005fc6:	2c30      	cmp	r4, #48	; 0x30
 8005fc8:	d0a5      	beq.n	8005f16 <_strtol_l.constprop.0+0x46>
 8005fca:	230a      	movs	r3, #10
 8005fcc:	e7ab      	b.n	8005f26 <_strtol_l.constprop.0+0x56>
 8005fce:	bf00      	nop
 8005fd0:	0800a145 	.word	0x0800a145

08005fd4 <strtol>:
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	460a      	mov	r2, r1
 8005fd8:	4601      	mov	r1, r0
 8005fda:	4802      	ldr	r0, [pc, #8]	; (8005fe4 <strtol+0x10>)
 8005fdc:	6800      	ldr	r0, [r0, #0]
 8005fde:	f7ff bf77 	b.w	8005ed0 <_strtol_l.constprop.0>
 8005fe2:	bf00      	nop
 8005fe4:	20000070 	.word	0x20000070

08005fe8 <__cvt>:
 8005fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fec:	ec55 4b10 	vmov	r4, r5, d0
 8005ff0:	2d00      	cmp	r5, #0
 8005ff2:	460e      	mov	r6, r1
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	462b      	mov	r3, r5
 8005ff8:	bfbb      	ittet	lt
 8005ffa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005ffe:	461d      	movlt	r5, r3
 8006000:	2300      	movge	r3, #0
 8006002:	232d      	movlt	r3, #45	; 0x2d
 8006004:	700b      	strb	r3, [r1, #0]
 8006006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006008:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800600c:	4691      	mov	r9, r2
 800600e:	f023 0820 	bic.w	r8, r3, #32
 8006012:	bfbc      	itt	lt
 8006014:	4622      	movlt	r2, r4
 8006016:	4614      	movlt	r4, r2
 8006018:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800601c:	d005      	beq.n	800602a <__cvt+0x42>
 800601e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006022:	d100      	bne.n	8006026 <__cvt+0x3e>
 8006024:	3601      	adds	r6, #1
 8006026:	2102      	movs	r1, #2
 8006028:	e000      	b.n	800602c <__cvt+0x44>
 800602a:	2103      	movs	r1, #3
 800602c:	ab03      	add	r3, sp, #12
 800602e:	9301      	str	r3, [sp, #4]
 8006030:	ab02      	add	r3, sp, #8
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	ec45 4b10 	vmov	d0, r4, r5
 8006038:	4653      	mov	r3, sl
 800603a:	4632      	mov	r2, r6
 800603c:	f000 fef8 	bl	8006e30 <_dtoa_r>
 8006040:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006044:	4607      	mov	r7, r0
 8006046:	d102      	bne.n	800604e <__cvt+0x66>
 8006048:	f019 0f01 	tst.w	r9, #1
 800604c:	d022      	beq.n	8006094 <__cvt+0xac>
 800604e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006052:	eb07 0906 	add.w	r9, r7, r6
 8006056:	d110      	bne.n	800607a <__cvt+0x92>
 8006058:	783b      	ldrb	r3, [r7, #0]
 800605a:	2b30      	cmp	r3, #48	; 0x30
 800605c:	d10a      	bne.n	8006074 <__cvt+0x8c>
 800605e:	2200      	movs	r2, #0
 8006060:	2300      	movs	r3, #0
 8006062:	4620      	mov	r0, r4
 8006064:	4629      	mov	r1, r5
 8006066:	f7fa fd37 	bl	8000ad8 <__aeabi_dcmpeq>
 800606a:	b918      	cbnz	r0, 8006074 <__cvt+0x8c>
 800606c:	f1c6 0601 	rsb	r6, r6, #1
 8006070:	f8ca 6000 	str.w	r6, [sl]
 8006074:	f8da 3000 	ldr.w	r3, [sl]
 8006078:	4499      	add	r9, r3
 800607a:	2200      	movs	r2, #0
 800607c:	2300      	movs	r3, #0
 800607e:	4620      	mov	r0, r4
 8006080:	4629      	mov	r1, r5
 8006082:	f7fa fd29 	bl	8000ad8 <__aeabi_dcmpeq>
 8006086:	b108      	cbz	r0, 800608c <__cvt+0xa4>
 8006088:	f8cd 900c 	str.w	r9, [sp, #12]
 800608c:	2230      	movs	r2, #48	; 0x30
 800608e:	9b03      	ldr	r3, [sp, #12]
 8006090:	454b      	cmp	r3, r9
 8006092:	d307      	bcc.n	80060a4 <__cvt+0xbc>
 8006094:	9b03      	ldr	r3, [sp, #12]
 8006096:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006098:	1bdb      	subs	r3, r3, r7
 800609a:	4638      	mov	r0, r7
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	b004      	add	sp, #16
 80060a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a4:	1c59      	adds	r1, r3, #1
 80060a6:	9103      	str	r1, [sp, #12]
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	e7f0      	b.n	800608e <__cvt+0xa6>

080060ac <__exponent>:
 80060ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060ae:	4603      	mov	r3, r0
 80060b0:	2900      	cmp	r1, #0
 80060b2:	bfb8      	it	lt
 80060b4:	4249      	neglt	r1, r1
 80060b6:	f803 2b02 	strb.w	r2, [r3], #2
 80060ba:	bfb4      	ite	lt
 80060bc:	222d      	movlt	r2, #45	; 0x2d
 80060be:	222b      	movge	r2, #43	; 0x2b
 80060c0:	2909      	cmp	r1, #9
 80060c2:	7042      	strb	r2, [r0, #1]
 80060c4:	dd2a      	ble.n	800611c <__exponent+0x70>
 80060c6:	f10d 0207 	add.w	r2, sp, #7
 80060ca:	4617      	mov	r7, r2
 80060cc:	260a      	movs	r6, #10
 80060ce:	4694      	mov	ip, r2
 80060d0:	fb91 f5f6 	sdiv	r5, r1, r6
 80060d4:	fb06 1415 	mls	r4, r6, r5, r1
 80060d8:	3430      	adds	r4, #48	; 0x30
 80060da:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80060de:	460c      	mov	r4, r1
 80060e0:	2c63      	cmp	r4, #99	; 0x63
 80060e2:	f102 32ff 	add.w	r2, r2, #4294967295
 80060e6:	4629      	mov	r1, r5
 80060e8:	dcf1      	bgt.n	80060ce <__exponent+0x22>
 80060ea:	3130      	adds	r1, #48	; 0x30
 80060ec:	f1ac 0402 	sub.w	r4, ip, #2
 80060f0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80060f4:	1c41      	adds	r1, r0, #1
 80060f6:	4622      	mov	r2, r4
 80060f8:	42ba      	cmp	r2, r7
 80060fa:	d30a      	bcc.n	8006112 <__exponent+0x66>
 80060fc:	f10d 0209 	add.w	r2, sp, #9
 8006100:	eba2 020c 	sub.w	r2, r2, ip
 8006104:	42bc      	cmp	r4, r7
 8006106:	bf88      	it	hi
 8006108:	2200      	movhi	r2, #0
 800610a:	4413      	add	r3, r2
 800610c:	1a18      	subs	r0, r3, r0
 800610e:	b003      	add	sp, #12
 8006110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006112:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006116:	f801 5f01 	strb.w	r5, [r1, #1]!
 800611a:	e7ed      	b.n	80060f8 <__exponent+0x4c>
 800611c:	2330      	movs	r3, #48	; 0x30
 800611e:	3130      	adds	r1, #48	; 0x30
 8006120:	7083      	strb	r3, [r0, #2]
 8006122:	70c1      	strb	r1, [r0, #3]
 8006124:	1d03      	adds	r3, r0, #4
 8006126:	e7f1      	b.n	800610c <__exponent+0x60>

08006128 <_printf_float>:
 8006128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612c:	ed2d 8b02 	vpush	{d8}
 8006130:	b08d      	sub	sp, #52	; 0x34
 8006132:	460c      	mov	r4, r1
 8006134:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006138:	4616      	mov	r6, r2
 800613a:	461f      	mov	r7, r3
 800613c:	4605      	mov	r5, r0
 800613e:	f000 fd43 	bl	8006bc8 <_localeconv_r>
 8006142:	f8d0 a000 	ldr.w	sl, [r0]
 8006146:	4650      	mov	r0, sl
 8006148:	f7fa f89a 	bl	8000280 <strlen>
 800614c:	2300      	movs	r3, #0
 800614e:	930a      	str	r3, [sp, #40]	; 0x28
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	9305      	str	r3, [sp, #20]
 8006154:	f8d8 3000 	ldr.w	r3, [r8]
 8006158:	f894 b018 	ldrb.w	fp, [r4, #24]
 800615c:	3307      	adds	r3, #7
 800615e:	f023 0307 	bic.w	r3, r3, #7
 8006162:	f103 0208 	add.w	r2, r3, #8
 8006166:	f8c8 2000 	str.w	r2, [r8]
 800616a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800616e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006172:	9307      	str	r3, [sp, #28]
 8006174:	f8cd 8018 	str.w	r8, [sp, #24]
 8006178:	ee08 0a10 	vmov	s16, r0
 800617c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006180:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006184:	4b9e      	ldr	r3, [pc, #632]	; (8006400 <_printf_float+0x2d8>)
 8006186:	f04f 32ff 	mov.w	r2, #4294967295
 800618a:	f7fa fcd7 	bl	8000b3c <__aeabi_dcmpun>
 800618e:	bb88      	cbnz	r0, 80061f4 <_printf_float+0xcc>
 8006190:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006194:	4b9a      	ldr	r3, [pc, #616]	; (8006400 <_printf_float+0x2d8>)
 8006196:	f04f 32ff 	mov.w	r2, #4294967295
 800619a:	f7fa fcb1 	bl	8000b00 <__aeabi_dcmple>
 800619e:	bb48      	cbnz	r0, 80061f4 <_printf_float+0xcc>
 80061a0:	2200      	movs	r2, #0
 80061a2:	2300      	movs	r3, #0
 80061a4:	4640      	mov	r0, r8
 80061a6:	4649      	mov	r1, r9
 80061a8:	f7fa fca0 	bl	8000aec <__aeabi_dcmplt>
 80061ac:	b110      	cbz	r0, 80061b4 <_printf_float+0x8c>
 80061ae:	232d      	movs	r3, #45	; 0x2d
 80061b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061b4:	4a93      	ldr	r2, [pc, #588]	; (8006404 <_printf_float+0x2dc>)
 80061b6:	4b94      	ldr	r3, [pc, #592]	; (8006408 <_printf_float+0x2e0>)
 80061b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80061bc:	bf94      	ite	ls
 80061be:	4690      	movls	r8, r2
 80061c0:	4698      	movhi	r8, r3
 80061c2:	2303      	movs	r3, #3
 80061c4:	6123      	str	r3, [r4, #16]
 80061c6:	9b05      	ldr	r3, [sp, #20]
 80061c8:	f023 0304 	bic.w	r3, r3, #4
 80061cc:	6023      	str	r3, [r4, #0]
 80061ce:	f04f 0900 	mov.w	r9, #0
 80061d2:	9700      	str	r7, [sp, #0]
 80061d4:	4633      	mov	r3, r6
 80061d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80061d8:	4621      	mov	r1, r4
 80061da:	4628      	mov	r0, r5
 80061dc:	f000 f9da 	bl	8006594 <_printf_common>
 80061e0:	3001      	adds	r0, #1
 80061e2:	f040 8090 	bne.w	8006306 <_printf_float+0x1de>
 80061e6:	f04f 30ff 	mov.w	r0, #4294967295
 80061ea:	b00d      	add	sp, #52	; 0x34
 80061ec:	ecbd 8b02 	vpop	{d8}
 80061f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f4:	4642      	mov	r2, r8
 80061f6:	464b      	mov	r3, r9
 80061f8:	4640      	mov	r0, r8
 80061fa:	4649      	mov	r1, r9
 80061fc:	f7fa fc9e 	bl	8000b3c <__aeabi_dcmpun>
 8006200:	b140      	cbz	r0, 8006214 <_printf_float+0xec>
 8006202:	464b      	mov	r3, r9
 8006204:	2b00      	cmp	r3, #0
 8006206:	bfbc      	itt	lt
 8006208:	232d      	movlt	r3, #45	; 0x2d
 800620a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800620e:	4a7f      	ldr	r2, [pc, #508]	; (800640c <_printf_float+0x2e4>)
 8006210:	4b7f      	ldr	r3, [pc, #508]	; (8006410 <_printf_float+0x2e8>)
 8006212:	e7d1      	b.n	80061b8 <_printf_float+0x90>
 8006214:	6863      	ldr	r3, [r4, #4]
 8006216:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800621a:	9206      	str	r2, [sp, #24]
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	d13f      	bne.n	80062a0 <_printf_float+0x178>
 8006220:	2306      	movs	r3, #6
 8006222:	6063      	str	r3, [r4, #4]
 8006224:	9b05      	ldr	r3, [sp, #20]
 8006226:	6861      	ldr	r1, [r4, #4]
 8006228:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800622c:	2300      	movs	r3, #0
 800622e:	9303      	str	r3, [sp, #12]
 8006230:	ab0a      	add	r3, sp, #40	; 0x28
 8006232:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006236:	ab09      	add	r3, sp, #36	; 0x24
 8006238:	ec49 8b10 	vmov	d0, r8, r9
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	6022      	str	r2, [r4, #0]
 8006240:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006244:	4628      	mov	r0, r5
 8006246:	f7ff fecf 	bl	8005fe8 <__cvt>
 800624a:	9b06      	ldr	r3, [sp, #24]
 800624c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800624e:	2b47      	cmp	r3, #71	; 0x47
 8006250:	4680      	mov	r8, r0
 8006252:	d108      	bne.n	8006266 <_printf_float+0x13e>
 8006254:	1cc8      	adds	r0, r1, #3
 8006256:	db02      	blt.n	800625e <_printf_float+0x136>
 8006258:	6863      	ldr	r3, [r4, #4]
 800625a:	4299      	cmp	r1, r3
 800625c:	dd41      	ble.n	80062e2 <_printf_float+0x1ba>
 800625e:	f1ab 0302 	sub.w	r3, fp, #2
 8006262:	fa5f fb83 	uxtb.w	fp, r3
 8006266:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800626a:	d820      	bhi.n	80062ae <_printf_float+0x186>
 800626c:	3901      	subs	r1, #1
 800626e:	465a      	mov	r2, fp
 8006270:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006274:	9109      	str	r1, [sp, #36]	; 0x24
 8006276:	f7ff ff19 	bl	80060ac <__exponent>
 800627a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800627c:	1813      	adds	r3, r2, r0
 800627e:	2a01      	cmp	r2, #1
 8006280:	4681      	mov	r9, r0
 8006282:	6123      	str	r3, [r4, #16]
 8006284:	dc02      	bgt.n	800628c <_printf_float+0x164>
 8006286:	6822      	ldr	r2, [r4, #0]
 8006288:	07d2      	lsls	r2, r2, #31
 800628a:	d501      	bpl.n	8006290 <_printf_float+0x168>
 800628c:	3301      	adds	r3, #1
 800628e:	6123      	str	r3, [r4, #16]
 8006290:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006294:	2b00      	cmp	r3, #0
 8006296:	d09c      	beq.n	80061d2 <_printf_float+0xaa>
 8006298:	232d      	movs	r3, #45	; 0x2d
 800629a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800629e:	e798      	b.n	80061d2 <_printf_float+0xaa>
 80062a0:	9a06      	ldr	r2, [sp, #24]
 80062a2:	2a47      	cmp	r2, #71	; 0x47
 80062a4:	d1be      	bne.n	8006224 <_printf_float+0xfc>
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1bc      	bne.n	8006224 <_printf_float+0xfc>
 80062aa:	2301      	movs	r3, #1
 80062ac:	e7b9      	b.n	8006222 <_printf_float+0xfa>
 80062ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80062b2:	d118      	bne.n	80062e6 <_printf_float+0x1be>
 80062b4:	2900      	cmp	r1, #0
 80062b6:	6863      	ldr	r3, [r4, #4]
 80062b8:	dd0b      	ble.n	80062d2 <_printf_float+0x1aa>
 80062ba:	6121      	str	r1, [r4, #16]
 80062bc:	b913      	cbnz	r3, 80062c4 <_printf_float+0x19c>
 80062be:	6822      	ldr	r2, [r4, #0]
 80062c0:	07d0      	lsls	r0, r2, #31
 80062c2:	d502      	bpl.n	80062ca <_printf_float+0x1a2>
 80062c4:	3301      	adds	r3, #1
 80062c6:	440b      	add	r3, r1
 80062c8:	6123      	str	r3, [r4, #16]
 80062ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80062cc:	f04f 0900 	mov.w	r9, #0
 80062d0:	e7de      	b.n	8006290 <_printf_float+0x168>
 80062d2:	b913      	cbnz	r3, 80062da <_printf_float+0x1b2>
 80062d4:	6822      	ldr	r2, [r4, #0]
 80062d6:	07d2      	lsls	r2, r2, #31
 80062d8:	d501      	bpl.n	80062de <_printf_float+0x1b6>
 80062da:	3302      	adds	r3, #2
 80062dc:	e7f4      	b.n	80062c8 <_printf_float+0x1a0>
 80062de:	2301      	movs	r3, #1
 80062e0:	e7f2      	b.n	80062c8 <_printf_float+0x1a0>
 80062e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80062e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062e8:	4299      	cmp	r1, r3
 80062ea:	db05      	blt.n	80062f8 <_printf_float+0x1d0>
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	6121      	str	r1, [r4, #16]
 80062f0:	07d8      	lsls	r0, r3, #31
 80062f2:	d5ea      	bpl.n	80062ca <_printf_float+0x1a2>
 80062f4:	1c4b      	adds	r3, r1, #1
 80062f6:	e7e7      	b.n	80062c8 <_printf_float+0x1a0>
 80062f8:	2900      	cmp	r1, #0
 80062fa:	bfd4      	ite	le
 80062fc:	f1c1 0202 	rsble	r2, r1, #2
 8006300:	2201      	movgt	r2, #1
 8006302:	4413      	add	r3, r2
 8006304:	e7e0      	b.n	80062c8 <_printf_float+0x1a0>
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	055a      	lsls	r2, r3, #21
 800630a:	d407      	bmi.n	800631c <_printf_float+0x1f4>
 800630c:	6923      	ldr	r3, [r4, #16]
 800630e:	4642      	mov	r2, r8
 8006310:	4631      	mov	r1, r6
 8006312:	4628      	mov	r0, r5
 8006314:	47b8      	blx	r7
 8006316:	3001      	adds	r0, #1
 8006318:	d12c      	bne.n	8006374 <_printf_float+0x24c>
 800631a:	e764      	b.n	80061e6 <_printf_float+0xbe>
 800631c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006320:	f240 80e0 	bls.w	80064e4 <_printf_float+0x3bc>
 8006324:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006328:	2200      	movs	r2, #0
 800632a:	2300      	movs	r3, #0
 800632c:	f7fa fbd4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006330:	2800      	cmp	r0, #0
 8006332:	d034      	beq.n	800639e <_printf_float+0x276>
 8006334:	4a37      	ldr	r2, [pc, #220]	; (8006414 <_printf_float+0x2ec>)
 8006336:	2301      	movs	r3, #1
 8006338:	4631      	mov	r1, r6
 800633a:	4628      	mov	r0, r5
 800633c:	47b8      	blx	r7
 800633e:	3001      	adds	r0, #1
 8006340:	f43f af51 	beq.w	80061e6 <_printf_float+0xbe>
 8006344:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006348:	429a      	cmp	r2, r3
 800634a:	db02      	blt.n	8006352 <_printf_float+0x22a>
 800634c:	6823      	ldr	r3, [r4, #0]
 800634e:	07d8      	lsls	r0, r3, #31
 8006350:	d510      	bpl.n	8006374 <_printf_float+0x24c>
 8006352:	ee18 3a10 	vmov	r3, s16
 8006356:	4652      	mov	r2, sl
 8006358:	4631      	mov	r1, r6
 800635a:	4628      	mov	r0, r5
 800635c:	47b8      	blx	r7
 800635e:	3001      	adds	r0, #1
 8006360:	f43f af41 	beq.w	80061e6 <_printf_float+0xbe>
 8006364:	f04f 0800 	mov.w	r8, #0
 8006368:	f104 091a 	add.w	r9, r4, #26
 800636c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800636e:	3b01      	subs	r3, #1
 8006370:	4543      	cmp	r3, r8
 8006372:	dc09      	bgt.n	8006388 <_printf_float+0x260>
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	079b      	lsls	r3, r3, #30
 8006378:	f100 8107 	bmi.w	800658a <_printf_float+0x462>
 800637c:	68e0      	ldr	r0, [r4, #12]
 800637e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006380:	4298      	cmp	r0, r3
 8006382:	bfb8      	it	lt
 8006384:	4618      	movlt	r0, r3
 8006386:	e730      	b.n	80061ea <_printf_float+0xc2>
 8006388:	2301      	movs	r3, #1
 800638a:	464a      	mov	r2, r9
 800638c:	4631      	mov	r1, r6
 800638e:	4628      	mov	r0, r5
 8006390:	47b8      	blx	r7
 8006392:	3001      	adds	r0, #1
 8006394:	f43f af27 	beq.w	80061e6 <_printf_float+0xbe>
 8006398:	f108 0801 	add.w	r8, r8, #1
 800639c:	e7e6      	b.n	800636c <_printf_float+0x244>
 800639e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	dc39      	bgt.n	8006418 <_printf_float+0x2f0>
 80063a4:	4a1b      	ldr	r2, [pc, #108]	; (8006414 <_printf_float+0x2ec>)
 80063a6:	2301      	movs	r3, #1
 80063a8:	4631      	mov	r1, r6
 80063aa:	4628      	mov	r0, r5
 80063ac:	47b8      	blx	r7
 80063ae:	3001      	adds	r0, #1
 80063b0:	f43f af19 	beq.w	80061e6 <_printf_float+0xbe>
 80063b4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80063b8:	4313      	orrs	r3, r2
 80063ba:	d102      	bne.n	80063c2 <_printf_float+0x29a>
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	07d9      	lsls	r1, r3, #31
 80063c0:	d5d8      	bpl.n	8006374 <_printf_float+0x24c>
 80063c2:	ee18 3a10 	vmov	r3, s16
 80063c6:	4652      	mov	r2, sl
 80063c8:	4631      	mov	r1, r6
 80063ca:	4628      	mov	r0, r5
 80063cc:	47b8      	blx	r7
 80063ce:	3001      	adds	r0, #1
 80063d0:	f43f af09 	beq.w	80061e6 <_printf_float+0xbe>
 80063d4:	f04f 0900 	mov.w	r9, #0
 80063d8:	f104 0a1a 	add.w	sl, r4, #26
 80063dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063de:	425b      	negs	r3, r3
 80063e0:	454b      	cmp	r3, r9
 80063e2:	dc01      	bgt.n	80063e8 <_printf_float+0x2c0>
 80063e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063e6:	e792      	b.n	800630e <_printf_float+0x1e6>
 80063e8:	2301      	movs	r3, #1
 80063ea:	4652      	mov	r2, sl
 80063ec:	4631      	mov	r1, r6
 80063ee:	4628      	mov	r0, r5
 80063f0:	47b8      	blx	r7
 80063f2:	3001      	adds	r0, #1
 80063f4:	f43f aef7 	beq.w	80061e6 <_printf_float+0xbe>
 80063f8:	f109 0901 	add.w	r9, r9, #1
 80063fc:	e7ee      	b.n	80063dc <_printf_float+0x2b4>
 80063fe:	bf00      	nop
 8006400:	7fefffff 	.word	0x7fefffff
 8006404:	0800a245 	.word	0x0800a245
 8006408:	0800a249 	.word	0x0800a249
 800640c:	0800a24d 	.word	0x0800a24d
 8006410:	0800a251 	.word	0x0800a251
 8006414:	0800a255 	.word	0x0800a255
 8006418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800641a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800641c:	429a      	cmp	r2, r3
 800641e:	bfa8      	it	ge
 8006420:	461a      	movge	r2, r3
 8006422:	2a00      	cmp	r2, #0
 8006424:	4691      	mov	r9, r2
 8006426:	dc37      	bgt.n	8006498 <_printf_float+0x370>
 8006428:	f04f 0b00 	mov.w	fp, #0
 800642c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006430:	f104 021a 	add.w	r2, r4, #26
 8006434:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006436:	9305      	str	r3, [sp, #20]
 8006438:	eba3 0309 	sub.w	r3, r3, r9
 800643c:	455b      	cmp	r3, fp
 800643e:	dc33      	bgt.n	80064a8 <_printf_float+0x380>
 8006440:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006444:	429a      	cmp	r2, r3
 8006446:	db3b      	blt.n	80064c0 <_printf_float+0x398>
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	07da      	lsls	r2, r3, #31
 800644c:	d438      	bmi.n	80064c0 <_printf_float+0x398>
 800644e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006452:	eba2 0903 	sub.w	r9, r2, r3
 8006456:	9b05      	ldr	r3, [sp, #20]
 8006458:	1ad2      	subs	r2, r2, r3
 800645a:	4591      	cmp	r9, r2
 800645c:	bfa8      	it	ge
 800645e:	4691      	movge	r9, r2
 8006460:	f1b9 0f00 	cmp.w	r9, #0
 8006464:	dc35      	bgt.n	80064d2 <_printf_float+0x3aa>
 8006466:	f04f 0800 	mov.w	r8, #0
 800646a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800646e:	f104 0a1a 	add.w	sl, r4, #26
 8006472:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006476:	1a9b      	subs	r3, r3, r2
 8006478:	eba3 0309 	sub.w	r3, r3, r9
 800647c:	4543      	cmp	r3, r8
 800647e:	f77f af79 	ble.w	8006374 <_printf_float+0x24c>
 8006482:	2301      	movs	r3, #1
 8006484:	4652      	mov	r2, sl
 8006486:	4631      	mov	r1, r6
 8006488:	4628      	mov	r0, r5
 800648a:	47b8      	blx	r7
 800648c:	3001      	adds	r0, #1
 800648e:	f43f aeaa 	beq.w	80061e6 <_printf_float+0xbe>
 8006492:	f108 0801 	add.w	r8, r8, #1
 8006496:	e7ec      	b.n	8006472 <_printf_float+0x34a>
 8006498:	4613      	mov	r3, r2
 800649a:	4631      	mov	r1, r6
 800649c:	4642      	mov	r2, r8
 800649e:	4628      	mov	r0, r5
 80064a0:	47b8      	blx	r7
 80064a2:	3001      	adds	r0, #1
 80064a4:	d1c0      	bne.n	8006428 <_printf_float+0x300>
 80064a6:	e69e      	b.n	80061e6 <_printf_float+0xbe>
 80064a8:	2301      	movs	r3, #1
 80064aa:	4631      	mov	r1, r6
 80064ac:	4628      	mov	r0, r5
 80064ae:	9205      	str	r2, [sp, #20]
 80064b0:	47b8      	blx	r7
 80064b2:	3001      	adds	r0, #1
 80064b4:	f43f ae97 	beq.w	80061e6 <_printf_float+0xbe>
 80064b8:	9a05      	ldr	r2, [sp, #20]
 80064ba:	f10b 0b01 	add.w	fp, fp, #1
 80064be:	e7b9      	b.n	8006434 <_printf_float+0x30c>
 80064c0:	ee18 3a10 	vmov	r3, s16
 80064c4:	4652      	mov	r2, sl
 80064c6:	4631      	mov	r1, r6
 80064c8:	4628      	mov	r0, r5
 80064ca:	47b8      	blx	r7
 80064cc:	3001      	adds	r0, #1
 80064ce:	d1be      	bne.n	800644e <_printf_float+0x326>
 80064d0:	e689      	b.n	80061e6 <_printf_float+0xbe>
 80064d2:	9a05      	ldr	r2, [sp, #20]
 80064d4:	464b      	mov	r3, r9
 80064d6:	4442      	add	r2, r8
 80064d8:	4631      	mov	r1, r6
 80064da:	4628      	mov	r0, r5
 80064dc:	47b8      	blx	r7
 80064de:	3001      	adds	r0, #1
 80064e0:	d1c1      	bne.n	8006466 <_printf_float+0x33e>
 80064e2:	e680      	b.n	80061e6 <_printf_float+0xbe>
 80064e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064e6:	2a01      	cmp	r2, #1
 80064e8:	dc01      	bgt.n	80064ee <_printf_float+0x3c6>
 80064ea:	07db      	lsls	r3, r3, #31
 80064ec:	d53a      	bpl.n	8006564 <_printf_float+0x43c>
 80064ee:	2301      	movs	r3, #1
 80064f0:	4642      	mov	r2, r8
 80064f2:	4631      	mov	r1, r6
 80064f4:	4628      	mov	r0, r5
 80064f6:	47b8      	blx	r7
 80064f8:	3001      	adds	r0, #1
 80064fa:	f43f ae74 	beq.w	80061e6 <_printf_float+0xbe>
 80064fe:	ee18 3a10 	vmov	r3, s16
 8006502:	4652      	mov	r2, sl
 8006504:	4631      	mov	r1, r6
 8006506:	4628      	mov	r0, r5
 8006508:	47b8      	blx	r7
 800650a:	3001      	adds	r0, #1
 800650c:	f43f ae6b 	beq.w	80061e6 <_printf_float+0xbe>
 8006510:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006514:	2200      	movs	r2, #0
 8006516:	2300      	movs	r3, #0
 8006518:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800651c:	f7fa fadc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006520:	b9d8      	cbnz	r0, 800655a <_printf_float+0x432>
 8006522:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006526:	f108 0201 	add.w	r2, r8, #1
 800652a:	4631      	mov	r1, r6
 800652c:	4628      	mov	r0, r5
 800652e:	47b8      	blx	r7
 8006530:	3001      	adds	r0, #1
 8006532:	d10e      	bne.n	8006552 <_printf_float+0x42a>
 8006534:	e657      	b.n	80061e6 <_printf_float+0xbe>
 8006536:	2301      	movs	r3, #1
 8006538:	4652      	mov	r2, sl
 800653a:	4631      	mov	r1, r6
 800653c:	4628      	mov	r0, r5
 800653e:	47b8      	blx	r7
 8006540:	3001      	adds	r0, #1
 8006542:	f43f ae50 	beq.w	80061e6 <_printf_float+0xbe>
 8006546:	f108 0801 	add.w	r8, r8, #1
 800654a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800654c:	3b01      	subs	r3, #1
 800654e:	4543      	cmp	r3, r8
 8006550:	dcf1      	bgt.n	8006536 <_printf_float+0x40e>
 8006552:	464b      	mov	r3, r9
 8006554:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006558:	e6da      	b.n	8006310 <_printf_float+0x1e8>
 800655a:	f04f 0800 	mov.w	r8, #0
 800655e:	f104 0a1a 	add.w	sl, r4, #26
 8006562:	e7f2      	b.n	800654a <_printf_float+0x422>
 8006564:	2301      	movs	r3, #1
 8006566:	4642      	mov	r2, r8
 8006568:	e7df      	b.n	800652a <_printf_float+0x402>
 800656a:	2301      	movs	r3, #1
 800656c:	464a      	mov	r2, r9
 800656e:	4631      	mov	r1, r6
 8006570:	4628      	mov	r0, r5
 8006572:	47b8      	blx	r7
 8006574:	3001      	adds	r0, #1
 8006576:	f43f ae36 	beq.w	80061e6 <_printf_float+0xbe>
 800657a:	f108 0801 	add.w	r8, r8, #1
 800657e:	68e3      	ldr	r3, [r4, #12]
 8006580:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006582:	1a5b      	subs	r3, r3, r1
 8006584:	4543      	cmp	r3, r8
 8006586:	dcf0      	bgt.n	800656a <_printf_float+0x442>
 8006588:	e6f8      	b.n	800637c <_printf_float+0x254>
 800658a:	f04f 0800 	mov.w	r8, #0
 800658e:	f104 0919 	add.w	r9, r4, #25
 8006592:	e7f4      	b.n	800657e <_printf_float+0x456>

08006594 <_printf_common>:
 8006594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006598:	4616      	mov	r6, r2
 800659a:	4699      	mov	r9, r3
 800659c:	688a      	ldr	r2, [r1, #8]
 800659e:	690b      	ldr	r3, [r1, #16]
 80065a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065a4:	4293      	cmp	r3, r2
 80065a6:	bfb8      	it	lt
 80065a8:	4613      	movlt	r3, r2
 80065aa:	6033      	str	r3, [r6, #0]
 80065ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065b0:	4607      	mov	r7, r0
 80065b2:	460c      	mov	r4, r1
 80065b4:	b10a      	cbz	r2, 80065ba <_printf_common+0x26>
 80065b6:	3301      	adds	r3, #1
 80065b8:	6033      	str	r3, [r6, #0]
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	0699      	lsls	r1, r3, #26
 80065be:	bf42      	ittt	mi
 80065c0:	6833      	ldrmi	r3, [r6, #0]
 80065c2:	3302      	addmi	r3, #2
 80065c4:	6033      	strmi	r3, [r6, #0]
 80065c6:	6825      	ldr	r5, [r4, #0]
 80065c8:	f015 0506 	ands.w	r5, r5, #6
 80065cc:	d106      	bne.n	80065dc <_printf_common+0x48>
 80065ce:	f104 0a19 	add.w	sl, r4, #25
 80065d2:	68e3      	ldr	r3, [r4, #12]
 80065d4:	6832      	ldr	r2, [r6, #0]
 80065d6:	1a9b      	subs	r3, r3, r2
 80065d8:	42ab      	cmp	r3, r5
 80065da:	dc26      	bgt.n	800662a <_printf_common+0x96>
 80065dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065e0:	1e13      	subs	r3, r2, #0
 80065e2:	6822      	ldr	r2, [r4, #0]
 80065e4:	bf18      	it	ne
 80065e6:	2301      	movne	r3, #1
 80065e8:	0692      	lsls	r2, r2, #26
 80065ea:	d42b      	bmi.n	8006644 <_printf_common+0xb0>
 80065ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065f0:	4649      	mov	r1, r9
 80065f2:	4638      	mov	r0, r7
 80065f4:	47c0      	blx	r8
 80065f6:	3001      	adds	r0, #1
 80065f8:	d01e      	beq.n	8006638 <_printf_common+0xa4>
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	6922      	ldr	r2, [r4, #16]
 80065fe:	f003 0306 	and.w	r3, r3, #6
 8006602:	2b04      	cmp	r3, #4
 8006604:	bf02      	ittt	eq
 8006606:	68e5      	ldreq	r5, [r4, #12]
 8006608:	6833      	ldreq	r3, [r6, #0]
 800660a:	1aed      	subeq	r5, r5, r3
 800660c:	68a3      	ldr	r3, [r4, #8]
 800660e:	bf0c      	ite	eq
 8006610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006614:	2500      	movne	r5, #0
 8006616:	4293      	cmp	r3, r2
 8006618:	bfc4      	itt	gt
 800661a:	1a9b      	subgt	r3, r3, r2
 800661c:	18ed      	addgt	r5, r5, r3
 800661e:	2600      	movs	r6, #0
 8006620:	341a      	adds	r4, #26
 8006622:	42b5      	cmp	r5, r6
 8006624:	d11a      	bne.n	800665c <_printf_common+0xc8>
 8006626:	2000      	movs	r0, #0
 8006628:	e008      	b.n	800663c <_printf_common+0xa8>
 800662a:	2301      	movs	r3, #1
 800662c:	4652      	mov	r2, sl
 800662e:	4649      	mov	r1, r9
 8006630:	4638      	mov	r0, r7
 8006632:	47c0      	blx	r8
 8006634:	3001      	adds	r0, #1
 8006636:	d103      	bne.n	8006640 <_printf_common+0xac>
 8006638:	f04f 30ff 	mov.w	r0, #4294967295
 800663c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006640:	3501      	adds	r5, #1
 8006642:	e7c6      	b.n	80065d2 <_printf_common+0x3e>
 8006644:	18e1      	adds	r1, r4, r3
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	2030      	movs	r0, #48	; 0x30
 800664a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800664e:	4422      	add	r2, r4
 8006650:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006658:	3302      	adds	r3, #2
 800665a:	e7c7      	b.n	80065ec <_printf_common+0x58>
 800665c:	2301      	movs	r3, #1
 800665e:	4622      	mov	r2, r4
 8006660:	4649      	mov	r1, r9
 8006662:	4638      	mov	r0, r7
 8006664:	47c0      	blx	r8
 8006666:	3001      	adds	r0, #1
 8006668:	d0e6      	beq.n	8006638 <_printf_common+0xa4>
 800666a:	3601      	adds	r6, #1
 800666c:	e7d9      	b.n	8006622 <_printf_common+0x8e>
	...

08006670 <_printf_i>:
 8006670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006674:	7e0f      	ldrb	r7, [r1, #24]
 8006676:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006678:	2f78      	cmp	r7, #120	; 0x78
 800667a:	4691      	mov	r9, r2
 800667c:	4680      	mov	r8, r0
 800667e:	460c      	mov	r4, r1
 8006680:	469a      	mov	sl, r3
 8006682:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006686:	d807      	bhi.n	8006698 <_printf_i+0x28>
 8006688:	2f62      	cmp	r7, #98	; 0x62
 800668a:	d80a      	bhi.n	80066a2 <_printf_i+0x32>
 800668c:	2f00      	cmp	r7, #0
 800668e:	f000 80d4 	beq.w	800683a <_printf_i+0x1ca>
 8006692:	2f58      	cmp	r7, #88	; 0x58
 8006694:	f000 80c0 	beq.w	8006818 <_printf_i+0x1a8>
 8006698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800669c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066a0:	e03a      	b.n	8006718 <_printf_i+0xa8>
 80066a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066a6:	2b15      	cmp	r3, #21
 80066a8:	d8f6      	bhi.n	8006698 <_printf_i+0x28>
 80066aa:	a101      	add	r1, pc, #4	; (adr r1, 80066b0 <_printf_i+0x40>)
 80066ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066b0:	08006709 	.word	0x08006709
 80066b4:	0800671d 	.word	0x0800671d
 80066b8:	08006699 	.word	0x08006699
 80066bc:	08006699 	.word	0x08006699
 80066c0:	08006699 	.word	0x08006699
 80066c4:	08006699 	.word	0x08006699
 80066c8:	0800671d 	.word	0x0800671d
 80066cc:	08006699 	.word	0x08006699
 80066d0:	08006699 	.word	0x08006699
 80066d4:	08006699 	.word	0x08006699
 80066d8:	08006699 	.word	0x08006699
 80066dc:	08006821 	.word	0x08006821
 80066e0:	08006749 	.word	0x08006749
 80066e4:	080067db 	.word	0x080067db
 80066e8:	08006699 	.word	0x08006699
 80066ec:	08006699 	.word	0x08006699
 80066f0:	08006843 	.word	0x08006843
 80066f4:	08006699 	.word	0x08006699
 80066f8:	08006749 	.word	0x08006749
 80066fc:	08006699 	.word	0x08006699
 8006700:	08006699 	.word	0x08006699
 8006704:	080067e3 	.word	0x080067e3
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	1d1a      	adds	r2, r3, #4
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	602a      	str	r2, [r5, #0]
 8006710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006718:	2301      	movs	r3, #1
 800671a:	e09f      	b.n	800685c <_printf_i+0x1ec>
 800671c:	6820      	ldr	r0, [r4, #0]
 800671e:	682b      	ldr	r3, [r5, #0]
 8006720:	0607      	lsls	r7, r0, #24
 8006722:	f103 0104 	add.w	r1, r3, #4
 8006726:	6029      	str	r1, [r5, #0]
 8006728:	d501      	bpl.n	800672e <_printf_i+0xbe>
 800672a:	681e      	ldr	r6, [r3, #0]
 800672c:	e003      	b.n	8006736 <_printf_i+0xc6>
 800672e:	0646      	lsls	r6, r0, #25
 8006730:	d5fb      	bpl.n	800672a <_printf_i+0xba>
 8006732:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006736:	2e00      	cmp	r6, #0
 8006738:	da03      	bge.n	8006742 <_printf_i+0xd2>
 800673a:	232d      	movs	r3, #45	; 0x2d
 800673c:	4276      	negs	r6, r6
 800673e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006742:	485a      	ldr	r0, [pc, #360]	; (80068ac <_printf_i+0x23c>)
 8006744:	230a      	movs	r3, #10
 8006746:	e012      	b.n	800676e <_printf_i+0xfe>
 8006748:	682b      	ldr	r3, [r5, #0]
 800674a:	6820      	ldr	r0, [r4, #0]
 800674c:	1d19      	adds	r1, r3, #4
 800674e:	6029      	str	r1, [r5, #0]
 8006750:	0605      	lsls	r5, r0, #24
 8006752:	d501      	bpl.n	8006758 <_printf_i+0xe8>
 8006754:	681e      	ldr	r6, [r3, #0]
 8006756:	e002      	b.n	800675e <_printf_i+0xee>
 8006758:	0641      	lsls	r1, r0, #25
 800675a:	d5fb      	bpl.n	8006754 <_printf_i+0xe4>
 800675c:	881e      	ldrh	r6, [r3, #0]
 800675e:	4853      	ldr	r0, [pc, #332]	; (80068ac <_printf_i+0x23c>)
 8006760:	2f6f      	cmp	r7, #111	; 0x6f
 8006762:	bf0c      	ite	eq
 8006764:	2308      	moveq	r3, #8
 8006766:	230a      	movne	r3, #10
 8006768:	2100      	movs	r1, #0
 800676a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800676e:	6865      	ldr	r5, [r4, #4]
 8006770:	60a5      	str	r5, [r4, #8]
 8006772:	2d00      	cmp	r5, #0
 8006774:	bfa2      	ittt	ge
 8006776:	6821      	ldrge	r1, [r4, #0]
 8006778:	f021 0104 	bicge.w	r1, r1, #4
 800677c:	6021      	strge	r1, [r4, #0]
 800677e:	b90e      	cbnz	r6, 8006784 <_printf_i+0x114>
 8006780:	2d00      	cmp	r5, #0
 8006782:	d04b      	beq.n	800681c <_printf_i+0x1ac>
 8006784:	4615      	mov	r5, r2
 8006786:	fbb6 f1f3 	udiv	r1, r6, r3
 800678a:	fb03 6711 	mls	r7, r3, r1, r6
 800678e:	5dc7      	ldrb	r7, [r0, r7]
 8006790:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006794:	4637      	mov	r7, r6
 8006796:	42bb      	cmp	r3, r7
 8006798:	460e      	mov	r6, r1
 800679a:	d9f4      	bls.n	8006786 <_printf_i+0x116>
 800679c:	2b08      	cmp	r3, #8
 800679e:	d10b      	bne.n	80067b8 <_printf_i+0x148>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	07de      	lsls	r6, r3, #31
 80067a4:	d508      	bpl.n	80067b8 <_printf_i+0x148>
 80067a6:	6923      	ldr	r3, [r4, #16]
 80067a8:	6861      	ldr	r1, [r4, #4]
 80067aa:	4299      	cmp	r1, r3
 80067ac:	bfde      	ittt	le
 80067ae:	2330      	movle	r3, #48	; 0x30
 80067b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067b8:	1b52      	subs	r2, r2, r5
 80067ba:	6122      	str	r2, [r4, #16]
 80067bc:	f8cd a000 	str.w	sl, [sp]
 80067c0:	464b      	mov	r3, r9
 80067c2:	aa03      	add	r2, sp, #12
 80067c4:	4621      	mov	r1, r4
 80067c6:	4640      	mov	r0, r8
 80067c8:	f7ff fee4 	bl	8006594 <_printf_common>
 80067cc:	3001      	adds	r0, #1
 80067ce:	d14a      	bne.n	8006866 <_printf_i+0x1f6>
 80067d0:	f04f 30ff 	mov.w	r0, #4294967295
 80067d4:	b004      	add	sp, #16
 80067d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	f043 0320 	orr.w	r3, r3, #32
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	4833      	ldr	r0, [pc, #204]	; (80068b0 <_printf_i+0x240>)
 80067e4:	2778      	movs	r7, #120	; 0x78
 80067e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	6829      	ldr	r1, [r5, #0]
 80067ee:	061f      	lsls	r7, r3, #24
 80067f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80067f4:	d402      	bmi.n	80067fc <_printf_i+0x18c>
 80067f6:	065f      	lsls	r7, r3, #25
 80067f8:	bf48      	it	mi
 80067fa:	b2b6      	uxthmi	r6, r6
 80067fc:	07df      	lsls	r7, r3, #31
 80067fe:	bf48      	it	mi
 8006800:	f043 0320 	orrmi.w	r3, r3, #32
 8006804:	6029      	str	r1, [r5, #0]
 8006806:	bf48      	it	mi
 8006808:	6023      	strmi	r3, [r4, #0]
 800680a:	b91e      	cbnz	r6, 8006814 <_printf_i+0x1a4>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	f023 0320 	bic.w	r3, r3, #32
 8006812:	6023      	str	r3, [r4, #0]
 8006814:	2310      	movs	r3, #16
 8006816:	e7a7      	b.n	8006768 <_printf_i+0xf8>
 8006818:	4824      	ldr	r0, [pc, #144]	; (80068ac <_printf_i+0x23c>)
 800681a:	e7e4      	b.n	80067e6 <_printf_i+0x176>
 800681c:	4615      	mov	r5, r2
 800681e:	e7bd      	b.n	800679c <_printf_i+0x12c>
 8006820:	682b      	ldr	r3, [r5, #0]
 8006822:	6826      	ldr	r6, [r4, #0]
 8006824:	6961      	ldr	r1, [r4, #20]
 8006826:	1d18      	adds	r0, r3, #4
 8006828:	6028      	str	r0, [r5, #0]
 800682a:	0635      	lsls	r5, r6, #24
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	d501      	bpl.n	8006834 <_printf_i+0x1c4>
 8006830:	6019      	str	r1, [r3, #0]
 8006832:	e002      	b.n	800683a <_printf_i+0x1ca>
 8006834:	0670      	lsls	r0, r6, #25
 8006836:	d5fb      	bpl.n	8006830 <_printf_i+0x1c0>
 8006838:	8019      	strh	r1, [r3, #0]
 800683a:	2300      	movs	r3, #0
 800683c:	6123      	str	r3, [r4, #16]
 800683e:	4615      	mov	r5, r2
 8006840:	e7bc      	b.n	80067bc <_printf_i+0x14c>
 8006842:	682b      	ldr	r3, [r5, #0]
 8006844:	1d1a      	adds	r2, r3, #4
 8006846:	602a      	str	r2, [r5, #0]
 8006848:	681d      	ldr	r5, [r3, #0]
 800684a:	6862      	ldr	r2, [r4, #4]
 800684c:	2100      	movs	r1, #0
 800684e:	4628      	mov	r0, r5
 8006850:	f7f9 fcc6 	bl	80001e0 <memchr>
 8006854:	b108      	cbz	r0, 800685a <_printf_i+0x1ea>
 8006856:	1b40      	subs	r0, r0, r5
 8006858:	6060      	str	r0, [r4, #4]
 800685a:	6863      	ldr	r3, [r4, #4]
 800685c:	6123      	str	r3, [r4, #16]
 800685e:	2300      	movs	r3, #0
 8006860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006864:	e7aa      	b.n	80067bc <_printf_i+0x14c>
 8006866:	6923      	ldr	r3, [r4, #16]
 8006868:	462a      	mov	r2, r5
 800686a:	4649      	mov	r1, r9
 800686c:	4640      	mov	r0, r8
 800686e:	47d0      	blx	sl
 8006870:	3001      	adds	r0, #1
 8006872:	d0ad      	beq.n	80067d0 <_printf_i+0x160>
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	079b      	lsls	r3, r3, #30
 8006878:	d413      	bmi.n	80068a2 <_printf_i+0x232>
 800687a:	68e0      	ldr	r0, [r4, #12]
 800687c:	9b03      	ldr	r3, [sp, #12]
 800687e:	4298      	cmp	r0, r3
 8006880:	bfb8      	it	lt
 8006882:	4618      	movlt	r0, r3
 8006884:	e7a6      	b.n	80067d4 <_printf_i+0x164>
 8006886:	2301      	movs	r3, #1
 8006888:	4632      	mov	r2, r6
 800688a:	4649      	mov	r1, r9
 800688c:	4640      	mov	r0, r8
 800688e:	47d0      	blx	sl
 8006890:	3001      	adds	r0, #1
 8006892:	d09d      	beq.n	80067d0 <_printf_i+0x160>
 8006894:	3501      	adds	r5, #1
 8006896:	68e3      	ldr	r3, [r4, #12]
 8006898:	9903      	ldr	r1, [sp, #12]
 800689a:	1a5b      	subs	r3, r3, r1
 800689c:	42ab      	cmp	r3, r5
 800689e:	dcf2      	bgt.n	8006886 <_printf_i+0x216>
 80068a0:	e7eb      	b.n	800687a <_printf_i+0x20a>
 80068a2:	2500      	movs	r5, #0
 80068a4:	f104 0619 	add.w	r6, r4, #25
 80068a8:	e7f5      	b.n	8006896 <_printf_i+0x226>
 80068aa:	bf00      	nop
 80068ac:	0800a257 	.word	0x0800a257
 80068b0:	0800a268 	.word	0x0800a268

080068b4 <std>:
 80068b4:	2300      	movs	r3, #0
 80068b6:	b510      	push	{r4, lr}
 80068b8:	4604      	mov	r4, r0
 80068ba:	e9c0 3300 	strd	r3, r3, [r0]
 80068be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068c2:	6083      	str	r3, [r0, #8]
 80068c4:	8181      	strh	r1, [r0, #12]
 80068c6:	6643      	str	r3, [r0, #100]	; 0x64
 80068c8:	81c2      	strh	r2, [r0, #14]
 80068ca:	6183      	str	r3, [r0, #24]
 80068cc:	4619      	mov	r1, r3
 80068ce:	2208      	movs	r2, #8
 80068d0:	305c      	adds	r0, #92	; 0x5c
 80068d2:	f000 f902 	bl	8006ada <memset>
 80068d6:	4b05      	ldr	r3, [pc, #20]	; (80068ec <std+0x38>)
 80068d8:	6263      	str	r3, [r4, #36]	; 0x24
 80068da:	4b05      	ldr	r3, [pc, #20]	; (80068f0 <std+0x3c>)
 80068dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80068de:	4b05      	ldr	r3, [pc, #20]	; (80068f4 <std+0x40>)
 80068e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068e2:	4b05      	ldr	r3, [pc, #20]	; (80068f8 <std+0x44>)
 80068e4:	6224      	str	r4, [r4, #32]
 80068e6:	6323      	str	r3, [r4, #48]	; 0x30
 80068e8:	bd10      	pop	{r4, pc}
 80068ea:	bf00      	nop
 80068ec:	08006a55 	.word	0x08006a55
 80068f0:	08006a77 	.word	0x08006a77
 80068f4:	08006aaf 	.word	0x08006aaf
 80068f8:	08006ad3 	.word	0x08006ad3

080068fc <stdio_exit_handler>:
 80068fc:	4a02      	ldr	r2, [pc, #8]	; (8006908 <stdio_exit_handler+0xc>)
 80068fe:	4903      	ldr	r1, [pc, #12]	; (800690c <stdio_exit_handler+0x10>)
 8006900:	4803      	ldr	r0, [pc, #12]	; (8006910 <stdio_exit_handler+0x14>)
 8006902:	f000 b869 	b.w	80069d8 <_fwalk_sglue>
 8006906:	bf00      	nop
 8006908:	20000018 	.word	0x20000018
 800690c:	08008561 	.word	0x08008561
 8006910:	20000024 	.word	0x20000024

08006914 <cleanup_stdio>:
 8006914:	6841      	ldr	r1, [r0, #4]
 8006916:	4b0c      	ldr	r3, [pc, #48]	; (8006948 <cleanup_stdio+0x34>)
 8006918:	4299      	cmp	r1, r3
 800691a:	b510      	push	{r4, lr}
 800691c:	4604      	mov	r4, r0
 800691e:	d001      	beq.n	8006924 <cleanup_stdio+0x10>
 8006920:	f001 fe1e 	bl	8008560 <_fflush_r>
 8006924:	68a1      	ldr	r1, [r4, #8]
 8006926:	4b09      	ldr	r3, [pc, #36]	; (800694c <cleanup_stdio+0x38>)
 8006928:	4299      	cmp	r1, r3
 800692a:	d002      	beq.n	8006932 <cleanup_stdio+0x1e>
 800692c:	4620      	mov	r0, r4
 800692e:	f001 fe17 	bl	8008560 <_fflush_r>
 8006932:	68e1      	ldr	r1, [r4, #12]
 8006934:	4b06      	ldr	r3, [pc, #24]	; (8006950 <cleanup_stdio+0x3c>)
 8006936:	4299      	cmp	r1, r3
 8006938:	d004      	beq.n	8006944 <cleanup_stdio+0x30>
 800693a:	4620      	mov	r0, r4
 800693c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006940:	f001 be0e 	b.w	8008560 <_fflush_r>
 8006944:	bd10      	pop	{r4, pc}
 8006946:	bf00      	nop
 8006948:	20000388 	.word	0x20000388
 800694c:	200003f0 	.word	0x200003f0
 8006950:	20000458 	.word	0x20000458

08006954 <global_stdio_init.part.0>:
 8006954:	b510      	push	{r4, lr}
 8006956:	4b0b      	ldr	r3, [pc, #44]	; (8006984 <global_stdio_init.part.0+0x30>)
 8006958:	4c0b      	ldr	r4, [pc, #44]	; (8006988 <global_stdio_init.part.0+0x34>)
 800695a:	4a0c      	ldr	r2, [pc, #48]	; (800698c <global_stdio_init.part.0+0x38>)
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	4620      	mov	r0, r4
 8006960:	2200      	movs	r2, #0
 8006962:	2104      	movs	r1, #4
 8006964:	f7ff ffa6 	bl	80068b4 <std>
 8006968:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800696c:	2201      	movs	r2, #1
 800696e:	2109      	movs	r1, #9
 8006970:	f7ff ffa0 	bl	80068b4 <std>
 8006974:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006978:	2202      	movs	r2, #2
 800697a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800697e:	2112      	movs	r1, #18
 8006980:	f7ff bf98 	b.w	80068b4 <std>
 8006984:	200004c0 	.word	0x200004c0
 8006988:	20000388 	.word	0x20000388
 800698c:	080068fd 	.word	0x080068fd

08006990 <__sfp_lock_acquire>:
 8006990:	4801      	ldr	r0, [pc, #4]	; (8006998 <__sfp_lock_acquire+0x8>)
 8006992:	f000 b99d 	b.w	8006cd0 <__retarget_lock_acquire_recursive>
 8006996:	bf00      	nop
 8006998:	200004c9 	.word	0x200004c9

0800699c <__sfp_lock_release>:
 800699c:	4801      	ldr	r0, [pc, #4]	; (80069a4 <__sfp_lock_release+0x8>)
 800699e:	f000 b998 	b.w	8006cd2 <__retarget_lock_release_recursive>
 80069a2:	bf00      	nop
 80069a4:	200004c9 	.word	0x200004c9

080069a8 <__sinit>:
 80069a8:	b510      	push	{r4, lr}
 80069aa:	4604      	mov	r4, r0
 80069ac:	f7ff fff0 	bl	8006990 <__sfp_lock_acquire>
 80069b0:	6a23      	ldr	r3, [r4, #32]
 80069b2:	b11b      	cbz	r3, 80069bc <__sinit+0x14>
 80069b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069b8:	f7ff bff0 	b.w	800699c <__sfp_lock_release>
 80069bc:	4b04      	ldr	r3, [pc, #16]	; (80069d0 <__sinit+0x28>)
 80069be:	6223      	str	r3, [r4, #32]
 80069c0:	4b04      	ldr	r3, [pc, #16]	; (80069d4 <__sinit+0x2c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1f5      	bne.n	80069b4 <__sinit+0xc>
 80069c8:	f7ff ffc4 	bl	8006954 <global_stdio_init.part.0>
 80069cc:	e7f2      	b.n	80069b4 <__sinit+0xc>
 80069ce:	bf00      	nop
 80069d0:	08006915 	.word	0x08006915
 80069d4:	200004c0 	.word	0x200004c0

080069d8 <_fwalk_sglue>:
 80069d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069dc:	4607      	mov	r7, r0
 80069de:	4688      	mov	r8, r1
 80069e0:	4614      	mov	r4, r2
 80069e2:	2600      	movs	r6, #0
 80069e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069e8:	f1b9 0901 	subs.w	r9, r9, #1
 80069ec:	d505      	bpl.n	80069fa <_fwalk_sglue+0x22>
 80069ee:	6824      	ldr	r4, [r4, #0]
 80069f0:	2c00      	cmp	r4, #0
 80069f2:	d1f7      	bne.n	80069e4 <_fwalk_sglue+0xc>
 80069f4:	4630      	mov	r0, r6
 80069f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069fa:	89ab      	ldrh	r3, [r5, #12]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d907      	bls.n	8006a10 <_fwalk_sglue+0x38>
 8006a00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a04:	3301      	adds	r3, #1
 8006a06:	d003      	beq.n	8006a10 <_fwalk_sglue+0x38>
 8006a08:	4629      	mov	r1, r5
 8006a0a:	4638      	mov	r0, r7
 8006a0c:	47c0      	blx	r8
 8006a0e:	4306      	orrs	r6, r0
 8006a10:	3568      	adds	r5, #104	; 0x68
 8006a12:	e7e9      	b.n	80069e8 <_fwalk_sglue+0x10>

08006a14 <siprintf>:
 8006a14:	b40e      	push	{r1, r2, r3}
 8006a16:	b500      	push	{lr}
 8006a18:	b09c      	sub	sp, #112	; 0x70
 8006a1a:	ab1d      	add	r3, sp, #116	; 0x74
 8006a1c:	9002      	str	r0, [sp, #8]
 8006a1e:	9006      	str	r0, [sp, #24]
 8006a20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a24:	4809      	ldr	r0, [pc, #36]	; (8006a4c <siprintf+0x38>)
 8006a26:	9107      	str	r1, [sp, #28]
 8006a28:	9104      	str	r1, [sp, #16]
 8006a2a:	4909      	ldr	r1, [pc, #36]	; (8006a50 <siprintf+0x3c>)
 8006a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a30:	9105      	str	r1, [sp, #20]
 8006a32:	6800      	ldr	r0, [r0, #0]
 8006a34:	9301      	str	r3, [sp, #4]
 8006a36:	a902      	add	r1, sp, #8
 8006a38:	f001 fc0e 	bl	8008258 <_svfiprintf_r>
 8006a3c:	9b02      	ldr	r3, [sp, #8]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	b01c      	add	sp, #112	; 0x70
 8006a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a48:	b003      	add	sp, #12
 8006a4a:	4770      	bx	lr
 8006a4c:	20000070 	.word	0x20000070
 8006a50:	ffff0208 	.word	0xffff0208

08006a54 <__sread>:
 8006a54:	b510      	push	{r4, lr}
 8006a56:	460c      	mov	r4, r1
 8006a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a5c:	f000 f8da 	bl	8006c14 <_read_r>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	bfab      	itete	ge
 8006a64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a66:	89a3      	ldrhlt	r3, [r4, #12]
 8006a68:	181b      	addge	r3, r3, r0
 8006a6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a6e:	bfac      	ite	ge
 8006a70:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a72:	81a3      	strhlt	r3, [r4, #12]
 8006a74:	bd10      	pop	{r4, pc}

08006a76 <__swrite>:
 8006a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7a:	461f      	mov	r7, r3
 8006a7c:	898b      	ldrh	r3, [r1, #12]
 8006a7e:	05db      	lsls	r3, r3, #23
 8006a80:	4605      	mov	r5, r0
 8006a82:	460c      	mov	r4, r1
 8006a84:	4616      	mov	r6, r2
 8006a86:	d505      	bpl.n	8006a94 <__swrite+0x1e>
 8006a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f000 f8ae 	bl	8006bf0 <_lseek_r>
 8006a94:	89a3      	ldrh	r3, [r4, #12]
 8006a96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a9e:	81a3      	strh	r3, [r4, #12]
 8006aa0:	4632      	mov	r2, r6
 8006aa2:	463b      	mov	r3, r7
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aaa:	f000 b8d5 	b.w	8006c58 <_write_r>

08006aae <__sseek>:
 8006aae:	b510      	push	{r4, lr}
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab6:	f000 f89b 	bl	8006bf0 <_lseek_r>
 8006aba:	1c43      	adds	r3, r0, #1
 8006abc:	89a3      	ldrh	r3, [r4, #12]
 8006abe:	bf15      	itete	ne
 8006ac0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ac2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ac6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006aca:	81a3      	strheq	r3, [r4, #12]
 8006acc:	bf18      	it	ne
 8006ace:	81a3      	strhne	r3, [r4, #12]
 8006ad0:	bd10      	pop	{r4, pc}

08006ad2 <__sclose>:
 8006ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ad6:	f000 b87b 	b.w	8006bd0 <_close_r>

08006ada <memset>:
 8006ada:	4402      	add	r2, r0
 8006adc:	4603      	mov	r3, r0
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d100      	bne.n	8006ae4 <memset+0xa>
 8006ae2:	4770      	bx	lr
 8006ae4:	f803 1b01 	strb.w	r1, [r3], #1
 8006ae8:	e7f9      	b.n	8006ade <memset+0x4>

08006aea <strncmp>:
 8006aea:	b510      	push	{r4, lr}
 8006aec:	b16a      	cbz	r2, 8006b0a <strncmp+0x20>
 8006aee:	3901      	subs	r1, #1
 8006af0:	1884      	adds	r4, r0, r2
 8006af2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006af6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d103      	bne.n	8006b06 <strncmp+0x1c>
 8006afe:	42a0      	cmp	r0, r4
 8006b00:	d001      	beq.n	8006b06 <strncmp+0x1c>
 8006b02:	2a00      	cmp	r2, #0
 8006b04:	d1f5      	bne.n	8006af2 <strncmp+0x8>
 8006b06:	1ad0      	subs	r0, r2, r3
 8006b08:	bd10      	pop	{r4, pc}
 8006b0a:	4610      	mov	r0, r2
 8006b0c:	e7fc      	b.n	8006b08 <strncmp+0x1e>
	...

08006b10 <strtok>:
 8006b10:	4b16      	ldr	r3, [pc, #88]	; (8006b6c <strtok+0x5c>)
 8006b12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b14:	681e      	ldr	r6, [r3, #0]
 8006b16:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8006b18:	4605      	mov	r5, r0
 8006b1a:	b9fc      	cbnz	r4, 8006b5c <strtok+0x4c>
 8006b1c:	2050      	movs	r0, #80	; 0x50
 8006b1e:	9101      	str	r1, [sp, #4]
 8006b20:	f7ff f91a 	bl	8005d58 <malloc>
 8006b24:	9901      	ldr	r1, [sp, #4]
 8006b26:	6470      	str	r0, [r6, #68]	; 0x44
 8006b28:	4602      	mov	r2, r0
 8006b2a:	b920      	cbnz	r0, 8006b36 <strtok+0x26>
 8006b2c:	4b10      	ldr	r3, [pc, #64]	; (8006b70 <strtok+0x60>)
 8006b2e:	4811      	ldr	r0, [pc, #68]	; (8006b74 <strtok+0x64>)
 8006b30:	215b      	movs	r1, #91	; 0x5b
 8006b32:	f000 f8d7 	bl	8006ce4 <__assert_func>
 8006b36:	e9c0 4400 	strd	r4, r4, [r0]
 8006b3a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006b3e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006b42:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006b46:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006b4a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006b4e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006b52:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006b56:	6184      	str	r4, [r0, #24]
 8006b58:	7704      	strb	r4, [r0, #28]
 8006b5a:	6244      	str	r4, [r0, #36]	; 0x24
 8006b5c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8006b5e:	2301      	movs	r3, #1
 8006b60:	4628      	mov	r0, r5
 8006b62:	b002      	add	sp, #8
 8006b64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b68:	f000 b806 	b.w	8006b78 <__strtok_r>
 8006b6c:	20000070 	.word	0x20000070
 8006b70:	0800a279 	.word	0x0800a279
 8006b74:	0800a290 	.word	0x0800a290

08006b78 <__strtok_r>:
 8006b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b7a:	b908      	cbnz	r0, 8006b80 <__strtok_r+0x8>
 8006b7c:	6810      	ldr	r0, [r2, #0]
 8006b7e:	b188      	cbz	r0, 8006ba4 <__strtok_r+0x2c>
 8006b80:	4604      	mov	r4, r0
 8006b82:	4620      	mov	r0, r4
 8006b84:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006b88:	460f      	mov	r7, r1
 8006b8a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006b8e:	b91e      	cbnz	r6, 8006b98 <__strtok_r+0x20>
 8006b90:	b965      	cbnz	r5, 8006bac <__strtok_r+0x34>
 8006b92:	6015      	str	r5, [r2, #0]
 8006b94:	4628      	mov	r0, r5
 8006b96:	e005      	b.n	8006ba4 <__strtok_r+0x2c>
 8006b98:	42b5      	cmp	r5, r6
 8006b9a:	d1f6      	bne.n	8006b8a <__strtok_r+0x12>
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1f0      	bne.n	8006b82 <__strtok_r+0xa>
 8006ba0:	6014      	str	r4, [r2, #0]
 8006ba2:	7003      	strb	r3, [r0, #0]
 8006ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ba6:	461c      	mov	r4, r3
 8006ba8:	e00c      	b.n	8006bc4 <__strtok_r+0x4c>
 8006baa:	b915      	cbnz	r5, 8006bb2 <__strtok_r+0x3a>
 8006bac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006bb0:	460e      	mov	r6, r1
 8006bb2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006bb6:	42ab      	cmp	r3, r5
 8006bb8:	d1f7      	bne.n	8006baa <__strtok_r+0x32>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0f3      	beq.n	8006ba6 <__strtok_r+0x2e>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006bc4:	6014      	str	r4, [r2, #0]
 8006bc6:	e7ed      	b.n	8006ba4 <__strtok_r+0x2c>

08006bc8 <_localeconv_r>:
 8006bc8:	4800      	ldr	r0, [pc, #0]	; (8006bcc <_localeconv_r+0x4>)
 8006bca:	4770      	bx	lr
 8006bcc:	20000164 	.word	0x20000164

08006bd0 <_close_r>:
 8006bd0:	b538      	push	{r3, r4, r5, lr}
 8006bd2:	4d06      	ldr	r5, [pc, #24]	; (8006bec <_close_r+0x1c>)
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	4608      	mov	r0, r1
 8006bda:	602b      	str	r3, [r5, #0]
 8006bdc:	f7fb fe69 	bl	80028b2 <_close>
 8006be0:	1c43      	adds	r3, r0, #1
 8006be2:	d102      	bne.n	8006bea <_close_r+0x1a>
 8006be4:	682b      	ldr	r3, [r5, #0]
 8006be6:	b103      	cbz	r3, 8006bea <_close_r+0x1a>
 8006be8:	6023      	str	r3, [r4, #0]
 8006bea:	bd38      	pop	{r3, r4, r5, pc}
 8006bec:	200004c4 	.word	0x200004c4

08006bf0 <_lseek_r>:
 8006bf0:	b538      	push	{r3, r4, r5, lr}
 8006bf2:	4d07      	ldr	r5, [pc, #28]	; (8006c10 <_lseek_r+0x20>)
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	4608      	mov	r0, r1
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	602a      	str	r2, [r5, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	f7fb fe7e 	bl	8002900 <_lseek>
 8006c04:	1c43      	adds	r3, r0, #1
 8006c06:	d102      	bne.n	8006c0e <_lseek_r+0x1e>
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	b103      	cbz	r3, 8006c0e <_lseek_r+0x1e>
 8006c0c:	6023      	str	r3, [r4, #0]
 8006c0e:	bd38      	pop	{r3, r4, r5, pc}
 8006c10:	200004c4 	.word	0x200004c4

08006c14 <_read_r>:
 8006c14:	b538      	push	{r3, r4, r5, lr}
 8006c16:	4d07      	ldr	r5, [pc, #28]	; (8006c34 <_read_r+0x20>)
 8006c18:	4604      	mov	r4, r0
 8006c1a:	4608      	mov	r0, r1
 8006c1c:	4611      	mov	r1, r2
 8006c1e:	2200      	movs	r2, #0
 8006c20:	602a      	str	r2, [r5, #0]
 8006c22:	461a      	mov	r2, r3
 8006c24:	f7fb fe0c 	bl	8002840 <_read>
 8006c28:	1c43      	adds	r3, r0, #1
 8006c2a:	d102      	bne.n	8006c32 <_read_r+0x1e>
 8006c2c:	682b      	ldr	r3, [r5, #0]
 8006c2e:	b103      	cbz	r3, 8006c32 <_read_r+0x1e>
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	bd38      	pop	{r3, r4, r5, pc}
 8006c34:	200004c4 	.word	0x200004c4

08006c38 <_sbrk_r>:
 8006c38:	b538      	push	{r3, r4, r5, lr}
 8006c3a:	4d06      	ldr	r5, [pc, #24]	; (8006c54 <_sbrk_r+0x1c>)
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	4604      	mov	r4, r0
 8006c40:	4608      	mov	r0, r1
 8006c42:	602b      	str	r3, [r5, #0]
 8006c44:	f7fb fe6a 	bl	800291c <_sbrk>
 8006c48:	1c43      	adds	r3, r0, #1
 8006c4a:	d102      	bne.n	8006c52 <_sbrk_r+0x1a>
 8006c4c:	682b      	ldr	r3, [r5, #0]
 8006c4e:	b103      	cbz	r3, 8006c52 <_sbrk_r+0x1a>
 8006c50:	6023      	str	r3, [r4, #0]
 8006c52:	bd38      	pop	{r3, r4, r5, pc}
 8006c54:	200004c4 	.word	0x200004c4

08006c58 <_write_r>:
 8006c58:	b538      	push	{r3, r4, r5, lr}
 8006c5a:	4d07      	ldr	r5, [pc, #28]	; (8006c78 <_write_r+0x20>)
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	4608      	mov	r0, r1
 8006c60:	4611      	mov	r1, r2
 8006c62:	2200      	movs	r2, #0
 8006c64:	602a      	str	r2, [r5, #0]
 8006c66:	461a      	mov	r2, r3
 8006c68:	f7fb fe07 	bl	800287a <_write>
 8006c6c:	1c43      	adds	r3, r0, #1
 8006c6e:	d102      	bne.n	8006c76 <_write_r+0x1e>
 8006c70:	682b      	ldr	r3, [r5, #0]
 8006c72:	b103      	cbz	r3, 8006c76 <_write_r+0x1e>
 8006c74:	6023      	str	r3, [r4, #0]
 8006c76:	bd38      	pop	{r3, r4, r5, pc}
 8006c78:	200004c4 	.word	0x200004c4

08006c7c <__errno>:
 8006c7c:	4b01      	ldr	r3, [pc, #4]	; (8006c84 <__errno+0x8>)
 8006c7e:	6818      	ldr	r0, [r3, #0]
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	20000070 	.word	0x20000070

08006c88 <__libc_init_array>:
 8006c88:	b570      	push	{r4, r5, r6, lr}
 8006c8a:	4d0d      	ldr	r5, [pc, #52]	; (8006cc0 <__libc_init_array+0x38>)
 8006c8c:	4c0d      	ldr	r4, [pc, #52]	; (8006cc4 <__libc_init_array+0x3c>)
 8006c8e:	1b64      	subs	r4, r4, r5
 8006c90:	10a4      	asrs	r4, r4, #2
 8006c92:	2600      	movs	r6, #0
 8006c94:	42a6      	cmp	r6, r4
 8006c96:	d109      	bne.n	8006cac <__libc_init_array+0x24>
 8006c98:	4d0b      	ldr	r5, [pc, #44]	; (8006cc8 <__libc_init_array+0x40>)
 8006c9a:	4c0c      	ldr	r4, [pc, #48]	; (8006ccc <__libc_init_array+0x44>)
 8006c9c:	f003 f97c 	bl	8009f98 <_init>
 8006ca0:	1b64      	subs	r4, r4, r5
 8006ca2:	10a4      	asrs	r4, r4, #2
 8006ca4:	2600      	movs	r6, #0
 8006ca6:	42a6      	cmp	r6, r4
 8006ca8:	d105      	bne.n	8006cb6 <__libc_init_array+0x2e>
 8006caa:	bd70      	pop	{r4, r5, r6, pc}
 8006cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cb0:	4798      	blx	r3
 8006cb2:	3601      	adds	r6, #1
 8006cb4:	e7ee      	b.n	8006c94 <__libc_init_array+0xc>
 8006cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cba:	4798      	blx	r3
 8006cbc:	3601      	adds	r6, #1
 8006cbe:	e7f2      	b.n	8006ca6 <__libc_init_array+0x1e>
 8006cc0:	0800a5b8 	.word	0x0800a5b8
 8006cc4:	0800a5b8 	.word	0x0800a5b8
 8006cc8:	0800a5b8 	.word	0x0800a5b8
 8006ccc:	0800a5bc 	.word	0x0800a5bc

08006cd0 <__retarget_lock_acquire_recursive>:
 8006cd0:	4770      	bx	lr

08006cd2 <__retarget_lock_release_recursive>:
 8006cd2:	4770      	bx	lr

08006cd4 <strcpy>:
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cda:	f803 2b01 	strb.w	r2, [r3], #1
 8006cde:	2a00      	cmp	r2, #0
 8006ce0:	d1f9      	bne.n	8006cd6 <strcpy+0x2>
 8006ce2:	4770      	bx	lr

08006ce4 <__assert_func>:
 8006ce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ce6:	4614      	mov	r4, r2
 8006ce8:	461a      	mov	r2, r3
 8006cea:	4b09      	ldr	r3, [pc, #36]	; (8006d10 <__assert_func+0x2c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4605      	mov	r5, r0
 8006cf0:	68d8      	ldr	r0, [r3, #12]
 8006cf2:	b14c      	cbz	r4, 8006d08 <__assert_func+0x24>
 8006cf4:	4b07      	ldr	r3, [pc, #28]	; (8006d14 <__assert_func+0x30>)
 8006cf6:	9100      	str	r1, [sp, #0]
 8006cf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006cfc:	4906      	ldr	r1, [pc, #24]	; (8006d18 <__assert_func+0x34>)
 8006cfe:	462b      	mov	r3, r5
 8006d00:	f001 fc56 	bl	80085b0 <fiprintf>
 8006d04:	f001 fc8e 	bl	8008624 <abort>
 8006d08:	4b04      	ldr	r3, [pc, #16]	; (8006d1c <__assert_func+0x38>)
 8006d0a:	461c      	mov	r4, r3
 8006d0c:	e7f3      	b.n	8006cf6 <__assert_func+0x12>
 8006d0e:	bf00      	nop
 8006d10:	20000070 	.word	0x20000070
 8006d14:	0800a2ea 	.word	0x0800a2ea
 8006d18:	0800a2f7 	.word	0x0800a2f7
 8006d1c:	0800a325 	.word	0x0800a325

08006d20 <quorem>:
 8006d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d24:	6903      	ldr	r3, [r0, #16]
 8006d26:	690c      	ldr	r4, [r1, #16]
 8006d28:	42a3      	cmp	r3, r4
 8006d2a:	4607      	mov	r7, r0
 8006d2c:	db7e      	blt.n	8006e2c <quorem+0x10c>
 8006d2e:	3c01      	subs	r4, #1
 8006d30:	f101 0814 	add.w	r8, r1, #20
 8006d34:	f100 0514 	add.w	r5, r0, #20
 8006d38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d3c:	9301      	str	r3, [sp, #4]
 8006d3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d46:	3301      	adds	r3, #1
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d52:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d56:	d331      	bcc.n	8006dbc <quorem+0x9c>
 8006d58:	f04f 0e00 	mov.w	lr, #0
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	46ac      	mov	ip, r5
 8006d60:	46f2      	mov	sl, lr
 8006d62:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d66:	b293      	uxth	r3, r2
 8006d68:	fb06 e303 	mla	r3, r6, r3, lr
 8006d6c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d70:	0c1a      	lsrs	r2, r3, #16
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	ebaa 0303 	sub.w	r3, sl, r3
 8006d78:	f8dc a000 	ldr.w	sl, [ip]
 8006d7c:	fa13 f38a 	uxtah	r3, r3, sl
 8006d80:	fb06 220e 	mla	r2, r6, lr, r2
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	9b00      	ldr	r3, [sp, #0]
 8006d88:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d8c:	b292      	uxth	r2, r2
 8006d8e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006d92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d96:	f8bd 3000 	ldrh.w	r3, [sp]
 8006d9a:	4581      	cmp	r9, r0
 8006d9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006da0:	f84c 3b04 	str.w	r3, [ip], #4
 8006da4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006da8:	d2db      	bcs.n	8006d62 <quorem+0x42>
 8006daa:	f855 300b 	ldr.w	r3, [r5, fp]
 8006dae:	b92b      	cbnz	r3, 8006dbc <quorem+0x9c>
 8006db0:	9b01      	ldr	r3, [sp, #4]
 8006db2:	3b04      	subs	r3, #4
 8006db4:	429d      	cmp	r5, r3
 8006db6:	461a      	mov	r2, r3
 8006db8:	d32c      	bcc.n	8006e14 <quorem+0xf4>
 8006dba:	613c      	str	r4, [r7, #16]
 8006dbc:	4638      	mov	r0, r7
 8006dbe:	f001 f8f1 	bl	8007fa4 <__mcmp>
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	db22      	blt.n	8006e0c <quorem+0xec>
 8006dc6:	3601      	adds	r6, #1
 8006dc8:	4629      	mov	r1, r5
 8006dca:	2000      	movs	r0, #0
 8006dcc:	f858 2b04 	ldr.w	r2, [r8], #4
 8006dd0:	f8d1 c000 	ldr.w	ip, [r1]
 8006dd4:	b293      	uxth	r3, r2
 8006dd6:	1ac3      	subs	r3, r0, r3
 8006dd8:	0c12      	lsrs	r2, r2, #16
 8006dda:	fa13 f38c 	uxtah	r3, r3, ip
 8006dde:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006de2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dec:	45c1      	cmp	r9, r8
 8006dee:	f841 3b04 	str.w	r3, [r1], #4
 8006df2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006df6:	d2e9      	bcs.n	8006dcc <quorem+0xac>
 8006df8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006dfc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e00:	b922      	cbnz	r2, 8006e0c <quorem+0xec>
 8006e02:	3b04      	subs	r3, #4
 8006e04:	429d      	cmp	r5, r3
 8006e06:	461a      	mov	r2, r3
 8006e08:	d30a      	bcc.n	8006e20 <quorem+0x100>
 8006e0a:	613c      	str	r4, [r7, #16]
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	b003      	add	sp, #12
 8006e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e14:	6812      	ldr	r2, [r2, #0]
 8006e16:	3b04      	subs	r3, #4
 8006e18:	2a00      	cmp	r2, #0
 8006e1a:	d1ce      	bne.n	8006dba <quorem+0x9a>
 8006e1c:	3c01      	subs	r4, #1
 8006e1e:	e7c9      	b.n	8006db4 <quorem+0x94>
 8006e20:	6812      	ldr	r2, [r2, #0]
 8006e22:	3b04      	subs	r3, #4
 8006e24:	2a00      	cmp	r2, #0
 8006e26:	d1f0      	bne.n	8006e0a <quorem+0xea>
 8006e28:	3c01      	subs	r4, #1
 8006e2a:	e7eb      	b.n	8006e04 <quorem+0xe4>
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	e7ee      	b.n	8006e0e <quorem+0xee>

08006e30 <_dtoa_r>:
 8006e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e34:	ed2d 8b04 	vpush	{d8-d9}
 8006e38:	69c5      	ldr	r5, [r0, #28]
 8006e3a:	b093      	sub	sp, #76	; 0x4c
 8006e3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006e40:	ec57 6b10 	vmov	r6, r7, d0
 8006e44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006e48:	9107      	str	r1, [sp, #28]
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	920a      	str	r2, [sp, #40]	; 0x28
 8006e4e:	930d      	str	r3, [sp, #52]	; 0x34
 8006e50:	b975      	cbnz	r5, 8006e70 <_dtoa_r+0x40>
 8006e52:	2010      	movs	r0, #16
 8006e54:	f7fe ff80 	bl	8005d58 <malloc>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	61e0      	str	r0, [r4, #28]
 8006e5c:	b920      	cbnz	r0, 8006e68 <_dtoa_r+0x38>
 8006e5e:	4bae      	ldr	r3, [pc, #696]	; (8007118 <_dtoa_r+0x2e8>)
 8006e60:	21ef      	movs	r1, #239	; 0xef
 8006e62:	48ae      	ldr	r0, [pc, #696]	; (800711c <_dtoa_r+0x2ec>)
 8006e64:	f7ff ff3e 	bl	8006ce4 <__assert_func>
 8006e68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006e6c:	6005      	str	r5, [r0, #0]
 8006e6e:	60c5      	str	r5, [r0, #12]
 8006e70:	69e3      	ldr	r3, [r4, #28]
 8006e72:	6819      	ldr	r1, [r3, #0]
 8006e74:	b151      	cbz	r1, 8006e8c <_dtoa_r+0x5c>
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	604a      	str	r2, [r1, #4]
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	4093      	lsls	r3, r2
 8006e7e:	608b      	str	r3, [r1, #8]
 8006e80:	4620      	mov	r0, r4
 8006e82:	f000 fe53 	bl	8007b2c <_Bfree>
 8006e86:	69e3      	ldr	r3, [r4, #28]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]
 8006e8c:	1e3b      	subs	r3, r7, #0
 8006e8e:	bfbb      	ittet	lt
 8006e90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006e94:	9303      	strlt	r3, [sp, #12]
 8006e96:	2300      	movge	r3, #0
 8006e98:	2201      	movlt	r2, #1
 8006e9a:	bfac      	ite	ge
 8006e9c:	f8c8 3000 	strge.w	r3, [r8]
 8006ea0:	f8c8 2000 	strlt.w	r2, [r8]
 8006ea4:	4b9e      	ldr	r3, [pc, #632]	; (8007120 <_dtoa_r+0x2f0>)
 8006ea6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006eaa:	ea33 0308 	bics.w	r3, r3, r8
 8006eae:	d11b      	bne.n	8006ee8 <_dtoa_r+0xb8>
 8006eb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006eb2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006ebc:	4333      	orrs	r3, r6
 8006ebe:	f000 8593 	beq.w	80079e8 <_dtoa_r+0xbb8>
 8006ec2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ec4:	b963      	cbnz	r3, 8006ee0 <_dtoa_r+0xb0>
 8006ec6:	4b97      	ldr	r3, [pc, #604]	; (8007124 <_dtoa_r+0x2f4>)
 8006ec8:	e027      	b.n	8006f1a <_dtoa_r+0xea>
 8006eca:	4b97      	ldr	r3, [pc, #604]	; (8007128 <_dtoa_r+0x2f8>)
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	3308      	adds	r3, #8
 8006ed0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ed2:	6013      	str	r3, [r2, #0]
 8006ed4:	9800      	ldr	r0, [sp, #0]
 8006ed6:	b013      	add	sp, #76	; 0x4c
 8006ed8:	ecbd 8b04 	vpop	{d8-d9}
 8006edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee0:	4b90      	ldr	r3, [pc, #576]	; (8007124 <_dtoa_r+0x2f4>)
 8006ee2:	9300      	str	r3, [sp, #0]
 8006ee4:	3303      	adds	r3, #3
 8006ee6:	e7f3      	b.n	8006ed0 <_dtoa_r+0xa0>
 8006ee8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006eec:	2200      	movs	r2, #0
 8006eee:	ec51 0b17 	vmov	r0, r1, d7
 8006ef2:	eeb0 8a47 	vmov.f32	s16, s14
 8006ef6:	eef0 8a67 	vmov.f32	s17, s15
 8006efa:	2300      	movs	r3, #0
 8006efc:	f7f9 fdec 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f00:	4681      	mov	r9, r0
 8006f02:	b160      	cbz	r0, 8006f1e <_dtoa_r+0xee>
 8006f04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f06:	2301      	movs	r3, #1
 8006f08:	6013      	str	r3, [r2, #0]
 8006f0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 8568 	beq.w	80079e2 <_dtoa_r+0xbb2>
 8006f12:	4b86      	ldr	r3, [pc, #536]	; (800712c <_dtoa_r+0x2fc>)
 8006f14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f16:	6013      	str	r3, [r2, #0]
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	e7da      	b.n	8006ed4 <_dtoa_r+0xa4>
 8006f1e:	aa10      	add	r2, sp, #64	; 0x40
 8006f20:	a911      	add	r1, sp, #68	; 0x44
 8006f22:	4620      	mov	r0, r4
 8006f24:	eeb0 0a48 	vmov.f32	s0, s16
 8006f28:	eef0 0a68 	vmov.f32	s1, s17
 8006f2c:	f001 f8e0 	bl	80080f0 <__d2b>
 8006f30:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006f34:	4682      	mov	sl, r0
 8006f36:	2d00      	cmp	r5, #0
 8006f38:	d07f      	beq.n	800703a <_dtoa_r+0x20a>
 8006f3a:	ee18 3a90 	vmov	r3, s17
 8006f3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f42:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006f46:	ec51 0b18 	vmov	r0, r1, d8
 8006f4a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006f4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006f52:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006f56:	4619      	mov	r1, r3
 8006f58:	2200      	movs	r2, #0
 8006f5a:	4b75      	ldr	r3, [pc, #468]	; (8007130 <_dtoa_r+0x300>)
 8006f5c:	f7f9 f99c 	bl	8000298 <__aeabi_dsub>
 8006f60:	a367      	add	r3, pc, #412	; (adr r3, 8007100 <_dtoa_r+0x2d0>)
 8006f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f66:	f7f9 fb4f 	bl	8000608 <__aeabi_dmul>
 8006f6a:	a367      	add	r3, pc, #412	; (adr r3, 8007108 <_dtoa_r+0x2d8>)
 8006f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f70:	f7f9 f994 	bl	800029c <__adddf3>
 8006f74:	4606      	mov	r6, r0
 8006f76:	4628      	mov	r0, r5
 8006f78:	460f      	mov	r7, r1
 8006f7a:	f7f9 fadb 	bl	8000534 <__aeabi_i2d>
 8006f7e:	a364      	add	r3, pc, #400	; (adr r3, 8007110 <_dtoa_r+0x2e0>)
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	f7f9 fb40 	bl	8000608 <__aeabi_dmul>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	4639      	mov	r1, r7
 8006f90:	f7f9 f984 	bl	800029c <__adddf3>
 8006f94:	4606      	mov	r6, r0
 8006f96:	460f      	mov	r7, r1
 8006f98:	f7f9 fde6 	bl	8000b68 <__aeabi_d2iz>
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	4683      	mov	fp, r0
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	4639      	mov	r1, r7
 8006fa6:	f7f9 fda1 	bl	8000aec <__aeabi_dcmplt>
 8006faa:	b148      	cbz	r0, 8006fc0 <_dtoa_r+0x190>
 8006fac:	4658      	mov	r0, fp
 8006fae:	f7f9 fac1 	bl	8000534 <__aeabi_i2d>
 8006fb2:	4632      	mov	r2, r6
 8006fb4:	463b      	mov	r3, r7
 8006fb6:	f7f9 fd8f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fba:	b908      	cbnz	r0, 8006fc0 <_dtoa_r+0x190>
 8006fbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006fc0:	f1bb 0f16 	cmp.w	fp, #22
 8006fc4:	d857      	bhi.n	8007076 <_dtoa_r+0x246>
 8006fc6:	4b5b      	ldr	r3, [pc, #364]	; (8007134 <_dtoa_r+0x304>)
 8006fc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd0:	ec51 0b18 	vmov	r0, r1, d8
 8006fd4:	f7f9 fd8a 	bl	8000aec <__aeabi_dcmplt>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d04e      	beq.n	800707a <_dtoa_r+0x24a>
 8006fdc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	930c      	str	r3, [sp, #48]	; 0x30
 8006fe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fe6:	1b5b      	subs	r3, r3, r5
 8006fe8:	1e5a      	subs	r2, r3, #1
 8006fea:	bf45      	ittet	mi
 8006fec:	f1c3 0301 	rsbmi	r3, r3, #1
 8006ff0:	9305      	strmi	r3, [sp, #20]
 8006ff2:	2300      	movpl	r3, #0
 8006ff4:	2300      	movmi	r3, #0
 8006ff6:	9206      	str	r2, [sp, #24]
 8006ff8:	bf54      	ite	pl
 8006ffa:	9305      	strpl	r3, [sp, #20]
 8006ffc:	9306      	strmi	r3, [sp, #24]
 8006ffe:	f1bb 0f00 	cmp.w	fp, #0
 8007002:	db3c      	blt.n	800707e <_dtoa_r+0x24e>
 8007004:	9b06      	ldr	r3, [sp, #24]
 8007006:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800700a:	445b      	add	r3, fp
 800700c:	9306      	str	r3, [sp, #24]
 800700e:	2300      	movs	r3, #0
 8007010:	9308      	str	r3, [sp, #32]
 8007012:	9b07      	ldr	r3, [sp, #28]
 8007014:	2b09      	cmp	r3, #9
 8007016:	d868      	bhi.n	80070ea <_dtoa_r+0x2ba>
 8007018:	2b05      	cmp	r3, #5
 800701a:	bfc4      	itt	gt
 800701c:	3b04      	subgt	r3, #4
 800701e:	9307      	strgt	r3, [sp, #28]
 8007020:	9b07      	ldr	r3, [sp, #28]
 8007022:	f1a3 0302 	sub.w	r3, r3, #2
 8007026:	bfcc      	ite	gt
 8007028:	2500      	movgt	r5, #0
 800702a:	2501      	movle	r5, #1
 800702c:	2b03      	cmp	r3, #3
 800702e:	f200 8085 	bhi.w	800713c <_dtoa_r+0x30c>
 8007032:	e8df f003 	tbb	[pc, r3]
 8007036:	3b2e      	.short	0x3b2e
 8007038:	5839      	.short	0x5839
 800703a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800703e:	441d      	add	r5, r3
 8007040:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007044:	2b20      	cmp	r3, #32
 8007046:	bfc1      	itttt	gt
 8007048:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800704c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007050:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007054:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007058:	bfd6      	itet	le
 800705a:	f1c3 0320 	rsble	r3, r3, #32
 800705e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007062:	fa06 f003 	lslle.w	r0, r6, r3
 8007066:	f7f9 fa55 	bl	8000514 <__aeabi_ui2d>
 800706a:	2201      	movs	r2, #1
 800706c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007070:	3d01      	subs	r5, #1
 8007072:	920e      	str	r2, [sp, #56]	; 0x38
 8007074:	e76f      	b.n	8006f56 <_dtoa_r+0x126>
 8007076:	2301      	movs	r3, #1
 8007078:	e7b3      	b.n	8006fe2 <_dtoa_r+0x1b2>
 800707a:	900c      	str	r0, [sp, #48]	; 0x30
 800707c:	e7b2      	b.n	8006fe4 <_dtoa_r+0x1b4>
 800707e:	9b05      	ldr	r3, [sp, #20]
 8007080:	eba3 030b 	sub.w	r3, r3, fp
 8007084:	9305      	str	r3, [sp, #20]
 8007086:	f1cb 0300 	rsb	r3, fp, #0
 800708a:	9308      	str	r3, [sp, #32]
 800708c:	2300      	movs	r3, #0
 800708e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007090:	e7bf      	b.n	8007012 <_dtoa_r+0x1e2>
 8007092:	2300      	movs	r3, #0
 8007094:	9309      	str	r3, [sp, #36]	; 0x24
 8007096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007098:	2b00      	cmp	r3, #0
 800709a:	dc52      	bgt.n	8007142 <_dtoa_r+0x312>
 800709c:	2301      	movs	r3, #1
 800709e:	9301      	str	r3, [sp, #4]
 80070a0:	9304      	str	r3, [sp, #16]
 80070a2:	461a      	mov	r2, r3
 80070a4:	920a      	str	r2, [sp, #40]	; 0x28
 80070a6:	e00b      	b.n	80070c0 <_dtoa_r+0x290>
 80070a8:	2301      	movs	r3, #1
 80070aa:	e7f3      	b.n	8007094 <_dtoa_r+0x264>
 80070ac:	2300      	movs	r3, #0
 80070ae:	9309      	str	r3, [sp, #36]	; 0x24
 80070b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070b2:	445b      	add	r3, fp
 80070b4:	9301      	str	r3, [sp, #4]
 80070b6:	3301      	adds	r3, #1
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	9304      	str	r3, [sp, #16]
 80070bc:	bfb8      	it	lt
 80070be:	2301      	movlt	r3, #1
 80070c0:	69e0      	ldr	r0, [r4, #28]
 80070c2:	2100      	movs	r1, #0
 80070c4:	2204      	movs	r2, #4
 80070c6:	f102 0614 	add.w	r6, r2, #20
 80070ca:	429e      	cmp	r6, r3
 80070cc:	d93d      	bls.n	800714a <_dtoa_r+0x31a>
 80070ce:	6041      	str	r1, [r0, #4]
 80070d0:	4620      	mov	r0, r4
 80070d2:	f000 fceb 	bl	8007aac <_Balloc>
 80070d6:	9000      	str	r0, [sp, #0]
 80070d8:	2800      	cmp	r0, #0
 80070da:	d139      	bne.n	8007150 <_dtoa_r+0x320>
 80070dc:	4b16      	ldr	r3, [pc, #88]	; (8007138 <_dtoa_r+0x308>)
 80070de:	4602      	mov	r2, r0
 80070e0:	f240 11af 	movw	r1, #431	; 0x1af
 80070e4:	e6bd      	b.n	8006e62 <_dtoa_r+0x32>
 80070e6:	2301      	movs	r3, #1
 80070e8:	e7e1      	b.n	80070ae <_dtoa_r+0x27e>
 80070ea:	2501      	movs	r5, #1
 80070ec:	2300      	movs	r3, #0
 80070ee:	9307      	str	r3, [sp, #28]
 80070f0:	9509      	str	r5, [sp, #36]	; 0x24
 80070f2:	f04f 33ff 	mov.w	r3, #4294967295
 80070f6:	9301      	str	r3, [sp, #4]
 80070f8:	9304      	str	r3, [sp, #16]
 80070fa:	2200      	movs	r2, #0
 80070fc:	2312      	movs	r3, #18
 80070fe:	e7d1      	b.n	80070a4 <_dtoa_r+0x274>
 8007100:	636f4361 	.word	0x636f4361
 8007104:	3fd287a7 	.word	0x3fd287a7
 8007108:	8b60c8b3 	.word	0x8b60c8b3
 800710c:	3fc68a28 	.word	0x3fc68a28
 8007110:	509f79fb 	.word	0x509f79fb
 8007114:	3fd34413 	.word	0x3fd34413
 8007118:	0800a279 	.word	0x0800a279
 800711c:	0800a333 	.word	0x0800a333
 8007120:	7ff00000 	.word	0x7ff00000
 8007124:	0800a32f 	.word	0x0800a32f
 8007128:	0800a326 	.word	0x0800a326
 800712c:	0800a256 	.word	0x0800a256
 8007130:	3ff80000 	.word	0x3ff80000
 8007134:	0800a420 	.word	0x0800a420
 8007138:	0800a38b 	.word	0x0800a38b
 800713c:	2301      	movs	r3, #1
 800713e:	9309      	str	r3, [sp, #36]	; 0x24
 8007140:	e7d7      	b.n	80070f2 <_dtoa_r+0x2c2>
 8007142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007144:	9301      	str	r3, [sp, #4]
 8007146:	9304      	str	r3, [sp, #16]
 8007148:	e7ba      	b.n	80070c0 <_dtoa_r+0x290>
 800714a:	3101      	adds	r1, #1
 800714c:	0052      	lsls	r2, r2, #1
 800714e:	e7ba      	b.n	80070c6 <_dtoa_r+0x296>
 8007150:	69e3      	ldr	r3, [r4, #28]
 8007152:	9a00      	ldr	r2, [sp, #0]
 8007154:	601a      	str	r2, [r3, #0]
 8007156:	9b04      	ldr	r3, [sp, #16]
 8007158:	2b0e      	cmp	r3, #14
 800715a:	f200 80a8 	bhi.w	80072ae <_dtoa_r+0x47e>
 800715e:	2d00      	cmp	r5, #0
 8007160:	f000 80a5 	beq.w	80072ae <_dtoa_r+0x47e>
 8007164:	f1bb 0f00 	cmp.w	fp, #0
 8007168:	dd38      	ble.n	80071dc <_dtoa_r+0x3ac>
 800716a:	4bc0      	ldr	r3, [pc, #768]	; (800746c <_dtoa_r+0x63c>)
 800716c:	f00b 020f 	and.w	r2, fp, #15
 8007170:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007174:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007178:	e9d3 6700 	ldrd	r6, r7, [r3]
 800717c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007180:	d019      	beq.n	80071b6 <_dtoa_r+0x386>
 8007182:	4bbb      	ldr	r3, [pc, #748]	; (8007470 <_dtoa_r+0x640>)
 8007184:	ec51 0b18 	vmov	r0, r1, d8
 8007188:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800718c:	f7f9 fb66 	bl	800085c <__aeabi_ddiv>
 8007190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007194:	f008 080f 	and.w	r8, r8, #15
 8007198:	2503      	movs	r5, #3
 800719a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007470 <_dtoa_r+0x640>
 800719e:	f1b8 0f00 	cmp.w	r8, #0
 80071a2:	d10a      	bne.n	80071ba <_dtoa_r+0x38a>
 80071a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071a8:	4632      	mov	r2, r6
 80071aa:	463b      	mov	r3, r7
 80071ac:	f7f9 fb56 	bl	800085c <__aeabi_ddiv>
 80071b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071b4:	e02b      	b.n	800720e <_dtoa_r+0x3de>
 80071b6:	2502      	movs	r5, #2
 80071b8:	e7ef      	b.n	800719a <_dtoa_r+0x36a>
 80071ba:	f018 0f01 	tst.w	r8, #1
 80071be:	d008      	beq.n	80071d2 <_dtoa_r+0x3a2>
 80071c0:	4630      	mov	r0, r6
 80071c2:	4639      	mov	r1, r7
 80071c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80071c8:	f7f9 fa1e 	bl	8000608 <__aeabi_dmul>
 80071cc:	3501      	adds	r5, #1
 80071ce:	4606      	mov	r6, r0
 80071d0:	460f      	mov	r7, r1
 80071d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80071d6:	f109 0908 	add.w	r9, r9, #8
 80071da:	e7e0      	b.n	800719e <_dtoa_r+0x36e>
 80071dc:	f000 809f 	beq.w	800731e <_dtoa_r+0x4ee>
 80071e0:	f1cb 0600 	rsb	r6, fp, #0
 80071e4:	4ba1      	ldr	r3, [pc, #644]	; (800746c <_dtoa_r+0x63c>)
 80071e6:	4fa2      	ldr	r7, [pc, #648]	; (8007470 <_dtoa_r+0x640>)
 80071e8:	f006 020f 	and.w	r2, r6, #15
 80071ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f4:	ec51 0b18 	vmov	r0, r1, d8
 80071f8:	f7f9 fa06 	bl	8000608 <__aeabi_dmul>
 80071fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007200:	1136      	asrs	r6, r6, #4
 8007202:	2300      	movs	r3, #0
 8007204:	2502      	movs	r5, #2
 8007206:	2e00      	cmp	r6, #0
 8007208:	d17e      	bne.n	8007308 <_dtoa_r+0x4d8>
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1d0      	bne.n	80071b0 <_dtoa_r+0x380>
 800720e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007210:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 8084 	beq.w	8007322 <_dtoa_r+0x4f2>
 800721a:	4b96      	ldr	r3, [pc, #600]	; (8007474 <_dtoa_r+0x644>)
 800721c:	2200      	movs	r2, #0
 800721e:	4640      	mov	r0, r8
 8007220:	4649      	mov	r1, r9
 8007222:	f7f9 fc63 	bl	8000aec <__aeabi_dcmplt>
 8007226:	2800      	cmp	r0, #0
 8007228:	d07b      	beq.n	8007322 <_dtoa_r+0x4f2>
 800722a:	9b04      	ldr	r3, [sp, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d078      	beq.n	8007322 <_dtoa_r+0x4f2>
 8007230:	9b01      	ldr	r3, [sp, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	dd39      	ble.n	80072aa <_dtoa_r+0x47a>
 8007236:	4b90      	ldr	r3, [pc, #576]	; (8007478 <_dtoa_r+0x648>)
 8007238:	2200      	movs	r2, #0
 800723a:	4640      	mov	r0, r8
 800723c:	4649      	mov	r1, r9
 800723e:	f7f9 f9e3 	bl	8000608 <__aeabi_dmul>
 8007242:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007246:	9e01      	ldr	r6, [sp, #4]
 8007248:	f10b 37ff 	add.w	r7, fp, #4294967295
 800724c:	3501      	adds	r5, #1
 800724e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007252:	4628      	mov	r0, r5
 8007254:	f7f9 f96e 	bl	8000534 <__aeabi_i2d>
 8007258:	4642      	mov	r2, r8
 800725a:	464b      	mov	r3, r9
 800725c:	f7f9 f9d4 	bl	8000608 <__aeabi_dmul>
 8007260:	4b86      	ldr	r3, [pc, #536]	; (800747c <_dtoa_r+0x64c>)
 8007262:	2200      	movs	r2, #0
 8007264:	f7f9 f81a 	bl	800029c <__adddf3>
 8007268:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800726c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007270:	9303      	str	r3, [sp, #12]
 8007272:	2e00      	cmp	r6, #0
 8007274:	d158      	bne.n	8007328 <_dtoa_r+0x4f8>
 8007276:	4b82      	ldr	r3, [pc, #520]	; (8007480 <_dtoa_r+0x650>)
 8007278:	2200      	movs	r2, #0
 800727a:	4640      	mov	r0, r8
 800727c:	4649      	mov	r1, r9
 800727e:	f7f9 f80b 	bl	8000298 <__aeabi_dsub>
 8007282:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007286:	4680      	mov	r8, r0
 8007288:	4689      	mov	r9, r1
 800728a:	f7f9 fc4d 	bl	8000b28 <__aeabi_dcmpgt>
 800728e:	2800      	cmp	r0, #0
 8007290:	f040 8296 	bne.w	80077c0 <_dtoa_r+0x990>
 8007294:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007298:	4640      	mov	r0, r8
 800729a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800729e:	4649      	mov	r1, r9
 80072a0:	f7f9 fc24 	bl	8000aec <__aeabi_dcmplt>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	f040 8289 	bne.w	80077bc <_dtoa_r+0x98c>
 80072aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80072ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f2c0 814e 	blt.w	8007552 <_dtoa_r+0x722>
 80072b6:	f1bb 0f0e 	cmp.w	fp, #14
 80072ba:	f300 814a 	bgt.w	8007552 <_dtoa_r+0x722>
 80072be:	4b6b      	ldr	r3, [pc, #428]	; (800746c <_dtoa_r+0x63c>)
 80072c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80072c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80072c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f280 80dc 	bge.w	8007488 <_dtoa_r+0x658>
 80072d0:	9b04      	ldr	r3, [sp, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f300 80d8 	bgt.w	8007488 <_dtoa_r+0x658>
 80072d8:	f040 826f 	bne.w	80077ba <_dtoa_r+0x98a>
 80072dc:	4b68      	ldr	r3, [pc, #416]	; (8007480 <_dtoa_r+0x650>)
 80072de:	2200      	movs	r2, #0
 80072e0:	4640      	mov	r0, r8
 80072e2:	4649      	mov	r1, r9
 80072e4:	f7f9 f990 	bl	8000608 <__aeabi_dmul>
 80072e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072ec:	f7f9 fc12 	bl	8000b14 <__aeabi_dcmpge>
 80072f0:	9e04      	ldr	r6, [sp, #16]
 80072f2:	4637      	mov	r7, r6
 80072f4:	2800      	cmp	r0, #0
 80072f6:	f040 8245 	bne.w	8007784 <_dtoa_r+0x954>
 80072fa:	9d00      	ldr	r5, [sp, #0]
 80072fc:	2331      	movs	r3, #49	; 0x31
 80072fe:	f805 3b01 	strb.w	r3, [r5], #1
 8007302:	f10b 0b01 	add.w	fp, fp, #1
 8007306:	e241      	b.n	800778c <_dtoa_r+0x95c>
 8007308:	07f2      	lsls	r2, r6, #31
 800730a:	d505      	bpl.n	8007318 <_dtoa_r+0x4e8>
 800730c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007310:	f7f9 f97a 	bl	8000608 <__aeabi_dmul>
 8007314:	3501      	adds	r5, #1
 8007316:	2301      	movs	r3, #1
 8007318:	1076      	asrs	r6, r6, #1
 800731a:	3708      	adds	r7, #8
 800731c:	e773      	b.n	8007206 <_dtoa_r+0x3d6>
 800731e:	2502      	movs	r5, #2
 8007320:	e775      	b.n	800720e <_dtoa_r+0x3de>
 8007322:	9e04      	ldr	r6, [sp, #16]
 8007324:	465f      	mov	r7, fp
 8007326:	e792      	b.n	800724e <_dtoa_r+0x41e>
 8007328:	9900      	ldr	r1, [sp, #0]
 800732a:	4b50      	ldr	r3, [pc, #320]	; (800746c <_dtoa_r+0x63c>)
 800732c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007330:	4431      	add	r1, r6
 8007332:	9102      	str	r1, [sp, #8]
 8007334:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007336:	eeb0 9a47 	vmov.f32	s18, s14
 800733a:	eef0 9a67 	vmov.f32	s19, s15
 800733e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007342:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007346:	2900      	cmp	r1, #0
 8007348:	d044      	beq.n	80073d4 <_dtoa_r+0x5a4>
 800734a:	494e      	ldr	r1, [pc, #312]	; (8007484 <_dtoa_r+0x654>)
 800734c:	2000      	movs	r0, #0
 800734e:	f7f9 fa85 	bl	800085c <__aeabi_ddiv>
 8007352:	ec53 2b19 	vmov	r2, r3, d9
 8007356:	f7f8 ff9f 	bl	8000298 <__aeabi_dsub>
 800735a:	9d00      	ldr	r5, [sp, #0]
 800735c:	ec41 0b19 	vmov	d9, r0, r1
 8007360:	4649      	mov	r1, r9
 8007362:	4640      	mov	r0, r8
 8007364:	f7f9 fc00 	bl	8000b68 <__aeabi_d2iz>
 8007368:	4606      	mov	r6, r0
 800736a:	f7f9 f8e3 	bl	8000534 <__aeabi_i2d>
 800736e:	4602      	mov	r2, r0
 8007370:	460b      	mov	r3, r1
 8007372:	4640      	mov	r0, r8
 8007374:	4649      	mov	r1, r9
 8007376:	f7f8 ff8f 	bl	8000298 <__aeabi_dsub>
 800737a:	3630      	adds	r6, #48	; 0x30
 800737c:	f805 6b01 	strb.w	r6, [r5], #1
 8007380:	ec53 2b19 	vmov	r2, r3, d9
 8007384:	4680      	mov	r8, r0
 8007386:	4689      	mov	r9, r1
 8007388:	f7f9 fbb0 	bl	8000aec <__aeabi_dcmplt>
 800738c:	2800      	cmp	r0, #0
 800738e:	d164      	bne.n	800745a <_dtoa_r+0x62a>
 8007390:	4642      	mov	r2, r8
 8007392:	464b      	mov	r3, r9
 8007394:	4937      	ldr	r1, [pc, #220]	; (8007474 <_dtoa_r+0x644>)
 8007396:	2000      	movs	r0, #0
 8007398:	f7f8 ff7e 	bl	8000298 <__aeabi_dsub>
 800739c:	ec53 2b19 	vmov	r2, r3, d9
 80073a0:	f7f9 fba4 	bl	8000aec <__aeabi_dcmplt>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	f040 80b6 	bne.w	8007516 <_dtoa_r+0x6e6>
 80073aa:	9b02      	ldr	r3, [sp, #8]
 80073ac:	429d      	cmp	r5, r3
 80073ae:	f43f af7c 	beq.w	80072aa <_dtoa_r+0x47a>
 80073b2:	4b31      	ldr	r3, [pc, #196]	; (8007478 <_dtoa_r+0x648>)
 80073b4:	ec51 0b19 	vmov	r0, r1, d9
 80073b8:	2200      	movs	r2, #0
 80073ba:	f7f9 f925 	bl	8000608 <__aeabi_dmul>
 80073be:	4b2e      	ldr	r3, [pc, #184]	; (8007478 <_dtoa_r+0x648>)
 80073c0:	ec41 0b19 	vmov	d9, r0, r1
 80073c4:	2200      	movs	r2, #0
 80073c6:	4640      	mov	r0, r8
 80073c8:	4649      	mov	r1, r9
 80073ca:	f7f9 f91d 	bl	8000608 <__aeabi_dmul>
 80073ce:	4680      	mov	r8, r0
 80073d0:	4689      	mov	r9, r1
 80073d2:	e7c5      	b.n	8007360 <_dtoa_r+0x530>
 80073d4:	ec51 0b17 	vmov	r0, r1, d7
 80073d8:	f7f9 f916 	bl	8000608 <__aeabi_dmul>
 80073dc:	9b02      	ldr	r3, [sp, #8]
 80073de:	9d00      	ldr	r5, [sp, #0]
 80073e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80073e2:	ec41 0b19 	vmov	d9, r0, r1
 80073e6:	4649      	mov	r1, r9
 80073e8:	4640      	mov	r0, r8
 80073ea:	f7f9 fbbd 	bl	8000b68 <__aeabi_d2iz>
 80073ee:	4606      	mov	r6, r0
 80073f0:	f7f9 f8a0 	bl	8000534 <__aeabi_i2d>
 80073f4:	3630      	adds	r6, #48	; 0x30
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	4640      	mov	r0, r8
 80073fc:	4649      	mov	r1, r9
 80073fe:	f7f8 ff4b 	bl	8000298 <__aeabi_dsub>
 8007402:	f805 6b01 	strb.w	r6, [r5], #1
 8007406:	9b02      	ldr	r3, [sp, #8]
 8007408:	429d      	cmp	r5, r3
 800740a:	4680      	mov	r8, r0
 800740c:	4689      	mov	r9, r1
 800740e:	f04f 0200 	mov.w	r2, #0
 8007412:	d124      	bne.n	800745e <_dtoa_r+0x62e>
 8007414:	4b1b      	ldr	r3, [pc, #108]	; (8007484 <_dtoa_r+0x654>)
 8007416:	ec51 0b19 	vmov	r0, r1, d9
 800741a:	f7f8 ff3f 	bl	800029c <__adddf3>
 800741e:	4602      	mov	r2, r0
 8007420:	460b      	mov	r3, r1
 8007422:	4640      	mov	r0, r8
 8007424:	4649      	mov	r1, r9
 8007426:	f7f9 fb7f 	bl	8000b28 <__aeabi_dcmpgt>
 800742a:	2800      	cmp	r0, #0
 800742c:	d173      	bne.n	8007516 <_dtoa_r+0x6e6>
 800742e:	ec53 2b19 	vmov	r2, r3, d9
 8007432:	4914      	ldr	r1, [pc, #80]	; (8007484 <_dtoa_r+0x654>)
 8007434:	2000      	movs	r0, #0
 8007436:	f7f8 ff2f 	bl	8000298 <__aeabi_dsub>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	4640      	mov	r0, r8
 8007440:	4649      	mov	r1, r9
 8007442:	f7f9 fb53 	bl	8000aec <__aeabi_dcmplt>
 8007446:	2800      	cmp	r0, #0
 8007448:	f43f af2f 	beq.w	80072aa <_dtoa_r+0x47a>
 800744c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800744e:	1e6b      	subs	r3, r5, #1
 8007450:	930f      	str	r3, [sp, #60]	; 0x3c
 8007452:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007456:	2b30      	cmp	r3, #48	; 0x30
 8007458:	d0f8      	beq.n	800744c <_dtoa_r+0x61c>
 800745a:	46bb      	mov	fp, r7
 800745c:	e04a      	b.n	80074f4 <_dtoa_r+0x6c4>
 800745e:	4b06      	ldr	r3, [pc, #24]	; (8007478 <_dtoa_r+0x648>)
 8007460:	f7f9 f8d2 	bl	8000608 <__aeabi_dmul>
 8007464:	4680      	mov	r8, r0
 8007466:	4689      	mov	r9, r1
 8007468:	e7bd      	b.n	80073e6 <_dtoa_r+0x5b6>
 800746a:	bf00      	nop
 800746c:	0800a420 	.word	0x0800a420
 8007470:	0800a3f8 	.word	0x0800a3f8
 8007474:	3ff00000 	.word	0x3ff00000
 8007478:	40240000 	.word	0x40240000
 800747c:	401c0000 	.word	0x401c0000
 8007480:	40140000 	.word	0x40140000
 8007484:	3fe00000 	.word	0x3fe00000
 8007488:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800748c:	9d00      	ldr	r5, [sp, #0]
 800748e:	4642      	mov	r2, r8
 8007490:	464b      	mov	r3, r9
 8007492:	4630      	mov	r0, r6
 8007494:	4639      	mov	r1, r7
 8007496:	f7f9 f9e1 	bl	800085c <__aeabi_ddiv>
 800749a:	f7f9 fb65 	bl	8000b68 <__aeabi_d2iz>
 800749e:	9001      	str	r0, [sp, #4]
 80074a0:	f7f9 f848 	bl	8000534 <__aeabi_i2d>
 80074a4:	4642      	mov	r2, r8
 80074a6:	464b      	mov	r3, r9
 80074a8:	f7f9 f8ae 	bl	8000608 <__aeabi_dmul>
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	4630      	mov	r0, r6
 80074b2:	4639      	mov	r1, r7
 80074b4:	f7f8 fef0 	bl	8000298 <__aeabi_dsub>
 80074b8:	9e01      	ldr	r6, [sp, #4]
 80074ba:	9f04      	ldr	r7, [sp, #16]
 80074bc:	3630      	adds	r6, #48	; 0x30
 80074be:	f805 6b01 	strb.w	r6, [r5], #1
 80074c2:	9e00      	ldr	r6, [sp, #0]
 80074c4:	1bae      	subs	r6, r5, r6
 80074c6:	42b7      	cmp	r7, r6
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	d134      	bne.n	8007538 <_dtoa_r+0x708>
 80074ce:	f7f8 fee5 	bl	800029c <__adddf3>
 80074d2:	4642      	mov	r2, r8
 80074d4:	464b      	mov	r3, r9
 80074d6:	4606      	mov	r6, r0
 80074d8:	460f      	mov	r7, r1
 80074da:	f7f9 fb25 	bl	8000b28 <__aeabi_dcmpgt>
 80074de:	b9c8      	cbnz	r0, 8007514 <_dtoa_r+0x6e4>
 80074e0:	4642      	mov	r2, r8
 80074e2:	464b      	mov	r3, r9
 80074e4:	4630      	mov	r0, r6
 80074e6:	4639      	mov	r1, r7
 80074e8:	f7f9 faf6 	bl	8000ad8 <__aeabi_dcmpeq>
 80074ec:	b110      	cbz	r0, 80074f4 <_dtoa_r+0x6c4>
 80074ee:	9b01      	ldr	r3, [sp, #4]
 80074f0:	07db      	lsls	r3, r3, #31
 80074f2:	d40f      	bmi.n	8007514 <_dtoa_r+0x6e4>
 80074f4:	4651      	mov	r1, sl
 80074f6:	4620      	mov	r0, r4
 80074f8:	f000 fb18 	bl	8007b2c <_Bfree>
 80074fc:	2300      	movs	r3, #0
 80074fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007500:	702b      	strb	r3, [r5, #0]
 8007502:	f10b 0301 	add.w	r3, fp, #1
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800750a:	2b00      	cmp	r3, #0
 800750c:	f43f ace2 	beq.w	8006ed4 <_dtoa_r+0xa4>
 8007510:	601d      	str	r5, [r3, #0]
 8007512:	e4df      	b.n	8006ed4 <_dtoa_r+0xa4>
 8007514:	465f      	mov	r7, fp
 8007516:	462b      	mov	r3, r5
 8007518:	461d      	mov	r5, r3
 800751a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800751e:	2a39      	cmp	r2, #57	; 0x39
 8007520:	d106      	bne.n	8007530 <_dtoa_r+0x700>
 8007522:	9a00      	ldr	r2, [sp, #0]
 8007524:	429a      	cmp	r2, r3
 8007526:	d1f7      	bne.n	8007518 <_dtoa_r+0x6e8>
 8007528:	9900      	ldr	r1, [sp, #0]
 800752a:	2230      	movs	r2, #48	; 0x30
 800752c:	3701      	adds	r7, #1
 800752e:	700a      	strb	r2, [r1, #0]
 8007530:	781a      	ldrb	r2, [r3, #0]
 8007532:	3201      	adds	r2, #1
 8007534:	701a      	strb	r2, [r3, #0]
 8007536:	e790      	b.n	800745a <_dtoa_r+0x62a>
 8007538:	4ba3      	ldr	r3, [pc, #652]	; (80077c8 <_dtoa_r+0x998>)
 800753a:	2200      	movs	r2, #0
 800753c:	f7f9 f864 	bl	8000608 <__aeabi_dmul>
 8007540:	2200      	movs	r2, #0
 8007542:	2300      	movs	r3, #0
 8007544:	4606      	mov	r6, r0
 8007546:	460f      	mov	r7, r1
 8007548:	f7f9 fac6 	bl	8000ad8 <__aeabi_dcmpeq>
 800754c:	2800      	cmp	r0, #0
 800754e:	d09e      	beq.n	800748e <_dtoa_r+0x65e>
 8007550:	e7d0      	b.n	80074f4 <_dtoa_r+0x6c4>
 8007552:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007554:	2a00      	cmp	r2, #0
 8007556:	f000 80ca 	beq.w	80076ee <_dtoa_r+0x8be>
 800755a:	9a07      	ldr	r2, [sp, #28]
 800755c:	2a01      	cmp	r2, #1
 800755e:	f300 80ad 	bgt.w	80076bc <_dtoa_r+0x88c>
 8007562:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007564:	2a00      	cmp	r2, #0
 8007566:	f000 80a5 	beq.w	80076b4 <_dtoa_r+0x884>
 800756a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800756e:	9e08      	ldr	r6, [sp, #32]
 8007570:	9d05      	ldr	r5, [sp, #20]
 8007572:	9a05      	ldr	r2, [sp, #20]
 8007574:	441a      	add	r2, r3
 8007576:	9205      	str	r2, [sp, #20]
 8007578:	9a06      	ldr	r2, [sp, #24]
 800757a:	2101      	movs	r1, #1
 800757c:	441a      	add	r2, r3
 800757e:	4620      	mov	r0, r4
 8007580:	9206      	str	r2, [sp, #24]
 8007582:	f000 fb89 	bl	8007c98 <__i2b>
 8007586:	4607      	mov	r7, r0
 8007588:	b165      	cbz	r5, 80075a4 <_dtoa_r+0x774>
 800758a:	9b06      	ldr	r3, [sp, #24]
 800758c:	2b00      	cmp	r3, #0
 800758e:	dd09      	ble.n	80075a4 <_dtoa_r+0x774>
 8007590:	42ab      	cmp	r3, r5
 8007592:	9a05      	ldr	r2, [sp, #20]
 8007594:	bfa8      	it	ge
 8007596:	462b      	movge	r3, r5
 8007598:	1ad2      	subs	r2, r2, r3
 800759a:	9205      	str	r2, [sp, #20]
 800759c:	9a06      	ldr	r2, [sp, #24]
 800759e:	1aed      	subs	r5, r5, r3
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	9306      	str	r3, [sp, #24]
 80075a4:	9b08      	ldr	r3, [sp, #32]
 80075a6:	b1f3      	cbz	r3, 80075e6 <_dtoa_r+0x7b6>
 80075a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f000 80a3 	beq.w	80076f6 <_dtoa_r+0x8c6>
 80075b0:	2e00      	cmp	r6, #0
 80075b2:	dd10      	ble.n	80075d6 <_dtoa_r+0x7a6>
 80075b4:	4639      	mov	r1, r7
 80075b6:	4632      	mov	r2, r6
 80075b8:	4620      	mov	r0, r4
 80075ba:	f000 fc2d 	bl	8007e18 <__pow5mult>
 80075be:	4652      	mov	r2, sl
 80075c0:	4601      	mov	r1, r0
 80075c2:	4607      	mov	r7, r0
 80075c4:	4620      	mov	r0, r4
 80075c6:	f000 fb7d 	bl	8007cc4 <__multiply>
 80075ca:	4651      	mov	r1, sl
 80075cc:	4680      	mov	r8, r0
 80075ce:	4620      	mov	r0, r4
 80075d0:	f000 faac 	bl	8007b2c <_Bfree>
 80075d4:	46c2      	mov	sl, r8
 80075d6:	9b08      	ldr	r3, [sp, #32]
 80075d8:	1b9a      	subs	r2, r3, r6
 80075da:	d004      	beq.n	80075e6 <_dtoa_r+0x7b6>
 80075dc:	4651      	mov	r1, sl
 80075de:	4620      	mov	r0, r4
 80075e0:	f000 fc1a 	bl	8007e18 <__pow5mult>
 80075e4:	4682      	mov	sl, r0
 80075e6:	2101      	movs	r1, #1
 80075e8:	4620      	mov	r0, r4
 80075ea:	f000 fb55 	bl	8007c98 <__i2b>
 80075ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	4606      	mov	r6, r0
 80075f4:	f340 8081 	ble.w	80076fa <_dtoa_r+0x8ca>
 80075f8:	461a      	mov	r2, r3
 80075fa:	4601      	mov	r1, r0
 80075fc:	4620      	mov	r0, r4
 80075fe:	f000 fc0b 	bl	8007e18 <__pow5mult>
 8007602:	9b07      	ldr	r3, [sp, #28]
 8007604:	2b01      	cmp	r3, #1
 8007606:	4606      	mov	r6, r0
 8007608:	dd7a      	ble.n	8007700 <_dtoa_r+0x8d0>
 800760a:	f04f 0800 	mov.w	r8, #0
 800760e:	6933      	ldr	r3, [r6, #16]
 8007610:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007614:	6918      	ldr	r0, [r3, #16]
 8007616:	f000 faf1 	bl	8007bfc <__hi0bits>
 800761a:	f1c0 0020 	rsb	r0, r0, #32
 800761e:	9b06      	ldr	r3, [sp, #24]
 8007620:	4418      	add	r0, r3
 8007622:	f010 001f 	ands.w	r0, r0, #31
 8007626:	f000 8094 	beq.w	8007752 <_dtoa_r+0x922>
 800762a:	f1c0 0320 	rsb	r3, r0, #32
 800762e:	2b04      	cmp	r3, #4
 8007630:	f340 8085 	ble.w	800773e <_dtoa_r+0x90e>
 8007634:	9b05      	ldr	r3, [sp, #20]
 8007636:	f1c0 001c 	rsb	r0, r0, #28
 800763a:	4403      	add	r3, r0
 800763c:	9305      	str	r3, [sp, #20]
 800763e:	9b06      	ldr	r3, [sp, #24]
 8007640:	4403      	add	r3, r0
 8007642:	4405      	add	r5, r0
 8007644:	9306      	str	r3, [sp, #24]
 8007646:	9b05      	ldr	r3, [sp, #20]
 8007648:	2b00      	cmp	r3, #0
 800764a:	dd05      	ble.n	8007658 <_dtoa_r+0x828>
 800764c:	4651      	mov	r1, sl
 800764e:	461a      	mov	r2, r3
 8007650:	4620      	mov	r0, r4
 8007652:	f000 fc3b 	bl	8007ecc <__lshift>
 8007656:	4682      	mov	sl, r0
 8007658:	9b06      	ldr	r3, [sp, #24]
 800765a:	2b00      	cmp	r3, #0
 800765c:	dd05      	ble.n	800766a <_dtoa_r+0x83a>
 800765e:	4631      	mov	r1, r6
 8007660:	461a      	mov	r2, r3
 8007662:	4620      	mov	r0, r4
 8007664:	f000 fc32 	bl	8007ecc <__lshift>
 8007668:	4606      	mov	r6, r0
 800766a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800766c:	2b00      	cmp	r3, #0
 800766e:	d072      	beq.n	8007756 <_dtoa_r+0x926>
 8007670:	4631      	mov	r1, r6
 8007672:	4650      	mov	r0, sl
 8007674:	f000 fc96 	bl	8007fa4 <__mcmp>
 8007678:	2800      	cmp	r0, #0
 800767a:	da6c      	bge.n	8007756 <_dtoa_r+0x926>
 800767c:	2300      	movs	r3, #0
 800767e:	4651      	mov	r1, sl
 8007680:	220a      	movs	r2, #10
 8007682:	4620      	mov	r0, r4
 8007684:	f000 fa74 	bl	8007b70 <__multadd>
 8007688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800768a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800768e:	4682      	mov	sl, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 81b0 	beq.w	80079f6 <_dtoa_r+0xbc6>
 8007696:	2300      	movs	r3, #0
 8007698:	4639      	mov	r1, r7
 800769a:	220a      	movs	r2, #10
 800769c:	4620      	mov	r0, r4
 800769e:	f000 fa67 	bl	8007b70 <__multadd>
 80076a2:	9b01      	ldr	r3, [sp, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	4607      	mov	r7, r0
 80076a8:	f300 8096 	bgt.w	80077d8 <_dtoa_r+0x9a8>
 80076ac:	9b07      	ldr	r3, [sp, #28]
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	dc59      	bgt.n	8007766 <_dtoa_r+0x936>
 80076b2:	e091      	b.n	80077d8 <_dtoa_r+0x9a8>
 80076b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80076ba:	e758      	b.n	800756e <_dtoa_r+0x73e>
 80076bc:	9b04      	ldr	r3, [sp, #16]
 80076be:	1e5e      	subs	r6, r3, #1
 80076c0:	9b08      	ldr	r3, [sp, #32]
 80076c2:	42b3      	cmp	r3, r6
 80076c4:	bfbf      	itttt	lt
 80076c6:	9b08      	ldrlt	r3, [sp, #32]
 80076c8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80076ca:	9608      	strlt	r6, [sp, #32]
 80076cc:	1af3      	sublt	r3, r6, r3
 80076ce:	bfb4      	ite	lt
 80076d0:	18d2      	addlt	r2, r2, r3
 80076d2:	1b9e      	subge	r6, r3, r6
 80076d4:	9b04      	ldr	r3, [sp, #16]
 80076d6:	bfbc      	itt	lt
 80076d8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80076da:	2600      	movlt	r6, #0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	bfb7      	itett	lt
 80076e0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80076e4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80076e8:	1a9d      	sublt	r5, r3, r2
 80076ea:	2300      	movlt	r3, #0
 80076ec:	e741      	b.n	8007572 <_dtoa_r+0x742>
 80076ee:	9e08      	ldr	r6, [sp, #32]
 80076f0:	9d05      	ldr	r5, [sp, #20]
 80076f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80076f4:	e748      	b.n	8007588 <_dtoa_r+0x758>
 80076f6:	9a08      	ldr	r2, [sp, #32]
 80076f8:	e770      	b.n	80075dc <_dtoa_r+0x7ac>
 80076fa:	9b07      	ldr	r3, [sp, #28]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	dc19      	bgt.n	8007734 <_dtoa_r+0x904>
 8007700:	9b02      	ldr	r3, [sp, #8]
 8007702:	b9bb      	cbnz	r3, 8007734 <_dtoa_r+0x904>
 8007704:	9b03      	ldr	r3, [sp, #12]
 8007706:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800770a:	b99b      	cbnz	r3, 8007734 <_dtoa_r+0x904>
 800770c:	9b03      	ldr	r3, [sp, #12]
 800770e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007712:	0d1b      	lsrs	r3, r3, #20
 8007714:	051b      	lsls	r3, r3, #20
 8007716:	b183      	cbz	r3, 800773a <_dtoa_r+0x90a>
 8007718:	9b05      	ldr	r3, [sp, #20]
 800771a:	3301      	adds	r3, #1
 800771c:	9305      	str	r3, [sp, #20]
 800771e:	9b06      	ldr	r3, [sp, #24]
 8007720:	3301      	adds	r3, #1
 8007722:	9306      	str	r3, [sp, #24]
 8007724:	f04f 0801 	mov.w	r8, #1
 8007728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800772a:	2b00      	cmp	r3, #0
 800772c:	f47f af6f 	bne.w	800760e <_dtoa_r+0x7de>
 8007730:	2001      	movs	r0, #1
 8007732:	e774      	b.n	800761e <_dtoa_r+0x7ee>
 8007734:	f04f 0800 	mov.w	r8, #0
 8007738:	e7f6      	b.n	8007728 <_dtoa_r+0x8f8>
 800773a:	4698      	mov	r8, r3
 800773c:	e7f4      	b.n	8007728 <_dtoa_r+0x8f8>
 800773e:	d082      	beq.n	8007646 <_dtoa_r+0x816>
 8007740:	9a05      	ldr	r2, [sp, #20]
 8007742:	331c      	adds	r3, #28
 8007744:	441a      	add	r2, r3
 8007746:	9205      	str	r2, [sp, #20]
 8007748:	9a06      	ldr	r2, [sp, #24]
 800774a:	441a      	add	r2, r3
 800774c:	441d      	add	r5, r3
 800774e:	9206      	str	r2, [sp, #24]
 8007750:	e779      	b.n	8007646 <_dtoa_r+0x816>
 8007752:	4603      	mov	r3, r0
 8007754:	e7f4      	b.n	8007740 <_dtoa_r+0x910>
 8007756:	9b04      	ldr	r3, [sp, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	dc37      	bgt.n	80077cc <_dtoa_r+0x99c>
 800775c:	9b07      	ldr	r3, [sp, #28]
 800775e:	2b02      	cmp	r3, #2
 8007760:	dd34      	ble.n	80077cc <_dtoa_r+0x99c>
 8007762:	9b04      	ldr	r3, [sp, #16]
 8007764:	9301      	str	r3, [sp, #4]
 8007766:	9b01      	ldr	r3, [sp, #4]
 8007768:	b963      	cbnz	r3, 8007784 <_dtoa_r+0x954>
 800776a:	4631      	mov	r1, r6
 800776c:	2205      	movs	r2, #5
 800776e:	4620      	mov	r0, r4
 8007770:	f000 f9fe 	bl	8007b70 <__multadd>
 8007774:	4601      	mov	r1, r0
 8007776:	4606      	mov	r6, r0
 8007778:	4650      	mov	r0, sl
 800777a:	f000 fc13 	bl	8007fa4 <__mcmp>
 800777e:	2800      	cmp	r0, #0
 8007780:	f73f adbb 	bgt.w	80072fa <_dtoa_r+0x4ca>
 8007784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007786:	9d00      	ldr	r5, [sp, #0]
 8007788:	ea6f 0b03 	mvn.w	fp, r3
 800778c:	f04f 0800 	mov.w	r8, #0
 8007790:	4631      	mov	r1, r6
 8007792:	4620      	mov	r0, r4
 8007794:	f000 f9ca 	bl	8007b2c <_Bfree>
 8007798:	2f00      	cmp	r7, #0
 800779a:	f43f aeab 	beq.w	80074f4 <_dtoa_r+0x6c4>
 800779e:	f1b8 0f00 	cmp.w	r8, #0
 80077a2:	d005      	beq.n	80077b0 <_dtoa_r+0x980>
 80077a4:	45b8      	cmp	r8, r7
 80077a6:	d003      	beq.n	80077b0 <_dtoa_r+0x980>
 80077a8:	4641      	mov	r1, r8
 80077aa:	4620      	mov	r0, r4
 80077ac:	f000 f9be 	bl	8007b2c <_Bfree>
 80077b0:	4639      	mov	r1, r7
 80077b2:	4620      	mov	r0, r4
 80077b4:	f000 f9ba 	bl	8007b2c <_Bfree>
 80077b8:	e69c      	b.n	80074f4 <_dtoa_r+0x6c4>
 80077ba:	2600      	movs	r6, #0
 80077bc:	4637      	mov	r7, r6
 80077be:	e7e1      	b.n	8007784 <_dtoa_r+0x954>
 80077c0:	46bb      	mov	fp, r7
 80077c2:	4637      	mov	r7, r6
 80077c4:	e599      	b.n	80072fa <_dtoa_r+0x4ca>
 80077c6:	bf00      	nop
 80077c8:	40240000 	.word	0x40240000
 80077cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f000 80c8 	beq.w	8007964 <_dtoa_r+0xb34>
 80077d4:	9b04      	ldr	r3, [sp, #16]
 80077d6:	9301      	str	r3, [sp, #4]
 80077d8:	2d00      	cmp	r5, #0
 80077da:	dd05      	ble.n	80077e8 <_dtoa_r+0x9b8>
 80077dc:	4639      	mov	r1, r7
 80077de:	462a      	mov	r2, r5
 80077e0:	4620      	mov	r0, r4
 80077e2:	f000 fb73 	bl	8007ecc <__lshift>
 80077e6:	4607      	mov	r7, r0
 80077e8:	f1b8 0f00 	cmp.w	r8, #0
 80077ec:	d05b      	beq.n	80078a6 <_dtoa_r+0xa76>
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	4620      	mov	r0, r4
 80077f2:	f000 f95b 	bl	8007aac <_Balloc>
 80077f6:	4605      	mov	r5, r0
 80077f8:	b928      	cbnz	r0, 8007806 <_dtoa_r+0x9d6>
 80077fa:	4b83      	ldr	r3, [pc, #524]	; (8007a08 <_dtoa_r+0xbd8>)
 80077fc:	4602      	mov	r2, r0
 80077fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007802:	f7ff bb2e 	b.w	8006e62 <_dtoa_r+0x32>
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	3202      	adds	r2, #2
 800780a:	0092      	lsls	r2, r2, #2
 800780c:	f107 010c 	add.w	r1, r7, #12
 8007810:	300c      	adds	r0, #12
 8007812:	f000 fef9 	bl	8008608 <memcpy>
 8007816:	2201      	movs	r2, #1
 8007818:	4629      	mov	r1, r5
 800781a:	4620      	mov	r0, r4
 800781c:	f000 fb56 	bl	8007ecc <__lshift>
 8007820:	9b00      	ldr	r3, [sp, #0]
 8007822:	3301      	adds	r3, #1
 8007824:	9304      	str	r3, [sp, #16]
 8007826:	e9dd 2300 	ldrd	r2, r3, [sp]
 800782a:	4413      	add	r3, r2
 800782c:	9308      	str	r3, [sp, #32]
 800782e:	9b02      	ldr	r3, [sp, #8]
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	46b8      	mov	r8, r7
 8007836:	9306      	str	r3, [sp, #24]
 8007838:	4607      	mov	r7, r0
 800783a:	9b04      	ldr	r3, [sp, #16]
 800783c:	4631      	mov	r1, r6
 800783e:	3b01      	subs	r3, #1
 8007840:	4650      	mov	r0, sl
 8007842:	9301      	str	r3, [sp, #4]
 8007844:	f7ff fa6c 	bl	8006d20 <quorem>
 8007848:	4641      	mov	r1, r8
 800784a:	9002      	str	r0, [sp, #8]
 800784c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007850:	4650      	mov	r0, sl
 8007852:	f000 fba7 	bl	8007fa4 <__mcmp>
 8007856:	463a      	mov	r2, r7
 8007858:	9005      	str	r0, [sp, #20]
 800785a:	4631      	mov	r1, r6
 800785c:	4620      	mov	r0, r4
 800785e:	f000 fbbd 	bl	8007fdc <__mdiff>
 8007862:	68c2      	ldr	r2, [r0, #12]
 8007864:	4605      	mov	r5, r0
 8007866:	bb02      	cbnz	r2, 80078aa <_dtoa_r+0xa7a>
 8007868:	4601      	mov	r1, r0
 800786a:	4650      	mov	r0, sl
 800786c:	f000 fb9a 	bl	8007fa4 <__mcmp>
 8007870:	4602      	mov	r2, r0
 8007872:	4629      	mov	r1, r5
 8007874:	4620      	mov	r0, r4
 8007876:	9209      	str	r2, [sp, #36]	; 0x24
 8007878:	f000 f958 	bl	8007b2c <_Bfree>
 800787c:	9b07      	ldr	r3, [sp, #28]
 800787e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007880:	9d04      	ldr	r5, [sp, #16]
 8007882:	ea43 0102 	orr.w	r1, r3, r2
 8007886:	9b06      	ldr	r3, [sp, #24]
 8007888:	4319      	orrs	r1, r3
 800788a:	d110      	bne.n	80078ae <_dtoa_r+0xa7e>
 800788c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007890:	d029      	beq.n	80078e6 <_dtoa_r+0xab6>
 8007892:	9b05      	ldr	r3, [sp, #20]
 8007894:	2b00      	cmp	r3, #0
 8007896:	dd02      	ble.n	800789e <_dtoa_r+0xa6e>
 8007898:	9b02      	ldr	r3, [sp, #8]
 800789a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800789e:	9b01      	ldr	r3, [sp, #4]
 80078a0:	f883 9000 	strb.w	r9, [r3]
 80078a4:	e774      	b.n	8007790 <_dtoa_r+0x960>
 80078a6:	4638      	mov	r0, r7
 80078a8:	e7ba      	b.n	8007820 <_dtoa_r+0x9f0>
 80078aa:	2201      	movs	r2, #1
 80078ac:	e7e1      	b.n	8007872 <_dtoa_r+0xa42>
 80078ae:	9b05      	ldr	r3, [sp, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	db04      	blt.n	80078be <_dtoa_r+0xa8e>
 80078b4:	9907      	ldr	r1, [sp, #28]
 80078b6:	430b      	orrs	r3, r1
 80078b8:	9906      	ldr	r1, [sp, #24]
 80078ba:	430b      	orrs	r3, r1
 80078bc:	d120      	bne.n	8007900 <_dtoa_r+0xad0>
 80078be:	2a00      	cmp	r2, #0
 80078c0:	dded      	ble.n	800789e <_dtoa_r+0xa6e>
 80078c2:	4651      	mov	r1, sl
 80078c4:	2201      	movs	r2, #1
 80078c6:	4620      	mov	r0, r4
 80078c8:	f000 fb00 	bl	8007ecc <__lshift>
 80078cc:	4631      	mov	r1, r6
 80078ce:	4682      	mov	sl, r0
 80078d0:	f000 fb68 	bl	8007fa4 <__mcmp>
 80078d4:	2800      	cmp	r0, #0
 80078d6:	dc03      	bgt.n	80078e0 <_dtoa_r+0xab0>
 80078d8:	d1e1      	bne.n	800789e <_dtoa_r+0xa6e>
 80078da:	f019 0f01 	tst.w	r9, #1
 80078de:	d0de      	beq.n	800789e <_dtoa_r+0xa6e>
 80078e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80078e4:	d1d8      	bne.n	8007898 <_dtoa_r+0xa68>
 80078e6:	9a01      	ldr	r2, [sp, #4]
 80078e8:	2339      	movs	r3, #57	; 0x39
 80078ea:	7013      	strb	r3, [r2, #0]
 80078ec:	462b      	mov	r3, r5
 80078ee:	461d      	mov	r5, r3
 80078f0:	3b01      	subs	r3, #1
 80078f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80078f6:	2a39      	cmp	r2, #57	; 0x39
 80078f8:	d06c      	beq.n	80079d4 <_dtoa_r+0xba4>
 80078fa:	3201      	adds	r2, #1
 80078fc:	701a      	strb	r2, [r3, #0]
 80078fe:	e747      	b.n	8007790 <_dtoa_r+0x960>
 8007900:	2a00      	cmp	r2, #0
 8007902:	dd07      	ble.n	8007914 <_dtoa_r+0xae4>
 8007904:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007908:	d0ed      	beq.n	80078e6 <_dtoa_r+0xab6>
 800790a:	9a01      	ldr	r2, [sp, #4]
 800790c:	f109 0301 	add.w	r3, r9, #1
 8007910:	7013      	strb	r3, [r2, #0]
 8007912:	e73d      	b.n	8007790 <_dtoa_r+0x960>
 8007914:	9b04      	ldr	r3, [sp, #16]
 8007916:	9a08      	ldr	r2, [sp, #32]
 8007918:	f803 9c01 	strb.w	r9, [r3, #-1]
 800791c:	4293      	cmp	r3, r2
 800791e:	d043      	beq.n	80079a8 <_dtoa_r+0xb78>
 8007920:	4651      	mov	r1, sl
 8007922:	2300      	movs	r3, #0
 8007924:	220a      	movs	r2, #10
 8007926:	4620      	mov	r0, r4
 8007928:	f000 f922 	bl	8007b70 <__multadd>
 800792c:	45b8      	cmp	r8, r7
 800792e:	4682      	mov	sl, r0
 8007930:	f04f 0300 	mov.w	r3, #0
 8007934:	f04f 020a 	mov.w	r2, #10
 8007938:	4641      	mov	r1, r8
 800793a:	4620      	mov	r0, r4
 800793c:	d107      	bne.n	800794e <_dtoa_r+0xb1e>
 800793e:	f000 f917 	bl	8007b70 <__multadd>
 8007942:	4680      	mov	r8, r0
 8007944:	4607      	mov	r7, r0
 8007946:	9b04      	ldr	r3, [sp, #16]
 8007948:	3301      	adds	r3, #1
 800794a:	9304      	str	r3, [sp, #16]
 800794c:	e775      	b.n	800783a <_dtoa_r+0xa0a>
 800794e:	f000 f90f 	bl	8007b70 <__multadd>
 8007952:	4639      	mov	r1, r7
 8007954:	4680      	mov	r8, r0
 8007956:	2300      	movs	r3, #0
 8007958:	220a      	movs	r2, #10
 800795a:	4620      	mov	r0, r4
 800795c:	f000 f908 	bl	8007b70 <__multadd>
 8007960:	4607      	mov	r7, r0
 8007962:	e7f0      	b.n	8007946 <_dtoa_r+0xb16>
 8007964:	9b04      	ldr	r3, [sp, #16]
 8007966:	9301      	str	r3, [sp, #4]
 8007968:	9d00      	ldr	r5, [sp, #0]
 800796a:	4631      	mov	r1, r6
 800796c:	4650      	mov	r0, sl
 800796e:	f7ff f9d7 	bl	8006d20 <quorem>
 8007972:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007976:	9b00      	ldr	r3, [sp, #0]
 8007978:	f805 9b01 	strb.w	r9, [r5], #1
 800797c:	1aea      	subs	r2, r5, r3
 800797e:	9b01      	ldr	r3, [sp, #4]
 8007980:	4293      	cmp	r3, r2
 8007982:	dd07      	ble.n	8007994 <_dtoa_r+0xb64>
 8007984:	4651      	mov	r1, sl
 8007986:	2300      	movs	r3, #0
 8007988:	220a      	movs	r2, #10
 800798a:	4620      	mov	r0, r4
 800798c:	f000 f8f0 	bl	8007b70 <__multadd>
 8007990:	4682      	mov	sl, r0
 8007992:	e7ea      	b.n	800796a <_dtoa_r+0xb3a>
 8007994:	9b01      	ldr	r3, [sp, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	bfc8      	it	gt
 800799a:	461d      	movgt	r5, r3
 800799c:	9b00      	ldr	r3, [sp, #0]
 800799e:	bfd8      	it	le
 80079a0:	2501      	movle	r5, #1
 80079a2:	441d      	add	r5, r3
 80079a4:	f04f 0800 	mov.w	r8, #0
 80079a8:	4651      	mov	r1, sl
 80079aa:	2201      	movs	r2, #1
 80079ac:	4620      	mov	r0, r4
 80079ae:	f000 fa8d 	bl	8007ecc <__lshift>
 80079b2:	4631      	mov	r1, r6
 80079b4:	4682      	mov	sl, r0
 80079b6:	f000 faf5 	bl	8007fa4 <__mcmp>
 80079ba:	2800      	cmp	r0, #0
 80079bc:	dc96      	bgt.n	80078ec <_dtoa_r+0xabc>
 80079be:	d102      	bne.n	80079c6 <_dtoa_r+0xb96>
 80079c0:	f019 0f01 	tst.w	r9, #1
 80079c4:	d192      	bne.n	80078ec <_dtoa_r+0xabc>
 80079c6:	462b      	mov	r3, r5
 80079c8:	461d      	mov	r5, r3
 80079ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079ce:	2a30      	cmp	r2, #48	; 0x30
 80079d0:	d0fa      	beq.n	80079c8 <_dtoa_r+0xb98>
 80079d2:	e6dd      	b.n	8007790 <_dtoa_r+0x960>
 80079d4:	9a00      	ldr	r2, [sp, #0]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d189      	bne.n	80078ee <_dtoa_r+0xabe>
 80079da:	f10b 0b01 	add.w	fp, fp, #1
 80079de:	2331      	movs	r3, #49	; 0x31
 80079e0:	e796      	b.n	8007910 <_dtoa_r+0xae0>
 80079e2:	4b0a      	ldr	r3, [pc, #40]	; (8007a0c <_dtoa_r+0xbdc>)
 80079e4:	f7ff ba99 	b.w	8006f1a <_dtoa_r+0xea>
 80079e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f47f aa6d 	bne.w	8006eca <_dtoa_r+0x9a>
 80079f0:	4b07      	ldr	r3, [pc, #28]	; (8007a10 <_dtoa_r+0xbe0>)
 80079f2:	f7ff ba92 	b.w	8006f1a <_dtoa_r+0xea>
 80079f6:	9b01      	ldr	r3, [sp, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	dcb5      	bgt.n	8007968 <_dtoa_r+0xb38>
 80079fc:	9b07      	ldr	r3, [sp, #28]
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	f73f aeb1 	bgt.w	8007766 <_dtoa_r+0x936>
 8007a04:	e7b0      	b.n	8007968 <_dtoa_r+0xb38>
 8007a06:	bf00      	nop
 8007a08:	0800a38b 	.word	0x0800a38b
 8007a0c:	0800a255 	.word	0x0800a255
 8007a10:	0800a326 	.word	0x0800a326

08007a14 <_free_r>:
 8007a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a16:	2900      	cmp	r1, #0
 8007a18:	d044      	beq.n	8007aa4 <_free_r+0x90>
 8007a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a1e:	9001      	str	r0, [sp, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f1a1 0404 	sub.w	r4, r1, #4
 8007a26:	bfb8      	it	lt
 8007a28:	18e4      	addlt	r4, r4, r3
 8007a2a:	f7fe fa45 	bl	8005eb8 <__malloc_lock>
 8007a2e:	4a1e      	ldr	r2, [pc, #120]	; (8007aa8 <_free_r+0x94>)
 8007a30:	9801      	ldr	r0, [sp, #4]
 8007a32:	6813      	ldr	r3, [r2, #0]
 8007a34:	b933      	cbnz	r3, 8007a44 <_free_r+0x30>
 8007a36:	6063      	str	r3, [r4, #4]
 8007a38:	6014      	str	r4, [r2, #0]
 8007a3a:	b003      	add	sp, #12
 8007a3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a40:	f7fe ba40 	b.w	8005ec4 <__malloc_unlock>
 8007a44:	42a3      	cmp	r3, r4
 8007a46:	d908      	bls.n	8007a5a <_free_r+0x46>
 8007a48:	6825      	ldr	r5, [r4, #0]
 8007a4a:	1961      	adds	r1, r4, r5
 8007a4c:	428b      	cmp	r3, r1
 8007a4e:	bf01      	itttt	eq
 8007a50:	6819      	ldreq	r1, [r3, #0]
 8007a52:	685b      	ldreq	r3, [r3, #4]
 8007a54:	1949      	addeq	r1, r1, r5
 8007a56:	6021      	streq	r1, [r4, #0]
 8007a58:	e7ed      	b.n	8007a36 <_free_r+0x22>
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	b10b      	cbz	r3, 8007a64 <_free_r+0x50>
 8007a60:	42a3      	cmp	r3, r4
 8007a62:	d9fa      	bls.n	8007a5a <_free_r+0x46>
 8007a64:	6811      	ldr	r1, [r2, #0]
 8007a66:	1855      	adds	r5, r2, r1
 8007a68:	42a5      	cmp	r5, r4
 8007a6a:	d10b      	bne.n	8007a84 <_free_r+0x70>
 8007a6c:	6824      	ldr	r4, [r4, #0]
 8007a6e:	4421      	add	r1, r4
 8007a70:	1854      	adds	r4, r2, r1
 8007a72:	42a3      	cmp	r3, r4
 8007a74:	6011      	str	r1, [r2, #0]
 8007a76:	d1e0      	bne.n	8007a3a <_free_r+0x26>
 8007a78:	681c      	ldr	r4, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	6053      	str	r3, [r2, #4]
 8007a7e:	440c      	add	r4, r1
 8007a80:	6014      	str	r4, [r2, #0]
 8007a82:	e7da      	b.n	8007a3a <_free_r+0x26>
 8007a84:	d902      	bls.n	8007a8c <_free_r+0x78>
 8007a86:	230c      	movs	r3, #12
 8007a88:	6003      	str	r3, [r0, #0]
 8007a8a:	e7d6      	b.n	8007a3a <_free_r+0x26>
 8007a8c:	6825      	ldr	r5, [r4, #0]
 8007a8e:	1961      	adds	r1, r4, r5
 8007a90:	428b      	cmp	r3, r1
 8007a92:	bf04      	itt	eq
 8007a94:	6819      	ldreq	r1, [r3, #0]
 8007a96:	685b      	ldreq	r3, [r3, #4]
 8007a98:	6063      	str	r3, [r4, #4]
 8007a9a:	bf04      	itt	eq
 8007a9c:	1949      	addeq	r1, r1, r5
 8007a9e:	6021      	streq	r1, [r4, #0]
 8007aa0:	6054      	str	r4, [r2, #4]
 8007aa2:	e7ca      	b.n	8007a3a <_free_r+0x26>
 8007aa4:	b003      	add	sp, #12
 8007aa6:	bd30      	pop	{r4, r5, pc}
 8007aa8:	20000380 	.word	0x20000380

08007aac <_Balloc>:
 8007aac:	b570      	push	{r4, r5, r6, lr}
 8007aae:	69c6      	ldr	r6, [r0, #28]
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	460d      	mov	r5, r1
 8007ab4:	b976      	cbnz	r6, 8007ad4 <_Balloc+0x28>
 8007ab6:	2010      	movs	r0, #16
 8007ab8:	f7fe f94e 	bl	8005d58 <malloc>
 8007abc:	4602      	mov	r2, r0
 8007abe:	61e0      	str	r0, [r4, #28]
 8007ac0:	b920      	cbnz	r0, 8007acc <_Balloc+0x20>
 8007ac2:	4b18      	ldr	r3, [pc, #96]	; (8007b24 <_Balloc+0x78>)
 8007ac4:	4818      	ldr	r0, [pc, #96]	; (8007b28 <_Balloc+0x7c>)
 8007ac6:	216b      	movs	r1, #107	; 0x6b
 8007ac8:	f7ff f90c 	bl	8006ce4 <__assert_func>
 8007acc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ad0:	6006      	str	r6, [r0, #0]
 8007ad2:	60c6      	str	r6, [r0, #12]
 8007ad4:	69e6      	ldr	r6, [r4, #28]
 8007ad6:	68f3      	ldr	r3, [r6, #12]
 8007ad8:	b183      	cbz	r3, 8007afc <_Balloc+0x50>
 8007ada:	69e3      	ldr	r3, [r4, #28]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ae2:	b9b8      	cbnz	r0, 8007b14 <_Balloc+0x68>
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	fa01 f605 	lsl.w	r6, r1, r5
 8007aea:	1d72      	adds	r2, r6, #5
 8007aec:	0092      	lsls	r2, r2, #2
 8007aee:	4620      	mov	r0, r4
 8007af0:	f000 fd9f 	bl	8008632 <_calloc_r>
 8007af4:	b160      	cbz	r0, 8007b10 <_Balloc+0x64>
 8007af6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007afa:	e00e      	b.n	8007b1a <_Balloc+0x6e>
 8007afc:	2221      	movs	r2, #33	; 0x21
 8007afe:	2104      	movs	r1, #4
 8007b00:	4620      	mov	r0, r4
 8007b02:	f000 fd96 	bl	8008632 <_calloc_r>
 8007b06:	69e3      	ldr	r3, [r4, #28]
 8007b08:	60f0      	str	r0, [r6, #12]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1e4      	bne.n	8007ada <_Balloc+0x2e>
 8007b10:	2000      	movs	r0, #0
 8007b12:	bd70      	pop	{r4, r5, r6, pc}
 8007b14:	6802      	ldr	r2, [r0, #0]
 8007b16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b20:	e7f7      	b.n	8007b12 <_Balloc+0x66>
 8007b22:	bf00      	nop
 8007b24:	0800a279 	.word	0x0800a279
 8007b28:	0800a39c 	.word	0x0800a39c

08007b2c <_Bfree>:
 8007b2c:	b570      	push	{r4, r5, r6, lr}
 8007b2e:	69c6      	ldr	r6, [r0, #28]
 8007b30:	4605      	mov	r5, r0
 8007b32:	460c      	mov	r4, r1
 8007b34:	b976      	cbnz	r6, 8007b54 <_Bfree+0x28>
 8007b36:	2010      	movs	r0, #16
 8007b38:	f7fe f90e 	bl	8005d58 <malloc>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	61e8      	str	r0, [r5, #28]
 8007b40:	b920      	cbnz	r0, 8007b4c <_Bfree+0x20>
 8007b42:	4b09      	ldr	r3, [pc, #36]	; (8007b68 <_Bfree+0x3c>)
 8007b44:	4809      	ldr	r0, [pc, #36]	; (8007b6c <_Bfree+0x40>)
 8007b46:	218f      	movs	r1, #143	; 0x8f
 8007b48:	f7ff f8cc 	bl	8006ce4 <__assert_func>
 8007b4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b50:	6006      	str	r6, [r0, #0]
 8007b52:	60c6      	str	r6, [r0, #12]
 8007b54:	b13c      	cbz	r4, 8007b66 <_Bfree+0x3a>
 8007b56:	69eb      	ldr	r3, [r5, #28]
 8007b58:	6862      	ldr	r2, [r4, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b60:	6021      	str	r1, [r4, #0]
 8007b62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b66:	bd70      	pop	{r4, r5, r6, pc}
 8007b68:	0800a279 	.word	0x0800a279
 8007b6c:	0800a39c 	.word	0x0800a39c

08007b70 <__multadd>:
 8007b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b74:	690d      	ldr	r5, [r1, #16]
 8007b76:	4607      	mov	r7, r0
 8007b78:	460c      	mov	r4, r1
 8007b7a:	461e      	mov	r6, r3
 8007b7c:	f101 0c14 	add.w	ip, r1, #20
 8007b80:	2000      	movs	r0, #0
 8007b82:	f8dc 3000 	ldr.w	r3, [ip]
 8007b86:	b299      	uxth	r1, r3
 8007b88:	fb02 6101 	mla	r1, r2, r1, r6
 8007b8c:	0c1e      	lsrs	r6, r3, #16
 8007b8e:	0c0b      	lsrs	r3, r1, #16
 8007b90:	fb02 3306 	mla	r3, r2, r6, r3
 8007b94:	b289      	uxth	r1, r1
 8007b96:	3001      	adds	r0, #1
 8007b98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b9c:	4285      	cmp	r5, r0
 8007b9e:	f84c 1b04 	str.w	r1, [ip], #4
 8007ba2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007ba6:	dcec      	bgt.n	8007b82 <__multadd+0x12>
 8007ba8:	b30e      	cbz	r6, 8007bee <__multadd+0x7e>
 8007baa:	68a3      	ldr	r3, [r4, #8]
 8007bac:	42ab      	cmp	r3, r5
 8007bae:	dc19      	bgt.n	8007be4 <__multadd+0x74>
 8007bb0:	6861      	ldr	r1, [r4, #4]
 8007bb2:	4638      	mov	r0, r7
 8007bb4:	3101      	adds	r1, #1
 8007bb6:	f7ff ff79 	bl	8007aac <_Balloc>
 8007bba:	4680      	mov	r8, r0
 8007bbc:	b928      	cbnz	r0, 8007bca <__multadd+0x5a>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	4b0c      	ldr	r3, [pc, #48]	; (8007bf4 <__multadd+0x84>)
 8007bc2:	480d      	ldr	r0, [pc, #52]	; (8007bf8 <__multadd+0x88>)
 8007bc4:	21ba      	movs	r1, #186	; 0xba
 8007bc6:	f7ff f88d 	bl	8006ce4 <__assert_func>
 8007bca:	6922      	ldr	r2, [r4, #16]
 8007bcc:	3202      	adds	r2, #2
 8007bce:	f104 010c 	add.w	r1, r4, #12
 8007bd2:	0092      	lsls	r2, r2, #2
 8007bd4:	300c      	adds	r0, #12
 8007bd6:	f000 fd17 	bl	8008608 <memcpy>
 8007bda:	4621      	mov	r1, r4
 8007bdc:	4638      	mov	r0, r7
 8007bde:	f7ff ffa5 	bl	8007b2c <_Bfree>
 8007be2:	4644      	mov	r4, r8
 8007be4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007be8:	3501      	adds	r5, #1
 8007bea:	615e      	str	r6, [r3, #20]
 8007bec:	6125      	str	r5, [r4, #16]
 8007bee:	4620      	mov	r0, r4
 8007bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bf4:	0800a38b 	.word	0x0800a38b
 8007bf8:	0800a39c 	.word	0x0800a39c

08007bfc <__hi0bits>:
 8007bfc:	0c03      	lsrs	r3, r0, #16
 8007bfe:	041b      	lsls	r3, r3, #16
 8007c00:	b9d3      	cbnz	r3, 8007c38 <__hi0bits+0x3c>
 8007c02:	0400      	lsls	r0, r0, #16
 8007c04:	2310      	movs	r3, #16
 8007c06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007c0a:	bf04      	itt	eq
 8007c0c:	0200      	lsleq	r0, r0, #8
 8007c0e:	3308      	addeq	r3, #8
 8007c10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c14:	bf04      	itt	eq
 8007c16:	0100      	lsleq	r0, r0, #4
 8007c18:	3304      	addeq	r3, #4
 8007c1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007c1e:	bf04      	itt	eq
 8007c20:	0080      	lsleq	r0, r0, #2
 8007c22:	3302      	addeq	r3, #2
 8007c24:	2800      	cmp	r0, #0
 8007c26:	db05      	blt.n	8007c34 <__hi0bits+0x38>
 8007c28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007c2c:	f103 0301 	add.w	r3, r3, #1
 8007c30:	bf08      	it	eq
 8007c32:	2320      	moveq	r3, #32
 8007c34:	4618      	mov	r0, r3
 8007c36:	4770      	bx	lr
 8007c38:	2300      	movs	r3, #0
 8007c3a:	e7e4      	b.n	8007c06 <__hi0bits+0xa>

08007c3c <__lo0bits>:
 8007c3c:	6803      	ldr	r3, [r0, #0]
 8007c3e:	f013 0207 	ands.w	r2, r3, #7
 8007c42:	d00c      	beq.n	8007c5e <__lo0bits+0x22>
 8007c44:	07d9      	lsls	r1, r3, #31
 8007c46:	d422      	bmi.n	8007c8e <__lo0bits+0x52>
 8007c48:	079a      	lsls	r2, r3, #30
 8007c4a:	bf49      	itett	mi
 8007c4c:	085b      	lsrmi	r3, r3, #1
 8007c4e:	089b      	lsrpl	r3, r3, #2
 8007c50:	6003      	strmi	r3, [r0, #0]
 8007c52:	2201      	movmi	r2, #1
 8007c54:	bf5c      	itt	pl
 8007c56:	6003      	strpl	r3, [r0, #0]
 8007c58:	2202      	movpl	r2, #2
 8007c5a:	4610      	mov	r0, r2
 8007c5c:	4770      	bx	lr
 8007c5e:	b299      	uxth	r1, r3
 8007c60:	b909      	cbnz	r1, 8007c66 <__lo0bits+0x2a>
 8007c62:	0c1b      	lsrs	r3, r3, #16
 8007c64:	2210      	movs	r2, #16
 8007c66:	b2d9      	uxtb	r1, r3
 8007c68:	b909      	cbnz	r1, 8007c6e <__lo0bits+0x32>
 8007c6a:	3208      	adds	r2, #8
 8007c6c:	0a1b      	lsrs	r3, r3, #8
 8007c6e:	0719      	lsls	r1, r3, #28
 8007c70:	bf04      	itt	eq
 8007c72:	091b      	lsreq	r3, r3, #4
 8007c74:	3204      	addeq	r2, #4
 8007c76:	0799      	lsls	r1, r3, #30
 8007c78:	bf04      	itt	eq
 8007c7a:	089b      	lsreq	r3, r3, #2
 8007c7c:	3202      	addeq	r2, #2
 8007c7e:	07d9      	lsls	r1, r3, #31
 8007c80:	d403      	bmi.n	8007c8a <__lo0bits+0x4e>
 8007c82:	085b      	lsrs	r3, r3, #1
 8007c84:	f102 0201 	add.w	r2, r2, #1
 8007c88:	d003      	beq.n	8007c92 <__lo0bits+0x56>
 8007c8a:	6003      	str	r3, [r0, #0]
 8007c8c:	e7e5      	b.n	8007c5a <__lo0bits+0x1e>
 8007c8e:	2200      	movs	r2, #0
 8007c90:	e7e3      	b.n	8007c5a <__lo0bits+0x1e>
 8007c92:	2220      	movs	r2, #32
 8007c94:	e7e1      	b.n	8007c5a <__lo0bits+0x1e>
	...

08007c98 <__i2b>:
 8007c98:	b510      	push	{r4, lr}
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	f7ff ff05 	bl	8007aac <_Balloc>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	b928      	cbnz	r0, 8007cb2 <__i2b+0x1a>
 8007ca6:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <__i2b+0x24>)
 8007ca8:	4805      	ldr	r0, [pc, #20]	; (8007cc0 <__i2b+0x28>)
 8007caa:	f240 1145 	movw	r1, #325	; 0x145
 8007cae:	f7ff f819 	bl	8006ce4 <__assert_func>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	6144      	str	r4, [r0, #20]
 8007cb6:	6103      	str	r3, [r0, #16]
 8007cb8:	bd10      	pop	{r4, pc}
 8007cba:	bf00      	nop
 8007cbc:	0800a38b 	.word	0x0800a38b
 8007cc0:	0800a39c 	.word	0x0800a39c

08007cc4 <__multiply>:
 8007cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc8:	4691      	mov	r9, r2
 8007cca:	690a      	ldr	r2, [r1, #16]
 8007ccc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	bfb8      	it	lt
 8007cd4:	460b      	movlt	r3, r1
 8007cd6:	460c      	mov	r4, r1
 8007cd8:	bfbc      	itt	lt
 8007cda:	464c      	movlt	r4, r9
 8007cdc:	4699      	movlt	r9, r3
 8007cde:	6927      	ldr	r7, [r4, #16]
 8007ce0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007ce4:	68a3      	ldr	r3, [r4, #8]
 8007ce6:	6861      	ldr	r1, [r4, #4]
 8007ce8:	eb07 060a 	add.w	r6, r7, sl
 8007cec:	42b3      	cmp	r3, r6
 8007cee:	b085      	sub	sp, #20
 8007cf0:	bfb8      	it	lt
 8007cf2:	3101      	addlt	r1, #1
 8007cf4:	f7ff feda 	bl	8007aac <_Balloc>
 8007cf8:	b930      	cbnz	r0, 8007d08 <__multiply+0x44>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	4b44      	ldr	r3, [pc, #272]	; (8007e10 <__multiply+0x14c>)
 8007cfe:	4845      	ldr	r0, [pc, #276]	; (8007e14 <__multiply+0x150>)
 8007d00:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007d04:	f7fe ffee 	bl	8006ce4 <__assert_func>
 8007d08:	f100 0514 	add.w	r5, r0, #20
 8007d0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d10:	462b      	mov	r3, r5
 8007d12:	2200      	movs	r2, #0
 8007d14:	4543      	cmp	r3, r8
 8007d16:	d321      	bcc.n	8007d5c <__multiply+0x98>
 8007d18:	f104 0314 	add.w	r3, r4, #20
 8007d1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007d20:	f109 0314 	add.w	r3, r9, #20
 8007d24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007d28:	9202      	str	r2, [sp, #8]
 8007d2a:	1b3a      	subs	r2, r7, r4
 8007d2c:	3a15      	subs	r2, #21
 8007d2e:	f022 0203 	bic.w	r2, r2, #3
 8007d32:	3204      	adds	r2, #4
 8007d34:	f104 0115 	add.w	r1, r4, #21
 8007d38:	428f      	cmp	r7, r1
 8007d3a:	bf38      	it	cc
 8007d3c:	2204      	movcc	r2, #4
 8007d3e:	9201      	str	r2, [sp, #4]
 8007d40:	9a02      	ldr	r2, [sp, #8]
 8007d42:	9303      	str	r3, [sp, #12]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d80c      	bhi.n	8007d62 <__multiply+0x9e>
 8007d48:	2e00      	cmp	r6, #0
 8007d4a:	dd03      	ble.n	8007d54 <__multiply+0x90>
 8007d4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d05b      	beq.n	8007e0c <__multiply+0x148>
 8007d54:	6106      	str	r6, [r0, #16]
 8007d56:	b005      	add	sp, #20
 8007d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5c:	f843 2b04 	str.w	r2, [r3], #4
 8007d60:	e7d8      	b.n	8007d14 <__multiply+0x50>
 8007d62:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d66:	f1ba 0f00 	cmp.w	sl, #0
 8007d6a:	d024      	beq.n	8007db6 <__multiply+0xf2>
 8007d6c:	f104 0e14 	add.w	lr, r4, #20
 8007d70:	46a9      	mov	r9, r5
 8007d72:	f04f 0c00 	mov.w	ip, #0
 8007d76:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007d7a:	f8d9 1000 	ldr.w	r1, [r9]
 8007d7e:	fa1f fb82 	uxth.w	fp, r2
 8007d82:	b289      	uxth	r1, r1
 8007d84:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007d8c:	f8d9 2000 	ldr.w	r2, [r9]
 8007d90:	4461      	add	r1, ip
 8007d92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d96:	fb0a c20b 	mla	r2, sl, fp, ip
 8007d9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d9e:	b289      	uxth	r1, r1
 8007da0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007da4:	4577      	cmp	r7, lr
 8007da6:	f849 1b04 	str.w	r1, [r9], #4
 8007daa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007dae:	d8e2      	bhi.n	8007d76 <__multiply+0xb2>
 8007db0:	9a01      	ldr	r2, [sp, #4]
 8007db2:	f845 c002 	str.w	ip, [r5, r2]
 8007db6:	9a03      	ldr	r2, [sp, #12]
 8007db8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	f1b9 0f00 	cmp.w	r9, #0
 8007dc2:	d021      	beq.n	8007e08 <__multiply+0x144>
 8007dc4:	6829      	ldr	r1, [r5, #0]
 8007dc6:	f104 0c14 	add.w	ip, r4, #20
 8007dca:	46ae      	mov	lr, r5
 8007dcc:	f04f 0a00 	mov.w	sl, #0
 8007dd0:	f8bc b000 	ldrh.w	fp, [ip]
 8007dd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007dd8:	fb09 220b 	mla	r2, r9, fp, r2
 8007ddc:	4452      	add	r2, sl
 8007dde:	b289      	uxth	r1, r1
 8007de0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007de4:	f84e 1b04 	str.w	r1, [lr], #4
 8007de8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007dec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007df0:	f8be 1000 	ldrh.w	r1, [lr]
 8007df4:	fb09 110a 	mla	r1, r9, sl, r1
 8007df8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007dfc:	4567      	cmp	r7, ip
 8007dfe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e02:	d8e5      	bhi.n	8007dd0 <__multiply+0x10c>
 8007e04:	9a01      	ldr	r2, [sp, #4]
 8007e06:	50a9      	str	r1, [r5, r2]
 8007e08:	3504      	adds	r5, #4
 8007e0a:	e799      	b.n	8007d40 <__multiply+0x7c>
 8007e0c:	3e01      	subs	r6, #1
 8007e0e:	e79b      	b.n	8007d48 <__multiply+0x84>
 8007e10:	0800a38b 	.word	0x0800a38b
 8007e14:	0800a39c 	.word	0x0800a39c

08007e18 <__pow5mult>:
 8007e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e1c:	4615      	mov	r5, r2
 8007e1e:	f012 0203 	ands.w	r2, r2, #3
 8007e22:	4606      	mov	r6, r0
 8007e24:	460f      	mov	r7, r1
 8007e26:	d007      	beq.n	8007e38 <__pow5mult+0x20>
 8007e28:	4c25      	ldr	r4, [pc, #148]	; (8007ec0 <__pow5mult+0xa8>)
 8007e2a:	3a01      	subs	r2, #1
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e32:	f7ff fe9d 	bl	8007b70 <__multadd>
 8007e36:	4607      	mov	r7, r0
 8007e38:	10ad      	asrs	r5, r5, #2
 8007e3a:	d03d      	beq.n	8007eb8 <__pow5mult+0xa0>
 8007e3c:	69f4      	ldr	r4, [r6, #28]
 8007e3e:	b97c      	cbnz	r4, 8007e60 <__pow5mult+0x48>
 8007e40:	2010      	movs	r0, #16
 8007e42:	f7fd ff89 	bl	8005d58 <malloc>
 8007e46:	4602      	mov	r2, r0
 8007e48:	61f0      	str	r0, [r6, #28]
 8007e4a:	b928      	cbnz	r0, 8007e58 <__pow5mult+0x40>
 8007e4c:	4b1d      	ldr	r3, [pc, #116]	; (8007ec4 <__pow5mult+0xac>)
 8007e4e:	481e      	ldr	r0, [pc, #120]	; (8007ec8 <__pow5mult+0xb0>)
 8007e50:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007e54:	f7fe ff46 	bl	8006ce4 <__assert_func>
 8007e58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e5c:	6004      	str	r4, [r0, #0]
 8007e5e:	60c4      	str	r4, [r0, #12]
 8007e60:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007e64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e68:	b94c      	cbnz	r4, 8007e7e <__pow5mult+0x66>
 8007e6a:	f240 2171 	movw	r1, #625	; 0x271
 8007e6e:	4630      	mov	r0, r6
 8007e70:	f7ff ff12 	bl	8007c98 <__i2b>
 8007e74:	2300      	movs	r3, #0
 8007e76:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	6003      	str	r3, [r0, #0]
 8007e7e:	f04f 0900 	mov.w	r9, #0
 8007e82:	07eb      	lsls	r3, r5, #31
 8007e84:	d50a      	bpl.n	8007e9c <__pow5mult+0x84>
 8007e86:	4639      	mov	r1, r7
 8007e88:	4622      	mov	r2, r4
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	f7ff ff1a 	bl	8007cc4 <__multiply>
 8007e90:	4639      	mov	r1, r7
 8007e92:	4680      	mov	r8, r0
 8007e94:	4630      	mov	r0, r6
 8007e96:	f7ff fe49 	bl	8007b2c <_Bfree>
 8007e9a:	4647      	mov	r7, r8
 8007e9c:	106d      	asrs	r5, r5, #1
 8007e9e:	d00b      	beq.n	8007eb8 <__pow5mult+0xa0>
 8007ea0:	6820      	ldr	r0, [r4, #0]
 8007ea2:	b938      	cbnz	r0, 8007eb4 <__pow5mult+0x9c>
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	f7ff ff0b 	bl	8007cc4 <__multiply>
 8007eae:	6020      	str	r0, [r4, #0]
 8007eb0:	f8c0 9000 	str.w	r9, [r0]
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	e7e4      	b.n	8007e82 <__pow5mult+0x6a>
 8007eb8:	4638      	mov	r0, r7
 8007eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ebe:	bf00      	nop
 8007ec0:	0800a4e8 	.word	0x0800a4e8
 8007ec4:	0800a279 	.word	0x0800a279
 8007ec8:	0800a39c 	.word	0x0800a39c

08007ecc <__lshift>:
 8007ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed0:	460c      	mov	r4, r1
 8007ed2:	6849      	ldr	r1, [r1, #4]
 8007ed4:	6923      	ldr	r3, [r4, #16]
 8007ed6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007eda:	68a3      	ldr	r3, [r4, #8]
 8007edc:	4607      	mov	r7, r0
 8007ede:	4691      	mov	r9, r2
 8007ee0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ee4:	f108 0601 	add.w	r6, r8, #1
 8007ee8:	42b3      	cmp	r3, r6
 8007eea:	db0b      	blt.n	8007f04 <__lshift+0x38>
 8007eec:	4638      	mov	r0, r7
 8007eee:	f7ff fddd 	bl	8007aac <_Balloc>
 8007ef2:	4605      	mov	r5, r0
 8007ef4:	b948      	cbnz	r0, 8007f0a <__lshift+0x3e>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	4b28      	ldr	r3, [pc, #160]	; (8007f9c <__lshift+0xd0>)
 8007efa:	4829      	ldr	r0, [pc, #164]	; (8007fa0 <__lshift+0xd4>)
 8007efc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007f00:	f7fe fef0 	bl	8006ce4 <__assert_func>
 8007f04:	3101      	adds	r1, #1
 8007f06:	005b      	lsls	r3, r3, #1
 8007f08:	e7ee      	b.n	8007ee8 <__lshift+0x1c>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f100 0114 	add.w	r1, r0, #20
 8007f10:	f100 0210 	add.w	r2, r0, #16
 8007f14:	4618      	mov	r0, r3
 8007f16:	4553      	cmp	r3, sl
 8007f18:	db33      	blt.n	8007f82 <__lshift+0xb6>
 8007f1a:	6920      	ldr	r0, [r4, #16]
 8007f1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f20:	f104 0314 	add.w	r3, r4, #20
 8007f24:	f019 091f 	ands.w	r9, r9, #31
 8007f28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f30:	d02b      	beq.n	8007f8a <__lshift+0xbe>
 8007f32:	f1c9 0e20 	rsb	lr, r9, #32
 8007f36:	468a      	mov	sl, r1
 8007f38:	2200      	movs	r2, #0
 8007f3a:	6818      	ldr	r0, [r3, #0]
 8007f3c:	fa00 f009 	lsl.w	r0, r0, r9
 8007f40:	4310      	orrs	r0, r2
 8007f42:	f84a 0b04 	str.w	r0, [sl], #4
 8007f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f4a:	459c      	cmp	ip, r3
 8007f4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f50:	d8f3      	bhi.n	8007f3a <__lshift+0x6e>
 8007f52:	ebac 0304 	sub.w	r3, ip, r4
 8007f56:	3b15      	subs	r3, #21
 8007f58:	f023 0303 	bic.w	r3, r3, #3
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	f104 0015 	add.w	r0, r4, #21
 8007f62:	4584      	cmp	ip, r0
 8007f64:	bf38      	it	cc
 8007f66:	2304      	movcc	r3, #4
 8007f68:	50ca      	str	r2, [r1, r3]
 8007f6a:	b10a      	cbz	r2, 8007f70 <__lshift+0xa4>
 8007f6c:	f108 0602 	add.w	r6, r8, #2
 8007f70:	3e01      	subs	r6, #1
 8007f72:	4638      	mov	r0, r7
 8007f74:	612e      	str	r6, [r5, #16]
 8007f76:	4621      	mov	r1, r4
 8007f78:	f7ff fdd8 	bl	8007b2c <_Bfree>
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f82:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f86:	3301      	adds	r3, #1
 8007f88:	e7c5      	b.n	8007f16 <__lshift+0x4a>
 8007f8a:	3904      	subs	r1, #4
 8007f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f90:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f94:	459c      	cmp	ip, r3
 8007f96:	d8f9      	bhi.n	8007f8c <__lshift+0xc0>
 8007f98:	e7ea      	b.n	8007f70 <__lshift+0xa4>
 8007f9a:	bf00      	nop
 8007f9c:	0800a38b 	.word	0x0800a38b
 8007fa0:	0800a39c 	.word	0x0800a39c

08007fa4 <__mcmp>:
 8007fa4:	b530      	push	{r4, r5, lr}
 8007fa6:	6902      	ldr	r2, [r0, #16]
 8007fa8:	690c      	ldr	r4, [r1, #16]
 8007faa:	1b12      	subs	r2, r2, r4
 8007fac:	d10e      	bne.n	8007fcc <__mcmp+0x28>
 8007fae:	f100 0314 	add.w	r3, r0, #20
 8007fb2:	3114      	adds	r1, #20
 8007fb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007fb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007fbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007fc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007fc4:	42a5      	cmp	r5, r4
 8007fc6:	d003      	beq.n	8007fd0 <__mcmp+0x2c>
 8007fc8:	d305      	bcc.n	8007fd6 <__mcmp+0x32>
 8007fca:	2201      	movs	r2, #1
 8007fcc:	4610      	mov	r0, r2
 8007fce:	bd30      	pop	{r4, r5, pc}
 8007fd0:	4283      	cmp	r3, r0
 8007fd2:	d3f3      	bcc.n	8007fbc <__mcmp+0x18>
 8007fd4:	e7fa      	b.n	8007fcc <__mcmp+0x28>
 8007fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007fda:	e7f7      	b.n	8007fcc <__mcmp+0x28>

08007fdc <__mdiff>:
 8007fdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe0:	460c      	mov	r4, r1
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	4690      	mov	r8, r2
 8007fea:	f7ff ffdb 	bl	8007fa4 <__mcmp>
 8007fee:	1e05      	subs	r5, r0, #0
 8007ff0:	d110      	bne.n	8008014 <__mdiff+0x38>
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	f7ff fd59 	bl	8007aac <_Balloc>
 8007ffa:	b930      	cbnz	r0, 800800a <__mdiff+0x2e>
 8007ffc:	4b3a      	ldr	r3, [pc, #232]	; (80080e8 <__mdiff+0x10c>)
 8007ffe:	4602      	mov	r2, r0
 8008000:	f240 2137 	movw	r1, #567	; 0x237
 8008004:	4839      	ldr	r0, [pc, #228]	; (80080ec <__mdiff+0x110>)
 8008006:	f7fe fe6d 	bl	8006ce4 <__assert_func>
 800800a:	2301      	movs	r3, #1
 800800c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008010:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008014:	bfa4      	itt	ge
 8008016:	4643      	movge	r3, r8
 8008018:	46a0      	movge	r8, r4
 800801a:	4630      	mov	r0, r6
 800801c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008020:	bfa6      	itte	ge
 8008022:	461c      	movge	r4, r3
 8008024:	2500      	movge	r5, #0
 8008026:	2501      	movlt	r5, #1
 8008028:	f7ff fd40 	bl	8007aac <_Balloc>
 800802c:	b920      	cbnz	r0, 8008038 <__mdiff+0x5c>
 800802e:	4b2e      	ldr	r3, [pc, #184]	; (80080e8 <__mdiff+0x10c>)
 8008030:	4602      	mov	r2, r0
 8008032:	f240 2145 	movw	r1, #581	; 0x245
 8008036:	e7e5      	b.n	8008004 <__mdiff+0x28>
 8008038:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800803c:	6926      	ldr	r6, [r4, #16]
 800803e:	60c5      	str	r5, [r0, #12]
 8008040:	f104 0914 	add.w	r9, r4, #20
 8008044:	f108 0514 	add.w	r5, r8, #20
 8008048:	f100 0e14 	add.w	lr, r0, #20
 800804c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008050:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008054:	f108 0210 	add.w	r2, r8, #16
 8008058:	46f2      	mov	sl, lr
 800805a:	2100      	movs	r1, #0
 800805c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008060:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008064:	fa11 f88b 	uxtah	r8, r1, fp
 8008068:	b299      	uxth	r1, r3
 800806a:	0c1b      	lsrs	r3, r3, #16
 800806c:	eba8 0801 	sub.w	r8, r8, r1
 8008070:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008074:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008078:	fa1f f888 	uxth.w	r8, r8
 800807c:	1419      	asrs	r1, r3, #16
 800807e:	454e      	cmp	r6, r9
 8008080:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008084:	f84a 3b04 	str.w	r3, [sl], #4
 8008088:	d8e8      	bhi.n	800805c <__mdiff+0x80>
 800808a:	1b33      	subs	r3, r6, r4
 800808c:	3b15      	subs	r3, #21
 800808e:	f023 0303 	bic.w	r3, r3, #3
 8008092:	3304      	adds	r3, #4
 8008094:	3415      	adds	r4, #21
 8008096:	42a6      	cmp	r6, r4
 8008098:	bf38      	it	cc
 800809a:	2304      	movcc	r3, #4
 800809c:	441d      	add	r5, r3
 800809e:	4473      	add	r3, lr
 80080a0:	469e      	mov	lr, r3
 80080a2:	462e      	mov	r6, r5
 80080a4:	4566      	cmp	r6, ip
 80080a6:	d30e      	bcc.n	80080c6 <__mdiff+0xea>
 80080a8:	f10c 0203 	add.w	r2, ip, #3
 80080ac:	1b52      	subs	r2, r2, r5
 80080ae:	f022 0203 	bic.w	r2, r2, #3
 80080b2:	3d03      	subs	r5, #3
 80080b4:	45ac      	cmp	ip, r5
 80080b6:	bf38      	it	cc
 80080b8:	2200      	movcc	r2, #0
 80080ba:	4413      	add	r3, r2
 80080bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80080c0:	b17a      	cbz	r2, 80080e2 <__mdiff+0x106>
 80080c2:	6107      	str	r7, [r0, #16]
 80080c4:	e7a4      	b.n	8008010 <__mdiff+0x34>
 80080c6:	f856 8b04 	ldr.w	r8, [r6], #4
 80080ca:	fa11 f288 	uxtah	r2, r1, r8
 80080ce:	1414      	asrs	r4, r2, #16
 80080d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80080d4:	b292      	uxth	r2, r2
 80080d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80080da:	f84e 2b04 	str.w	r2, [lr], #4
 80080de:	1421      	asrs	r1, r4, #16
 80080e0:	e7e0      	b.n	80080a4 <__mdiff+0xc8>
 80080e2:	3f01      	subs	r7, #1
 80080e4:	e7ea      	b.n	80080bc <__mdiff+0xe0>
 80080e6:	bf00      	nop
 80080e8:	0800a38b 	.word	0x0800a38b
 80080ec:	0800a39c 	.word	0x0800a39c

080080f0 <__d2b>:
 80080f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080f4:	460f      	mov	r7, r1
 80080f6:	2101      	movs	r1, #1
 80080f8:	ec59 8b10 	vmov	r8, r9, d0
 80080fc:	4616      	mov	r6, r2
 80080fe:	f7ff fcd5 	bl	8007aac <_Balloc>
 8008102:	4604      	mov	r4, r0
 8008104:	b930      	cbnz	r0, 8008114 <__d2b+0x24>
 8008106:	4602      	mov	r2, r0
 8008108:	4b24      	ldr	r3, [pc, #144]	; (800819c <__d2b+0xac>)
 800810a:	4825      	ldr	r0, [pc, #148]	; (80081a0 <__d2b+0xb0>)
 800810c:	f240 310f 	movw	r1, #783	; 0x30f
 8008110:	f7fe fde8 	bl	8006ce4 <__assert_func>
 8008114:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008118:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800811c:	bb2d      	cbnz	r5, 800816a <__d2b+0x7a>
 800811e:	9301      	str	r3, [sp, #4]
 8008120:	f1b8 0300 	subs.w	r3, r8, #0
 8008124:	d026      	beq.n	8008174 <__d2b+0x84>
 8008126:	4668      	mov	r0, sp
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	f7ff fd87 	bl	8007c3c <__lo0bits>
 800812e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008132:	b1e8      	cbz	r0, 8008170 <__d2b+0x80>
 8008134:	f1c0 0320 	rsb	r3, r0, #32
 8008138:	fa02 f303 	lsl.w	r3, r2, r3
 800813c:	430b      	orrs	r3, r1
 800813e:	40c2      	lsrs	r2, r0
 8008140:	6163      	str	r3, [r4, #20]
 8008142:	9201      	str	r2, [sp, #4]
 8008144:	9b01      	ldr	r3, [sp, #4]
 8008146:	61a3      	str	r3, [r4, #24]
 8008148:	2b00      	cmp	r3, #0
 800814a:	bf14      	ite	ne
 800814c:	2202      	movne	r2, #2
 800814e:	2201      	moveq	r2, #1
 8008150:	6122      	str	r2, [r4, #16]
 8008152:	b1bd      	cbz	r5, 8008184 <__d2b+0x94>
 8008154:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008158:	4405      	add	r5, r0
 800815a:	603d      	str	r5, [r7, #0]
 800815c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008160:	6030      	str	r0, [r6, #0]
 8008162:	4620      	mov	r0, r4
 8008164:	b003      	add	sp, #12
 8008166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800816a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800816e:	e7d6      	b.n	800811e <__d2b+0x2e>
 8008170:	6161      	str	r1, [r4, #20]
 8008172:	e7e7      	b.n	8008144 <__d2b+0x54>
 8008174:	a801      	add	r0, sp, #4
 8008176:	f7ff fd61 	bl	8007c3c <__lo0bits>
 800817a:	9b01      	ldr	r3, [sp, #4]
 800817c:	6163      	str	r3, [r4, #20]
 800817e:	3020      	adds	r0, #32
 8008180:	2201      	movs	r2, #1
 8008182:	e7e5      	b.n	8008150 <__d2b+0x60>
 8008184:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008188:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800818c:	6038      	str	r0, [r7, #0]
 800818e:	6918      	ldr	r0, [r3, #16]
 8008190:	f7ff fd34 	bl	8007bfc <__hi0bits>
 8008194:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008198:	e7e2      	b.n	8008160 <__d2b+0x70>
 800819a:	bf00      	nop
 800819c:	0800a38b 	.word	0x0800a38b
 80081a0:	0800a39c 	.word	0x0800a39c

080081a4 <__ssputs_r>:
 80081a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a8:	688e      	ldr	r6, [r1, #8]
 80081aa:	461f      	mov	r7, r3
 80081ac:	42be      	cmp	r6, r7
 80081ae:	680b      	ldr	r3, [r1, #0]
 80081b0:	4682      	mov	sl, r0
 80081b2:	460c      	mov	r4, r1
 80081b4:	4690      	mov	r8, r2
 80081b6:	d82c      	bhi.n	8008212 <__ssputs_r+0x6e>
 80081b8:	898a      	ldrh	r2, [r1, #12]
 80081ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081be:	d026      	beq.n	800820e <__ssputs_r+0x6a>
 80081c0:	6965      	ldr	r5, [r4, #20]
 80081c2:	6909      	ldr	r1, [r1, #16]
 80081c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081c8:	eba3 0901 	sub.w	r9, r3, r1
 80081cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081d0:	1c7b      	adds	r3, r7, #1
 80081d2:	444b      	add	r3, r9
 80081d4:	106d      	asrs	r5, r5, #1
 80081d6:	429d      	cmp	r5, r3
 80081d8:	bf38      	it	cc
 80081da:	461d      	movcc	r5, r3
 80081dc:	0553      	lsls	r3, r2, #21
 80081de:	d527      	bpl.n	8008230 <__ssputs_r+0x8c>
 80081e0:	4629      	mov	r1, r5
 80081e2:	f7fd fde9 	bl	8005db8 <_malloc_r>
 80081e6:	4606      	mov	r6, r0
 80081e8:	b360      	cbz	r0, 8008244 <__ssputs_r+0xa0>
 80081ea:	6921      	ldr	r1, [r4, #16]
 80081ec:	464a      	mov	r2, r9
 80081ee:	f000 fa0b 	bl	8008608 <memcpy>
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081fc:	81a3      	strh	r3, [r4, #12]
 80081fe:	6126      	str	r6, [r4, #16]
 8008200:	6165      	str	r5, [r4, #20]
 8008202:	444e      	add	r6, r9
 8008204:	eba5 0509 	sub.w	r5, r5, r9
 8008208:	6026      	str	r6, [r4, #0]
 800820a:	60a5      	str	r5, [r4, #8]
 800820c:	463e      	mov	r6, r7
 800820e:	42be      	cmp	r6, r7
 8008210:	d900      	bls.n	8008214 <__ssputs_r+0x70>
 8008212:	463e      	mov	r6, r7
 8008214:	6820      	ldr	r0, [r4, #0]
 8008216:	4632      	mov	r2, r6
 8008218:	4641      	mov	r1, r8
 800821a:	f000 f9db 	bl	80085d4 <memmove>
 800821e:	68a3      	ldr	r3, [r4, #8]
 8008220:	1b9b      	subs	r3, r3, r6
 8008222:	60a3      	str	r3, [r4, #8]
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	4433      	add	r3, r6
 8008228:	6023      	str	r3, [r4, #0]
 800822a:	2000      	movs	r0, #0
 800822c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008230:	462a      	mov	r2, r5
 8008232:	f000 fa26 	bl	8008682 <_realloc_r>
 8008236:	4606      	mov	r6, r0
 8008238:	2800      	cmp	r0, #0
 800823a:	d1e0      	bne.n	80081fe <__ssputs_r+0x5a>
 800823c:	6921      	ldr	r1, [r4, #16]
 800823e:	4650      	mov	r0, sl
 8008240:	f7ff fbe8 	bl	8007a14 <_free_r>
 8008244:	230c      	movs	r3, #12
 8008246:	f8ca 3000 	str.w	r3, [sl]
 800824a:	89a3      	ldrh	r3, [r4, #12]
 800824c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008250:	81a3      	strh	r3, [r4, #12]
 8008252:	f04f 30ff 	mov.w	r0, #4294967295
 8008256:	e7e9      	b.n	800822c <__ssputs_r+0x88>

08008258 <_svfiprintf_r>:
 8008258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825c:	4698      	mov	r8, r3
 800825e:	898b      	ldrh	r3, [r1, #12]
 8008260:	061b      	lsls	r3, r3, #24
 8008262:	b09d      	sub	sp, #116	; 0x74
 8008264:	4607      	mov	r7, r0
 8008266:	460d      	mov	r5, r1
 8008268:	4614      	mov	r4, r2
 800826a:	d50e      	bpl.n	800828a <_svfiprintf_r+0x32>
 800826c:	690b      	ldr	r3, [r1, #16]
 800826e:	b963      	cbnz	r3, 800828a <_svfiprintf_r+0x32>
 8008270:	2140      	movs	r1, #64	; 0x40
 8008272:	f7fd fda1 	bl	8005db8 <_malloc_r>
 8008276:	6028      	str	r0, [r5, #0]
 8008278:	6128      	str	r0, [r5, #16]
 800827a:	b920      	cbnz	r0, 8008286 <_svfiprintf_r+0x2e>
 800827c:	230c      	movs	r3, #12
 800827e:	603b      	str	r3, [r7, #0]
 8008280:	f04f 30ff 	mov.w	r0, #4294967295
 8008284:	e0d0      	b.n	8008428 <_svfiprintf_r+0x1d0>
 8008286:	2340      	movs	r3, #64	; 0x40
 8008288:	616b      	str	r3, [r5, #20]
 800828a:	2300      	movs	r3, #0
 800828c:	9309      	str	r3, [sp, #36]	; 0x24
 800828e:	2320      	movs	r3, #32
 8008290:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008294:	f8cd 800c 	str.w	r8, [sp, #12]
 8008298:	2330      	movs	r3, #48	; 0x30
 800829a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008440 <_svfiprintf_r+0x1e8>
 800829e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082a2:	f04f 0901 	mov.w	r9, #1
 80082a6:	4623      	mov	r3, r4
 80082a8:	469a      	mov	sl, r3
 80082aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082ae:	b10a      	cbz	r2, 80082b4 <_svfiprintf_r+0x5c>
 80082b0:	2a25      	cmp	r2, #37	; 0x25
 80082b2:	d1f9      	bne.n	80082a8 <_svfiprintf_r+0x50>
 80082b4:	ebba 0b04 	subs.w	fp, sl, r4
 80082b8:	d00b      	beq.n	80082d2 <_svfiprintf_r+0x7a>
 80082ba:	465b      	mov	r3, fp
 80082bc:	4622      	mov	r2, r4
 80082be:	4629      	mov	r1, r5
 80082c0:	4638      	mov	r0, r7
 80082c2:	f7ff ff6f 	bl	80081a4 <__ssputs_r>
 80082c6:	3001      	adds	r0, #1
 80082c8:	f000 80a9 	beq.w	800841e <_svfiprintf_r+0x1c6>
 80082cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082ce:	445a      	add	r2, fp
 80082d0:	9209      	str	r2, [sp, #36]	; 0x24
 80082d2:	f89a 3000 	ldrb.w	r3, [sl]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f000 80a1 	beq.w	800841e <_svfiprintf_r+0x1c6>
 80082dc:	2300      	movs	r3, #0
 80082de:	f04f 32ff 	mov.w	r2, #4294967295
 80082e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082e6:	f10a 0a01 	add.w	sl, sl, #1
 80082ea:	9304      	str	r3, [sp, #16]
 80082ec:	9307      	str	r3, [sp, #28]
 80082ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082f2:	931a      	str	r3, [sp, #104]	; 0x68
 80082f4:	4654      	mov	r4, sl
 80082f6:	2205      	movs	r2, #5
 80082f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082fc:	4850      	ldr	r0, [pc, #320]	; (8008440 <_svfiprintf_r+0x1e8>)
 80082fe:	f7f7 ff6f 	bl	80001e0 <memchr>
 8008302:	9a04      	ldr	r2, [sp, #16]
 8008304:	b9d8      	cbnz	r0, 800833e <_svfiprintf_r+0xe6>
 8008306:	06d0      	lsls	r0, r2, #27
 8008308:	bf44      	itt	mi
 800830a:	2320      	movmi	r3, #32
 800830c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008310:	0711      	lsls	r1, r2, #28
 8008312:	bf44      	itt	mi
 8008314:	232b      	movmi	r3, #43	; 0x2b
 8008316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800831a:	f89a 3000 	ldrb.w	r3, [sl]
 800831e:	2b2a      	cmp	r3, #42	; 0x2a
 8008320:	d015      	beq.n	800834e <_svfiprintf_r+0xf6>
 8008322:	9a07      	ldr	r2, [sp, #28]
 8008324:	4654      	mov	r4, sl
 8008326:	2000      	movs	r0, #0
 8008328:	f04f 0c0a 	mov.w	ip, #10
 800832c:	4621      	mov	r1, r4
 800832e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008332:	3b30      	subs	r3, #48	; 0x30
 8008334:	2b09      	cmp	r3, #9
 8008336:	d94d      	bls.n	80083d4 <_svfiprintf_r+0x17c>
 8008338:	b1b0      	cbz	r0, 8008368 <_svfiprintf_r+0x110>
 800833a:	9207      	str	r2, [sp, #28]
 800833c:	e014      	b.n	8008368 <_svfiprintf_r+0x110>
 800833e:	eba0 0308 	sub.w	r3, r0, r8
 8008342:	fa09 f303 	lsl.w	r3, r9, r3
 8008346:	4313      	orrs	r3, r2
 8008348:	9304      	str	r3, [sp, #16]
 800834a:	46a2      	mov	sl, r4
 800834c:	e7d2      	b.n	80082f4 <_svfiprintf_r+0x9c>
 800834e:	9b03      	ldr	r3, [sp, #12]
 8008350:	1d19      	adds	r1, r3, #4
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	9103      	str	r1, [sp, #12]
 8008356:	2b00      	cmp	r3, #0
 8008358:	bfbb      	ittet	lt
 800835a:	425b      	neglt	r3, r3
 800835c:	f042 0202 	orrlt.w	r2, r2, #2
 8008360:	9307      	strge	r3, [sp, #28]
 8008362:	9307      	strlt	r3, [sp, #28]
 8008364:	bfb8      	it	lt
 8008366:	9204      	strlt	r2, [sp, #16]
 8008368:	7823      	ldrb	r3, [r4, #0]
 800836a:	2b2e      	cmp	r3, #46	; 0x2e
 800836c:	d10c      	bne.n	8008388 <_svfiprintf_r+0x130>
 800836e:	7863      	ldrb	r3, [r4, #1]
 8008370:	2b2a      	cmp	r3, #42	; 0x2a
 8008372:	d134      	bne.n	80083de <_svfiprintf_r+0x186>
 8008374:	9b03      	ldr	r3, [sp, #12]
 8008376:	1d1a      	adds	r2, r3, #4
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	9203      	str	r2, [sp, #12]
 800837c:	2b00      	cmp	r3, #0
 800837e:	bfb8      	it	lt
 8008380:	f04f 33ff 	movlt.w	r3, #4294967295
 8008384:	3402      	adds	r4, #2
 8008386:	9305      	str	r3, [sp, #20]
 8008388:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008450 <_svfiprintf_r+0x1f8>
 800838c:	7821      	ldrb	r1, [r4, #0]
 800838e:	2203      	movs	r2, #3
 8008390:	4650      	mov	r0, sl
 8008392:	f7f7 ff25 	bl	80001e0 <memchr>
 8008396:	b138      	cbz	r0, 80083a8 <_svfiprintf_r+0x150>
 8008398:	9b04      	ldr	r3, [sp, #16]
 800839a:	eba0 000a 	sub.w	r0, r0, sl
 800839e:	2240      	movs	r2, #64	; 0x40
 80083a0:	4082      	lsls	r2, r0
 80083a2:	4313      	orrs	r3, r2
 80083a4:	3401      	adds	r4, #1
 80083a6:	9304      	str	r3, [sp, #16]
 80083a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ac:	4825      	ldr	r0, [pc, #148]	; (8008444 <_svfiprintf_r+0x1ec>)
 80083ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083b2:	2206      	movs	r2, #6
 80083b4:	f7f7 ff14 	bl	80001e0 <memchr>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	d038      	beq.n	800842e <_svfiprintf_r+0x1d6>
 80083bc:	4b22      	ldr	r3, [pc, #136]	; (8008448 <_svfiprintf_r+0x1f0>)
 80083be:	bb1b      	cbnz	r3, 8008408 <_svfiprintf_r+0x1b0>
 80083c0:	9b03      	ldr	r3, [sp, #12]
 80083c2:	3307      	adds	r3, #7
 80083c4:	f023 0307 	bic.w	r3, r3, #7
 80083c8:	3308      	adds	r3, #8
 80083ca:	9303      	str	r3, [sp, #12]
 80083cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ce:	4433      	add	r3, r6
 80083d0:	9309      	str	r3, [sp, #36]	; 0x24
 80083d2:	e768      	b.n	80082a6 <_svfiprintf_r+0x4e>
 80083d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80083d8:	460c      	mov	r4, r1
 80083da:	2001      	movs	r0, #1
 80083dc:	e7a6      	b.n	800832c <_svfiprintf_r+0xd4>
 80083de:	2300      	movs	r3, #0
 80083e0:	3401      	adds	r4, #1
 80083e2:	9305      	str	r3, [sp, #20]
 80083e4:	4619      	mov	r1, r3
 80083e6:	f04f 0c0a 	mov.w	ip, #10
 80083ea:	4620      	mov	r0, r4
 80083ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083f0:	3a30      	subs	r2, #48	; 0x30
 80083f2:	2a09      	cmp	r2, #9
 80083f4:	d903      	bls.n	80083fe <_svfiprintf_r+0x1a6>
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d0c6      	beq.n	8008388 <_svfiprintf_r+0x130>
 80083fa:	9105      	str	r1, [sp, #20]
 80083fc:	e7c4      	b.n	8008388 <_svfiprintf_r+0x130>
 80083fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008402:	4604      	mov	r4, r0
 8008404:	2301      	movs	r3, #1
 8008406:	e7f0      	b.n	80083ea <_svfiprintf_r+0x192>
 8008408:	ab03      	add	r3, sp, #12
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	462a      	mov	r2, r5
 800840e:	4b0f      	ldr	r3, [pc, #60]	; (800844c <_svfiprintf_r+0x1f4>)
 8008410:	a904      	add	r1, sp, #16
 8008412:	4638      	mov	r0, r7
 8008414:	f7fd fe88 	bl	8006128 <_printf_float>
 8008418:	1c42      	adds	r2, r0, #1
 800841a:	4606      	mov	r6, r0
 800841c:	d1d6      	bne.n	80083cc <_svfiprintf_r+0x174>
 800841e:	89ab      	ldrh	r3, [r5, #12]
 8008420:	065b      	lsls	r3, r3, #25
 8008422:	f53f af2d 	bmi.w	8008280 <_svfiprintf_r+0x28>
 8008426:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008428:	b01d      	add	sp, #116	; 0x74
 800842a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842e:	ab03      	add	r3, sp, #12
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	462a      	mov	r2, r5
 8008434:	4b05      	ldr	r3, [pc, #20]	; (800844c <_svfiprintf_r+0x1f4>)
 8008436:	a904      	add	r1, sp, #16
 8008438:	4638      	mov	r0, r7
 800843a:	f7fe f919 	bl	8006670 <_printf_i>
 800843e:	e7eb      	b.n	8008418 <_svfiprintf_r+0x1c0>
 8008440:	0800a4f4 	.word	0x0800a4f4
 8008444:	0800a4fe 	.word	0x0800a4fe
 8008448:	08006129 	.word	0x08006129
 800844c:	080081a5 	.word	0x080081a5
 8008450:	0800a4fa 	.word	0x0800a4fa

08008454 <__sflush_r>:
 8008454:	898a      	ldrh	r2, [r1, #12]
 8008456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800845a:	4605      	mov	r5, r0
 800845c:	0710      	lsls	r0, r2, #28
 800845e:	460c      	mov	r4, r1
 8008460:	d458      	bmi.n	8008514 <__sflush_r+0xc0>
 8008462:	684b      	ldr	r3, [r1, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	dc05      	bgt.n	8008474 <__sflush_r+0x20>
 8008468:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800846a:	2b00      	cmp	r3, #0
 800846c:	dc02      	bgt.n	8008474 <__sflush_r+0x20>
 800846e:	2000      	movs	r0, #0
 8008470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008476:	2e00      	cmp	r6, #0
 8008478:	d0f9      	beq.n	800846e <__sflush_r+0x1a>
 800847a:	2300      	movs	r3, #0
 800847c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008480:	682f      	ldr	r7, [r5, #0]
 8008482:	6a21      	ldr	r1, [r4, #32]
 8008484:	602b      	str	r3, [r5, #0]
 8008486:	d032      	beq.n	80084ee <__sflush_r+0x9a>
 8008488:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800848a:	89a3      	ldrh	r3, [r4, #12]
 800848c:	075a      	lsls	r2, r3, #29
 800848e:	d505      	bpl.n	800849c <__sflush_r+0x48>
 8008490:	6863      	ldr	r3, [r4, #4]
 8008492:	1ac0      	subs	r0, r0, r3
 8008494:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008496:	b10b      	cbz	r3, 800849c <__sflush_r+0x48>
 8008498:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800849a:	1ac0      	subs	r0, r0, r3
 800849c:	2300      	movs	r3, #0
 800849e:	4602      	mov	r2, r0
 80084a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084a2:	6a21      	ldr	r1, [r4, #32]
 80084a4:	4628      	mov	r0, r5
 80084a6:	47b0      	blx	r6
 80084a8:	1c43      	adds	r3, r0, #1
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	d106      	bne.n	80084bc <__sflush_r+0x68>
 80084ae:	6829      	ldr	r1, [r5, #0]
 80084b0:	291d      	cmp	r1, #29
 80084b2:	d82b      	bhi.n	800850c <__sflush_r+0xb8>
 80084b4:	4a29      	ldr	r2, [pc, #164]	; (800855c <__sflush_r+0x108>)
 80084b6:	410a      	asrs	r2, r1
 80084b8:	07d6      	lsls	r6, r2, #31
 80084ba:	d427      	bmi.n	800850c <__sflush_r+0xb8>
 80084bc:	2200      	movs	r2, #0
 80084be:	6062      	str	r2, [r4, #4]
 80084c0:	04d9      	lsls	r1, r3, #19
 80084c2:	6922      	ldr	r2, [r4, #16]
 80084c4:	6022      	str	r2, [r4, #0]
 80084c6:	d504      	bpl.n	80084d2 <__sflush_r+0x7e>
 80084c8:	1c42      	adds	r2, r0, #1
 80084ca:	d101      	bne.n	80084d0 <__sflush_r+0x7c>
 80084cc:	682b      	ldr	r3, [r5, #0]
 80084ce:	b903      	cbnz	r3, 80084d2 <__sflush_r+0x7e>
 80084d0:	6560      	str	r0, [r4, #84]	; 0x54
 80084d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084d4:	602f      	str	r7, [r5, #0]
 80084d6:	2900      	cmp	r1, #0
 80084d8:	d0c9      	beq.n	800846e <__sflush_r+0x1a>
 80084da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084de:	4299      	cmp	r1, r3
 80084e0:	d002      	beq.n	80084e8 <__sflush_r+0x94>
 80084e2:	4628      	mov	r0, r5
 80084e4:	f7ff fa96 	bl	8007a14 <_free_r>
 80084e8:	2000      	movs	r0, #0
 80084ea:	6360      	str	r0, [r4, #52]	; 0x34
 80084ec:	e7c0      	b.n	8008470 <__sflush_r+0x1c>
 80084ee:	2301      	movs	r3, #1
 80084f0:	4628      	mov	r0, r5
 80084f2:	47b0      	blx	r6
 80084f4:	1c41      	adds	r1, r0, #1
 80084f6:	d1c8      	bne.n	800848a <__sflush_r+0x36>
 80084f8:	682b      	ldr	r3, [r5, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d0c5      	beq.n	800848a <__sflush_r+0x36>
 80084fe:	2b1d      	cmp	r3, #29
 8008500:	d001      	beq.n	8008506 <__sflush_r+0xb2>
 8008502:	2b16      	cmp	r3, #22
 8008504:	d101      	bne.n	800850a <__sflush_r+0xb6>
 8008506:	602f      	str	r7, [r5, #0]
 8008508:	e7b1      	b.n	800846e <__sflush_r+0x1a>
 800850a:	89a3      	ldrh	r3, [r4, #12]
 800850c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008510:	81a3      	strh	r3, [r4, #12]
 8008512:	e7ad      	b.n	8008470 <__sflush_r+0x1c>
 8008514:	690f      	ldr	r7, [r1, #16]
 8008516:	2f00      	cmp	r7, #0
 8008518:	d0a9      	beq.n	800846e <__sflush_r+0x1a>
 800851a:	0793      	lsls	r3, r2, #30
 800851c:	680e      	ldr	r6, [r1, #0]
 800851e:	bf08      	it	eq
 8008520:	694b      	ldreq	r3, [r1, #20]
 8008522:	600f      	str	r7, [r1, #0]
 8008524:	bf18      	it	ne
 8008526:	2300      	movne	r3, #0
 8008528:	eba6 0807 	sub.w	r8, r6, r7
 800852c:	608b      	str	r3, [r1, #8]
 800852e:	f1b8 0f00 	cmp.w	r8, #0
 8008532:	dd9c      	ble.n	800846e <__sflush_r+0x1a>
 8008534:	6a21      	ldr	r1, [r4, #32]
 8008536:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008538:	4643      	mov	r3, r8
 800853a:	463a      	mov	r2, r7
 800853c:	4628      	mov	r0, r5
 800853e:	47b0      	blx	r6
 8008540:	2800      	cmp	r0, #0
 8008542:	dc06      	bgt.n	8008552 <__sflush_r+0xfe>
 8008544:	89a3      	ldrh	r3, [r4, #12]
 8008546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800854a:	81a3      	strh	r3, [r4, #12]
 800854c:	f04f 30ff 	mov.w	r0, #4294967295
 8008550:	e78e      	b.n	8008470 <__sflush_r+0x1c>
 8008552:	4407      	add	r7, r0
 8008554:	eba8 0800 	sub.w	r8, r8, r0
 8008558:	e7e9      	b.n	800852e <__sflush_r+0xda>
 800855a:	bf00      	nop
 800855c:	dfbffffe 	.word	0xdfbffffe

08008560 <_fflush_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	690b      	ldr	r3, [r1, #16]
 8008564:	4605      	mov	r5, r0
 8008566:	460c      	mov	r4, r1
 8008568:	b913      	cbnz	r3, 8008570 <_fflush_r+0x10>
 800856a:	2500      	movs	r5, #0
 800856c:	4628      	mov	r0, r5
 800856e:	bd38      	pop	{r3, r4, r5, pc}
 8008570:	b118      	cbz	r0, 800857a <_fflush_r+0x1a>
 8008572:	6a03      	ldr	r3, [r0, #32]
 8008574:	b90b      	cbnz	r3, 800857a <_fflush_r+0x1a>
 8008576:	f7fe fa17 	bl	80069a8 <__sinit>
 800857a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d0f3      	beq.n	800856a <_fflush_r+0xa>
 8008582:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008584:	07d0      	lsls	r0, r2, #31
 8008586:	d404      	bmi.n	8008592 <_fflush_r+0x32>
 8008588:	0599      	lsls	r1, r3, #22
 800858a:	d402      	bmi.n	8008592 <_fflush_r+0x32>
 800858c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800858e:	f7fe fb9f 	bl	8006cd0 <__retarget_lock_acquire_recursive>
 8008592:	4628      	mov	r0, r5
 8008594:	4621      	mov	r1, r4
 8008596:	f7ff ff5d 	bl	8008454 <__sflush_r>
 800859a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800859c:	07da      	lsls	r2, r3, #31
 800859e:	4605      	mov	r5, r0
 80085a0:	d4e4      	bmi.n	800856c <_fflush_r+0xc>
 80085a2:	89a3      	ldrh	r3, [r4, #12]
 80085a4:	059b      	lsls	r3, r3, #22
 80085a6:	d4e1      	bmi.n	800856c <_fflush_r+0xc>
 80085a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085aa:	f7fe fb92 	bl	8006cd2 <__retarget_lock_release_recursive>
 80085ae:	e7dd      	b.n	800856c <_fflush_r+0xc>

080085b0 <fiprintf>:
 80085b0:	b40e      	push	{r1, r2, r3}
 80085b2:	b503      	push	{r0, r1, lr}
 80085b4:	4601      	mov	r1, r0
 80085b6:	ab03      	add	r3, sp, #12
 80085b8:	4805      	ldr	r0, [pc, #20]	; (80085d0 <fiprintf+0x20>)
 80085ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80085be:	6800      	ldr	r0, [r0, #0]
 80085c0:	9301      	str	r3, [sp, #4]
 80085c2:	f000 f8c3 	bl	800874c <_vfiprintf_r>
 80085c6:	b002      	add	sp, #8
 80085c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80085cc:	b003      	add	sp, #12
 80085ce:	4770      	bx	lr
 80085d0:	20000070 	.word	0x20000070

080085d4 <memmove>:
 80085d4:	4288      	cmp	r0, r1
 80085d6:	b510      	push	{r4, lr}
 80085d8:	eb01 0402 	add.w	r4, r1, r2
 80085dc:	d902      	bls.n	80085e4 <memmove+0x10>
 80085de:	4284      	cmp	r4, r0
 80085e0:	4623      	mov	r3, r4
 80085e2:	d807      	bhi.n	80085f4 <memmove+0x20>
 80085e4:	1e43      	subs	r3, r0, #1
 80085e6:	42a1      	cmp	r1, r4
 80085e8:	d008      	beq.n	80085fc <memmove+0x28>
 80085ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085f2:	e7f8      	b.n	80085e6 <memmove+0x12>
 80085f4:	4402      	add	r2, r0
 80085f6:	4601      	mov	r1, r0
 80085f8:	428a      	cmp	r2, r1
 80085fa:	d100      	bne.n	80085fe <memmove+0x2a>
 80085fc:	bd10      	pop	{r4, pc}
 80085fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008602:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008606:	e7f7      	b.n	80085f8 <memmove+0x24>

08008608 <memcpy>:
 8008608:	440a      	add	r2, r1
 800860a:	4291      	cmp	r1, r2
 800860c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008610:	d100      	bne.n	8008614 <memcpy+0xc>
 8008612:	4770      	bx	lr
 8008614:	b510      	push	{r4, lr}
 8008616:	f811 4b01 	ldrb.w	r4, [r1], #1
 800861a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800861e:	4291      	cmp	r1, r2
 8008620:	d1f9      	bne.n	8008616 <memcpy+0xe>
 8008622:	bd10      	pop	{r4, pc}

08008624 <abort>:
 8008624:	b508      	push	{r3, lr}
 8008626:	2006      	movs	r0, #6
 8008628:	f000 fa68 	bl	8008afc <raise>
 800862c:	2001      	movs	r0, #1
 800862e:	f7fa f8fd 	bl	800282c <_exit>

08008632 <_calloc_r>:
 8008632:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008634:	fba1 2402 	umull	r2, r4, r1, r2
 8008638:	b94c      	cbnz	r4, 800864e <_calloc_r+0x1c>
 800863a:	4611      	mov	r1, r2
 800863c:	9201      	str	r2, [sp, #4]
 800863e:	f7fd fbbb 	bl	8005db8 <_malloc_r>
 8008642:	9a01      	ldr	r2, [sp, #4]
 8008644:	4605      	mov	r5, r0
 8008646:	b930      	cbnz	r0, 8008656 <_calloc_r+0x24>
 8008648:	4628      	mov	r0, r5
 800864a:	b003      	add	sp, #12
 800864c:	bd30      	pop	{r4, r5, pc}
 800864e:	220c      	movs	r2, #12
 8008650:	6002      	str	r2, [r0, #0]
 8008652:	2500      	movs	r5, #0
 8008654:	e7f8      	b.n	8008648 <_calloc_r+0x16>
 8008656:	4621      	mov	r1, r4
 8008658:	f7fe fa3f 	bl	8006ada <memset>
 800865c:	e7f4      	b.n	8008648 <_calloc_r+0x16>

0800865e <__ascii_mbtowc>:
 800865e:	b082      	sub	sp, #8
 8008660:	b901      	cbnz	r1, 8008664 <__ascii_mbtowc+0x6>
 8008662:	a901      	add	r1, sp, #4
 8008664:	b142      	cbz	r2, 8008678 <__ascii_mbtowc+0x1a>
 8008666:	b14b      	cbz	r3, 800867c <__ascii_mbtowc+0x1e>
 8008668:	7813      	ldrb	r3, [r2, #0]
 800866a:	600b      	str	r3, [r1, #0]
 800866c:	7812      	ldrb	r2, [r2, #0]
 800866e:	1e10      	subs	r0, r2, #0
 8008670:	bf18      	it	ne
 8008672:	2001      	movne	r0, #1
 8008674:	b002      	add	sp, #8
 8008676:	4770      	bx	lr
 8008678:	4610      	mov	r0, r2
 800867a:	e7fb      	b.n	8008674 <__ascii_mbtowc+0x16>
 800867c:	f06f 0001 	mvn.w	r0, #1
 8008680:	e7f8      	b.n	8008674 <__ascii_mbtowc+0x16>

08008682 <_realloc_r>:
 8008682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008686:	4680      	mov	r8, r0
 8008688:	4614      	mov	r4, r2
 800868a:	460e      	mov	r6, r1
 800868c:	b921      	cbnz	r1, 8008698 <_realloc_r+0x16>
 800868e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008692:	4611      	mov	r1, r2
 8008694:	f7fd bb90 	b.w	8005db8 <_malloc_r>
 8008698:	b92a      	cbnz	r2, 80086a6 <_realloc_r+0x24>
 800869a:	f7ff f9bb 	bl	8007a14 <_free_r>
 800869e:	4625      	mov	r5, r4
 80086a0:	4628      	mov	r0, r5
 80086a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a6:	f000 fa45 	bl	8008b34 <_malloc_usable_size_r>
 80086aa:	4284      	cmp	r4, r0
 80086ac:	4607      	mov	r7, r0
 80086ae:	d802      	bhi.n	80086b6 <_realloc_r+0x34>
 80086b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80086b4:	d812      	bhi.n	80086dc <_realloc_r+0x5a>
 80086b6:	4621      	mov	r1, r4
 80086b8:	4640      	mov	r0, r8
 80086ba:	f7fd fb7d 	bl	8005db8 <_malloc_r>
 80086be:	4605      	mov	r5, r0
 80086c0:	2800      	cmp	r0, #0
 80086c2:	d0ed      	beq.n	80086a0 <_realloc_r+0x1e>
 80086c4:	42bc      	cmp	r4, r7
 80086c6:	4622      	mov	r2, r4
 80086c8:	4631      	mov	r1, r6
 80086ca:	bf28      	it	cs
 80086cc:	463a      	movcs	r2, r7
 80086ce:	f7ff ff9b 	bl	8008608 <memcpy>
 80086d2:	4631      	mov	r1, r6
 80086d4:	4640      	mov	r0, r8
 80086d6:	f7ff f99d 	bl	8007a14 <_free_r>
 80086da:	e7e1      	b.n	80086a0 <_realloc_r+0x1e>
 80086dc:	4635      	mov	r5, r6
 80086de:	e7df      	b.n	80086a0 <_realloc_r+0x1e>

080086e0 <__ascii_wctomb>:
 80086e0:	b149      	cbz	r1, 80086f6 <__ascii_wctomb+0x16>
 80086e2:	2aff      	cmp	r2, #255	; 0xff
 80086e4:	bf85      	ittet	hi
 80086e6:	238a      	movhi	r3, #138	; 0x8a
 80086e8:	6003      	strhi	r3, [r0, #0]
 80086ea:	700a      	strbls	r2, [r1, #0]
 80086ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80086f0:	bf98      	it	ls
 80086f2:	2001      	movls	r0, #1
 80086f4:	4770      	bx	lr
 80086f6:	4608      	mov	r0, r1
 80086f8:	4770      	bx	lr

080086fa <__sfputc_r>:
 80086fa:	6893      	ldr	r3, [r2, #8]
 80086fc:	3b01      	subs	r3, #1
 80086fe:	2b00      	cmp	r3, #0
 8008700:	b410      	push	{r4}
 8008702:	6093      	str	r3, [r2, #8]
 8008704:	da08      	bge.n	8008718 <__sfputc_r+0x1e>
 8008706:	6994      	ldr	r4, [r2, #24]
 8008708:	42a3      	cmp	r3, r4
 800870a:	db01      	blt.n	8008710 <__sfputc_r+0x16>
 800870c:	290a      	cmp	r1, #10
 800870e:	d103      	bne.n	8008718 <__sfputc_r+0x1e>
 8008710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008714:	f000 b934 	b.w	8008980 <__swbuf_r>
 8008718:	6813      	ldr	r3, [r2, #0]
 800871a:	1c58      	adds	r0, r3, #1
 800871c:	6010      	str	r0, [r2, #0]
 800871e:	7019      	strb	r1, [r3, #0]
 8008720:	4608      	mov	r0, r1
 8008722:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008726:	4770      	bx	lr

08008728 <__sfputs_r>:
 8008728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872a:	4606      	mov	r6, r0
 800872c:	460f      	mov	r7, r1
 800872e:	4614      	mov	r4, r2
 8008730:	18d5      	adds	r5, r2, r3
 8008732:	42ac      	cmp	r4, r5
 8008734:	d101      	bne.n	800873a <__sfputs_r+0x12>
 8008736:	2000      	movs	r0, #0
 8008738:	e007      	b.n	800874a <__sfputs_r+0x22>
 800873a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800873e:	463a      	mov	r2, r7
 8008740:	4630      	mov	r0, r6
 8008742:	f7ff ffda 	bl	80086fa <__sfputc_r>
 8008746:	1c43      	adds	r3, r0, #1
 8008748:	d1f3      	bne.n	8008732 <__sfputs_r+0xa>
 800874a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800874c <_vfiprintf_r>:
 800874c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008750:	460d      	mov	r5, r1
 8008752:	b09d      	sub	sp, #116	; 0x74
 8008754:	4614      	mov	r4, r2
 8008756:	4698      	mov	r8, r3
 8008758:	4606      	mov	r6, r0
 800875a:	b118      	cbz	r0, 8008764 <_vfiprintf_r+0x18>
 800875c:	6a03      	ldr	r3, [r0, #32]
 800875e:	b90b      	cbnz	r3, 8008764 <_vfiprintf_r+0x18>
 8008760:	f7fe f922 	bl	80069a8 <__sinit>
 8008764:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008766:	07d9      	lsls	r1, r3, #31
 8008768:	d405      	bmi.n	8008776 <_vfiprintf_r+0x2a>
 800876a:	89ab      	ldrh	r3, [r5, #12]
 800876c:	059a      	lsls	r2, r3, #22
 800876e:	d402      	bmi.n	8008776 <_vfiprintf_r+0x2a>
 8008770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008772:	f7fe faad 	bl	8006cd0 <__retarget_lock_acquire_recursive>
 8008776:	89ab      	ldrh	r3, [r5, #12]
 8008778:	071b      	lsls	r3, r3, #28
 800877a:	d501      	bpl.n	8008780 <_vfiprintf_r+0x34>
 800877c:	692b      	ldr	r3, [r5, #16]
 800877e:	b99b      	cbnz	r3, 80087a8 <_vfiprintf_r+0x5c>
 8008780:	4629      	mov	r1, r5
 8008782:	4630      	mov	r0, r6
 8008784:	f000 f93a 	bl	80089fc <__swsetup_r>
 8008788:	b170      	cbz	r0, 80087a8 <_vfiprintf_r+0x5c>
 800878a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800878c:	07dc      	lsls	r4, r3, #31
 800878e:	d504      	bpl.n	800879a <_vfiprintf_r+0x4e>
 8008790:	f04f 30ff 	mov.w	r0, #4294967295
 8008794:	b01d      	add	sp, #116	; 0x74
 8008796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800879a:	89ab      	ldrh	r3, [r5, #12]
 800879c:	0598      	lsls	r0, r3, #22
 800879e:	d4f7      	bmi.n	8008790 <_vfiprintf_r+0x44>
 80087a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087a2:	f7fe fa96 	bl	8006cd2 <__retarget_lock_release_recursive>
 80087a6:	e7f3      	b.n	8008790 <_vfiprintf_r+0x44>
 80087a8:	2300      	movs	r3, #0
 80087aa:	9309      	str	r3, [sp, #36]	; 0x24
 80087ac:	2320      	movs	r3, #32
 80087ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80087b6:	2330      	movs	r3, #48	; 0x30
 80087b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800896c <_vfiprintf_r+0x220>
 80087bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087c0:	f04f 0901 	mov.w	r9, #1
 80087c4:	4623      	mov	r3, r4
 80087c6:	469a      	mov	sl, r3
 80087c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087cc:	b10a      	cbz	r2, 80087d2 <_vfiprintf_r+0x86>
 80087ce:	2a25      	cmp	r2, #37	; 0x25
 80087d0:	d1f9      	bne.n	80087c6 <_vfiprintf_r+0x7a>
 80087d2:	ebba 0b04 	subs.w	fp, sl, r4
 80087d6:	d00b      	beq.n	80087f0 <_vfiprintf_r+0xa4>
 80087d8:	465b      	mov	r3, fp
 80087da:	4622      	mov	r2, r4
 80087dc:	4629      	mov	r1, r5
 80087de:	4630      	mov	r0, r6
 80087e0:	f7ff ffa2 	bl	8008728 <__sfputs_r>
 80087e4:	3001      	adds	r0, #1
 80087e6:	f000 80a9 	beq.w	800893c <_vfiprintf_r+0x1f0>
 80087ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087ec:	445a      	add	r2, fp
 80087ee:	9209      	str	r2, [sp, #36]	; 0x24
 80087f0:	f89a 3000 	ldrb.w	r3, [sl]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 80a1 	beq.w	800893c <_vfiprintf_r+0x1f0>
 80087fa:	2300      	movs	r3, #0
 80087fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008800:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008804:	f10a 0a01 	add.w	sl, sl, #1
 8008808:	9304      	str	r3, [sp, #16]
 800880a:	9307      	str	r3, [sp, #28]
 800880c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008810:	931a      	str	r3, [sp, #104]	; 0x68
 8008812:	4654      	mov	r4, sl
 8008814:	2205      	movs	r2, #5
 8008816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800881a:	4854      	ldr	r0, [pc, #336]	; (800896c <_vfiprintf_r+0x220>)
 800881c:	f7f7 fce0 	bl	80001e0 <memchr>
 8008820:	9a04      	ldr	r2, [sp, #16]
 8008822:	b9d8      	cbnz	r0, 800885c <_vfiprintf_r+0x110>
 8008824:	06d1      	lsls	r1, r2, #27
 8008826:	bf44      	itt	mi
 8008828:	2320      	movmi	r3, #32
 800882a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800882e:	0713      	lsls	r3, r2, #28
 8008830:	bf44      	itt	mi
 8008832:	232b      	movmi	r3, #43	; 0x2b
 8008834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008838:	f89a 3000 	ldrb.w	r3, [sl]
 800883c:	2b2a      	cmp	r3, #42	; 0x2a
 800883e:	d015      	beq.n	800886c <_vfiprintf_r+0x120>
 8008840:	9a07      	ldr	r2, [sp, #28]
 8008842:	4654      	mov	r4, sl
 8008844:	2000      	movs	r0, #0
 8008846:	f04f 0c0a 	mov.w	ip, #10
 800884a:	4621      	mov	r1, r4
 800884c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008850:	3b30      	subs	r3, #48	; 0x30
 8008852:	2b09      	cmp	r3, #9
 8008854:	d94d      	bls.n	80088f2 <_vfiprintf_r+0x1a6>
 8008856:	b1b0      	cbz	r0, 8008886 <_vfiprintf_r+0x13a>
 8008858:	9207      	str	r2, [sp, #28]
 800885a:	e014      	b.n	8008886 <_vfiprintf_r+0x13a>
 800885c:	eba0 0308 	sub.w	r3, r0, r8
 8008860:	fa09 f303 	lsl.w	r3, r9, r3
 8008864:	4313      	orrs	r3, r2
 8008866:	9304      	str	r3, [sp, #16]
 8008868:	46a2      	mov	sl, r4
 800886a:	e7d2      	b.n	8008812 <_vfiprintf_r+0xc6>
 800886c:	9b03      	ldr	r3, [sp, #12]
 800886e:	1d19      	adds	r1, r3, #4
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	9103      	str	r1, [sp, #12]
 8008874:	2b00      	cmp	r3, #0
 8008876:	bfbb      	ittet	lt
 8008878:	425b      	neglt	r3, r3
 800887a:	f042 0202 	orrlt.w	r2, r2, #2
 800887e:	9307      	strge	r3, [sp, #28]
 8008880:	9307      	strlt	r3, [sp, #28]
 8008882:	bfb8      	it	lt
 8008884:	9204      	strlt	r2, [sp, #16]
 8008886:	7823      	ldrb	r3, [r4, #0]
 8008888:	2b2e      	cmp	r3, #46	; 0x2e
 800888a:	d10c      	bne.n	80088a6 <_vfiprintf_r+0x15a>
 800888c:	7863      	ldrb	r3, [r4, #1]
 800888e:	2b2a      	cmp	r3, #42	; 0x2a
 8008890:	d134      	bne.n	80088fc <_vfiprintf_r+0x1b0>
 8008892:	9b03      	ldr	r3, [sp, #12]
 8008894:	1d1a      	adds	r2, r3, #4
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	9203      	str	r2, [sp, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	bfb8      	it	lt
 800889e:	f04f 33ff 	movlt.w	r3, #4294967295
 80088a2:	3402      	adds	r4, #2
 80088a4:	9305      	str	r3, [sp, #20]
 80088a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800897c <_vfiprintf_r+0x230>
 80088aa:	7821      	ldrb	r1, [r4, #0]
 80088ac:	2203      	movs	r2, #3
 80088ae:	4650      	mov	r0, sl
 80088b0:	f7f7 fc96 	bl	80001e0 <memchr>
 80088b4:	b138      	cbz	r0, 80088c6 <_vfiprintf_r+0x17a>
 80088b6:	9b04      	ldr	r3, [sp, #16]
 80088b8:	eba0 000a 	sub.w	r0, r0, sl
 80088bc:	2240      	movs	r2, #64	; 0x40
 80088be:	4082      	lsls	r2, r0
 80088c0:	4313      	orrs	r3, r2
 80088c2:	3401      	adds	r4, #1
 80088c4:	9304      	str	r3, [sp, #16]
 80088c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ca:	4829      	ldr	r0, [pc, #164]	; (8008970 <_vfiprintf_r+0x224>)
 80088cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088d0:	2206      	movs	r2, #6
 80088d2:	f7f7 fc85 	bl	80001e0 <memchr>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d03f      	beq.n	800895a <_vfiprintf_r+0x20e>
 80088da:	4b26      	ldr	r3, [pc, #152]	; (8008974 <_vfiprintf_r+0x228>)
 80088dc:	bb1b      	cbnz	r3, 8008926 <_vfiprintf_r+0x1da>
 80088de:	9b03      	ldr	r3, [sp, #12]
 80088e0:	3307      	adds	r3, #7
 80088e2:	f023 0307 	bic.w	r3, r3, #7
 80088e6:	3308      	adds	r3, #8
 80088e8:	9303      	str	r3, [sp, #12]
 80088ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ec:	443b      	add	r3, r7
 80088ee:	9309      	str	r3, [sp, #36]	; 0x24
 80088f0:	e768      	b.n	80087c4 <_vfiprintf_r+0x78>
 80088f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80088f6:	460c      	mov	r4, r1
 80088f8:	2001      	movs	r0, #1
 80088fa:	e7a6      	b.n	800884a <_vfiprintf_r+0xfe>
 80088fc:	2300      	movs	r3, #0
 80088fe:	3401      	adds	r4, #1
 8008900:	9305      	str	r3, [sp, #20]
 8008902:	4619      	mov	r1, r3
 8008904:	f04f 0c0a 	mov.w	ip, #10
 8008908:	4620      	mov	r0, r4
 800890a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800890e:	3a30      	subs	r2, #48	; 0x30
 8008910:	2a09      	cmp	r2, #9
 8008912:	d903      	bls.n	800891c <_vfiprintf_r+0x1d0>
 8008914:	2b00      	cmp	r3, #0
 8008916:	d0c6      	beq.n	80088a6 <_vfiprintf_r+0x15a>
 8008918:	9105      	str	r1, [sp, #20]
 800891a:	e7c4      	b.n	80088a6 <_vfiprintf_r+0x15a>
 800891c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008920:	4604      	mov	r4, r0
 8008922:	2301      	movs	r3, #1
 8008924:	e7f0      	b.n	8008908 <_vfiprintf_r+0x1bc>
 8008926:	ab03      	add	r3, sp, #12
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	462a      	mov	r2, r5
 800892c:	4b12      	ldr	r3, [pc, #72]	; (8008978 <_vfiprintf_r+0x22c>)
 800892e:	a904      	add	r1, sp, #16
 8008930:	4630      	mov	r0, r6
 8008932:	f7fd fbf9 	bl	8006128 <_printf_float>
 8008936:	4607      	mov	r7, r0
 8008938:	1c78      	adds	r0, r7, #1
 800893a:	d1d6      	bne.n	80088ea <_vfiprintf_r+0x19e>
 800893c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800893e:	07d9      	lsls	r1, r3, #31
 8008940:	d405      	bmi.n	800894e <_vfiprintf_r+0x202>
 8008942:	89ab      	ldrh	r3, [r5, #12]
 8008944:	059a      	lsls	r2, r3, #22
 8008946:	d402      	bmi.n	800894e <_vfiprintf_r+0x202>
 8008948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800894a:	f7fe f9c2 	bl	8006cd2 <__retarget_lock_release_recursive>
 800894e:	89ab      	ldrh	r3, [r5, #12]
 8008950:	065b      	lsls	r3, r3, #25
 8008952:	f53f af1d 	bmi.w	8008790 <_vfiprintf_r+0x44>
 8008956:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008958:	e71c      	b.n	8008794 <_vfiprintf_r+0x48>
 800895a:	ab03      	add	r3, sp, #12
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	462a      	mov	r2, r5
 8008960:	4b05      	ldr	r3, [pc, #20]	; (8008978 <_vfiprintf_r+0x22c>)
 8008962:	a904      	add	r1, sp, #16
 8008964:	4630      	mov	r0, r6
 8008966:	f7fd fe83 	bl	8006670 <_printf_i>
 800896a:	e7e4      	b.n	8008936 <_vfiprintf_r+0x1ea>
 800896c:	0800a4f4 	.word	0x0800a4f4
 8008970:	0800a4fe 	.word	0x0800a4fe
 8008974:	08006129 	.word	0x08006129
 8008978:	08008729 	.word	0x08008729
 800897c:	0800a4fa 	.word	0x0800a4fa

08008980 <__swbuf_r>:
 8008980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008982:	460e      	mov	r6, r1
 8008984:	4614      	mov	r4, r2
 8008986:	4605      	mov	r5, r0
 8008988:	b118      	cbz	r0, 8008992 <__swbuf_r+0x12>
 800898a:	6a03      	ldr	r3, [r0, #32]
 800898c:	b90b      	cbnz	r3, 8008992 <__swbuf_r+0x12>
 800898e:	f7fe f80b 	bl	80069a8 <__sinit>
 8008992:	69a3      	ldr	r3, [r4, #24]
 8008994:	60a3      	str	r3, [r4, #8]
 8008996:	89a3      	ldrh	r3, [r4, #12]
 8008998:	071a      	lsls	r2, r3, #28
 800899a:	d525      	bpl.n	80089e8 <__swbuf_r+0x68>
 800899c:	6923      	ldr	r3, [r4, #16]
 800899e:	b31b      	cbz	r3, 80089e8 <__swbuf_r+0x68>
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	6922      	ldr	r2, [r4, #16]
 80089a4:	1a98      	subs	r0, r3, r2
 80089a6:	6963      	ldr	r3, [r4, #20]
 80089a8:	b2f6      	uxtb	r6, r6
 80089aa:	4283      	cmp	r3, r0
 80089ac:	4637      	mov	r7, r6
 80089ae:	dc04      	bgt.n	80089ba <__swbuf_r+0x3a>
 80089b0:	4621      	mov	r1, r4
 80089b2:	4628      	mov	r0, r5
 80089b4:	f7ff fdd4 	bl	8008560 <_fflush_r>
 80089b8:	b9e0      	cbnz	r0, 80089f4 <__swbuf_r+0x74>
 80089ba:	68a3      	ldr	r3, [r4, #8]
 80089bc:	3b01      	subs	r3, #1
 80089be:	60a3      	str	r3, [r4, #8]
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	1c5a      	adds	r2, r3, #1
 80089c4:	6022      	str	r2, [r4, #0]
 80089c6:	701e      	strb	r6, [r3, #0]
 80089c8:	6962      	ldr	r2, [r4, #20]
 80089ca:	1c43      	adds	r3, r0, #1
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d004      	beq.n	80089da <__swbuf_r+0x5a>
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	07db      	lsls	r3, r3, #31
 80089d4:	d506      	bpl.n	80089e4 <__swbuf_r+0x64>
 80089d6:	2e0a      	cmp	r6, #10
 80089d8:	d104      	bne.n	80089e4 <__swbuf_r+0x64>
 80089da:	4621      	mov	r1, r4
 80089dc:	4628      	mov	r0, r5
 80089de:	f7ff fdbf 	bl	8008560 <_fflush_r>
 80089e2:	b938      	cbnz	r0, 80089f4 <__swbuf_r+0x74>
 80089e4:	4638      	mov	r0, r7
 80089e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089e8:	4621      	mov	r1, r4
 80089ea:	4628      	mov	r0, r5
 80089ec:	f000 f806 	bl	80089fc <__swsetup_r>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	d0d5      	beq.n	80089a0 <__swbuf_r+0x20>
 80089f4:	f04f 37ff 	mov.w	r7, #4294967295
 80089f8:	e7f4      	b.n	80089e4 <__swbuf_r+0x64>
	...

080089fc <__swsetup_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	4b2a      	ldr	r3, [pc, #168]	; (8008aa8 <__swsetup_r+0xac>)
 8008a00:	4605      	mov	r5, r0
 8008a02:	6818      	ldr	r0, [r3, #0]
 8008a04:	460c      	mov	r4, r1
 8008a06:	b118      	cbz	r0, 8008a10 <__swsetup_r+0x14>
 8008a08:	6a03      	ldr	r3, [r0, #32]
 8008a0a:	b90b      	cbnz	r3, 8008a10 <__swsetup_r+0x14>
 8008a0c:	f7fd ffcc 	bl	80069a8 <__sinit>
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a16:	0718      	lsls	r0, r3, #28
 8008a18:	d422      	bmi.n	8008a60 <__swsetup_r+0x64>
 8008a1a:	06d9      	lsls	r1, r3, #27
 8008a1c:	d407      	bmi.n	8008a2e <__swsetup_r+0x32>
 8008a1e:	2309      	movs	r3, #9
 8008a20:	602b      	str	r3, [r5, #0]
 8008a22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a26:	81a3      	strh	r3, [r4, #12]
 8008a28:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2c:	e034      	b.n	8008a98 <__swsetup_r+0x9c>
 8008a2e:	0758      	lsls	r0, r3, #29
 8008a30:	d512      	bpl.n	8008a58 <__swsetup_r+0x5c>
 8008a32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a34:	b141      	cbz	r1, 8008a48 <__swsetup_r+0x4c>
 8008a36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a3a:	4299      	cmp	r1, r3
 8008a3c:	d002      	beq.n	8008a44 <__swsetup_r+0x48>
 8008a3e:	4628      	mov	r0, r5
 8008a40:	f7fe ffe8 	bl	8007a14 <_free_r>
 8008a44:	2300      	movs	r3, #0
 8008a46:	6363      	str	r3, [r4, #52]	; 0x34
 8008a48:	89a3      	ldrh	r3, [r4, #12]
 8008a4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a4e:	81a3      	strh	r3, [r4, #12]
 8008a50:	2300      	movs	r3, #0
 8008a52:	6063      	str	r3, [r4, #4]
 8008a54:	6923      	ldr	r3, [r4, #16]
 8008a56:	6023      	str	r3, [r4, #0]
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	f043 0308 	orr.w	r3, r3, #8
 8008a5e:	81a3      	strh	r3, [r4, #12]
 8008a60:	6923      	ldr	r3, [r4, #16]
 8008a62:	b94b      	cbnz	r3, 8008a78 <__swsetup_r+0x7c>
 8008a64:	89a3      	ldrh	r3, [r4, #12]
 8008a66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a6e:	d003      	beq.n	8008a78 <__swsetup_r+0x7c>
 8008a70:	4621      	mov	r1, r4
 8008a72:	4628      	mov	r0, r5
 8008a74:	f000 f88c 	bl	8008b90 <__smakebuf_r>
 8008a78:	89a0      	ldrh	r0, [r4, #12]
 8008a7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a7e:	f010 0301 	ands.w	r3, r0, #1
 8008a82:	d00a      	beq.n	8008a9a <__swsetup_r+0x9e>
 8008a84:	2300      	movs	r3, #0
 8008a86:	60a3      	str	r3, [r4, #8]
 8008a88:	6963      	ldr	r3, [r4, #20]
 8008a8a:	425b      	negs	r3, r3
 8008a8c:	61a3      	str	r3, [r4, #24]
 8008a8e:	6923      	ldr	r3, [r4, #16]
 8008a90:	b943      	cbnz	r3, 8008aa4 <__swsetup_r+0xa8>
 8008a92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a96:	d1c4      	bne.n	8008a22 <__swsetup_r+0x26>
 8008a98:	bd38      	pop	{r3, r4, r5, pc}
 8008a9a:	0781      	lsls	r1, r0, #30
 8008a9c:	bf58      	it	pl
 8008a9e:	6963      	ldrpl	r3, [r4, #20]
 8008aa0:	60a3      	str	r3, [r4, #8]
 8008aa2:	e7f4      	b.n	8008a8e <__swsetup_r+0x92>
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	e7f7      	b.n	8008a98 <__swsetup_r+0x9c>
 8008aa8:	20000070 	.word	0x20000070

08008aac <_raise_r>:
 8008aac:	291f      	cmp	r1, #31
 8008aae:	b538      	push	{r3, r4, r5, lr}
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	460d      	mov	r5, r1
 8008ab4:	d904      	bls.n	8008ac0 <_raise_r+0x14>
 8008ab6:	2316      	movs	r3, #22
 8008ab8:	6003      	str	r3, [r0, #0]
 8008aba:	f04f 30ff 	mov.w	r0, #4294967295
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
 8008ac0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008ac2:	b112      	cbz	r2, 8008aca <_raise_r+0x1e>
 8008ac4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ac8:	b94b      	cbnz	r3, 8008ade <_raise_r+0x32>
 8008aca:	4620      	mov	r0, r4
 8008acc:	f000 f830 	bl	8008b30 <_getpid_r>
 8008ad0:	462a      	mov	r2, r5
 8008ad2:	4601      	mov	r1, r0
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ada:	f000 b817 	b.w	8008b0c <_kill_r>
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d00a      	beq.n	8008af8 <_raise_r+0x4c>
 8008ae2:	1c59      	adds	r1, r3, #1
 8008ae4:	d103      	bne.n	8008aee <_raise_r+0x42>
 8008ae6:	2316      	movs	r3, #22
 8008ae8:	6003      	str	r3, [r0, #0]
 8008aea:	2001      	movs	r0, #1
 8008aec:	e7e7      	b.n	8008abe <_raise_r+0x12>
 8008aee:	2400      	movs	r4, #0
 8008af0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008af4:	4628      	mov	r0, r5
 8008af6:	4798      	blx	r3
 8008af8:	2000      	movs	r0, #0
 8008afa:	e7e0      	b.n	8008abe <_raise_r+0x12>

08008afc <raise>:
 8008afc:	4b02      	ldr	r3, [pc, #8]	; (8008b08 <raise+0xc>)
 8008afe:	4601      	mov	r1, r0
 8008b00:	6818      	ldr	r0, [r3, #0]
 8008b02:	f7ff bfd3 	b.w	8008aac <_raise_r>
 8008b06:	bf00      	nop
 8008b08:	20000070 	.word	0x20000070

08008b0c <_kill_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	4d07      	ldr	r5, [pc, #28]	; (8008b2c <_kill_r+0x20>)
 8008b10:	2300      	movs	r3, #0
 8008b12:	4604      	mov	r4, r0
 8008b14:	4608      	mov	r0, r1
 8008b16:	4611      	mov	r1, r2
 8008b18:	602b      	str	r3, [r5, #0]
 8008b1a:	f7f9 fe77 	bl	800280c <_kill>
 8008b1e:	1c43      	adds	r3, r0, #1
 8008b20:	d102      	bne.n	8008b28 <_kill_r+0x1c>
 8008b22:	682b      	ldr	r3, [r5, #0]
 8008b24:	b103      	cbz	r3, 8008b28 <_kill_r+0x1c>
 8008b26:	6023      	str	r3, [r4, #0]
 8008b28:	bd38      	pop	{r3, r4, r5, pc}
 8008b2a:	bf00      	nop
 8008b2c:	200004c4 	.word	0x200004c4

08008b30 <_getpid_r>:
 8008b30:	f7f9 be64 	b.w	80027fc <_getpid>

08008b34 <_malloc_usable_size_r>:
 8008b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b38:	1f18      	subs	r0, r3, #4
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	bfbc      	itt	lt
 8008b3e:	580b      	ldrlt	r3, [r1, r0]
 8008b40:	18c0      	addlt	r0, r0, r3
 8008b42:	4770      	bx	lr

08008b44 <__swhatbuf_r>:
 8008b44:	b570      	push	{r4, r5, r6, lr}
 8008b46:	460c      	mov	r4, r1
 8008b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b4c:	2900      	cmp	r1, #0
 8008b4e:	b096      	sub	sp, #88	; 0x58
 8008b50:	4615      	mov	r5, r2
 8008b52:	461e      	mov	r6, r3
 8008b54:	da0d      	bge.n	8008b72 <__swhatbuf_r+0x2e>
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008b5c:	f04f 0100 	mov.w	r1, #0
 8008b60:	bf0c      	ite	eq
 8008b62:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008b66:	2340      	movne	r3, #64	; 0x40
 8008b68:	2000      	movs	r0, #0
 8008b6a:	6031      	str	r1, [r6, #0]
 8008b6c:	602b      	str	r3, [r5, #0]
 8008b6e:	b016      	add	sp, #88	; 0x58
 8008b70:	bd70      	pop	{r4, r5, r6, pc}
 8008b72:	466a      	mov	r2, sp
 8008b74:	f000 f848 	bl	8008c08 <_fstat_r>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	dbec      	blt.n	8008b56 <__swhatbuf_r+0x12>
 8008b7c:	9901      	ldr	r1, [sp, #4]
 8008b7e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008b82:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008b86:	4259      	negs	r1, r3
 8008b88:	4159      	adcs	r1, r3
 8008b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b8e:	e7eb      	b.n	8008b68 <__swhatbuf_r+0x24>

08008b90 <__smakebuf_r>:
 8008b90:	898b      	ldrh	r3, [r1, #12]
 8008b92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b94:	079d      	lsls	r5, r3, #30
 8008b96:	4606      	mov	r6, r0
 8008b98:	460c      	mov	r4, r1
 8008b9a:	d507      	bpl.n	8008bac <__smakebuf_r+0x1c>
 8008b9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	6123      	str	r3, [r4, #16]
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	6163      	str	r3, [r4, #20]
 8008ba8:	b002      	add	sp, #8
 8008baa:	bd70      	pop	{r4, r5, r6, pc}
 8008bac:	ab01      	add	r3, sp, #4
 8008bae:	466a      	mov	r2, sp
 8008bb0:	f7ff ffc8 	bl	8008b44 <__swhatbuf_r>
 8008bb4:	9900      	ldr	r1, [sp, #0]
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	4630      	mov	r0, r6
 8008bba:	f7fd f8fd 	bl	8005db8 <_malloc_r>
 8008bbe:	b948      	cbnz	r0, 8008bd4 <__smakebuf_r+0x44>
 8008bc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bc4:	059a      	lsls	r2, r3, #22
 8008bc6:	d4ef      	bmi.n	8008ba8 <__smakebuf_r+0x18>
 8008bc8:	f023 0303 	bic.w	r3, r3, #3
 8008bcc:	f043 0302 	orr.w	r3, r3, #2
 8008bd0:	81a3      	strh	r3, [r4, #12]
 8008bd2:	e7e3      	b.n	8008b9c <__smakebuf_r+0xc>
 8008bd4:	89a3      	ldrh	r3, [r4, #12]
 8008bd6:	6020      	str	r0, [r4, #0]
 8008bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bdc:	81a3      	strh	r3, [r4, #12]
 8008bde:	9b00      	ldr	r3, [sp, #0]
 8008be0:	6163      	str	r3, [r4, #20]
 8008be2:	9b01      	ldr	r3, [sp, #4]
 8008be4:	6120      	str	r0, [r4, #16]
 8008be6:	b15b      	cbz	r3, 8008c00 <__smakebuf_r+0x70>
 8008be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bec:	4630      	mov	r0, r6
 8008bee:	f000 f81d 	bl	8008c2c <_isatty_r>
 8008bf2:	b128      	cbz	r0, 8008c00 <__smakebuf_r+0x70>
 8008bf4:	89a3      	ldrh	r3, [r4, #12]
 8008bf6:	f023 0303 	bic.w	r3, r3, #3
 8008bfa:	f043 0301 	orr.w	r3, r3, #1
 8008bfe:	81a3      	strh	r3, [r4, #12]
 8008c00:	89a3      	ldrh	r3, [r4, #12]
 8008c02:	431d      	orrs	r5, r3
 8008c04:	81a5      	strh	r5, [r4, #12]
 8008c06:	e7cf      	b.n	8008ba8 <__smakebuf_r+0x18>

08008c08 <_fstat_r>:
 8008c08:	b538      	push	{r3, r4, r5, lr}
 8008c0a:	4d07      	ldr	r5, [pc, #28]	; (8008c28 <_fstat_r+0x20>)
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	4604      	mov	r4, r0
 8008c10:	4608      	mov	r0, r1
 8008c12:	4611      	mov	r1, r2
 8008c14:	602b      	str	r3, [r5, #0]
 8008c16:	f7f9 fe58 	bl	80028ca <_fstat>
 8008c1a:	1c43      	adds	r3, r0, #1
 8008c1c:	d102      	bne.n	8008c24 <_fstat_r+0x1c>
 8008c1e:	682b      	ldr	r3, [r5, #0]
 8008c20:	b103      	cbz	r3, 8008c24 <_fstat_r+0x1c>
 8008c22:	6023      	str	r3, [r4, #0]
 8008c24:	bd38      	pop	{r3, r4, r5, pc}
 8008c26:	bf00      	nop
 8008c28:	200004c4 	.word	0x200004c4

08008c2c <_isatty_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	4d06      	ldr	r5, [pc, #24]	; (8008c48 <_isatty_r+0x1c>)
 8008c30:	2300      	movs	r3, #0
 8008c32:	4604      	mov	r4, r0
 8008c34:	4608      	mov	r0, r1
 8008c36:	602b      	str	r3, [r5, #0]
 8008c38:	f7f9 fe57 	bl	80028ea <_isatty>
 8008c3c:	1c43      	adds	r3, r0, #1
 8008c3e:	d102      	bne.n	8008c46 <_isatty_r+0x1a>
 8008c40:	682b      	ldr	r3, [r5, #0]
 8008c42:	b103      	cbz	r3, 8008c46 <_isatty_r+0x1a>
 8008c44:	6023      	str	r3, [r4, #0]
 8008c46:	bd38      	pop	{r3, r4, r5, pc}
 8008c48:	200004c4 	.word	0x200004c4

08008c4c <atan2>:
 8008c4c:	f000 b87c 	b.w	8008d48 <__ieee754_atan2>

08008c50 <pow>:
 8008c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c52:	ed2d 8b02 	vpush	{d8}
 8008c56:	eeb0 8a40 	vmov.f32	s16, s0
 8008c5a:	eef0 8a60 	vmov.f32	s17, s1
 8008c5e:	ec55 4b11 	vmov	r4, r5, d1
 8008c62:	f000 f939 	bl	8008ed8 <__ieee754_pow>
 8008c66:	4622      	mov	r2, r4
 8008c68:	462b      	mov	r3, r5
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	4629      	mov	r1, r5
 8008c6e:	ec57 6b10 	vmov	r6, r7, d0
 8008c72:	f7f7 ff63 	bl	8000b3c <__aeabi_dcmpun>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d13b      	bne.n	8008cf2 <pow+0xa2>
 8008c7a:	ec51 0b18 	vmov	r0, r1, d8
 8008c7e:	2200      	movs	r2, #0
 8008c80:	2300      	movs	r3, #0
 8008c82:	f7f7 ff29 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c86:	b1b8      	cbz	r0, 8008cb8 <pow+0x68>
 8008c88:	2200      	movs	r2, #0
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	4629      	mov	r1, r5
 8008c90:	f7f7 ff22 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c94:	2800      	cmp	r0, #0
 8008c96:	d146      	bne.n	8008d26 <pow+0xd6>
 8008c98:	ec45 4b10 	vmov	d0, r4, r5
 8008c9c:	f000 f848 	bl	8008d30 <finite>
 8008ca0:	b338      	cbz	r0, 8008cf2 <pow+0xa2>
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	4629      	mov	r1, r5
 8008caa:	f7f7 ff1f 	bl	8000aec <__aeabi_dcmplt>
 8008cae:	b300      	cbz	r0, 8008cf2 <pow+0xa2>
 8008cb0:	f7fd ffe4 	bl	8006c7c <__errno>
 8008cb4:	2322      	movs	r3, #34	; 0x22
 8008cb6:	e01b      	b.n	8008cf0 <pow+0xa0>
 8008cb8:	ec47 6b10 	vmov	d0, r6, r7
 8008cbc:	f000 f838 	bl	8008d30 <finite>
 8008cc0:	b9e0      	cbnz	r0, 8008cfc <pow+0xac>
 8008cc2:	eeb0 0a48 	vmov.f32	s0, s16
 8008cc6:	eef0 0a68 	vmov.f32	s1, s17
 8008cca:	f000 f831 	bl	8008d30 <finite>
 8008cce:	b1a8      	cbz	r0, 8008cfc <pow+0xac>
 8008cd0:	ec45 4b10 	vmov	d0, r4, r5
 8008cd4:	f000 f82c 	bl	8008d30 <finite>
 8008cd8:	b180      	cbz	r0, 8008cfc <pow+0xac>
 8008cda:	4632      	mov	r2, r6
 8008cdc:	463b      	mov	r3, r7
 8008cde:	4630      	mov	r0, r6
 8008ce0:	4639      	mov	r1, r7
 8008ce2:	f7f7 ff2b 	bl	8000b3c <__aeabi_dcmpun>
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	d0e2      	beq.n	8008cb0 <pow+0x60>
 8008cea:	f7fd ffc7 	bl	8006c7c <__errno>
 8008cee:	2321      	movs	r3, #33	; 0x21
 8008cf0:	6003      	str	r3, [r0, #0]
 8008cf2:	ecbd 8b02 	vpop	{d8}
 8008cf6:	ec47 6b10 	vmov	d0, r6, r7
 8008cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	2300      	movs	r3, #0
 8008d00:	4630      	mov	r0, r6
 8008d02:	4639      	mov	r1, r7
 8008d04:	f7f7 fee8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d0f2      	beq.n	8008cf2 <pow+0xa2>
 8008d0c:	eeb0 0a48 	vmov.f32	s0, s16
 8008d10:	eef0 0a68 	vmov.f32	s1, s17
 8008d14:	f000 f80c 	bl	8008d30 <finite>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d0ea      	beq.n	8008cf2 <pow+0xa2>
 8008d1c:	ec45 4b10 	vmov	d0, r4, r5
 8008d20:	f000 f806 	bl	8008d30 <finite>
 8008d24:	e7c3      	b.n	8008cae <pow+0x5e>
 8008d26:	4f01      	ldr	r7, [pc, #4]	; (8008d2c <pow+0xdc>)
 8008d28:	2600      	movs	r6, #0
 8008d2a:	e7e2      	b.n	8008cf2 <pow+0xa2>
 8008d2c:	3ff00000 	.word	0x3ff00000

08008d30 <finite>:
 8008d30:	b082      	sub	sp, #8
 8008d32:	ed8d 0b00 	vstr	d0, [sp]
 8008d36:	9801      	ldr	r0, [sp, #4]
 8008d38:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008d3c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008d40:	0fc0      	lsrs	r0, r0, #31
 8008d42:	b002      	add	sp, #8
 8008d44:	4770      	bx	lr
	...

08008d48 <__ieee754_atan2>:
 8008d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d4c:	ec57 6b11 	vmov	r6, r7, d1
 8008d50:	4273      	negs	r3, r6
 8008d52:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8008ed0 <__ieee754_atan2+0x188>
 8008d56:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008d5a:	4333      	orrs	r3, r6
 8008d5c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008d60:	4543      	cmp	r3, r8
 8008d62:	ec51 0b10 	vmov	r0, r1, d0
 8008d66:	ee11 5a10 	vmov	r5, s2
 8008d6a:	d80a      	bhi.n	8008d82 <__ieee754_atan2+0x3a>
 8008d6c:	4244      	negs	r4, r0
 8008d6e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008d72:	4304      	orrs	r4, r0
 8008d74:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008d78:	4544      	cmp	r4, r8
 8008d7a:	ee10 9a10 	vmov	r9, s0
 8008d7e:	468e      	mov	lr, r1
 8008d80:	d907      	bls.n	8008d92 <__ieee754_atan2+0x4a>
 8008d82:	4632      	mov	r2, r6
 8008d84:	463b      	mov	r3, r7
 8008d86:	f7f7 fa89 	bl	800029c <__adddf3>
 8008d8a:	ec41 0b10 	vmov	d0, r0, r1
 8008d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d92:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008d96:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008d9a:	4334      	orrs	r4, r6
 8008d9c:	d103      	bne.n	8008da6 <__ieee754_atan2+0x5e>
 8008d9e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008da2:	f000 bdc5 	b.w	8009930 <atan>
 8008da6:	17bc      	asrs	r4, r7, #30
 8008da8:	f004 0402 	and.w	r4, r4, #2
 8008dac:	ea53 0909 	orrs.w	r9, r3, r9
 8008db0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008db4:	d107      	bne.n	8008dc6 <__ieee754_atan2+0x7e>
 8008db6:	2c02      	cmp	r4, #2
 8008db8:	d05f      	beq.n	8008e7a <__ieee754_atan2+0x132>
 8008dba:	2c03      	cmp	r4, #3
 8008dbc:	d1e5      	bne.n	8008d8a <__ieee754_atan2+0x42>
 8008dbe:	a140      	add	r1, pc, #256	; (adr r1, 8008ec0 <__ieee754_atan2+0x178>)
 8008dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dc4:	e7e1      	b.n	8008d8a <__ieee754_atan2+0x42>
 8008dc6:	4315      	orrs	r5, r2
 8008dc8:	d106      	bne.n	8008dd8 <__ieee754_atan2+0x90>
 8008dca:	f1be 0f00 	cmp.w	lr, #0
 8008dce:	da5f      	bge.n	8008e90 <__ieee754_atan2+0x148>
 8008dd0:	a13d      	add	r1, pc, #244	; (adr r1, 8008ec8 <__ieee754_atan2+0x180>)
 8008dd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dd6:	e7d8      	b.n	8008d8a <__ieee754_atan2+0x42>
 8008dd8:	4542      	cmp	r2, r8
 8008dda:	d10f      	bne.n	8008dfc <__ieee754_atan2+0xb4>
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	f104 34ff 	add.w	r4, r4, #4294967295
 8008de2:	d107      	bne.n	8008df4 <__ieee754_atan2+0xac>
 8008de4:	2c02      	cmp	r4, #2
 8008de6:	d84c      	bhi.n	8008e82 <__ieee754_atan2+0x13a>
 8008de8:	4b33      	ldr	r3, [pc, #204]	; (8008eb8 <__ieee754_atan2+0x170>)
 8008dea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008dee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008df2:	e7ca      	b.n	8008d8a <__ieee754_atan2+0x42>
 8008df4:	2c02      	cmp	r4, #2
 8008df6:	d848      	bhi.n	8008e8a <__ieee754_atan2+0x142>
 8008df8:	4b30      	ldr	r3, [pc, #192]	; (8008ebc <__ieee754_atan2+0x174>)
 8008dfa:	e7f6      	b.n	8008dea <__ieee754_atan2+0xa2>
 8008dfc:	4543      	cmp	r3, r8
 8008dfe:	d0e4      	beq.n	8008dca <__ieee754_atan2+0x82>
 8008e00:	1a9b      	subs	r3, r3, r2
 8008e02:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008e06:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008e0a:	da1e      	bge.n	8008e4a <__ieee754_atan2+0x102>
 8008e0c:	2f00      	cmp	r7, #0
 8008e0e:	da01      	bge.n	8008e14 <__ieee754_atan2+0xcc>
 8008e10:	323c      	adds	r2, #60	; 0x3c
 8008e12:	db1e      	blt.n	8008e52 <__ieee754_atan2+0x10a>
 8008e14:	4632      	mov	r2, r6
 8008e16:	463b      	mov	r3, r7
 8008e18:	f7f7 fd20 	bl	800085c <__aeabi_ddiv>
 8008e1c:	ec41 0b10 	vmov	d0, r0, r1
 8008e20:	f000 ff26 	bl	8009c70 <fabs>
 8008e24:	f000 fd84 	bl	8009930 <atan>
 8008e28:	ec51 0b10 	vmov	r0, r1, d0
 8008e2c:	2c01      	cmp	r4, #1
 8008e2e:	d013      	beq.n	8008e58 <__ieee754_atan2+0x110>
 8008e30:	2c02      	cmp	r4, #2
 8008e32:	d015      	beq.n	8008e60 <__ieee754_atan2+0x118>
 8008e34:	2c00      	cmp	r4, #0
 8008e36:	d0a8      	beq.n	8008d8a <__ieee754_atan2+0x42>
 8008e38:	a317      	add	r3, pc, #92	; (adr r3, 8008e98 <__ieee754_atan2+0x150>)
 8008e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3e:	f7f7 fa2b 	bl	8000298 <__aeabi_dsub>
 8008e42:	a317      	add	r3, pc, #92	; (adr r3, 8008ea0 <__ieee754_atan2+0x158>)
 8008e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e48:	e014      	b.n	8008e74 <__ieee754_atan2+0x12c>
 8008e4a:	a117      	add	r1, pc, #92	; (adr r1, 8008ea8 <__ieee754_atan2+0x160>)
 8008e4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e50:	e7ec      	b.n	8008e2c <__ieee754_atan2+0xe4>
 8008e52:	2000      	movs	r0, #0
 8008e54:	2100      	movs	r1, #0
 8008e56:	e7e9      	b.n	8008e2c <__ieee754_atan2+0xe4>
 8008e58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	e794      	b.n	8008d8a <__ieee754_atan2+0x42>
 8008e60:	a30d      	add	r3, pc, #52	; (adr r3, 8008e98 <__ieee754_atan2+0x150>)
 8008e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e66:	f7f7 fa17 	bl	8000298 <__aeabi_dsub>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	a10c      	add	r1, pc, #48	; (adr r1, 8008ea0 <__ieee754_atan2+0x158>)
 8008e70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e74:	f7f7 fa10 	bl	8000298 <__aeabi_dsub>
 8008e78:	e787      	b.n	8008d8a <__ieee754_atan2+0x42>
 8008e7a:	a109      	add	r1, pc, #36	; (adr r1, 8008ea0 <__ieee754_atan2+0x158>)
 8008e7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e80:	e783      	b.n	8008d8a <__ieee754_atan2+0x42>
 8008e82:	a10b      	add	r1, pc, #44	; (adr r1, 8008eb0 <__ieee754_atan2+0x168>)
 8008e84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e88:	e77f      	b.n	8008d8a <__ieee754_atan2+0x42>
 8008e8a:	2000      	movs	r0, #0
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	e77c      	b.n	8008d8a <__ieee754_atan2+0x42>
 8008e90:	a105      	add	r1, pc, #20	; (adr r1, 8008ea8 <__ieee754_atan2+0x160>)
 8008e92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e96:	e778      	b.n	8008d8a <__ieee754_atan2+0x42>
 8008e98:	33145c07 	.word	0x33145c07
 8008e9c:	3ca1a626 	.word	0x3ca1a626
 8008ea0:	54442d18 	.word	0x54442d18
 8008ea4:	400921fb 	.word	0x400921fb
 8008ea8:	54442d18 	.word	0x54442d18
 8008eac:	3ff921fb 	.word	0x3ff921fb
 8008eb0:	54442d18 	.word	0x54442d18
 8008eb4:	3fe921fb 	.word	0x3fe921fb
 8008eb8:	0800a510 	.word	0x0800a510
 8008ebc:	0800a528 	.word	0x0800a528
 8008ec0:	54442d18 	.word	0x54442d18
 8008ec4:	c00921fb 	.word	0xc00921fb
 8008ec8:	54442d18 	.word	0x54442d18
 8008ecc:	bff921fb 	.word	0xbff921fb
 8008ed0:	7ff00000 	.word	0x7ff00000
 8008ed4:	00000000 	.word	0x00000000

08008ed8 <__ieee754_pow>:
 8008ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008edc:	ed2d 8b06 	vpush	{d8-d10}
 8008ee0:	b089      	sub	sp, #36	; 0x24
 8008ee2:	ed8d 1b00 	vstr	d1, [sp]
 8008ee6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008eea:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008eee:	ea58 0102 	orrs.w	r1, r8, r2
 8008ef2:	ec57 6b10 	vmov	r6, r7, d0
 8008ef6:	d115      	bne.n	8008f24 <__ieee754_pow+0x4c>
 8008ef8:	19b3      	adds	r3, r6, r6
 8008efa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008efe:	4152      	adcs	r2, r2
 8008f00:	4299      	cmp	r1, r3
 8008f02:	4b89      	ldr	r3, [pc, #548]	; (8009128 <__ieee754_pow+0x250>)
 8008f04:	4193      	sbcs	r3, r2
 8008f06:	f080 84d1 	bcs.w	80098ac <__ieee754_pow+0x9d4>
 8008f0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f0e:	4630      	mov	r0, r6
 8008f10:	4639      	mov	r1, r7
 8008f12:	f7f7 f9c3 	bl	800029c <__adddf3>
 8008f16:	ec41 0b10 	vmov	d0, r0, r1
 8008f1a:	b009      	add	sp, #36	; 0x24
 8008f1c:	ecbd 8b06 	vpop	{d8-d10}
 8008f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f24:	4b81      	ldr	r3, [pc, #516]	; (800912c <__ieee754_pow+0x254>)
 8008f26:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008f2a:	429c      	cmp	r4, r3
 8008f2c:	ee10 aa10 	vmov	sl, s0
 8008f30:	463d      	mov	r5, r7
 8008f32:	dc06      	bgt.n	8008f42 <__ieee754_pow+0x6a>
 8008f34:	d101      	bne.n	8008f3a <__ieee754_pow+0x62>
 8008f36:	2e00      	cmp	r6, #0
 8008f38:	d1e7      	bne.n	8008f0a <__ieee754_pow+0x32>
 8008f3a:	4598      	cmp	r8, r3
 8008f3c:	dc01      	bgt.n	8008f42 <__ieee754_pow+0x6a>
 8008f3e:	d10f      	bne.n	8008f60 <__ieee754_pow+0x88>
 8008f40:	b172      	cbz	r2, 8008f60 <__ieee754_pow+0x88>
 8008f42:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008f46:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008f4a:	ea55 050a 	orrs.w	r5, r5, sl
 8008f4e:	d1dc      	bne.n	8008f0a <__ieee754_pow+0x32>
 8008f50:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008f54:	18db      	adds	r3, r3, r3
 8008f56:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008f5a:	4152      	adcs	r2, r2
 8008f5c:	429d      	cmp	r5, r3
 8008f5e:	e7d0      	b.n	8008f02 <__ieee754_pow+0x2a>
 8008f60:	2d00      	cmp	r5, #0
 8008f62:	da3b      	bge.n	8008fdc <__ieee754_pow+0x104>
 8008f64:	4b72      	ldr	r3, [pc, #456]	; (8009130 <__ieee754_pow+0x258>)
 8008f66:	4598      	cmp	r8, r3
 8008f68:	dc51      	bgt.n	800900e <__ieee754_pow+0x136>
 8008f6a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008f6e:	4598      	cmp	r8, r3
 8008f70:	f340 84ab 	ble.w	80098ca <__ieee754_pow+0x9f2>
 8008f74:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008f78:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008f7c:	2b14      	cmp	r3, #20
 8008f7e:	dd0f      	ble.n	8008fa0 <__ieee754_pow+0xc8>
 8008f80:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008f84:	fa22 f103 	lsr.w	r1, r2, r3
 8008f88:	fa01 f303 	lsl.w	r3, r1, r3
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	f040 849c 	bne.w	80098ca <__ieee754_pow+0x9f2>
 8008f92:	f001 0101 	and.w	r1, r1, #1
 8008f96:	f1c1 0302 	rsb	r3, r1, #2
 8008f9a:	9304      	str	r3, [sp, #16]
 8008f9c:	b182      	cbz	r2, 8008fc0 <__ieee754_pow+0xe8>
 8008f9e:	e05f      	b.n	8009060 <__ieee754_pow+0x188>
 8008fa0:	2a00      	cmp	r2, #0
 8008fa2:	d15b      	bne.n	800905c <__ieee754_pow+0x184>
 8008fa4:	f1c3 0314 	rsb	r3, r3, #20
 8008fa8:	fa48 f103 	asr.w	r1, r8, r3
 8008fac:	fa01 f303 	lsl.w	r3, r1, r3
 8008fb0:	4543      	cmp	r3, r8
 8008fb2:	f040 8487 	bne.w	80098c4 <__ieee754_pow+0x9ec>
 8008fb6:	f001 0101 	and.w	r1, r1, #1
 8008fba:	f1c1 0302 	rsb	r3, r1, #2
 8008fbe:	9304      	str	r3, [sp, #16]
 8008fc0:	4b5c      	ldr	r3, [pc, #368]	; (8009134 <__ieee754_pow+0x25c>)
 8008fc2:	4598      	cmp	r8, r3
 8008fc4:	d132      	bne.n	800902c <__ieee754_pow+0x154>
 8008fc6:	f1b9 0f00 	cmp.w	r9, #0
 8008fca:	f280 8477 	bge.w	80098bc <__ieee754_pow+0x9e4>
 8008fce:	4959      	ldr	r1, [pc, #356]	; (8009134 <__ieee754_pow+0x25c>)
 8008fd0:	4632      	mov	r2, r6
 8008fd2:	463b      	mov	r3, r7
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	f7f7 fc41 	bl	800085c <__aeabi_ddiv>
 8008fda:	e79c      	b.n	8008f16 <__ieee754_pow+0x3e>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	9304      	str	r3, [sp, #16]
 8008fe0:	2a00      	cmp	r2, #0
 8008fe2:	d13d      	bne.n	8009060 <__ieee754_pow+0x188>
 8008fe4:	4b51      	ldr	r3, [pc, #324]	; (800912c <__ieee754_pow+0x254>)
 8008fe6:	4598      	cmp	r8, r3
 8008fe8:	d1ea      	bne.n	8008fc0 <__ieee754_pow+0xe8>
 8008fea:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008fee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008ff2:	ea53 030a 	orrs.w	r3, r3, sl
 8008ff6:	f000 8459 	beq.w	80098ac <__ieee754_pow+0x9d4>
 8008ffa:	4b4f      	ldr	r3, [pc, #316]	; (8009138 <__ieee754_pow+0x260>)
 8008ffc:	429c      	cmp	r4, r3
 8008ffe:	dd08      	ble.n	8009012 <__ieee754_pow+0x13a>
 8009000:	f1b9 0f00 	cmp.w	r9, #0
 8009004:	f2c0 8456 	blt.w	80098b4 <__ieee754_pow+0x9dc>
 8009008:	e9dd 0100 	ldrd	r0, r1, [sp]
 800900c:	e783      	b.n	8008f16 <__ieee754_pow+0x3e>
 800900e:	2302      	movs	r3, #2
 8009010:	e7e5      	b.n	8008fde <__ieee754_pow+0x106>
 8009012:	f1b9 0f00 	cmp.w	r9, #0
 8009016:	f04f 0000 	mov.w	r0, #0
 800901a:	f04f 0100 	mov.w	r1, #0
 800901e:	f6bf af7a 	bge.w	8008f16 <__ieee754_pow+0x3e>
 8009022:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009026:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800902a:	e774      	b.n	8008f16 <__ieee754_pow+0x3e>
 800902c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009030:	d106      	bne.n	8009040 <__ieee754_pow+0x168>
 8009032:	4632      	mov	r2, r6
 8009034:	463b      	mov	r3, r7
 8009036:	4630      	mov	r0, r6
 8009038:	4639      	mov	r1, r7
 800903a:	f7f7 fae5 	bl	8000608 <__aeabi_dmul>
 800903e:	e76a      	b.n	8008f16 <__ieee754_pow+0x3e>
 8009040:	4b3e      	ldr	r3, [pc, #248]	; (800913c <__ieee754_pow+0x264>)
 8009042:	4599      	cmp	r9, r3
 8009044:	d10c      	bne.n	8009060 <__ieee754_pow+0x188>
 8009046:	2d00      	cmp	r5, #0
 8009048:	db0a      	blt.n	8009060 <__ieee754_pow+0x188>
 800904a:	ec47 6b10 	vmov	d0, r6, r7
 800904e:	b009      	add	sp, #36	; 0x24
 8009050:	ecbd 8b06 	vpop	{d8-d10}
 8009054:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009058:	f000 bec4 	b.w	8009de4 <__ieee754_sqrt>
 800905c:	2300      	movs	r3, #0
 800905e:	9304      	str	r3, [sp, #16]
 8009060:	ec47 6b10 	vmov	d0, r6, r7
 8009064:	f000 fe04 	bl	8009c70 <fabs>
 8009068:	ec51 0b10 	vmov	r0, r1, d0
 800906c:	f1ba 0f00 	cmp.w	sl, #0
 8009070:	d129      	bne.n	80090c6 <__ieee754_pow+0x1ee>
 8009072:	b124      	cbz	r4, 800907e <__ieee754_pow+0x1a6>
 8009074:	4b2f      	ldr	r3, [pc, #188]	; (8009134 <__ieee754_pow+0x25c>)
 8009076:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800907a:	429a      	cmp	r2, r3
 800907c:	d123      	bne.n	80090c6 <__ieee754_pow+0x1ee>
 800907e:	f1b9 0f00 	cmp.w	r9, #0
 8009082:	da05      	bge.n	8009090 <__ieee754_pow+0x1b8>
 8009084:	4602      	mov	r2, r0
 8009086:	460b      	mov	r3, r1
 8009088:	2000      	movs	r0, #0
 800908a:	492a      	ldr	r1, [pc, #168]	; (8009134 <__ieee754_pow+0x25c>)
 800908c:	f7f7 fbe6 	bl	800085c <__aeabi_ddiv>
 8009090:	2d00      	cmp	r5, #0
 8009092:	f6bf af40 	bge.w	8008f16 <__ieee754_pow+0x3e>
 8009096:	9b04      	ldr	r3, [sp, #16]
 8009098:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800909c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80090a0:	431c      	orrs	r4, r3
 80090a2:	d108      	bne.n	80090b6 <__ieee754_pow+0x1de>
 80090a4:	4602      	mov	r2, r0
 80090a6:	460b      	mov	r3, r1
 80090a8:	4610      	mov	r0, r2
 80090aa:	4619      	mov	r1, r3
 80090ac:	f7f7 f8f4 	bl	8000298 <__aeabi_dsub>
 80090b0:	4602      	mov	r2, r0
 80090b2:	460b      	mov	r3, r1
 80090b4:	e78f      	b.n	8008fd6 <__ieee754_pow+0xfe>
 80090b6:	9b04      	ldr	r3, [sp, #16]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	f47f af2c 	bne.w	8008f16 <__ieee754_pow+0x3e>
 80090be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090c2:	4619      	mov	r1, r3
 80090c4:	e727      	b.n	8008f16 <__ieee754_pow+0x3e>
 80090c6:	0feb      	lsrs	r3, r5, #31
 80090c8:	3b01      	subs	r3, #1
 80090ca:	9306      	str	r3, [sp, #24]
 80090cc:	9a06      	ldr	r2, [sp, #24]
 80090ce:	9b04      	ldr	r3, [sp, #16]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	d102      	bne.n	80090da <__ieee754_pow+0x202>
 80090d4:	4632      	mov	r2, r6
 80090d6:	463b      	mov	r3, r7
 80090d8:	e7e6      	b.n	80090a8 <__ieee754_pow+0x1d0>
 80090da:	4b19      	ldr	r3, [pc, #100]	; (8009140 <__ieee754_pow+0x268>)
 80090dc:	4598      	cmp	r8, r3
 80090de:	f340 80fb 	ble.w	80092d8 <__ieee754_pow+0x400>
 80090e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80090e6:	4598      	cmp	r8, r3
 80090e8:	4b13      	ldr	r3, [pc, #76]	; (8009138 <__ieee754_pow+0x260>)
 80090ea:	dd0c      	ble.n	8009106 <__ieee754_pow+0x22e>
 80090ec:	429c      	cmp	r4, r3
 80090ee:	dc0f      	bgt.n	8009110 <__ieee754_pow+0x238>
 80090f0:	f1b9 0f00 	cmp.w	r9, #0
 80090f4:	da0f      	bge.n	8009116 <__ieee754_pow+0x23e>
 80090f6:	2000      	movs	r0, #0
 80090f8:	b009      	add	sp, #36	; 0x24
 80090fa:	ecbd 8b06 	vpop	{d8-d10}
 80090fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009102:	f000 be66 	b.w	8009dd2 <__math_oflow>
 8009106:	429c      	cmp	r4, r3
 8009108:	dbf2      	blt.n	80090f0 <__ieee754_pow+0x218>
 800910a:	4b0a      	ldr	r3, [pc, #40]	; (8009134 <__ieee754_pow+0x25c>)
 800910c:	429c      	cmp	r4, r3
 800910e:	dd19      	ble.n	8009144 <__ieee754_pow+0x26c>
 8009110:	f1b9 0f00 	cmp.w	r9, #0
 8009114:	dcef      	bgt.n	80090f6 <__ieee754_pow+0x21e>
 8009116:	2000      	movs	r0, #0
 8009118:	b009      	add	sp, #36	; 0x24
 800911a:	ecbd 8b06 	vpop	{d8-d10}
 800911e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009122:	f000 be4d 	b.w	8009dc0 <__math_uflow>
 8009126:	bf00      	nop
 8009128:	fff00000 	.word	0xfff00000
 800912c:	7ff00000 	.word	0x7ff00000
 8009130:	433fffff 	.word	0x433fffff
 8009134:	3ff00000 	.word	0x3ff00000
 8009138:	3fefffff 	.word	0x3fefffff
 800913c:	3fe00000 	.word	0x3fe00000
 8009140:	41e00000 	.word	0x41e00000
 8009144:	4b60      	ldr	r3, [pc, #384]	; (80092c8 <__ieee754_pow+0x3f0>)
 8009146:	2200      	movs	r2, #0
 8009148:	f7f7 f8a6 	bl	8000298 <__aeabi_dsub>
 800914c:	a354      	add	r3, pc, #336	; (adr r3, 80092a0 <__ieee754_pow+0x3c8>)
 800914e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009152:	4604      	mov	r4, r0
 8009154:	460d      	mov	r5, r1
 8009156:	f7f7 fa57 	bl	8000608 <__aeabi_dmul>
 800915a:	a353      	add	r3, pc, #332	; (adr r3, 80092a8 <__ieee754_pow+0x3d0>)
 800915c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009160:	4606      	mov	r6, r0
 8009162:	460f      	mov	r7, r1
 8009164:	4620      	mov	r0, r4
 8009166:	4629      	mov	r1, r5
 8009168:	f7f7 fa4e 	bl	8000608 <__aeabi_dmul>
 800916c:	4b57      	ldr	r3, [pc, #348]	; (80092cc <__ieee754_pow+0x3f4>)
 800916e:	4682      	mov	sl, r0
 8009170:	468b      	mov	fp, r1
 8009172:	2200      	movs	r2, #0
 8009174:	4620      	mov	r0, r4
 8009176:	4629      	mov	r1, r5
 8009178:	f7f7 fa46 	bl	8000608 <__aeabi_dmul>
 800917c:	4602      	mov	r2, r0
 800917e:	460b      	mov	r3, r1
 8009180:	a14b      	add	r1, pc, #300	; (adr r1, 80092b0 <__ieee754_pow+0x3d8>)
 8009182:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009186:	f7f7 f887 	bl	8000298 <__aeabi_dsub>
 800918a:	4622      	mov	r2, r4
 800918c:	462b      	mov	r3, r5
 800918e:	f7f7 fa3b 	bl	8000608 <__aeabi_dmul>
 8009192:	4602      	mov	r2, r0
 8009194:	460b      	mov	r3, r1
 8009196:	2000      	movs	r0, #0
 8009198:	494d      	ldr	r1, [pc, #308]	; (80092d0 <__ieee754_pow+0x3f8>)
 800919a:	f7f7 f87d 	bl	8000298 <__aeabi_dsub>
 800919e:	4622      	mov	r2, r4
 80091a0:	4680      	mov	r8, r0
 80091a2:	4689      	mov	r9, r1
 80091a4:	462b      	mov	r3, r5
 80091a6:	4620      	mov	r0, r4
 80091a8:	4629      	mov	r1, r5
 80091aa:	f7f7 fa2d 	bl	8000608 <__aeabi_dmul>
 80091ae:	4602      	mov	r2, r0
 80091b0:	460b      	mov	r3, r1
 80091b2:	4640      	mov	r0, r8
 80091b4:	4649      	mov	r1, r9
 80091b6:	f7f7 fa27 	bl	8000608 <__aeabi_dmul>
 80091ba:	a33f      	add	r3, pc, #252	; (adr r3, 80092b8 <__ieee754_pow+0x3e0>)
 80091bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c0:	f7f7 fa22 	bl	8000608 <__aeabi_dmul>
 80091c4:	4602      	mov	r2, r0
 80091c6:	460b      	mov	r3, r1
 80091c8:	4650      	mov	r0, sl
 80091ca:	4659      	mov	r1, fp
 80091cc:	f7f7 f864 	bl	8000298 <__aeabi_dsub>
 80091d0:	4602      	mov	r2, r0
 80091d2:	460b      	mov	r3, r1
 80091d4:	4680      	mov	r8, r0
 80091d6:	4689      	mov	r9, r1
 80091d8:	4630      	mov	r0, r6
 80091da:	4639      	mov	r1, r7
 80091dc:	f7f7 f85e 	bl	800029c <__adddf3>
 80091e0:	2000      	movs	r0, #0
 80091e2:	4632      	mov	r2, r6
 80091e4:	463b      	mov	r3, r7
 80091e6:	4604      	mov	r4, r0
 80091e8:	460d      	mov	r5, r1
 80091ea:	f7f7 f855 	bl	8000298 <__aeabi_dsub>
 80091ee:	4602      	mov	r2, r0
 80091f0:	460b      	mov	r3, r1
 80091f2:	4640      	mov	r0, r8
 80091f4:	4649      	mov	r1, r9
 80091f6:	f7f7 f84f 	bl	8000298 <__aeabi_dsub>
 80091fa:	9b04      	ldr	r3, [sp, #16]
 80091fc:	9a06      	ldr	r2, [sp, #24]
 80091fe:	3b01      	subs	r3, #1
 8009200:	4313      	orrs	r3, r2
 8009202:	4682      	mov	sl, r0
 8009204:	468b      	mov	fp, r1
 8009206:	f040 81e7 	bne.w	80095d8 <__ieee754_pow+0x700>
 800920a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80092c0 <__ieee754_pow+0x3e8>
 800920e:	eeb0 8a47 	vmov.f32	s16, s14
 8009212:	eef0 8a67 	vmov.f32	s17, s15
 8009216:	e9dd 6700 	ldrd	r6, r7, [sp]
 800921a:	2600      	movs	r6, #0
 800921c:	4632      	mov	r2, r6
 800921e:	463b      	mov	r3, r7
 8009220:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009224:	f7f7 f838 	bl	8000298 <__aeabi_dsub>
 8009228:	4622      	mov	r2, r4
 800922a:	462b      	mov	r3, r5
 800922c:	f7f7 f9ec 	bl	8000608 <__aeabi_dmul>
 8009230:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009234:	4680      	mov	r8, r0
 8009236:	4689      	mov	r9, r1
 8009238:	4650      	mov	r0, sl
 800923a:	4659      	mov	r1, fp
 800923c:	f7f7 f9e4 	bl	8000608 <__aeabi_dmul>
 8009240:	4602      	mov	r2, r0
 8009242:	460b      	mov	r3, r1
 8009244:	4640      	mov	r0, r8
 8009246:	4649      	mov	r1, r9
 8009248:	f7f7 f828 	bl	800029c <__adddf3>
 800924c:	4632      	mov	r2, r6
 800924e:	463b      	mov	r3, r7
 8009250:	4680      	mov	r8, r0
 8009252:	4689      	mov	r9, r1
 8009254:	4620      	mov	r0, r4
 8009256:	4629      	mov	r1, r5
 8009258:	f7f7 f9d6 	bl	8000608 <__aeabi_dmul>
 800925c:	460b      	mov	r3, r1
 800925e:	4604      	mov	r4, r0
 8009260:	460d      	mov	r5, r1
 8009262:	4602      	mov	r2, r0
 8009264:	4649      	mov	r1, r9
 8009266:	4640      	mov	r0, r8
 8009268:	f7f7 f818 	bl	800029c <__adddf3>
 800926c:	4b19      	ldr	r3, [pc, #100]	; (80092d4 <__ieee754_pow+0x3fc>)
 800926e:	4299      	cmp	r1, r3
 8009270:	ec45 4b19 	vmov	d9, r4, r5
 8009274:	4606      	mov	r6, r0
 8009276:	460f      	mov	r7, r1
 8009278:	468b      	mov	fp, r1
 800927a:	f340 82f0 	ble.w	800985e <__ieee754_pow+0x986>
 800927e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009282:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009286:	4303      	orrs	r3, r0
 8009288:	f000 81e4 	beq.w	8009654 <__ieee754_pow+0x77c>
 800928c:	ec51 0b18 	vmov	r0, r1, d8
 8009290:	2200      	movs	r2, #0
 8009292:	2300      	movs	r3, #0
 8009294:	f7f7 fc2a 	bl	8000aec <__aeabi_dcmplt>
 8009298:	3800      	subs	r0, #0
 800929a:	bf18      	it	ne
 800929c:	2001      	movne	r0, #1
 800929e:	e72b      	b.n	80090f8 <__ieee754_pow+0x220>
 80092a0:	60000000 	.word	0x60000000
 80092a4:	3ff71547 	.word	0x3ff71547
 80092a8:	f85ddf44 	.word	0xf85ddf44
 80092ac:	3e54ae0b 	.word	0x3e54ae0b
 80092b0:	55555555 	.word	0x55555555
 80092b4:	3fd55555 	.word	0x3fd55555
 80092b8:	652b82fe 	.word	0x652b82fe
 80092bc:	3ff71547 	.word	0x3ff71547
 80092c0:	00000000 	.word	0x00000000
 80092c4:	bff00000 	.word	0xbff00000
 80092c8:	3ff00000 	.word	0x3ff00000
 80092cc:	3fd00000 	.word	0x3fd00000
 80092d0:	3fe00000 	.word	0x3fe00000
 80092d4:	408fffff 	.word	0x408fffff
 80092d8:	4bd5      	ldr	r3, [pc, #852]	; (8009630 <__ieee754_pow+0x758>)
 80092da:	402b      	ands	r3, r5
 80092dc:	2200      	movs	r2, #0
 80092de:	b92b      	cbnz	r3, 80092ec <__ieee754_pow+0x414>
 80092e0:	4bd4      	ldr	r3, [pc, #848]	; (8009634 <__ieee754_pow+0x75c>)
 80092e2:	f7f7 f991 	bl	8000608 <__aeabi_dmul>
 80092e6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80092ea:	460c      	mov	r4, r1
 80092ec:	1523      	asrs	r3, r4, #20
 80092ee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80092f2:	4413      	add	r3, r2
 80092f4:	9305      	str	r3, [sp, #20]
 80092f6:	4bd0      	ldr	r3, [pc, #832]	; (8009638 <__ieee754_pow+0x760>)
 80092f8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80092fc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009300:	429c      	cmp	r4, r3
 8009302:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009306:	dd08      	ble.n	800931a <__ieee754_pow+0x442>
 8009308:	4bcc      	ldr	r3, [pc, #816]	; (800963c <__ieee754_pow+0x764>)
 800930a:	429c      	cmp	r4, r3
 800930c:	f340 8162 	ble.w	80095d4 <__ieee754_pow+0x6fc>
 8009310:	9b05      	ldr	r3, [sp, #20]
 8009312:	3301      	adds	r3, #1
 8009314:	9305      	str	r3, [sp, #20]
 8009316:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800931a:	2400      	movs	r4, #0
 800931c:	00e3      	lsls	r3, r4, #3
 800931e:	9307      	str	r3, [sp, #28]
 8009320:	4bc7      	ldr	r3, [pc, #796]	; (8009640 <__ieee754_pow+0x768>)
 8009322:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009326:	ed93 7b00 	vldr	d7, [r3]
 800932a:	4629      	mov	r1, r5
 800932c:	ec53 2b17 	vmov	r2, r3, d7
 8009330:	eeb0 9a47 	vmov.f32	s18, s14
 8009334:	eef0 9a67 	vmov.f32	s19, s15
 8009338:	4682      	mov	sl, r0
 800933a:	f7f6 ffad 	bl	8000298 <__aeabi_dsub>
 800933e:	4652      	mov	r2, sl
 8009340:	4606      	mov	r6, r0
 8009342:	460f      	mov	r7, r1
 8009344:	462b      	mov	r3, r5
 8009346:	ec51 0b19 	vmov	r0, r1, d9
 800934a:	f7f6 ffa7 	bl	800029c <__adddf3>
 800934e:	4602      	mov	r2, r0
 8009350:	460b      	mov	r3, r1
 8009352:	2000      	movs	r0, #0
 8009354:	49bb      	ldr	r1, [pc, #748]	; (8009644 <__ieee754_pow+0x76c>)
 8009356:	f7f7 fa81 	bl	800085c <__aeabi_ddiv>
 800935a:	ec41 0b1a 	vmov	d10, r0, r1
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	4630      	mov	r0, r6
 8009364:	4639      	mov	r1, r7
 8009366:	f7f7 f94f 	bl	8000608 <__aeabi_dmul>
 800936a:	2300      	movs	r3, #0
 800936c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009370:	9302      	str	r3, [sp, #8]
 8009372:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009376:	46ab      	mov	fp, r5
 8009378:	106d      	asrs	r5, r5, #1
 800937a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800937e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009382:	ec41 0b18 	vmov	d8, r0, r1
 8009386:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800938a:	2200      	movs	r2, #0
 800938c:	4640      	mov	r0, r8
 800938e:	4649      	mov	r1, r9
 8009390:	4614      	mov	r4, r2
 8009392:	461d      	mov	r5, r3
 8009394:	f7f7 f938 	bl	8000608 <__aeabi_dmul>
 8009398:	4602      	mov	r2, r0
 800939a:	460b      	mov	r3, r1
 800939c:	4630      	mov	r0, r6
 800939e:	4639      	mov	r1, r7
 80093a0:	f7f6 ff7a 	bl	8000298 <__aeabi_dsub>
 80093a4:	ec53 2b19 	vmov	r2, r3, d9
 80093a8:	4606      	mov	r6, r0
 80093aa:	460f      	mov	r7, r1
 80093ac:	4620      	mov	r0, r4
 80093ae:	4629      	mov	r1, r5
 80093b0:	f7f6 ff72 	bl	8000298 <__aeabi_dsub>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4650      	mov	r0, sl
 80093ba:	4659      	mov	r1, fp
 80093bc:	f7f6 ff6c 	bl	8000298 <__aeabi_dsub>
 80093c0:	4642      	mov	r2, r8
 80093c2:	464b      	mov	r3, r9
 80093c4:	f7f7 f920 	bl	8000608 <__aeabi_dmul>
 80093c8:	4602      	mov	r2, r0
 80093ca:	460b      	mov	r3, r1
 80093cc:	4630      	mov	r0, r6
 80093ce:	4639      	mov	r1, r7
 80093d0:	f7f6 ff62 	bl	8000298 <__aeabi_dsub>
 80093d4:	ec53 2b1a 	vmov	r2, r3, d10
 80093d8:	f7f7 f916 	bl	8000608 <__aeabi_dmul>
 80093dc:	ec53 2b18 	vmov	r2, r3, d8
 80093e0:	ec41 0b19 	vmov	d9, r0, r1
 80093e4:	ec51 0b18 	vmov	r0, r1, d8
 80093e8:	f7f7 f90e 	bl	8000608 <__aeabi_dmul>
 80093ec:	a37c      	add	r3, pc, #496	; (adr r3, 80095e0 <__ieee754_pow+0x708>)
 80093ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f2:	4604      	mov	r4, r0
 80093f4:	460d      	mov	r5, r1
 80093f6:	f7f7 f907 	bl	8000608 <__aeabi_dmul>
 80093fa:	a37b      	add	r3, pc, #492	; (adr r3, 80095e8 <__ieee754_pow+0x710>)
 80093fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009400:	f7f6 ff4c 	bl	800029c <__adddf3>
 8009404:	4622      	mov	r2, r4
 8009406:	462b      	mov	r3, r5
 8009408:	f7f7 f8fe 	bl	8000608 <__aeabi_dmul>
 800940c:	a378      	add	r3, pc, #480	; (adr r3, 80095f0 <__ieee754_pow+0x718>)
 800940e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009412:	f7f6 ff43 	bl	800029c <__adddf3>
 8009416:	4622      	mov	r2, r4
 8009418:	462b      	mov	r3, r5
 800941a:	f7f7 f8f5 	bl	8000608 <__aeabi_dmul>
 800941e:	a376      	add	r3, pc, #472	; (adr r3, 80095f8 <__ieee754_pow+0x720>)
 8009420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009424:	f7f6 ff3a 	bl	800029c <__adddf3>
 8009428:	4622      	mov	r2, r4
 800942a:	462b      	mov	r3, r5
 800942c:	f7f7 f8ec 	bl	8000608 <__aeabi_dmul>
 8009430:	a373      	add	r3, pc, #460	; (adr r3, 8009600 <__ieee754_pow+0x728>)
 8009432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009436:	f7f6 ff31 	bl	800029c <__adddf3>
 800943a:	4622      	mov	r2, r4
 800943c:	462b      	mov	r3, r5
 800943e:	f7f7 f8e3 	bl	8000608 <__aeabi_dmul>
 8009442:	a371      	add	r3, pc, #452	; (adr r3, 8009608 <__ieee754_pow+0x730>)
 8009444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009448:	f7f6 ff28 	bl	800029c <__adddf3>
 800944c:	4622      	mov	r2, r4
 800944e:	4606      	mov	r6, r0
 8009450:	460f      	mov	r7, r1
 8009452:	462b      	mov	r3, r5
 8009454:	4620      	mov	r0, r4
 8009456:	4629      	mov	r1, r5
 8009458:	f7f7 f8d6 	bl	8000608 <__aeabi_dmul>
 800945c:	4602      	mov	r2, r0
 800945e:	460b      	mov	r3, r1
 8009460:	4630      	mov	r0, r6
 8009462:	4639      	mov	r1, r7
 8009464:	f7f7 f8d0 	bl	8000608 <__aeabi_dmul>
 8009468:	4642      	mov	r2, r8
 800946a:	4604      	mov	r4, r0
 800946c:	460d      	mov	r5, r1
 800946e:	464b      	mov	r3, r9
 8009470:	ec51 0b18 	vmov	r0, r1, d8
 8009474:	f7f6 ff12 	bl	800029c <__adddf3>
 8009478:	ec53 2b19 	vmov	r2, r3, d9
 800947c:	f7f7 f8c4 	bl	8000608 <__aeabi_dmul>
 8009480:	4622      	mov	r2, r4
 8009482:	462b      	mov	r3, r5
 8009484:	f7f6 ff0a 	bl	800029c <__adddf3>
 8009488:	4642      	mov	r2, r8
 800948a:	4682      	mov	sl, r0
 800948c:	468b      	mov	fp, r1
 800948e:	464b      	mov	r3, r9
 8009490:	4640      	mov	r0, r8
 8009492:	4649      	mov	r1, r9
 8009494:	f7f7 f8b8 	bl	8000608 <__aeabi_dmul>
 8009498:	4b6b      	ldr	r3, [pc, #428]	; (8009648 <__ieee754_pow+0x770>)
 800949a:	2200      	movs	r2, #0
 800949c:	4606      	mov	r6, r0
 800949e:	460f      	mov	r7, r1
 80094a0:	f7f6 fefc 	bl	800029c <__adddf3>
 80094a4:	4652      	mov	r2, sl
 80094a6:	465b      	mov	r3, fp
 80094a8:	f7f6 fef8 	bl	800029c <__adddf3>
 80094ac:	2000      	movs	r0, #0
 80094ae:	4604      	mov	r4, r0
 80094b0:	460d      	mov	r5, r1
 80094b2:	4602      	mov	r2, r0
 80094b4:	460b      	mov	r3, r1
 80094b6:	4640      	mov	r0, r8
 80094b8:	4649      	mov	r1, r9
 80094ba:	f7f7 f8a5 	bl	8000608 <__aeabi_dmul>
 80094be:	4b62      	ldr	r3, [pc, #392]	; (8009648 <__ieee754_pow+0x770>)
 80094c0:	4680      	mov	r8, r0
 80094c2:	4689      	mov	r9, r1
 80094c4:	2200      	movs	r2, #0
 80094c6:	4620      	mov	r0, r4
 80094c8:	4629      	mov	r1, r5
 80094ca:	f7f6 fee5 	bl	8000298 <__aeabi_dsub>
 80094ce:	4632      	mov	r2, r6
 80094d0:	463b      	mov	r3, r7
 80094d2:	f7f6 fee1 	bl	8000298 <__aeabi_dsub>
 80094d6:	4602      	mov	r2, r0
 80094d8:	460b      	mov	r3, r1
 80094da:	4650      	mov	r0, sl
 80094dc:	4659      	mov	r1, fp
 80094de:	f7f6 fedb 	bl	8000298 <__aeabi_dsub>
 80094e2:	ec53 2b18 	vmov	r2, r3, d8
 80094e6:	f7f7 f88f 	bl	8000608 <__aeabi_dmul>
 80094ea:	4622      	mov	r2, r4
 80094ec:	4606      	mov	r6, r0
 80094ee:	460f      	mov	r7, r1
 80094f0:	462b      	mov	r3, r5
 80094f2:	ec51 0b19 	vmov	r0, r1, d9
 80094f6:	f7f7 f887 	bl	8000608 <__aeabi_dmul>
 80094fa:	4602      	mov	r2, r0
 80094fc:	460b      	mov	r3, r1
 80094fe:	4630      	mov	r0, r6
 8009500:	4639      	mov	r1, r7
 8009502:	f7f6 fecb 	bl	800029c <__adddf3>
 8009506:	4606      	mov	r6, r0
 8009508:	460f      	mov	r7, r1
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	4640      	mov	r0, r8
 8009510:	4649      	mov	r1, r9
 8009512:	f7f6 fec3 	bl	800029c <__adddf3>
 8009516:	a33e      	add	r3, pc, #248	; (adr r3, 8009610 <__ieee754_pow+0x738>)
 8009518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951c:	2000      	movs	r0, #0
 800951e:	4604      	mov	r4, r0
 8009520:	460d      	mov	r5, r1
 8009522:	f7f7 f871 	bl	8000608 <__aeabi_dmul>
 8009526:	4642      	mov	r2, r8
 8009528:	ec41 0b18 	vmov	d8, r0, r1
 800952c:	464b      	mov	r3, r9
 800952e:	4620      	mov	r0, r4
 8009530:	4629      	mov	r1, r5
 8009532:	f7f6 feb1 	bl	8000298 <__aeabi_dsub>
 8009536:	4602      	mov	r2, r0
 8009538:	460b      	mov	r3, r1
 800953a:	4630      	mov	r0, r6
 800953c:	4639      	mov	r1, r7
 800953e:	f7f6 feab 	bl	8000298 <__aeabi_dsub>
 8009542:	a335      	add	r3, pc, #212	; (adr r3, 8009618 <__ieee754_pow+0x740>)
 8009544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009548:	f7f7 f85e 	bl	8000608 <__aeabi_dmul>
 800954c:	a334      	add	r3, pc, #208	; (adr r3, 8009620 <__ieee754_pow+0x748>)
 800954e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009552:	4606      	mov	r6, r0
 8009554:	460f      	mov	r7, r1
 8009556:	4620      	mov	r0, r4
 8009558:	4629      	mov	r1, r5
 800955a:	f7f7 f855 	bl	8000608 <__aeabi_dmul>
 800955e:	4602      	mov	r2, r0
 8009560:	460b      	mov	r3, r1
 8009562:	4630      	mov	r0, r6
 8009564:	4639      	mov	r1, r7
 8009566:	f7f6 fe99 	bl	800029c <__adddf3>
 800956a:	9a07      	ldr	r2, [sp, #28]
 800956c:	4b37      	ldr	r3, [pc, #220]	; (800964c <__ieee754_pow+0x774>)
 800956e:	4413      	add	r3, r2
 8009570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009574:	f7f6 fe92 	bl	800029c <__adddf3>
 8009578:	4682      	mov	sl, r0
 800957a:	9805      	ldr	r0, [sp, #20]
 800957c:	468b      	mov	fp, r1
 800957e:	f7f6 ffd9 	bl	8000534 <__aeabi_i2d>
 8009582:	9a07      	ldr	r2, [sp, #28]
 8009584:	4b32      	ldr	r3, [pc, #200]	; (8009650 <__ieee754_pow+0x778>)
 8009586:	4413      	add	r3, r2
 8009588:	e9d3 8900 	ldrd	r8, r9, [r3]
 800958c:	4606      	mov	r6, r0
 800958e:	460f      	mov	r7, r1
 8009590:	4652      	mov	r2, sl
 8009592:	465b      	mov	r3, fp
 8009594:	ec51 0b18 	vmov	r0, r1, d8
 8009598:	f7f6 fe80 	bl	800029c <__adddf3>
 800959c:	4642      	mov	r2, r8
 800959e:	464b      	mov	r3, r9
 80095a0:	f7f6 fe7c 	bl	800029c <__adddf3>
 80095a4:	4632      	mov	r2, r6
 80095a6:	463b      	mov	r3, r7
 80095a8:	f7f6 fe78 	bl	800029c <__adddf3>
 80095ac:	2000      	movs	r0, #0
 80095ae:	4632      	mov	r2, r6
 80095b0:	463b      	mov	r3, r7
 80095b2:	4604      	mov	r4, r0
 80095b4:	460d      	mov	r5, r1
 80095b6:	f7f6 fe6f 	bl	8000298 <__aeabi_dsub>
 80095ba:	4642      	mov	r2, r8
 80095bc:	464b      	mov	r3, r9
 80095be:	f7f6 fe6b 	bl	8000298 <__aeabi_dsub>
 80095c2:	ec53 2b18 	vmov	r2, r3, d8
 80095c6:	f7f6 fe67 	bl	8000298 <__aeabi_dsub>
 80095ca:	4602      	mov	r2, r0
 80095cc:	460b      	mov	r3, r1
 80095ce:	4650      	mov	r0, sl
 80095d0:	4659      	mov	r1, fp
 80095d2:	e610      	b.n	80091f6 <__ieee754_pow+0x31e>
 80095d4:	2401      	movs	r4, #1
 80095d6:	e6a1      	b.n	800931c <__ieee754_pow+0x444>
 80095d8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009628 <__ieee754_pow+0x750>
 80095dc:	e617      	b.n	800920e <__ieee754_pow+0x336>
 80095de:	bf00      	nop
 80095e0:	4a454eef 	.word	0x4a454eef
 80095e4:	3fca7e28 	.word	0x3fca7e28
 80095e8:	93c9db65 	.word	0x93c9db65
 80095ec:	3fcd864a 	.word	0x3fcd864a
 80095f0:	a91d4101 	.word	0xa91d4101
 80095f4:	3fd17460 	.word	0x3fd17460
 80095f8:	518f264d 	.word	0x518f264d
 80095fc:	3fd55555 	.word	0x3fd55555
 8009600:	db6fabff 	.word	0xdb6fabff
 8009604:	3fdb6db6 	.word	0x3fdb6db6
 8009608:	33333303 	.word	0x33333303
 800960c:	3fe33333 	.word	0x3fe33333
 8009610:	e0000000 	.word	0xe0000000
 8009614:	3feec709 	.word	0x3feec709
 8009618:	dc3a03fd 	.word	0xdc3a03fd
 800961c:	3feec709 	.word	0x3feec709
 8009620:	145b01f5 	.word	0x145b01f5
 8009624:	be3e2fe0 	.word	0xbe3e2fe0
 8009628:	00000000 	.word	0x00000000
 800962c:	3ff00000 	.word	0x3ff00000
 8009630:	7ff00000 	.word	0x7ff00000
 8009634:	43400000 	.word	0x43400000
 8009638:	0003988e 	.word	0x0003988e
 800963c:	000bb679 	.word	0x000bb679
 8009640:	0800a540 	.word	0x0800a540
 8009644:	3ff00000 	.word	0x3ff00000
 8009648:	40080000 	.word	0x40080000
 800964c:	0800a560 	.word	0x0800a560
 8009650:	0800a550 	.word	0x0800a550
 8009654:	a3b3      	add	r3, pc, #716	; (adr r3, 8009924 <__ieee754_pow+0xa4c>)
 8009656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965a:	4640      	mov	r0, r8
 800965c:	4649      	mov	r1, r9
 800965e:	f7f6 fe1d 	bl	800029c <__adddf3>
 8009662:	4622      	mov	r2, r4
 8009664:	ec41 0b1a 	vmov	d10, r0, r1
 8009668:	462b      	mov	r3, r5
 800966a:	4630      	mov	r0, r6
 800966c:	4639      	mov	r1, r7
 800966e:	f7f6 fe13 	bl	8000298 <__aeabi_dsub>
 8009672:	4602      	mov	r2, r0
 8009674:	460b      	mov	r3, r1
 8009676:	ec51 0b1a 	vmov	r0, r1, d10
 800967a:	f7f7 fa55 	bl	8000b28 <__aeabi_dcmpgt>
 800967e:	2800      	cmp	r0, #0
 8009680:	f47f ae04 	bne.w	800928c <__ieee754_pow+0x3b4>
 8009684:	4aa2      	ldr	r2, [pc, #648]	; (8009910 <__ieee754_pow+0xa38>)
 8009686:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800968a:	4293      	cmp	r3, r2
 800968c:	f340 8107 	ble.w	800989e <__ieee754_pow+0x9c6>
 8009690:	151b      	asrs	r3, r3, #20
 8009692:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009696:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800969a:	fa4a fa03 	asr.w	sl, sl, r3
 800969e:	44da      	add	sl, fp
 80096a0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80096a4:	489b      	ldr	r0, [pc, #620]	; (8009914 <__ieee754_pow+0xa3c>)
 80096a6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80096aa:	4108      	asrs	r0, r1
 80096ac:	ea00 030a 	and.w	r3, r0, sl
 80096b0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80096b4:	f1c1 0114 	rsb	r1, r1, #20
 80096b8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80096bc:	fa4a fa01 	asr.w	sl, sl, r1
 80096c0:	f1bb 0f00 	cmp.w	fp, #0
 80096c4:	f04f 0200 	mov.w	r2, #0
 80096c8:	4620      	mov	r0, r4
 80096ca:	4629      	mov	r1, r5
 80096cc:	bfb8      	it	lt
 80096ce:	f1ca 0a00 	rsblt	sl, sl, #0
 80096d2:	f7f6 fde1 	bl	8000298 <__aeabi_dsub>
 80096d6:	ec41 0b19 	vmov	d9, r0, r1
 80096da:	4642      	mov	r2, r8
 80096dc:	464b      	mov	r3, r9
 80096de:	ec51 0b19 	vmov	r0, r1, d9
 80096e2:	f7f6 fddb 	bl	800029c <__adddf3>
 80096e6:	a37a      	add	r3, pc, #488	; (adr r3, 80098d0 <__ieee754_pow+0x9f8>)
 80096e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ec:	2000      	movs	r0, #0
 80096ee:	4604      	mov	r4, r0
 80096f0:	460d      	mov	r5, r1
 80096f2:	f7f6 ff89 	bl	8000608 <__aeabi_dmul>
 80096f6:	ec53 2b19 	vmov	r2, r3, d9
 80096fa:	4606      	mov	r6, r0
 80096fc:	460f      	mov	r7, r1
 80096fe:	4620      	mov	r0, r4
 8009700:	4629      	mov	r1, r5
 8009702:	f7f6 fdc9 	bl	8000298 <__aeabi_dsub>
 8009706:	4602      	mov	r2, r0
 8009708:	460b      	mov	r3, r1
 800970a:	4640      	mov	r0, r8
 800970c:	4649      	mov	r1, r9
 800970e:	f7f6 fdc3 	bl	8000298 <__aeabi_dsub>
 8009712:	a371      	add	r3, pc, #452	; (adr r3, 80098d8 <__ieee754_pow+0xa00>)
 8009714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009718:	f7f6 ff76 	bl	8000608 <__aeabi_dmul>
 800971c:	a370      	add	r3, pc, #448	; (adr r3, 80098e0 <__ieee754_pow+0xa08>)
 800971e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009722:	4680      	mov	r8, r0
 8009724:	4689      	mov	r9, r1
 8009726:	4620      	mov	r0, r4
 8009728:	4629      	mov	r1, r5
 800972a:	f7f6 ff6d 	bl	8000608 <__aeabi_dmul>
 800972e:	4602      	mov	r2, r0
 8009730:	460b      	mov	r3, r1
 8009732:	4640      	mov	r0, r8
 8009734:	4649      	mov	r1, r9
 8009736:	f7f6 fdb1 	bl	800029c <__adddf3>
 800973a:	4604      	mov	r4, r0
 800973c:	460d      	mov	r5, r1
 800973e:	4602      	mov	r2, r0
 8009740:	460b      	mov	r3, r1
 8009742:	4630      	mov	r0, r6
 8009744:	4639      	mov	r1, r7
 8009746:	f7f6 fda9 	bl	800029c <__adddf3>
 800974a:	4632      	mov	r2, r6
 800974c:	463b      	mov	r3, r7
 800974e:	4680      	mov	r8, r0
 8009750:	4689      	mov	r9, r1
 8009752:	f7f6 fda1 	bl	8000298 <__aeabi_dsub>
 8009756:	4602      	mov	r2, r0
 8009758:	460b      	mov	r3, r1
 800975a:	4620      	mov	r0, r4
 800975c:	4629      	mov	r1, r5
 800975e:	f7f6 fd9b 	bl	8000298 <__aeabi_dsub>
 8009762:	4642      	mov	r2, r8
 8009764:	4606      	mov	r6, r0
 8009766:	460f      	mov	r7, r1
 8009768:	464b      	mov	r3, r9
 800976a:	4640      	mov	r0, r8
 800976c:	4649      	mov	r1, r9
 800976e:	f7f6 ff4b 	bl	8000608 <__aeabi_dmul>
 8009772:	a35d      	add	r3, pc, #372	; (adr r3, 80098e8 <__ieee754_pow+0xa10>)
 8009774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009778:	4604      	mov	r4, r0
 800977a:	460d      	mov	r5, r1
 800977c:	f7f6 ff44 	bl	8000608 <__aeabi_dmul>
 8009780:	a35b      	add	r3, pc, #364	; (adr r3, 80098f0 <__ieee754_pow+0xa18>)
 8009782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009786:	f7f6 fd87 	bl	8000298 <__aeabi_dsub>
 800978a:	4622      	mov	r2, r4
 800978c:	462b      	mov	r3, r5
 800978e:	f7f6 ff3b 	bl	8000608 <__aeabi_dmul>
 8009792:	a359      	add	r3, pc, #356	; (adr r3, 80098f8 <__ieee754_pow+0xa20>)
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	f7f6 fd80 	bl	800029c <__adddf3>
 800979c:	4622      	mov	r2, r4
 800979e:	462b      	mov	r3, r5
 80097a0:	f7f6 ff32 	bl	8000608 <__aeabi_dmul>
 80097a4:	a356      	add	r3, pc, #344	; (adr r3, 8009900 <__ieee754_pow+0xa28>)
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	f7f6 fd75 	bl	8000298 <__aeabi_dsub>
 80097ae:	4622      	mov	r2, r4
 80097b0:	462b      	mov	r3, r5
 80097b2:	f7f6 ff29 	bl	8000608 <__aeabi_dmul>
 80097b6:	a354      	add	r3, pc, #336	; (adr r3, 8009908 <__ieee754_pow+0xa30>)
 80097b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097bc:	f7f6 fd6e 	bl	800029c <__adddf3>
 80097c0:	4622      	mov	r2, r4
 80097c2:	462b      	mov	r3, r5
 80097c4:	f7f6 ff20 	bl	8000608 <__aeabi_dmul>
 80097c8:	4602      	mov	r2, r0
 80097ca:	460b      	mov	r3, r1
 80097cc:	4640      	mov	r0, r8
 80097ce:	4649      	mov	r1, r9
 80097d0:	f7f6 fd62 	bl	8000298 <__aeabi_dsub>
 80097d4:	4604      	mov	r4, r0
 80097d6:	460d      	mov	r5, r1
 80097d8:	4602      	mov	r2, r0
 80097da:	460b      	mov	r3, r1
 80097dc:	4640      	mov	r0, r8
 80097de:	4649      	mov	r1, r9
 80097e0:	f7f6 ff12 	bl	8000608 <__aeabi_dmul>
 80097e4:	2200      	movs	r2, #0
 80097e6:	ec41 0b19 	vmov	d9, r0, r1
 80097ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097ee:	4620      	mov	r0, r4
 80097f0:	4629      	mov	r1, r5
 80097f2:	f7f6 fd51 	bl	8000298 <__aeabi_dsub>
 80097f6:	4602      	mov	r2, r0
 80097f8:	460b      	mov	r3, r1
 80097fa:	ec51 0b19 	vmov	r0, r1, d9
 80097fe:	f7f7 f82d 	bl	800085c <__aeabi_ddiv>
 8009802:	4632      	mov	r2, r6
 8009804:	4604      	mov	r4, r0
 8009806:	460d      	mov	r5, r1
 8009808:	463b      	mov	r3, r7
 800980a:	4640      	mov	r0, r8
 800980c:	4649      	mov	r1, r9
 800980e:	f7f6 fefb 	bl	8000608 <__aeabi_dmul>
 8009812:	4632      	mov	r2, r6
 8009814:	463b      	mov	r3, r7
 8009816:	f7f6 fd41 	bl	800029c <__adddf3>
 800981a:	4602      	mov	r2, r0
 800981c:	460b      	mov	r3, r1
 800981e:	4620      	mov	r0, r4
 8009820:	4629      	mov	r1, r5
 8009822:	f7f6 fd39 	bl	8000298 <__aeabi_dsub>
 8009826:	4642      	mov	r2, r8
 8009828:	464b      	mov	r3, r9
 800982a:	f7f6 fd35 	bl	8000298 <__aeabi_dsub>
 800982e:	460b      	mov	r3, r1
 8009830:	4602      	mov	r2, r0
 8009832:	4939      	ldr	r1, [pc, #228]	; (8009918 <__ieee754_pow+0xa40>)
 8009834:	2000      	movs	r0, #0
 8009836:	f7f6 fd2f 	bl	8000298 <__aeabi_dsub>
 800983a:	ec41 0b10 	vmov	d0, r0, r1
 800983e:	ee10 3a90 	vmov	r3, s1
 8009842:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800984a:	da2b      	bge.n	80098a4 <__ieee754_pow+0x9cc>
 800984c:	4650      	mov	r0, sl
 800984e:	f000 fa1b 	bl	8009c88 <scalbn>
 8009852:	ec51 0b10 	vmov	r0, r1, d0
 8009856:	ec53 2b18 	vmov	r2, r3, d8
 800985a:	f7ff bbee 	b.w	800903a <__ieee754_pow+0x162>
 800985e:	4b2f      	ldr	r3, [pc, #188]	; (800991c <__ieee754_pow+0xa44>)
 8009860:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009864:	429e      	cmp	r6, r3
 8009866:	f77f af0d 	ble.w	8009684 <__ieee754_pow+0x7ac>
 800986a:	4b2d      	ldr	r3, [pc, #180]	; (8009920 <__ieee754_pow+0xa48>)
 800986c:	440b      	add	r3, r1
 800986e:	4303      	orrs	r3, r0
 8009870:	d009      	beq.n	8009886 <__ieee754_pow+0x9ae>
 8009872:	ec51 0b18 	vmov	r0, r1, d8
 8009876:	2200      	movs	r2, #0
 8009878:	2300      	movs	r3, #0
 800987a:	f7f7 f937 	bl	8000aec <__aeabi_dcmplt>
 800987e:	3800      	subs	r0, #0
 8009880:	bf18      	it	ne
 8009882:	2001      	movne	r0, #1
 8009884:	e448      	b.n	8009118 <__ieee754_pow+0x240>
 8009886:	4622      	mov	r2, r4
 8009888:	462b      	mov	r3, r5
 800988a:	f7f6 fd05 	bl	8000298 <__aeabi_dsub>
 800988e:	4642      	mov	r2, r8
 8009890:	464b      	mov	r3, r9
 8009892:	f7f7 f93f 	bl	8000b14 <__aeabi_dcmpge>
 8009896:	2800      	cmp	r0, #0
 8009898:	f43f aef4 	beq.w	8009684 <__ieee754_pow+0x7ac>
 800989c:	e7e9      	b.n	8009872 <__ieee754_pow+0x99a>
 800989e:	f04f 0a00 	mov.w	sl, #0
 80098a2:	e71a      	b.n	80096da <__ieee754_pow+0x802>
 80098a4:	ec51 0b10 	vmov	r0, r1, d0
 80098a8:	4619      	mov	r1, r3
 80098aa:	e7d4      	b.n	8009856 <__ieee754_pow+0x97e>
 80098ac:	491a      	ldr	r1, [pc, #104]	; (8009918 <__ieee754_pow+0xa40>)
 80098ae:	2000      	movs	r0, #0
 80098b0:	f7ff bb31 	b.w	8008f16 <__ieee754_pow+0x3e>
 80098b4:	2000      	movs	r0, #0
 80098b6:	2100      	movs	r1, #0
 80098b8:	f7ff bb2d 	b.w	8008f16 <__ieee754_pow+0x3e>
 80098bc:	4630      	mov	r0, r6
 80098be:	4639      	mov	r1, r7
 80098c0:	f7ff bb29 	b.w	8008f16 <__ieee754_pow+0x3e>
 80098c4:	9204      	str	r2, [sp, #16]
 80098c6:	f7ff bb7b 	b.w	8008fc0 <__ieee754_pow+0xe8>
 80098ca:	2300      	movs	r3, #0
 80098cc:	f7ff bb65 	b.w	8008f9a <__ieee754_pow+0xc2>
 80098d0:	00000000 	.word	0x00000000
 80098d4:	3fe62e43 	.word	0x3fe62e43
 80098d8:	fefa39ef 	.word	0xfefa39ef
 80098dc:	3fe62e42 	.word	0x3fe62e42
 80098e0:	0ca86c39 	.word	0x0ca86c39
 80098e4:	be205c61 	.word	0xbe205c61
 80098e8:	72bea4d0 	.word	0x72bea4d0
 80098ec:	3e663769 	.word	0x3e663769
 80098f0:	c5d26bf1 	.word	0xc5d26bf1
 80098f4:	3ebbbd41 	.word	0x3ebbbd41
 80098f8:	af25de2c 	.word	0xaf25de2c
 80098fc:	3f11566a 	.word	0x3f11566a
 8009900:	16bebd93 	.word	0x16bebd93
 8009904:	3f66c16c 	.word	0x3f66c16c
 8009908:	5555553e 	.word	0x5555553e
 800990c:	3fc55555 	.word	0x3fc55555
 8009910:	3fe00000 	.word	0x3fe00000
 8009914:	fff00000 	.word	0xfff00000
 8009918:	3ff00000 	.word	0x3ff00000
 800991c:	4090cbff 	.word	0x4090cbff
 8009920:	3f6f3400 	.word	0x3f6f3400
 8009924:	652b82fe 	.word	0x652b82fe
 8009928:	3c971547 	.word	0x3c971547
 800992c:	00000000 	.word	0x00000000

08009930 <atan>:
 8009930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009934:	ec55 4b10 	vmov	r4, r5, d0
 8009938:	4bc3      	ldr	r3, [pc, #780]	; (8009c48 <atan+0x318>)
 800993a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800993e:	429e      	cmp	r6, r3
 8009940:	46ab      	mov	fp, r5
 8009942:	dd18      	ble.n	8009976 <atan+0x46>
 8009944:	4bc1      	ldr	r3, [pc, #772]	; (8009c4c <atan+0x31c>)
 8009946:	429e      	cmp	r6, r3
 8009948:	dc01      	bgt.n	800994e <atan+0x1e>
 800994a:	d109      	bne.n	8009960 <atan+0x30>
 800994c:	b144      	cbz	r4, 8009960 <atan+0x30>
 800994e:	4622      	mov	r2, r4
 8009950:	462b      	mov	r3, r5
 8009952:	4620      	mov	r0, r4
 8009954:	4629      	mov	r1, r5
 8009956:	f7f6 fca1 	bl	800029c <__adddf3>
 800995a:	4604      	mov	r4, r0
 800995c:	460d      	mov	r5, r1
 800995e:	e006      	b.n	800996e <atan+0x3e>
 8009960:	f1bb 0f00 	cmp.w	fp, #0
 8009964:	f300 8131 	bgt.w	8009bca <atan+0x29a>
 8009968:	a59b      	add	r5, pc, #620	; (adr r5, 8009bd8 <atan+0x2a8>)
 800996a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800996e:	ec45 4b10 	vmov	d0, r4, r5
 8009972:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009976:	4bb6      	ldr	r3, [pc, #728]	; (8009c50 <atan+0x320>)
 8009978:	429e      	cmp	r6, r3
 800997a:	dc14      	bgt.n	80099a6 <atan+0x76>
 800997c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009980:	429e      	cmp	r6, r3
 8009982:	dc0d      	bgt.n	80099a0 <atan+0x70>
 8009984:	a396      	add	r3, pc, #600	; (adr r3, 8009be0 <atan+0x2b0>)
 8009986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998a:	ee10 0a10 	vmov	r0, s0
 800998e:	4629      	mov	r1, r5
 8009990:	f7f6 fc84 	bl	800029c <__adddf3>
 8009994:	4baf      	ldr	r3, [pc, #700]	; (8009c54 <atan+0x324>)
 8009996:	2200      	movs	r2, #0
 8009998:	f7f7 f8c6 	bl	8000b28 <__aeabi_dcmpgt>
 800999c:	2800      	cmp	r0, #0
 800999e:	d1e6      	bne.n	800996e <atan+0x3e>
 80099a0:	f04f 3aff 	mov.w	sl, #4294967295
 80099a4:	e02b      	b.n	80099fe <atan+0xce>
 80099a6:	f000 f963 	bl	8009c70 <fabs>
 80099aa:	4bab      	ldr	r3, [pc, #684]	; (8009c58 <atan+0x328>)
 80099ac:	429e      	cmp	r6, r3
 80099ae:	ec55 4b10 	vmov	r4, r5, d0
 80099b2:	f300 80bf 	bgt.w	8009b34 <atan+0x204>
 80099b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80099ba:	429e      	cmp	r6, r3
 80099bc:	f300 80a0 	bgt.w	8009b00 <atan+0x1d0>
 80099c0:	ee10 2a10 	vmov	r2, s0
 80099c4:	ee10 0a10 	vmov	r0, s0
 80099c8:	462b      	mov	r3, r5
 80099ca:	4629      	mov	r1, r5
 80099cc:	f7f6 fc66 	bl	800029c <__adddf3>
 80099d0:	4ba0      	ldr	r3, [pc, #640]	; (8009c54 <atan+0x324>)
 80099d2:	2200      	movs	r2, #0
 80099d4:	f7f6 fc60 	bl	8000298 <__aeabi_dsub>
 80099d8:	2200      	movs	r2, #0
 80099da:	4606      	mov	r6, r0
 80099dc:	460f      	mov	r7, r1
 80099de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80099e2:	4620      	mov	r0, r4
 80099e4:	4629      	mov	r1, r5
 80099e6:	f7f6 fc59 	bl	800029c <__adddf3>
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	4630      	mov	r0, r6
 80099f0:	4639      	mov	r1, r7
 80099f2:	f7f6 ff33 	bl	800085c <__aeabi_ddiv>
 80099f6:	f04f 0a00 	mov.w	sl, #0
 80099fa:	4604      	mov	r4, r0
 80099fc:	460d      	mov	r5, r1
 80099fe:	4622      	mov	r2, r4
 8009a00:	462b      	mov	r3, r5
 8009a02:	4620      	mov	r0, r4
 8009a04:	4629      	mov	r1, r5
 8009a06:	f7f6 fdff 	bl	8000608 <__aeabi_dmul>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	4680      	mov	r8, r0
 8009a10:	4689      	mov	r9, r1
 8009a12:	f7f6 fdf9 	bl	8000608 <__aeabi_dmul>
 8009a16:	a374      	add	r3, pc, #464	; (adr r3, 8009be8 <atan+0x2b8>)
 8009a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1c:	4606      	mov	r6, r0
 8009a1e:	460f      	mov	r7, r1
 8009a20:	f7f6 fdf2 	bl	8000608 <__aeabi_dmul>
 8009a24:	a372      	add	r3, pc, #456	; (adr r3, 8009bf0 <atan+0x2c0>)
 8009a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2a:	f7f6 fc37 	bl	800029c <__adddf3>
 8009a2e:	4632      	mov	r2, r6
 8009a30:	463b      	mov	r3, r7
 8009a32:	f7f6 fde9 	bl	8000608 <__aeabi_dmul>
 8009a36:	a370      	add	r3, pc, #448	; (adr r3, 8009bf8 <atan+0x2c8>)
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	f7f6 fc2e 	bl	800029c <__adddf3>
 8009a40:	4632      	mov	r2, r6
 8009a42:	463b      	mov	r3, r7
 8009a44:	f7f6 fde0 	bl	8000608 <__aeabi_dmul>
 8009a48:	a36d      	add	r3, pc, #436	; (adr r3, 8009c00 <atan+0x2d0>)
 8009a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4e:	f7f6 fc25 	bl	800029c <__adddf3>
 8009a52:	4632      	mov	r2, r6
 8009a54:	463b      	mov	r3, r7
 8009a56:	f7f6 fdd7 	bl	8000608 <__aeabi_dmul>
 8009a5a:	a36b      	add	r3, pc, #428	; (adr r3, 8009c08 <atan+0x2d8>)
 8009a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a60:	f7f6 fc1c 	bl	800029c <__adddf3>
 8009a64:	4632      	mov	r2, r6
 8009a66:	463b      	mov	r3, r7
 8009a68:	f7f6 fdce 	bl	8000608 <__aeabi_dmul>
 8009a6c:	a368      	add	r3, pc, #416	; (adr r3, 8009c10 <atan+0x2e0>)
 8009a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a72:	f7f6 fc13 	bl	800029c <__adddf3>
 8009a76:	4642      	mov	r2, r8
 8009a78:	464b      	mov	r3, r9
 8009a7a:	f7f6 fdc5 	bl	8000608 <__aeabi_dmul>
 8009a7e:	a366      	add	r3, pc, #408	; (adr r3, 8009c18 <atan+0x2e8>)
 8009a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a84:	4680      	mov	r8, r0
 8009a86:	4689      	mov	r9, r1
 8009a88:	4630      	mov	r0, r6
 8009a8a:	4639      	mov	r1, r7
 8009a8c:	f7f6 fdbc 	bl	8000608 <__aeabi_dmul>
 8009a90:	a363      	add	r3, pc, #396	; (adr r3, 8009c20 <atan+0x2f0>)
 8009a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a96:	f7f6 fbff 	bl	8000298 <__aeabi_dsub>
 8009a9a:	4632      	mov	r2, r6
 8009a9c:	463b      	mov	r3, r7
 8009a9e:	f7f6 fdb3 	bl	8000608 <__aeabi_dmul>
 8009aa2:	a361      	add	r3, pc, #388	; (adr r3, 8009c28 <atan+0x2f8>)
 8009aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa8:	f7f6 fbf6 	bl	8000298 <__aeabi_dsub>
 8009aac:	4632      	mov	r2, r6
 8009aae:	463b      	mov	r3, r7
 8009ab0:	f7f6 fdaa 	bl	8000608 <__aeabi_dmul>
 8009ab4:	a35e      	add	r3, pc, #376	; (adr r3, 8009c30 <atan+0x300>)
 8009ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aba:	f7f6 fbed 	bl	8000298 <__aeabi_dsub>
 8009abe:	4632      	mov	r2, r6
 8009ac0:	463b      	mov	r3, r7
 8009ac2:	f7f6 fda1 	bl	8000608 <__aeabi_dmul>
 8009ac6:	a35c      	add	r3, pc, #368	; (adr r3, 8009c38 <atan+0x308>)
 8009ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009acc:	f7f6 fbe4 	bl	8000298 <__aeabi_dsub>
 8009ad0:	4632      	mov	r2, r6
 8009ad2:	463b      	mov	r3, r7
 8009ad4:	f7f6 fd98 	bl	8000608 <__aeabi_dmul>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	460b      	mov	r3, r1
 8009adc:	4640      	mov	r0, r8
 8009ade:	4649      	mov	r1, r9
 8009ae0:	f7f6 fbdc 	bl	800029c <__adddf3>
 8009ae4:	4622      	mov	r2, r4
 8009ae6:	462b      	mov	r3, r5
 8009ae8:	f7f6 fd8e 	bl	8000608 <__aeabi_dmul>
 8009aec:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009af0:	4602      	mov	r2, r0
 8009af2:	460b      	mov	r3, r1
 8009af4:	d14b      	bne.n	8009b8e <atan+0x25e>
 8009af6:	4620      	mov	r0, r4
 8009af8:	4629      	mov	r1, r5
 8009afa:	f7f6 fbcd 	bl	8000298 <__aeabi_dsub>
 8009afe:	e72c      	b.n	800995a <atan+0x2a>
 8009b00:	ee10 0a10 	vmov	r0, s0
 8009b04:	4b53      	ldr	r3, [pc, #332]	; (8009c54 <atan+0x324>)
 8009b06:	2200      	movs	r2, #0
 8009b08:	4629      	mov	r1, r5
 8009b0a:	f7f6 fbc5 	bl	8000298 <__aeabi_dsub>
 8009b0e:	4b51      	ldr	r3, [pc, #324]	; (8009c54 <atan+0x324>)
 8009b10:	4606      	mov	r6, r0
 8009b12:	460f      	mov	r7, r1
 8009b14:	2200      	movs	r2, #0
 8009b16:	4620      	mov	r0, r4
 8009b18:	4629      	mov	r1, r5
 8009b1a:	f7f6 fbbf 	bl	800029c <__adddf3>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	460b      	mov	r3, r1
 8009b22:	4630      	mov	r0, r6
 8009b24:	4639      	mov	r1, r7
 8009b26:	f7f6 fe99 	bl	800085c <__aeabi_ddiv>
 8009b2a:	f04f 0a01 	mov.w	sl, #1
 8009b2e:	4604      	mov	r4, r0
 8009b30:	460d      	mov	r5, r1
 8009b32:	e764      	b.n	80099fe <atan+0xce>
 8009b34:	4b49      	ldr	r3, [pc, #292]	; (8009c5c <atan+0x32c>)
 8009b36:	429e      	cmp	r6, r3
 8009b38:	da1d      	bge.n	8009b76 <atan+0x246>
 8009b3a:	ee10 0a10 	vmov	r0, s0
 8009b3e:	4b48      	ldr	r3, [pc, #288]	; (8009c60 <atan+0x330>)
 8009b40:	2200      	movs	r2, #0
 8009b42:	4629      	mov	r1, r5
 8009b44:	f7f6 fba8 	bl	8000298 <__aeabi_dsub>
 8009b48:	4b45      	ldr	r3, [pc, #276]	; (8009c60 <atan+0x330>)
 8009b4a:	4606      	mov	r6, r0
 8009b4c:	460f      	mov	r7, r1
 8009b4e:	2200      	movs	r2, #0
 8009b50:	4620      	mov	r0, r4
 8009b52:	4629      	mov	r1, r5
 8009b54:	f7f6 fd58 	bl	8000608 <__aeabi_dmul>
 8009b58:	4b3e      	ldr	r3, [pc, #248]	; (8009c54 <atan+0x324>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f7f6 fb9e 	bl	800029c <__adddf3>
 8009b60:	4602      	mov	r2, r0
 8009b62:	460b      	mov	r3, r1
 8009b64:	4630      	mov	r0, r6
 8009b66:	4639      	mov	r1, r7
 8009b68:	f7f6 fe78 	bl	800085c <__aeabi_ddiv>
 8009b6c:	f04f 0a02 	mov.w	sl, #2
 8009b70:	4604      	mov	r4, r0
 8009b72:	460d      	mov	r5, r1
 8009b74:	e743      	b.n	80099fe <atan+0xce>
 8009b76:	462b      	mov	r3, r5
 8009b78:	ee10 2a10 	vmov	r2, s0
 8009b7c:	4939      	ldr	r1, [pc, #228]	; (8009c64 <atan+0x334>)
 8009b7e:	2000      	movs	r0, #0
 8009b80:	f7f6 fe6c 	bl	800085c <__aeabi_ddiv>
 8009b84:	f04f 0a03 	mov.w	sl, #3
 8009b88:	4604      	mov	r4, r0
 8009b8a:	460d      	mov	r5, r1
 8009b8c:	e737      	b.n	80099fe <atan+0xce>
 8009b8e:	4b36      	ldr	r3, [pc, #216]	; (8009c68 <atan+0x338>)
 8009b90:	4e36      	ldr	r6, [pc, #216]	; (8009c6c <atan+0x33c>)
 8009b92:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9a:	f7f6 fb7d 	bl	8000298 <__aeabi_dsub>
 8009b9e:	4622      	mov	r2, r4
 8009ba0:	462b      	mov	r3, r5
 8009ba2:	f7f6 fb79 	bl	8000298 <__aeabi_dsub>
 8009ba6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009baa:	4602      	mov	r2, r0
 8009bac:	460b      	mov	r3, r1
 8009bae:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009bb2:	f7f6 fb71 	bl	8000298 <__aeabi_dsub>
 8009bb6:	f1bb 0f00 	cmp.w	fp, #0
 8009bba:	4604      	mov	r4, r0
 8009bbc:	460d      	mov	r5, r1
 8009bbe:	f6bf aed6 	bge.w	800996e <atan+0x3e>
 8009bc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bc6:	461d      	mov	r5, r3
 8009bc8:	e6d1      	b.n	800996e <atan+0x3e>
 8009bca:	a51d      	add	r5, pc, #116	; (adr r5, 8009c40 <atan+0x310>)
 8009bcc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009bd0:	e6cd      	b.n	800996e <atan+0x3e>
 8009bd2:	bf00      	nop
 8009bd4:	f3af 8000 	nop.w
 8009bd8:	54442d18 	.word	0x54442d18
 8009bdc:	bff921fb 	.word	0xbff921fb
 8009be0:	8800759c 	.word	0x8800759c
 8009be4:	7e37e43c 	.word	0x7e37e43c
 8009be8:	e322da11 	.word	0xe322da11
 8009bec:	3f90ad3a 	.word	0x3f90ad3a
 8009bf0:	24760deb 	.word	0x24760deb
 8009bf4:	3fa97b4b 	.word	0x3fa97b4b
 8009bf8:	a0d03d51 	.word	0xa0d03d51
 8009bfc:	3fb10d66 	.word	0x3fb10d66
 8009c00:	c54c206e 	.word	0xc54c206e
 8009c04:	3fb745cd 	.word	0x3fb745cd
 8009c08:	920083ff 	.word	0x920083ff
 8009c0c:	3fc24924 	.word	0x3fc24924
 8009c10:	5555550d 	.word	0x5555550d
 8009c14:	3fd55555 	.word	0x3fd55555
 8009c18:	2c6a6c2f 	.word	0x2c6a6c2f
 8009c1c:	bfa2b444 	.word	0xbfa2b444
 8009c20:	52defd9a 	.word	0x52defd9a
 8009c24:	3fadde2d 	.word	0x3fadde2d
 8009c28:	af749a6d 	.word	0xaf749a6d
 8009c2c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009c30:	fe231671 	.word	0xfe231671
 8009c34:	3fbc71c6 	.word	0x3fbc71c6
 8009c38:	9998ebc4 	.word	0x9998ebc4
 8009c3c:	3fc99999 	.word	0x3fc99999
 8009c40:	54442d18 	.word	0x54442d18
 8009c44:	3ff921fb 	.word	0x3ff921fb
 8009c48:	440fffff 	.word	0x440fffff
 8009c4c:	7ff00000 	.word	0x7ff00000
 8009c50:	3fdbffff 	.word	0x3fdbffff
 8009c54:	3ff00000 	.word	0x3ff00000
 8009c58:	3ff2ffff 	.word	0x3ff2ffff
 8009c5c:	40038000 	.word	0x40038000
 8009c60:	3ff80000 	.word	0x3ff80000
 8009c64:	bff00000 	.word	0xbff00000
 8009c68:	0800a590 	.word	0x0800a590
 8009c6c:	0800a570 	.word	0x0800a570

08009c70 <fabs>:
 8009c70:	ec51 0b10 	vmov	r0, r1, d0
 8009c74:	ee10 2a10 	vmov	r2, s0
 8009c78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009c7c:	ec43 2b10 	vmov	d0, r2, r3
 8009c80:	4770      	bx	lr
 8009c82:	0000      	movs	r0, r0
 8009c84:	0000      	movs	r0, r0
	...

08009c88 <scalbn>:
 8009c88:	b570      	push	{r4, r5, r6, lr}
 8009c8a:	ec55 4b10 	vmov	r4, r5, d0
 8009c8e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009c92:	4606      	mov	r6, r0
 8009c94:	462b      	mov	r3, r5
 8009c96:	b999      	cbnz	r1, 8009cc0 <scalbn+0x38>
 8009c98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009c9c:	4323      	orrs	r3, r4
 8009c9e:	d03f      	beq.n	8009d20 <scalbn+0x98>
 8009ca0:	4b35      	ldr	r3, [pc, #212]	; (8009d78 <scalbn+0xf0>)
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	ee10 0a10 	vmov	r0, s0
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f7f6 fcad 	bl	8000608 <__aeabi_dmul>
 8009cae:	4b33      	ldr	r3, [pc, #204]	; (8009d7c <scalbn+0xf4>)
 8009cb0:	429e      	cmp	r6, r3
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	460d      	mov	r5, r1
 8009cb6:	da10      	bge.n	8009cda <scalbn+0x52>
 8009cb8:	a327      	add	r3, pc, #156	; (adr r3, 8009d58 <scalbn+0xd0>)
 8009cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbe:	e01f      	b.n	8009d00 <scalbn+0x78>
 8009cc0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009cc4:	4291      	cmp	r1, r2
 8009cc6:	d10c      	bne.n	8009ce2 <scalbn+0x5a>
 8009cc8:	ee10 2a10 	vmov	r2, s0
 8009ccc:	4620      	mov	r0, r4
 8009cce:	4629      	mov	r1, r5
 8009cd0:	f7f6 fae4 	bl	800029c <__adddf3>
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	460d      	mov	r5, r1
 8009cd8:	e022      	b.n	8009d20 <scalbn+0x98>
 8009cda:	460b      	mov	r3, r1
 8009cdc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009ce0:	3936      	subs	r1, #54	; 0x36
 8009ce2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8009ce6:	4296      	cmp	r6, r2
 8009ce8:	dd0d      	ble.n	8009d06 <scalbn+0x7e>
 8009cea:	2d00      	cmp	r5, #0
 8009cec:	a11c      	add	r1, pc, #112	; (adr r1, 8009d60 <scalbn+0xd8>)
 8009cee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cf2:	da02      	bge.n	8009cfa <scalbn+0x72>
 8009cf4:	a11c      	add	r1, pc, #112	; (adr r1, 8009d68 <scalbn+0xe0>)
 8009cf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cfa:	a319      	add	r3, pc, #100	; (adr r3, 8009d60 <scalbn+0xd8>)
 8009cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d00:	f7f6 fc82 	bl	8000608 <__aeabi_dmul>
 8009d04:	e7e6      	b.n	8009cd4 <scalbn+0x4c>
 8009d06:	1872      	adds	r2, r6, r1
 8009d08:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009d0c:	428a      	cmp	r2, r1
 8009d0e:	dcec      	bgt.n	8009cea <scalbn+0x62>
 8009d10:	2a00      	cmp	r2, #0
 8009d12:	dd08      	ble.n	8009d26 <scalbn+0x9e>
 8009d14:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009d18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009d1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009d20:	ec45 4b10 	vmov	d0, r4, r5
 8009d24:	bd70      	pop	{r4, r5, r6, pc}
 8009d26:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009d2a:	da08      	bge.n	8009d3e <scalbn+0xb6>
 8009d2c:	2d00      	cmp	r5, #0
 8009d2e:	a10a      	add	r1, pc, #40	; (adr r1, 8009d58 <scalbn+0xd0>)
 8009d30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d34:	dac0      	bge.n	8009cb8 <scalbn+0x30>
 8009d36:	a10e      	add	r1, pc, #56	; (adr r1, 8009d70 <scalbn+0xe8>)
 8009d38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d3c:	e7bc      	b.n	8009cb8 <scalbn+0x30>
 8009d3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009d42:	3236      	adds	r2, #54	; 0x36
 8009d44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009d48:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	4b0c      	ldr	r3, [pc, #48]	; (8009d80 <scalbn+0xf8>)
 8009d50:	2200      	movs	r2, #0
 8009d52:	e7d5      	b.n	8009d00 <scalbn+0x78>
 8009d54:	f3af 8000 	nop.w
 8009d58:	c2f8f359 	.word	0xc2f8f359
 8009d5c:	01a56e1f 	.word	0x01a56e1f
 8009d60:	8800759c 	.word	0x8800759c
 8009d64:	7e37e43c 	.word	0x7e37e43c
 8009d68:	8800759c 	.word	0x8800759c
 8009d6c:	fe37e43c 	.word	0xfe37e43c
 8009d70:	c2f8f359 	.word	0xc2f8f359
 8009d74:	81a56e1f 	.word	0x81a56e1f
 8009d78:	43500000 	.word	0x43500000
 8009d7c:	ffff3cb0 	.word	0xffff3cb0
 8009d80:	3c900000 	.word	0x3c900000

08009d84 <with_errno>:
 8009d84:	b570      	push	{r4, r5, r6, lr}
 8009d86:	4604      	mov	r4, r0
 8009d88:	460d      	mov	r5, r1
 8009d8a:	4616      	mov	r6, r2
 8009d8c:	f7fc ff76 	bl	8006c7c <__errno>
 8009d90:	4629      	mov	r1, r5
 8009d92:	6006      	str	r6, [r0, #0]
 8009d94:	4620      	mov	r0, r4
 8009d96:	bd70      	pop	{r4, r5, r6, pc}

08009d98 <xflow>:
 8009d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d9a:	4614      	mov	r4, r2
 8009d9c:	461d      	mov	r5, r3
 8009d9e:	b108      	cbz	r0, 8009da4 <xflow+0xc>
 8009da0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009da4:	e9cd 2300 	strd	r2, r3, [sp]
 8009da8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dac:	4620      	mov	r0, r4
 8009dae:	4629      	mov	r1, r5
 8009db0:	f7f6 fc2a 	bl	8000608 <__aeabi_dmul>
 8009db4:	2222      	movs	r2, #34	; 0x22
 8009db6:	b003      	add	sp, #12
 8009db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dbc:	f7ff bfe2 	b.w	8009d84 <with_errno>

08009dc0 <__math_uflow>:
 8009dc0:	b508      	push	{r3, lr}
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009dc8:	f7ff ffe6 	bl	8009d98 <xflow>
 8009dcc:	ec41 0b10 	vmov	d0, r0, r1
 8009dd0:	bd08      	pop	{r3, pc}

08009dd2 <__math_oflow>:
 8009dd2:	b508      	push	{r3, lr}
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009dda:	f7ff ffdd 	bl	8009d98 <xflow>
 8009dde:	ec41 0b10 	vmov	d0, r0, r1
 8009de2:	bd08      	pop	{r3, pc}

08009de4 <__ieee754_sqrt>:
 8009de4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de8:	ec55 4b10 	vmov	r4, r5, d0
 8009dec:	4e67      	ldr	r6, [pc, #412]	; (8009f8c <__ieee754_sqrt+0x1a8>)
 8009dee:	43ae      	bics	r6, r5
 8009df0:	ee10 0a10 	vmov	r0, s0
 8009df4:	ee10 2a10 	vmov	r2, s0
 8009df8:	4629      	mov	r1, r5
 8009dfa:	462b      	mov	r3, r5
 8009dfc:	d10d      	bne.n	8009e1a <__ieee754_sqrt+0x36>
 8009dfe:	f7f6 fc03 	bl	8000608 <__aeabi_dmul>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	4620      	mov	r0, r4
 8009e08:	4629      	mov	r1, r5
 8009e0a:	f7f6 fa47 	bl	800029c <__adddf3>
 8009e0e:	4604      	mov	r4, r0
 8009e10:	460d      	mov	r5, r1
 8009e12:	ec45 4b10 	vmov	d0, r4, r5
 8009e16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e1a:	2d00      	cmp	r5, #0
 8009e1c:	dc0b      	bgt.n	8009e36 <__ieee754_sqrt+0x52>
 8009e1e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009e22:	4326      	orrs	r6, r4
 8009e24:	d0f5      	beq.n	8009e12 <__ieee754_sqrt+0x2e>
 8009e26:	b135      	cbz	r5, 8009e36 <__ieee754_sqrt+0x52>
 8009e28:	f7f6 fa36 	bl	8000298 <__aeabi_dsub>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	460b      	mov	r3, r1
 8009e30:	f7f6 fd14 	bl	800085c <__aeabi_ddiv>
 8009e34:	e7eb      	b.n	8009e0e <__ieee754_sqrt+0x2a>
 8009e36:	1509      	asrs	r1, r1, #20
 8009e38:	f000 808d 	beq.w	8009f56 <__ieee754_sqrt+0x172>
 8009e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e40:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8009e44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e48:	07c9      	lsls	r1, r1, #31
 8009e4a:	bf5c      	itt	pl
 8009e4c:	005b      	lslpl	r3, r3, #1
 8009e4e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8009e52:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009e56:	bf58      	it	pl
 8009e58:	0052      	lslpl	r2, r2, #1
 8009e5a:	2500      	movs	r5, #0
 8009e5c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009e60:	1076      	asrs	r6, r6, #1
 8009e62:	0052      	lsls	r2, r2, #1
 8009e64:	f04f 0e16 	mov.w	lr, #22
 8009e68:	46ac      	mov	ip, r5
 8009e6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e6e:	eb0c 0001 	add.w	r0, ip, r1
 8009e72:	4298      	cmp	r0, r3
 8009e74:	bfde      	ittt	le
 8009e76:	1a1b      	suble	r3, r3, r0
 8009e78:	eb00 0c01 	addle.w	ip, r0, r1
 8009e7c:	186d      	addle	r5, r5, r1
 8009e7e:	005b      	lsls	r3, r3, #1
 8009e80:	f1be 0e01 	subs.w	lr, lr, #1
 8009e84:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009e88:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009e8c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009e90:	d1ed      	bne.n	8009e6e <__ieee754_sqrt+0x8a>
 8009e92:	4674      	mov	r4, lr
 8009e94:	2720      	movs	r7, #32
 8009e96:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009e9a:	4563      	cmp	r3, ip
 8009e9c:	eb01 000e 	add.w	r0, r1, lr
 8009ea0:	dc02      	bgt.n	8009ea8 <__ieee754_sqrt+0xc4>
 8009ea2:	d113      	bne.n	8009ecc <__ieee754_sqrt+0xe8>
 8009ea4:	4290      	cmp	r0, r2
 8009ea6:	d811      	bhi.n	8009ecc <__ieee754_sqrt+0xe8>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	eb00 0e01 	add.w	lr, r0, r1
 8009eae:	da57      	bge.n	8009f60 <__ieee754_sqrt+0x17c>
 8009eb0:	f1be 0f00 	cmp.w	lr, #0
 8009eb4:	db54      	blt.n	8009f60 <__ieee754_sqrt+0x17c>
 8009eb6:	f10c 0801 	add.w	r8, ip, #1
 8009eba:	eba3 030c 	sub.w	r3, r3, ip
 8009ebe:	4290      	cmp	r0, r2
 8009ec0:	bf88      	it	hi
 8009ec2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009ec6:	1a12      	subs	r2, r2, r0
 8009ec8:	440c      	add	r4, r1
 8009eca:	46c4      	mov	ip, r8
 8009ecc:	005b      	lsls	r3, r3, #1
 8009ece:	3f01      	subs	r7, #1
 8009ed0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009ed4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009ed8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009edc:	d1dd      	bne.n	8009e9a <__ieee754_sqrt+0xb6>
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	d01b      	beq.n	8009f1a <__ieee754_sqrt+0x136>
 8009ee2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009f90 <__ieee754_sqrt+0x1ac>
 8009ee6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009f94 <__ieee754_sqrt+0x1b0>
 8009eea:	e9da 0100 	ldrd	r0, r1, [sl]
 8009eee:	e9db 2300 	ldrd	r2, r3, [fp]
 8009ef2:	f7f6 f9d1 	bl	8000298 <__aeabi_dsub>
 8009ef6:	e9da 8900 	ldrd	r8, r9, [sl]
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
 8009efe:	4640      	mov	r0, r8
 8009f00:	4649      	mov	r1, r9
 8009f02:	f7f6 fdfd 	bl	8000b00 <__aeabi_dcmple>
 8009f06:	b140      	cbz	r0, 8009f1a <__ieee754_sqrt+0x136>
 8009f08:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009f0c:	e9da 0100 	ldrd	r0, r1, [sl]
 8009f10:	e9db 2300 	ldrd	r2, r3, [fp]
 8009f14:	d126      	bne.n	8009f64 <__ieee754_sqrt+0x180>
 8009f16:	3501      	adds	r5, #1
 8009f18:	463c      	mov	r4, r7
 8009f1a:	106a      	asrs	r2, r5, #1
 8009f1c:	0863      	lsrs	r3, r4, #1
 8009f1e:	07e9      	lsls	r1, r5, #31
 8009f20:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009f24:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009f28:	bf48      	it	mi
 8009f2a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009f2e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8009f32:	461c      	mov	r4, r3
 8009f34:	e76d      	b.n	8009e12 <__ieee754_sqrt+0x2e>
 8009f36:	0ad3      	lsrs	r3, r2, #11
 8009f38:	3815      	subs	r0, #21
 8009f3a:	0552      	lsls	r2, r2, #21
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d0fa      	beq.n	8009f36 <__ieee754_sqrt+0x152>
 8009f40:	02dc      	lsls	r4, r3, #11
 8009f42:	d50a      	bpl.n	8009f5a <__ieee754_sqrt+0x176>
 8009f44:	f1c1 0420 	rsb	r4, r1, #32
 8009f48:	fa22 f404 	lsr.w	r4, r2, r4
 8009f4c:	1e4d      	subs	r5, r1, #1
 8009f4e:	408a      	lsls	r2, r1
 8009f50:	4323      	orrs	r3, r4
 8009f52:	1b41      	subs	r1, r0, r5
 8009f54:	e772      	b.n	8009e3c <__ieee754_sqrt+0x58>
 8009f56:	4608      	mov	r0, r1
 8009f58:	e7f0      	b.n	8009f3c <__ieee754_sqrt+0x158>
 8009f5a:	005b      	lsls	r3, r3, #1
 8009f5c:	3101      	adds	r1, #1
 8009f5e:	e7ef      	b.n	8009f40 <__ieee754_sqrt+0x15c>
 8009f60:	46e0      	mov	r8, ip
 8009f62:	e7aa      	b.n	8009eba <__ieee754_sqrt+0xd6>
 8009f64:	f7f6 f99a 	bl	800029c <__adddf3>
 8009f68:	e9da 8900 	ldrd	r8, r9, [sl]
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	4640      	mov	r0, r8
 8009f72:	4649      	mov	r1, r9
 8009f74:	f7f6 fdba 	bl	8000aec <__aeabi_dcmplt>
 8009f78:	b120      	cbz	r0, 8009f84 <__ieee754_sqrt+0x1a0>
 8009f7a:	1ca0      	adds	r0, r4, #2
 8009f7c:	bf08      	it	eq
 8009f7e:	3501      	addeq	r5, #1
 8009f80:	3402      	adds	r4, #2
 8009f82:	e7ca      	b.n	8009f1a <__ieee754_sqrt+0x136>
 8009f84:	3401      	adds	r4, #1
 8009f86:	f024 0401 	bic.w	r4, r4, #1
 8009f8a:	e7c6      	b.n	8009f1a <__ieee754_sqrt+0x136>
 8009f8c:	7ff00000 	.word	0x7ff00000
 8009f90:	200001e0 	.word	0x200001e0
 8009f94:	200001e8 	.word	0x200001e8

08009f98 <_init>:
 8009f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9a:	bf00      	nop
 8009f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f9e:	bc08      	pop	{r3}
 8009fa0:	469e      	mov	lr, r3
 8009fa2:	4770      	bx	lr

08009fa4 <_fini>:
 8009fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa6:	bf00      	nop
 8009fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009faa:	bc08      	pop	{r3}
 8009fac:	469e      	mov	lr, r3
 8009fae:	4770      	bx	lr
