
Integration Prototyping.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a260  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  0800a400  0800a400  0001a400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa00  0800aa00  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa00  0800aa00  0001aa00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa08  0800aa08  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa08  0800aa08  0001aa08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa0c  0800aa0c  0001aa0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800aa10  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  200001f8  0800ac08  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  0800ac08  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .debug_info   000108b7  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002135  00000000  00000000  00030b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  00032c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cfb  00000000  00000000  00033cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018bb5  00000000  00000000  000349b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013656  00000000  00000000  0004d568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e802  00000000  00000000  00060bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ce4  00000000  00000000  000ff3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  001050a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a3e8 	.word	0x0800a3e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800a3e8 	.word	0x0800a3e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <main>:
int stepsPerRev = 200;
float stepAngle = 1.8;
///////////////////////////////////

int main(void)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b095      	sub	sp, #84	; 0x54
 8000f58:	af02      	add	r7, sp, #8

  HAL_Init();
 8000f5a:	f001 ff1d 	bl	8002d98 <HAL_Init>

  SystemClock_Config();
 8000f5e:	f001 fa6f 	bl	8002440 <SystemClock_Config>

  MX_GPIO_Init();
 8000f62:	f001 fbfb 	bl	800275c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f66:	f001 fad5 	bl	8002514 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000f6a:	f001 fb25 	bl	80025b8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000f6e:	f001 fba1 	bl	80026b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f72:	f001 fbc9 	bl	8002708 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f76:	f001 fb4d 	bl	8002614 <MX_TIM1_Init>

  ///////////////////////////////////////////////////////////////
  //GPS
  float lat = -1;
 8000f7a:	4b4d      	ldr	r3, [pc, #308]	; (80010b0 <main+0x15c>)
 8000f7c:	623b      	str	r3, [r7, #32]
  float longi = -1;
 8000f7e:	4b4c      	ldr	r3, [pc, #304]	; (80010b0 <main+0x15c>)
 8000f80:	61fb      	str	r3, [r7, #28]
  float time = -1;
 8000f82:	4b4b      	ldr	r3, [pc, #300]	; (80010b0 <main+0x15c>)
 8000f84:	61bb      	str	r3, [r7, #24]
  float date = -1;
 8000f86:	4b4a      	ldr	r3, [pc, #296]	; (80010b0 <main+0x15c>)
 8000f88:	617b      	str	r3, [r7, #20]
  char longiDir = 'x';
 8000f8a:	2378      	movs	r3, #120	; 0x78
 8000f8c:	74fb      	strb	r3, [r7, #19]
  char latDir = 'x';
 8000f8e:	2378      	movs	r3, #120	; 0x78
 8000f90:	74bb      	strb	r3, [r7, #18]

  for (int i = 0; i < 50; i++) {
 8000f92:	2300      	movs	r3, #0
 8000f94:	647b      	str	r3, [r7, #68]	; 0x44
 8000f96:	e013      	b.n	8000fc0 <main+0x6c>
   getGpsData(&lat, &longi, &time, &date, &longiDir, &latDir);
 8000f98:	f107 0414 	add.w	r4, r7, #20
 8000f9c:	f107 0218 	add.w	r2, r7, #24
 8000fa0:	f107 011c 	add.w	r1, r7, #28
 8000fa4:	f107 0020 	add.w	r0, r7, #32
 8000fa8:	f107 0312 	add.w	r3, r7, #18
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	f107 0313 	add.w	r3, r7, #19
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	4623      	mov	r3, r4
 8000fb6:	f000 fa49 	bl	800144c <getGpsData>
  for (int i = 0; i < 50; i++) {
 8000fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8000fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fc2:	2b31      	cmp	r3, #49	; 0x31
 8000fc4:	dde8      	ble.n	8000f98 <main+0x44>
  }

  //////////////////////////////////////////////////////////////
  //LIGHT SENSOR
  setupLightSensor(lightAddressGND);
 8000fc6:	4b3b      	ldr	r3, [pc, #236]	; (80010b4 <main+0x160>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f8fa 	bl	80011c4 <setupLightSensor>
  float lightDataGND = 0;
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	63bb      	str	r3, [r7, #56]	; 0x38
  float lightDataVDD = 0;
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	637b      	str	r3, [r7, #52]	; 0x34
  float lightDataSDA = 0;
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
  float lightDataSCL = 0;
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c

  //////////////////////////////////////////////////////////////
  //MAGNETOMETER
  float xCal, yCal, zCal;
  xCal = 0;
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  yCal = 0;
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
  zCal = 0;
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
  setupMag();
 8000ffa:	f000 fdc9 	bl	8001b90 <setupMag>
  hardIronCal(&xCal, &yCal, &zCal);
 8000ffe:	1d3a      	adds	r2, r7, #4
 8001000:	f107 0108 	add.w	r1, r7, #8
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	4618      	mov	r0, r3
 800100a:	f000 fef3 	bl	8001df4 <hardIronCal>

  //Direction Angle
  float direction = 0;
 800100e:	f04f 0300 	mov.w	r3, #0
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
  //////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////
  //SOLAR PANEL VOLTAGE
  float solarPanelVoltage = 0;
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  //////////////////////////////////////////////////////////////
  //MOTOR CONTROL
  HAL_TIM_Base_Start(&htim1);
 800101a:	4827      	ldr	r0, [pc, #156]	; (80010b8 <main+0x164>)
 800101c:	f004 fa54 	bl	80054c8 <HAL_TIM_Base_Start>
  setCounterClockwise();
 8001020:	f000 f88a 	bl	8001138 <setCounterClockwise>
  float motorCounter = 0;
 8001024:	f04f 0300 	mov.w	r3, #0
 8001028:	643b      	str	r3, [r7, #64]	; 0x40
  ///////////////////////////////////////////////////////////////

  int count = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	63fb      	str	r3, [r7, #60]	; 0x3c
  while (1)
  {

    direction = magnetometerData(xCal, yCal, zCal);
 800102e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001032:	ed97 7a02 	vldr	s14, [r7, #8]
 8001036:	edd7 6a01 	vldr	s13, [r7, #4]
 800103a:	eeb0 1a66 	vmov.f32	s2, s13
 800103e:	eef0 0a47 	vmov.f32	s1, s14
 8001042:	eeb0 0a67 	vmov.f32	s0, s15
 8001046:	f000 fd47 	bl	8001ad8 <magnetometerData>
 800104a:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    lightDataGND = getLightData(lightAddressGND);
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <main+0x160>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f8e0 	bl	8001218 <getLightData>
 8001058:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    solarPanelVoltage = getSolarPanelVoltage();
 800105c:	f000 f984 	bl	8001368 <getSolarPanelVoltage>
 8001060:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
//    	count = 0;
//    }



    count += 1;
 8001064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001066:	3301      	adds	r3, #1
 8001068:	63fb      	str	r3, [r7, #60]	; 0x3c

    if ((HAL_GetTick() - motorCounter) > 5000) {
 800106a:	f001 fefb 	bl	8002e64 <HAL_GetTick>
 800106e:	ee07 0a90 	vmov	s15, r0
 8001072:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001076:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800107a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800107e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80010bc <main+0x168>
 8001082:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108a:	dd0f      	ble.n	80010ac <main+0x158>
	  setupMotor();
 800108c:	f000 f87a 	bl	8001184 <setupMotor>
	  rotateMotor(28);
 8001090:	eeb3 0a0c 	vmov.f32	s0, #60	; 0x41e00000  28.0
 8001094:	f000 f814 	bl	80010c0 <rotateMotor>
	  turnOffMotor();
 8001098:	f000 f888 	bl	80011ac <turnOffMotor>

	  motorCounter = HAL_GetTick();
 800109c:	f001 fee2 	bl	8002e64 <HAL_GetTick>
 80010a0:	ee07 0a90 	vmov	s15, r0
 80010a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    direction = magnetometerData(xCal, yCal, zCal);
 80010ac:	e7bf      	b.n	800102e <main+0xda>
 80010ae:	bf00      	nop
 80010b0:	bf800000 	.word	0xbf800000
 80010b4:	2000000a 	.word	0x2000000a
 80010b8:	200002b0 	.word	0x200002b0
 80010bc:	459c4000 	.word	0x459c4000

080010c0 <rotateMotor>:


  }
}

void rotateMotor(float angle) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	ed87 0a01 	vstr	s0, [r7, #4]

	int steps = (angle / stepAngle);
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <rotateMotor+0x6c>)
 80010cc:	ed93 7a00 	vldr	s14, [r3]
 80010d0:	edd7 6a01 	vldr	s13, [r7, #4]
 80010d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010dc:	ee17 3a90 	vmov	r3, s15
 80010e0:	60bb      	str	r3, [r7, #8]

	for(int x=0; x < steps; x++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	e018      	b.n	800111a <rotateMotor+0x5a>
	{
		HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	2140      	movs	r1, #64	; 0x40
 80010ec:	4810      	ldr	r0, [pc, #64]	; (8001130 <rotateMotor+0x70>)
 80010ee:	f002 fd45 	bl	8003b7c <HAL_GPIO_WritePin>
		microDelay(stepDelay);
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <rotateMotor+0x74>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f829 	bl	8001150 <microDelay>
		HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	2140      	movs	r1, #64	; 0x40
 8001102:	480b      	ldr	r0, [pc, #44]	; (8001130 <rotateMotor+0x70>)
 8001104:	f002 fd3a 	bl	8003b7c <HAL_GPIO_WritePin>
		microDelay(stepDelay);
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <rotateMotor+0x74>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	b29b      	uxth	r3, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f81e 	bl	8001150 <microDelay>
	for(int x=0; x < steps; x++)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3301      	adds	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	429a      	cmp	r2, r3
 8001120:	dbe2      	blt.n	80010e8 <rotateMotor+0x28>
	}
}
 8001122:	bf00      	nop
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000010 	.word	0x20000010
 8001130:	40020000 	.word	0x40020000
 8001134:	2000000c 	.word	0x2000000c

08001138 <setCounterClockwise>:

void setClockwise() {
	HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_SET);
}

void setCounterClockwise() {
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	2180      	movs	r1, #128	; 0x80
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <setCounterClockwise+0x14>)
 8001142:	f002 fd1b 	bl	8003b7c <HAL_GPIO_WritePin>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40020000 	.word	0x40020000

08001150 <microDelay>:

void microDelay (uint16_t delay)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <microDelay+0x30>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8001162:	bf00      	nop
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <microDelay+0x30>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	429a      	cmp	r2, r3
 800116e:	d3f9      	bcc.n	8001164 <microDelay+0x14>
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	200002b0 	.word	0x200002b0

08001184 <setupMotor>:

void setupMotor() {
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SLEEP_PORT, SLEEP_PIN, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <setupMotor+0x20>)
 8001190:	f002 fcf4 	bl	8003b7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENABLE_PORT, ENABLE_PIN, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	2140      	movs	r1, #64	; 0x40
 8001198:	4803      	ldr	r0, [pc, #12]	; (80011a8 <setupMotor+0x24>)
 800119a:	f002 fcef 	bl	8003b7c <HAL_GPIO_WritePin>
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40020000 	.word	0x40020000
 80011a8:	40020400 	.word	0x40020400

080011ac <turnOffMotor>:

void turnOffMotor() {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SLEEP_PORT, SLEEP_PIN, GPIO_PIN_RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b6:	4802      	ldr	r0, [pc, #8]	; (80011c0 <turnOffMotor+0x14>)
 80011b8:	f002 fce0 	bl	8003b7c <HAL_GPIO_WritePin>
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40020000 	.word	0x40020000

080011c4 <setupLightSensor>:
			(unsigned int)lightDataSCL, (unsigned int)lightDataSCL%100, (unsigned int)solarPanelVoltage, (unsigned int)solarPanelVoltage%100);

	HAL_UART_Transmit_IT(&huart1, bluetoothBuffer, sizeof (bluetoothBuffer));
}

void setupLightSensor(uint8_t lightAddress) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
	uint8_t data_send[3] = {0};
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <setupLightSensor+0x4c>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	81bb      	strh	r3, [r7, #12]
 80011d4:	2300      	movs	r3, #0
 80011d6:	73bb      	strb	r3, [r7, #14]
	data_send[0] = 0x0A;
 80011d8:	230a      	movs	r3, #10
 80011da:	733b      	strb	r3, [r7, #12]
	data_send[1] = 0x32;
 80011dc:	2332      	movs	r3, #50	; 0x32
 80011de:	737b      	strb	r3, [r7, #13]
	data_send[2] = 0xF8;
 80011e0:	23f8      	movs	r3, #248	; 0xf8
 80011e2:	73bb      	strb	r3, [r7, #14]
	while (HAL_I2C_Master_Transmit(&hi2c1, (lightAddress << 1), data_send, 3, 20) != HAL_OK){}
 80011e4:	bf00      	nop
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	b299      	uxth	r1, r3
 80011ee:	f107 020c 	add.w	r2, r7, #12
 80011f2:	2314      	movs	r3, #20
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2303      	movs	r3, #3
 80011f8:	4806      	ldr	r0, [pc, #24]	; (8001214 <setupLightSensor+0x50>)
 80011fa:	f002 fe1d 	bl	8003e38 <HAL_I2C_Master_Transmit>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f0      	bne.n	80011e6 <setupLightSensor+0x22>
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	0800a4ac 	.word	0x0800a4ac
 8001214:	2000025c 	.word	0x2000025c

08001218 <getLightData>:

float getLightData(uint8_t lightAddress) {
 8001218:	b5b0      	push	{r4, r5, r7, lr}
 800121a:	b08c      	sub	sp, #48	; 0x30
 800121c:	af02      	add	r7, sp, #8
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
	uint8_t data_send[4] = {0};
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
	uint8_t data_in [2] = {0};
 8001226:	2300      	movs	r3, #0
 8001228:	82bb      	strh	r3, [r7, #20]
	uint16_t exp;
	uint16_t man;
	uint16_t alldata;
	uint8_t buf[12];
	float ans = 0;
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24

	data_send[0] = 0x00;
 8001230:	2300      	movs	r3, #0
 8001232:	763b      	strb	r3, [r7, #24]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8001234:	bf00      	nop
 8001236:	4848      	ldr	r0, [pc, #288]	; (8001358 <getLightData+0x140>)
 8001238:	f003 f922 	bl	8004480 <HAL_I2C_GetState>
 800123c:	4603      	mov	r3, r0
 800123e:	2b20      	cmp	r3, #32
 8001240:	d1f9      	bne.n	8001236 <getLightData+0x1e>
	while (HAL_I2C_Master_Transmit(&hi2c1, (lightAddress << 1), data_send, 1, 20) != HAL_OK){}
 8001242:	bf00      	nop
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	b29b      	uxth	r3, r3
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	b299      	uxth	r1, r3
 800124c:	f107 0218 	add.w	r2, r7, #24
 8001250:	2314      	movs	r3, #20
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2301      	movs	r3, #1
 8001256:	4840      	ldr	r0, [pc, #256]	; (8001358 <getLightData+0x140>)
 8001258:	f002 fdee 	bl	8003e38 <HAL_I2C_Master_Transmit>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1f0      	bne.n	8001244 <getLightData+0x2c>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8001262:	bf00      	nop
 8001264:	483c      	ldr	r0, [pc, #240]	; (8001358 <getLightData+0x140>)
 8001266:	f003 f90b 	bl	8004480 <HAL_I2C_GetState>
 800126a:	4603      	mov	r3, r0
 800126c:	2b20      	cmp	r3, #32
 800126e:	d1f9      	bne.n	8001264 <getLightData+0x4c>
	while (HAL_I2C_Master_Receive(&hi2c1, (lightAddress << 1 | 1), data_in, 2, HAL_MAX_DELAY)){}
 8001270:	bf00      	nop
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	b21b      	sxth	r3, r3
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	b21b      	sxth	r3, r3
 800127e:	b299      	uxth	r1, r3
 8001280:	f107 0214 	add.w	r2, r7, #20
 8001284:	f04f 33ff 	mov.w	r3, #4294967295
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2302      	movs	r3, #2
 800128c:	4832      	ldr	r0, [pc, #200]	; (8001358 <getLightData+0x140>)
 800128e:	f002 fed1 	bl	8004034 <HAL_I2C_Master_Receive>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1ec      	bne.n	8001272 <getLightData+0x5a>

	alldata = data_in[0];
 8001298:	7d3b      	ldrb	r3, [r7, #20]
 800129a:	847b      	strh	r3, [r7, #34]	; 0x22
	alldata = (alldata << 8) | data_in[1];
 800129c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	7d7b      	ldrb	r3, [r7, #21]
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	4313      	orrs	r3, r2
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	847b      	strh	r3, [r7, #34]	; 0x22
	man = alldata & 0x0FFF;
 80012ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b2:	843b      	strh	r3, [r7, #32]
	exp = (alldata & 0xF000) >> 12;
 80012b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012b6:	0b1b      	lsrs	r3, r3, #12
 80012b8:	83fb      	strh	r3, [r7, #30]

	ans = man * (0.01 * pow(2,exp));
 80012ba:	8c3b      	ldrh	r3, [r7, #32]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f939 	bl	8000534 <__aeabi_i2d>
 80012c2:	4604      	mov	r4, r0
 80012c4:	460d      	mov	r5, r1
 80012c6:	8bfb      	ldrh	r3, [r7, #30]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f923 	bl	8000514 <__aeabi_ui2d>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	ec43 2b11 	vmov	d1, r2, r3
 80012d6:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8001348 <getLightData+0x130>
 80012da:	f007 fee1 	bl	80090a0 <pow>
 80012de:	ec51 0b10 	vmov	r0, r1, d0
 80012e2:	a31b      	add	r3, pc, #108	; (adr r3, 8001350 <getLightData+0x138>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7ff f98e 	bl	8000608 <__aeabi_dmul>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4620      	mov	r0, r4
 80012f2:	4629      	mov	r1, r5
 80012f4:	f7ff f988 	bl	8000608 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fc5a 	bl	8000bb8 <__aeabi_d2f>
 8001304:	4603      	mov	r3, r0
 8001306:	627b      	str	r3, [r7, #36]	; 0x24

	sprintf((char*)buf,"LUX: %.2f\r\n",ans);
 8001308:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800130a:	f7ff f925 	bl	8000558 <__aeabi_f2d>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	f107 0008 	add.w	r0, r7, #8
 8001316:	4911      	ldr	r1, [pc, #68]	; (800135c <getLightData+0x144>)
 8001318:	f005 fda4 	bl	8006e64 <siprintf>
	HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	4618      	mov	r0, r3
 8001322:	f7fe ffad 	bl	8000280 <strlen>
 8001326:	4603      	mov	r3, r0
 8001328:	b29a      	uxth	r2, r3
 800132a:	f107 0108 	add.w	r1, r7, #8
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	480b      	ldr	r0, [pc, #44]	; (8001360 <getLightData+0x148>)
 8001334:	f004 fbbf 	bl	8005ab6 <HAL_UART_Transmit>

	return ans;
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133a:	ee07 3a90 	vmov	s15, r3
}
 800133e:	eeb0 0a67 	vmov.f32	s0, s15
 8001342:	3728      	adds	r7, #40	; 0x28
 8001344:	46bd      	mov	sp, r7
 8001346:	bdb0      	pop	{r4, r5, r7, pc}
 8001348:	00000000 	.word	0x00000000
 800134c:	40000000 	.word	0x40000000
 8001350:	47ae147b 	.word	0x47ae147b
 8001354:	3f847ae1 	.word	0x3f847ae1
 8001358:	2000025c 	.word	0x2000025c
 800135c:	0800a4b0 	.word	0x0800a4b0
 8001360:	2000033c 	.word	0x2000033c
 8001364:	00000000 	.word	0x00000000

08001368 <getSolarPanelVoltage>:


float getSolarPanelVoltage() {
 8001368:	b580      	push	{r7, lr}
 800136a:	b08e      	sub	sp, #56	; 0x38
 800136c:	af00      	add	r7, sp, #0
	unsigned int analogValue = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_ADC_Start(&hadc1);
 8001372:	4831      	ldr	r0, [pc, #196]	; (8001438 <getSolarPanelVoltage+0xd0>)
 8001374:	f001 fdea 	bl	8002f4c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 300) == HAL_OK) {
 8001378:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800137c:	482e      	ldr	r0, [pc, #184]	; (8001438 <getSolarPanelVoltage+0xd0>)
 800137e:	f001 fecc 	bl	800311a <HAL_ADC_PollForConversion>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d103      	bne.n	8001390 <getSolarPanelVoltage+0x28>
		analogValue = HAL_ADC_GetValue(&hadc1);
 8001388:	482b      	ldr	r0, [pc, #172]	; (8001438 <getSolarPanelVoltage+0xd0>)
 800138a:	f001 ff51 	bl	8003230 <HAL_ADC_GetValue>
 800138e:	6378      	str	r0, [r7, #52]	; 0x34
	}

	HAL_ADC_Stop(&hadc1);
 8001390:	4829      	ldr	r0, [pc, #164]	; (8001438 <getSolarPanelVoltage+0xd0>)
 8001392:	f001 fe8f 	bl	80030b4 <HAL_ADC_Stop>

	//Value obtained from voltage divider
	int voltageDividerLargeRes = 14;
 8001396:	230e      	movs	r3, #14
 8001398:	633b      	str	r3, [r7, #48]	; 0x30
	float voltageDividerSmallRes = 3.1;
 800139a:	4b28      	ldr	r3, [pc, #160]	; (800143c <getSolarPanelVoltage+0xd4>)
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
	float measuredVoltage = (analogValue * 3.1 /  4096);
 800139e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013a0:	f7ff f8b8 	bl	8000514 <__aeabi_ui2d>
 80013a4:	a322      	add	r3, pc, #136	; (adr r3, 8001430 <getSolarPanelVoltage+0xc8>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	f7ff f92d 	bl	8000608 <__aeabi_dmul>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	4b21      	ldr	r3, [pc, #132]	; (8001440 <getSolarPanelVoltage+0xd8>)
 80013bc:	f7ff fa4e 	bl	800085c <__aeabi_ddiv>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff fbf6 	bl	8000bb8 <__aeabi_d2f>
 80013cc:	4603      	mov	r3, r0
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
	float solarPanelVoltage = (measuredVoltage * (voltageDividerLargeRes + voltageDividerSmallRes) / voltageDividerSmallRes);
 80013d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013da:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80013de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80013e6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013ea:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80013ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24


	uint8_t buf[30];
	sprintf((char*)buf,"Solar Panel Voltage: %.2f\r\n",solarPanelVoltage);
 80013f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013f8:	f7ff f8ae 	bl	8000558 <__aeabi_f2d>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	1d38      	adds	r0, r7, #4
 8001402:	4910      	ldr	r1, [pc, #64]	; (8001444 <getSolarPanelVoltage+0xdc>)
 8001404:	f005 fd2e 	bl	8006e64 <siprintf>
	HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	4618      	mov	r0, r3
 800140c:	f7fe ff38 	bl	8000280 <strlen>
 8001410:	4603      	mov	r3, r0
 8001412:	b29a      	uxth	r2, r3
 8001414:	1d39      	adds	r1, r7, #4
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	480b      	ldr	r0, [pc, #44]	; (8001448 <getSolarPanelVoltage+0xe0>)
 800141c:	f004 fb4b 	bl	8005ab6 <HAL_UART_Transmit>

	return solarPanelVoltage;
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	ee07 3a90 	vmov	s15, r3
}
 8001426:	eeb0 0a67 	vmov.f32	s0, s15
 800142a:	3738      	adds	r7, #56	; 0x38
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	cccccccd 	.word	0xcccccccd
 8001434:	4008cccc 	.word	0x4008cccc
 8001438:	20000214 	.word	0x20000214
 800143c:	40466666 	.word	0x40466666
 8001440:	40b00000 	.word	0x40b00000
 8001444:	0800a4bc 	.word	0x0800a4bc
 8001448:	2000033c 	.word	0x2000033c

0800144c <getGpsData>:

void getGpsData(float* lat, float* longi, float* time, float* date, char* longDir, char* latDir) {
 800144c:	b5b0      	push	{r4, r5, r7, lr}
 800144e:	b0b8      	sub	sp, #224	; 0xe0
 8001450:	af02      	add	r7, sp, #8
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	603b      	str	r3, [r7, #0]
	uint8_t gpsDataTx [10] = {0}; //Data to send to GPS module
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001460:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	809a      	strh	r2, [r3, #4]
	uint8_t gpsDataReady [2] = {0}; //Data to check if gps module ready
 800146a:	2300      	movs	r3, #0
 800146c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	uint8_t gpsDataRx1 [32] = {0}; //Buffer 1
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001476:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]
 8001486:	615a      	str	r2, [r3, #20]
 8001488:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx2 [32] = {0}; //Buffer 2
 800148a:	2300      	movs	r3, #0
 800148c:	667b      	str	r3, [r7, #100]	; 0x64
 800148e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]
 800149e:	615a      	str	r2, [r3, #20]
 80014a0:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx3 [32] = {0}; //Buffer 3
 80014a2:	2300      	movs	r3, #0
 80014a4:	647b      	str	r3, [r7, #68]	; 0x44
 80014a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
 80014b6:	615a      	str	r2, [r3, #20]
 80014b8:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx4 [4] = {0}; //Buffer 4
 80014ba:	2300      	movs	r3, #0
 80014bc:	643b      	str	r3, [r7, #64]	; 0x40

	//////////////////////////////////////////////////////////////////////////////////////////
	//INITIALIZATION
	gpsDataTx[0] = 0xB5;
 80014be:	23b5      	movs	r3, #181	; 0xb5
 80014c0:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	gpsDataTx[1] = 0x62;
 80014c4:	2362      	movs	r3, #98	; 0x62
 80014c6:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
	gpsDataTx[2] = 0xF0;
 80014ca:	23f0      	movs	r3, #240	; 0xf0
 80014cc:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
	gpsDataTx[3] = 0x04;
 80014d0:	2304      	movs	r3, #4
 80014d2:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80014d6:	bf00      	nop
 80014d8:	480e      	ldr	r0, [pc, #56]	; (8001514 <getGpsData+0xc8>)
 80014da:	f002 ffd1 	bl	8004480 <HAL_I2C_GetState>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b20      	cmp	r3, #32
 80014e2:	d1f9      	bne.n	80014d8 <getGpsData+0x8c>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 4, 20) != HAL_OK){}
 80014e4:	bf00      	nop
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <getGpsData+0xcc>)
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	b299      	uxth	r1, r3
 80014ee:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80014f2:	2314      	movs	r3, #20
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2304      	movs	r3, #4
 80014f8:	4806      	ldr	r0, [pc, #24]	; (8001514 <getGpsData+0xc8>)
 80014fa:	f002 fc9d 	bl	8003e38 <HAL_I2C_Master_Transmit>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f0      	bne.n	80014e6 <getGpsData+0x9a>

//		/////////////////////////////////////////////////////////////////////////////////////////
//
//		//WAITING FOR DATA READY
	gpsDataReady[0] = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
	gpsDataReady[1] = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
	while ((gpsDataReady[0] == 0) && (gpsDataReady[1] == 0)) //We leave as soon as read something non zero
 8001510:	e02b      	b.n	800156a <getGpsData+0x11e>
 8001512:	bf00      	nop
 8001514:	2000025c 	.word	0x2000025c
 8001518:	20000008 	.word	0x20000008
	{
		gpsDataTx[0] = 0xFD;
 800151c:	23fd      	movs	r3, #253	; 0xfd
 800151e:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
		HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, HAL_MAX_DELAY);
 8001522:	4bb5      	ldr	r3, [pc, #724]	; (80017f8 <getGpsData+0x3ac>)
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	b299      	uxth	r1, r3
 800152a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2301      	movs	r3, #1
 8001536:	48b1      	ldr	r0, [pc, #708]	; (80017fc <getGpsData+0x3b0>)
 8001538:	f002 fc7e 	bl	8003e38 <HAL_I2C_Master_Transmit>
		gpsDataReady[0] = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
		gpsDataReady[1] = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
		HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataReady, 2, HAL_MAX_DELAY);
 8001548:	4bab      	ldr	r3, [pc, #684]	; (80017f8 <getGpsData+0x3ac>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	b21b      	sxth	r3, r3
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	b21b      	sxth	r3, r3
 8001556:	b299      	uxth	r1, r3
 8001558:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2302      	movs	r3, #2
 8001564:	48a5      	ldr	r0, [pc, #660]	; (80017fc <getGpsData+0x3b0>)
 8001566:	f002 fd65 	bl	8004034 <HAL_I2C_Master_Receive>
	while ((gpsDataReady[0] == 0) && (gpsDataReady[1] == 0)) //We leave as soon as read something non zero
 800156a:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 800156e:	2b00      	cmp	r3, #0
 8001570:	d103      	bne.n	800157a <getGpsData+0x12e>
 8001572:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0d0      	beq.n	800151c <getGpsData+0xd0>
	}


//		//Buffer 1
	gpsDataTx[0] = 0xFF;
 800157a:	23ff      	movs	r3, #255	; 0xff
 800157c:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8001580:	bf00      	nop
 8001582:	489e      	ldr	r0, [pc, #632]	; (80017fc <getGpsData+0x3b0>)
 8001584:	f002 ff7c 	bl	8004480 <HAL_I2C_GetState>
 8001588:	4603      	mov	r3, r0
 800158a:	2b20      	cmp	r3, #32
 800158c:	d1f9      	bne.n	8001582 <getGpsData+0x136>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 800158e:	bf00      	nop
 8001590:	4b99      	ldr	r3, [pc, #612]	; (80017f8 <getGpsData+0x3ac>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	b299      	uxth	r1, r3
 8001598:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800159c:	2314      	movs	r3, #20
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2301      	movs	r3, #1
 80015a2:	4896      	ldr	r0, [pc, #600]	; (80017fc <getGpsData+0x3b0>)
 80015a4:	f002 fc48 	bl	8003e38 <HAL_I2C_Master_Transmit>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <getGpsData+0x144>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80015ae:	bf00      	nop
 80015b0:	4892      	ldr	r0, [pc, #584]	; (80017fc <getGpsData+0x3b0>)
 80015b2:	f002 ff65 	bl	8004480 <HAL_I2C_GetState>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b20      	cmp	r3, #32
 80015ba:	d1f9      	bne.n	80015b0 <getGpsData+0x164>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx1, 32, HAL_MAX_DELAY)){}
 80015bc:	bf00      	nop
 80015be:	4b8e      	ldr	r3, [pc, #568]	; (80017f8 <getGpsData+0x3ac>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	b299      	uxth	r1, r3
 80015ce:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	2320      	movs	r3, #32
 80015da:	4888      	ldr	r0, [pc, #544]	; (80017fc <getGpsData+0x3b0>)
 80015dc:	f002 fd2a 	bl	8004034 <HAL_I2C_Master_Receive>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1eb      	bne.n	80015be <getGpsData+0x172>
//
//		//Buffer 2
	gpsDataTx[0] = 0xFF;
 80015e6:	23ff      	movs	r3, #255	; 0xff
 80015e8:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80015ec:	bf00      	nop
 80015ee:	4883      	ldr	r0, [pc, #524]	; (80017fc <getGpsData+0x3b0>)
 80015f0:	f002 ff46 	bl	8004480 <HAL_I2C_GetState>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b20      	cmp	r3, #32
 80015f8:	d1f9      	bne.n	80015ee <getGpsData+0x1a2>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 80015fa:	bf00      	nop
 80015fc:	4b7e      	ldr	r3, [pc, #504]	; (80017f8 <getGpsData+0x3ac>)
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	b299      	uxth	r1, r3
 8001604:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001608:	2314      	movs	r3, #20
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2301      	movs	r3, #1
 800160e:	487b      	ldr	r0, [pc, #492]	; (80017fc <getGpsData+0x3b0>)
 8001610:	f002 fc12 	bl	8003e38 <HAL_I2C_Master_Transmit>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <getGpsData+0x1b0>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800161a:	bf00      	nop
 800161c:	4877      	ldr	r0, [pc, #476]	; (80017fc <getGpsData+0x3b0>)
 800161e:	f002 ff2f 	bl	8004480 <HAL_I2C_GetState>
 8001622:	4603      	mov	r3, r0
 8001624:	2b20      	cmp	r3, #32
 8001626:	d1f9      	bne.n	800161c <getGpsData+0x1d0>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx2, 32, HAL_MAX_DELAY)){}
 8001628:	bf00      	nop
 800162a:	4b73      	ldr	r3, [pc, #460]	; (80017f8 <getGpsData+0x3ac>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	b21b      	sxth	r3, r3
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	b21b      	sxth	r3, r3
 8001638:	b299      	uxth	r1, r3
 800163a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800163e:	f04f 33ff 	mov.w	r3, #4294967295
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2320      	movs	r3, #32
 8001646:	486d      	ldr	r0, [pc, #436]	; (80017fc <getGpsData+0x3b0>)
 8001648:	f002 fcf4 	bl	8004034 <HAL_I2C_Master_Receive>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1eb      	bne.n	800162a <getGpsData+0x1de>
//
//		//Buffer 3
	gpsDataTx[0] = 0xFF;
 8001652:	23ff      	movs	r3, #255	; 0xff
 8001654:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8001658:	bf00      	nop
 800165a:	4868      	ldr	r0, [pc, #416]	; (80017fc <getGpsData+0x3b0>)
 800165c:	f002 ff10 	bl	8004480 <HAL_I2C_GetState>
 8001660:	4603      	mov	r3, r0
 8001662:	2b20      	cmp	r3, #32
 8001664:	d1f9      	bne.n	800165a <getGpsData+0x20e>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 8001666:	bf00      	nop
 8001668:	4b63      	ldr	r3, [pc, #396]	; (80017f8 <getGpsData+0x3ac>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	b299      	uxth	r1, r3
 8001670:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001674:	2314      	movs	r3, #20
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2301      	movs	r3, #1
 800167a:	4860      	ldr	r0, [pc, #384]	; (80017fc <getGpsData+0x3b0>)
 800167c:	f002 fbdc 	bl	8003e38 <HAL_I2C_Master_Transmit>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <getGpsData+0x21c>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8001686:	bf00      	nop
 8001688:	485c      	ldr	r0, [pc, #368]	; (80017fc <getGpsData+0x3b0>)
 800168a:	f002 fef9 	bl	8004480 <HAL_I2C_GetState>
 800168e:	4603      	mov	r3, r0
 8001690:	2b20      	cmp	r3, #32
 8001692:	d1f9      	bne.n	8001688 <getGpsData+0x23c>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx3, 32, HAL_MAX_DELAY)){}
 8001694:	bf00      	nop
 8001696:	4b58      	ldr	r3, [pc, #352]	; (80017f8 <getGpsData+0x3ac>)
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	b21b      	sxth	r3, r3
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	b299      	uxth	r1, r3
 80016a6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2320      	movs	r3, #32
 80016b2:	4852      	ldr	r0, [pc, #328]	; (80017fc <getGpsData+0x3b0>)
 80016b4:	f002 fcbe 	bl	8004034 <HAL_I2C_Master_Receive>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1eb      	bne.n	8001696 <getGpsData+0x24a>

	//Buffer 4
	gpsDataTx[0] = 0xFF;
 80016be:	23ff      	movs	r3, #255	; 0xff
 80016c0:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80016c4:	bf00      	nop
 80016c6:	484d      	ldr	r0, [pc, #308]	; (80017fc <getGpsData+0x3b0>)
 80016c8:	f002 feda 	bl	8004480 <HAL_I2C_GetState>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b20      	cmp	r3, #32
 80016d0:	d1f9      	bne.n	80016c6 <getGpsData+0x27a>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 80016d2:	bf00      	nop
 80016d4:	4b48      	ldr	r3, [pc, #288]	; (80017f8 <getGpsData+0x3ac>)
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	b299      	uxth	r1, r3
 80016dc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80016e0:	2314      	movs	r3, #20
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2301      	movs	r3, #1
 80016e6:	4845      	ldr	r0, [pc, #276]	; (80017fc <getGpsData+0x3b0>)
 80016e8:	f002 fba6 	bl	8003e38 <HAL_I2C_Master_Transmit>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <getGpsData+0x288>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80016f2:	bf00      	nop
 80016f4:	4841      	ldr	r0, [pc, #260]	; (80017fc <getGpsData+0x3b0>)
 80016f6:	f002 fec3 	bl	8004480 <HAL_I2C_GetState>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b20      	cmp	r3, #32
 80016fe:	d1f9      	bne.n	80016f4 <getGpsData+0x2a8>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx4, 4, HAL_MAX_DELAY)){}
 8001700:	bf00      	nop
 8001702:	4b3d      	ldr	r3, [pc, #244]	; (80017f8 <getGpsData+0x3ac>)
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	b21b      	sxth	r3, r3
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	b21b      	sxth	r3, r3
 8001710:	b299      	uxth	r1, r3
 8001712:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	2304      	movs	r3, #4
 800171e:	4837      	ldr	r0, [pc, #220]	; (80017fc <getGpsData+0x3b0>)
 8001720:	f002 fc88 	bl	8004034 <HAL_I2C_Master_Receive>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1eb      	bne.n	8001702 <getGpsData+0x2b6>


	//Create concaterated buffer
	 size_t totalSize = sizeof(gpsDataRx1) + sizeof(gpsDataRx2) + sizeof(gpsDataRx3) + sizeof(gpsDataRx4);
 800172a:	2364      	movs	r3, #100	; 0x64
 800172c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	// Allocate memory for the concatenated array
	uint8_t *concatenatedArray = (uint8_t *)malloc(totalSize);
 8001730:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001734:	f004 fd38 	bl	80061a8 <malloc>
 8001738:	4603      	mov	r3, r0
 800173a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	// Copy the contents of each array into the concatenated array
	size_t offset = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx1, sizeof(gpsDataRx1));
 8001744:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001748:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800174c:	4413      	add	r3, r2
 800174e:	461d      	mov	r5, r3
 8001750:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8001754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001756:	6028      	str	r0, [r5, #0]
 8001758:	6069      	str	r1, [r5, #4]
 800175a:	60aa      	str	r2, [r5, #8]
 800175c:	60eb      	str	r3, [r5, #12]
 800175e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001760:	6128      	str	r0, [r5, #16]
 8001762:	6169      	str	r1, [r5, #20]
 8001764:	61aa      	str	r2, [r5, #24]
 8001766:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx1);
 8001768:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800176c:	3320      	adds	r3, #32
 800176e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx2, sizeof(gpsDataRx2));
 8001772:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001776:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800177a:	4413      	add	r3, r2
 800177c:	461d      	mov	r5, r3
 800177e:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001784:	6028      	str	r0, [r5, #0]
 8001786:	6069      	str	r1, [r5, #4]
 8001788:	60aa      	str	r2, [r5, #8]
 800178a:	60eb      	str	r3, [r5, #12]
 800178c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800178e:	6128      	str	r0, [r5, #16]
 8001790:	6169      	str	r1, [r5, #20]
 8001792:	61aa      	str	r2, [r5, #24]
 8001794:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx2);
 8001796:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800179a:	3320      	adds	r3, #32
 800179c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx3, sizeof(gpsDataRx3));
 80017a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80017a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017a8:	4413      	add	r3, r2
 80017aa:	461d      	mov	r5, r3
 80017ac:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80017b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b2:	6028      	str	r0, [r5, #0]
 80017b4:	6069      	str	r1, [r5, #4]
 80017b6:	60aa      	str	r2, [r5, #8]
 80017b8:	60eb      	str	r3, [r5, #12]
 80017ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017bc:	6128      	str	r0, [r5, #16]
 80017be:	6169      	str	r1, [r5, #20]
 80017c0:	61aa      	str	r2, [r5, #24]
 80017c2:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx3);
 80017c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017c8:	3320      	adds	r3, #32
 80017ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx4, sizeof(gpsDataRx4));
 80017ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80017d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017d6:	4413      	add	r3, r2
 80017d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017da:	601a      	str	r2, [r3, #0]


	//String comparisons
	const char* GNRMC = "NRMC,";
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <getGpsData+0x3b4>)
 80017de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	const char* minus1 = "-1";
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <getGpsData+0x3b8>)
 80017e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	const char* comma = ",";
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <getGpsData+0x3bc>)
 80017ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	char* gpsDataList[12];

	for (int i = 0; i < 12; i++) {
 80017ee:	2300      	movs	r3, #0
 80017f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80017f4:	e017      	b.n	8001826 <getGpsData+0x3da>
 80017f6:	bf00      	nop
 80017f8:	20000008 	.word	0x20000008
 80017fc:	2000025c 	.word	0x2000025c
 8001800:	0800a4d8 	.word	0x0800a4d8
 8001804:	0800a4e0 	.word	0x0800a4e0
 8001808:	0800a4e4 	.word	0x0800a4e4
	    gpsDataList[i] = "-1";
 800180c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	33d8      	adds	r3, #216	; 0xd8
 8001814:	443b      	add	r3, r7
 8001816:	4aad      	ldr	r2, [pc, #692]	; (8001acc <getGpsData+0x680>)
 8001818:	f843 2cc8 	str.w	r2, [r3, #-200]
	for (int i = 0; i < 12; i++) {
 800181c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001820:	3301      	adds	r3, #1
 8001822:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800182a:	2b0b      	cmp	r3, #11
 800182c:	ddee      	ble.n	800180c <getGpsData+0x3c0>
	}

	//Parsing the data and updating our values

	if (strncmp(concatenatedArray, GNRMC, strlen(GNRMC)) == 0) {
 800182e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001832:	f7fe fd25 	bl	8000280 <strlen>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800183e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001842:	f005 fb7a 	bl	8006f3a <strncmp>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d122      	bne.n	8001892 <getGpsData+0x446>
		char* individualGpsData = strtok(concatenatedArray, ","); // Initialize strtok with the buffer
 800184c:	49a0      	ldr	r1, [pc, #640]	; (8001ad0 <getGpsData+0x684>)
 800184e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001852:	f005 fb85 	bl	8006f60 <strtok>
 8001856:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		int index = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

		while (individualGpsData != NULL) {
 8001860:	e013      	b.n	800188a <getGpsData+0x43e>
			gpsDataList[index] = individualGpsData; // Store the token in an array
 8001862:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	33d8      	adds	r3, #216	; 0xd8
 800186a:	443b      	add	r3, r7
 800186c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001870:	f843 2cc8 	str.w	r2, [r3, #-200]
			individualGpsData = strtok(NULL, ","); // Get the next token
 8001874:	4996      	ldr	r1, [pc, #600]	; (8001ad0 <getGpsData+0x684>)
 8001876:	2000      	movs	r0, #0
 8001878:	f005 fb72 	bl	8006f60 <strtok>
 800187c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
			index++;
 8001880:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001884:	3301      	adds	r3, #1
 8001886:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		while (individualGpsData != NULL) {
 800188a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1e7      	bne.n	8001862 <getGpsData+0x416>
		}
	}

	//if the value is different from both -1 and ,, we update our time
	if ((strncmp(gpsDataList[1], minus1, strlen(minus1)) != 0) &&
 8001892:	697c      	ldr	r4, [r7, #20]
 8001894:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001898:	f7fe fcf2 	bl	8000280 <strlen>
 800189c:	4603      	mov	r3, r0
 800189e:	461a      	mov	r2, r3
 80018a0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80018a4:	4620      	mov	r0, r4
 80018a6:	f005 fb48 	bl	8006f3a <strncmp>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d019      	beq.n	80018e4 <getGpsData+0x498>
	   (strncmp(gpsDataList[1], comma, strlen(comma)) != 0)) {
 80018b0:	697c      	ldr	r4, [r7, #20]
 80018b2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80018b6:	f7fe fce3 	bl	8000280 <strlen>
 80018ba:	4603      	mov	r3, r0
 80018bc:	461a      	mov	r2, r3
 80018be:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80018c2:	4620      	mov	r0, r4
 80018c4:	f005 fb39 	bl	8006f3a <strncmp>
 80018c8:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[1], minus1, strlen(minus1)) != 0) &&
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00a      	beq.n	80018e4 <getGpsData+0x498>
		*time = atoi(gpsDataList[1]);
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f004 fc65 	bl	80061a0 <atoi>
 80018d6:	ee07 0a90 	vmov	s15, r0
 80018da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((strncmp(gpsDataList[3], minus1, strlen(minus1)) != 0) &&
 80018e4:	69fc      	ldr	r4, [r7, #28]
 80018e6:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80018ea:	f7fe fcc9 	bl	8000280 <strlen>
 80018ee:	4603      	mov	r3, r0
 80018f0:	461a      	mov	r2, r3
 80018f2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80018f6:	4620      	mov	r0, r4
 80018f8:	f005 fb1f 	bl	8006f3a <strncmp>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d019      	beq.n	8001936 <getGpsData+0x4ea>
	   (strncmp(gpsDataList[3], comma, strlen(comma)) != 0)) {
 8001902:	69fc      	ldr	r4, [r7, #28]
 8001904:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001908:	f7fe fcba 	bl	8000280 <strlen>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001914:	4620      	mov	r0, r4
 8001916:	f005 fb10 	bl	8006f3a <strncmp>
 800191a:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[3], minus1, strlen(minus1)) != 0) &&
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00a      	beq.n	8001936 <getGpsData+0x4ea>
		*lat = atoi(gpsDataList[3]);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	4618      	mov	r0, r3
 8001924:	f004 fc3c 	bl	80061a0 <atoi>
 8001928:	ee07 0a90 	vmov	s15, r0
 800192c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((strncmp(gpsDataList[4], minus1, strlen(minus1)) != 0) &&
 8001936:	6a3c      	ldr	r4, [r7, #32]
 8001938:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800193c:	f7fe fca0 	bl	8000280 <strlen>
 8001940:	4603      	mov	r3, r0
 8001942:	461a      	mov	r2, r3
 8001944:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001948:	4620      	mov	r0, r4
 800194a:	f005 faf6 	bl	8006f3a <strncmp>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d014      	beq.n	800197e <getGpsData+0x532>
	   (strncmp(gpsDataList[4], comma, strlen(comma)) != 0)) {
 8001954:	6a3c      	ldr	r4, [r7, #32]
 8001956:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800195a:	f7fe fc91 	bl	8000280 <strlen>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001966:	4620      	mov	r0, r4
 8001968:	f005 fae7 	bl	8006f3a <strncmp>
 800196c:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[4], minus1, strlen(minus1)) != 0) &&
 800196e:	2b00      	cmp	r3, #0
 8001970:	d005      	beq.n	800197e <getGpsData+0x532>
		strcpy(latDir, gpsDataList[4]);
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	4619      	mov	r1, r3
 8001976:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800197a:	f005 fbd3 	bl	8007124 <strcpy>
	}

	if ((strncmp(gpsDataList[5], minus1, strlen(minus1)) != 0) &&
 800197e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001980:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001984:	f7fe fc7c 	bl	8000280 <strlen>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001990:	4620      	mov	r0, r4
 8001992:	f005 fad2 	bl	8006f3a <strncmp>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d019      	beq.n	80019d0 <getGpsData+0x584>
	   (strncmp(gpsDataList[5], comma, strlen(comma)) != 0)) {
 800199c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800199e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80019a2:	f7fe fc6d 	bl	8000280 <strlen>
 80019a6:	4603      	mov	r3, r0
 80019a8:	461a      	mov	r2, r3
 80019aa:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80019ae:	4620      	mov	r0, r4
 80019b0:	f005 fac3 	bl	8006f3a <strncmp>
 80019b4:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[5], minus1, strlen(minus1)) != 0) &&
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00a      	beq.n	80019d0 <getGpsData+0x584>
		*longi = atoi(gpsDataList[5]);
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	4618      	mov	r0, r3
 80019be:	f004 fbef 	bl	80061a0 <atoi>
 80019c2:	ee07 0a90 	vmov	s15, r0
 80019c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((strncmp(gpsDataList[6], minus1, strlen(minus1)) != 0) &&
 80019d0:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80019d2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80019d6:	f7fe fc53 	bl	8000280 <strlen>
 80019da:	4603      	mov	r3, r0
 80019dc:	461a      	mov	r2, r3
 80019de:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80019e2:	4620      	mov	r0, r4
 80019e4:	f005 faa9 	bl	8006f3a <strncmp>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d014      	beq.n	8001a18 <getGpsData+0x5cc>
	   (strncmp(gpsDataList[6], comma, strlen(comma)) != 0)) {
 80019ee:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80019f0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80019f4:	f7fe fc44 	bl	8000280 <strlen>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001a00:	4620      	mov	r0, r4
 8001a02:	f005 fa9a 	bl	8006f3a <strncmp>
 8001a06:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[6], minus1, strlen(minus1)) != 0) &&
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <getGpsData+0x5cc>
		strcpy(longDir, gpsDataList[6]);
 8001a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001a14:	f005 fb86 	bl	8007124 <strcpy>
	}

	if ((strncmp(gpsDataList[8], minus1, strlen(minus1)) != 0) &&
 8001a18:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001a1a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001a1e:	f7fe fc2f 	bl	8000280 <strlen>
 8001a22:	4603      	mov	r3, r0
 8001a24:	461a      	mov	r2, r3
 8001a26:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	f005 fa85 	bl	8006f3a <strncmp>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d019      	beq.n	8001a6a <getGpsData+0x61e>
	   (strncmp(gpsDataList[8], comma, strlen(comma)) != 0)) {
 8001a36:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001a38:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001a3c:	f7fe fc20 	bl	8000280 <strlen>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f005 fa76 	bl	8006f3a <strncmp>
 8001a4e:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[8], minus1, strlen(minus1)) != 0) &&
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00a      	beq.n	8001a6a <getGpsData+0x61e>
		*date = atoi(gpsDataList[8]);
 8001a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a56:	4618      	mov	r0, r3
 8001a58:	f004 fba2 	bl	80061a0 <atoi>
 8001a5c:	ee07 0a90 	vmov	s15, r0
 8001a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	edc3 7a00 	vstr	s15, [r3]
	}


		//Sending data via UART
	HAL_UART_Transmit(&huart2, gpsDataRx1, sizeof(gpsDataRx1), HAL_MAX_DELAY);
 8001a6a:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a72:	2220      	movs	r2, #32
 8001a74:	4817      	ldr	r0, [pc, #92]	; (8001ad4 <getGpsData+0x688>)
 8001a76:	f004 f81e 	bl	8005ab6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, gpsDataRx2, sizeof(gpsDataRx2), HAL_MAX_DELAY);
 8001a7a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	2220      	movs	r2, #32
 8001a84:	4813      	ldr	r0, [pc, #76]	; (8001ad4 <getGpsData+0x688>)
 8001a86:	f004 f816 	bl	8005ab6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, gpsDataRx3, sizeof(gpsDataRx3), HAL_MAX_DELAY);
 8001a8a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a92:	2220      	movs	r2, #32
 8001a94:	480f      	ldr	r0, [pc, #60]	; (8001ad4 <getGpsData+0x688>)
 8001a96:	f004 f80e 	bl	8005ab6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, gpsDataRx4, sizeof(gpsDataRx4), HAL_MAX_DELAY);
 8001a9a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	480b      	ldr	r0, [pc, #44]	; (8001ad4 <getGpsData+0x688>)
 8001aa6:	f004 f806 	bl	8005ab6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, concatenatedArray, sizeof(concatenatedArray), HAL_MAX_DELAY);
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	2204      	movs	r2, #4
 8001ab0:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001ab4:	4807      	ldr	r0, [pc, #28]	; (8001ad4 <getGpsData+0x688>)
 8001ab6:	f003 fffe 	bl	8005ab6 <HAL_UART_Transmit>

	free(concatenatedArray);
 8001aba:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001abe:	f004 fb7b 	bl	80061b8 <free>
}
 8001ac2:	bf00      	nop
 8001ac4:	37d8      	adds	r7, #216	; 0xd8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bdb0      	pop	{r4, r5, r7, pc}
 8001aca:	bf00      	nop
 8001acc:	0800a4e0 	.word	0x0800a4e0
 8001ad0:	0800a4e4 	.word	0x0800a4e4
 8001ad4:	2000033c 	.word	0x2000033c

08001ad8 <magnetometerData>:

float magnetometerData(float xCal,float yCal,float zCal) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08c      	sub	sp, #48	; 0x30
 8001adc:	af02      	add	r7, sp, #8
 8001ade:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ae2:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ae6:	ed87 1a01 	vstr	s2, [r7, #4]
	int16_t magnetometerVal [3] = {0};
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	809a      	strh	r2, [r3, #4]

	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &dataRegister, 1, 20) != HAL_OK){} //send data register address
 8001af4:	bf00      	nop
 8001af6:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <magnetometerData+0xac>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	b299      	uxth	r1, r3
 8001b00:	2314      	movs	r3, #20
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2301      	movs	r3, #1
 8001b06:	4a20      	ldr	r2, [pc, #128]	; (8001b88 <magnetometerData+0xb0>)
 8001b08:	4820      	ldr	r0, [pc, #128]	; (8001b8c <magnetometerData+0xb4>)
 8001b0a:	f002 f995 	bl	8003e38 <HAL_I2C_Master_Transmit>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f0      	bne.n	8001af6 <magnetometerData+0x1e>
	while (HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), magnetometerVal, 6, HAL_MAX_DELAY)){}
 8001b14:	bf00      	nop
 8001b16:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <magnetometerData+0xac>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	b21b      	sxth	r3, r3
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	b21b      	sxth	r3, r3
 8001b24:	b299      	uxth	r1, r3
 8001b26:	f107 0214 	add.w	r2, r7, #20
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	2306      	movs	r3, #6
 8001b32:	4816      	ldr	r0, [pc, #88]	; (8001b8c <magnetometerData+0xb4>)
 8001b34:	f002 fa7e 	bl	8004034 <HAL_I2C_Master_Receive>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1eb      	bne.n	8001b16 <magnetometerData+0x3e>

	int16_t xMag = magnetometerVal[0];
 8001b3e:	8abb      	ldrh	r3, [r7, #20]
 8001b40:	84fb      	strh	r3, [r7, #38]	; 0x26

	int16_t yMag = magnetometerVal[1];
 8001b42:	8afb      	ldrh	r3, [r7, #22]
 8001b44:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t zMag = magnetometerVal[2];
 8001b46:	8b3b      	ldrh	r3, [r7, #24]
 8001b48:	847b      	strh	r3, [r7, #34]	; 0x22

	float direction = getDirectionAngle(xMag, yMag, zMag, xCal, yCal, zCal);
 8001b4a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8001b4e:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	; 0x24
 8001b52:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001b56:	ed97 1a01 	vldr	s2, [r7, #4]
 8001b5a:	edd7 0a02 	vldr	s1, [r7, #8]
 8001b5e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 fa58 	bl	8002018 <getDirectionAngle>
 8001b68:	ed87 0a07 	vstr	s0, [r7, #28]
	printDirection(direction);
 8001b6c:	ed97 0a07 	vldr	s0, [r7, #28]
 8001b70:	f000 fb00 	bl	8002174 <printDirection>

	return direction;
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	ee07 3a90 	vmov	s15, r3
}
 8001b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b7e:	3728      	adds	r7, #40	; 0x28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000000 	.word	0x20000000
 8001b88:	20000001 	.word	0x20000001
 8001b8c:	2000025c 	.word	0x2000025c

08001b90 <setupMag>:


void setupMag() {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af02      	add	r7, sp, #8
//
//	//Values to send
//	uint8_t initRegA = 0x0C;
//	uint8_t disRegA = 0x0E;
//	uint8_t initRegC = 0x10;
	uint8_t magSetupRX = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	71fb      	strb	r3, [r7, #7]

	uint8_t magSetupTX [2] = {0};
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	80bb      	strh	r3, [r7, #4]

	//1
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegC, 1, HAL_MAX_DELAY) != HAL_OK){} //send address pointer
 8001b9e:	bf00      	nop
 8001ba0:	4b8d      	ldr	r3, [pc, #564]	; (8001dd8 <setupMag+0x248>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	b299      	uxth	r1, r3
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	4a8a      	ldr	r2, [pc, #552]	; (8001ddc <setupMag+0x24c>)
 8001bb4:	488a      	ldr	r0, [pc, #552]	; (8001de0 <setupMag+0x250>)
 8001bb6:	f002 f93f 	bl	8003e38 <HAL_I2C_Master_Transmit>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1ef      	bne.n	8001ba0 <setupMag+0x10>

	//2
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8001bc0:	4b85      	ldr	r3, [pc, #532]	; (8001dd8 <setupMag+0x248>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	b21b      	sxth	r3, r3
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	b21b      	sxth	r3, r3
 8001bce:	b299      	uxth	r1, r3
 8001bd0:	1dfa      	adds	r2, r7, #7
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	4881      	ldr	r0, [pc, #516]	; (8001de0 <setupMag+0x250>)
 8001bdc:	f002 fa2a 	bl	8004034 <HAL_I2C_Master_Receive>


	//3
	magSetupTX[0] = cfgRegC;
 8001be0:	4b7e      	ldr	r3, [pc, #504]	; (8001ddc <setupMag+0x24c>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = initRegC;
 8001be6:	4b7f      	ldr	r3, [pc, #508]	; (8001de4 <setupMag+0x254>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 8001bec:	bf00      	nop
 8001bee:	4b7a      	ldr	r3, [pc, #488]	; (8001dd8 <setupMag+0x248>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	b299      	uxth	r1, r3
 8001bf8:	1d3a      	adds	r2, r7, #4
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	2302      	movs	r3, #2
 8001c02:	4877      	ldr	r0, [pc, #476]	; (8001de0 <setupMag+0x250>)
 8001c04:	f002 f918 	bl	8003e38 <HAL_I2C_Master_Transmit>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1ef      	bne.n	8001bee <setupMag+0x5e>

	//4
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegA, 1, HAL_MAX_DELAY) != HAL_OK){}
 8001c0e:	bf00      	nop
 8001c10:	4b71      	ldr	r3, [pc, #452]	; (8001dd8 <setupMag+0x248>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	b299      	uxth	r1, r3
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2301      	movs	r3, #1
 8001c22:	4a71      	ldr	r2, [pc, #452]	; (8001de8 <setupMag+0x258>)
 8001c24:	486e      	ldr	r0, [pc, #440]	; (8001de0 <setupMag+0x250>)
 8001c26:	f002 f907 	bl	8003e38 <HAL_I2C_Master_Transmit>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1ef      	bne.n	8001c10 <setupMag+0x80>

	//5
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8001c30:	4b69      	ldr	r3, [pc, #420]	; (8001dd8 <setupMag+0x248>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	b21b      	sxth	r3, r3
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	b299      	uxth	r1, r3
 8001c40:	1dfa      	adds	r2, r7, #7
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	2301      	movs	r3, #1
 8001c4a:	4865      	ldr	r0, [pc, #404]	; (8001de0 <setupMag+0x250>)
 8001c4c:	f002 f9f2 	bl	8004034 <HAL_I2C_Master_Receive>

	//6
	magSetupTX[0] = cfgRegA;
 8001c50:	4b65      	ldr	r3, [pc, #404]	; (8001de8 <setupMag+0x258>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = disRegA;
 8001c56:	4b65      	ldr	r3, [pc, #404]	; (8001dec <setupMag+0x25c>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 8001c5c:	bf00      	nop
 8001c5e:	4b5e      	ldr	r3, [pc, #376]	; (8001dd8 <setupMag+0x248>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	b299      	uxth	r1, r3
 8001c68:	1d3a      	adds	r2, r7, #4
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	2302      	movs	r3, #2
 8001c72:	485b      	ldr	r0, [pc, #364]	; (8001de0 <setupMag+0x250>)
 8001c74:	f002 f8e0 	bl	8003e38 <HAL_I2C_Master_Transmit>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1ef      	bne.n	8001c5e <setupMag+0xce>

	//7
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegA, 1, HAL_MAX_DELAY) != HAL_OK){}
 8001c7e:	bf00      	nop
 8001c80:	4b55      	ldr	r3, [pc, #340]	; (8001dd8 <setupMag+0x248>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	b299      	uxth	r1, r3
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2301      	movs	r3, #1
 8001c92:	4a55      	ldr	r2, [pc, #340]	; (8001de8 <setupMag+0x258>)
 8001c94:	4852      	ldr	r0, [pc, #328]	; (8001de0 <setupMag+0x250>)
 8001c96:	f002 f8cf 	bl	8003e38 <HAL_I2C_Master_Transmit>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1ef      	bne.n	8001c80 <setupMag+0xf0>

	//8
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8001ca0:	4b4d      	ldr	r3, [pc, #308]	; (8001dd8 <setupMag+0x248>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	b21b      	sxth	r3, r3
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	b21b      	sxth	r3, r3
 8001cae:	b299      	uxth	r1, r3
 8001cb0:	1dfa      	adds	r2, r7, #7
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	2301      	movs	r3, #1
 8001cba:	4849      	ldr	r0, [pc, #292]	; (8001de0 <setupMag+0x250>)
 8001cbc:	f002 f9ba 	bl	8004034 <HAL_I2C_Master_Receive>

	//9
	magSetupTX[0] = cfgRegA;
 8001cc0:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <setupMag+0x258>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = disRegA;
 8001cc6:	4b49      	ldr	r3, [pc, #292]	; (8001dec <setupMag+0x25c>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 8001ccc:	bf00      	nop
 8001cce:	4b42      	ldr	r3, [pc, #264]	; (8001dd8 <setupMag+0x248>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	b299      	uxth	r1, r3
 8001cd8:	1d3a      	adds	r2, r7, #4
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	483f      	ldr	r0, [pc, #252]	; (8001de0 <setupMag+0x250>)
 8001ce4:	f002 f8a8 	bl	8003e38 <HAL_I2C_Master_Transmit>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1ef      	bne.n	8001cce <setupMag+0x13e>

	//10
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegC, 1, HAL_MAX_DELAY) != HAL_OK){}
 8001cee:	bf00      	nop
 8001cf0:	4b39      	ldr	r3, [pc, #228]	; (8001dd8 <setupMag+0x248>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	b299      	uxth	r1, r3
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2301      	movs	r3, #1
 8001d02:	4a36      	ldr	r2, [pc, #216]	; (8001ddc <setupMag+0x24c>)
 8001d04:	4836      	ldr	r0, [pc, #216]	; (8001de0 <setupMag+0x250>)
 8001d06:	f002 f897 	bl	8003e38 <HAL_I2C_Master_Transmit>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1ef      	bne.n	8001cf0 <setupMag+0x160>

	//11
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8001d10:	4b31      	ldr	r3, [pc, #196]	; (8001dd8 <setupMag+0x248>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	b21b      	sxth	r3, r3
 8001d1e:	b299      	uxth	r1, r3
 8001d20:	1dfa      	adds	r2, r7, #7
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	2301      	movs	r3, #1
 8001d2a:	482d      	ldr	r0, [pc, #180]	; (8001de0 <setupMag+0x250>)
 8001d2c:	f002 f982 	bl	8004034 <HAL_I2C_Master_Receive>


	//12
	magSetupTX[0] = cfgRegC;
 8001d30:	4b2a      	ldr	r3, [pc, #168]	; (8001ddc <setupMag+0x24c>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = initRegC;
 8001d36:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <setupMag+0x254>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 8001d3c:	bf00      	nop
 8001d3e:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <setupMag+0x248>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	b299      	uxth	r1, r3
 8001d48:	1d3a      	adds	r2, r7, #4
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2302      	movs	r3, #2
 8001d52:	4823      	ldr	r0, [pc, #140]	; (8001de0 <setupMag+0x250>)
 8001d54:	f002 f870 	bl	8003e38 <HAL_I2C_Master_Transmit>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1ef      	bne.n	8001d3e <setupMag+0x1ae>

	//13
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegA, 2, HAL_MAX_DELAY) != HAL_OK){}
 8001d5e:	bf00      	nop
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <setupMag+0x248>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	b299      	uxth	r1, r3
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	2302      	movs	r3, #2
 8001d72:	4a1d      	ldr	r2, [pc, #116]	; (8001de8 <setupMag+0x258>)
 8001d74:	481a      	ldr	r0, [pc, #104]	; (8001de0 <setupMag+0x250>)
 8001d76:	f002 f85f 	bl	8003e38 <HAL_I2C_Master_Transmit>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1ef      	bne.n	8001d60 <setupMag+0x1d0>

	//14
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8001d80:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <setupMag+0x248>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	b21b      	sxth	r3, r3
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	b21b      	sxth	r3, r3
 8001d8e:	b299      	uxth	r1, r3
 8001d90:	1dfa      	adds	r2, r7, #7
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2301      	movs	r3, #1
 8001d9a:	4811      	ldr	r0, [pc, #68]	; (8001de0 <setupMag+0x250>)
 8001d9c:	f002 f94a 	bl	8004034 <HAL_I2C_Master_Receive>


	//15
	magSetupTX[0] = cfgRegA;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <setupMag+0x258>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = initRegA;
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <setupMag+0x260>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 8001dac:	bf00      	nop
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <setupMag+0x248>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	b299      	uxth	r1, r3
 8001db8:	1d3a      	adds	r2, r7, #4
 8001dba:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	4807      	ldr	r0, [pc, #28]	; (8001de0 <setupMag+0x250>)
 8001dc4:	f002 f838 	bl	8003e38 <HAL_I2C_Master_Transmit>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1ef      	bne.n	8001dae <setupMag+0x21e>
}
 8001dce:	bf00      	nop
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	20000003 	.word	0x20000003
 8001de0:	2000025c 	.word	0x2000025c
 8001de4:	20000006 	.word	0x20000006
 8001de8:	20000002 	.word	0x20000002
 8001dec:	20000005 	.word	0x20000005
 8001df0:	20000004 	.word	0x20000004

08001df4 <hardIronCal>:

void hardIronCal(float* xCal, float* yCal, float* zCal) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b09c      	sub	sp, #112	; 0x70
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  //Print Value to terminal
  uint8_t buf[30];
  sprintf((char*)buf, "Calibrating Magnetometer...\r\n");
 8001e00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e04:	497e      	ldr	r1, [pc, #504]	; (8002000 <hardIronCal+0x20c>)
 8001e06:	4618      	mov	r0, r3
 8001e08:	f005 f82c 	bl	8006e64 <siprintf>
  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001e0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fa35 	bl	8000280 <strlen>
 8001e16:	4603      	mov	r3, r0
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e22:	4878      	ldr	r0, [pc, #480]	; (8002004 <hardIronCal+0x210>)
 8001e24:	f003 fe47 	bl	8005ab6 <HAL_UART_Transmit>

  int16_t magnetometerVal [3] = {0};
 8001e28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	809a      	strh	r2, [r3, #4]

  while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &dataRegister, 1, 20) != HAL_OK){} //send data register address
 8001e32:	bf00      	nop
 8001e34:	4b74      	ldr	r3, [pc, #464]	; (8002008 <hardIronCal+0x214>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	b299      	uxth	r1, r3
 8001e3e:	2314      	movs	r3, #20
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	2301      	movs	r3, #1
 8001e44:	4a71      	ldr	r2, [pc, #452]	; (800200c <hardIronCal+0x218>)
 8001e46:	4872      	ldr	r0, [pc, #456]	; (8002010 <hardIronCal+0x21c>)
 8001e48:	f001 fff6 	bl	8003e38 <HAL_I2C_Master_Transmit>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <hardIronCal+0x40>
  while (HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), magnetometerVal, 6, HAL_MAX_DELAY)){}
 8001e52:	bf00      	nop
 8001e54:	4b6c      	ldr	r3, [pc, #432]	; (8002008 <hardIronCal+0x214>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	b21b      	sxth	r3, r3
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	b299      	uxth	r1, r3
 8001e64:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2306      	movs	r3, #6
 8001e70:	4867      	ldr	r0, [pc, #412]	; (8002010 <hardIronCal+0x21c>)
 8001e72:	f002 f8df 	bl	8004034 <HAL_I2C_Master_Receive>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1eb      	bne.n	8001e54 <hardIronCal+0x60>

  int16_t xMax = magnetometerVal[0];
 8001e7c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001e7e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  int16_t xMin = magnetometerVal[0];
 8001e82:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001e84:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  int16_t yMax = magnetometerVal[1];
 8001e88:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001e8a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  int16_t yMin = magnetometerVal[1];
 8001e8e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001e90:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

  int16_t zMax = magnetometerVal[2];
 8001e94:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e96:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  int16_t zMin = magnetometerVal[2];
 8001e9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e9c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c


  for (int i = 0; i < 50; i++) {
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ea4:	e077      	b.n	8001f96 <hardIronCal+0x1a2>
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &dataRegister, 1, 20) != HAL_OK){} //send data register address
 8001ea6:	bf00      	nop
 8001ea8:	4b57      	ldr	r3, [pc, #348]	; (8002008 <hardIronCal+0x214>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	b299      	uxth	r1, r3
 8001eb2:	2314      	movs	r3, #20
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	4a54      	ldr	r2, [pc, #336]	; (800200c <hardIronCal+0x218>)
 8001eba:	4855      	ldr	r0, [pc, #340]	; (8002010 <hardIronCal+0x21c>)
 8001ebc:	f001 ffbc 	bl	8003e38 <HAL_I2C_Master_Transmit>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <hardIronCal+0xb4>
	while (HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), magnetometerVal, 6, HAL_MAX_DELAY)){}
 8001ec6:	bf00      	nop
 8001ec8:	4b4f      	ldr	r3, [pc, #316]	; (8002008 <hardIronCal+0x214>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	b21b      	sxth	r3, r3
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	b299      	uxth	r1, r3
 8001ed8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001edc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2306      	movs	r3, #6
 8001ee4:	484a      	ldr	r0, [pc, #296]	; (8002010 <hardIronCal+0x21c>)
 8001ee6:	f002 f8a5 	bl	8004034 <HAL_I2C_Master_Receive>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1eb      	bne.n	8001ec8 <hardIronCal+0xd4>

    //Updating xMax and xMin
    if (magnetometerVal[0] > xMax) {
 8001ef0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001ef4:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	da03      	bge.n	8001f04 <hardIronCal+0x110>
      xMax = magnetometerVal[0];
 8001efc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001efe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001f02:	e008      	b.n	8001f16 <hardIronCal+0x122>
    }

    else if (magnetometerVal[0] < xMin) {
 8001f04:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001f08:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	dd02      	ble.n	8001f16 <hardIronCal+0x122>
      xMin = magnetometerVal[0];
 8001f10:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001f12:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    }

    //Updating yMax and yMin
    if (magnetometerVal[1] > yMax) {
 8001f16:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001f1a:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	da03      	bge.n	8001f2a <hardIronCal+0x136>
      yMax = magnetometerVal[1];
 8001f22:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001f24:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001f28:	e008      	b.n	8001f3c <hardIronCal+0x148>
    }

    else if (magnetometerVal[1] < yMin) {
 8001f2a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001f2e:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 8001f32:	429a      	cmp	r2, r3
 8001f34:	dd02      	ble.n	8001f3c <hardIronCal+0x148>
      yMin = magnetometerVal[1];
 8001f36:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001f38:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    }

    //Updating zMax and zMin
    if (magnetometerVal[2] > zMax) {
 8001f3c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001f40:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8001f44:	429a      	cmp	r2, r3
 8001f46:	da03      	bge.n	8001f50 <hardIronCal+0x15c>
      zMax = magnetometerVal[2];
 8001f48:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001f4a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001f4e:	e008      	b.n	8001f62 <hardIronCal+0x16e>
    }

    else if (magnetometerVal[2] < zMin) {
 8001f50:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001f54:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	dd02      	ble.n	8001f62 <hardIronCal+0x16e>
      zMin = magnetometerVal[2];
 8001f5c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001f5e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }

    HAL_Delay(250);
 8001f62:	20fa      	movs	r0, #250	; 0xfa
 8001f64:	f000 ff8a 	bl	8002e7c <HAL_Delay>
    uint8_t buf[30];
    sprintf((char*)buf, "Calibrating Magnetometer...\r\n");
 8001f68:	f107 0310 	add.w	r3, r7, #16
 8001f6c:	4924      	ldr	r1, [pc, #144]	; (8002000 <hardIronCal+0x20c>)
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f004 ff78 	bl	8006e64 <siprintf>
    HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001f74:	f107 0310 	add.w	r3, r7, #16
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe f981 	bl	8000280 <strlen>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	f107 0110 	add.w	r1, r7, #16
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8a:	481e      	ldr	r0, [pc, #120]	; (8002004 <hardIronCal+0x210>)
 8001f8c:	f003 fd93 	bl	8005ab6 <HAL_UART_Transmit>
  for (int i = 0; i < 50; i++) {
 8001f90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f92:	3301      	adds	r3, #1
 8001f94:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f98:	2b31      	cmp	r3, #49	; 0x31
 8001f9a:	dd84      	ble.n	8001ea6 <hardIronCal+0xb2>
  }

  //finding the calibration values
  *xCal = (xMax + xMin) / 2;
 8001f9c:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8001fa0:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001fa4:	4413      	add	r3, r2
 8001fa6:	0fda      	lsrs	r2, r3, #31
 8001fa8:	4413      	add	r3, r2
 8001faa:	105b      	asrs	r3, r3, #1
 8001fac:	ee07 3a90 	vmov	s15, r3
 8001fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	edc3 7a00 	vstr	s15, [r3]
  *yCal = (yMax + yMin) / 2;
 8001fba:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8001fbe:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001fc2:	4413      	add	r3, r2
 8001fc4:	0fda      	lsrs	r2, r3, #31
 8001fc6:	4413      	add	r3, r2
 8001fc8:	105b      	asrs	r3, r3, #1
 8001fca:	ee07 3a90 	vmov	s15, r3
 8001fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	edc3 7a00 	vstr	s15, [r3]
  *zCal = (zMax + zMin) / 2;
 8001fd8:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8001fdc:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8001fe0:	4413      	add	r3, r2
 8001fe2:	0fda      	lsrs	r2, r3, #31
 8001fe4:	4413      	add	r3, r2
 8001fe6:	105b      	asrs	r3, r3, #1
 8001fe8:	ee07 3a90 	vmov	s15, r3
 8001fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	edc3 7a00 	vstr	s15, [r3]
}
 8001ff6:	bf00      	nop
 8001ff8:	3768      	adds	r7, #104	; 0x68
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	0800a4e8 	.word	0x0800a4e8
 8002004:	2000033c 	.word	0x2000033c
 8002008:	20000000 	.word	0x20000000
 800200c:	20000001 	.word	0x20000001
 8002010:	2000025c 	.word	0x2000025c
 8002014:	00000000 	.word	0x00000000

08002018 <getDirectionAngle>:

float getDirectionAngle(int16_t xMag, int16_t yMag, int16_t zMag, float xCal, float yCal, float zCal){
 8002018:	b5b0      	push	{r4, r5, r7, lr}
 800201a:	b08c      	sub	sp, #48	; 0x30
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	ed87 0a03 	vstr	s0, [r7, #12]
 8002024:	edc7 0a02 	vstr	s1, [r7, #8]
 8002028:	ed87 1a01 	vstr	s2, [r7, #4]
 800202c:	82fb      	strh	r3, [r7, #22]
 800202e:	460b      	mov	r3, r1
 8002030:	82bb      	strh	r3, [r7, #20]
 8002032:	4613      	mov	r3, r2
 8002034:	827b      	strh	r3, [r7, #18]
  xMag -= xCal;
 8002036:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800203a:	ee07 3a90 	vmov	s15, r3
 800203e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002042:	edd7 7a03 	vldr	s15, [r7, #12]
 8002046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800204a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800204e:	ee17 3a90 	vmov	r3, s15
 8002052:	82fb      	strh	r3, [r7, #22]
  yMag -= yCal;
 8002054:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002058:	ee07 3a90 	vmov	s15, r3
 800205c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002060:	edd7 7a02 	vldr	s15, [r7, #8]
 8002064:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800206c:	ee17 3a90 	vmov	r3, s15
 8002070:	82bb      	strh	r3, [r7, #20]
  zMag -= zCal;
 8002072:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002076:	ee07 3a90 	vmov	s15, r3
 800207a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800207e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002082:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002086:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800208a:	ee17 3a90 	vmov	r3, s15
 800208e:	827b      	strh	r3, [r7, #18]

  float D = atan2(xMag, yMag) * (180 / M_PI);
 8002090:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fa4d 	bl	8000534 <__aeabi_i2d>
 800209a:	4604      	mov	r4, r0
 800209c:	460d      	mov	r5, r1
 800209e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fa46 	bl	8000534 <__aeabi_i2d>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	ec43 2b11 	vmov	d1, r2, r3
 80020b0:	ec45 4b10 	vmov	d0, r4, r5
 80020b4:	f006 fff2 	bl	800909c <atan2>
 80020b8:	ec51 0b10 	vmov	r0, r1, d0
 80020bc:	a32b      	add	r3, pc, #172	; (adr r3, 800216c <getDirectionAngle+0x154>)
 80020be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c2:	f7fe faa1 	bl	8000608 <__aeabi_dmul>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	f7fe fd73 	bl	8000bb8 <__aeabi_d2f>
 80020d2:	4603      	mov	r3, r0
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (D > 360) {
 80020d6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80020da:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002160 <getDirectionAngle+0x148>
 80020de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e6:	dd08      	ble.n	80020fa <getDirectionAngle+0xe2>
    D -= 360;
 80020e8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80020ec:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002160 <getDirectionAngle+0x148>
 80020f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020f4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80020f8:	e00e      	b.n	8002118 <getDirectionAngle+0x100>
  }
  else if (D < 0){
 80020fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80020fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002106:	d507      	bpl.n	8002118 <getDirectionAngle+0x100>
    D += 360;
 8002108:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800210c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002160 <getDirectionAngle+0x148>
 8002110:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002114:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  }

  uint8_t buf[20];
  sprintf((char*)buf, "D = %u \r\n", (unsigned int)D);
 8002118:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800211c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002120:	f107 0318 	add.w	r3, r7, #24
 8002124:	ee17 2a90 	vmov	r2, s15
 8002128:	490e      	ldr	r1, [pc, #56]	; (8002164 <getDirectionAngle+0x14c>)
 800212a:	4618      	mov	r0, r3
 800212c:	f004 fe9a 	bl	8006e64 <siprintf>
  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8002130:	f107 0318 	add.w	r3, r7, #24
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe f8a3 	bl	8000280 <strlen>
 800213a:	4603      	mov	r3, r0
 800213c:	b29a      	uxth	r2, r3
 800213e:	f107 0118 	add.w	r1, r7, #24
 8002142:	f04f 33ff 	mov.w	r3, #4294967295
 8002146:	4808      	ldr	r0, [pc, #32]	; (8002168 <getDirectionAngle+0x150>)
 8002148:	f003 fcb5 	bl	8005ab6 <HAL_UART_Transmit>

  return D;
 800214c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214e:	ee07 3a90 	vmov	s15, r3
}
 8002152:	eeb0 0a67 	vmov.f32	s0, s15
 8002156:	3730      	adds	r7, #48	; 0x30
 8002158:	46bd      	mov	sp, r7
 800215a:	bdb0      	pop	{r4, r5, r7, pc}
 800215c:	f3af 8000 	nop.w
 8002160:	43b40000 	.word	0x43b40000
 8002164:	0800a508 	.word	0x0800a508
 8002168:	2000033c 	.word	0x2000033c
 800216c:	1a63c1f8 	.word	0x1a63c1f8
 8002170:	404ca5dc 	.word	0x404ca5dc

08002174 <printDirection>:

void printDirection(float D) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b0a2      	sub	sp, #136	; 0x88
 8002178:	af00      	add	r7, sp, #0
 800217a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (D > 337.25 || D < 22.5)
 800217e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002182:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80023fc <printDirection+0x288>
 8002186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800218a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218e:	dc08      	bgt.n	80021a2 <printDirection+0x2e>
 8002190:	edd7 7a01 	vldr	s15, [r7, #4]
 8002194:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8002400 <printDirection+0x28c>
 8002198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800219c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a0:	d514      	bpl.n	80021cc <printDirection+0x58>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "North \r\n");
 80021a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80021a6:	4997      	ldr	r1, [pc, #604]	; (8002404 <printDirection+0x290>)
 80021a8:	4618      	mov	r0, r3
 80021aa:	f004 fe5b 	bl	8006e64 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80021ae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f864 	bl	8000280 <strlen>
 80021b8:	4603      	mov	r3, r0
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80021c0:	f04f 33ff 	mov.w	r3, #4294967295
 80021c4:	4890      	ldr	r0, [pc, #576]	; (8002408 <printDirection+0x294>)
 80021c6:	f003 fc76 	bl	8005ab6 <HAL_UART_Transmit>
	{
 80021ca:	e112      	b.n	80023f2 <printDirection+0x27e>
	}
	else if (D >= 292.5 && D <= 337.25)
 80021cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80021d0:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 800240c <printDirection+0x298>
 80021d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021dc:	db1d      	blt.n	800221a <printDirection+0xa6>
 80021de:	edd7 7a01 	vldr	s15, [r7, #4]
 80021e2:	ed9f 7a86 	vldr	s14, [pc, #536]	; 80023fc <printDirection+0x288>
 80021e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ee:	d814      	bhi.n	800221a <printDirection+0xa6>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "North-West \r\n");
 80021f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80021f4:	4986      	ldr	r1, [pc, #536]	; (8002410 <printDirection+0x29c>)
 80021f6:	4618      	mov	r0, r3
 80021f8:	f004 fe34 	bl	8006e64 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80021fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe f83d 	bl	8000280 <strlen>
 8002206:	4603      	mov	r3, r0
 8002208:	b29a      	uxth	r2, r3
 800220a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800220e:	f04f 33ff 	mov.w	r3, #4294967295
 8002212:	487d      	ldr	r0, [pc, #500]	; (8002408 <printDirection+0x294>)
 8002214:	f003 fc4f 	bl	8005ab6 <HAL_UART_Transmit>
	{
 8002218:	e0eb      	b.n	80023f2 <printDirection+0x27e>
	}
	else if (D >= 247.5 && D < 292.5)
 800221a:	edd7 7a01 	vldr	s15, [r7, #4]
 800221e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002414 <printDirection+0x2a0>
 8002222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222a:	db1d      	blt.n	8002268 <printDirection+0xf4>
 800222c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002230:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800240c <printDirection+0x298>
 8002234:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223c:	d514      	bpl.n	8002268 <printDirection+0xf4>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "West \r\n");
 800223e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002242:	4975      	ldr	r1, [pc, #468]	; (8002418 <printDirection+0x2a4>)
 8002244:	4618      	mov	r0, r3
 8002246:	f004 fe0d 	bl	8006e64 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800224a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f816 	bl	8000280 <strlen>
 8002254:	4603      	mov	r3, r0
 8002256:	b29a      	uxth	r2, r3
 8002258:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800225c:	f04f 33ff 	mov.w	r3, #4294967295
 8002260:	4869      	ldr	r0, [pc, #420]	; (8002408 <printDirection+0x294>)
 8002262:	f003 fc28 	bl	8005ab6 <HAL_UART_Transmit>
	{
 8002266:	e0c4      	b.n	80023f2 <printDirection+0x27e>
	}
	else if (D >= 202.5 && D < 247.5)
 8002268:	edd7 7a01 	vldr	s15, [r7, #4]
 800226c:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800241c <printDirection+0x2a8>
 8002270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002278:	db1d      	blt.n	80022b6 <printDirection+0x142>
 800227a:	edd7 7a01 	vldr	s15, [r7, #4]
 800227e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002414 <printDirection+0x2a0>
 8002282:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228a:	d514      	bpl.n	80022b6 <printDirection+0x142>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "South-West \r\n");
 800228c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002290:	4963      	ldr	r1, [pc, #396]	; (8002420 <printDirection+0x2ac>)
 8002292:	4618      	mov	r0, r3
 8002294:	f004 fde6 	bl	8006e64 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8002298:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800229c:	4618      	mov	r0, r3
 800229e:	f7fd ffef 	bl	8000280 <strlen>
 80022a2:	4603      	mov	r3, r0
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
 80022ae:	4856      	ldr	r0, [pc, #344]	; (8002408 <printDirection+0x294>)
 80022b0:	f003 fc01 	bl	8005ab6 <HAL_UART_Transmit>
	{
 80022b4:	e09d      	b.n	80023f2 <printDirection+0x27e>
	}
	else if (D >= 157.5 && D < 202.5)
 80022b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80022ba:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8002424 <printDirection+0x2b0>
 80022be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c6:	db1d      	blt.n	8002304 <printDirection+0x190>
 80022c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80022cc:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800241c <printDirection+0x2a8>
 80022d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d8:	d514      	bpl.n	8002304 <printDirection+0x190>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "South \r\n");
 80022da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022de:	4952      	ldr	r1, [pc, #328]	; (8002428 <printDirection+0x2b4>)
 80022e0:	4618      	mov	r0, r3
 80022e2:	f004 fdbf 	bl	8006e64 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80022e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fd ffc8 	bl	8000280 <strlen>
 80022f0:	4603      	mov	r3, r0
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022f8:	f04f 33ff 	mov.w	r3, #4294967295
 80022fc:	4842      	ldr	r0, [pc, #264]	; (8002408 <printDirection+0x294>)
 80022fe:	f003 fbda 	bl	8005ab6 <HAL_UART_Transmit>
	{
 8002302:	e076      	b.n	80023f2 <printDirection+0x27e>
	}
	else if (D >= 112.5 && D < 157.5)
 8002304:	edd7 7a01 	vldr	s15, [r7, #4]
 8002308:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800242c <printDirection+0x2b8>
 800230c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002314:	db1d      	blt.n	8002352 <printDirection+0x1de>
 8002316:	edd7 7a01 	vldr	s15, [r7, #4]
 800231a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002424 <printDirection+0x2b0>
 800231e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002326:	d514      	bpl.n	8002352 <printDirection+0x1de>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "South-East \r\n");
 8002328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800232c:	4940      	ldr	r1, [pc, #256]	; (8002430 <printDirection+0x2bc>)
 800232e:	4618      	mov	r0, r3
 8002330:	f004 fd98 	bl	8006e64 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8002334:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002338:	4618      	mov	r0, r3
 800233a:	f7fd ffa1 	bl	8000280 <strlen>
 800233e:	4603      	mov	r3, r0
 8002340:	b29a      	uxth	r2, r3
 8002342:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
 800234a:	482f      	ldr	r0, [pc, #188]	; (8002408 <printDirection+0x294>)
 800234c:	f003 fbb3 	bl	8005ab6 <HAL_UART_Transmit>
	{
 8002350:	e04f      	b.n	80023f2 <printDirection+0x27e>
	}
	else if (D >= 67.5 && D < 112.5)
 8002352:	edd7 7a01 	vldr	s15, [r7, #4]
 8002356:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002434 <printDirection+0x2c0>
 800235a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800235e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002362:	db1d      	blt.n	80023a0 <printDirection+0x22c>
 8002364:	edd7 7a01 	vldr	s15, [r7, #4]
 8002368:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800242c <printDirection+0x2b8>
 800236c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002374:	d514      	bpl.n	80023a0 <printDirection+0x22c>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "East \r\n");
 8002376:	f107 0318 	add.w	r3, r7, #24
 800237a:	492f      	ldr	r1, [pc, #188]	; (8002438 <printDirection+0x2c4>)
 800237c:	4618      	mov	r0, r3
 800237e:	f004 fd71 	bl	8006e64 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8002382:	f107 0318 	add.w	r3, r7, #24
 8002386:	4618      	mov	r0, r3
 8002388:	f7fd ff7a 	bl	8000280 <strlen>
 800238c:	4603      	mov	r3, r0
 800238e:	b29a      	uxth	r2, r3
 8002390:	f107 0118 	add.w	r1, r7, #24
 8002394:	f04f 33ff 	mov.w	r3, #4294967295
 8002398:	481b      	ldr	r0, [pc, #108]	; (8002408 <printDirection+0x294>)
 800239a:	f003 fb8c 	bl	8005ab6 <HAL_UART_Transmit>
	{
 800239e:	e028      	b.n	80023f2 <printDirection+0x27e>
	}
	else if (D >= 22.5 && D < 67.5)
 80023a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80023a4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002400 <printDirection+0x28c>
 80023a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b0:	da00      	bge.n	80023b4 <printDirection+0x240>
		uint8_t buf[15];
		sprintf((char*)buf, "North-East \r\n");
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
	}

}
 80023b2:	e01e      	b.n	80023f2 <printDirection+0x27e>
	else if (D >= 22.5 && D < 67.5)
 80023b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80023b8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002434 <printDirection+0x2c0>
 80023bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c4:	d400      	bmi.n	80023c8 <printDirection+0x254>
}
 80023c6:	e014      	b.n	80023f2 <printDirection+0x27e>
		sprintf((char*)buf, "North-East \r\n");
 80023c8:	f107 0308 	add.w	r3, r7, #8
 80023cc:	491b      	ldr	r1, [pc, #108]	; (800243c <printDirection+0x2c8>)
 80023ce:	4618      	mov	r0, r3
 80023d0:	f004 fd48 	bl	8006e64 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80023d4:	f107 0308 	add.w	r3, r7, #8
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fd ff51 	bl	8000280 <strlen>
 80023de:	4603      	mov	r3, r0
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	f107 0108 	add.w	r1, r7, #8
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ea:	4807      	ldr	r0, [pc, #28]	; (8002408 <printDirection+0x294>)
 80023ec:	f003 fb63 	bl	8005ab6 <HAL_UART_Transmit>
}
 80023f0:	e7ff      	b.n	80023f2 <printDirection+0x27e>
 80023f2:	bf00      	nop
 80023f4:	3788      	adds	r7, #136	; 0x88
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	43a8a000 	.word	0x43a8a000
 8002400:	41b40000 	.word	0x41b40000
 8002404:	0800a514 	.word	0x0800a514
 8002408:	2000033c 	.word	0x2000033c
 800240c:	43924000 	.word	0x43924000
 8002410:	0800a520 	.word	0x0800a520
 8002414:	43778000 	.word	0x43778000
 8002418:	0800a530 	.word	0x0800a530
 800241c:	434a8000 	.word	0x434a8000
 8002420:	0800a538 	.word	0x0800a538
 8002424:	431d8000 	.word	0x431d8000
 8002428:	0800a548 	.word	0x0800a548
 800242c:	42e10000 	.word	0x42e10000
 8002430:	0800a554 	.word	0x0800a554
 8002434:	42870000 	.word	0x42870000
 8002438:	0800a564 	.word	0x0800a564
 800243c:	0800a56c 	.word	0x0800a56c

08002440 <SystemClock_Config>:



void SystemClock_Config(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b094      	sub	sp, #80	; 0x50
 8002444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002446:	f107 0320 	add.w	r3, r7, #32
 800244a:	2230      	movs	r2, #48	; 0x30
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f004 fd6b 	bl	8006f2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002454:	f107 030c 	add.w	r3, r7, #12
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002464:	2300      	movs	r3, #0
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	4b28      	ldr	r3, [pc, #160]	; (800250c <SystemClock_Config+0xcc>)
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	4a27      	ldr	r2, [pc, #156]	; (800250c <SystemClock_Config+0xcc>)
 800246e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002472:	6413      	str	r3, [r2, #64]	; 0x40
 8002474:	4b25      	ldr	r3, [pc, #148]	; (800250c <SystemClock_Config+0xcc>)
 8002476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002480:	2300      	movs	r3, #0
 8002482:	607b      	str	r3, [r7, #4]
 8002484:	4b22      	ldr	r3, [pc, #136]	; (8002510 <SystemClock_Config+0xd0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a21      	ldr	r2, [pc, #132]	; (8002510 <SystemClock_Config+0xd0>)
 800248a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <SystemClock_Config+0xd0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002498:	607b      	str	r3, [r7, #4]
 800249a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800249c:	2302      	movs	r3, #2
 800249e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024a0:	2301      	movs	r3, #1
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024a4:	2310      	movs	r3, #16
 80024a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024a8:	2302      	movs	r3, #2
 80024aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024ac:	2300      	movs	r3, #0
 80024ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80024b0:	2310      	movs	r3, #16
 80024b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80024b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80024b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80024ba:	2304      	movs	r3, #4
 80024bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024be:	2304      	movs	r3, #4
 80024c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024c2:	f107 0320 	add.w	r3, r7, #32
 80024c6:	4618      	mov	r0, r3
 80024c8:	f002 fb16 	bl	8004af8 <HAL_RCC_OscConfig>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80024d2:	f000 f9dd 	bl	8002890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024d6:	230f      	movs	r3, #15
 80024d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024da:	2302      	movs	r3, #2
 80024dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024ec:	f107 030c 	add.w	r3, r7, #12
 80024f0:	2102      	movs	r1, #2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f002 fd78 	bl	8004fe8 <HAL_RCC_ClockConfig>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80024fe:	f000 f9c7 	bl	8002890 <Error_Handler>
  }
}
 8002502:	bf00      	nop
 8002504:	3750      	adds	r7, #80	; 0x50
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800
 8002510:	40007000 	.word	0x40007000

08002514 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800251a:	463b      	mov	r3, r7
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002526:	4b21      	ldr	r3, [pc, #132]	; (80025ac <MX_ADC1_Init+0x98>)
 8002528:	4a21      	ldr	r2, [pc, #132]	; (80025b0 <MX_ADC1_Init+0x9c>)
 800252a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800252c:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <MX_ADC1_Init+0x98>)
 800252e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002532:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <MX_ADC1_Init+0x98>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800253a:	4b1c      	ldr	r3, [pc, #112]	; (80025ac <MX_ADC1_Init+0x98>)
 800253c:	2200      	movs	r2, #0
 800253e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <MX_ADC1_Init+0x98>)
 8002542:	2200      	movs	r2, #0
 8002544:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002546:	4b19      	ldr	r3, [pc, #100]	; (80025ac <MX_ADC1_Init+0x98>)
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800254e:	4b17      	ldr	r3, [pc, #92]	; (80025ac <MX_ADC1_Init+0x98>)
 8002550:	2200      	movs	r2, #0
 8002552:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002554:	4b15      	ldr	r3, [pc, #84]	; (80025ac <MX_ADC1_Init+0x98>)
 8002556:	4a17      	ldr	r2, [pc, #92]	; (80025b4 <MX_ADC1_Init+0xa0>)
 8002558:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800255a:	4b14      	ldr	r3, [pc, #80]	; (80025ac <MX_ADC1_Init+0x98>)
 800255c:	2200      	movs	r2, #0
 800255e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002560:	4b12      	ldr	r3, [pc, #72]	; (80025ac <MX_ADC1_Init+0x98>)
 8002562:	2201      	movs	r2, #1
 8002564:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <MX_ADC1_Init+0x98>)
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <MX_ADC1_Init+0x98>)
 8002570:	2201      	movs	r2, #1
 8002572:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002574:	480d      	ldr	r0, [pc, #52]	; (80025ac <MX_ADC1_Init+0x98>)
 8002576:	f000 fca5 	bl	8002ec4 <HAL_ADC_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002580:	f000 f986 	bl	8002890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002584:	2300      	movs	r3, #0
 8002586:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002588:	2301      	movs	r3, #1
 800258a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800258c:	2300      	movs	r3, #0
 800258e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002590:	463b      	mov	r3, r7
 8002592:	4619      	mov	r1, r3
 8002594:	4805      	ldr	r0, [pc, #20]	; (80025ac <MX_ADC1_Init+0x98>)
 8002596:	f000 fe59 	bl	800324c <HAL_ADC_ConfigChannel>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80025a0:	f000 f976 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000214 	.word	0x20000214
 80025b0:	40012000 	.word	0x40012000
 80025b4:	0f000001 	.word	0x0f000001

080025b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <MX_I2C1_Init+0x50>)
 80025be:	4a13      	ldr	r2, [pc, #76]	; (800260c <MX_I2C1_Init+0x54>)
 80025c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <MX_I2C1_Init+0x50>)
 80025c4:	4a12      	ldr	r2, [pc, #72]	; (8002610 <MX_I2C1_Init+0x58>)
 80025c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <MX_I2C1_Init+0x50>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <MX_I2C1_Init+0x50>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <MX_I2C1_Init+0x50>)
 80025d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025dc:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <MX_I2C1_Init+0x50>)
 80025de:	2200      	movs	r2, #0
 80025e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <MX_I2C1_Init+0x50>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025e8:	4b07      	ldr	r3, [pc, #28]	; (8002608 <MX_I2C1_Init+0x50>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <MX_I2C1_Init+0x50>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025f4:	4804      	ldr	r0, [pc, #16]	; (8002608 <MX_I2C1_Init+0x50>)
 80025f6:	f001 fadb 	bl	8003bb0 <HAL_I2C_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002600:	f000 f946 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}
 8002608:	2000025c 	.word	0x2000025c
 800260c:	40005400 	.word	0x40005400
 8002610:	000186a0 	.word	0x000186a0

08002614 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800261a:	f107 0308 	add.w	r3, r7, #8
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]
 8002624:	609a      	str	r2, [r3, #8]
 8002626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002628:	463b      	mov	r3, r7
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002630:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <MX_TIM1_Init+0x98>)
 8002632:	4a1f      	ldr	r2, [pc, #124]	; (80026b0 <MX_TIM1_Init+0x9c>)
 8002634:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002636:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <MX_TIM1_Init+0x98>)
 8002638:	2247      	movs	r2, #71	; 0x47
 800263a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800263c:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <MX_TIM1_Init+0x98>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002642:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <MX_TIM1_Init+0x98>)
 8002644:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002648:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800264a:	4b18      	ldr	r3, [pc, #96]	; (80026ac <MX_TIM1_Init+0x98>)
 800264c:	2200      	movs	r2, #0
 800264e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002650:	4b16      	ldr	r3, [pc, #88]	; (80026ac <MX_TIM1_Init+0x98>)
 8002652:	2200      	movs	r2, #0
 8002654:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <MX_TIM1_Init+0x98>)
 8002658:	2200      	movs	r2, #0
 800265a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800265c:	4813      	ldr	r0, [pc, #76]	; (80026ac <MX_TIM1_Init+0x98>)
 800265e:	f002 fee3 	bl	8005428 <HAL_TIM_Base_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002668:	f000 f912 	bl	8002890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800266c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002670:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002672:	f107 0308 	add.w	r3, r7, #8
 8002676:	4619      	mov	r1, r3
 8002678:	480c      	ldr	r0, [pc, #48]	; (80026ac <MX_TIM1_Init+0x98>)
 800267a:	f002 ff7f 	bl	800557c <HAL_TIM_ConfigClockSource>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002684:	f000 f904 	bl	8002890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002688:	2300      	movs	r3, #0
 800268a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002690:	463b      	mov	r3, r7
 8002692:	4619      	mov	r1, r3
 8002694:	4805      	ldr	r0, [pc, #20]	; (80026ac <MX_TIM1_Init+0x98>)
 8002696:	f003 f953 	bl	8005940 <HAL_TIMEx_MasterConfigSynchronization>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80026a0:	f000 f8f6 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80026a4:	bf00      	nop
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	200002b0 	.word	0x200002b0
 80026b0:	40010000 	.word	0x40010000

080026b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026ba:	4a12      	ldr	r2, [pc, #72]	; (8002704 <MX_USART1_UART_Init+0x50>)
 80026bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026c6:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026d2:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026da:	220c      	movs	r2, #12
 80026dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026ea:	4805      	ldr	r0, [pc, #20]	; (8002700 <MX_USART1_UART_Init+0x4c>)
 80026ec:	f003 f996 	bl	8005a1c <HAL_UART_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026f6:	f000 f8cb 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	200002f8 	.word	0x200002f8
 8002704:	40011000 	.word	0x40011000

08002708 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <MX_USART2_UART_Init+0x4c>)
 800270e:	4a12      	ldr	r2, [pc, #72]	; (8002758 <MX_USART2_UART_Init+0x50>)
 8002710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <MX_USART2_UART_Init+0x4c>)
 8002714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <MX_USART2_UART_Init+0x4c>)
 800271c:	2200      	movs	r2, #0
 800271e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <MX_USART2_UART_Init+0x4c>)
 8002722:	2200      	movs	r2, #0
 8002724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002726:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <MX_USART2_UART_Init+0x4c>)
 8002728:	2200      	movs	r2, #0
 800272a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <MX_USART2_UART_Init+0x4c>)
 800272e:	220c      	movs	r2, #12
 8002730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <MX_USART2_UART_Init+0x4c>)
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <MX_USART2_UART_Init+0x4c>)
 800273a:	2200      	movs	r2, #0
 800273c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800273e:	4805      	ldr	r0, [pc, #20]	; (8002754 <MX_USART2_UART_Init+0x4c>)
 8002740:	f003 f96c 	bl	8005a1c <HAL_UART_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800274a:	f000 f8a1 	bl	8002890 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	2000033c 	.word	0x2000033c
 8002758:	40004400 	.word	0x40004400

0800275c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	; 0x28
 8002760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002762:	f107 0314 	add.w	r3, r7, #20
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
 800276c:	609a      	str	r2, [r3, #8]
 800276e:	60da      	str	r2, [r3, #12]
 8002770:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	4b42      	ldr	r3, [pc, #264]	; (8002880 <MX_GPIO_Init+0x124>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	4a41      	ldr	r2, [pc, #260]	; (8002880 <MX_GPIO_Init+0x124>)
 800277c:	f043 0304 	orr.w	r3, r3, #4
 8002780:	6313      	str	r3, [r2, #48]	; 0x30
 8002782:	4b3f      	ldr	r3, [pc, #252]	; (8002880 <MX_GPIO_Init+0x124>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	4b3b      	ldr	r3, [pc, #236]	; (8002880 <MX_GPIO_Init+0x124>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4a3a      	ldr	r2, [pc, #232]	; (8002880 <MX_GPIO_Init+0x124>)
 8002798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800279c:	6313      	str	r3, [r2, #48]	; 0x30
 800279e:	4b38      	ldr	r3, [pc, #224]	; (8002880 <MX_GPIO_Init+0x124>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	4b34      	ldr	r3, [pc, #208]	; (8002880 <MX_GPIO_Init+0x124>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4a33      	ldr	r2, [pc, #204]	; (8002880 <MX_GPIO_Init+0x124>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ba:	4b31      	ldr	r3, [pc, #196]	; (8002880 <MX_GPIO_Init+0x124>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <MX_GPIO_Init+0x124>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	4a2c      	ldr	r2, [pc, #176]	; (8002880 <MX_GPIO_Init+0x124>)
 80027d0:	f043 0302 	orr.w	r3, r3, #2
 80027d4:	6313      	str	r3, [r2, #48]	; 0x30
 80027d6:	4b2a      	ldr	r3, [pc, #168]	; (8002880 <MX_GPIO_Init+0x124>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80027e2:	2200      	movs	r2, #0
 80027e4:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80027e8:	4826      	ldr	r0, [pc, #152]	; (8002884 <MX_GPIO_Init+0x128>)
 80027ea:	f001 f9c7 	bl	8003b7c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80027ee:	2200      	movs	r2, #0
 80027f0:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80027f4:	4824      	ldr	r0, [pc, #144]	; (8002888 <MX_GPIO_Init+0x12c>)
 80027f6:	f001 f9c1 	bl	8003b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2180      	movs	r1, #128	; 0x80
 80027fe:	4823      	ldr	r0, [pc, #140]	; (800288c <MX_GPIO_Init+0x130>)
 8002800:	f001 f9bc 	bl	8003b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800280a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800280e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	4619      	mov	r1, r3
 800281a:	481c      	ldr	r0, [pc, #112]	; (800288c <MX_GPIO_Init+0x130>)
 800281c:	f001 f82a 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8
                           PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002820:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002824:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002826:	2301      	movs	r3, #1
 8002828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	2300      	movs	r3, #0
 8002830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002832:	f107 0314 	add.w	r3, r7, #20
 8002836:	4619      	mov	r1, r3
 8002838:	4812      	ldr	r0, [pc, #72]	; (8002884 <MX_GPIO_Init+0x128>)
 800283a:	f001 f81b 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800283e:	f44f 638e 	mov.w	r3, #1136	; 0x470
 8002842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002844:	2301      	movs	r3, #1
 8002846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284c:	2300      	movs	r3, #0
 800284e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	4619      	mov	r1, r3
 8002856:	480c      	ldr	r0, [pc, #48]	; (8002888 <MX_GPIO_Init+0x12c>)
 8002858:	f001 f80c 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002860:	2301      	movs	r3, #1
 8002862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002868:	2300      	movs	r3, #0
 800286a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800286c:	f107 0314 	add.w	r3, r7, #20
 8002870:	4619      	mov	r1, r3
 8002872:	4806      	ldr	r0, [pc, #24]	; (800288c <MX_GPIO_Init+0x130>)
 8002874:	f000 fffe 	bl	8003874 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002878:	bf00      	nop
 800287a:	3728      	adds	r7, #40	; 0x28
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40023800 	.word	0x40023800
 8002884:	40020000 	.word	0x40020000
 8002888:	40020400 	.word	0x40020400
 800288c:	40020800 	.word	0x40020800

08002890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002894:	b672      	cpsid	i
}
 8002896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002898:	e7fe      	b.n	8002898 <Error_Handler+0x8>
	...

0800289c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <HAL_MspInit+0x4c>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	4a0f      	ldr	r2, [pc, #60]	; (80028e8 <HAL_MspInit+0x4c>)
 80028ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b0:	6453      	str	r3, [r2, #68]	; 0x44
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <HAL_MspInit+0x4c>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ba:	607b      	str	r3, [r7, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	603b      	str	r3, [r7, #0]
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <HAL_MspInit+0x4c>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4a08      	ldr	r2, [pc, #32]	; (80028e8 <HAL_MspInit+0x4c>)
 80028c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028cc:	6413      	str	r3, [r2, #64]	; 0x40
 80028ce:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_MspInit+0x4c>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80028da:	2007      	movs	r0, #7
 80028dc:	f000 ff96 	bl	800380c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028e0:	bf00      	nop
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40023800 	.word	0x40023800

080028ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08a      	sub	sp, #40	; 0x28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a17      	ldr	r2, [pc, #92]	; (8002968 <HAL_ADC_MspInit+0x7c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d127      	bne.n	800295e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	4b16      	ldr	r3, [pc, #88]	; (800296c <HAL_ADC_MspInit+0x80>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	4a15      	ldr	r2, [pc, #84]	; (800296c <HAL_ADC_MspInit+0x80>)
 8002918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291c:	6453      	str	r3, [r2, #68]	; 0x44
 800291e:	4b13      	ldr	r3, [pc, #76]	; (800296c <HAL_ADC_MspInit+0x80>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	4b0f      	ldr	r3, [pc, #60]	; (800296c <HAL_ADC_MspInit+0x80>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a0e      	ldr	r2, [pc, #56]	; (800296c <HAL_ADC_MspInit+0x80>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <HAL_ADC_MspInit+0x80>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002946:	2301      	movs	r3, #1
 8002948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800294a:	2303      	movs	r3, #3
 800294c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002952:	f107 0314 	add.w	r3, r7, #20
 8002956:	4619      	mov	r1, r3
 8002958:	4805      	ldr	r0, [pc, #20]	; (8002970 <HAL_ADC_MspInit+0x84>)
 800295a:	f000 ff8b 	bl	8003874 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800295e:	bf00      	nop
 8002960:	3728      	adds	r7, #40	; 0x28
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40012000 	.word	0x40012000
 800296c:	40023800 	.word	0x40023800
 8002970:	40020000 	.word	0x40020000

08002974 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	; 0x28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a19      	ldr	r2, [pc, #100]	; (80029f8 <HAL_I2C_MspInit+0x84>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d12c      	bne.n	80029f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	4b18      	ldr	r3, [pc, #96]	; (80029fc <HAL_I2C_MspInit+0x88>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	4a17      	ldr	r2, [pc, #92]	; (80029fc <HAL_I2C_MspInit+0x88>)
 80029a0:	f043 0302 	orr.w	r3, r3, #2
 80029a4:	6313      	str	r3, [r2, #48]	; 0x30
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_I2C_MspInit+0x88>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029b8:	2312      	movs	r3, #18
 80029ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c0:	2303      	movs	r3, #3
 80029c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029c4:	2304      	movs	r3, #4
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	4619      	mov	r1, r3
 80029ce:	480c      	ldr	r0, [pc, #48]	; (8002a00 <HAL_I2C_MspInit+0x8c>)
 80029d0:	f000 ff50 	bl	8003874 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <HAL_I2C_MspInit+0x88>)
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	4a07      	ldr	r2, [pc, #28]	; (80029fc <HAL_I2C_MspInit+0x88>)
 80029de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029e2:	6413      	str	r3, [r2, #64]	; 0x40
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_I2C_MspInit+0x88>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029f0:	bf00      	nop
 80029f2:	3728      	adds	r7, #40	; 0x28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40005400 	.word	0x40005400
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40020400 	.word	0x40020400

08002a04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a0b      	ldr	r2, [pc, #44]	; (8002a40 <HAL_TIM_Base_MspInit+0x3c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d10d      	bne.n	8002a32 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <HAL_TIM_Base_MspInit+0x40>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <HAL_TIM_Base_MspInit+0x40>)
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	6453      	str	r3, [r2, #68]	; 0x44
 8002a26:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <HAL_TIM_Base_MspInit+0x40>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002a32:	bf00      	nop
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40010000 	.word	0x40010000
 8002a44:	40023800 	.word	0x40023800

08002a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08c      	sub	sp, #48	; 0x30
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a50:	f107 031c 	add.w	r3, r7, #28
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a32      	ldr	r2, [pc, #200]	; (8002b30 <HAL_UART_MspInit+0xe8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d12d      	bne.n	8002ac6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	4b31      	ldr	r3, [pc, #196]	; (8002b34 <HAL_UART_MspInit+0xec>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	4a30      	ldr	r2, [pc, #192]	; (8002b34 <HAL_UART_MspInit+0xec>)
 8002a74:	f043 0310 	orr.w	r3, r3, #16
 8002a78:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7a:	4b2e      	ldr	r3, [pc, #184]	; (8002b34 <HAL_UART_MspInit+0xec>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	61bb      	str	r3, [r7, #24]
 8002a84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	4b2a      	ldr	r3, [pc, #168]	; (8002b34 <HAL_UART_MspInit+0xec>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a29      	ldr	r2, [pc, #164]	; (8002b34 <HAL_UART_MspInit+0xec>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6313      	str	r3, [r2, #48]	; 0x30
 8002a96:	4b27      	ldr	r3, [pc, #156]	; (8002b34 <HAL_UART_MspInit+0xec>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8002aa2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8002aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ab4:	2307      	movs	r3, #7
 8002ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab8:	f107 031c 	add.w	r3, r7, #28
 8002abc:	4619      	mov	r1, r3
 8002abe:	481e      	ldr	r0, [pc, #120]	; (8002b38 <HAL_UART_MspInit+0xf0>)
 8002ac0:	f000 fed8 	bl	8003874 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ac4:	e030      	b.n	8002b28 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1c      	ldr	r2, [pc, #112]	; (8002b3c <HAL_UART_MspInit+0xf4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d12b      	bne.n	8002b28 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	4b17      	ldr	r3, [pc, #92]	; (8002b34 <HAL_UART_MspInit+0xec>)
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	4a16      	ldr	r2, [pc, #88]	; (8002b34 <HAL_UART_MspInit+0xec>)
 8002ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ade:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae0:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <HAL_UART_MspInit+0xec>)
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <HAL_UART_MspInit+0xec>)
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	4a0f      	ldr	r2, [pc, #60]	; (8002b34 <HAL_UART_MspInit+0xec>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	6313      	str	r3, [r2, #48]	; 0x30
 8002afc:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <HAL_UART_MspInit+0xec>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b08:	230c      	movs	r3, #12
 8002b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b14:	2303      	movs	r3, #3
 8002b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b18:	2307      	movs	r3, #7
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1c:	f107 031c 	add.w	r3, r7, #28
 8002b20:	4619      	mov	r1, r3
 8002b22:	4805      	ldr	r0, [pc, #20]	; (8002b38 <HAL_UART_MspInit+0xf0>)
 8002b24:	f000 fea6 	bl	8003874 <HAL_GPIO_Init>
}
 8002b28:	bf00      	nop
 8002b2a:	3730      	adds	r7, #48	; 0x30
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40011000 	.word	0x40011000
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40020000 	.word	0x40020000
 8002b3c:	40004400 	.word	0x40004400

08002b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b44:	e7fe      	b.n	8002b44 <NMI_Handler+0x4>

08002b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b4a:	e7fe      	b.n	8002b4a <HardFault_Handler+0x4>

08002b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b50:	e7fe      	b.n	8002b50 <MemManage_Handler+0x4>

08002b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b56:	e7fe      	b.n	8002b56 <BusFault_Handler+0x4>

08002b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b5c:	e7fe      	b.n	8002b5c <UsageFault_Handler+0x4>

08002b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b8c:	f000 f956 	bl	8002e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b90:	bf00      	nop
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return 1;
 8002b98:	2301      	movs	r3, #1
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <_kill>:

int _kill(int pid, int sig)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bae:	f004 fa8d 	bl	80070cc <__errno>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2216      	movs	r2, #22
 8002bb6:	601a      	str	r2, [r3, #0]
  return -1;
 8002bb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <_exit>:

void _exit (int status)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff ffe7 	bl	8002ba4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bd6:	e7fe      	b.n	8002bd6 <_exit+0x12>

08002bd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	e00a      	b.n	8002c00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bea:	f3af 8000 	nop.w
 8002bee:	4601      	mov	r1, r0
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	60ba      	str	r2, [r7, #8]
 8002bf6:	b2ca      	uxtb	r2, r1
 8002bf8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	dbf0      	blt.n	8002bea <_read+0x12>
  }

  return len;
 8002c08:	687b      	ldr	r3, [r7, #4]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	e009      	b.n	8002c38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	60ba      	str	r2, [r7, #8]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	3301      	adds	r3, #1
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	dbf1      	blt.n	8002c24 <_write+0x12>
  }
  return len;
 8002c40:	687b      	ldr	r3, [r7, #4]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <_close>:

int _close(int file)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c72:	605a      	str	r2, [r3, #4]
  return 0;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <_isatty>:

int _isatty(int file)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c8a:	2301      	movs	r3, #1
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cbc:	4a14      	ldr	r2, [pc, #80]	; (8002d10 <_sbrk+0x5c>)
 8002cbe:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <_sbrk+0x60>)
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc8:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <_sbrk+0x64>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d102      	bne.n	8002cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cd0:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <_sbrk+0x64>)
 8002cd2:	4a12      	ldr	r2, [pc, #72]	; (8002d1c <_sbrk+0x68>)
 8002cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <_sbrk+0x64>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d207      	bcs.n	8002cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ce4:	f004 f9f2 	bl	80070cc <__errno>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	220c      	movs	r2, #12
 8002cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cee:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf2:	e009      	b.n	8002d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <_sbrk+0x64>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cfa:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <_sbrk+0x64>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	4a05      	ldr	r2, [pc, #20]	; (8002d18 <_sbrk+0x64>)
 8002d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d06:	68fb      	ldr	r3, [r7, #12]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20020000 	.word	0x20020000
 8002d14:	00000400 	.word	0x00000400
 8002d18:	20000380 	.word	0x20000380
 8002d1c:	200004d8 	.word	0x200004d8

08002d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <SystemInit+0x20>)
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2a:	4a05      	ldr	r2, [pc, #20]	; (8002d40 <SystemInit+0x20>)
 8002d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d48:	480d      	ldr	r0, [pc, #52]	; (8002d80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d4a:	490e      	ldr	r1, [pc, #56]	; (8002d84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d4c:	4a0e      	ldr	r2, [pc, #56]	; (8002d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d50:	e002      	b.n	8002d58 <LoopCopyDataInit>

08002d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d56:	3304      	adds	r3, #4

08002d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d5c:	d3f9      	bcc.n	8002d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d5e:	4a0b      	ldr	r2, [pc, #44]	; (8002d8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d60:	4c0b      	ldr	r4, [pc, #44]	; (8002d90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d64:	e001      	b.n	8002d6a <LoopFillZerobss>

08002d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d68:	3204      	adds	r2, #4

08002d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d6c:	d3fb      	bcc.n	8002d66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d6e:	f7ff ffd7 	bl	8002d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d72:	f004 f9b1 	bl	80070d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d76:	f7fe f8ed 	bl	8000f54 <main>
  bx  lr    
 8002d7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d84:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002d88:	0800aa10 	.word	0x0800aa10
  ldr r2, =_sbss
 8002d8c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002d90:	200004d4 	.word	0x200004d4

08002d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d94:	e7fe      	b.n	8002d94 <ADC_IRQHandler>
	...

08002d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <HAL_Init+0x40>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a0d      	ldr	r2, [pc, #52]	; (8002dd8 <HAL_Init+0x40>)
 8002da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_Init+0x40>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <HAL_Init+0x40>)
 8002dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002db4:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <HAL_Init+0x40>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a07      	ldr	r2, [pc, #28]	; (8002dd8 <HAL_Init+0x40>)
 8002dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc0:	2003      	movs	r0, #3
 8002dc2:	f000 fd23 	bl	800380c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f000 f808 	bl	8002ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dcc:	f7ff fd66 	bl	800289c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023c00 	.word	0x40023c00

08002ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002de4:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <HAL_InitTick+0x54>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <HAL_InitTick+0x58>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	4619      	mov	r1, r3
 8002dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fd2d 	bl	800385a <HAL_SYSTICK_Config>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e00e      	b.n	8002e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b0f      	cmp	r3, #15
 8002e0e:	d80a      	bhi.n	8002e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e10:	2200      	movs	r2, #0
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	f04f 30ff 	mov.w	r0, #4294967295
 8002e18:	f000 fd03 	bl	8003822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e1c:	4a06      	ldr	r2, [pc, #24]	; (8002e38 <HAL_InitTick+0x5c>)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e000      	b.n	8002e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	20000014 	.word	0x20000014
 8002e34:	2000001c 	.word	0x2000001c
 8002e38:	20000018 	.word	0x20000018

08002e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <HAL_IncTick+0x20>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_IncTick+0x24>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	4a04      	ldr	r2, [pc, #16]	; (8002e60 <HAL_IncTick+0x24>)
 8002e4e:	6013      	str	r3, [r2, #0]
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	2000001c 	.word	0x2000001c
 8002e60:	20000384 	.word	0x20000384

08002e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return uwTick;
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <HAL_GetTick+0x14>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000384 	.word	0x20000384

08002e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e84:	f7ff ffee 	bl	8002e64 <HAL_GetTick>
 8002e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d005      	beq.n	8002ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <HAL_Delay+0x44>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ea2:	bf00      	nop
 8002ea4:	f7ff ffde 	bl	8002e64 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d8f7      	bhi.n	8002ea4 <HAL_Delay+0x28>
  {
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	2000001c 	.word	0x2000001c

08002ec4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e033      	b.n	8002f42 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff fd02 	bl	80028ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d118      	bne.n	8002f34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f0a:	f023 0302 	bic.w	r3, r3, #2
 8002f0e:	f043 0202 	orr.w	r2, r3, #2
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 faca 	bl	80034b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f023 0303 	bic.w	r3, r3, #3
 8002f2a:	f043 0201 	orr.w	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
 8002f32:	e001      	b.n	8002f38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_ADC_Start+0x1a>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e097      	b.n	8003096 <HAL_ADC_Start+0x14a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d018      	beq.n	8002fae <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f8c:	4b45      	ldr	r3, [pc, #276]	; (80030a4 <HAL_ADC_Start+0x158>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a45      	ldr	r2, [pc, #276]	; (80030a8 <HAL_ADC_Start+0x15c>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	0c9a      	lsrs	r2, r3, #18
 8002f98:	4613      	mov	r3, r2
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4413      	add	r3, r2
 8002f9e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002fa0:	e002      	b.n	8002fa8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f9      	bne.n	8002fa2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d15f      	bne.n	800307c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002fc4:	f023 0301 	bic.w	r3, r3, #1
 8002fc8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d007      	beq.n	8002fee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fe6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffa:	d106      	bne.n	800300a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003000:	f023 0206 	bic.w	r2, r3, #6
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	645a      	str	r2, [r3, #68]	; 0x44
 8003008:	e002      	b.n	8003010 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003018:	4b24      	ldr	r3, [pc, #144]	; (80030ac <HAL_ADC_Start+0x160>)
 800301a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003024:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10f      	bne.n	8003052 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d129      	bne.n	8003094 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	e020      	b.n	8003094 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a16      	ldr	r2, [pc, #88]	; (80030b0 <HAL_ADC_Start+0x164>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d11b      	bne.n	8003094 <HAL_ADC_Start+0x148>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d114      	bne.n	8003094 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003078:	609a      	str	r2, [r3, #8]
 800307a:	e00b      	b.n	8003094 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	f043 0210 	orr.w	r2, r3, #16
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308c:	f043 0201 	orr.w	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	20000014 	.word	0x20000014
 80030a8:	431bde83 	.word	0x431bde83
 80030ac:	40012300 	.word	0x40012300
 80030b0:	40012000 	.word	0x40012000

080030b4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_ADC_Stop+0x16>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e021      	b.n	800310e <HAL_ADC_Stop+0x5a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0201 	bic.w	r2, r2, #1
 80030e0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d109      	bne.n	8003104 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030f8:	f023 0301 	bic.w	r3, r3, #1
 80030fc:	f043 0201 	orr.w	r2, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003136:	d113      	bne.n	8003160 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003146:	d10b      	bne.n	8003160 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f043 0220 	orr.w	r2, r3, #32
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e063      	b.n	8003228 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003160:	f7ff fe80 	bl	8002e64 <HAL_GetTick>
 8003164:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003166:	e021      	b.n	80031ac <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316e:	d01d      	beq.n	80031ac <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d007      	beq.n	8003186 <HAL_ADC_PollForConversion+0x6c>
 8003176:	f7ff fe75 	bl	8002e64 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d212      	bcs.n	80031ac <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b02      	cmp	r3, #2
 8003192:	d00b      	beq.n	80031ac <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	f043 0204 	orr.w	r2, r3, #4
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e03d      	b.n	8003228 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d1d6      	bne.n	8003168 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f06f 0212 	mvn.w	r2, #18
 80031c2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d123      	bne.n	8003226 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d11f      	bne.n	8003226 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d006      	beq.n	8003202 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d111      	bne.n	8003226 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d105      	bne.n	8003226 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f043 0201 	orr.w	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800323e:	4618      	mov	r0, r3
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x1c>
 8003264:	2302      	movs	r3, #2
 8003266:	e113      	b.n	8003490 <HAL_ADC_ConfigChannel+0x244>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b09      	cmp	r3, #9
 8003276:	d925      	bls.n	80032c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68d9      	ldr	r1, [r3, #12]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	b29b      	uxth	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	4613      	mov	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	4413      	add	r3, r2
 800328c:	3b1e      	subs	r3, #30
 800328e:	2207      	movs	r2, #7
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43da      	mvns	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	400a      	ands	r2, r1
 800329c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68d9      	ldr	r1, [r3, #12]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	4618      	mov	r0, r3
 80032b0:	4603      	mov	r3, r0
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4403      	add	r3, r0
 80032b6:	3b1e      	subs	r3, #30
 80032b8:	409a      	lsls	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	60da      	str	r2, [r3, #12]
 80032c2:	e022      	b.n	800330a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6919      	ldr	r1, [r3, #16]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	4613      	mov	r3, r2
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4413      	add	r3, r2
 80032d8:	2207      	movs	r2, #7
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43da      	mvns	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	400a      	ands	r2, r1
 80032e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6919      	ldr	r1, [r3, #16]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	4618      	mov	r0, r3
 80032fa:	4603      	mov	r3, r0
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	4403      	add	r3, r0
 8003300:	409a      	lsls	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b06      	cmp	r3, #6
 8003310:	d824      	bhi.n	800335c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	3b05      	subs	r3, #5
 8003324:	221f      	movs	r2, #31
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43da      	mvns	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	400a      	ands	r2, r1
 8003332:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	b29b      	uxth	r3, r3
 8003340:	4618      	mov	r0, r3
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	3b05      	subs	r3, #5
 800334e:	fa00 f203 	lsl.w	r2, r0, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	635a      	str	r2, [r3, #52]	; 0x34
 800335a:	e04c      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b0c      	cmp	r3, #12
 8003362:	d824      	bhi.n	80033ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	3b23      	subs	r3, #35	; 0x23
 8003376:	221f      	movs	r2, #31
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43da      	mvns	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	400a      	ands	r2, r1
 8003384:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	b29b      	uxth	r3, r3
 8003392:	4618      	mov	r0, r3
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	3b23      	subs	r3, #35	; 0x23
 80033a0:	fa00 f203 	lsl.w	r2, r0, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	631a      	str	r2, [r3, #48]	; 0x30
 80033ac:	e023      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	3b41      	subs	r3, #65	; 0x41
 80033c0:	221f      	movs	r2, #31
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43da      	mvns	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	400a      	ands	r2, r1
 80033ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	4618      	mov	r0, r3
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	3b41      	subs	r3, #65	; 0x41
 80033ea:	fa00 f203 	lsl.w	r2, r0, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033f6:	4b29      	ldr	r3, [pc, #164]	; (800349c <HAL_ADC_ConfigChannel+0x250>)
 80033f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a28      	ldr	r2, [pc, #160]	; (80034a0 <HAL_ADC_ConfigChannel+0x254>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d10f      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x1d8>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b12      	cmp	r3, #18
 800340a:	d10b      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1d      	ldr	r2, [pc, #116]	; (80034a0 <HAL_ADC_ConfigChannel+0x254>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d12b      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x23a>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1c      	ldr	r2, [pc, #112]	; (80034a4 <HAL_ADC_ConfigChannel+0x258>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d003      	beq.n	8003440 <HAL_ADC_ConfigChannel+0x1f4>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b11      	cmp	r3, #17
 800343e:	d122      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a11      	ldr	r2, [pc, #68]	; (80034a4 <HAL_ADC_ConfigChannel+0x258>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d111      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003462:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <HAL_ADC_ConfigChannel+0x25c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a11      	ldr	r2, [pc, #68]	; (80034ac <HAL_ADC_ConfigChannel+0x260>)
 8003468:	fba2 2303 	umull	r2, r3, r2, r3
 800346c:	0c9a      	lsrs	r2, r3, #18
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003478:	e002      	b.n	8003480 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	3b01      	subs	r3, #1
 800347e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f9      	bne.n	800347a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	40012300 	.word	0x40012300
 80034a0:	40012000 	.word	0x40012000
 80034a4:	10000012 	.word	0x10000012
 80034a8:	20000014 	.word	0x20000014
 80034ac:	431bde83 	.word	0x431bde83

080034b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034b8:	4b79      	ldr	r3, [pc, #484]	; (80036a0 <ADC_Init+0x1f0>)
 80034ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	431a      	orrs	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	021a      	lsls	r2, r3, #8
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003508:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6859      	ldr	r1, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800352a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6899      	ldr	r1, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	4a58      	ldr	r2, [pc, #352]	; (80036a4 <ADC_Init+0x1f4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d022      	beq.n	800358e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003556:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6899      	ldr	r1, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003578:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6899      	ldr	r1, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	e00f      	b.n	80035ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800359c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0202 	bic.w	r2, r2, #2
 80035bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6899      	ldr	r1, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	7e1b      	ldrb	r3, [r3, #24]
 80035c8:	005a      	lsls	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01b      	beq.n	8003614 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6859      	ldr	r1, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	3b01      	subs	r3, #1
 8003608:	035a      	lsls	r2, r3, #13
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	e007      	b.n	8003624 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003622:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003632:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	3b01      	subs	r3, #1
 8003640:	051a      	lsls	r2, r3, #20
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003658:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6899      	ldr	r1, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003666:	025a      	lsls	r2, r3, #9
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800367e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6899      	ldr	r1, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	029a      	lsls	r2, r3, #10
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	609a      	str	r2, [r3, #8]
}
 8003694:	bf00      	nop
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	40012300 	.word	0x40012300
 80036a4:	0f000001 	.word	0x0f000001

080036a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <__NVIC_SetPriorityGrouping+0x44>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036c4:	4013      	ands	r3, r2
 80036c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036da:	4a04      	ldr	r2, [pc, #16]	; (80036ec <__NVIC_SetPriorityGrouping+0x44>)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	60d3      	str	r3, [r2, #12]
}
 80036e0:	bf00      	nop
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036f4:	4b04      	ldr	r3, [pc, #16]	; (8003708 <__NVIC_GetPriorityGrouping+0x18>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	0a1b      	lsrs	r3, r3, #8
 80036fa:	f003 0307 	and.w	r3, r3, #7
}
 80036fe:	4618      	mov	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	e000ed00 	.word	0xe000ed00

0800370c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	6039      	str	r1, [r7, #0]
 8003716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371c:	2b00      	cmp	r3, #0
 800371e:	db0a      	blt.n	8003736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	b2da      	uxtb	r2, r3
 8003724:	490c      	ldr	r1, [pc, #48]	; (8003758 <__NVIC_SetPriority+0x4c>)
 8003726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372a:	0112      	lsls	r2, r2, #4
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	440b      	add	r3, r1
 8003730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003734:	e00a      	b.n	800374c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	b2da      	uxtb	r2, r3
 800373a:	4908      	ldr	r1, [pc, #32]	; (800375c <__NVIC_SetPriority+0x50>)
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	3b04      	subs	r3, #4
 8003744:	0112      	lsls	r2, r2, #4
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	440b      	add	r3, r1
 800374a:	761a      	strb	r2, [r3, #24]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	e000e100 	.word	0xe000e100
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003760:	b480      	push	{r7}
 8003762:	b089      	sub	sp, #36	; 0x24
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f1c3 0307 	rsb	r3, r3, #7
 800377a:	2b04      	cmp	r3, #4
 800377c:	bf28      	it	cs
 800377e:	2304      	movcs	r3, #4
 8003780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	3304      	adds	r3, #4
 8003786:	2b06      	cmp	r3, #6
 8003788:	d902      	bls.n	8003790 <NVIC_EncodePriority+0x30>
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3b03      	subs	r3, #3
 800378e:	e000      	b.n	8003792 <NVIC_EncodePriority+0x32>
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003794:	f04f 32ff 	mov.w	r2, #4294967295
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43da      	mvns	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	401a      	ands	r2, r3
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037a8:	f04f 31ff 	mov.w	r1, #4294967295
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	fa01 f303 	lsl.w	r3, r1, r3
 80037b2:	43d9      	mvns	r1, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b8:	4313      	orrs	r3, r2
         );
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3724      	adds	r7, #36	; 0x24
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037d8:	d301      	bcc.n	80037de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037da:	2301      	movs	r3, #1
 80037dc:	e00f      	b.n	80037fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037de:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <SysTick_Config+0x40>)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037e6:	210f      	movs	r1, #15
 80037e8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ec:	f7ff ff8e 	bl	800370c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <SysTick_Config+0x40>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037f6:	4b04      	ldr	r3, [pc, #16]	; (8003808 <SysTick_Config+0x40>)
 80037f8:	2207      	movs	r2, #7
 80037fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	e000e010 	.word	0xe000e010

0800380c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff ff47 	bl	80036a8 <__NVIC_SetPriorityGrouping>
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003822:	b580      	push	{r7, lr}
 8003824:	b086      	sub	sp, #24
 8003826:	af00      	add	r7, sp, #0
 8003828:	4603      	mov	r3, r0
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003834:	f7ff ff5c 	bl	80036f0 <__NVIC_GetPriorityGrouping>
 8003838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	6978      	ldr	r0, [r7, #20]
 8003840:	f7ff ff8e 	bl	8003760 <NVIC_EncodePriority>
 8003844:	4602      	mov	r2, r0
 8003846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800384a:	4611      	mov	r1, r2
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff ff5d 	bl	800370c <__NVIC_SetPriority>
}
 8003852:	bf00      	nop
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff ffb0 	bl	80037c8 <SysTick_Config>
 8003868:	4603      	mov	r3, r0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003874:	b480      	push	{r7}
 8003876:	b089      	sub	sp, #36	; 0x24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003882:	2300      	movs	r3, #0
 8003884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003886:	2300      	movs	r3, #0
 8003888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	e159      	b.n	8003b44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003890:	2201      	movs	r2, #1
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4013      	ands	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	f040 8148 	bne.w	8003b3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d005      	beq.n	80038c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d130      	bne.n	8003928 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	2203      	movs	r2, #3
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43db      	mvns	r3, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4013      	ands	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038fc:	2201      	movs	r2, #1
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	f003 0201 	and.w	r2, r3, #1
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	2b03      	cmp	r3, #3
 8003932:	d017      	beq.n	8003964 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	2203      	movs	r2, #3
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d123      	bne.n	80039b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	08da      	lsrs	r2, r3, #3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3208      	adds	r2, #8
 8003978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800397c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	220f      	movs	r2, #15
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	08da      	lsrs	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3208      	adds	r2, #8
 80039b2:	69b9      	ldr	r1, [r7, #24]
 80039b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	2203      	movs	r2, #3
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4013      	ands	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 0203 	and.w	r2, r3, #3
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80a2 	beq.w	8003b3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	4b57      	ldr	r3, [pc, #348]	; (8003b5c <HAL_GPIO_Init+0x2e8>)
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	4a56      	ldr	r2, [pc, #344]	; (8003b5c <HAL_GPIO_Init+0x2e8>)
 8003a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a08:	6453      	str	r3, [r2, #68]	; 0x44
 8003a0a:	4b54      	ldr	r3, [pc, #336]	; (8003b5c <HAL_GPIO_Init+0x2e8>)
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a16:	4a52      	ldr	r2, [pc, #328]	; (8003b60 <HAL_GPIO_Init+0x2ec>)
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	089b      	lsrs	r3, r3, #2
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	220f      	movs	r2, #15
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a49      	ldr	r2, [pc, #292]	; (8003b64 <HAL_GPIO_Init+0x2f0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d019      	beq.n	8003a76 <HAL_GPIO_Init+0x202>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a48      	ldr	r2, [pc, #288]	; (8003b68 <HAL_GPIO_Init+0x2f4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d013      	beq.n	8003a72 <HAL_GPIO_Init+0x1fe>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a47      	ldr	r2, [pc, #284]	; (8003b6c <HAL_GPIO_Init+0x2f8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00d      	beq.n	8003a6e <HAL_GPIO_Init+0x1fa>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a46      	ldr	r2, [pc, #280]	; (8003b70 <HAL_GPIO_Init+0x2fc>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d007      	beq.n	8003a6a <HAL_GPIO_Init+0x1f6>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a45      	ldr	r2, [pc, #276]	; (8003b74 <HAL_GPIO_Init+0x300>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d101      	bne.n	8003a66 <HAL_GPIO_Init+0x1f2>
 8003a62:	2304      	movs	r3, #4
 8003a64:	e008      	b.n	8003a78 <HAL_GPIO_Init+0x204>
 8003a66:	2307      	movs	r3, #7
 8003a68:	e006      	b.n	8003a78 <HAL_GPIO_Init+0x204>
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e004      	b.n	8003a78 <HAL_GPIO_Init+0x204>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e002      	b.n	8003a78 <HAL_GPIO_Init+0x204>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <HAL_GPIO_Init+0x204>
 8003a76:	2300      	movs	r3, #0
 8003a78:	69fa      	ldr	r2, [r7, #28]
 8003a7a:	f002 0203 	and.w	r2, r2, #3
 8003a7e:	0092      	lsls	r2, r2, #2
 8003a80:	4093      	lsls	r3, r2
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a88:	4935      	ldr	r1, [pc, #212]	; (8003b60 <HAL_GPIO_Init+0x2ec>)
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	089b      	lsrs	r3, r3, #2
 8003a8e:	3302      	adds	r3, #2
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a96:	4b38      	ldr	r3, [pc, #224]	; (8003b78 <HAL_GPIO_Init+0x304>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aba:	4a2f      	ldr	r2, [pc, #188]	; (8003b78 <HAL_GPIO_Init+0x304>)
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ac0:	4b2d      	ldr	r3, [pc, #180]	; (8003b78 <HAL_GPIO_Init+0x304>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ae4:	4a24      	ldr	r2, [pc, #144]	; (8003b78 <HAL_GPIO_Init+0x304>)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aea:	4b23      	ldr	r3, [pc, #140]	; (8003b78 <HAL_GPIO_Init+0x304>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b0e:	4a1a      	ldr	r2, [pc, #104]	; (8003b78 <HAL_GPIO_Init+0x304>)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b14:	4b18      	ldr	r3, [pc, #96]	; (8003b78 <HAL_GPIO_Init+0x304>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b38:	4a0f      	ldr	r2, [pc, #60]	; (8003b78 <HAL_GPIO_Init+0x304>)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	3301      	adds	r3, #1
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	2b0f      	cmp	r3, #15
 8003b48:	f67f aea2 	bls.w	8003890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	bf00      	nop
 8003b50:	3724      	adds	r7, #36	; 0x24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	40013800 	.word	0x40013800
 8003b64:	40020000 	.word	0x40020000
 8003b68:	40020400 	.word	0x40020400
 8003b6c:	40020800 	.word	0x40020800
 8003b70:	40020c00 	.word	0x40020c00
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40013c00 	.word	0x40013c00

08003b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	807b      	strh	r3, [r7, #2]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b8c:	787b      	ldrb	r3, [r7, #1]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b92:	887a      	ldrh	r2, [r7, #2]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b98:	e003      	b.n	8003ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b9a:	887b      	ldrh	r3, [r7, #2]
 8003b9c:	041a      	lsls	r2, r3, #16
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	619a      	str	r2, [r3, #24]
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e12b      	b.n	8003e1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7fe fecc 	bl	8002974 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2224      	movs	r2, #36	; 0x24
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0201 	bic.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c14:	f001 fbe0 	bl	80053d8 <HAL_RCC_GetPCLK1Freq>
 8003c18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4a81      	ldr	r2, [pc, #516]	; (8003e24 <HAL_I2C_Init+0x274>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d807      	bhi.n	8003c34 <HAL_I2C_Init+0x84>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4a80      	ldr	r2, [pc, #512]	; (8003e28 <HAL_I2C_Init+0x278>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	bf94      	ite	ls
 8003c2c:	2301      	movls	r3, #1
 8003c2e:	2300      	movhi	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	e006      	b.n	8003c42 <HAL_I2C_Init+0x92>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4a7d      	ldr	r2, [pc, #500]	; (8003e2c <HAL_I2C_Init+0x27c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	bf94      	ite	ls
 8003c3c:	2301      	movls	r3, #1
 8003c3e:	2300      	movhi	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e0e7      	b.n	8003e1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4a78      	ldr	r2, [pc, #480]	; (8003e30 <HAL_I2C_Init+0x280>)
 8003c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c52:	0c9b      	lsrs	r3, r3, #18
 8003c54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	4a6a      	ldr	r2, [pc, #424]	; (8003e24 <HAL_I2C_Init+0x274>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d802      	bhi.n	8003c84 <HAL_I2C_Init+0xd4>
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	3301      	adds	r3, #1
 8003c82:	e009      	b.n	8003c98 <HAL_I2C_Init+0xe8>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c8a:	fb02 f303 	mul.w	r3, r2, r3
 8003c8e:	4a69      	ldr	r2, [pc, #420]	; (8003e34 <HAL_I2C_Init+0x284>)
 8003c90:	fba2 2303 	umull	r2, r3, r2, r3
 8003c94:	099b      	lsrs	r3, r3, #6
 8003c96:	3301      	adds	r3, #1
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6812      	ldr	r2, [r2, #0]
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003caa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	495c      	ldr	r1, [pc, #368]	; (8003e24 <HAL_I2C_Init+0x274>)
 8003cb4:	428b      	cmp	r3, r1
 8003cb6:	d819      	bhi.n	8003cec <HAL_I2C_Init+0x13c>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	1e59      	subs	r1, r3, #1
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cc6:	1c59      	adds	r1, r3, #1
 8003cc8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ccc:	400b      	ands	r3, r1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_I2C_Init+0x138>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1e59      	subs	r1, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce6:	e051      	b.n	8003d8c <HAL_I2C_Init+0x1dc>
 8003ce8:	2304      	movs	r3, #4
 8003cea:	e04f      	b.n	8003d8c <HAL_I2C_Init+0x1dc>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d111      	bne.n	8003d18 <HAL_I2C_Init+0x168>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	1e58      	subs	r0, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6859      	ldr	r1, [r3, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	440b      	add	r3, r1
 8003d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d06:	3301      	adds	r3, #1
 8003d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	bf0c      	ite	eq
 8003d10:	2301      	moveq	r3, #1
 8003d12:	2300      	movne	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	e012      	b.n	8003d3e <HAL_I2C_Init+0x18e>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	1e58      	subs	r0, r3, #1
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6859      	ldr	r1, [r3, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	0099      	lsls	r1, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d2e:	3301      	adds	r3, #1
 8003d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bf0c      	ite	eq
 8003d38:	2301      	moveq	r3, #1
 8003d3a:	2300      	movne	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_I2C_Init+0x196>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e022      	b.n	8003d8c <HAL_I2C_Init+0x1dc>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10e      	bne.n	8003d6c <HAL_I2C_Init+0x1bc>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	1e58      	subs	r0, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6859      	ldr	r1, [r3, #4]
 8003d56:	460b      	mov	r3, r1
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	440b      	add	r3, r1
 8003d5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d60:	3301      	adds	r3, #1
 8003d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d6a:	e00f      	b.n	8003d8c <HAL_I2C_Init+0x1dc>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	1e58      	subs	r0, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6859      	ldr	r1, [r3, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	0099      	lsls	r1, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d82:	3301      	adds	r3, #1
 8003d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	6809      	ldr	r1, [r1, #0]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69da      	ldr	r2, [r3, #28]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6911      	ldr	r1, [r2, #16]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	68d2      	ldr	r2, [r2, #12]
 8003dc6:	4311      	orrs	r1, r2
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695a      	ldr	r2, [r3, #20]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	000186a0 	.word	0x000186a0
 8003e28:	001e847f 	.word	0x001e847f
 8003e2c:	003d08ff 	.word	0x003d08ff
 8003e30:	431bde83 	.word	0x431bde83
 8003e34:	10624dd3 	.word	0x10624dd3

08003e38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	607a      	str	r2, [r7, #4]
 8003e42:	461a      	mov	r2, r3
 8003e44:	460b      	mov	r3, r1
 8003e46:	817b      	strh	r3, [r7, #10]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e4c:	f7ff f80a 	bl	8002e64 <HAL_GetTick>
 8003e50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	f040 80e0 	bne.w	8004020 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	2319      	movs	r3, #25
 8003e66:	2201      	movs	r2, #1
 8003e68:	4970      	ldr	r1, [pc, #448]	; (800402c <HAL_I2C_Master_Transmit+0x1f4>)
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 fc66 	bl	800473c <I2C_WaitOnFlagUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e76:	2302      	movs	r3, #2
 8003e78:	e0d3      	b.n	8004022 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_I2C_Master_Transmit+0x50>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e0cc      	b.n	8004022 <HAL_I2C_Master_Transmit+0x1ea>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d007      	beq.n	8003eae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0201 	orr.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ebc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2221      	movs	r2, #33	; 0x21
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2210      	movs	r2, #16
 8003eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	893a      	ldrh	r2, [r7, #8]
 8003ede:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4a50      	ldr	r2, [pc, #320]	; (8004030 <HAL_I2C_Master_Transmit+0x1f8>)
 8003eee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ef0:	8979      	ldrh	r1, [r7, #10]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	6a3a      	ldr	r2, [r7, #32]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 fad0 	bl	800449c <I2C_MasterRequestWrite>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e08d      	b.n	8004022 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f06:	2300      	movs	r3, #0
 8003f08:	613b      	str	r3, [r7, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f1c:	e066      	b.n	8003fec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	6a39      	ldr	r1, [r7, #32]
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 fce0 	bl	80048e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00d      	beq.n	8003f4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d107      	bne.n	8003f46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e06b      	b.n	8004022 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	781a      	ldrb	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d11b      	bne.n	8003fc0 <HAL_I2C_Master_Transmit+0x188>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d017      	beq.n	8003fc0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	781a      	ldrb	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	6a39      	ldr	r1, [r7, #32]
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 fcd0 	bl	800496a <I2C_WaitOnBTFFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00d      	beq.n	8003fec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d107      	bne.n	8003fe8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e01a      	b.n	8004022 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d194      	bne.n	8003f1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	e000      	b.n	8004022 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004020:	2302      	movs	r3, #2
  }
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	00100002 	.word	0x00100002
 8004030:	ffff0000 	.word	0xffff0000

08004034 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08c      	sub	sp, #48	; 0x30
 8004038:	af02      	add	r7, sp, #8
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	607a      	str	r2, [r7, #4]
 800403e:	461a      	mov	r2, r3
 8004040:	460b      	mov	r3, r1
 8004042:	817b      	strh	r3, [r7, #10]
 8004044:	4613      	mov	r3, r2
 8004046:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004048:	f7fe ff0c 	bl	8002e64 <HAL_GetTick>
 800404c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b20      	cmp	r3, #32
 8004058:	f040 820b 	bne.w	8004472 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	2319      	movs	r3, #25
 8004062:	2201      	movs	r2, #1
 8004064:	497c      	ldr	r1, [pc, #496]	; (8004258 <HAL_I2C_Master_Receive+0x224>)
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fb68 	bl	800473c <I2C_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004072:	2302      	movs	r3, #2
 8004074:	e1fe      	b.n	8004474 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_I2C_Master_Receive+0x50>
 8004080:	2302      	movs	r3, #2
 8004082:	e1f7      	b.n	8004474 <HAL_I2C_Master_Receive+0x440>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b01      	cmp	r3, #1
 8004098:	d007      	beq.n	80040aa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2222      	movs	r2, #34	; 0x22
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2210      	movs	r2, #16
 80040c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	893a      	ldrh	r2, [r7, #8]
 80040da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4a5c      	ldr	r2, [pc, #368]	; (800425c <HAL_I2C_Master_Receive+0x228>)
 80040ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040ec:	8979      	ldrh	r1, [r7, #10]
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 fa54 	bl	80045a0 <I2C_MasterRequestRead>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e1b8      	b.n	8004474 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004106:	2b00      	cmp	r3, #0
 8004108:	d113      	bne.n	8004132 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800410a:	2300      	movs	r3, #0
 800410c:	623b      	str	r3, [r7, #32]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	623b      	str	r3, [r7, #32]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	623b      	str	r3, [r7, #32]
 800411e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	e18c      	b.n	800444c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004136:	2b01      	cmp	r3, #1
 8004138:	d11b      	bne.n	8004172 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004148:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800414a:	2300      	movs	r3, #0
 800414c:	61fb      	str	r3, [r7, #28]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	61fb      	str	r3, [r7, #28]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	61fb      	str	r3, [r7, #28]
 800415e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	e16c      	b.n	800444c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004176:	2b02      	cmp	r3, #2
 8004178:	d11b      	bne.n	80041b2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004188:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004198:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800419a:	2300      	movs	r3, #0
 800419c:	61bb      	str	r3, [r7, #24]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	e14c      	b.n	800444c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041d8:	e138      	b.n	800444c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041de:	2b03      	cmp	r3, #3
 80041e0:	f200 80f1 	bhi.w	80043c6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d123      	bne.n	8004234 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fbfb 	bl	80049ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e139      	b.n	8004474 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691a      	ldr	r2, [r3, #16]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	1c5a      	adds	r2, r3, #1
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421c:	3b01      	subs	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004228:	b29b      	uxth	r3, r3
 800422a:	3b01      	subs	r3, #1
 800422c:	b29a      	uxth	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004232:	e10b      	b.n	800444c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004238:	2b02      	cmp	r3, #2
 800423a:	d14e      	bne.n	80042da <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004242:	2200      	movs	r2, #0
 8004244:	4906      	ldr	r1, [pc, #24]	; (8004260 <HAL_I2C_Master_Receive+0x22c>)
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 fa78 	bl	800473c <I2C_WaitOnFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d008      	beq.n	8004264 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e10e      	b.n	8004474 <HAL_I2C_Master_Receive+0x440>
 8004256:	bf00      	nop
 8004258:	00100002 	.word	0x00100002
 800425c:	ffff0000 	.word	0xffff0000
 8004260:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042d8:	e0b8      	b.n	800444c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	2200      	movs	r2, #0
 80042e2:	4966      	ldr	r1, [pc, #408]	; (800447c <HAL_I2C_Master_Receive+0x448>)
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 fa29 	bl	800473c <I2C_WaitOnFlagUntilTimeout>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0bf      	b.n	8004474 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004302:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691a      	ldr	r2, [r3, #16]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	2200      	movs	r2, #0
 800433e:	494f      	ldr	r1, [pc, #316]	; (800447c <HAL_I2C_Master_Receive+0x448>)
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f9fb 	bl	800473c <I2C_WaitOnFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e091      	b.n	8004474 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800435e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691a      	ldr	r2, [r3, #16]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043c4:	e042      	b.n	800444c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 fb0e 	bl	80049ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e04c      	b.n	8004474 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	2b04      	cmp	r3, #4
 8004418:	d118      	bne.n	800444c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004450:	2b00      	cmp	r3, #0
 8004452:	f47f aec2 	bne.w	80041da <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	e000      	b.n	8004474 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004472:	2302      	movs	r3, #2
  }
}
 8004474:	4618      	mov	r0, r3
 8004476:	3728      	adds	r7, #40	; 0x28
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	00010004 	.word	0x00010004

08004480 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448e:	b2db      	uxtb	r3, r3
}
 8004490:	4618      	mov	r0, r3
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af02      	add	r7, sp, #8
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	607a      	str	r2, [r7, #4]
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	460b      	mov	r3, r1
 80044aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d006      	beq.n	80044c6 <I2C_MasterRequestWrite+0x2a>
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d003      	beq.n	80044c6 <I2C_MasterRequestWrite+0x2a>
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044c4:	d108      	bne.n	80044d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	e00b      	b.n	80044f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	2b12      	cmp	r3, #18
 80044de:	d107      	bne.n	80044f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 f91d 	bl	800473c <I2C_WaitOnFlagUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00d      	beq.n	8004524 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004516:	d103      	bne.n	8004520 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800451e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e035      	b.n	8004590 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800452c:	d108      	bne.n	8004540 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800452e:	897b      	ldrh	r3, [r7, #10]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	461a      	mov	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800453c:	611a      	str	r2, [r3, #16]
 800453e:	e01b      	b.n	8004578 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004540:	897b      	ldrh	r3, [r7, #10]
 8004542:	11db      	asrs	r3, r3, #7
 8004544:	b2db      	uxtb	r3, r3
 8004546:	f003 0306 	and.w	r3, r3, #6
 800454a:	b2db      	uxtb	r3, r3
 800454c:	f063 030f 	orn	r3, r3, #15
 8004550:	b2da      	uxtb	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	490e      	ldr	r1, [pc, #56]	; (8004598 <I2C_MasterRequestWrite+0xfc>)
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 f943 	bl	80047ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e010      	b.n	8004590 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800456e:	897b      	ldrh	r3, [r7, #10]
 8004570:	b2da      	uxtb	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	4907      	ldr	r1, [pc, #28]	; (800459c <I2C_MasterRequestWrite+0x100>)
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 f933 	bl	80047ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	00010008 	.word	0x00010008
 800459c:	00010002 	.word	0x00010002

080045a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	607a      	str	r2, [r7, #4]
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	460b      	mov	r3, r1
 80045ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d006      	beq.n	80045da <I2C_MasterRequestRead+0x3a>
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d003      	beq.n	80045da <I2C_MasterRequestRead+0x3a>
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045d8:	d108      	bne.n	80045ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	e00b      	b.n	8004604 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	2b11      	cmp	r3, #17
 80045f2:	d107      	bne.n	8004604 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004602:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f893 	bl	800473c <I2C_WaitOnFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00d      	beq.n	8004638 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462a:	d103      	bne.n	8004634 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004632:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e079      	b.n	800472c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004640:	d108      	bne.n	8004654 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004642:	897b      	ldrh	r3, [r7, #10]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	b2da      	uxtb	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	611a      	str	r2, [r3, #16]
 8004652:	e05f      	b.n	8004714 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004654:	897b      	ldrh	r3, [r7, #10]
 8004656:	11db      	asrs	r3, r3, #7
 8004658:	b2db      	uxtb	r3, r3
 800465a:	f003 0306 	and.w	r3, r3, #6
 800465e:	b2db      	uxtb	r3, r3
 8004660:	f063 030f 	orn	r3, r3, #15
 8004664:	b2da      	uxtb	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	4930      	ldr	r1, [pc, #192]	; (8004734 <I2C_MasterRequestRead+0x194>)
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f8b9 	bl	80047ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e054      	b.n	800472c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004682:	897b      	ldrh	r3, [r7, #10]
 8004684:	b2da      	uxtb	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	4929      	ldr	r1, [pc, #164]	; (8004738 <I2C_MasterRequestRead+0x198>)
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 f8a9 	bl	80047ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e044      	b.n	800472c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a2:	2300      	movs	r3, #0
 80046a4:	613b      	str	r3, [r7, #16]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	613b      	str	r3, [r7, #16]
 80046b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 f831 	bl	800473c <I2C_WaitOnFlagUntilTimeout>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00d      	beq.n	80046fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ee:	d103      	bne.n	80046f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046f6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e017      	b.n	800472c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80046fc:	897b      	ldrh	r3, [r7, #10]
 80046fe:	11db      	asrs	r3, r3, #7
 8004700:	b2db      	uxtb	r3, r3
 8004702:	f003 0306 	and.w	r3, r3, #6
 8004706:	b2db      	uxtb	r3, r3
 8004708:	f063 030e 	orn	r3, r3, #14
 800470c:	b2da      	uxtb	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	4907      	ldr	r1, [pc, #28]	; (8004738 <I2C_MasterRequestRead+0x198>)
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f865 	bl	80047ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	00010008 	.word	0x00010008
 8004738:	00010002 	.word	0x00010002

0800473c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	603b      	str	r3, [r7, #0]
 8004748:	4613      	mov	r3, r2
 800474a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800474c:	e025      	b.n	800479a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004754:	d021      	beq.n	800479a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004756:	f7fe fb85 	bl	8002e64 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d302      	bcc.n	800476c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d116      	bne.n	800479a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f043 0220 	orr.w	r2, r3, #32
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e023      	b.n	80047e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	0c1b      	lsrs	r3, r3, #16
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d10d      	bne.n	80047c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	43da      	mvns	r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4013      	ands	r3, r2
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	bf0c      	ite	eq
 80047b6:	2301      	moveq	r3, #1
 80047b8:	2300      	movne	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	e00c      	b.n	80047da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	43da      	mvns	r2, r3
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4013      	ands	r3, r2
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	bf0c      	ite	eq
 80047d2:	2301      	moveq	r3, #1
 80047d4:	2300      	movne	r3, #0
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d0b6      	beq.n	800474e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b084      	sub	sp, #16
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	60f8      	str	r0, [r7, #12]
 80047f2:	60b9      	str	r1, [r7, #8]
 80047f4:	607a      	str	r2, [r7, #4]
 80047f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047f8:	e051      	b.n	800489e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004808:	d123      	bne.n	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004818:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004822:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f043 0204 	orr.w	r2, r3, #4
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e046      	b.n	80048e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004858:	d021      	beq.n	800489e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485a:	f7fe fb03 	bl	8002e64 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	429a      	cmp	r2, r3
 8004868:	d302      	bcc.n	8004870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d116      	bne.n	800489e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	f043 0220 	orr.w	r2, r3, #32
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e020      	b.n	80048e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	0c1b      	lsrs	r3, r3, #16
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d10c      	bne.n	80048c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	43da      	mvns	r2, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4013      	ands	r3, r2
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	bf14      	ite	ne
 80048ba:	2301      	movne	r3, #1
 80048bc:	2300      	moveq	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	e00b      	b.n	80048da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	43da      	mvns	r2, r3
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	4013      	ands	r3, r2
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	bf14      	ite	ne
 80048d4:	2301      	movne	r3, #1
 80048d6:	2300      	moveq	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d18d      	bne.n	80047fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048f4:	e02d      	b.n	8004952 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f8ce 	bl	8004a98 <I2C_IsAcknowledgeFailed>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e02d      	b.n	8004962 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490c:	d021      	beq.n	8004952 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800490e:	f7fe faa9 	bl	8002e64 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	429a      	cmp	r2, r3
 800491c:	d302      	bcc.n	8004924 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d116      	bne.n	8004952 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2220      	movs	r2, #32
 800492e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f043 0220 	orr.w	r2, r3, #32
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e007      	b.n	8004962 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495c:	2b80      	cmp	r3, #128	; 0x80
 800495e:	d1ca      	bne.n	80048f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b084      	sub	sp, #16
 800496e:	af00      	add	r7, sp, #0
 8004970:	60f8      	str	r0, [r7, #12]
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004976:	e02d      	b.n	80049d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f88d 	bl	8004a98 <I2C_IsAcknowledgeFailed>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e02d      	b.n	80049e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498e:	d021      	beq.n	80049d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004990:	f7fe fa68 	bl	8002e64 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	429a      	cmp	r2, r3
 800499e:	d302      	bcc.n	80049a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d116      	bne.n	80049d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	f043 0220 	orr.w	r2, r3, #32
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e007      	b.n	80049e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d1ca      	bne.n	8004978 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049f8:	e042      	b.n	8004a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	f003 0310 	and.w	r3, r3, #16
 8004a04:	2b10      	cmp	r3, #16
 8004a06:	d119      	bne.n	8004a3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0210 	mvn.w	r2, #16
 8004a10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e029      	b.n	8004a90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a3c:	f7fe fa12 	bl	8002e64 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d302      	bcc.n	8004a52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d116      	bne.n	8004a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	f043 0220 	orr.w	r2, r3, #32
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e007      	b.n	8004a90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8a:	2b40      	cmp	r3, #64	; 0x40
 8004a8c:	d1b5      	bne.n	80049fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aae:	d11b      	bne.n	8004ae8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ab8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	f043 0204 	orr.w	r2, r3, #4
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e000      	b.n	8004aea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
	...

08004af8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e267      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d075      	beq.n	8004c02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b16:	4b88      	ldr	r3, [pc, #544]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 030c 	and.w	r3, r3, #12
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d00c      	beq.n	8004b3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b22:	4b85      	ldr	r3, [pc, #532]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b2a:	2b08      	cmp	r3, #8
 8004b2c:	d112      	bne.n	8004b54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b2e:	4b82      	ldr	r3, [pc, #520]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b3a:	d10b      	bne.n	8004b54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b3c:	4b7e      	ldr	r3, [pc, #504]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d05b      	beq.n	8004c00 <HAL_RCC_OscConfig+0x108>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d157      	bne.n	8004c00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e242      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b5c:	d106      	bne.n	8004b6c <HAL_RCC_OscConfig+0x74>
 8004b5e:	4b76      	ldr	r3, [pc, #472]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a75      	ldr	r2, [pc, #468]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	e01d      	b.n	8004ba8 <HAL_RCC_OscConfig+0xb0>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b74:	d10c      	bne.n	8004b90 <HAL_RCC_OscConfig+0x98>
 8004b76:	4b70      	ldr	r3, [pc, #448]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a6f      	ldr	r2, [pc, #444]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	4b6d      	ldr	r3, [pc, #436]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a6c      	ldr	r2, [pc, #432]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	e00b      	b.n	8004ba8 <HAL_RCC_OscConfig+0xb0>
 8004b90:	4b69      	ldr	r3, [pc, #420]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a68      	ldr	r2, [pc, #416]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	4b66      	ldr	r3, [pc, #408]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a65      	ldr	r2, [pc, #404]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d013      	beq.n	8004bd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb0:	f7fe f958 	bl	8002e64 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bb8:	f7fe f954 	bl	8002e64 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b64      	cmp	r3, #100	; 0x64
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e207      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bca:	4b5b      	ldr	r3, [pc, #364]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0xc0>
 8004bd6:	e014      	b.n	8004c02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd8:	f7fe f944 	bl	8002e64 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004be0:	f7fe f940 	bl	8002e64 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b64      	cmp	r3, #100	; 0x64
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e1f3      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bf2:	4b51      	ldr	r3, [pc, #324]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f0      	bne.n	8004be0 <HAL_RCC_OscConfig+0xe8>
 8004bfe:	e000      	b.n	8004c02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d063      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c0e:	4b4a      	ldr	r3, [pc, #296]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 030c 	and.w	r3, r3, #12
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00b      	beq.n	8004c32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c1a:	4b47      	ldr	r3, [pc, #284]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d11c      	bne.n	8004c60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c26:	4b44      	ldr	r3, [pc, #272]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d116      	bne.n	8004c60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c32:	4b41      	ldr	r3, [pc, #260]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d005      	beq.n	8004c4a <HAL_RCC_OscConfig+0x152>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d001      	beq.n	8004c4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e1c7      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c4a:	4b3b      	ldr	r3, [pc, #236]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	4937      	ldr	r1, [pc, #220]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c5e:	e03a      	b.n	8004cd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d020      	beq.n	8004caa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c68:	4b34      	ldr	r3, [pc, #208]	; (8004d3c <HAL_RCC_OscConfig+0x244>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6e:	f7fe f8f9 	bl	8002e64 <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c74:	e008      	b.n	8004c88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c76:	f7fe f8f5 	bl	8002e64 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e1a8      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c88:	4b2b      	ldr	r3, [pc, #172]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0f0      	beq.n	8004c76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c94:	4b28      	ldr	r3, [pc, #160]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	4925      	ldr	r1, [pc, #148]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	600b      	str	r3, [r1, #0]
 8004ca8:	e015      	b.n	8004cd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004caa:	4b24      	ldr	r3, [pc, #144]	; (8004d3c <HAL_RCC_OscConfig+0x244>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb0:	f7fe f8d8 	bl	8002e64 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cb8:	f7fe f8d4 	bl	8002e64 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e187      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cca:	4b1b      	ldr	r3, [pc, #108]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1f0      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d036      	beq.n	8004d50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d016      	beq.n	8004d18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cea:	4b15      	ldr	r3, [pc, #84]	; (8004d40 <HAL_RCC_OscConfig+0x248>)
 8004cec:	2201      	movs	r2, #1
 8004cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf0:	f7fe f8b8 	bl	8002e64 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cf8:	f7fe f8b4 	bl	8002e64 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e167      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d0a:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x200>
 8004d16:	e01b      	b.n	8004d50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d18:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <HAL_RCC_OscConfig+0x248>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d1e:	f7fe f8a1 	bl	8002e64 <HAL_GetTick>
 8004d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d24:	e00e      	b.n	8004d44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d26:	f7fe f89d 	bl	8002e64 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d907      	bls.n	8004d44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e150      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	42470000 	.word	0x42470000
 8004d40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d44:	4b88      	ldr	r3, [pc, #544]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1ea      	bne.n	8004d26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 8097 	beq.w	8004e8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d62:	4b81      	ldr	r3, [pc, #516]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10f      	bne.n	8004d8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60bb      	str	r3, [r7, #8]
 8004d72:	4b7d      	ldr	r3, [pc, #500]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	4a7c      	ldr	r2, [pc, #496]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d7e:	4b7a      	ldr	r3, [pc, #488]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d86:	60bb      	str	r3, [r7, #8]
 8004d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d8e:	4b77      	ldr	r3, [pc, #476]	; (8004f6c <HAL_RCC_OscConfig+0x474>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d118      	bne.n	8004dcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d9a:	4b74      	ldr	r3, [pc, #464]	; (8004f6c <HAL_RCC_OscConfig+0x474>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a73      	ldr	r2, [pc, #460]	; (8004f6c <HAL_RCC_OscConfig+0x474>)
 8004da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004da6:	f7fe f85d 	bl	8002e64 <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dac:	e008      	b.n	8004dc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dae:	f7fe f859 	bl	8002e64 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e10c      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc0:	4b6a      	ldr	r3, [pc, #424]	; (8004f6c <HAL_RCC_OscConfig+0x474>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0f0      	beq.n	8004dae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d106      	bne.n	8004de2 <HAL_RCC_OscConfig+0x2ea>
 8004dd4:	4b64      	ldr	r3, [pc, #400]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd8:	4a63      	ldr	r2, [pc, #396]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004dda:	f043 0301 	orr.w	r3, r3, #1
 8004dde:	6713      	str	r3, [r2, #112]	; 0x70
 8004de0:	e01c      	b.n	8004e1c <HAL_RCC_OscConfig+0x324>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	2b05      	cmp	r3, #5
 8004de8:	d10c      	bne.n	8004e04 <HAL_RCC_OscConfig+0x30c>
 8004dea:	4b5f      	ldr	r3, [pc, #380]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dee:	4a5e      	ldr	r2, [pc, #376]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004df0:	f043 0304 	orr.w	r3, r3, #4
 8004df4:	6713      	str	r3, [r2, #112]	; 0x70
 8004df6:	4b5c      	ldr	r3, [pc, #368]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfa:	4a5b      	ldr	r2, [pc, #364]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004dfc:	f043 0301 	orr.w	r3, r3, #1
 8004e00:	6713      	str	r3, [r2, #112]	; 0x70
 8004e02:	e00b      	b.n	8004e1c <HAL_RCC_OscConfig+0x324>
 8004e04:	4b58      	ldr	r3, [pc, #352]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e08:	4a57      	ldr	r2, [pc, #348]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004e0a:	f023 0301 	bic.w	r3, r3, #1
 8004e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e10:	4b55      	ldr	r3, [pc, #340]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e14:	4a54      	ldr	r2, [pc, #336]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004e16:	f023 0304 	bic.w	r3, r3, #4
 8004e1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d015      	beq.n	8004e50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e24:	f7fe f81e 	bl	8002e64 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e2c:	f7fe f81a 	bl	8002e64 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e0cb      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e42:	4b49      	ldr	r3, [pc, #292]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0ee      	beq.n	8004e2c <HAL_RCC_OscConfig+0x334>
 8004e4e:	e014      	b.n	8004e7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e50:	f7fe f808 	bl	8002e64 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e56:	e00a      	b.n	8004e6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e58:	f7fe f804 	bl	8002e64 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e0b5      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e6e:	4b3e      	ldr	r3, [pc, #248]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1ee      	bne.n	8004e58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e7a:	7dfb      	ldrb	r3, [r7, #23]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d105      	bne.n	8004e8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e80:	4b39      	ldr	r3, [pc, #228]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	4a38      	ldr	r2, [pc, #224]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 80a1 	beq.w	8004fd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e96:	4b34      	ldr	r3, [pc, #208]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 030c 	and.w	r3, r3, #12
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d05c      	beq.n	8004f5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d141      	bne.n	8004f2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eaa:	4b31      	ldr	r3, [pc, #196]	; (8004f70 <HAL_RCC_OscConfig+0x478>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb0:	f7fd ffd8 	bl	8002e64 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eb8:	f7fd ffd4 	bl	8002e64 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e087      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eca:	4b27      	ldr	r3, [pc, #156]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f0      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69da      	ldr	r2, [r3, #28]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	019b      	lsls	r3, r3, #6
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	085b      	lsrs	r3, r3, #1
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	041b      	lsls	r3, r3, #16
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	061b      	lsls	r3, r3, #24
 8004efa:	491b      	ldr	r1, [pc, #108]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f00:	4b1b      	ldr	r3, [pc, #108]	; (8004f70 <HAL_RCC_OscConfig+0x478>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f06:	f7fd ffad 	bl	8002e64 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f0e:	f7fd ffa9 	bl	8002e64 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e05c      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f20:	4b11      	ldr	r3, [pc, #68]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f0      	beq.n	8004f0e <HAL_RCC_OscConfig+0x416>
 8004f2c:	e054      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f2e:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <HAL_RCC_OscConfig+0x478>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f34:	f7fd ff96 	bl	8002e64 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f3c:	f7fd ff92 	bl	8002e64 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e045      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4e:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f0      	bne.n	8004f3c <HAL_RCC_OscConfig+0x444>
 8004f5a:	e03d      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d107      	bne.n	8004f74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e038      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	40007000 	.word	0x40007000
 8004f70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f74:	4b1b      	ldr	r3, [pc, #108]	; (8004fe4 <HAL_RCC_OscConfig+0x4ec>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d028      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d121      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d11a      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004faa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d111      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	085b      	lsrs	r3, r3, #1
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d107      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d001      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40023800 	.word	0x40023800

08004fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e0cc      	b.n	8005196 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ffc:	4b68      	ldr	r3, [pc, #416]	; (80051a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d90c      	bls.n	8005024 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500a:	4b65      	ldr	r3, [pc, #404]	; (80051a0 <HAL_RCC_ClockConfig+0x1b8>)
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005012:	4b63      	ldr	r3, [pc, #396]	; (80051a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d001      	beq.n	8005024 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e0b8      	b.n	8005196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d020      	beq.n	8005072 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800503c:	4b59      	ldr	r3, [pc, #356]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	4a58      	ldr	r2, [pc, #352]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005046:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b00      	cmp	r3, #0
 8005052:	d005      	beq.n	8005060 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005054:	4b53      	ldr	r3, [pc, #332]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	4a52      	ldr	r2, [pc, #328]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800505e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005060:	4b50      	ldr	r3, [pc, #320]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	494d      	ldr	r1, [pc, #308]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 800506e:	4313      	orrs	r3, r2
 8005070:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d044      	beq.n	8005108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d107      	bne.n	8005096 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005086:	4b47      	ldr	r3, [pc, #284]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d119      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e07f      	b.n	8005196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d003      	beq.n	80050a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050a2:	2b03      	cmp	r3, #3
 80050a4:	d107      	bne.n	80050b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a6:	4b3f      	ldr	r3, [pc, #252]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d109      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e06f      	b.n	8005196 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b6:	4b3b      	ldr	r3, [pc, #236]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e067      	b.n	8005196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050c6:	4b37      	ldr	r3, [pc, #220]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f023 0203 	bic.w	r2, r3, #3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	4934      	ldr	r1, [pc, #208]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050d8:	f7fd fec4 	bl	8002e64 <HAL_GetTick>
 80050dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050de:	e00a      	b.n	80050f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e0:	f7fd fec0 	bl	8002e64 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e04f      	b.n	8005196 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f6:	4b2b      	ldr	r3, [pc, #172]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 020c 	and.w	r2, r3, #12
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	429a      	cmp	r2, r3
 8005106:	d1eb      	bne.n	80050e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005108:	4b25      	ldr	r3, [pc, #148]	; (80051a0 <HAL_RCC_ClockConfig+0x1b8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d20c      	bcs.n	8005130 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005116:	4b22      	ldr	r3, [pc, #136]	; (80051a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800511e:	4b20      	ldr	r3, [pc, #128]	; (80051a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d001      	beq.n	8005130 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e032      	b.n	8005196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b00      	cmp	r3, #0
 800513a:	d008      	beq.n	800514e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800513c:	4b19      	ldr	r3, [pc, #100]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	4916      	ldr	r1, [pc, #88]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	4313      	orrs	r3, r2
 800514c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b00      	cmp	r3, #0
 8005158:	d009      	beq.n	800516e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800515a:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	490e      	ldr	r1, [pc, #56]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 800516a:	4313      	orrs	r3, r2
 800516c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800516e:	f000 f821 	bl	80051b4 <HAL_RCC_GetSysClockFreq>
 8005172:	4602      	mov	r2, r0
 8005174:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	091b      	lsrs	r3, r3, #4
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	490a      	ldr	r1, [pc, #40]	; (80051a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005180:	5ccb      	ldrb	r3, [r1, r3]
 8005182:	fa22 f303 	lsr.w	r3, r2, r3
 8005186:	4a09      	ldr	r2, [pc, #36]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 8005188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800518a:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f7fd fe24 	bl	8002ddc <HAL_InitTick>

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	40023c00 	.word	0x40023c00
 80051a4:	40023800 	.word	0x40023800
 80051a8:	0800a57c 	.word	0x0800a57c
 80051ac:	20000014 	.word	0x20000014
 80051b0:	20000018 	.word	0x20000018

080051b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051b8:	b094      	sub	sp, #80	; 0x50
 80051ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	647b      	str	r3, [r7, #68]	; 0x44
 80051c0:	2300      	movs	r3, #0
 80051c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051c4:	2300      	movs	r3, #0
 80051c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051cc:	4b79      	ldr	r3, [pc, #484]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 030c 	and.w	r3, r3, #12
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d00d      	beq.n	80051f4 <HAL_RCC_GetSysClockFreq+0x40>
 80051d8:	2b08      	cmp	r3, #8
 80051da:	f200 80e1 	bhi.w	80053a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <HAL_RCC_GetSysClockFreq+0x34>
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d003      	beq.n	80051ee <HAL_RCC_GetSysClockFreq+0x3a>
 80051e6:	e0db      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051e8:	4b73      	ldr	r3, [pc, #460]	; (80053b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80051ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80051ec:	e0db      	b.n	80053a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051ee:	4b73      	ldr	r3, [pc, #460]	; (80053bc <HAL_RCC_GetSysClockFreq+0x208>)
 80051f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051f2:	e0d8      	b.n	80053a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051f4:	4b6f      	ldr	r3, [pc, #444]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051fe:	4b6d      	ldr	r3, [pc, #436]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d063      	beq.n	80052d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800520a:	4b6a      	ldr	r3, [pc, #424]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	099b      	lsrs	r3, r3, #6
 8005210:	2200      	movs	r2, #0
 8005212:	63bb      	str	r3, [r7, #56]	; 0x38
 8005214:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800521c:	633b      	str	r3, [r7, #48]	; 0x30
 800521e:	2300      	movs	r3, #0
 8005220:	637b      	str	r3, [r7, #52]	; 0x34
 8005222:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005226:	4622      	mov	r2, r4
 8005228:	462b      	mov	r3, r5
 800522a:	f04f 0000 	mov.w	r0, #0
 800522e:	f04f 0100 	mov.w	r1, #0
 8005232:	0159      	lsls	r1, r3, #5
 8005234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005238:	0150      	lsls	r0, r2, #5
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	4621      	mov	r1, r4
 8005240:	1a51      	subs	r1, r2, r1
 8005242:	6139      	str	r1, [r7, #16]
 8005244:	4629      	mov	r1, r5
 8005246:	eb63 0301 	sbc.w	r3, r3, r1
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	f04f 0300 	mov.w	r3, #0
 8005254:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005258:	4659      	mov	r1, fp
 800525a:	018b      	lsls	r3, r1, #6
 800525c:	4651      	mov	r1, sl
 800525e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005262:	4651      	mov	r1, sl
 8005264:	018a      	lsls	r2, r1, #6
 8005266:	4651      	mov	r1, sl
 8005268:	ebb2 0801 	subs.w	r8, r2, r1
 800526c:	4659      	mov	r1, fp
 800526e:	eb63 0901 	sbc.w	r9, r3, r1
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800527e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005286:	4690      	mov	r8, r2
 8005288:	4699      	mov	r9, r3
 800528a:	4623      	mov	r3, r4
 800528c:	eb18 0303 	adds.w	r3, r8, r3
 8005290:	60bb      	str	r3, [r7, #8]
 8005292:	462b      	mov	r3, r5
 8005294:	eb49 0303 	adc.w	r3, r9, r3
 8005298:	60fb      	str	r3, [r7, #12]
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052a6:	4629      	mov	r1, r5
 80052a8:	024b      	lsls	r3, r1, #9
 80052aa:	4621      	mov	r1, r4
 80052ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052b0:	4621      	mov	r1, r4
 80052b2:	024a      	lsls	r2, r1, #9
 80052b4:	4610      	mov	r0, r2
 80052b6:	4619      	mov	r1, r3
 80052b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ba:	2200      	movs	r2, #0
 80052bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052c4:	f7fb fcc8 	bl	8000c58 <__aeabi_uldivmod>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	4613      	mov	r3, r2
 80052ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052d0:	e058      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052d2:	4b38      	ldr	r3, [pc, #224]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	099b      	lsrs	r3, r3, #6
 80052d8:	2200      	movs	r2, #0
 80052da:	4618      	mov	r0, r3
 80052dc:	4611      	mov	r1, r2
 80052de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052e2:	623b      	str	r3, [r7, #32]
 80052e4:	2300      	movs	r3, #0
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
 80052e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052ec:	4642      	mov	r2, r8
 80052ee:	464b      	mov	r3, r9
 80052f0:	f04f 0000 	mov.w	r0, #0
 80052f4:	f04f 0100 	mov.w	r1, #0
 80052f8:	0159      	lsls	r1, r3, #5
 80052fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052fe:	0150      	lsls	r0, r2, #5
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	4641      	mov	r1, r8
 8005306:	ebb2 0a01 	subs.w	sl, r2, r1
 800530a:	4649      	mov	r1, r9
 800530c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800531c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005320:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005324:	ebb2 040a 	subs.w	r4, r2, sl
 8005328:	eb63 050b 	sbc.w	r5, r3, fp
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	00eb      	lsls	r3, r5, #3
 8005336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800533a:	00e2      	lsls	r2, r4, #3
 800533c:	4614      	mov	r4, r2
 800533e:	461d      	mov	r5, r3
 8005340:	4643      	mov	r3, r8
 8005342:	18e3      	adds	r3, r4, r3
 8005344:	603b      	str	r3, [r7, #0]
 8005346:	464b      	mov	r3, r9
 8005348:	eb45 0303 	adc.w	r3, r5, r3
 800534c:	607b      	str	r3, [r7, #4]
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	e9d7 4500 	ldrd	r4, r5, [r7]
 800535a:	4629      	mov	r1, r5
 800535c:	028b      	lsls	r3, r1, #10
 800535e:	4621      	mov	r1, r4
 8005360:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005364:	4621      	mov	r1, r4
 8005366:	028a      	lsls	r2, r1, #10
 8005368:	4610      	mov	r0, r2
 800536a:	4619      	mov	r1, r3
 800536c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800536e:	2200      	movs	r2, #0
 8005370:	61bb      	str	r3, [r7, #24]
 8005372:	61fa      	str	r2, [r7, #28]
 8005374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005378:	f7fb fc6e 	bl	8000c58 <__aeabi_uldivmod>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4613      	mov	r3, r2
 8005382:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005384:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	0c1b      	lsrs	r3, r3, #16
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	3301      	adds	r3, #1
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005394:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005398:	fbb2 f3f3 	udiv	r3, r2, r3
 800539c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800539e:	e002      	b.n	80053a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053a0:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80053a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3750      	adds	r7, #80	; 0x50
 80053ac:	46bd      	mov	sp, r7
 80053ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053b2:	bf00      	nop
 80053b4:	40023800 	.word	0x40023800
 80053b8:	00f42400 	.word	0x00f42400
 80053bc:	007a1200 	.word	0x007a1200

080053c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053c4:	4b03      	ldr	r3, [pc, #12]	; (80053d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80053c6:	681b      	ldr	r3, [r3, #0]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	20000014 	.word	0x20000014

080053d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053dc:	f7ff fff0 	bl	80053c0 <HAL_RCC_GetHCLKFreq>
 80053e0:	4602      	mov	r2, r0
 80053e2:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	0a9b      	lsrs	r3, r3, #10
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	4903      	ldr	r1, [pc, #12]	; (80053fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80053ee:	5ccb      	ldrb	r3, [r1, r3]
 80053f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40023800 	.word	0x40023800
 80053fc:	0800a58c 	.word	0x0800a58c

08005400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005404:	f7ff ffdc 	bl	80053c0 <HAL_RCC_GetHCLKFreq>
 8005408:	4602      	mov	r2, r0
 800540a:	4b05      	ldr	r3, [pc, #20]	; (8005420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	0b5b      	lsrs	r3, r3, #13
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	4903      	ldr	r1, [pc, #12]	; (8005424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005416:	5ccb      	ldrb	r3, [r1, r3]
 8005418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800541c:	4618      	mov	r0, r3
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40023800 	.word	0x40023800
 8005424:	0800a58c 	.word	0x0800a58c

08005428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e041      	b.n	80054be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fd fad8 	bl	8002a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3304      	adds	r3, #4
 8005464:	4619      	mov	r1, r3
 8005466:	4610      	mov	r0, r2
 8005468:	f000 f950 	bl	800570c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d001      	beq.n	80054e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e03c      	b.n	800555a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a1e      	ldr	r2, [pc, #120]	; (8005568 <HAL_TIM_Base_Start+0xa0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d018      	beq.n	8005524 <HAL_TIM_Base_Start+0x5c>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fa:	d013      	beq.n	8005524 <HAL_TIM_Base_Start+0x5c>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a1a      	ldr	r2, [pc, #104]	; (800556c <HAL_TIM_Base_Start+0xa4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00e      	beq.n	8005524 <HAL_TIM_Base_Start+0x5c>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a19      	ldr	r2, [pc, #100]	; (8005570 <HAL_TIM_Base_Start+0xa8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d009      	beq.n	8005524 <HAL_TIM_Base_Start+0x5c>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a17      	ldr	r2, [pc, #92]	; (8005574 <HAL_TIM_Base_Start+0xac>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d004      	beq.n	8005524 <HAL_TIM_Base_Start+0x5c>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a16      	ldr	r2, [pc, #88]	; (8005578 <HAL_TIM_Base_Start+0xb0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d111      	bne.n	8005548 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b06      	cmp	r3, #6
 8005534:	d010      	beq.n	8005558 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f042 0201 	orr.w	r2, r2, #1
 8005544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005546:	e007      	b.n	8005558 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0201 	orr.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40010000 	.word	0x40010000
 800556c:	40000400 	.word	0x40000400
 8005570:	40000800 	.word	0x40000800
 8005574:	40000c00 	.word	0x40000c00
 8005578:	40014000 	.word	0x40014000

0800557c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <HAL_TIM_ConfigClockSource+0x1c>
 8005594:	2302      	movs	r3, #2
 8005596:	e0b4      	b.n	8005702 <HAL_TIM_ConfigClockSource+0x186>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055d0:	d03e      	beq.n	8005650 <HAL_TIM_ConfigClockSource+0xd4>
 80055d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055d6:	f200 8087 	bhi.w	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 80055da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055de:	f000 8086 	beq.w	80056ee <HAL_TIM_ConfigClockSource+0x172>
 80055e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e6:	d87f      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 80055e8:	2b70      	cmp	r3, #112	; 0x70
 80055ea:	d01a      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0xa6>
 80055ec:	2b70      	cmp	r3, #112	; 0x70
 80055ee:	d87b      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 80055f0:	2b60      	cmp	r3, #96	; 0x60
 80055f2:	d050      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x11a>
 80055f4:	2b60      	cmp	r3, #96	; 0x60
 80055f6:	d877      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 80055f8:	2b50      	cmp	r3, #80	; 0x50
 80055fa:	d03c      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0xfa>
 80055fc:	2b50      	cmp	r3, #80	; 0x50
 80055fe:	d873      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005600:	2b40      	cmp	r3, #64	; 0x40
 8005602:	d058      	beq.n	80056b6 <HAL_TIM_ConfigClockSource+0x13a>
 8005604:	2b40      	cmp	r3, #64	; 0x40
 8005606:	d86f      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005608:	2b30      	cmp	r3, #48	; 0x30
 800560a:	d064      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x15a>
 800560c:	2b30      	cmp	r3, #48	; 0x30
 800560e:	d86b      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005610:	2b20      	cmp	r3, #32
 8005612:	d060      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x15a>
 8005614:	2b20      	cmp	r3, #32
 8005616:	d867      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005618:	2b00      	cmp	r3, #0
 800561a:	d05c      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x15a>
 800561c:	2b10      	cmp	r3, #16
 800561e:	d05a      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x15a>
 8005620:	e062      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6818      	ldr	r0, [r3, #0]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6899      	ldr	r1, [r3, #8]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f000 f965 	bl	8005900 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005644:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	609a      	str	r2, [r3, #8]
      break;
 800564e:	e04f      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6818      	ldr	r0, [r3, #0]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	6899      	ldr	r1, [r3, #8]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f000 f94e 	bl	8005900 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689a      	ldr	r2, [r3, #8]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005672:	609a      	str	r2, [r3, #8]
      break;
 8005674:	e03c      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	6859      	ldr	r1, [r3, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	461a      	mov	r2, r3
 8005684:	f000 f8c2 	bl	800580c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2150      	movs	r1, #80	; 0x50
 800568e:	4618      	mov	r0, r3
 8005690:	f000 f91b 	bl	80058ca <TIM_ITRx_SetConfig>
      break;
 8005694:	e02c      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6818      	ldr	r0, [r3, #0]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	6859      	ldr	r1, [r3, #4]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	461a      	mov	r2, r3
 80056a4:	f000 f8e1 	bl	800586a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2160      	movs	r1, #96	; 0x60
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 f90b 	bl	80058ca <TIM_ITRx_SetConfig>
      break;
 80056b4:	e01c      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	6859      	ldr	r1, [r3, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	461a      	mov	r2, r3
 80056c4:	f000 f8a2 	bl	800580c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2140      	movs	r1, #64	; 0x40
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 f8fb 	bl	80058ca <TIM_ITRx_SetConfig>
      break;
 80056d4:	e00c      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4619      	mov	r1, r3
 80056e0:	4610      	mov	r0, r2
 80056e2:	f000 f8f2 	bl	80058ca <TIM_ITRx_SetConfig>
      break;
 80056e6:	e003      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
      break;
 80056ec:	e000      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005700:	7bfb      	ldrb	r3, [r7, #15]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a34      	ldr	r2, [pc, #208]	; (80057f0 <TIM_Base_SetConfig+0xe4>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00f      	beq.n	8005744 <TIM_Base_SetConfig+0x38>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572a:	d00b      	beq.n	8005744 <TIM_Base_SetConfig+0x38>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a31      	ldr	r2, [pc, #196]	; (80057f4 <TIM_Base_SetConfig+0xe8>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d007      	beq.n	8005744 <TIM_Base_SetConfig+0x38>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a30      	ldr	r2, [pc, #192]	; (80057f8 <TIM_Base_SetConfig+0xec>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d003      	beq.n	8005744 <TIM_Base_SetConfig+0x38>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a2f      	ldr	r2, [pc, #188]	; (80057fc <TIM_Base_SetConfig+0xf0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d108      	bne.n	8005756 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a25      	ldr	r2, [pc, #148]	; (80057f0 <TIM_Base_SetConfig+0xe4>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d01b      	beq.n	8005796 <TIM_Base_SetConfig+0x8a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005764:	d017      	beq.n	8005796 <TIM_Base_SetConfig+0x8a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a22      	ldr	r2, [pc, #136]	; (80057f4 <TIM_Base_SetConfig+0xe8>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d013      	beq.n	8005796 <TIM_Base_SetConfig+0x8a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a21      	ldr	r2, [pc, #132]	; (80057f8 <TIM_Base_SetConfig+0xec>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00f      	beq.n	8005796 <TIM_Base_SetConfig+0x8a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a20      	ldr	r2, [pc, #128]	; (80057fc <TIM_Base_SetConfig+0xf0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00b      	beq.n	8005796 <TIM_Base_SetConfig+0x8a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a1f      	ldr	r2, [pc, #124]	; (8005800 <TIM_Base_SetConfig+0xf4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d007      	beq.n	8005796 <TIM_Base_SetConfig+0x8a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a1e      	ldr	r2, [pc, #120]	; (8005804 <TIM_Base_SetConfig+0xf8>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d003      	beq.n	8005796 <TIM_Base_SetConfig+0x8a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a1d      	ldr	r2, [pc, #116]	; (8005808 <TIM_Base_SetConfig+0xfc>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d108      	bne.n	80057a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800579c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a08      	ldr	r2, [pc, #32]	; (80057f0 <TIM_Base_SetConfig+0xe4>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d103      	bne.n	80057dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	691a      	ldr	r2, [r3, #16]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	615a      	str	r2, [r3, #20]
}
 80057e2:	bf00      	nop
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40010000 	.word	0x40010000
 80057f4:	40000400 	.word	0x40000400
 80057f8:	40000800 	.word	0x40000800
 80057fc:	40000c00 	.word	0x40000c00
 8005800:	40014000 	.word	0x40014000
 8005804:	40014400 	.word	0x40014400
 8005808:	40014800 	.word	0x40014800

0800580c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	f023 0201 	bic.w	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	4313      	orrs	r3, r2
 8005840:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f023 030a 	bic.w	r3, r3, #10
 8005848:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	621a      	str	r2, [r3, #32]
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800586a:	b480      	push	{r7}
 800586c:	b087      	sub	sp, #28
 800586e:	af00      	add	r7, sp, #0
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f023 0210 	bic.w	r2, r3, #16
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005894:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	031b      	lsls	r3, r3, #12
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4313      	orrs	r3, r2
 800589e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	621a      	str	r2, [r3, #32]
}
 80058be:	bf00      	nop
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b085      	sub	sp, #20
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	f043 0307 	orr.w	r3, r3, #7
 80058ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	609a      	str	r2, [r3, #8]
}
 80058f4:	bf00      	nop
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800591a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	021a      	lsls	r2, r3, #8
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	431a      	orrs	r2, r3
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4313      	orrs	r3, r2
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	4313      	orrs	r3, r2
 800592c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	609a      	str	r2, [r3, #8]
}
 8005934:	bf00      	nop
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005950:	2b01      	cmp	r3, #1
 8005952:	d101      	bne.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005954:	2302      	movs	r3, #2
 8005956:	e050      	b.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1c      	ldr	r2, [pc, #112]	; (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d018      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a4:	d013      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a18      	ldr	r2, [pc, #96]	; (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00e      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a16      	ldr	r2, [pc, #88]	; (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d009      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a15      	ldr	r2, [pc, #84]	; (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d004      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a13      	ldr	r2, [pc, #76]	; (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d10c      	bne.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	40010000 	.word	0x40010000
 8005a0c:	40000400 	.word	0x40000400
 8005a10:	40000800 	.word	0x40000800
 8005a14:	40000c00 	.word	0x40000c00
 8005a18:	40014000 	.word	0x40014000

08005a1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e03f      	b.n	8005aae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d106      	bne.n	8005a48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7fd f800 	bl	8002a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2224      	movs	r2, #36	; 0x24
 8005a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68da      	ldr	r2, [r3, #12]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f929 	bl	8005cb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695a      	ldr	r2, [r3, #20]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b08a      	sub	sp, #40	; 0x28
 8005aba:	af02      	add	r7, sp, #8
 8005abc:	60f8      	str	r0, [r7, #12]
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	603b      	str	r3, [r7, #0]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b20      	cmp	r3, #32
 8005ad4:	d17c      	bne.n	8005bd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <HAL_UART_Transmit+0x2c>
 8005adc:	88fb      	ldrh	r3, [r7, #6]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e075      	b.n	8005bd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <HAL_UART_Transmit+0x3e>
 8005af0:	2302      	movs	r3, #2
 8005af2:	e06e      	b.n	8005bd2 <HAL_UART_Transmit+0x11c>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2221      	movs	r2, #33	; 0x21
 8005b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b0a:	f7fd f9ab 	bl	8002e64 <HAL_GetTick>
 8005b0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	88fa      	ldrh	r2, [r7, #6]
 8005b14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	88fa      	ldrh	r2, [r7, #6]
 8005b1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b24:	d108      	bne.n	8005b38 <HAL_UART_Transmit+0x82>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d104      	bne.n	8005b38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	e003      	b.n	8005b40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b48:	e02a      	b.n	8005ba0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2200      	movs	r2, #0
 8005b52:	2180      	movs	r1, #128	; 0x80
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 f840 	bl	8005bda <UART_WaitOnFlagUntilTimeout>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e036      	b.n	8005bd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10b      	bne.n	8005b82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	3302      	adds	r3, #2
 8005b7e:	61bb      	str	r3, [r7, #24]
 8005b80:	e007      	b.n	8005b92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	781a      	ldrb	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1cf      	bne.n	8005b4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2140      	movs	r1, #64	; 0x40
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 f810 	bl	8005bda <UART_WaitOnFlagUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e006      	b.n	8005bd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	e000      	b.n	8005bd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005bd0:	2302      	movs	r3, #2
  }
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3720      	adds	r7, #32
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b090      	sub	sp, #64	; 0x40
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	603b      	str	r3, [r7, #0]
 8005be6:	4613      	mov	r3, r2
 8005be8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bea:	e050      	b.n	8005c8e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf2:	d04c      	beq.n	8005c8e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d007      	beq.n	8005c0a <UART_WaitOnFlagUntilTimeout+0x30>
 8005bfa:	f7fd f933 	bl	8002e64 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d241      	bcs.n	8005c8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	330c      	adds	r3, #12
 8005c10:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c14:	e853 3f00 	ldrex	r3, [r3]
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	330c      	adds	r3, #12
 8005c28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c2a:	637a      	str	r2, [r7, #52]	; 0x34
 8005c2c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c32:	e841 2300 	strex	r3, r2, [r1]
 8005c36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1e5      	bne.n	8005c0a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3314      	adds	r3, #20
 8005c44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	e853 3f00 	ldrex	r3, [r3]
 8005c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f023 0301 	bic.w	r3, r3, #1
 8005c54:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3314      	adds	r3, #20
 8005c5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c5e:	623a      	str	r2, [r7, #32]
 8005c60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c62:	69f9      	ldr	r1, [r7, #28]
 8005c64:	6a3a      	ldr	r2, [r7, #32]
 8005c66:	e841 2300 	strex	r3, r2, [r1]
 8005c6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1e5      	bne.n	8005c3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e00f      	b.n	8005cae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	4013      	ands	r3, r2
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	bf0c      	ite	eq
 8005c9e:	2301      	moveq	r3, #1
 8005ca0:	2300      	movne	r3, #0
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	79fb      	ldrb	r3, [r7, #7]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d09f      	beq.n	8005bec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3740      	adds	r7, #64	; 0x40
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cbc:	b0c0      	sub	sp, #256	; 0x100
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd4:	68d9      	ldr	r1, [r3, #12]
 8005cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	ea40 0301 	orr.w	r3, r0, r1
 8005ce0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d10:	f021 010c 	bic.w	r1, r1, #12
 8005d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d32:	6999      	ldr	r1, [r3, #24]
 8005d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	ea40 0301 	orr.w	r3, r0, r1
 8005d3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	4b8f      	ldr	r3, [pc, #572]	; (8005f84 <UART_SetConfig+0x2cc>)
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d005      	beq.n	8005d58 <UART_SetConfig+0xa0>
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	4b8d      	ldr	r3, [pc, #564]	; (8005f88 <UART_SetConfig+0x2d0>)
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d104      	bne.n	8005d62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d58:	f7ff fb52 	bl	8005400 <HAL_RCC_GetPCLK2Freq>
 8005d5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005d60:	e003      	b.n	8005d6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d62:	f7ff fb39 	bl	80053d8 <HAL_RCC_GetPCLK1Freq>
 8005d66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d74:	f040 810c 	bne.w	8005f90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005d86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005d8a:	4622      	mov	r2, r4
 8005d8c:	462b      	mov	r3, r5
 8005d8e:	1891      	adds	r1, r2, r2
 8005d90:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d92:	415b      	adcs	r3, r3
 8005d94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	eb12 0801 	adds.w	r8, r2, r1
 8005da0:	4629      	mov	r1, r5
 8005da2:	eb43 0901 	adc.w	r9, r3, r1
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	f04f 0300 	mov.w	r3, #0
 8005dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dba:	4690      	mov	r8, r2
 8005dbc:	4699      	mov	r9, r3
 8005dbe:	4623      	mov	r3, r4
 8005dc0:	eb18 0303 	adds.w	r3, r8, r3
 8005dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005dc8:	462b      	mov	r3, r5
 8005dca:	eb49 0303 	adc.w	r3, r9, r3
 8005dce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dde:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005de2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005de6:	460b      	mov	r3, r1
 8005de8:	18db      	adds	r3, r3, r3
 8005dea:	653b      	str	r3, [r7, #80]	; 0x50
 8005dec:	4613      	mov	r3, r2
 8005dee:	eb42 0303 	adc.w	r3, r2, r3
 8005df2:	657b      	str	r3, [r7, #84]	; 0x54
 8005df4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005df8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005dfc:	f7fa ff2c 	bl	8000c58 <__aeabi_uldivmod>
 8005e00:	4602      	mov	r2, r0
 8005e02:	460b      	mov	r3, r1
 8005e04:	4b61      	ldr	r3, [pc, #388]	; (8005f8c <UART_SetConfig+0x2d4>)
 8005e06:	fba3 2302 	umull	r2, r3, r3, r2
 8005e0a:	095b      	lsrs	r3, r3, #5
 8005e0c:	011c      	lsls	r4, r3, #4
 8005e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e12:	2200      	movs	r2, #0
 8005e14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e20:	4642      	mov	r2, r8
 8005e22:	464b      	mov	r3, r9
 8005e24:	1891      	adds	r1, r2, r2
 8005e26:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e28:	415b      	adcs	r3, r3
 8005e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e30:	4641      	mov	r1, r8
 8005e32:	eb12 0a01 	adds.w	sl, r2, r1
 8005e36:	4649      	mov	r1, r9
 8005e38:	eb43 0b01 	adc.w	fp, r3, r1
 8005e3c:	f04f 0200 	mov.w	r2, #0
 8005e40:	f04f 0300 	mov.w	r3, #0
 8005e44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e50:	4692      	mov	sl, r2
 8005e52:	469b      	mov	fp, r3
 8005e54:	4643      	mov	r3, r8
 8005e56:	eb1a 0303 	adds.w	r3, sl, r3
 8005e5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e5e:	464b      	mov	r3, r9
 8005e60:	eb4b 0303 	adc.w	r3, fp, r3
 8005e64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005e78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	18db      	adds	r3, r3, r3
 8005e80:	643b      	str	r3, [r7, #64]	; 0x40
 8005e82:	4613      	mov	r3, r2
 8005e84:	eb42 0303 	adc.w	r3, r2, r3
 8005e88:	647b      	str	r3, [r7, #68]	; 0x44
 8005e8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005e92:	f7fa fee1 	bl	8000c58 <__aeabi_uldivmod>
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4611      	mov	r1, r2
 8005e9c:	4b3b      	ldr	r3, [pc, #236]	; (8005f8c <UART_SetConfig+0x2d4>)
 8005e9e:	fba3 2301 	umull	r2, r3, r3, r1
 8005ea2:	095b      	lsrs	r3, r3, #5
 8005ea4:	2264      	movs	r2, #100	; 0x64
 8005ea6:	fb02 f303 	mul.w	r3, r2, r3
 8005eaa:	1acb      	subs	r3, r1, r3
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005eb2:	4b36      	ldr	r3, [pc, #216]	; (8005f8c <UART_SetConfig+0x2d4>)
 8005eb4:	fba3 2302 	umull	r2, r3, r3, r2
 8005eb8:	095b      	lsrs	r3, r3, #5
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ec0:	441c      	add	r4, r3
 8005ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ecc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ed0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ed4:	4642      	mov	r2, r8
 8005ed6:	464b      	mov	r3, r9
 8005ed8:	1891      	adds	r1, r2, r2
 8005eda:	63b9      	str	r1, [r7, #56]	; 0x38
 8005edc:	415b      	adcs	r3, r3
 8005ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ee0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ee4:	4641      	mov	r1, r8
 8005ee6:	1851      	adds	r1, r2, r1
 8005ee8:	6339      	str	r1, [r7, #48]	; 0x30
 8005eea:	4649      	mov	r1, r9
 8005eec:	414b      	adcs	r3, r1
 8005eee:	637b      	str	r3, [r7, #52]	; 0x34
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	f04f 0300 	mov.w	r3, #0
 8005ef8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005efc:	4659      	mov	r1, fp
 8005efe:	00cb      	lsls	r3, r1, #3
 8005f00:	4651      	mov	r1, sl
 8005f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f06:	4651      	mov	r1, sl
 8005f08:	00ca      	lsls	r2, r1, #3
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4603      	mov	r3, r0
 8005f10:	4642      	mov	r2, r8
 8005f12:	189b      	adds	r3, r3, r2
 8005f14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f18:	464b      	mov	r3, r9
 8005f1a:	460a      	mov	r2, r1
 8005f1c:	eb42 0303 	adc.w	r3, r2, r3
 8005f20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f38:	460b      	mov	r3, r1
 8005f3a:	18db      	adds	r3, r3, r3
 8005f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f3e:	4613      	mov	r3, r2
 8005f40:	eb42 0303 	adc.w	r3, r2, r3
 8005f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f4e:	f7fa fe83 	bl	8000c58 <__aeabi_uldivmod>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	4b0d      	ldr	r3, [pc, #52]	; (8005f8c <UART_SetConfig+0x2d4>)
 8005f58:	fba3 1302 	umull	r1, r3, r3, r2
 8005f5c:	095b      	lsrs	r3, r3, #5
 8005f5e:	2164      	movs	r1, #100	; 0x64
 8005f60:	fb01 f303 	mul.w	r3, r1, r3
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	3332      	adds	r3, #50	; 0x32
 8005f6a:	4a08      	ldr	r2, [pc, #32]	; (8005f8c <UART_SetConfig+0x2d4>)
 8005f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f70:	095b      	lsrs	r3, r3, #5
 8005f72:	f003 0207 	and.w	r2, r3, #7
 8005f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4422      	add	r2, r4
 8005f7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f80:	e106      	b.n	8006190 <UART_SetConfig+0x4d8>
 8005f82:	bf00      	nop
 8005f84:	40011000 	.word	0x40011000
 8005f88:	40011400 	.word	0x40011400
 8005f8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f94:	2200      	movs	r2, #0
 8005f96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005fa2:	4642      	mov	r2, r8
 8005fa4:	464b      	mov	r3, r9
 8005fa6:	1891      	adds	r1, r2, r2
 8005fa8:	6239      	str	r1, [r7, #32]
 8005faa:	415b      	adcs	r3, r3
 8005fac:	627b      	str	r3, [r7, #36]	; 0x24
 8005fae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fb2:	4641      	mov	r1, r8
 8005fb4:	1854      	adds	r4, r2, r1
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	eb43 0501 	adc.w	r5, r3, r1
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	f04f 0300 	mov.w	r3, #0
 8005fc4:	00eb      	lsls	r3, r5, #3
 8005fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fca:	00e2      	lsls	r2, r4, #3
 8005fcc:	4614      	mov	r4, r2
 8005fce:	461d      	mov	r5, r3
 8005fd0:	4643      	mov	r3, r8
 8005fd2:	18e3      	adds	r3, r4, r3
 8005fd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005fd8:	464b      	mov	r3, r9
 8005fda:	eb45 0303 	adc.w	r3, r5, r3
 8005fde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ff2:	f04f 0200 	mov.w	r2, #0
 8005ff6:	f04f 0300 	mov.w	r3, #0
 8005ffa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ffe:	4629      	mov	r1, r5
 8006000:	008b      	lsls	r3, r1, #2
 8006002:	4621      	mov	r1, r4
 8006004:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006008:	4621      	mov	r1, r4
 800600a:	008a      	lsls	r2, r1, #2
 800600c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006010:	f7fa fe22 	bl	8000c58 <__aeabi_uldivmod>
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	4b60      	ldr	r3, [pc, #384]	; (800619c <UART_SetConfig+0x4e4>)
 800601a:	fba3 2302 	umull	r2, r3, r3, r2
 800601e:	095b      	lsrs	r3, r3, #5
 8006020:	011c      	lsls	r4, r3, #4
 8006022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006026:	2200      	movs	r2, #0
 8006028:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800602c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006030:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006034:	4642      	mov	r2, r8
 8006036:	464b      	mov	r3, r9
 8006038:	1891      	adds	r1, r2, r2
 800603a:	61b9      	str	r1, [r7, #24]
 800603c:	415b      	adcs	r3, r3
 800603e:	61fb      	str	r3, [r7, #28]
 8006040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006044:	4641      	mov	r1, r8
 8006046:	1851      	adds	r1, r2, r1
 8006048:	6139      	str	r1, [r7, #16]
 800604a:	4649      	mov	r1, r9
 800604c:	414b      	adcs	r3, r1
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	f04f 0200 	mov.w	r2, #0
 8006054:	f04f 0300 	mov.w	r3, #0
 8006058:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800605c:	4659      	mov	r1, fp
 800605e:	00cb      	lsls	r3, r1, #3
 8006060:	4651      	mov	r1, sl
 8006062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006066:	4651      	mov	r1, sl
 8006068:	00ca      	lsls	r2, r1, #3
 800606a:	4610      	mov	r0, r2
 800606c:	4619      	mov	r1, r3
 800606e:	4603      	mov	r3, r0
 8006070:	4642      	mov	r2, r8
 8006072:	189b      	adds	r3, r3, r2
 8006074:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006078:	464b      	mov	r3, r9
 800607a:	460a      	mov	r2, r1
 800607c:	eb42 0303 	adc.w	r3, r2, r3
 8006080:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	67bb      	str	r3, [r7, #120]	; 0x78
 800608e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	f04f 0300 	mov.w	r3, #0
 8006098:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800609c:	4649      	mov	r1, r9
 800609e:	008b      	lsls	r3, r1, #2
 80060a0:	4641      	mov	r1, r8
 80060a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060a6:	4641      	mov	r1, r8
 80060a8:	008a      	lsls	r2, r1, #2
 80060aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80060ae:	f7fa fdd3 	bl	8000c58 <__aeabi_uldivmod>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	4611      	mov	r1, r2
 80060b8:	4b38      	ldr	r3, [pc, #224]	; (800619c <UART_SetConfig+0x4e4>)
 80060ba:	fba3 2301 	umull	r2, r3, r3, r1
 80060be:	095b      	lsrs	r3, r3, #5
 80060c0:	2264      	movs	r2, #100	; 0x64
 80060c2:	fb02 f303 	mul.w	r3, r2, r3
 80060c6:	1acb      	subs	r3, r1, r3
 80060c8:	011b      	lsls	r3, r3, #4
 80060ca:	3332      	adds	r3, #50	; 0x32
 80060cc:	4a33      	ldr	r2, [pc, #204]	; (800619c <UART_SetConfig+0x4e4>)
 80060ce:	fba2 2303 	umull	r2, r3, r2, r3
 80060d2:	095b      	lsrs	r3, r3, #5
 80060d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060d8:	441c      	add	r4, r3
 80060da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060de:	2200      	movs	r2, #0
 80060e0:	673b      	str	r3, [r7, #112]	; 0x70
 80060e2:	677a      	str	r2, [r7, #116]	; 0x74
 80060e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80060e8:	4642      	mov	r2, r8
 80060ea:	464b      	mov	r3, r9
 80060ec:	1891      	adds	r1, r2, r2
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	415b      	adcs	r3, r3
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060f8:	4641      	mov	r1, r8
 80060fa:	1851      	adds	r1, r2, r1
 80060fc:	6039      	str	r1, [r7, #0]
 80060fe:	4649      	mov	r1, r9
 8006100:	414b      	adcs	r3, r1
 8006102:	607b      	str	r3, [r7, #4]
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006110:	4659      	mov	r1, fp
 8006112:	00cb      	lsls	r3, r1, #3
 8006114:	4651      	mov	r1, sl
 8006116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800611a:	4651      	mov	r1, sl
 800611c:	00ca      	lsls	r2, r1, #3
 800611e:	4610      	mov	r0, r2
 8006120:	4619      	mov	r1, r3
 8006122:	4603      	mov	r3, r0
 8006124:	4642      	mov	r2, r8
 8006126:	189b      	adds	r3, r3, r2
 8006128:	66bb      	str	r3, [r7, #104]	; 0x68
 800612a:	464b      	mov	r3, r9
 800612c:	460a      	mov	r2, r1
 800612e:	eb42 0303 	adc.w	r3, r2, r3
 8006132:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	663b      	str	r3, [r7, #96]	; 0x60
 800613e:	667a      	str	r2, [r7, #100]	; 0x64
 8006140:	f04f 0200 	mov.w	r2, #0
 8006144:	f04f 0300 	mov.w	r3, #0
 8006148:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800614c:	4649      	mov	r1, r9
 800614e:	008b      	lsls	r3, r1, #2
 8006150:	4641      	mov	r1, r8
 8006152:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006156:	4641      	mov	r1, r8
 8006158:	008a      	lsls	r2, r1, #2
 800615a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800615e:	f7fa fd7b 	bl	8000c58 <__aeabi_uldivmod>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4b0d      	ldr	r3, [pc, #52]	; (800619c <UART_SetConfig+0x4e4>)
 8006168:	fba3 1302 	umull	r1, r3, r3, r2
 800616c:	095b      	lsrs	r3, r3, #5
 800616e:	2164      	movs	r1, #100	; 0x64
 8006170:	fb01 f303 	mul.w	r3, r1, r3
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	3332      	adds	r3, #50	; 0x32
 800617a:	4a08      	ldr	r2, [pc, #32]	; (800619c <UART_SetConfig+0x4e4>)
 800617c:	fba2 2303 	umull	r2, r3, r2, r3
 8006180:	095b      	lsrs	r3, r3, #5
 8006182:	f003 020f 	and.w	r2, r3, #15
 8006186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4422      	add	r2, r4
 800618e:	609a      	str	r2, [r3, #8]
}
 8006190:	bf00      	nop
 8006192:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006196:	46bd      	mov	sp, r7
 8006198:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800619c:	51eb851f 	.word	0x51eb851f

080061a0 <atoi>:
 80061a0:	220a      	movs	r2, #10
 80061a2:	2100      	movs	r1, #0
 80061a4:	f000 b93e 	b.w	8006424 <strtol>

080061a8 <malloc>:
 80061a8:	4b02      	ldr	r3, [pc, #8]	; (80061b4 <malloc+0xc>)
 80061aa:	4601      	mov	r1, r0
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	f000 b82b 	b.w	8006208 <_malloc_r>
 80061b2:	bf00      	nop
 80061b4:	20000078 	.word	0x20000078

080061b8 <free>:
 80061b8:	4b02      	ldr	r3, [pc, #8]	; (80061c4 <free+0xc>)
 80061ba:	4601      	mov	r1, r0
 80061bc:	6818      	ldr	r0, [r3, #0]
 80061be:	f001 be51 	b.w	8007e64 <_free_r>
 80061c2:	bf00      	nop
 80061c4:	20000078 	.word	0x20000078

080061c8 <sbrk_aligned>:
 80061c8:	b570      	push	{r4, r5, r6, lr}
 80061ca:	4e0e      	ldr	r6, [pc, #56]	; (8006204 <sbrk_aligned+0x3c>)
 80061cc:	460c      	mov	r4, r1
 80061ce:	6831      	ldr	r1, [r6, #0]
 80061d0:	4605      	mov	r5, r0
 80061d2:	b911      	cbnz	r1, 80061da <sbrk_aligned+0x12>
 80061d4:	f000 ff58 	bl	8007088 <_sbrk_r>
 80061d8:	6030      	str	r0, [r6, #0]
 80061da:	4621      	mov	r1, r4
 80061dc:	4628      	mov	r0, r5
 80061de:	f000 ff53 	bl	8007088 <_sbrk_r>
 80061e2:	1c43      	adds	r3, r0, #1
 80061e4:	d00a      	beq.n	80061fc <sbrk_aligned+0x34>
 80061e6:	1cc4      	adds	r4, r0, #3
 80061e8:	f024 0403 	bic.w	r4, r4, #3
 80061ec:	42a0      	cmp	r0, r4
 80061ee:	d007      	beq.n	8006200 <sbrk_aligned+0x38>
 80061f0:	1a21      	subs	r1, r4, r0
 80061f2:	4628      	mov	r0, r5
 80061f4:	f000 ff48 	bl	8007088 <_sbrk_r>
 80061f8:	3001      	adds	r0, #1
 80061fa:	d101      	bne.n	8006200 <sbrk_aligned+0x38>
 80061fc:	f04f 34ff 	mov.w	r4, #4294967295
 8006200:	4620      	mov	r0, r4
 8006202:	bd70      	pop	{r4, r5, r6, pc}
 8006204:	2000038c 	.word	0x2000038c

08006208 <_malloc_r>:
 8006208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800620c:	1ccd      	adds	r5, r1, #3
 800620e:	f025 0503 	bic.w	r5, r5, #3
 8006212:	3508      	adds	r5, #8
 8006214:	2d0c      	cmp	r5, #12
 8006216:	bf38      	it	cc
 8006218:	250c      	movcc	r5, #12
 800621a:	2d00      	cmp	r5, #0
 800621c:	4607      	mov	r7, r0
 800621e:	db01      	blt.n	8006224 <_malloc_r+0x1c>
 8006220:	42a9      	cmp	r1, r5
 8006222:	d905      	bls.n	8006230 <_malloc_r+0x28>
 8006224:	230c      	movs	r3, #12
 8006226:	603b      	str	r3, [r7, #0]
 8006228:	2600      	movs	r6, #0
 800622a:	4630      	mov	r0, r6
 800622c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006230:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006304 <_malloc_r+0xfc>
 8006234:	f000 f868 	bl	8006308 <__malloc_lock>
 8006238:	f8d8 3000 	ldr.w	r3, [r8]
 800623c:	461c      	mov	r4, r3
 800623e:	bb5c      	cbnz	r4, 8006298 <_malloc_r+0x90>
 8006240:	4629      	mov	r1, r5
 8006242:	4638      	mov	r0, r7
 8006244:	f7ff ffc0 	bl	80061c8 <sbrk_aligned>
 8006248:	1c43      	adds	r3, r0, #1
 800624a:	4604      	mov	r4, r0
 800624c:	d155      	bne.n	80062fa <_malloc_r+0xf2>
 800624e:	f8d8 4000 	ldr.w	r4, [r8]
 8006252:	4626      	mov	r6, r4
 8006254:	2e00      	cmp	r6, #0
 8006256:	d145      	bne.n	80062e4 <_malloc_r+0xdc>
 8006258:	2c00      	cmp	r4, #0
 800625a:	d048      	beq.n	80062ee <_malloc_r+0xe6>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	4631      	mov	r1, r6
 8006260:	4638      	mov	r0, r7
 8006262:	eb04 0903 	add.w	r9, r4, r3
 8006266:	f000 ff0f 	bl	8007088 <_sbrk_r>
 800626a:	4581      	cmp	r9, r0
 800626c:	d13f      	bne.n	80062ee <_malloc_r+0xe6>
 800626e:	6821      	ldr	r1, [r4, #0]
 8006270:	1a6d      	subs	r5, r5, r1
 8006272:	4629      	mov	r1, r5
 8006274:	4638      	mov	r0, r7
 8006276:	f7ff ffa7 	bl	80061c8 <sbrk_aligned>
 800627a:	3001      	adds	r0, #1
 800627c:	d037      	beq.n	80062ee <_malloc_r+0xe6>
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	442b      	add	r3, r5
 8006282:	6023      	str	r3, [r4, #0]
 8006284:	f8d8 3000 	ldr.w	r3, [r8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d038      	beq.n	80062fe <_malloc_r+0xf6>
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	42a2      	cmp	r2, r4
 8006290:	d12b      	bne.n	80062ea <_malloc_r+0xe2>
 8006292:	2200      	movs	r2, #0
 8006294:	605a      	str	r2, [r3, #4]
 8006296:	e00f      	b.n	80062b8 <_malloc_r+0xb0>
 8006298:	6822      	ldr	r2, [r4, #0]
 800629a:	1b52      	subs	r2, r2, r5
 800629c:	d41f      	bmi.n	80062de <_malloc_r+0xd6>
 800629e:	2a0b      	cmp	r2, #11
 80062a0:	d917      	bls.n	80062d2 <_malloc_r+0xca>
 80062a2:	1961      	adds	r1, r4, r5
 80062a4:	42a3      	cmp	r3, r4
 80062a6:	6025      	str	r5, [r4, #0]
 80062a8:	bf18      	it	ne
 80062aa:	6059      	strne	r1, [r3, #4]
 80062ac:	6863      	ldr	r3, [r4, #4]
 80062ae:	bf08      	it	eq
 80062b0:	f8c8 1000 	streq.w	r1, [r8]
 80062b4:	5162      	str	r2, [r4, r5]
 80062b6:	604b      	str	r3, [r1, #4]
 80062b8:	4638      	mov	r0, r7
 80062ba:	f104 060b 	add.w	r6, r4, #11
 80062be:	f000 f829 	bl	8006314 <__malloc_unlock>
 80062c2:	f026 0607 	bic.w	r6, r6, #7
 80062c6:	1d23      	adds	r3, r4, #4
 80062c8:	1af2      	subs	r2, r6, r3
 80062ca:	d0ae      	beq.n	800622a <_malloc_r+0x22>
 80062cc:	1b9b      	subs	r3, r3, r6
 80062ce:	50a3      	str	r3, [r4, r2]
 80062d0:	e7ab      	b.n	800622a <_malloc_r+0x22>
 80062d2:	42a3      	cmp	r3, r4
 80062d4:	6862      	ldr	r2, [r4, #4]
 80062d6:	d1dd      	bne.n	8006294 <_malloc_r+0x8c>
 80062d8:	f8c8 2000 	str.w	r2, [r8]
 80062dc:	e7ec      	b.n	80062b8 <_malloc_r+0xb0>
 80062de:	4623      	mov	r3, r4
 80062e0:	6864      	ldr	r4, [r4, #4]
 80062e2:	e7ac      	b.n	800623e <_malloc_r+0x36>
 80062e4:	4634      	mov	r4, r6
 80062e6:	6876      	ldr	r6, [r6, #4]
 80062e8:	e7b4      	b.n	8006254 <_malloc_r+0x4c>
 80062ea:	4613      	mov	r3, r2
 80062ec:	e7cc      	b.n	8006288 <_malloc_r+0x80>
 80062ee:	230c      	movs	r3, #12
 80062f0:	603b      	str	r3, [r7, #0]
 80062f2:	4638      	mov	r0, r7
 80062f4:	f000 f80e 	bl	8006314 <__malloc_unlock>
 80062f8:	e797      	b.n	800622a <_malloc_r+0x22>
 80062fa:	6025      	str	r5, [r4, #0]
 80062fc:	e7dc      	b.n	80062b8 <_malloc_r+0xb0>
 80062fe:	605b      	str	r3, [r3, #4]
 8006300:	deff      	udf	#255	; 0xff
 8006302:	bf00      	nop
 8006304:	20000388 	.word	0x20000388

08006308 <__malloc_lock>:
 8006308:	4801      	ldr	r0, [pc, #4]	; (8006310 <__malloc_lock+0x8>)
 800630a:	f000 bf09 	b.w	8007120 <__retarget_lock_acquire_recursive>
 800630e:	bf00      	nop
 8006310:	200004d0 	.word	0x200004d0

08006314 <__malloc_unlock>:
 8006314:	4801      	ldr	r0, [pc, #4]	; (800631c <__malloc_unlock+0x8>)
 8006316:	f000 bf04 	b.w	8007122 <__retarget_lock_release_recursive>
 800631a:	bf00      	nop
 800631c:	200004d0 	.word	0x200004d0

08006320 <_strtol_l.constprop.0>:
 8006320:	2b01      	cmp	r3, #1
 8006322:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006326:	d001      	beq.n	800632c <_strtol_l.constprop.0+0xc>
 8006328:	2b24      	cmp	r3, #36	; 0x24
 800632a:	d906      	bls.n	800633a <_strtol_l.constprop.0+0x1a>
 800632c:	f000 fece 	bl	80070cc <__errno>
 8006330:	2316      	movs	r3, #22
 8006332:	6003      	str	r3, [r0, #0]
 8006334:	2000      	movs	r0, #0
 8006336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800633a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006420 <_strtol_l.constprop.0+0x100>
 800633e:	460d      	mov	r5, r1
 8006340:	462e      	mov	r6, r5
 8006342:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006346:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800634a:	f017 0708 	ands.w	r7, r7, #8
 800634e:	d1f7      	bne.n	8006340 <_strtol_l.constprop.0+0x20>
 8006350:	2c2d      	cmp	r4, #45	; 0x2d
 8006352:	d132      	bne.n	80063ba <_strtol_l.constprop.0+0x9a>
 8006354:	782c      	ldrb	r4, [r5, #0]
 8006356:	2701      	movs	r7, #1
 8006358:	1cb5      	adds	r5, r6, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d05b      	beq.n	8006416 <_strtol_l.constprop.0+0xf6>
 800635e:	2b10      	cmp	r3, #16
 8006360:	d109      	bne.n	8006376 <_strtol_l.constprop.0+0x56>
 8006362:	2c30      	cmp	r4, #48	; 0x30
 8006364:	d107      	bne.n	8006376 <_strtol_l.constprop.0+0x56>
 8006366:	782c      	ldrb	r4, [r5, #0]
 8006368:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800636c:	2c58      	cmp	r4, #88	; 0x58
 800636e:	d14d      	bne.n	800640c <_strtol_l.constprop.0+0xec>
 8006370:	786c      	ldrb	r4, [r5, #1]
 8006372:	2310      	movs	r3, #16
 8006374:	3502      	adds	r5, #2
 8006376:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800637a:	f108 38ff 	add.w	r8, r8, #4294967295
 800637e:	f04f 0e00 	mov.w	lr, #0
 8006382:	fbb8 f9f3 	udiv	r9, r8, r3
 8006386:	4676      	mov	r6, lr
 8006388:	fb03 8a19 	mls	sl, r3, r9, r8
 800638c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006390:	f1bc 0f09 	cmp.w	ip, #9
 8006394:	d816      	bhi.n	80063c4 <_strtol_l.constprop.0+0xa4>
 8006396:	4664      	mov	r4, ip
 8006398:	42a3      	cmp	r3, r4
 800639a:	dd24      	ble.n	80063e6 <_strtol_l.constprop.0+0xc6>
 800639c:	f1be 3fff 	cmp.w	lr, #4294967295
 80063a0:	d008      	beq.n	80063b4 <_strtol_l.constprop.0+0x94>
 80063a2:	45b1      	cmp	r9, r6
 80063a4:	d31c      	bcc.n	80063e0 <_strtol_l.constprop.0+0xc0>
 80063a6:	d101      	bne.n	80063ac <_strtol_l.constprop.0+0x8c>
 80063a8:	45a2      	cmp	sl, r4
 80063aa:	db19      	blt.n	80063e0 <_strtol_l.constprop.0+0xc0>
 80063ac:	fb06 4603 	mla	r6, r6, r3, r4
 80063b0:	f04f 0e01 	mov.w	lr, #1
 80063b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063b8:	e7e8      	b.n	800638c <_strtol_l.constprop.0+0x6c>
 80063ba:	2c2b      	cmp	r4, #43	; 0x2b
 80063bc:	bf04      	itt	eq
 80063be:	782c      	ldrbeq	r4, [r5, #0]
 80063c0:	1cb5      	addeq	r5, r6, #2
 80063c2:	e7ca      	b.n	800635a <_strtol_l.constprop.0+0x3a>
 80063c4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80063c8:	f1bc 0f19 	cmp.w	ip, #25
 80063cc:	d801      	bhi.n	80063d2 <_strtol_l.constprop.0+0xb2>
 80063ce:	3c37      	subs	r4, #55	; 0x37
 80063d0:	e7e2      	b.n	8006398 <_strtol_l.constprop.0+0x78>
 80063d2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80063d6:	f1bc 0f19 	cmp.w	ip, #25
 80063da:	d804      	bhi.n	80063e6 <_strtol_l.constprop.0+0xc6>
 80063dc:	3c57      	subs	r4, #87	; 0x57
 80063de:	e7db      	b.n	8006398 <_strtol_l.constprop.0+0x78>
 80063e0:	f04f 3eff 	mov.w	lr, #4294967295
 80063e4:	e7e6      	b.n	80063b4 <_strtol_l.constprop.0+0x94>
 80063e6:	f1be 3fff 	cmp.w	lr, #4294967295
 80063ea:	d105      	bne.n	80063f8 <_strtol_l.constprop.0+0xd8>
 80063ec:	2322      	movs	r3, #34	; 0x22
 80063ee:	6003      	str	r3, [r0, #0]
 80063f0:	4646      	mov	r6, r8
 80063f2:	b942      	cbnz	r2, 8006406 <_strtol_l.constprop.0+0xe6>
 80063f4:	4630      	mov	r0, r6
 80063f6:	e79e      	b.n	8006336 <_strtol_l.constprop.0+0x16>
 80063f8:	b107      	cbz	r7, 80063fc <_strtol_l.constprop.0+0xdc>
 80063fa:	4276      	negs	r6, r6
 80063fc:	2a00      	cmp	r2, #0
 80063fe:	d0f9      	beq.n	80063f4 <_strtol_l.constprop.0+0xd4>
 8006400:	f1be 0f00 	cmp.w	lr, #0
 8006404:	d000      	beq.n	8006408 <_strtol_l.constprop.0+0xe8>
 8006406:	1e69      	subs	r1, r5, #1
 8006408:	6011      	str	r1, [r2, #0]
 800640a:	e7f3      	b.n	80063f4 <_strtol_l.constprop.0+0xd4>
 800640c:	2430      	movs	r4, #48	; 0x30
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1b1      	bne.n	8006376 <_strtol_l.constprop.0+0x56>
 8006412:	2308      	movs	r3, #8
 8006414:	e7af      	b.n	8006376 <_strtol_l.constprop.0+0x56>
 8006416:	2c30      	cmp	r4, #48	; 0x30
 8006418:	d0a5      	beq.n	8006366 <_strtol_l.constprop.0+0x46>
 800641a:	230a      	movs	r3, #10
 800641c:	e7ab      	b.n	8006376 <_strtol_l.constprop.0+0x56>
 800641e:	bf00      	nop
 8006420:	0800a595 	.word	0x0800a595

08006424 <strtol>:
 8006424:	4613      	mov	r3, r2
 8006426:	460a      	mov	r2, r1
 8006428:	4601      	mov	r1, r0
 800642a:	4802      	ldr	r0, [pc, #8]	; (8006434 <strtol+0x10>)
 800642c:	6800      	ldr	r0, [r0, #0]
 800642e:	f7ff bf77 	b.w	8006320 <_strtol_l.constprop.0>
 8006432:	bf00      	nop
 8006434:	20000078 	.word	0x20000078

08006438 <__cvt>:
 8006438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800643c:	ec55 4b10 	vmov	r4, r5, d0
 8006440:	2d00      	cmp	r5, #0
 8006442:	460e      	mov	r6, r1
 8006444:	4619      	mov	r1, r3
 8006446:	462b      	mov	r3, r5
 8006448:	bfbb      	ittet	lt
 800644a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800644e:	461d      	movlt	r5, r3
 8006450:	2300      	movge	r3, #0
 8006452:	232d      	movlt	r3, #45	; 0x2d
 8006454:	700b      	strb	r3, [r1, #0]
 8006456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006458:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800645c:	4691      	mov	r9, r2
 800645e:	f023 0820 	bic.w	r8, r3, #32
 8006462:	bfbc      	itt	lt
 8006464:	4622      	movlt	r2, r4
 8006466:	4614      	movlt	r4, r2
 8006468:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800646c:	d005      	beq.n	800647a <__cvt+0x42>
 800646e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006472:	d100      	bne.n	8006476 <__cvt+0x3e>
 8006474:	3601      	adds	r6, #1
 8006476:	2102      	movs	r1, #2
 8006478:	e000      	b.n	800647c <__cvt+0x44>
 800647a:	2103      	movs	r1, #3
 800647c:	ab03      	add	r3, sp, #12
 800647e:	9301      	str	r3, [sp, #4]
 8006480:	ab02      	add	r3, sp, #8
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	ec45 4b10 	vmov	d0, r4, r5
 8006488:	4653      	mov	r3, sl
 800648a:	4632      	mov	r2, r6
 800648c:	f000 fef8 	bl	8007280 <_dtoa_r>
 8006490:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006494:	4607      	mov	r7, r0
 8006496:	d102      	bne.n	800649e <__cvt+0x66>
 8006498:	f019 0f01 	tst.w	r9, #1
 800649c:	d022      	beq.n	80064e4 <__cvt+0xac>
 800649e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064a2:	eb07 0906 	add.w	r9, r7, r6
 80064a6:	d110      	bne.n	80064ca <__cvt+0x92>
 80064a8:	783b      	ldrb	r3, [r7, #0]
 80064aa:	2b30      	cmp	r3, #48	; 0x30
 80064ac:	d10a      	bne.n	80064c4 <__cvt+0x8c>
 80064ae:	2200      	movs	r2, #0
 80064b0:	2300      	movs	r3, #0
 80064b2:	4620      	mov	r0, r4
 80064b4:	4629      	mov	r1, r5
 80064b6:	f7fa fb0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80064ba:	b918      	cbnz	r0, 80064c4 <__cvt+0x8c>
 80064bc:	f1c6 0601 	rsb	r6, r6, #1
 80064c0:	f8ca 6000 	str.w	r6, [sl]
 80064c4:	f8da 3000 	ldr.w	r3, [sl]
 80064c8:	4499      	add	r9, r3
 80064ca:	2200      	movs	r2, #0
 80064cc:	2300      	movs	r3, #0
 80064ce:	4620      	mov	r0, r4
 80064d0:	4629      	mov	r1, r5
 80064d2:	f7fa fb01 	bl	8000ad8 <__aeabi_dcmpeq>
 80064d6:	b108      	cbz	r0, 80064dc <__cvt+0xa4>
 80064d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80064dc:	2230      	movs	r2, #48	; 0x30
 80064de:	9b03      	ldr	r3, [sp, #12]
 80064e0:	454b      	cmp	r3, r9
 80064e2:	d307      	bcc.n	80064f4 <__cvt+0xbc>
 80064e4:	9b03      	ldr	r3, [sp, #12]
 80064e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064e8:	1bdb      	subs	r3, r3, r7
 80064ea:	4638      	mov	r0, r7
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	b004      	add	sp, #16
 80064f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f4:	1c59      	adds	r1, r3, #1
 80064f6:	9103      	str	r1, [sp, #12]
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	e7f0      	b.n	80064de <__cvt+0xa6>

080064fc <__exponent>:
 80064fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064fe:	4603      	mov	r3, r0
 8006500:	2900      	cmp	r1, #0
 8006502:	bfb8      	it	lt
 8006504:	4249      	neglt	r1, r1
 8006506:	f803 2b02 	strb.w	r2, [r3], #2
 800650a:	bfb4      	ite	lt
 800650c:	222d      	movlt	r2, #45	; 0x2d
 800650e:	222b      	movge	r2, #43	; 0x2b
 8006510:	2909      	cmp	r1, #9
 8006512:	7042      	strb	r2, [r0, #1]
 8006514:	dd2a      	ble.n	800656c <__exponent+0x70>
 8006516:	f10d 0207 	add.w	r2, sp, #7
 800651a:	4617      	mov	r7, r2
 800651c:	260a      	movs	r6, #10
 800651e:	4694      	mov	ip, r2
 8006520:	fb91 f5f6 	sdiv	r5, r1, r6
 8006524:	fb06 1415 	mls	r4, r6, r5, r1
 8006528:	3430      	adds	r4, #48	; 0x30
 800652a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800652e:	460c      	mov	r4, r1
 8006530:	2c63      	cmp	r4, #99	; 0x63
 8006532:	f102 32ff 	add.w	r2, r2, #4294967295
 8006536:	4629      	mov	r1, r5
 8006538:	dcf1      	bgt.n	800651e <__exponent+0x22>
 800653a:	3130      	adds	r1, #48	; 0x30
 800653c:	f1ac 0402 	sub.w	r4, ip, #2
 8006540:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006544:	1c41      	adds	r1, r0, #1
 8006546:	4622      	mov	r2, r4
 8006548:	42ba      	cmp	r2, r7
 800654a:	d30a      	bcc.n	8006562 <__exponent+0x66>
 800654c:	f10d 0209 	add.w	r2, sp, #9
 8006550:	eba2 020c 	sub.w	r2, r2, ip
 8006554:	42bc      	cmp	r4, r7
 8006556:	bf88      	it	hi
 8006558:	2200      	movhi	r2, #0
 800655a:	4413      	add	r3, r2
 800655c:	1a18      	subs	r0, r3, r0
 800655e:	b003      	add	sp, #12
 8006560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006562:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006566:	f801 5f01 	strb.w	r5, [r1, #1]!
 800656a:	e7ed      	b.n	8006548 <__exponent+0x4c>
 800656c:	2330      	movs	r3, #48	; 0x30
 800656e:	3130      	adds	r1, #48	; 0x30
 8006570:	7083      	strb	r3, [r0, #2]
 8006572:	70c1      	strb	r1, [r0, #3]
 8006574:	1d03      	adds	r3, r0, #4
 8006576:	e7f1      	b.n	800655c <__exponent+0x60>

08006578 <_printf_float>:
 8006578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657c:	ed2d 8b02 	vpush	{d8}
 8006580:	b08d      	sub	sp, #52	; 0x34
 8006582:	460c      	mov	r4, r1
 8006584:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006588:	4616      	mov	r6, r2
 800658a:	461f      	mov	r7, r3
 800658c:	4605      	mov	r5, r0
 800658e:	f000 fd43 	bl	8007018 <_localeconv_r>
 8006592:	f8d0 a000 	ldr.w	sl, [r0]
 8006596:	4650      	mov	r0, sl
 8006598:	f7f9 fe72 	bl	8000280 <strlen>
 800659c:	2300      	movs	r3, #0
 800659e:	930a      	str	r3, [sp, #40]	; 0x28
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	9305      	str	r3, [sp, #20]
 80065a4:	f8d8 3000 	ldr.w	r3, [r8]
 80065a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80065ac:	3307      	adds	r3, #7
 80065ae:	f023 0307 	bic.w	r3, r3, #7
 80065b2:	f103 0208 	add.w	r2, r3, #8
 80065b6:	f8c8 2000 	str.w	r2, [r8]
 80065ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065c2:	9307      	str	r3, [sp, #28]
 80065c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80065c8:	ee08 0a10 	vmov	s16, r0
 80065cc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80065d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065d4:	4b9e      	ldr	r3, [pc, #632]	; (8006850 <_printf_float+0x2d8>)
 80065d6:	f04f 32ff 	mov.w	r2, #4294967295
 80065da:	f7fa faaf 	bl	8000b3c <__aeabi_dcmpun>
 80065de:	bb88      	cbnz	r0, 8006644 <_printf_float+0xcc>
 80065e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065e4:	4b9a      	ldr	r3, [pc, #616]	; (8006850 <_printf_float+0x2d8>)
 80065e6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ea:	f7fa fa89 	bl	8000b00 <__aeabi_dcmple>
 80065ee:	bb48      	cbnz	r0, 8006644 <_printf_float+0xcc>
 80065f0:	2200      	movs	r2, #0
 80065f2:	2300      	movs	r3, #0
 80065f4:	4640      	mov	r0, r8
 80065f6:	4649      	mov	r1, r9
 80065f8:	f7fa fa78 	bl	8000aec <__aeabi_dcmplt>
 80065fc:	b110      	cbz	r0, 8006604 <_printf_float+0x8c>
 80065fe:	232d      	movs	r3, #45	; 0x2d
 8006600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006604:	4a93      	ldr	r2, [pc, #588]	; (8006854 <_printf_float+0x2dc>)
 8006606:	4b94      	ldr	r3, [pc, #592]	; (8006858 <_printf_float+0x2e0>)
 8006608:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800660c:	bf94      	ite	ls
 800660e:	4690      	movls	r8, r2
 8006610:	4698      	movhi	r8, r3
 8006612:	2303      	movs	r3, #3
 8006614:	6123      	str	r3, [r4, #16]
 8006616:	9b05      	ldr	r3, [sp, #20]
 8006618:	f023 0304 	bic.w	r3, r3, #4
 800661c:	6023      	str	r3, [r4, #0]
 800661e:	f04f 0900 	mov.w	r9, #0
 8006622:	9700      	str	r7, [sp, #0]
 8006624:	4633      	mov	r3, r6
 8006626:	aa0b      	add	r2, sp, #44	; 0x2c
 8006628:	4621      	mov	r1, r4
 800662a:	4628      	mov	r0, r5
 800662c:	f000 f9da 	bl	80069e4 <_printf_common>
 8006630:	3001      	adds	r0, #1
 8006632:	f040 8090 	bne.w	8006756 <_printf_float+0x1de>
 8006636:	f04f 30ff 	mov.w	r0, #4294967295
 800663a:	b00d      	add	sp, #52	; 0x34
 800663c:	ecbd 8b02 	vpop	{d8}
 8006640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006644:	4642      	mov	r2, r8
 8006646:	464b      	mov	r3, r9
 8006648:	4640      	mov	r0, r8
 800664a:	4649      	mov	r1, r9
 800664c:	f7fa fa76 	bl	8000b3c <__aeabi_dcmpun>
 8006650:	b140      	cbz	r0, 8006664 <_printf_float+0xec>
 8006652:	464b      	mov	r3, r9
 8006654:	2b00      	cmp	r3, #0
 8006656:	bfbc      	itt	lt
 8006658:	232d      	movlt	r3, #45	; 0x2d
 800665a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800665e:	4a7f      	ldr	r2, [pc, #508]	; (800685c <_printf_float+0x2e4>)
 8006660:	4b7f      	ldr	r3, [pc, #508]	; (8006860 <_printf_float+0x2e8>)
 8006662:	e7d1      	b.n	8006608 <_printf_float+0x90>
 8006664:	6863      	ldr	r3, [r4, #4]
 8006666:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800666a:	9206      	str	r2, [sp, #24]
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	d13f      	bne.n	80066f0 <_printf_float+0x178>
 8006670:	2306      	movs	r3, #6
 8006672:	6063      	str	r3, [r4, #4]
 8006674:	9b05      	ldr	r3, [sp, #20]
 8006676:	6861      	ldr	r1, [r4, #4]
 8006678:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800667c:	2300      	movs	r3, #0
 800667e:	9303      	str	r3, [sp, #12]
 8006680:	ab0a      	add	r3, sp, #40	; 0x28
 8006682:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006686:	ab09      	add	r3, sp, #36	; 0x24
 8006688:	ec49 8b10 	vmov	d0, r8, r9
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	6022      	str	r2, [r4, #0]
 8006690:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006694:	4628      	mov	r0, r5
 8006696:	f7ff fecf 	bl	8006438 <__cvt>
 800669a:	9b06      	ldr	r3, [sp, #24]
 800669c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800669e:	2b47      	cmp	r3, #71	; 0x47
 80066a0:	4680      	mov	r8, r0
 80066a2:	d108      	bne.n	80066b6 <_printf_float+0x13e>
 80066a4:	1cc8      	adds	r0, r1, #3
 80066a6:	db02      	blt.n	80066ae <_printf_float+0x136>
 80066a8:	6863      	ldr	r3, [r4, #4]
 80066aa:	4299      	cmp	r1, r3
 80066ac:	dd41      	ble.n	8006732 <_printf_float+0x1ba>
 80066ae:	f1ab 0302 	sub.w	r3, fp, #2
 80066b2:	fa5f fb83 	uxtb.w	fp, r3
 80066b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066ba:	d820      	bhi.n	80066fe <_printf_float+0x186>
 80066bc:	3901      	subs	r1, #1
 80066be:	465a      	mov	r2, fp
 80066c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066c4:	9109      	str	r1, [sp, #36]	; 0x24
 80066c6:	f7ff ff19 	bl	80064fc <__exponent>
 80066ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066cc:	1813      	adds	r3, r2, r0
 80066ce:	2a01      	cmp	r2, #1
 80066d0:	4681      	mov	r9, r0
 80066d2:	6123      	str	r3, [r4, #16]
 80066d4:	dc02      	bgt.n	80066dc <_printf_float+0x164>
 80066d6:	6822      	ldr	r2, [r4, #0]
 80066d8:	07d2      	lsls	r2, r2, #31
 80066da:	d501      	bpl.n	80066e0 <_printf_float+0x168>
 80066dc:	3301      	adds	r3, #1
 80066de:	6123      	str	r3, [r4, #16]
 80066e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d09c      	beq.n	8006622 <_printf_float+0xaa>
 80066e8:	232d      	movs	r3, #45	; 0x2d
 80066ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066ee:	e798      	b.n	8006622 <_printf_float+0xaa>
 80066f0:	9a06      	ldr	r2, [sp, #24]
 80066f2:	2a47      	cmp	r2, #71	; 0x47
 80066f4:	d1be      	bne.n	8006674 <_printf_float+0xfc>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1bc      	bne.n	8006674 <_printf_float+0xfc>
 80066fa:	2301      	movs	r3, #1
 80066fc:	e7b9      	b.n	8006672 <_printf_float+0xfa>
 80066fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006702:	d118      	bne.n	8006736 <_printf_float+0x1be>
 8006704:	2900      	cmp	r1, #0
 8006706:	6863      	ldr	r3, [r4, #4]
 8006708:	dd0b      	ble.n	8006722 <_printf_float+0x1aa>
 800670a:	6121      	str	r1, [r4, #16]
 800670c:	b913      	cbnz	r3, 8006714 <_printf_float+0x19c>
 800670e:	6822      	ldr	r2, [r4, #0]
 8006710:	07d0      	lsls	r0, r2, #31
 8006712:	d502      	bpl.n	800671a <_printf_float+0x1a2>
 8006714:	3301      	adds	r3, #1
 8006716:	440b      	add	r3, r1
 8006718:	6123      	str	r3, [r4, #16]
 800671a:	65a1      	str	r1, [r4, #88]	; 0x58
 800671c:	f04f 0900 	mov.w	r9, #0
 8006720:	e7de      	b.n	80066e0 <_printf_float+0x168>
 8006722:	b913      	cbnz	r3, 800672a <_printf_float+0x1b2>
 8006724:	6822      	ldr	r2, [r4, #0]
 8006726:	07d2      	lsls	r2, r2, #31
 8006728:	d501      	bpl.n	800672e <_printf_float+0x1b6>
 800672a:	3302      	adds	r3, #2
 800672c:	e7f4      	b.n	8006718 <_printf_float+0x1a0>
 800672e:	2301      	movs	r3, #1
 8006730:	e7f2      	b.n	8006718 <_printf_float+0x1a0>
 8006732:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006738:	4299      	cmp	r1, r3
 800673a:	db05      	blt.n	8006748 <_printf_float+0x1d0>
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	6121      	str	r1, [r4, #16]
 8006740:	07d8      	lsls	r0, r3, #31
 8006742:	d5ea      	bpl.n	800671a <_printf_float+0x1a2>
 8006744:	1c4b      	adds	r3, r1, #1
 8006746:	e7e7      	b.n	8006718 <_printf_float+0x1a0>
 8006748:	2900      	cmp	r1, #0
 800674a:	bfd4      	ite	le
 800674c:	f1c1 0202 	rsble	r2, r1, #2
 8006750:	2201      	movgt	r2, #1
 8006752:	4413      	add	r3, r2
 8006754:	e7e0      	b.n	8006718 <_printf_float+0x1a0>
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	055a      	lsls	r2, r3, #21
 800675a:	d407      	bmi.n	800676c <_printf_float+0x1f4>
 800675c:	6923      	ldr	r3, [r4, #16]
 800675e:	4642      	mov	r2, r8
 8006760:	4631      	mov	r1, r6
 8006762:	4628      	mov	r0, r5
 8006764:	47b8      	blx	r7
 8006766:	3001      	adds	r0, #1
 8006768:	d12c      	bne.n	80067c4 <_printf_float+0x24c>
 800676a:	e764      	b.n	8006636 <_printf_float+0xbe>
 800676c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006770:	f240 80e0 	bls.w	8006934 <_printf_float+0x3bc>
 8006774:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006778:	2200      	movs	r2, #0
 800677a:	2300      	movs	r3, #0
 800677c:	f7fa f9ac 	bl	8000ad8 <__aeabi_dcmpeq>
 8006780:	2800      	cmp	r0, #0
 8006782:	d034      	beq.n	80067ee <_printf_float+0x276>
 8006784:	4a37      	ldr	r2, [pc, #220]	; (8006864 <_printf_float+0x2ec>)
 8006786:	2301      	movs	r3, #1
 8006788:	4631      	mov	r1, r6
 800678a:	4628      	mov	r0, r5
 800678c:	47b8      	blx	r7
 800678e:	3001      	adds	r0, #1
 8006790:	f43f af51 	beq.w	8006636 <_printf_float+0xbe>
 8006794:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006798:	429a      	cmp	r2, r3
 800679a:	db02      	blt.n	80067a2 <_printf_float+0x22a>
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	07d8      	lsls	r0, r3, #31
 80067a0:	d510      	bpl.n	80067c4 <_printf_float+0x24c>
 80067a2:	ee18 3a10 	vmov	r3, s16
 80067a6:	4652      	mov	r2, sl
 80067a8:	4631      	mov	r1, r6
 80067aa:	4628      	mov	r0, r5
 80067ac:	47b8      	blx	r7
 80067ae:	3001      	adds	r0, #1
 80067b0:	f43f af41 	beq.w	8006636 <_printf_float+0xbe>
 80067b4:	f04f 0800 	mov.w	r8, #0
 80067b8:	f104 091a 	add.w	r9, r4, #26
 80067bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067be:	3b01      	subs	r3, #1
 80067c0:	4543      	cmp	r3, r8
 80067c2:	dc09      	bgt.n	80067d8 <_printf_float+0x260>
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	079b      	lsls	r3, r3, #30
 80067c8:	f100 8107 	bmi.w	80069da <_printf_float+0x462>
 80067cc:	68e0      	ldr	r0, [r4, #12]
 80067ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067d0:	4298      	cmp	r0, r3
 80067d2:	bfb8      	it	lt
 80067d4:	4618      	movlt	r0, r3
 80067d6:	e730      	b.n	800663a <_printf_float+0xc2>
 80067d8:	2301      	movs	r3, #1
 80067da:	464a      	mov	r2, r9
 80067dc:	4631      	mov	r1, r6
 80067de:	4628      	mov	r0, r5
 80067e0:	47b8      	blx	r7
 80067e2:	3001      	adds	r0, #1
 80067e4:	f43f af27 	beq.w	8006636 <_printf_float+0xbe>
 80067e8:	f108 0801 	add.w	r8, r8, #1
 80067ec:	e7e6      	b.n	80067bc <_printf_float+0x244>
 80067ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	dc39      	bgt.n	8006868 <_printf_float+0x2f0>
 80067f4:	4a1b      	ldr	r2, [pc, #108]	; (8006864 <_printf_float+0x2ec>)
 80067f6:	2301      	movs	r3, #1
 80067f8:	4631      	mov	r1, r6
 80067fa:	4628      	mov	r0, r5
 80067fc:	47b8      	blx	r7
 80067fe:	3001      	adds	r0, #1
 8006800:	f43f af19 	beq.w	8006636 <_printf_float+0xbe>
 8006804:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006808:	4313      	orrs	r3, r2
 800680a:	d102      	bne.n	8006812 <_printf_float+0x29a>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	07d9      	lsls	r1, r3, #31
 8006810:	d5d8      	bpl.n	80067c4 <_printf_float+0x24c>
 8006812:	ee18 3a10 	vmov	r3, s16
 8006816:	4652      	mov	r2, sl
 8006818:	4631      	mov	r1, r6
 800681a:	4628      	mov	r0, r5
 800681c:	47b8      	blx	r7
 800681e:	3001      	adds	r0, #1
 8006820:	f43f af09 	beq.w	8006636 <_printf_float+0xbe>
 8006824:	f04f 0900 	mov.w	r9, #0
 8006828:	f104 0a1a 	add.w	sl, r4, #26
 800682c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800682e:	425b      	negs	r3, r3
 8006830:	454b      	cmp	r3, r9
 8006832:	dc01      	bgt.n	8006838 <_printf_float+0x2c0>
 8006834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006836:	e792      	b.n	800675e <_printf_float+0x1e6>
 8006838:	2301      	movs	r3, #1
 800683a:	4652      	mov	r2, sl
 800683c:	4631      	mov	r1, r6
 800683e:	4628      	mov	r0, r5
 8006840:	47b8      	blx	r7
 8006842:	3001      	adds	r0, #1
 8006844:	f43f aef7 	beq.w	8006636 <_printf_float+0xbe>
 8006848:	f109 0901 	add.w	r9, r9, #1
 800684c:	e7ee      	b.n	800682c <_printf_float+0x2b4>
 800684e:	bf00      	nop
 8006850:	7fefffff 	.word	0x7fefffff
 8006854:	0800a695 	.word	0x0800a695
 8006858:	0800a699 	.word	0x0800a699
 800685c:	0800a69d 	.word	0x0800a69d
 8006860:	0800a6a1 	.word	0x0800a6a1
 8006864:	0800a6a5 	.word	0x0800a6a5
 8006868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800686a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800686c:	429a      	cmp	r2, r3
 800686e:	bfa8      	it	ge
 8006870:	461a      	movge	r2, r3
 8006872:	2a00      	cmp	r2, #0
 8006874:	4691      	mov	r9, r2
 8006876:	dc37      	bgt.n	80068e8 <_printf_float+0x370>
 8006878:	f04f 0b00 	mov.w	fp, #0
 800687c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006880:	f104 021a 	add.w	r2, r4, #26
 8006884:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006886:	9305      	str	r3, [sp, #20]
 8006888:	eba3 0309 	sub.w	r3, r3, r9
 800688c:	455b      	cmp	r3, fp
 800688e:	dc33      	bgt.n	80068f8 <_printf_float+0x380>
 8006890:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006894:	429a      	cmp	r2, r3
 8006896:	db3b      	blt.n	8006910 <_printf_float+0x398>
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	07da      	lsls	r2, r3, #31
 800689c:	d438      	bmi.n	8006910 <_printf_float+0x398>
 800689e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80068a2:	eba2 0903 	sub.w	r9, r2, r3
 80068a6:	9b05      	ldr	r3, [sp, #20]
 80068a8:	1ad2      	subs	r2, r2, r3
 80068aa:	4591      	cmp	r9, r2
 80068ac:	bfa8      	it	ge
 80068ae:	4691      	movge	r9, r2
 80068b0:	f1b9 0f00 	cmp.w	r9, #0
 80068b4:	dc35      	bgt.n	8006922 <_printf_float+0x3aa>
 80068b6:	f04f 0800 	mov.w	r8, #0
 80068ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068be:	f104 0a1a 	add.w	sl, r4, #26
 80068c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068c6:	1a9b      	subs	r3, r3, r2
 80068c8:	eba3 0309 	sub.w	r3, r3, r9
 80068cc:	4543      	cmp	r3, r8
 80068ce:	f77f af79 	ble.w	80067c4 <_printf_float+0x24c>
 80068d2:	2301      	movs	r3, #1
 80068d4:	4652      	mov	r2, sl
 80068d6:	4631      	mov	r1, r6
 80068d8:	4628      	mov	r0, r5
 80068da:	47b8      	blx	r7
 80068dc:	3001      	adds	r0, #1
 80068de:	f43f aeaa 	beq.w	8006636 <_printf_float+0xbe>
 80068e2:	f108 0801 	add.w	r8, r8, #1
 80068e6:	e7ec      	b.n	80068c2 <_printf_float+0x34a>
 80068e8:	4613      	mov	r3, r2
 80068ea:	4631      	mov	r1, r6
 80068ec:	4642      	mov	r2, r8
 80068ee:	4628      	mov	r0, r5
 80068f0:	47b8      	blx	r7
 80068f2:	3001      	adds	r0, #1
 80068f4:	d1c0      	bne.n	8006878 <_printf_float+0x300>
 80068f6:	e69e      	b.n	8006636 <_printf_float+0xbe>
 80068f8:	2301      	movs	r3, #1
 80068fa:	4631      	mov	r1, r6
 80068fc:	4628      	mov	r0, r5
 80068fe:	9205      	str	r2, [sp, #20]
 8006900:	47b8      	blx	r7
 8006902:	3001      	adds	r0, #1
 8006904:	f43f ae97 	beq.w	8006636 <_printf_float+0xbe>
 8006908:	9a05      	ldr	r2, [sp, #20]
 800690a:	f10b 0b01 	add.w	fp, fp, #1
 800690e:	e7b9      	b.n	8006884 <_printf_float+0x30c>
 8006910:	ee18 3a10 	vmov	r3, s16
 8006914:	4652      	mov	r2, sl
 8006916:	4631      	mov	r1, r6
 8006918:	4628      	mov	r0, r5
 800691a:	47b8      	blx	r7
 800691c:	3001      	adds	r0, #1
 800691e:	d1be      	bne.n	800689e <_printf_float+0x326>
 8006920:	e689      	b.n	8006636 <_printf_float+0xbe>
 8006922:	9a05      	ldr	r2, [sp, #20]
 8006924:	464b      	mov	r3, r9
 8006926:	4442      	add	r2, r8
 8006928:	4631      	mov	r1, r6
 800692a:	4628      	mov	r0, r5
 800692c:	47b8      	blx	r7
 800692e:	3001      	adds	r0, #1
 8006930:	d1c1      	bne.n	80068b6 <_printf_float+0x33e>
 8006932:	e680      	b.n	8006636 <_printf_float+0xbe>
 8006934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006936:	2a01      	cmp	r2, #1
 8006938:	dc01      	bgt.n	800693e <_printf_float+0x3c6>
 800693a:	07db      	lsls	r3, r3, #31
 800693c:	d53a      	bpl.n	80069b4 <_printf_float+0x43c>
 800693e:	2301      	movs	r3, #1
 8006940:	4642      	mov	r2, r8
 8006942:	4631      	mov	r1, r6
 8006944:	4628      	mov	r0, r5
 8006946:	47b8      	blx	r7
 8006948:	3001      	adds	r0, #1
 800694a:	f43f ae74 	beq.w	8006636 <_printf_float+0xbe>
 800694e:	ee18 3a10 	vmov	r3, s16
 8006952:	4652      	mov	r2, sl
 8006954:	4631      	mov	r1, r6
 8006956:	4628      	mov	r0, r5
 8006958:	47b8      	blx	r7
 800695a:	3001      	adds	r0, #1
 800695c:	f43f ae6b 	beq.w	8006636 <_printf_float+0xbe>
 8006960:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006964:	2200      	movs	r2, #0
 8006966:	2300      	movs	r3, #0
 8006968:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800696c:	f7fa f8b4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006970:	b9d8      	cbnz	r0, 80069aa <_printf_float+0x432>
 8006972:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006976:	f108 0201 	add.w	r2, r8, #1
 800697a:	4631      	mov	r1, r6
 800697c:	4628      	mov	r0, r5
 800697e:	47b8      	blx	r7
 8006980:	3001      	adds	r0, #1
 8006982:	d10e      	bne.n	80069a2 <_printf_float+0x42a>
 8006984:	e657      	b.n	8006636 <_printf_float+0xbe>
 8006986:	2301      	movs	r3, #1
 8006988:	4652      	mov	r2, sl
 800698a:	4631      	mov	r1, r6
 800698c:	4628      	mov	r0, r5
 800698e:	47b8      	blx	r7
 8006990:	3001      	adds	r0, #1
 8006992:	f43f ae50 	beq.w	8006636 <_printf_float+0xbe>
 8006996:	f108 0801 	add.w	r8, r8, #1
 800699a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800699c:	3b01      	subs	r3, #1
 800699e:	4543      	cmp	r3, r8
 80069a0:	dcf1      	bgt.n	8006986 <_printf_float+0x40e>
 80069a2:	464b      	mov	r3, r9
 80069a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80069a8:	e6da      	b.n	8006760 <_printf_float+0x1e8>
 80069aa:	f04f 0800 	mov.w	r8, #0
 80069ae:	f104 0a1a 	add.w	sl, r4, #26
 80069b2:	e7f2      	b.n	800699a <_printf_float+0x422>
 80069b4:	2301      	movs	r3, #1
 80069b6:	4642      	mov	r2, r8
 80069b8:	e7df      	b.n	800697a <_printf_float+0x402>
 80069ba:	2301      	movs	r3, #1
 80069bc:	464a      	mov	r2, r9
 80069be:	4631      	mov	r1, r6
 80069c0:	4628      	mov	r0, r5
 80069c2:	47b8      	blx	r7
 80069c4:	3001      	adds	r0, #1
 80069c6:	f43f ae36 	beq.w	8006636 <_printf_float+0xbe>
 80069ca:	f108 0801 	add.w	r8, r8, #1
 80069ce:	68e3      	ldr	r3, [r4, #12]
 80069d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069d2:	1a5b      	subs	r3, r3, r1
 80069d4:	4543      	cmp	r3, r8
 80069d6:	dcf0      	bgt.n	80069ba <_printf_float+0x442>
 80069d8:	e6f8      	b.n	80067cc <_printf_float+0x254>
 80069da:	f04f 0800 	mov.w	r8, #0
 80069de:	f104 0919 	add.w	r9, r4, #25
 80069e2:	e7f4      	b.n	80069ce <_printf_float+0x456>

080069e4 <_printf_common>:
 80069e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e8:	4616      	mov	r6, r2
 80069ea:	4699      	mov	r9, r3
 80069ec:	688a      	ldr	r2, [r1, #8]
 80069ee:	690b      	ldr	r3, [r1, #16]
 80069f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069f4:	4293      	cmp	r3, r2
 80069f6:	bfb8      	it	lt
 80069f8:	4613      	movlt	r3, r2
 80069fa:	6033      	str	r3, [r6, #0]
 80069fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a00:	4607      	mov	r7, r0
 8006a02:	460c      	mov	r4, r1
 8006a04:	b10a      	cbz	r2, 8006a0a <_printf_common+0x26>
 8006a06:	3301      	adds	r3, #1
 8006a08:	6033      	str	r3, [r6, #0]
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	0699      	lsls	r1, r3, #26
 8006a0e:	bf42      	ittt	mi
 8006a10:	6833      	ldrmi	r3, [r6, #0]
 8006a12:	3302      	addmi	r3, #2
 8006a14:	6033      	strmi	r3, [r6, #0]
 8006a16:	6825      	ldr	r5, [r4, #0]
 8006a18:	f015 0506 	ands.w	r5, r5, #6
 8006a1c:	d106      	bne.n	8006a2c <_printf_common+0x48>
 8006a1e:	f104 0a19 	add.w	sl, r4, #25
 8006a22:	68e3      	ldr	r3, [r4, #12]
 8006a24:	6832      	ldr	r2, [r6, #0]
 8006a26:	1a9b      	subs	r3, r3, r2
 8006a28:	42ab      	cmp	r3, r5
 8006a2a:	dc26      	bgt.n	8006a7a <_printf_common+0x96>
 8006a2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a30:	1e13      	subs	r3, r2, #0
 8006a32:	6822      	ldr	r2, [r4, #0]
 8006a34:	bf18      	it	ne
 8006a36:	2301      	movne	r3, #1
 8006a38:	0692      	lsls	r2, r2, #26
 8006a3a:	d42b      	bmi.n	8006a94 <_printf_common+0xb0>
 8006a3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a40:	4649      	mov	r1, r9
 8006a42:	4638      	mov	r0, r7
 8006a44:	47c0      	blx	r8
 8006a46:	3001      	adds	r0, #1
 8006a48:	d01e      	beq.n	8006a88 <_printf_common+0xa4>
 8006a4a:	6823      	ldr	r3, [r4, #0]
 8006a4c:	6922      	ldr	r2, [r4, #16]
 8006a4e:	f003 0306 	and.w	r3, r3, #6
 8006a52:	2b04      	cmp	r3, #4
 8006a54:	bf02      	ittt	eq
 8006a56:	68e5      	ldreq	r5, [r4, #12]
 8006a58:	6833      	ldreq	r3, [r6, #0]
 8006a5a:	1aed      	subeq	r5, r5, r3
 8006a5c:	68a3      	ldr	r3, [r4, #8]
 8006a5e:	bf0c      	ite	eq
 8006a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a64:	2500      	movne	r5, #0
 8006a66:	4293      	cmp	r3, r2
 8006a68:	bfc4      	itt	gt
 8006a6a:	1a9b      	subgt	r3, r3, r2
 8006a6c:	18ed      	addgt	r5, r5, r3
 8006a6e:	2600      	movs	r6, #0
 8006a70:	341a      	adds	r4, #26
 8006a72:	42b5      	cmp	r5, r6
 8006a74:	d11a      	bne.n	8006aac <_printf_common+0xc8>
 8006a76:	2000      	movs	r0, #0
 8006a78:	e008      	b.n	8006a8c <_printf_common+0xa8>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	4652      	mov	r2, sl
 8006a7e:	4649      	mov	r1, r9
 8006a80:	4638      	mov	r0, r7
 8006a82:	47c0      	blx	r8
 8006a84:	3001      	adds	r0, #1
 8006a86:	d103      	bne.n	8006a90 <_printf_common+0xac>
 8006a88:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a90:	3501      	adds	r5, #1
 8006a92:	e7c6      	b.n	8006a22 <_printf_common+0x3e>
 8006a94:	18e1      	adds	r1, r4, r3
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	2030      	movs	r0, #48	; 0x30
 8006a9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a9e:	4422      	add	r2, r4
 8006aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006aa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006aa8:	3302      	adds	r3, #2
 8006aaa:	e7c7      	b.n	8006a3c <_printf_common+0x58>
 8006aac:	2301      	movs	r3, #1
 8006aae:	4622      	mov	r2, r4
 8006ab0:	4649      	mov	r1, r9
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	47c0      	blx	r8
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d0e6      	beq.n	8006a88 <_printf_common+0xa4>
 8006aba:	3601      	adds	r6, #1
 8006abc:	e7d9      	b.n	8006a72 <_printf_common+0x8e>
	...

08006ac0 <_printf_i>:
 8006ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac4:	7e0f      	ldrb	r7, [r1, #24]
 8006ac6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ac8:	2f78      	cmp	r7, #120	; 0x78
 8006aca:	4691      	mov	r9, r2
 8006acc:	4680      	mov	r8, r0
 8006ace:	460c      	mov	r4, r1
 8006ad0:	469a      	mov	sl, r3
 8006ad2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ad6:	d807      	bhi.n	8006ae8 <_printf_i+0x28>
 8006ad8:	2f62      	cmp	r7, #98	; 0x62
 8006ada:	d80a      	bhi.n	8006af2 <_printf_i+0x32>
 8006adc:	2f00      	cmp	r7, #0
 8006ade:	f000 80d4 	beq.w	8006c8a <_printf_i+0x1ca>
 8006ae2:	2f58      	cmp	r7, #88	; 0x58
 8006ae4:	f000 80c0 	beq.w	8006c68 <_printf_i+0x1a8>
 8006ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006aec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006af0:	e03a      	b.n	8006b68 <_printf_i+0xa8>
 8006af2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006af6:	2b15      	cmp	r3, #21
 8006af8:	d8f6      	bhi.n	8006ae8 <_printf_i+0x28>
 8006afa:	a101      	add	r1, pc, #4	; (adr r1, 8006b00 <_printf_i+0x40>)
 8006afc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b00:	08006b59 	.word	0x08006b59
 8006b04:	08006b6d 	.word	0x08006b6d
 8006b08:	08006ae9 	.word	0x08006ae9
 8006b0c:	08006ae9 	.word	0x08006ae9
 8006b10:	08006ae9 	.word	0x08006ae9
 8006b14:	08006ae9 	.word	0x08006ae9
 8006b18:	08006b6d 	.word	0x08006b6d
 8006b1c:	08006ae9 	.word	0x08006ae9
 8006b20:	08006ae9 	.word	0x08006ae9
 8006b24:	08006ae9 	.word	0x08006ae9
 8006b28:	08006ae9 	.word	0x08006ae9
 8006b2c:	08006c71 	.word	0x08006c71
 8006b30:	08006b99 	.word	0x08006b99
 8006b34:	08006c2b 	.word	0x08006c2b
 8006b38:	08006ae9 	.word	0x08006ae9
 8006b3c:	08006ae9 	.word	0x08006ae9
 8006b40:	08006c93 	.word	0x08006c93
 8006b44:	08006ae9 	.word	0x08006ae9
 8006b48:	08006b99 	.word	0x08006b99
 8006b4c:	08006ae9 	.word	0x08006ae9
 8006b50:	08006ae9 	.word	0x08006ae9
 8006b54:	08006c33 	.word	0x08006c33
 8006b58:	682b      	ldr	r3, [r5, #0]
 8006b5a:	1d1a      	adds	r2, r3, #4
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	602a      	str	r2, [r5, #0]
 8006b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e09f      	b.n	8006cac <_printf_i+0x1ec>
 8006b6c:	6820      	ldr	r0, [r4, #0]
 8006b6e:	682b      	ldr	r3, [r5, #0]
 8006b70:	0607      	lsls	r7, r0, #24
 8006b72:	f103 0104 	add.w	r1, r3, #4
 8006b76:	6029      	str	r1, [r5, #0]
 8006b78:	d501      	bpl.n	8006b7e <_printf_i+0xbe>
 8006b7a:	681e      	ldr	r6, [r3, #0]
 8006b7c:	e003      	b.n	8006b86 <_printf_i+0xc6>
 8006b7e:	0646      	lsls	r6, r0, #25
 8006b80:	d5fb      	bpl.n	8006b7a <_printf_i+0xba>
 8006b82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006b86:	2e00      	cmp	r6, #0
 8006b88:	da03      	bge.n	8006b92 <_printf_i+0xd2>
 8006b8a:	232d      	movs	r3, #45	; 0x2d
 8006b8c:	4276      	negs	r6, r6
 8006b8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b92:	485a      	ldr	r0, [pc, #360]	; (8006cfc <_printf_i+0x23c>)
 8006b94:	230a      	movs	r3, #10
 8006b96:	e012      	b.n	8006bbe <_printf_i+0xfe>
 8006b98:	682b      	ldr	r3, [r5, #0]
 8006b9a:	6820      	ldr	r0, [r4, #0]
 8006b9c:	1d19      	adds	r1, r3, #4
 8006b9e:	6029      	str	r1, [r5, #0]
 8006ba0:	0605      	lsls	r5, r0, #24
 8006ba2:	d501      	bpl.n	8006ba8 <_printf_i+0xe8>
 8006ba4:	681e      	ldr	r6, [r3, #0]
 8006ba6:	e002      	b.n	8006bae <_printf_i+0xee>
 8006ba8:	0641      	lsls	r1, r0, #25
 8006baa:	d5fb      	bpl.n	8006ba4 <_printf_i+0xe4>
 8006bac:	881e      	ldrh	r6, [r3, #0]
 8006bae:	4853      	ldr	r0, [pc, #332]	; (8006cfc <_printf_i+0x23c>)
 8006bb0:	2f6f      	cmp	r7, #111	; 0x6f
 8006bb2:	bf0c      	ite	eq
 8006bb4:	2308      	moveq	r3, #8
 8006bb6:	230a      	movne	r3, #10
 8006bb8:	2100      	movs	r1, #0
 8006bba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bbe:	6865      	ldr	r5, [r4, #4]
 8006bc0:	60a5      	str	r5, [r4, #8]
 8006bc2:	2d00      	cmp	r5, #0
 8006bc4:	bfa2      	ittt	ge
 8006bc6:	6821      	ldrge	r1, [r4, #0]
 8006bc8:	f021 0104 	bicge.w	r1, r1, #4
 8006bcc:	6021      	strge	r1, [r4, #0]
 8006bce:	b90e      	cbnz	r6, 8006bd4 <_printf_i+0x114>
 8006bd0:	2d00      	cmp	r5, #0
 8006bd2:	d04b      	beq.n	8006c6c <_printf_i+0x1ac>
 8006bd4:	4615      	mov	r5, r2
 8006bd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bda:	fb03 6711 	mls	r7, r3, r1, r6
 8006bde:	5dc7      	ldrb	r7, [r0, r7]
 8006be0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006be4:	4637      	mov	r7, r6
 8006be6:	42bb      	cmp	r3, r7
 8006be8:	460e      	mov	r6, r1
 8006bea:	d9f4      	bls.n	8006bd6 <_printf_i+0x116>
 8006bec:	2b08      	cmp	r3, #8
 8006bee:	d10b      	bne.n	8006c08 <_printf_i+0x148>
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	07de      	lsls	r6, r3, #31
 8006bf4:	d508      	bpl.n	8006c08 <_printf_i+0x148>
 8006bf6:	6923      	ldr	r3, [r4, #16]
 8006bf8:	6861      	ldr	r1, [r4, #4]
 8006bfa:	4299      	cmp	r1, r3
 8006bfc:	bfde      	ittt	le
 8006bfe:	2330      	movle	r3, #48	; 0x30
 8006c00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c08:	1b52      	subs	r2, r2, r5
 8006c0a:	6122      	str	r2, [r4, #16]
 8006c0c:	f8cd a000 	str.w	sl, [sp]
 8006c10:	464b      	mov	r3, r9
 8006c12:	aa03      	add	r2, sp, #12
 8006c14:	4621      	mov	r1, r4
 8006c16:	4640      	mov	r0, r8
 8006c18:	f7ff fee4 	bl	80069e4 <_printf_common>
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	d14a      	bne.n	8006cb6 <_printf_i+0x1f6>
 8006c20:	f04f 30ff 	mov.w	r0, #4294967295
 8006c24:	b004      	add	sp, #16
 8006c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	f043 0320 	orr.w	r3, r3, #32
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	4833      	ldr	r0, [pc, #204]	; (8006d00 <_printf_i+0x240>)
 8006c34:	2778      	movs	r7, #120	; 0x78
 8006c36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c3a:	6823      	ldr	r3, [r4, #0]
 8006c3c:	6829      	ldr	r1, [r5, #0]
 8006c3e:	061f      	lsls	r7, r3, #24
 8006c40:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c44:	d402      	bmi.n	8006c4c <_printf_i+0x18c>
 8006c46:	065f      	lsls	r7, r3, #25
 8006c48:	bf48      	it	mi
 8006c4a:	b2b6      	uxthmi	r6, r6
 8006c4c:	07df      	lsls	r7, r3, #31
 8006c4e:	bf48      	it	mi
 8006c50:	f043 0320 	orrmi.w	r3, r3, #32
 8006c54:	6029      	str	r1, [r5, #0]
 8006c56:	bf48      	it	mi
 8006c58:	6023      	strmi	r3, [r4, #0]
 8006c5a:	b91e      	cbnz	r6, 8006c64 <_printf_i+0x1a4>
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	f023 0320 	bic.w	r3, r3, #32
 8006c62:	6023      	str	r3, [r4, #0]
 8006c64:	2310      	movs	r3, #16
 8006c66:	e7a7      	b.n	8006bb8 <_printf_i+0xf8>
 8006c68:	4824      	ldr	r0, [pc, #144]	; (8006cfc <_printf_i+0x23c>)
 8006c6a:	e7e4      	b.n	8006c36 <_printf_i+0x176>
 8006c6c:	4615      	mov	r5, r2
 8006c6e:	e7bd      	b.n	8006bec <_printf_i+0x12c>
 8006c70:	682b      	ldr	r3, [r5, #0]
 8006c72:	6826      	ldr	r6, [r4, #0]
 8006c74:	6961      	ldr	r1, [r4, #20]
 8006c76:	1d18      	adds	r0, r3, #4
 8006c78:	6028      	str	r0, [r5, #0]
 8006c7a:	0635      	lsls	r5, r6, #24
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	d501      	bpl.n	8006c84 <_printf_i+0x1c4>
 8006c80:	6019      	str	r1, [r3, #0]
 8006c82:	e002      	b.n	8006c8a <_printf_i+0x1ca>
 8006c84:	0670      	lsls	r0, r6, #25
 8006c86:	d5fb      	bpl.n	8006c80 <_printf_i+0x1c0>
 8006c88:	8019      	strh	r1, [r3, #0]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	6123      	str	r3, [r4, #16]
 8006c8e:	4615      	mov	r5, r2
 8006c90:	e7bc      	b.n	8006c0c <_printf_i+0x14c>
 8006c92:	682b      	ldr	r3, [r5, #0]
 8006c94:	1d1a      	adds	r2, r3, #4
 8006c96:	602a      	str	r2, [r5, #0]
 8006c98:	681d      	ldr	r5, [r3, #0]
 8006c9a:	6862      	ldr	r2, [r4, #4]
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	f7f9 fa9e 	bl	80001e0 <memchr>
 8006ca4:	b108      	cbz	r0, 8006caa <_printf_i+0x1ea>
 8006ca6:	1b40      	subs	r0, r0, r5
 8006ca8:	6060      	str	r0, [r4, #4]
 8006caa:	6863      	ldr	r3, [r4, #4]
 8006cac:	6123      	str	r3, [r4, #16]
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cb4:	e7aa      	b.n	8006c0c <_printf_i+0x14c>
 8006cb6:	6923      	ldr	r3, [r4, #16]
 8006cb8:	462a      	mov	r2, r5
 8006cba:	4649      	mov	r1, r9
 8006cbc:	4640      	mov	r0, r8
 8006cbe:	47d0      	blx	sl
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	d0ad      	beq.n	8006c20 <_printf_i+0x160>
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	079b      	lsls	r3, r3, #30
 8006cc8:	d413      	bmi.n	8006cf2 <_printf_i+0x232>
 8006cca:	68e0      	ldr	r0, [r4, #12]
 8006ccc:	9b03      	ldr	r3, [sp, #12]
 8006cce:	4298      	cmp	r0, r3
 8006cd0:	bfb8      	it	lt
 8006cd2:	4618      	movlt	r0, r3
 8006cd4:	e7a6      	b.n	8006c24 <_printf_i+0x164>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	4632      	mov	r2, r6
 8006cda:	4649      	mov	r1, r9
 8006cdc:	4640      	mov	r0, r8
 8006cde:	47d0      	blx	sl
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	d09d      	beq.n	8006c20 <_printf_i+0x160>
 8006ce4:	3501      	adds	r5, #1
 8006ce6:	68e3      	ldr	r3, [r4, #12]
 8006ce8:	9903      	ldr	r1, [sp, #12]
 8006cea:	1a5b      	subs	r3, r3, r1
 8006cec:	42ab      	cmp	r3, r5
 8006cee:	dcf2      	bgt.n	8006cd6 <_printf_i+0x216>
 8006cf0:	e7eb      	b.n	8006cca <_printf_i+0x20a>
 8006cf2:	2500      	movs	r5, #0
 8006cf4:	f104 0619 	add.w	r6, r4, #25
 8006cf8:	e7f5      	b.n	8006ce6 <_printf_i+0x226>
 8006cfa:	bf00      	nop
 8006cfc:	0800a6a7 	.word	0x0800a6a7
 8006d00:	0800a6b8 	.word	0x0800a6b8

08006d04 <std>:
 8006d04:	2300      	movs	r3, #0
 8006d06:	b510      	push	{r4, lr}
 8006d08:	4604      	mov	r4, r0
 8006d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8006d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d12:	6083      	str	r3, [r0, #8]
 8006d14:	8181      	strh	r1, [r0, #12]
 8006d16:	6643      	str	r3, [r0, #100]	; 0x64
 8006d18:	81c2      	strh	r2, [r0, #14]
 8006d1a:	6183      	str	r3, [r0, #24]
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	2208      	movs	r2, #8
 8006d20:	305c      	adds	r0, #92	; 0x5c
 8006d22:	f000 f902 	bl	8006f2a <memset>
 8006d26:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <std+0x38>)
 8006d28:	6263      	str	r3, [r4, #36]	; 0x24
 8006d2a:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <std+0x3c>)
 8006d2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d2e:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <std+0x40>)
 8006d30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d32:	4b05      	ldr	r3, [pc, #20]	; (8006d48 <std+0x44>)
 8006d34:	6224      	str	r4, [r4, #32]
 8006d36:	6323      	str	r3, [r4, #48]	; 0x30
 8006d38:	bd10      	pop	{r4, pc}
 8006d3a:	bf00      	nop
 8006d3c:	08006ea5 	.word	0x08006ea5
 8006d40:	08006ec7 	.word	0x08006ec7
 8006d44:	08006eff 	.word	0x08006eff
 8006d48:	08006f23 	.word	0x08006f23

08006d4c <stdio_exit_handler>:
 8006d4c:	4a02      	ldr	r2, [pc, #8]	; (8006d58 <stdio_exit_handler+0xc>)
 8006d4e:	4903      	ldr	r1, [pc, #12]	; (8006d5c <stdio_exit_handler+0x10>)
 8006d50:	4803      	ldr	r0, [pc, #12]	; (8006d60 <stdio_exit_handler+0x14>)
 8006d52:	f000 b869 	b.w	8006e28 <_fwalk_sglue>
 8006d56:	bf00      	nop
 8006d58:	20000020 	.word	0x20000020
 8006d5c:	080089b1 	.word	0x080089b1
 8006d60:	2000002c 	.word	0x2000002c

08006d64 <cleanup_stdio>:
 8006d64:	6841      	ldr	r1, [r0, #4]
 8006d66:	4b0c      	ldr	r3, [pc, #48]	; (8006d98 <cleanup_stdio+0x34>)
 8006d68:	4299      	cmp	r1, r3
 8006d6a:	b510      	push	{r4, lr}
 8006d6c:	4604      	mov	r4, r0
 8006d6e:	d001      	beq.n	8006d74 <cleanup_stdio+0x10>
 8006d70:	f001 fe1e 	bl	80089b0 <_fflush_r>
 8006d74:	68a1      	ldr	r1, [r4, #8]
 8006d76:	4b09      	ldr	r3, [pc, #36]	; (8006d9c <cleanup_stdio+0x38>)
 8006d78:	4299      	cmp	r1, r3
 8006d7a:	d002      	beq.n	8006d82 <cleanup_stdio+0x1e>
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f001 fe17 	bl	80089b0 <_fflush_r>
 8006d82:	68e1      	ldr	r1, [r4, #12]
 8006d84:	4b06      	ldr	r3, [pc, #24]	; (8006da0 <cleanup_stdio+0x3c>)
 8006d86:	4299      	cmp	r1, r3
 8006d88:	d004      	beq.n	8006d94 <cleanup_stdio+0x30>
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d90:	f001 be0e 	b.w	80089b0 <_fflush_r>
 8006d94:	bd10      	pop	{r4, pc}
 8006d96:	bf00      	nop
 8006d98:	20000390 	.word	0x20000390
 8006d9c:	200003f8 	.word	0x200003f8
 8006da0:	20000460 	.word	0x20000460

08006da4 <global_stdio_init.part.0>:
 8006da4:	b510      	push	{r4, lr}
 8006da6:	4b0b      	ldr	r3, [pc, #44]	; (8006dd4 <global_stdio_init.part.0+0x30>)
 8006da8:	4c0b      	ldr	r4, [pc, #44]	; (8006dd8 <global_stdio_init.part.0+0x34>)
 8006daa:	4a0c      	ldr	r2, [pc, #48]	; (8006ddc <global_stdio_init.part.0+0x38>)
 8006dac:	601a      	str	r2, [r3, #0]
 8006dae:	4620      	mov	r0, r4
 8006db0:	2200      	movs	r2, #0
 8006db2:	2104      	movs	r1, #4
 8006db4:	f7ff ffa6 	bl	8006d04 <std>
 8006db8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	2109      	movs	r1, #9
 8006dc0:	f7ff ffa0 	bl	8006d04 <std>
 8006dc4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006dc8:	2202      	movs	r2, #2
 8006dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dce:	2112      	movs	r1, #18
 8006dd0:	f7ff bf98 	b.w	8006d04 <std>
 8006dd4:	200004c8 	.word	0x200004c8
 8006dd8:	20000390 	.word	0x20000390
 8006ddc:	08006d4d 	.word	0x08006d4d

08006de0 <__sfp_lock_acquire>:
 8006de0:	4801      	ldr	r0, [pc, #4]	; (8006de8 <__sfp_lock_acquire+0x8>)
 8006de2:	f000 b99d 	b.w	8007120 <__retarget_lock_acquire_recursive>
 8006de6:	bf00      	nop
 8006de8:	200004d1 	.word	0x200004d1

08006dec <__sfp_lock_release>:
 8006dec:	4801      	ldr	r0, [pc, #4]	; (8006df4 <__sfp_lock_release+0x8>)
 8006dee:	f000 b998 	b.w	8007122 <__retarget_lock_release_recursive>
 8006df2:	bf00      	nop
 8006df4:	200004d1 	.word	0x200004d1

08006df8 <__sinit>:
 8006df8:	b510      	push	{r4, lr}
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	f7ff fff0 	bl	8006de0 <__sfp_lock_acquire>
 8006e00:	6a23      	ldr	r3, [r4, #32]
 8006e02:	b11b      	cbz	r3, 8006e0c <__sinit+0x14>
 8006e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e08:	f7ff bff0 	b.w	8006dec <__sfp_lock_release>
 8006e0c:	4b04      	ldr	r3, [pc, #16]	; (8006e20 <__sinit+0x28>)
 8006e0e:	6223      	str	r3, [r4, #32]
 8006e10:	4b04      	ldr	r3, [pc, #16]	; (8006e24 <__sinit+0x2c>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1f5      	bne.n	8006e04 <__sinit+0xc>
 8006e18:	f7ff ffc4 	bl	8006da4 <global_stdio_init.part.0>
 8006e1c:	e7f2      	b.n	8006e04 <__sinit+0xc>
 8006e1e:	bf00      	nop
 8006e20:	08006d65 	.word	0x08006d65
 8006e24:	200004c8 	.word	0x200004c8

08006e28 <_fwalk_sglue>:
 8006e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e2c:	4607      	mov	r7, r0
 8006e2e:	4688      	mov	r8, r1
 8006e30:	4614      	mov	r4, r2
 8006e32:	2600      	movs	r6, #0
 8006e34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e38:	f1b9 0901 	subs.w	r9, r9, #1
 8006e3c:	d505      	bpl.n	8006e4a <_fwalk_sglue+0x22>
 8006e3e:	6824      	ldr	r4, [r4, #0]
 8006e40:	2c00      	cmp	r4, #0
 8006e42:	d1f7      	bne.n	8006e34 <_fwalk_sglue+0xc>
 8006e44:	4630      	mov	r0, r6
 8006e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e4a:	89ab      	ldrh	r3, [r5, #12]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d907      	bls.n	8006e60 <_fwalk_sglue+0x38>
 8006e50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e54:	3301      	adds	r3, #1
 8006e56:	d003      	beq.n	8006e60 <_fwalk_sglue+0x38>
 8006e58:	4629      	mov	r1, r5
 8006e5a:	4638      	mov	r0, r7
 8006e5c:	47c0      	blx	r8
 8006e5e:	4306      	orrs	r6, r0
 8006e60:	3568      	adds	r5, #104	; 0x68
 8006e62:	e7e9      	b.n	8006e38 <_fwalk_sglue+0x10>

08006e64 <siprintf>:
 8006e64:	b40e      	push	{r1, r2, r3}
 8006e66:	b500      	push	{lr}
 8006e68:	b09c      	sub	sp, #112	; 0x70
 8006e6a:	ab1d      	add	r3, sp, #116	; 0x74
 8006e6c:	9002      	str	r0, [sp, #8]
 8006e6e:	9006      	str	r0, [sp, #24]
 8006e70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e74:	4809      	ldr	r0, [pc, #36]	; (8006e9c <siprintf+0x38>)
 8006e76:	9107      	str	r1, [sp, #28]
 8006e78:	9104      	str	r1, [sp, #16]
 8006e7a:	4909      	ldr	r1, [pc, #36]	; (8006ea0 <siprintf+0x3c>)
 8006e7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e80:	9105      	str	r1, [sp, #20]
 8006e82:	6800      	ldr	r0, [r0, #0]
 8006e84:	9301      	str	r3, [sp, #4]
 8006e86:	a902      	add	r1, sp, #8
 8006e88:	f001 fc0e 	bl	80086a8 <_svfiprintf_r>
 8006e8c:	9b02      	ldr	r3, [sp, #8]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	701a      	strb	r2, [r3, #0]
 8006e92:	b01c      	add	sp, #112	; 0x70
 8006e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e98:	b003      	add	sp, #12
 8006e9a:	4770      	bx	lr
 8006e9c:	20000078 	.word	0x20000078
 8006ea0:	ffff0208 	.word	0xffff0208

08006ea4 <__sread>:
 8006ea4:	b510      	push	{r4, lr}
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eac:	f000 f8da 	bl	8007064 <_read_r>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	bfab      	itete	ge
 8006eb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006eb6:	89a3      	ldrhlt	r3, [r4, #12]
 8006eb8:	181b      	addge	r3, r3, r0
 8006eba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ebe:	bfac      	ite	ge
 8006ec0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ec2:	81a3      	strhlt	r3, [r4, #12]
 8006ec4:	bd10      	pop	{r4, pc}

08006ec6 <__swrite>:
 8006ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eca:	461f      	mov	r7, r3
 8006ecc:	898b      	ldrh	r3, [r1, #12]
 8006ece:	05db      	lsls	r3, r3, #23
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	4616      	mov	r6, r2
 8006ed6:	d505      	bpl.n	8006ee4 <__swrite+0x1e>
 8006ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006edc:	2302      	movs	r3, #2
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f000 f8ae 	bl	8007040 <_lseek_r>
 8006ee4:	89a3      	ldrh	r3, [r4, #12]
 8006ee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eee:	81a3      	strh	r3, [r4, #12]
 8006ef0:	4632      	mov	r2, r6
 8006ef2:	463b      	mov	r3, r7
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006efa:	f000 b8d5 	b.w	80070a8 <_write_r>

08006efe <__sseek>:
 8006efe:	b510      	push	{r4, lr}
 8006f00:	460c      	mov	r4, r1
 8006f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f06:	f000 f89b 	bl	8007040 <_lseek_r>
 8006f0a:	1c43      	adds	r3, r0, #1
 8006f0c:	89a3      	ldrh	r3, [r4, #12]
 8006f0e:	bf15      	itete	ne
 8006f10:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f1a:	81a3      	strheq	r3, [r4, #12]
 8006f1c:	bf18      	it	ne
 8006f1e:	81a3      	strhne	r3, [r4, #12]
 8006f20:	bd10      	pop	{r4, pc}

08006f22 <__sclose>:
 8006f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f26:	f000 b87b 	b.w	8007020 <_close_r>

08006f2a <memset>:
 8006f2a:	4402      	add	r2, r0
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d100      	bne.n	8006f34 <memset+0xa>
 8006f32:	4770      	bx	lr
 8006f34:	f803 1b01 	strb.w	r1, [r3], #1
 8006f38:	e7f9      	b.n	8006f2e <memset+0x4>

08006f3a <strncmp>:
 8006f3a:	b510      	push	{r4, lr}
 8006f3c:	b16a      	cbz	r2, 8006f5a <strncmp+0x20>
 8006f3e:	3901      	subs	r1, #1
 8006f40:	1884      	adds	r4, r0, r2
 8006f42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f46:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d103      	bne.n	8006f56 <strncmp+0x1c>
 8006f4e:	42a0      	cmp	r0, r4
 8006f50:	d001      	beq.n	8006f56 <strncmp+0x1c>
 8006f52:	2a00      	cmp	r2, #0
 8006f54:	d1f5      	bne.n	8006f42 <strncmp+0x8>
 8006f56:	1ad0      	subs	r0, r2, r3
 8006f58:	bd10      	pop	{r4, pc}
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	e7fc      	b.n	8006f58 <strncmp+0x1e>
	...

08006f60 <strtok>:
 8006f60:	4b16      	ldr	r3, [pc, #88]	; (8006fbc <strtok+0x5c>)
 8006f62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f64:	681e      	ldr	r6, [r3, #0]
 8006f66:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8006f68:	4605      	mov	r5, r0
 8006f6a:	b9fc      	cbnz	r4, 8006fac <strtok+0x4c>
 8006f6c:	2050      	movs	r0, #80	; 0x50
 8006f6e:	9101      	str	r1, [sp, #4]
 8006f70:	f7ff f91a 	bl	80061a8 <malloc>
 8006f74:	9901      	ldr	r1, [sp, #4]
 8006f76:	6470      	str	r0, [r6, #68]	; 0x44
 8006f78:	4602      	mov	r2, r0
 8006f7a:	b920      	cbnz	r0, 8006f86 <strtok+0x26>
 8006f7c:	4b10      	ldr	r3, [pc, #64]	; (8006fc0 <strtok+0x60>)
 8006f7e:	4811      	ldr	r0, [pc, #68]	; (8006fc4 <strtok+0x64>)
 8006f80:	215b      	movs	r1, #91	; 0x5b
 8006f82:	f000 f8d7 	bl	8007134 <__assert_func>
 8006f86:	e9c0 4400 	strd	r4, r4, [r0]
 8006f8a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006f8e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006f92:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006f96:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006f9a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006f9e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006fa2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006fa6:	6184      	str	r4, [r0, #24]
 8006fa8:	7704      	strb	r4, [r0, #28]
 8006faa:	6244      	str	r4, [r0, #36]	; 0x24
 8006fac:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8006fae:	2301      	movs	r3, #1
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	b002      	add	sp, #8
 8006fb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006fb8:	f000 b806 	b.w	8006fc8 <__strtok_r>
 8006fbc:	20000078 	.word	0x20000078
 8006fc0:	0800a6c9 	.word	0x0800a6c9
 8006fc4:	0800a6e0 	.word	0x0800a6e0

08006fc8 <__strtok_r>:
 8006fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fca:	b908      	cbnz	r0, 8006fd0 <__strtok_r+0x8>
 8006fcc:	6810      	ldr	r0, [r2, #0]
 8006fce:	b188      	cbz	r0, 8006ff4 <__strtok_r+0x2c>
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006fd8:	460f      	mov	r7, r1
 8006fda:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006fde:	b91e      	cbnz	r6, 8006fe8 <__strtok_r+0x20>
 8006fe0:	b965      	cbnz	r5, 8006ffc <__strtok_r+0x34>
 8006fe2:	6015      	str	r5, [r2, #0]
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	e005      	b.n	8006ff4 <__strtok_r+0x2c>
 8006fe8:	42b5      	cmp	r5, r6
 8006fea:	d1f6      	bne.n	8006fda <__strtok_r+0x12>
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1f0      	bne.n	8006fd2 <__strtok_r+0xa>
 8006ff0:	6014      	str	r4, [r2, #0]
 8006ff2:	7003      	strb	r3, [r0, #0]
 8006ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ff6:	461c      	mov	r4, r3
 8006ff8:	e00c      	b.n	8007014 <__strtok_r+0x4c>
 8006ffa:	b915      	cbnz	r5, 8007002 <__strtok_r+0x3a>
 8006ffc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007000:	460e      	mov	r6, r1
 8007002:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007006:	42ab      	cmp	r3, r5
 8007008:	d1f7      	bne.n	8006ffa <__strtok_r+0x32>
 800700a:	2b00      	cmp	r3, #0
 800700c:	d0f3      	beq.n	8006ff6 <__strtok_r+0x2e>
 800700e:	2300      	movs	r3, #0
 8007010:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007014:	6014      	str	r4, [r2, #0]
 8007016:	e7ed      	b.n	8006ff4 <__strtok_r+0x2c>

08007018 <_localeconv_r>:
 8007018:	4800      	ldr	r0, [pc, #0]	; (800701c <_localeconv_r+0x4>)
 800701a:	4770      	bx	lr
 800701c:	2000016c 	.word	0x2000016c

08007020 <_close_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4d06      	ldr	r5, [pc, #24]	; (800703c <_close_r+0x1c>)
 8007024:	2300      	movs	r3, #0
 8007026:	4604      	mov	r4, r0
 8007028:	4608      	mov	r0, r1
 800702a:	602b      	str	r3, [r5, #0]
 800702c:	f7fb fe0d 	bl	8002c4a <_close>
 8007030:	1c43      	adds	r3, r0, #1
 8007032:	d102      	bne.n	800703a <_close_r+0x1a>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	b103      	cbz	r3, 800703a <_close_r+0x1a>
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	bd38      	pop	{r3, r4, r5, pc}
 800703c:	200004cc 	.word	0x200004cc

08007040 <_lseek_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4d07      	ldr	r5, [pc, #28]	; (8007060 <_lseek_r+0x20>)
 8007044:	4604      	mov	r4, r0
 8007046:	4608      	mov	r0, r1
 8007048:	4611      	mov	r1, r2
 800704a:	2200      	movs	r2, #0
 800704c:	602a      	str	r2, [r5, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	f7fb fe22 	bl	8002c98 <_lseek>
 8007054:	1c43      	adds	r3, r0, #1
 8007056:	d102      	bne.n	800705e <_lseek_r+0x1e>
 8007058:	682b      	ldr	r3, [r5, #0]
 800705a:	b103      	cbz	r3, 800705e <_lseek_r+0x1e>
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	200004cc 	.word	0x200004cc

08007064 <_read_r>:
 8007064:	b538      	push	{r3, r4, r5, lr}
 8007066:	4d07      	ldr	r5, [pc, #28]	; (8007084 <_read_r+0x20>)
 8007068:	4604      	mov	r4, r0
 800706a:	4608      	mov	r0, r1
 800706c:	4611      	mov	r1, r2
 800706e:	2200      	movs	r2, #0
 8007070:	602a      	str	r2, [r5, #0]
 8007072:	461a      	mov	r2, r3
 8007074:	f7fb fdb0 	bl	8002bd8 <_read>
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	d102      	bne.n	8007082 <_read_r+0x1e>
 800707c:	682b      	ldr	r3, [r5, #0]
 800707e:	b103      	cbz	r3, 8007082 <_read_r+0x1e>
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	200004cc 	.word	0x200004cc

08007088 <_sbrk_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	4d06      	ldr	r5, [pc, #24]	; (80070a4 <_sbrk_r+0x1c>)
 800708c:	2300      	movs	r3, #0
 800708e:	4604      	mov	r4, r0
 8007090:	4608      	mov	r0, r1
 8007092:	602b      	str	r3, [r5, #0]
 8007094:	f7fb fe0e 	bl	8002cb4 <_sbrk>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_sbrk_r+0x1a>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_sbrk_r+0x1a>
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	200004cc 	.word	0x200004cc

080070a8 <_write_r>:
 80070a8:	b538      	push	{r3, r4, r5, lr}
 80070aa:	4d07      	ldr	r5, [pc, #28]	; (80070c8 <_write_r+0x20>)
 80070ac:	4604      	mov	r4, r0
 80070ae:	4608      	mov	r0, r1
 80070b0:	4611      	mov	r1, r2
 80070b2:	2200      	movs	r2, #0
 80070b4:	602a      	str	r2, [r5, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	f7fb fdab 	bl	8002c12 <_write>
 80070bc:	1c43      	adds	r3, r0, #1
 80070be:	d102      	bne.n	80070c6 <_write_r+0x1e>
 80070c0:	682b      	ldr	r3, [r5, #0]
 80070c2:	b103      	cbz	r3, 80070c6 <_write_r+0x1e>
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	bd38      	pop	{r3, r4, r5, pc}
 80070c8:	200004cc 	.word	0x200004cc

080070cc <__errno>:
 80070cc:	4b01      	ldr	r3, [pc, #4]	; (80070d4 <__errno+0x8>)
 80070ce:	6818      	ldr	r0, [r3, #0]
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	20000078 	.word	0x20000078

080070d8 <__libc_init_array>:
 80070d8:	b570      	push	{r4, r5, r6, lr}
 80070da:	4d0d      	ldr	r5, [pc, #52]	; (8007110 <__libc_init_array+0x38>)
 80070dc:	4c0d      	ldr	r4, [pc, #52]	; (8007114 <__libc_init_array+0x3c>)
 80070de:	1b64      	subs	r4, r4, r5
 80070e0:	10a4      	asrs	r4, r4, #2
 80070e2:	2600      	movs	r6, #0
 80070e4:	42a6      	cmp	r6, r4
 80070e6:	d109      	bne.n	80070fc <__libc_init_array+0x24>
 80070e8:	4d0b      	ldr	r5, [pc, #44]	; (8007118 <__libc_init_array+0x40>)
 80070ea:	4c0c      	ldr	r4, [pc, #48]	; (800711c <__libc_init_array+0x44>)
 80070ec:	f003 f97c 	bl	800a3e8 <_init>
 80070f0:	1b64      	subs	r4, r4, r5
 80070f2:	10a4      	asrs	r4, r4, #2
 80070f4:	2600      	movs	r6, #0
 80070f6:	42a6      	cmp	r6, r4
 80070f8:	d105      	bne.n	8007106 <__libc_init_array+0x2e>
 80070fa:	bd70      	pop	{r4, r5, r6, pc}
 80070fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007100:	4798      	blx	r3
 8007102:	3601      	adds	r6, #1
 8007104:	e7ee      	b.n	80070e4 <__libc_init_array+0xc>
 8007106:	f855 3b04 	ldr.w	r3, [r5], #4
 800710a:	4798      	blx	r3
 800710c:	3601      	adds	r6, #1
 800710e:	e7f2      	b.n	80070f6 <__libc_init_array+0x1e>
 8007110:	0800aa08 	.word	0x0800aa08
 8007114:	0800aa08 	.word	0x0800aa08
 8007118:	0800aa08 	.word	0x0800aa08
 800711c:	0800aa0c 	.word	0x0800aa0c

08007120 <__retarget_lock_acquire_recursive>:
 8007120:	4770      	bx	lr

08007122 <__retarget_lock_release_recursive>:
 8007122:	4770      	bx	lr

08007124 <strcpy>:
 8007124:	4603      	mov	r3, r0
 8007126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800712a:	f803 2b01 	strb.w	r2, [r3], #1
 800712e:	2a00      	cmp	r2, #0
 8007130:	d1f9      	bne.n	8007126 <strcpy+0x2>
 8007132:	4770      	bx	lr

08007134 <__assert_func>:
 8007134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007136:	4614      	mov	r4, r2
 8007138:	461a      	mov	r2, r3
 800713a:	4b09      	ldr	r3, [pc, #36]	; (8007160 <__assert_func+0x2c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4605      	mov	r5, r0
 8007140:	68d8      	ldr	r0, [r3, #12]
 8007142:	b14c      	cbz	r4, 8007158 <__assert_func+0x24>
 8007144:	4b07      	ldr	r3, [pc, #28]	; (8007164 <__assert_func+0x30>)
 8007146:	9100      	str	r1, [sp, #0]
 8007148:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800714c:	4906      	ldr	r1, [pc, #24]	; (8007168 <__assert_func+0x34>)
 800714e:	462b      	mov	r3, r5
 8007150:	f001 fc56 	bl	8008a00 <fiprintf>
 8007154:	f001 fc8e 	bl	8008a74 <abort>
 8007158:	4b04      	ldr	r3, [pc, #16]	; (800716c <__assert_func+0x38>)
 800715a:	461c      	mov	r4, r3
 800715c:	e7f3      	b.n	8007146 <__assert_func+0x12>
 800715e:	bf00      	nop
 8007160:	20000078 	.word	0x20000078
 8007164:	0800a73a 	.word	0x0800a73a
 8007168:	0800a747 	.word	0x0800a747
 800716c:	0800a775 	.word	0x0800a775

08007170 <quorem>:
 8007170:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007174:	6903      	ldr	r3, [r0, #16]
 8007176:	690c      	ldr	r4, [r1, #16]
 8007178:	42a3      	cmp	r3, r4
 800717a:	4607      	mov	r7, r0
 800717c:	db7e      	blt.n	800727c <quorem+0x10c>
 800717e:	3c01      	subs	r4, #1
 8007180:	f101 0814 	add.w	r8, r1, #20
 8007184:	f100 0514 	add.w	r5, r0, #20
 8007188:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800718c:	9301      	str	r3, [sp, #4]
 800718e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007192:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007196:	3301      	adds	r3, #1
 8007198:	429a      	cmp	r2, r3
 800719a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800719e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80071a6:	d331      	bcc.n	800720c <quorem+0x9c>
 80071a8:	f04f 0e00 	mov.w	lr, #0
 80071ac:	4640      	mov	r0, r8
 80071ae:	46ac      	mov	ip, r5
 80071b0:	46f2      	mov	sl, lr
 80071b2:	f850 2b04 	ldr.w	r2, [r0], #4
 80071b6:	b293      	uxth	r3, r2
 80071b8:	fb06 e303 	mla	r3, r6, r3, lr
 80071bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80071c0:	0c1a      	lsrs	r2, r3, #16
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	ebaa 0303 	sub.w	r3, sl, r3
 80071c8:	f8dc a000 	ldr.w	sl, [ip]
 80071cc:	fa13 f38a 	uxtah	r3, r3, sl
 80071d0:	fb06 220e 	mla	r2, r6, lr, r2
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	9b00      	ldr	r3, [sp, #0]
 80071d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80071dc:	b292      	uxth	r2, r2
 80071de:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80071e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071e6:	f8bd 3000 	ldrh.w	r3, [sp]
 80071ea:	4581      	cmp	r9, r0
 80071ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071f0:	f84c 3b04 	str.w	r3, [ip], #4
 80071f4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80071f8:	d2db      	bcs.n	80071b2 <quorem+0x42>
 80071fa:	f855 300b 	ldr.w	r3, [r5, fp]
 80071fe:	b92b      	cbnz	r3, 800720c <quorem+0x9c>
 8007200:	9b01      	ldr	r3, [sp, #4]
 8007202:	3b04      	subs	r3, #4
 8007204:	429d      	cmp	r5, r3
 8007206:	461a      	mov	r2, r3
 8007208:	d32c      	bcc.n	8007264 <quorem+0xf4>
 800720a:	613c      	str	r4, [r7, #16]
 800720c:	4638      	mov	r0, r7
 800720e:	f001 f8f1 	bl	80083f4 <__mcmp>
 8007212:	2800      	cmp	r0, #0
 8007214:	db22      	blt.n	800725c <quorem+0xec>
 8007216:	3601      	adds	r6, #1
 8007218:	4629      	mov	r1, r5
 800721a:	2000      	movs	r0, #0
 800721c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007220:	f8d1 c000 	ldr.w	ip, [r1]
 8007224:	b293      	uxth	r3, r2
 8007226:	1ac3      	subs	r3, r0, r3
 8007228:	0c12      	lsrs	r2, r2, #16
 800722a:	fa13 f38c 	uxtah	r3, r3, ip
 800722e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007232:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007236:	b29b      	uxth	r3, r3
 8007238:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800723c:	45c1      	cmp	r9, r8
 800723e:	f841 3b04 	str.w	r3, [r1], #4
 8007242:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007246:	d2e9      	bcs.n	800721c <quorem+0xac>
 8007248:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800724c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007250:	b922      	cbnz	r2, 800725c <quorem+0xec>
 8007252:	3b04      	subs	r3, #4
 8007254:	429d      	cmp	r5, r3
 8007256:	461a      	mov	r2, r3
 8007258:	d30a      	bcc.n	8007270 <quorem+0x100>
 800725a:	613c      	str	r4, [r7, #16]
 800725c:	4630      	mov	r0, r6
 800725e:	b003      	add	sp, #12
 8007260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007264:	6812      	ldr	r2, [r2, #0]
 8007266:	3b04      	subs	r3, #4
 8007268:	2a00      	cmp	r2, #0
 800726a:	d1ce      	bne.n	800720a <quorem+0x9a>
 800726c:	3c01      	subs	r4, #1
 800726e:	e7c9      	b.n	8007204 <quorem+0x94>
 8007270:	6812      	ldr	r2, [r2, #0]
 8007272:	3b04      	subs	r3, #4
 8007274:	2a00      	cmp	r2, #0
 8007276:	d1f0      	bne.n	800725a <quorem+0xea>
 8007278:	3c01      	subs	r4, #1
 800727a:	e7eb      	b.n	8007254 <quorem+0xe4>
 800727c:	2000      	movs	r0, #0
 800727e:	e7ee      	b.n	800725e <quorem+0xee>

08007280 <_dtoa_r>:
 8007280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007284:	ed2d 8b04 	vpush	{d8-d9}
 8007288:	69c5      	ldr	r5, [r0, #28]
 800728a:	b093      	sub	sp, #76	; 0x4c
 800728c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007290:	ec57 6b10 	vmov	r6, r7, d0
 8007294:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007298:	9107      	str	r1, [sp, #28]
 800729a:	4604      	mov	r4, r0
 800729c:	920a      	str	r2, [sp, #40]	; 0x28
 800729e:	930d      	str	r3, [sp, #52]	; 0x34
 80072a0:	b975      	cbnz	r5, 80072c0 <_dtoa_r+0x40>
 80072a2:	2010      	movs	r0, #16
 80072a4:	f7fe ff80 	bl	80061a8 <malloc>
 80072a8:	4602      	mov	r2, r0
 80072aa:	61e0      	str	r0, [r4, #28]
 80072ac:	b920      	cbnz	r0, 80072b8 <_dtoa_r+0x38>
 80072ae:	4bae      	ldr	r3, [pc, #696]	; (8007568 <_dtoa_r+0x2e8>)
 80072b0:	21ef      	movs	r1, #239	; 0xef
 80072b2:	48ae      	ldr	r0, [pc, #696]	; (800756c <_dtoa_r+0x2ec>)
 80072b4:	f7ff ff3e 	bl	8007134 <__assert_func>
 80072b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80072bc:	6005      	str	r5, [r0, #0]
 80072be:	60c5      	str	r5, [r0, #12]
 80072c0:	69e3      	ldr	r3, [r4, #28]
 80072c2:	6819      	ldr	r1, [r3, #0]
 80072c4:	b151      	cbz	r1, 80072dc <_dtoa_r+0x5c>
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	604a      	str	r2, [r1, #4]
 80072ca:	2301      	movs	r3, #1
 80072cc:	4093      	lsls	r3, r2
 80072ce:	608b      	str	r3, [r1, #8]
 80072d0:	4620      	mov	r0, r4
 80072d2:	f000 fe53 	bl	8007f7c <_Bfree>
 80072d6:	69e3      	ldr	r3, [r4, #28]
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	1e3b      	subs	r3, r7, #0
 80072de:	bfbb      	ittet	lt
 80072e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80072e4:	9303      	strlt	r3, [sp, #12]
 80072e6:	2300      	movge	r3, #0
 80072e8:	2201      	movlt	r2, #1
 80072ea:	bfac      	ite	ge
 80072ec:	f8c8 3000 	strge.w	r3, [r8]
 80072f0:	f8c8 2000 	strlt.w	r2, [r8]
 80072f4:	4b9e      	ldr	r3, [pc, #632]	; (8007570 <_dtoa_r+0x2f0>)
 80072f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80072fa:	ea33 0308 	bics.w	r3, r3, r8
 80072fe:	d11b      	bne.n	8007338 <_dtoa_r+0xb8>
 8007300:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007302:	f242 730f 	movw	r3, #9999	; 0x270f
 8007306:	6013      	str	r3, [r2, #0]
 8007308:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800730c:	4333      	orrs	r3, r6
 800730e:	f000 8593 	beq.w	8007e38 <_dtoa_r+0xbb8>
 8007312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007314:	b963      	cbnz	r3, 8007330 <_dtoa_r+0xb0>
 8007316:	4b97      	ldr	r3, [pc, #604]	; (8007574 <_dtoa_r+0x2f4>)
 8007318:	e027      	b.n	800736a <_dtoa_r+0xea>
 800731a:	4b97      	ldr	r3, [pc, #604]	; (8007578 <_dtoa_r+0x2f8>)
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	3308      	adds	r3, #8
 8007320:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007322:	6013      	str	r3, [r2, #0]
 8007324:	9800      	ldr	r0, [sp, #0]
 8007326:	b013      	add	sp, #76	; 0x4c
 8007328:	ecbd 8b04 	vpop	{d8-d9}
 800732c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007330:	4b90      	ldr	r3, [pc, #576]	; (8007574 <_dtoa_r+0x2f4>)
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	3303      	adds	r3, #3
 8007336:	e7f3      	b.n	8007320 <_dtoa_r+0xa0>
 8007338:	ed9d 7b02 	vldr	d7, [sp, #8]
 800733c:	2200      	movs	r2, #0
 800733e:	ec51 0b17 	vmov	r0, r1, d7
 8007342:	eeb0 8a47 	vmov.f32	s16, s14
 8007346:	eef0 8a67 	vmov.f32	s17, s15
 800734a:	2300      	movs	r3, #0
 800734c:	f7f9 fbc4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007350:	4681      	mov	r9, r0
 8007352:	b160      	cbz	r0, 800736e <_dtoa_r+0xee>
 8007354:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007356:	2301      	movs	r3, #1
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 8568 	beq.w	8007e32 <_dtoa_r+0xbb2>
 8007362:	4b86      	ldr	r3, [pc, #536]	; (800757c <_dtoa_r+0x2fc>)
 8007364:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007366:	6013      	str	r3, [r2, #0]
 8007368:	3b01      	subs	r3, #1
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	e7da      	b.n	8007324 <_dtoa_r+0xa4>
 800736e:	aa10      	add	r2, sp, #64	; 0x40
 8007370:	a911      	add	r1, sp, #68	; 0x44
 8007372:	4620      	mov	r0, r4
 8007374:	eeb0 0a48 	vmov.f32	s0, s16
 8007378:	eef0 0a68 	vmov.f32	s1, s17
 800737c:	f001 f8e0 	bl	8008540 <__d2b>
 8007380:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007384:	4682      	mov	sl, r0
 8007386:	2d00      	cmp	r5, #0
 8007388:	d07f      	beq.n	800748a <_dtoa_r+0x20a>
 800738a:	ee18 3a90 	vmov	r3, s17
 800738e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007392:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007396:	ec51 0b18 	vmov	r0, r1, d8
 800739a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800739e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80073a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80073a6:	4619      	mov	r1, r3
 80073a8:	2200      	movs	r2, #0
 80073aa:	4b75      	ldr	r3, [pc, #468]	; (8007580 <_dtoa_r+0x300>)
 80073ac:	f7f8 ff74 	bl	8000298 <__aeabi_dsub>
 80073b0:	a367      	add	r3, pc, #412	; (adr r3, 8007550 <_dtoa_r+0x2d0>)
 80073b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b6:	f7f9 f927 	bl	8000608 <__aeabi_dmul>
 80073ba:	a367      	add	r3, pc, #412	; (adr r3, 8007558 <_dtoa_r+0x2d8>)
 80073bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c0:	f7f8 ff6c 	bl	800029c <__adddf3>
 80073c4:	4606      	mov	r6, r0
 80073c6:	4628      	mov	r0, r5
 80073c8:	460f      	mov	r7, r1
 80073ca:	f7f9 f8b3 	bl	8000534 <__aeabi_i2d>
 80073ce:	a364      	add	r3, pc, #400	; (adr r3, 8007560 <_dtoa_r+0x2e0>)
 80073d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d4:	f7f9 f918 	bl	8000608 <__aeabi_dmul>
 80073d8:	4602      	mov	r2, r0
 80073da:	460b      	mov	r3, r1
 80073dc:	4630      	mov	r0, r6
 80073de:	4639      	mov	r1, r7
 80073e0:	f7f8 ff5c 	bl	800029c <__adddf3>
 80073e4:	4606      	mov	r6, r0
 80073e6:	460f      	mov	r7, r1
 80073e8:	f7f9 fbbe 	bl	8000b68 <__aeabi_d2iz>
 80073ec:	2200      	movs	r2, #0
 80073ee:	4683      	mov	fp, r0
 80073f0:	2300      	movs	r3, #0
 80073f2:	4630      	mov	r0, r6
 80073f4:	4639      	mov	r1, r7
 80073f6:	f7f9 fb79 	bl	8000aec <__aeabi_dcmplt>
 80073fa:	b148      	cbz	r0, 8007410 <_dtoa_r+0x190>
 80073fc:	4658      	mov	r0, fp
 80073fe:	f7f9 f899 	bl	8000534 <__aeabi_i2d>
 8007402:	4632      	mov	r2, r6
 8007404:	463b      	mov	r3, r7
 8007406:	f7f9 fb67 	bl	8000ad8 <__aeabi_dcmpeq>
 800740a:	b908      	cbnz	r0, 8007410 <_dtoa_r+0x190>
 800740c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007410:	f1bb 0f16 	cmp.w	fp, #22
 8007414:	d857      	bhi.n	80074c6 <_dtoa_r+0x246>
 8007416:	4b5b      	ldr	r3, [pc, #364]	; (8007584 <_dtoa_r+0x304>)
 8007418:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800741c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007420:	ec51 0b18 	vmov	r0, r1, d8
 8007424:	f7f9 fb62 	bl	8000aec <__aeabi_dcmplt>
 8007428:	2800      	cmp	r0, #0
 800742a:	d04e      	beq.n	80074ca <_dtoa_r+0x24a>
 800742c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007430:	2300      	movs	r3, #0
 8007432:	930c      	str	r3, [sp, #48]	; 0x30
 8007434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007436:	1b5b      	subs	r3, r3, r5
 8007438:	1e5a      	subs	r2, r3, #1
 800743a:	bf45      	ittet	mi
 800743c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007440:	9305      	strmi	r3, [sp, #20]
 8007442:	2300      	movpl	r3, #0
 8007444:	2300      	movmi	r3, #0
 8007446:	9206      	str	r2, [sp, #24]
 8007448:	bf54      	ite	pl
 800744a:	9305      	strpl	r3, [sp, #20]
 800744c:	9306      	strmi	r3, [sp, #24]
 800744e:	f1bb 0f00 	cmp.w	fp, #0
 8007452:	db3c      	blt.n	80074ce <_dtoa_r+0x24e>
 8007454:	9b06      	ldr	r3, [sp, #24]
 8007456:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800745a:	445b      	add	r3, fp
 800745c:	9306      	str	r3, [sp, #24]
 800745e:	2300      	movs	r3, #0
 8007460:	9308      	str	r3, [sp, #32]
 8007462:	9b07      	ldr	r3, [sp, #28]
 8007464:	2b09      	cmp	r3, #9
 8007466:	d868      	bhi.n	800753a <_dtoa_r+0x2ba>
 8007468:	2b05      	cmp	r3, #5
 800746a:	bfc4      	itt	gt
 800746c:	3b04      	subgt	r3, #4
 800746e:	9307      	strgt	r3, [sp, #28]
 8007470:	9b07      	ldr	r3, [sp, #28]
 8007472:	f1a3 0302 	sub.w	r3, r3, #2
 8007476:	bfcc      	ite	gt
 8007478:	2500      	movgt	r5, #0
 800747a:	2501      	movle	r5, #1
 800747c:	2b03      	cmp	r3, #3
 800747e:	f200 8085 	bhi.w	800758c <_dtoa_r+0x30c>
 8007482:	e8df f003 	tbb	[pc, r3]
 8007486:	3b2e      	.short	0x3b2e
 8007488:	5839      	.short	0x5839
 800748a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800748e:	441d      	add	r5, r3
 8007490:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007494:	2b20      	cmp	r3, #32
 8007496:	bfc1      	itttt	gt
 8007498:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800749c:	fa08 f803 	lslgt.w	r8, r8, r3
 80074a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80074a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80074a8:	bfd6      	itet	le
 80074aa:	f1c3 0320 	rsble	r3, r3, #32
 80074ae:	ea48 0003 	orrgt.w	r0, r8, r3
 80074b2:	fa06 f003 	lslle.w	r0, r6, r3
 80074b6:	f7f9 f82d 	bl	8000514 <__aeabi_ui2d>
 80074ba:	2201      	movs	r2, #1
 80074bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80074c0:	3d01      	subs	r5, #1
 80074c2:	920e      	str	r2, [sp, #56]	; 0x38
 80074c4:	e76f      	b.n	80073a6 <_dtoa_r+0x126>
 80074c6:	2301      	movs	r3, #1
 80074c8:	e7b3      	b.n	8007432 <_dtoa_r+0x1b2>
 80074ca:	900c      	str	r0, [sp, #48]	; 0x30
 80074cc:	e7b2      	b.n	8007434 <_dtoa_r+0x1b4>
 80074ce:	9b05      	ldr	r3, [sp, #20]
 80074d0:	eba3 030b 	sub.w	r3, r3, fp
 80074d4:	9305      	str	r3, [sp, #20]
 80074d6:	f1cb 0300 	rsb	r3, fp, #0
 80074da:	9308      	str	r3, [sp, #32]
 80074dc:	2300      	movs	r3, #0
 80074de:	930b      	str	r3, [sp, #44]	; 0x2c
 80074e0:	e7bf      	b.n	8007462 <_dtoa_r+0x1e2>
 80074e2:	2300      	movs	r3, #0
 80074e4:	9309      	str	r3, [sp, #36]	; 0x24
 80074e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	dc52      	bgt.n	8007592 <_dtoa_r+0x312>
 80074ec:	2301      	movs	r3, #1
 80074ee:	9301      	str	r3, [sp, #4]
 80074f0:	9304      	str	r3, [sp, #16]
 80074f2:	461a      	mov	r2, r3
 80074f4:	920a      	str	r2, [sp, #40]	; 0x28
 80074f6:	e00b      	b.n	8007510 <_dtoa_r+0x290>
 80074f8:	2301      	movs	r3, #1
 80074fa:	e7f3      	b.n	80074e4 <_dtoa_r+0x264>
 80074fc:	2300      	movs	r3, #0
 80074fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007502:	445b      	add	r3, fp
 8007504:	9301      	str	r3, [sp, #4]
 8007506:	3301      	adds	r3, #1
 8007508:	2b01      	cmp	r3, #1
 800750a:	9304      	str	r3, [sp, #16]
 800750c:	bfb8      	it	lt
 800750e:	2301      	movlt	r3, #1
 8007510:	69e0      	ldr	r0, [r4, #28]
 8007512:	2100      	movs	r1, #0
 8007514:	2204      	movs	r2, #4
 8007516:	f102 0614 	add.w	r6, r2, #20
 800751a:	429e      	cmp	r6, r3
 800751c:	d93d      	bls.n	800759a <_dtoa_r+0x31a>
 800751e:	6041      	str	r1, [r0, #4]
 8007520:	4620      	mov	r0, r4
 8007522:	f000 fceb 	bl	8007efc <_Balloc>
 8007526:	9000      	str	r0, [sp, #0]
 8007528:	2800      	cmp	r0, #0
 800752a:	d139      	bne.n	80075a0 <_dtoa_r+0x320>
 800752c:	4b16      	ldr	r3, [pc, #88]	; (8007588 <_dtoa_r+0x308>)
 800752e:	4602      	mov	r2, r0
 8007530:	f240 11af 	movw	r1, #431	; 0x1af
 8007534:	e6bd      	b.n	80072b2 <_dtoa_r+0x32>
 8007536:	2301      	movs	r3, #1
 8007538:	e7e1      	b.n	80074fe <_dtoa_r+0x27e>
 800753a:	2501      	movs	r5, #1
 800753c:	2300      	movs	r3, #0
 800753e:	9307      	str	r3, [sp, #28]
 8007540:	9509      	str	r5, [sp, #36]	; 0x24
 8007542:	f04f 33ff 	mov.w	r3, #4294967295
 8007546:	9301      	str	r3, [sp, #4]
 8007548:	9304      	str	r3, [sp, #16]
 800754a:	2200      	movs	r2, #0
 800754c:	2312      	movs	r3, #18
 800754e:	e7d1      	b.n	80074f4 <_dtoa_r+0x274>
 8007550:	636f4361 	.word	0x636f4361
 8007554:	3fd287a7 	.word	0x3fd287a7
 8007558:	8b60c8b3 	.word	0x8b60c8b3
 800755c:	3fc68a28 	.word	0x3fc68a28
 8007560:	509f79fb 	.word	0x509f79fb
 8007564:	3fd34413 	.word	0x3fd34413
 8007568:	0800a6c9 	.word	0x0800a6c9
 800756c:	0800a783 	.word	0x0800a783
 8007570:	7ff00000 	.word	0x7ff00000
 8007574:	0800a77f 	.word	0x0800a77f
 8007578:	0800a776 	.word	0x0800a776
 800757c:	0800a6a6 	.word	0x0800a6a6
 8007580:	3ff80000 	.word	0x3ff80000
 8007584:	0800a870 	.word	0x0800a870
 8007588:	0800a7db 	.word	0x0800a7db
 800758c:	2301      	movs	r3, #1
 800758e:	9309      	str	r3, [sp, #36]	; 0x24
 8007590:	e7d7      	b.n	8007542 <_dtoa_r+0x2c2>
 8007592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007594:	9301      	str	r3, [sp, #4]
 8007596:	9304      	str	r3, [sp, #16]
 8007598:	e7ba      	b.n	8007510 <_dtoa_r+0x290>
 800759a:	3101      	adds	r1, #1
 800759c:	0052      	lsls	r2, r2, #1
 800759e:	e7ba      	b.n	8007516 <_dtoa_r+0x296>
 80075a0:	69e3      	ldr	r3, [r4, #28]
 80075a2:	9a00      	ldr	r2, [sp, #0]
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	9b04      	ldr	r3, [sp, #16]
 80075a8:	2b0e      	cmp	r3, #14
 80075aa:	f200 80a8 	bhi.w	80076fe <_dtoa_r+0x47e>
 80075ae:	2d00      	cmp	r5, #0
 80075b0:	f000 80a5 	beq.w	80076fe <_dtoa_r+0x47e>
 80075b4:	f1bb 0f00 	cmp.w	fp, #0
 80075b8:	dd38      	ble.n	800762c <_dtoa_r+0x3ac>
 80075ba:	4bc0      	ldr	r3, [pc, #768]	; (80078bc <_dtoa_r+0x63c>)
 80075bc:	f00b 020f 	and.w	r2, fp, #15
 80075c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80075c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80075cc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80075d0:	d019      	beq.n	8007606 <_dtoa_r+0x386>
 80075d2:	4bbb      	ldr	r3, [pc, #748]	; (80078c0 <_dtoa_r+0x640>)
 80075d4:	ec51 0b18 	vmov	r0, r1, d8
 80075d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075dc:	f7f9 f93e 	bl	800085c <__aeabi_ddiv>
 80075e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075e4:	f008 080f 	and.w	r8, r8, #15
 80075e8:	2503      	movs	r5, #3
 80075ea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80078c0 <_dtoa_r+0x640>
 80075ee:	f1b8 0f00 	cmp.w	r8, #0
 80075f2:	d10a      	bne.n	800760a <_dtoa_r+0x38a>
 80075f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075f8:	4632      	mov	r2, r6
 80075fa:	463b      	mov	r3, r7
 80075fc:	f7f9 f92e 	bl	800085c <__aeabi_ddiv>
 8007600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007604:	e02b      	b.n	800765e <_dtoa_r+0x3de>
 8007606:	2502      	movs	r5, #2
 8007608:	e7ef      	b.n	80075ea <_dtoa_r+0x36a>
 800760a:	f018 0f01 	tst.w	r8, #1
 800760e:	d008      	beq.n	8007622 <_dtoa_r+0x3a2>
 8007610:	4630      	mov	r0, r6
 8007612:	4639      	mov	r1, r7
 8007614:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007618:	f7f8 fff6 	bl	8000608 <__aeabi_dmul>
 800761c:	3501      	adds	r5, #1
 800761e:	4606      	mov	r6, r0
 8007620:	460f      	mov	r7, r1
 8007622:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007626:	f109 0908 	add.w	r9, r9, #8
 800762a:	e7e0      	b.n	80075ee <_dtoa_r+0x36e>
 800762c:	f000 809f 	beq.w	800776e <_dtoa_r+0x4ee>
 8007630:	f1cb 0600 	rsb	r6, fp, #0
 8007634:	4ba1      	ldr	r3, [pc, #644]	; (80078bc <_dtoa_r+0x63c>)
 8007636:	4fa2      	ldr	r7, [pc, #648]	; (80078c0 <_dtoa_r+0x640>)
 8007638:	f006 020f 	and.w	r2, r6, #15
 800763c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	ec51 0b18 	vmov	r0, r1, d8
 8007648:	f7f8 ffde 	bl	8000608 <__aeabi_dmul>
 800764c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007650:	1136      	asrs	r6, r6, #4
 8007652:	2300      	movs	r3, #0
 8007654:	2502      	movs	r5, #2
 8007656:	2e00      	cmp	r6, #0
 8007658:	d17e      	bne.n	8007758 <_dtoa_r+0x4d8>
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1d0      	bne.n	8007600 <_dtoa_r+0x380>
 800765e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007660:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 8084 	beq.w	8007772 <_dtoa_r+0x4f2>
 800766a:	4b96      	ldr	r3, [pc, #600]	; (80078c4 <_dtoa_r+0x644>)
 800766c:	2200      	movs	r2, #0
 800766e:	4640      	mov	r0, r8
 8007670:	4649      	mov	r1, r9
 8007672:	f7f9 fa3b 	bl	8000aec <__aeabi_dcmplt>
 8007676:	2800      	cmp	r0, #0
 8007678:	d07b      	beq.n	8007772 <_dtoa_r+0x4f2>
 800767a:	9b04      	ldr	r3, [sp, #16]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d078      	beq.n	8007772 <_dtoa_r+0x4f2>
 8007680:	9b01      	ldr	r3, [sp, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	dd39      	ble.n	80076fa <_dtoa_r+0x47a>
 8007686:	4b90      	ldr	r3, [pc, #576]	; (80078c8 <_dtoa_r+0x648>)
 8007688:	2200      	movs	r2, #0
 800768a:	4640      	mov	r0, r8
 800768c:	4649      	mov	r1, r9
 800768e:	f7f8 ffbb 	bl	8000608 <__aeabi_dmul>
 8007692:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007696:	9e01      	ldr	r6, [sp, #4]
 8007698:	f10b 37ff 	add.w	r7, fp, #4294967295
 800769c:	3501      	adds	r5, #1
 800769e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80076a2:	4628      	mov	r0, r5
 80076a4:	f7f8 ff46 	bl	8000534 <__aeabi_i2d>
 80076a8:	4642      	mov	r2, r8
 80076aa:	464b      	mov	r3, r9
 80076ac:	f7f8 ffac 	bl	8000608 <__aeabi_dmul>
 80076b0:	4b86      	ldr	r3, [pc, #536]	; (80078cc <_dtoa_r+0x64c>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	f7f8 fdf2 	bl	800029c <__adddf3>
 80076b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80076bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076c0:	9303      	str	r3, [sp, #12]
 80076c2:	2e00      	cmp	r6, #0
 80076c4:	d158      	bne.n	8007778 <_dtoa_r+0x4f8>
 80076c6:	4b82      	ldr	r3, [pc, #520]	; (80078d0 <_dtoa_r+0x650>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	4640      	mov	r0, r8
 80076cc:	4649      	mov	r1, r9
 80076ce:	f7f8 fde3 	bl	8000298 <__aeabi_dsub>
 80076d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076d6:	4680      	mov	r8, r0
 80076d8:	4689      	mov	r9, r1
 80076da:	f7f9 fa25 	bl	8000b28 <__aeabi_dcmpgt>
 80076de:	2800      	cmp	r0, #0
 80076e0:	f040 8296 	bne.w	8007c10 <_dtoa_r+0x990>
 80076e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80076e8:	4640      	mov	r0, r8
 80076ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076ee:	4649      	mov	r1, r9
 80076f0:	f7f9 f9fc 	bl	8000aec <__aeabi_dcmplt>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	f040 8289 	bne.w	8007c0c <_dtoa_r+0x98c>
 80076fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80076fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007700:	2b00      	cmp	r3, #0
 8007702:	f2c0 814e 	blt.w	80079a2 <_dtoa_r+0x722>
 8007706:	f1bb 0f0e 	cmp.w	fp, #14
 800770a:	f300 814a 	bgt.w	80079a2 <_dtoa_r+0x722>
 800770e:	4b6b      	ldr	r3, [pc, #428]	; (80078bc <_dtoa_r+0x63c>)
 8007710:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007714:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800771a:	2b00      	cmp	r3, #0
 800771c:	f280 80dc 	bge.w	80078d8 <_dtoa_r+0x658>
 8007720:	9b04      	ldr	r3, [sp, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	f300 80d8 	bgt.w	80078d8 <_dtoa_r+0x658>
 8007728:	f040 826f 	bne.w	8007c0a <_dtoa_r+0x98a>
 800772c:	4b68      	ldr	r3, [pc, #416]	; (80078d0 <_dtoa_r+0x650>)
 800772e:	2200      	movs	r2, #0
 8007730:	4640      	mov	r0, r8
 8007732:	4649      	mov	r1, r9
 8007734:	f7f8 ff68 	bl	8000608 <__aeabi_dmul>
 8007738:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800773c:	f7f9 f9ea 	bl	8000b14 <__aeabi_dcmpge>
 8007740:	9e04      	ldr	r6, [sp, #16]
 8007742:	4637      	mov	r7, r6
 8007744:	2800      	cmp	r0, #0
 8007746:	f040 8245 	bne.w	8007bd4 <_dtoa_r+0x954>
 800774a:	9d00      	ldr	r5, [sp, #0]
 800774c:	2331      	movs	r3, #49	; 0x31
 800774e:	f805 3b01 	strb.w	r3, [r5], #1
 8007752:	f10b 0b01 	add.w	fp, fp, #1
 8007756:	e241      	b.n	8007bdc <_dtoa_r+0x95c>
 8007758:	07f2      	lsls	r2, r6, #31
 800775a:	d505      	bpl.n	8007768 <_dtoa_r+0x4e8>
 800775c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007760:	f7f8 ff52 	bl	8000608 <__aeabi_dmul>
 8007764:	3501      	adds	r5, #1
 8007766:	2301      	movs	r3, #1
 8007768:	1076      	asrs	r6, r6, #1
 800776a:	3708      	adds	r7, #8
 800776c:	e773      	b.n	8007656 <_dtoa_r+0x3d6>
 800776e:	2502      	movs	r5, #2
 8007770:	e775      	b.n	800765e <_dtoa_r+0x3de>
 8007772:	9e04      	ldr	r6, [sp, #16]
 8007774:	465f      	mov	r7, fp
 8007776:	e792      	b.n	800769e <_dtoa_r+0x41e>
 8007778:	9900      	ldr	r1, [sp, #0]
 800777a:	4b50      	ldr	r3, [pc, #320]	; (80078bc <_dtoa_r+0x63c>)
 800777c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007780:	4431      	add	r1, r6
 8007782:	9102      	str	r1, [sp, #8]
 8007784:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007786:	eeb0 9a47 	vmov.f32	s18, s14
 800778a:	eef0 9a67 	vmov.f32	s19, s15
 800778e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007792:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007796:	2900      	cmp	r1, #0
 8007798:	d044      	beq.n	8007824 <_dtoa_r+0x5a4>
 800779a:	494e      	ldr	r1, [pc, #312]	; (80078d4 <_dtoa_r+0x654>)
 800779c:	2000      	movs	r0, #0
 800779e:	f7f9 f85d 	bl	800085c <__aeabi_ddiv>
 80077a2:	ec53 2b19 	vmov	r2, r3, d9
 80077a6:	f7f8 fd77 	bl	8000298 <__aeabi_dsub>
 80077aa:	9d00      	ldr	r5, [sp, #0]
 80077ac:	ec41 0b19 	vmov	d9, r0, r1
 80077b0:	4649      	mov	r1, r9
 80077b2:	4640      	mov	r0, r8
 80077b4:	f7f9 f9d8 	bl	8000b68 <__aeabi_d2iz>
 80077b8:	4606      	mov	r6, r0
 80077ba:	f7f8 febb 	bl	8000534 <__aeabi_i2d>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	4640      	mov	r0, r8
 80077c4:	4649      	mov	r1, r9
 80077c6:	f7f8 fd67 	bl	8000298 <__aeabi_dsub>
 80077ca:	3630      	adds	r6, #48	; 0x30
 80077cc:	f805 6b01 	strb.w	r6, [r5], #1
 80077d0:	ec53 2b19 	vmov	r2, r3, d9
 80077d4:	4680      	mov	r8, r0
 80077d6:	4689      	mov	r9, r1
 80077d8:	f7f9 f988 	bl	8000aec <__aeabi_dcmplt>
 80077dc:	2800      	cmp	r0, #0
 80077de:	d164      	bne.n	80078aa <_dtoa_r+0x62a>
 80077e0:	4642      	mov	r2, r8
 80077e2:	464b      	mov	r3, r9
 80077e4:	4937      	ldr	r1, [pc, #220]	; (80078c4 <_dtoa_r+0x644>)
 80077e6:	2000      	movs	r0, #0
 80077e8:	f7f8 fd56 	bl	8000298 <__aeabi_dsub>
 80077ec:	ec53 2b19 	vmov	r2, r3, d9
 80077f0:	f7f9 f97c 	bl	8000aec <__aeabi_dcmplt>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	f040 80b6 	bne.w	8007966 <_dtoa_r+0x6e6>
 80077fa:	9b02      	ldr	r3, [sp, #8]
 80077fc:	429d      	cmp	r5, r3
 80077fe:	f43f af7c 	beq.w	80076fa <_dtoa_r+0x47a>
 8007802:	4b31      	ldr	r3, [pc, #196]	; (80078c8 <_dtoa_r+0x648>)
 8007804:	ec51 0b19 	vmov	r0, r1, d9
 8007808:	2200      	movs	r2, #0
 800780a:	f7f8 fefd 	bl	8000608 <__aeabi_dmul>
 800780e:	4b2e      	ldr	r3, [pc, #184]	; (80078c8 <_dtoa_r+0x648>)
 8007810:	ec41 0b19 	vmov	d9, r0, r1
 8007814:	2200      	movs	r2, #0
 8007816:	4640      	mov	r0, r8
 8007818:	4649      	mov	r1, r9
 800781a:	f7f8 fef5 	bl	8000608 <__aeabi_dmul>
 800781e:	4680      	mov	r8, r0
 8007820:	4689      	mov	r9, r1
 8007822:	e7c5      	b.n	80077b0 <_dtoa_r+0x530>
 8007824:	ec51 0b17 	vmov	r0, r1, d7
 8007828:	f7f8 feee 	bl	8000608 <__aeabi_dmul>
 800782c:	9b02      	ldr	r3, [sp, #8]
 800782e:	9d00      	ldr	r5, [sp, #0]
 8007830:	930f      	str	r3, [sp, #60]	; 0x3c
 8007832:	ec41 0b19 	vmov	d9, r0, r1
 8007836:	4649      	mov	r1, r9
 8007838:	4640      	mov	r0, r8
 800783a:	f7f9 f995 	bl	8000b68 <__aeabi_d2iz>
 800783e:	4606      	mov	r6, r0
 8007840:	f7f8 fe78 	bl	8000534 <__aeabi_i2d>
 8007844:	3630      	adds	r6, #48	; 0x30
 8007846:	4602      	mov	r2, r0
 8007848:	460b      	mov	r3, r1
 800784a:	4640      	mov	r0, r8
 800784c:	4649      	mov	r1, r9
 800784e:	f7f8 fd23 	bl	8000298 <__aeabi_dsub>
 8007852:	f805 6b01 	strb.w	r6, [r5], #1
 8007856:	9b02      	ldr	r3, [sp, #8]
 8007858:	429d      	cmp	r5, r3
 800785a:	4680      	mov	r8, r0
 800785c:	4689      	mov	r9, r1
 800785e:	f04f 0200 	mov.w	r2, #0
 8007862:	d124      	bne.n	80078ae <_dtoa_r+0x62e>
 8007864:	4b1b      	ldr	r3, [pc, #108]	; (80078d4 <_dtoa_r+0x654>)
 8007866:	ec51 0b19 	vmov	r0, r1, d9
 800786a:	f7f8 fd17 	bl	800029c <__adddf3>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	4640      	mov	r0, r8
 8007874:	4649      	mov	r1, r9
 8007876:	f7f9 f957 	bl	8000b28 <__aeabi_dcmpgt>
 800787a:	2800      	cmp	r0, #0
 800787c:	d173      	bne.n	8007966 <_dtoa_r+0x6e6>
 800787e:	ec53 2b19 	vmov	r2, r3, d9
 8007882:	4914      	ldr	r1, [pc, #80]	; (80078d4 <_dtoa_r+0x654>)
 8007884:	2000      	movs	r0, #0
 8007886:	f7f8 fd07 	bl	8000298 <__aeabi_dsub>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	4640      	mov	r0, r8
 8007890:	4649      	mov	r1, r9
 8007892:	f7f9 f92b 	bl	8000aec <__aeabi_dcmplt>
 8007896:	2800      	cmp	r0, #0
 8007898:	f43f af2f 	beq.w	80076fa <_dtoa_r+0x47a>
 800789c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800789e:	1e6b      	subs	r3, r5, #1
 80078a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80078a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80078a6:	2b30      	cmp	r3, #48	; 0x30
 80078a8:	d0f8      	beq.n	800789c <_dtoa_r+0x61c>
 80078aa:	46bb      	mov	fp, r7
 80078ac:	e04a      	b.n	8007944 <_dtoa_r+0x6c4>
 80078ae:	4b06      	ldr	r3, [pc, #24]	; (80078c8 <_dtoa_r+0x648>)
 80078b0:	f7f8 feaa 	bl	8000608 <__aeabi_dmul>
 80078b4:	4680      	mov	r8, r0
 80078b6:	4689      	mov	r9, r1
 80078b8:	e7bd      	b.n	8007836 <_dtoa_r+0x5b6>
 80078ba:	bf00      	nop
 80078bc:	0800a870 	.word	0x0800a870
 80078c0:	0800a848 	.word	0x0800a848
 80078c4:	3ff00000 	.word	0x3ff00000
 80078c8:	40240000 	.word	0x40240000
 80078cc:	401c0000 	.word	0x401c0000
 80078d0:	40140000 	.word	0x40140000
 80078d4:	3fe00000 	.word	0x3fe00000
 80078d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80078dc:	9d00      	ldr	r5, [sp, #0]
 80078de:	4642      	mov	r2, r8
 80078e0:	464b      	mov	r3, r9
 80078e2:	4630      	mov	r0, r6
 80078e4:	4639      	mov	r1, r7
 80078e6:	f7f8 ffb9 	bl	800085c <__aeabi_ddiv>
 80078ea:	f7f9 f93d 	bl	8000b68 <__aeabi_d2iz>
 80078ee:	9001      	str	r0, [sp, #4]
 80078f0:	f7f8 fe20 	bl	8000534 <__aeabi_i2d>
 80078f4:	4642      	mov	r2, r8
 80078f6:	464b      	mov	r3, r9
 80078f8:	f7f8 fe86 	bl	8000608 <__aeabi_dmul>
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	4630      	mov	r0, r6
 8007902:	4639      	mov	r1, r7
 8007904:	f7f8 fcc8 	bl	8000298 <__aeabi_dsub>
 8007908:	9e01      	ldr	r6, [sp, #4]
 800790a:	9f04      	ldr	r7, [sp, #16]
 800790c:	3630      	adds	r6, #48	; 0x30
 800790e:	f805 6b01 	strb.w	r6, [r5], #1
 8007912:	9e00      	ldr	r6, [sp, #0]
 8007914:	1bae      	subs	r6, r5, r6
 8007916:	42b7      	cmp	r7, r6
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	d134      	bne.n	8007988 <_dtoa_r+0x708>
 800791e:	f7f8 fcbd 	bl	800029c <__adddf3>
 8007922:	4642      	mov	r2, r8
 8007924:	464b      	mov	r3, r9
 8007926:	4606      	mov	r6, r0
 8007928:	460f      	mov	r7, r1
 800792a:	f7f9 f8fd 	bl	8000b28 <__aeabi_dcmpgt>
 800792e:	b9c8      	cbnz	r0, 8007964 <_dtoa_r+0x6e4>
 8007930:	4642      	mov	r2, r8
 8007932:	464b      	mov	r3, r9
 8007934:	4630      	mov	r0, r6
 8007936:	4639      	mov	r1, r7
 8007938:	f7f9 f8ce 	bl	8000ad8 <__aeabi_dcmpeq>
 800793c:	b110      	cbz	r0, 8007944 <_dtoa_r+0x6c4>
 800793e:	9b01      	ldr	r3, [sp, #4]
 8007940:	07db      	lsls	r3, r3, #31
 8007942:	d40f      	bmi.n	8007964 <_dtoa_r+0x6e4>
 8007944:	4651      	mov	r1, sl
 8007946:	4620      	mov	r0, r4
 8007948:	f000 fb18 	bl	8007f7c <_Bfree>
 800794c:	2300      	movs	r3, #0
 800794e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007950:	702b      	strb	r3, [r5, #0]
 8007952:	f10b 0301 	add.w	r3, fp, #1
 8007956:	6013      	str	r3, [r2, #0]
 8007958:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800795a:	2b00      	cmp	r3, #0
 800795c:	f43f ace2 	beq.w	8007324 <_dtoa_r+0xa4>
 8007960:	601d      	str	r5, [r3, #0]
 8007962:	e4df      	b.n	8007324 <_dtoa_r+0xa4>
 8007964:	465f      	mov	r7, fp
 8007966:	462b      	mov	r3, r5
 8007968:	461d      	mov	r5, r3
 800796a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800796e:	2a39      	cmp	r2, #57	; 0x39
 8007970:	d106      	bne.n	8007980 <_dtoa_r+0x700>
 8007972:	9a00      	ldr	r2, [sp, #0]
 8007974:	429a      	cmp	r2, r3
 8007976:	d1f7      	bne.n	8007968 <_dtoa_r+0x6e8>
 8007978:	9900      	ldr	r1, [sp, #0]
 800797a:	2230      	movs	r2, #48	; 0x30
 800797c:	3701      	adds	r7, #1
 800797e:	700a      	strb	r2, [r1, #0]
 8007980:	781a      	ldrb	r2, [r3, #0]
 8007982:	3201      	adds	r2, #1
 8007984:	701a      	strb	r2, [r3, #0]
 8007986:	e790      	b.n	80078aa <_dtoa_r+0x62a>
 8007988:	4ba3      	ldr	r3, [pc, #652]	; (8007c18 <_dtoa_r+0x998>)
 800798a:	2200      	movs	r2, #0
 800798c:	f7f8 fe3c 	bl	8000608 <__aeabi_dmul>
 8007990:	2200      	movs	r2, #0
 8007992:	2300      	movs	r3, #0
 8007994:	4606      	mov	r6, r0
 8007996:	460f      	mov	r7, r1
 8007998:	f7f9 f89e 	bl	8000ad8 <__aeabi_dcmpeq>
 800799c:	2800      	cmp	r0, #0
 800799e:	d09e      	beq.n	80078de <_dtoa_r+0x65e>
 80079a0:	e7d0      	b.n	8007944 <_dtoa_r+0x6c4>
 80079a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079a4:	2a00      	cmp	r2, #0
 80079a6:	f000 80ca 	beq.w	8007b3e <_dtoa_r+0x8be>
 80079aa:	9a07      	ldr	r2, [sp, #28]
 80079ac:	2a01      	cmp	r2, #1
 80079ae:	f300 80ad 	bgt.w	8007b0c <_dtoa_r+0x88c>
 80079b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079b4:	2a00      	cmp	r2, #0
 80079b6:	f000 80a5 	beq.w	8007b04 <_dtoa_r+0x884>
 80079ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80079be:	9e08      	ldr	r6, [sp, #32]
 80079c0:	9d05      	ldr	r5, [sp, #20]
 80079c2:	9a05      	ldr	r2, [sp, #20]
 80079c4:	441a      	add	r2, r3
 80079c6:	9205      	str	r2, [sp, #20]
 80079c8:	9a06      	ldr	r2, [sp, #24]
 80079ca:	2101      	movs	r1, #1
 80079cc:	441a      	add	r2, r3
 80079ce:	4620      	mov	r0, r4
 80079d0:	9206      	str	r2, [sp, #24]
 80079d2:	f000 fb89 	bl	80080e8 <__i2b>
 80079d6:	4607      	mov	r7, r0
 80079d8:	b165      	cbz	r5, 80079f4 <_dtoa_r+0x774>
 80079da:	9b06      	ldr	r3, [sp, #24]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	dd09      	ble.n	80079f4 <_dtoa_r+0x774>
 80079e0:	42ab      	cmp	r3, r5
 80079e2:	9a05      	ldr	r2, [sp, #20]
 80079e4:	bfa8      	it	ge
 80079e6:	462b      	movge	r3, r5
 80079e8:	1ad2      	subs	r2, r2, r3
 80079ea:	9205      	str	r2, [sp, #20]
 80079ec:	9a06      	ldr	r2, [sp, #24]
 80079ee:	1aed      	subs	r5, r5, r3
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	9306      	str	r3, [sp, #24]
 80079f4:	9b08      	ldr	r3, [sp, #32]
 80079f6:	b1f3      	cbz	r3, 8007a36 <_dtoa_r+0x7b6>
 80079f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 80a3 	beq.w	8007b46 <_dtoa_r+0x8c6>
 8007a00:	2e00      	cmp	r6, #0
 8007a02:	dd10      	ble.n	8007a26 <_dtoa_r+0x7a6>
 8007a04:	4639      	mov	r1, r7
 8007a06:	4632      	mov	r2, r6
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f000 fc2d 	bl	8008268 <__pow5mult>
 8007a0e:	4652      	mov	r2, sl
 8007a10:	4601      	mov	r1, r0
 8007a12:	4607      	mov	r7, r0
 8007a14:	4620      	mov	r0, r4
 8007a16:	f000 fb7d 	bl	8008114 <__multiply>
 8007a1a:	4651      	mov	r1, sl
 8007a1c:	4680      	mov	r8, r0
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f000 faac 	bl	8007f7c <_Bfree>
 8007a24:	46c2      	mov	sl, r8
 8007a26:	9b08      	ldr	r3, [sp, #32]
 8007a28:	1b9a      	subs	r2, r3, r6
 8007a2a:	d004      	beq.n	8007a36 <_dtoa_r+0x7b6>
 8007a2c:	4651      	mov	r1, sl
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f000 fc1a 	bl	8008268 <__pow5mult>
 8007a34:	4682      	mov	sl, r0
 8007a36:	2101      	movs	r1, #1
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f000 fb55 	bl	80080e8 <__i2b>
 8007a3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	4606      	mov	r6, r0
 8007a44:	f340 8081 	ble.w	8007b4a <_dtoa_r+0x8ca>
 8007a48:	461a      	mov	r2, r3
 8007a4a:	4601      	mov	r1, r0
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	f000 fc0b 	bl	8008268 <__pow5mult>
 8007a52:	9b07      	ldr	r3, [sp, #28]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	4606      	mov	r6, r0
 8007a58:	dd7a      	ble.n	8007b50 <_dtoa_r+0x8d0>
 8007a5a:	f04f 0800 	mov.w	r8, #0
 8007a5e:	6933      	ldr	r3, [r6, #16]
 8007a60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007a64:	6918      	ldr	r0, [r3, #16]
 8007a66:	f000 faf1 	bl	800804c <__hi0bits>
 8007a6a:	f1c0 0020 	rsb	r0, r0, #32
 8007a6e:	9b06      	ldr	r3, [sp, #24]
 8007a70:	4418      	add	r0, r3
 8007a72:	f010 001f 	ands.w	r0, r0, #31
 8007a76:	f000 8094 	beq.w	8007ba2 <_dtoa_r+0x922>
 8007a7a:	f1c0 0320 	rsb	r3, r0, #32
 8007a7e:	2b04      	cmp	r3, #4
 8007a80:	f340 8085 	ble.w	8007b8e <_dtoa_r+0x90e>
 8007a84:	9b05      	ldr	r3, [sp, #20]
 8007a86:	f1c0 001c 	rsb	r0, r0, #28
 8007a8a:	4403      	add	r3, r0
 8007a8c:	9305      	str	r3, [sp, #20]
 8007a8e:	9b06      	ldr	r3, [sp, #24]
 8007a90:	4403      	add	r3, r0
 8007a92:	4405      	add	r5, r0
 8007a94:	9306      	str	r3, [sp, #24]
 8007a96:	9b05      	ldr	r3, [sp, #20]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	dd05      	ble.n	8007aa8 <_dtoa_r+0x828>
 8007a9c:	4651      	mov	r1, sl
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f000 fc3b 	bl	800831c <__lshift>
 8007aa6:	4682      	mov	sl, r0
 8007aa8:	9b06      	ldr	r3, [sp, #24]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	dd05      	ble.n	8007aba <_dtoa_r+0x83a>
 8007aae:	4631      	mov	r1, r6
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f000 fc32 	bl	800831c <__lshift>
 8007ab8:	4606      	mov	r6, r0
 8007aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d072      	beq.n	8007ba6 <_dtoa_r+0x926>
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	4650      	mov	r0, sl
 8007ac4:	f000 fc96 	bl	80083f4 <__mcmp>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	da6c      	bge.n	8007ba6 <_dtoa_r+0x926>
 8007acc:	2300      	movs	r3, #0
 8007ace:	4651      	mov	r1, sl
 8007ad0:	220a      	movs	r2, #10
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f000 fa74 	bl	8007fc0 <__multadd>
 8007ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ada:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ade:	4682      	mov	sl, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 81b0 	beq.w	8007e46 <_dtoa_r+0xbc6>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	4639      	mov	r1, r7
 8007aea:	220a      	movs	r2, #10
 8007aec:	4620      	mov	r0, r4
 8007aee:	f000 fa67 	bl	8007fc0 <__multadd>
 8007af2:	9b01      	ldr	r3, [sp, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	4607      	mov	r7, r0
 8007af8:	f300 8096 	bgt.w	8007c28 <_dtoa_r+0x9a8>
 8007afc:	9b07      	ldr	r3, [sp, #28]
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	dc59      	bgt.n	8007bb6 <_dtoa_r+0x936>
 8007b02:	e091      	b.n	8007c28 <_dtoa_r+0x9a8>
 8007b04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b0a:	e758      	b.n	80079be <_dtoa_r+0x73e>
 8007b0c:	9b04      	ldr	r3, [sp, #16]
 8007b0e:	1e5e      	subs	r6, r3, #1
 8007b10:	9b08      	ldr	r3, [sp, #32]
 8007b12:	42b3      	cmp	r3, r6
 8007b14:	bfbf      	itttt	lt
 8007b16:	9b08      	ldrlt	r3, [sp, #32]
 8007b18:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007b1a:	9608      	strlt	r6, [sp, #32]
 8007b1c:	1af3      	sublt	r3, r6, r3
 8007b1e:	bfb4      	ite	lt
 8007b20:	18d2      	addlt	r2, r2, r3
 8007b22:	1b9e      	subge	r6, r3, r6
 8007b24:	9b04      	ldr	r3, [sp, #16]
 8007b26:	bfbc      	itt	lt
 8007b28:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007b2a:	2600      	movlt	r6, #0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	bfb7      	itett	lt
 8007b30:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007b34:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007b38:	1a9d      	sublt	r5, r3, r2
 8007b3a:	2300      	movlt	r3, #0
 8007b3c:	e741      	b.n	80079c2 <_dtoa_r+0x742>
 8007b3e:	9e08      	ldr	r6, [sp, #32]
 8007b40:	9d05      	ldr	r5, [sp, #20]
 8007b42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007b44:	e748      	b.n	80079d8 <_dtoa_r+0x758>
 8007b46:	9a08      	ldr	r2, [sp, #32]
 8007b48:	e770      	b.n	8007a2c <_dtoa_r+0x7ac>
 8007b4a:	9b07      	ldr	r3, [sp, #28]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	dc19      	bgt.n	8007b84 <_dtoa_r+0x904>
 8007b50:	9b02      	ldr	r3, [sp, #8]
 8007b52:	b9bb      	cbnz	r3, 8007b84 <_dtoa_r+0x904>
 8007b54:	9b03      	ldr	r3, [sp, #12]
 8007b56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b5a:	b99b      	cbnz	r3, 8007b84 <_dtoa_r+0x904>
 8007b5c:	9b03      	ldr	r3, [sp, #12]
 8007b5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b62:	0d1b      	lsrs	r3, r3, #20
 8007b64:	051b      	lsls	r3, r3, #20
 8007b66:	b183      	cbz	r3, 8007b8a <_dtoa_r+0x90a>
 8007b68:	9b05      	ldr	r3, [sp, #20]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	9305      	str	r3, [sp, #20]
 8007b6e:	9b06      	ldr	r3, [sp, #24]
 8007b70:	3301      	adds	r3, #1
 8007b72:	9306      	str	r3, [sp, #24]
 8007b74:	f04f 0801 	mov.w	r8, #1
 8007b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f47f af6f 	bne.w	8007a5e <_dtoa_r+0x7de>
 8007b80:	2001      	movs	r0, #1
 8007b82:	e774      	b.n	8007a6e <_dtoa_r+0x7ee>
 8007b84:	f04f 0800 	mov.w	r8, #0
 8007b88:	e7f6      	b.n	8007b78 <_dtoa_r+0x8f8>
 8007b8a:	4698      	mov	r8, r3
 8007b8c:	e7f4      	b.n	8007b78 <_dtoa_r+0x8f8>
 8007b8e:	d082      	beq.n	8007a96 <_dtoa_r+0x816>
 8007b90:	9a05      	ldr	r2, [sp, #20]
 8007b92:	331c      	adds	r3, #28
 8007b94:	441a      	add	r2, r3
 8007b96:	9205      	str	r2, [sp, #20]
 8007b98:	9a06      	ldr	r2, [sp, #24]
 8007b9a:	441a      	add	r2, r3
 8007b9c:	441d      	add	r5, r3
 8007b9e:	9206      	str	r2, [sp, #24]
 8007ba0:	e779      	b.n	8007a96 <_dtoa_r+0x816>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	e7f4      	b.n	8007b90 <_dtoa_r+0x910>
 8007ba6:	9b04      	ldr	r3, [sp, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	dc37      	bgt.n	8007c1c <_dtoa_r+0x99c>
 8007bac:	9b07      	ldr	r3, [sp, #28]
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	dd34      	ble.n	8007c1c <_dtoa_r+0x99c>
 8007bb2:	9b04      	ldr	r3, [sp, #16]
 8007bb4:	9301      	str	r3, [sp, #4]
 8007bb6:	9b01      	ldr	r3, [sp, #4]
 8007bb8:	b963      	cbnz	r3, 8007bd4 <_dtoa_r+0x954>
 8007bba:	4631      	mov	r1, r6
 8007bbc:	2205      	movs	r2, #5
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f000 f9fe 	bl	8007fc0 <__multadd>
 8007bc4:	4601      	mov	r1, r0
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	4650      	mov	r0, sl
 8007bca:	f000 fc13 	bl	80083f4 <__mcmp>
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	f73f adbb 	bgt.w	800774a <_dtoa_r+0x4ca>
 8007bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd6:	9d00      	ldr	r5, [sp, #0]
 8007bd8:	ea6f 0b03 	mvn.w	fp, r3
 8007bdc:	f04f 0800 	mov.w	r8, #0
 8007be0:	4631      	mov	r1, r6
 8007be2:	4620      	mov	r0, r4
 8007be4:	f000 f9ca 	bl	8007f7c <_Bfree>
 8007be8:	2f00      	cmp	r7, #0
 8007bea:	f43f aeab 	beq.w	8007944 <_dtoa_r+0x6c4>
 8007bee:	f1b8 0f00 	cmp.w	r8, #0
 8007bf2:	d005      	beq.n	8007c00 <_dtoa_r+0x980>
 8007bf4:	45b8      	cmp	r8, r7
 8007bf6:	d003      	beq.n	8007c00 <_dtoa_r+0x980>
 8007bf8:	4641      	mov	r1, r8
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f000 f9be 	bl	8007f7c <_Bfree>
 8007c00:	4639      	mov	r1, r7
 8007c02:	4620      	mov	r0, r4
 8007c04:	f000 f9ba 	bl	8007f7c <_Bfree>
 8007c08:	e69c      	b.n	8007944 <_dtoa_r+0x6c4>
 8007c0a:	2600      	movs	r6, #0
 8007c0c:	4637      	mov	r7, r6
 8007c0e:	e7e1      	b.n	8007bd4 <_dtoa_r+0x954>
 8007c10:	46bb      	mov	fp, r7
 8007c12:	4637      	mov	r7, r6
 8007c14:	e599      	b.n	800774a <_dtoa_r+0x4ca>
 8007c16:	bf00      	nop
 8007c18:	40240000 	.word	0x40240000
 8007c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 80c8 	beq.w	8007db4 <_dtoa_r+0xb34>
 8007c24:	9b04      	ldr	r3, [sp, #16]
 8007c26:	9301      	str	r3, [sp, #4]
 8007c28:	2d00      	cmp	r5, #0
 8007c2a:	dd05      	ble.n	8007c38 <_dtoa_r+0x9b8>
 8007c2c:	4639      	mov	r1, r7
 8007c2e:	462a      	mov	r2, r5
 8007c30:	4620      	mov	r0, r4
 8007c32:	f000 fb73 	bl	800831c <__lshift>
 8007c36:	4607      	mov	r7, r0
 8007c38:	f1b8 0f00 	cmp.w	r8, #0
 8007c3c:	d05b      	beq.n	8007cf6 <_dtoa_r+0xa76>
 8007c3e:	6879      	ldr	r1, [r7, #4]
 8007c40:	4620      	mov	r0, r4
 8007c42:	f000 f95b 	bl	8007efc <_Balloc>
 8007c46:	4605      	mov	r5, r0
 8007c48:	b928      	cbnz	r0, 8007c56 <_dtoa_r+0x9d6>
 8007c4a:	4b83      	ldr	r3, [pc, #524]	; (8007e58 <_dtoa_r+0xbd8>)
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007c52:	f7ff bb2e 	b.w	80072b2 <_dtoa_r+0x32>
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	3202      	adds	r2, #2
 8007c5a:	0092      	lsls	r2, r2, #2
 8007c5c:	f107 010c 	add.w	r1, r7, #12
 8007c60:	300c      	adds	r0, #12
 8007c62:	f000 fef9 	bl	8008a58 <memcpy>
 8007c66:	2201      	movs	r2, #1
 8007c68:	4629      	mov	r1, r5
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f000 fb56 	bl	800831c <__lshift>
 8007c70:	9b00      	ldr	r3, [sp, #0]
 8007c72:	3301      	adds	r3, #1
 8007c74:	9304      	str	r3, [sp, #16]
 8007c76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	9308      	str	r3, [sp, #32]
 8007c7e:	9b02      	ldr	r3, [sp, #8]
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	46b8      	mov	r8, r7
 8007c86:	9306      	str	r3, [sp, #24]
 8007c88:	4607      	mov	r7, r0
 8007c8a:	9b04      	ldr	r3, [sp, #16]
 8007c8c:	4631      	mov	r1, r6
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	4650      	mov	r0, sl
 8007c92:	9301      	str	r3, [sp, #4]
 8007c94:	f7ff fa6c 	bl	8007170 <quorem>
 8007c98:	4641      	mov	r1, r8
 8007c9a:	9002      	str	r0, [sp, #8]
 8007c9c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007ca0:	4650      	mov	r0, sl
 8007ca2:	f000 fba7 	bl	80083f4 <__mcmp>
 8007ca6:	463a      	mov	r2, r7
 8007ca8:	9005      	str	r0, [sp, #20]
 8007caa:	4631      	mov	r1, r6
 8007cac:	4620      	mov	r0, r4
 8007cae:	f000 fbbd 	bl	800842c <__mdiff>
 8007cb2:	68c2      	ldr	r2, [r0, #12]
 8007cb4:	4605      	mov	r5, r0
 8007cb6:	bb02      	cbnz	r2, 8007cfa <_dtoa_r+0xa7a>
 8007cb8:	4601      	mov	r1, r0
 8007cba:	4650      	mov	r0, sl
 8007cbc:	f000 fb9a 	bl	80083f4 <__mcmp>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	4629      	mov	r1, r5
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	9209      	str	r2, [sp, #36]	; 0x24
 8007cc8:	f000 f958 	bl	8007f7c <_Bfree>
 8007ccc:	9b07      	ldr	r3, [sp, #28]
 8007cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cd0:	9d04      	ldr	r5, [sp, #16]
 8007cd2:	ea43 0102 	orr.w	r1, r3, r2
 8007cd6:	9b06      	ldr	r3, [sp, #24]
 8007cd8:	4319      	orrs	r1, r3
 8007cda:	d110      	bne.n	8007cfe <_dtoa_r+0xa7e>
 8007cdc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ce0:	d029      	beq.n	8007d36 <_dtoa_r+0xab6>
 8007ce2:	9b05      	ldr	r3, [sp, #20]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	dd02      	ble.n	8007cee <_dtoa_r+0xa6e>
 8007ce8:	9b02      	ldr	r3, [sp, #8]
 8007cea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007cee:	9b01      	ldr	r3, [sp, #4]
 8007cf0:	f883 9000 	strb.w	r9, [r3]
 8007cf4:	e774      	b.n	8007be0 <_dtoa_r+0x960>
 8007cf6:	4638      	mov	r0, r7
 8007cf8:	e7ba      	b.n	8007c70 <_dtoa_r+0x9f0>
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	e7e1      	b.n	8007cc2 <_dtoa_r+0xa42>
 8007cfe:	9b05      	ldr	r3, [sp, #20]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	db04      	blt.n	8007d0e <_dtoa_r+0xa8e>
 8007d04:	9907      	ldr	r1, [sp, #28]
 8007d06:	430b      	orrs	r3, r1
 8007d08:	9906      	ldr	r1, [sp, #24]
 8007d0a:	430b      	orrs	r3, r1
 8007d0c:	d120      	bne.n	8007d50 <_dtoa_r+0xad0>
 8007d0e:	2a00      	cmp	r2, #0
 8007d10:	dded      	ble.n	8007cee <_dtoa_r+0xa6e>
 8007d12:	4651      	mov	r1, sl
 8007d14:	2201      	movs	r2, #1
 8007d16:	4620      	mov	r0, r4
 8007d18:	f000 fb00 	bl	800831c <__lshift>
 8007d1c:	4631      	mov	r1, r6
 8007d1e:	4682      	mov	sl, r0
 8007d20:	f000 fb68 	bl	80083f4 <__mcmp>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	dc03      	bgt.n	8007d30 <_dtoa_r+0xab0>
 8007d28:	d1e1      	bne.n	8007cee <_dtoa_r+0xa6e>
 8007d2a:	f019 0f01 	tst.w	r9, #1
 8007d2e:	d0de      	beq.n	8007cee <_dtoa_r+0xa6e>
 8007d30:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d34:	d1d8      	bne.n	8007ce8 <_dtoa_r+0xa68>
 8007d36:	9a01      	ldr	r2, [sp, #4]
 8007d38:	2339      	movs	r3, #57	; 0x39
 8007d3a:	7013      	strb	r3, [r2, #0]
 8007d3c:	462b      	mov	r3, r5
 8007d3e:	461d      	mov	r5, r3
 8007d40:	3b01      	subs	r3, #1
 8007d42:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007d46:	2a39      	cmp	r2, #57	; 0x39
 8007d48:	d06c      	beq.n	8007e24 <_dtoa_r+0xba4>
 8007d4a:	3201      	adds	r2, #1
 8007d4c:	701a      	strb	r2, [r3, #0]
 8007d4e:	e747      	b.n	8007be0 <_dtoa_r+0x960>
 8007d50:	2a00      	cmp	r2, #0
 8007d52:	dd07      	ble.n	8007d64 <_dtoa_r+0xae4>
 8007d54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d58:	d0ed      	beq.n	8007d36 <_dtoa_r+0xab6>
 8007d5a:	9a01      	ldr	r2, [sp, #4]
 8007d5c:	f109 0301 	add.w	r3, r9, #1
 8007d60:	7013      	strb	r3, [r2, #0]
 8007d62:	e73d      	b.n	8007be0 <_dtoa_r+0x960>
 8007d64:	9b04      	ldr	r3, [sp, #16]
 8007d66:	9a08      	ldr	r2, [sp, #32]
 8007d68:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d043      	beq.n	8007df8 <_dtoa_r+0xb78>
 8007d70:	4651      	mov	r1, sl
 8007d72:	2300      	movs	r3, #0
 8007d74:	220a      	movs	r2, #10
 8007d76:	4620      	mov	r0, r4
 8007d78:	f000 f922 	bl	8007fc0 <__multadd>
 8007d7c:	45b8      	cmp	r8, r7
 8007d7e:	4682      	mov	sl, r0
 8007d80:	f04f 0300 	mov.w	r3, #0
 8007d84:	f04f 020a 	mov.w	r2, #10
 8007d88:	4641      	mov	r1, r8
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	d107      	bne.n	8007d9e <_dtoa_r+0xb1e>
 8007d8e:	f000 f917 	bl	8007fc0 <__multadd>
 8007d92:	4680      	mov	r8, r0
 8007d94:	4607      	mov	r7, r0
 8007d96:	9b04      	ldr	r3, [sp, #16]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	9304      	str	r3, [sp, #16]
 8007d9c:	e775      	b.n	8007c8a <_dtoa_r+0xa0a>
 8007d9e:	f000 f90f 	bl	8007fc0 <__multadd>
 8007da2:	4639      	mov	r1, r7
 8007da4:	4680      	mov	r8, r0
 8007da6:	2300      	movs	r3, #0
 8007da8:	220a      	movs	r2, #10
 8007daa:	4620      	mov	r0, r4
 8007dac:	f000 f908 	bl	8007fc0 <__multadd>
 8007db0:	4607      	mov	r7, r0
 8007db2:	e7f0      	b.n	8007d96 <_dtoa_r+0xb16>
 8007db4:	9b04      	ldr	r3, [sp, #16]
 8007db6:	9301      	str	r3, [sp, #4]
 8007db8:	9d00      	ldr	r5, [sp, #0]
 8007dba:	4631      	mov	r1, r6
 8007dbc:	4650      	mov	r0, sl
 8007dbe:	f7ff f9d7 	bl	8007170 <quorem>
 8007dc2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007dc6:	9b00      	ldr	r3, [sp, #0]
 8007dc8:	f805 9b01 	strb.w	r9, [r5], #1
 8007dcc:	1aea      	subs	r2, r5, r3
 8007dce:	9b01      	ldr	r3, [sp, #4]
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	dd07      	ble.n	8007de4 <_dtoa_r+0xb64>
 8007dd4:	4651      	mov	r1, sl
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	220a      	movs	r2, #10
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f000 f8f0 	bl	8007fc0 <__multadd>
 8007de0:	4682      	mov	sl, r0
 8007de2:	e7ea      	b.n	8007dba <_dtoa_r+0xb3a>
 8007de4:	9b01      	ldr	r3, [sp, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	bfc8      	it	gt
 8007dea:	461d      	movgt	r5, r3
 8007dec:	9b00      	ldr	r3, [sp, #0]
 8007dee:	bfd8      	it	le
 8007df0:	2501      	movle	r5, #1
 8007df2:	441d      	add	r5, r3
 8007df4:	f04f 0800 	mov.w	r8, #0
 8007df8:	4651      	mov	r1, sl
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	f000 fa8d 	bl	800831c <__lshift>
 8007e02:	4631      	mov	r1, r6
 8007e04:	4682      	mov	sl, r0
 8007e06:	f000 faf5 	bl	80083f4 <__mcmp>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	dc96      	bgt.n	8007d3c <_dtoa_r+0xabc>
 8007e0e:	d102      	bne.n	8007e16 <_dtoa_r+0xb96>
 8007e10:	f019 0f01 	tst.w	r9, #1
 8007e14:	d192      	bne.n	8007d3c <_dtoa_r+0xabc>
 8007e16:	462b      	mov	r3, r5
 8007e18:	461d      	mov	r5, r3
 8007e1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e1e:	2a30      	cmp	r2, #48	; 0x30
 8007e20:	d0fa      	beq.n	8007e18 <_dtoa_r+0xb98>
 8007e22:	e6dd      	b.n	8007be0 <_dtoa_r+0x960>
 8007e24:	9a00      	ldr	r2, [sp, #0]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d189      	bne.n	8007d3e <_dtoa_r+0xabe>
 8007e2a:	f10b 0b01 	add.w	fp, fp, #1
 8007e2e:	2331      	movs	r3, #49	; 0x31
 8007e30:	e796      	b.n	8007d60 <_dtoa_r+0xae0>
 8007e32:	4b0a      	ldr	r3, [pc, #40]	; (8007e5c <_dtoa_r+0xbdc>)
 8007e34:	f7ff ba99 	b.w	800736a <_dtoa_r+0xea>
 8007e38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f47f aa6d 	bne.w	800731a <_dtoa_r+0x9a>
 8007e40:	4b07      	ldr	r3, [pc, #28]	; (8007e60 <_dtoa_r+0xbe0>)
 8007e42:	f7ff ba92 	b.w	800736a <_dtoa_r+0xea>
 8007e46:	9b01      	ldr	r3, [sp, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	dcb5      	bgt.n	8007db8 <_dtoa_r+0xb38>
 8007e4c:	9b07      	ldr	r3, [sp, #28]
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	f73f aeb1 	bgt.w	8007bb6 <_dtoa_r+0x936>
 8007e54:	e7b0      	b.n	8007db8 <_dtoa_r+0xb38>
 8007e56:	bf00      	nop
 8007e58:	0800a7db 	.word	0x0800a7db
 8007e5c:	0800a6a5 	.word	0x0800a6a5
 8007e60:	0800a776 	.word	0x0800a776

08007e64 <_free_r>:
 8007e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e66:	2900      	cmp	r1, #0
 8007e68:	d044      	beq.n	8007ef4 <_free_r+0x90>
 8007e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e6e:	9001      	str	r0, [sp, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f1a1 0404 	sub.w	r4, r1, #4
 8007e76:	bfb8      	it	lt
 8007e78:	18e4      	addlt	r4, r4, r3
 8007e7a:	f7fe fa45 	bl	8006308 <__malloc_lock>
 8007e7e:	4a1e      	ldr	r2, [pc, #120]	; (8007ef8 <_free_r+0x94>)
 8007e80:	9801      	ldr	r0, [sp, #4]
 8007e82:	6813      	ldr	r3, [r2, #0]
 8007e84:	b933      	cbnz	r3, 8007e94 <_free_r+0x30>
 8007e86:	6063      	str	r3, [r4, #4]
 8007e88:	6014      	str	r4, [r2, #0]
 8007e8a:	b003      	add	sp, #12
 8007e8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e90:	f7fe ba40 	b.w	8006314 <__malloc_unlock>
 8007e94:	42a3      	cmp	r3, r4
 8007e96:	d908      	bls.n	8007eaa <_free_r+0x46>
 8007e98:	6825      	ldr	r5, [r4, #0]
 8007e9a:	1961      	adds	r1, r4, r5
 8007e9c:	428b      	cmp	r3, r1
 8007e9e:	bf01      	itttt	eq
 8007ea0:	6819      	ldreq	r1, [r3, #0]
 8007ea2:	685b      	ldreq	r3, [r3, #4]
 8007ea4:	1949      	addeq	r1, r1, r5
 8007ea6:	6021      	streq	r1, [r4, #0]
 8007ea8:	e7ed      	b.n	8007e86 <_free_r+0x22>
 8007eaa:	461a      	mov	r2, r3
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	b10b      	cbz	r3, 8007eb4 <_free_r+0x50>
 8007eb0:	42a3      	cmp	r3, r4
 8007eb2:	d9fa      	bls.n	8007eaa <_free_r+0x46>
 8007eb4:	6811      	ldr	r1, [r2, #0]
 8007eb6:	1855      	adds	r5, r2, r1
 8007eb8:	42a5      	cmp	r5, r4
 8007eba:	d10b      	bne.n	8007ed4 <_free_r+0x70>
 8007ebc:	6824      	ldr	r4, [r4, #0]
 8007ebe:	4421      	add	r1, r4
 8007ec0:	1854      	adds	r4, r2, r1
 8007ec2:	42a3      	cmp	r3, r4
 8007ec4:	6011      	str	r1, [r2, #0]
 8007ec6:	d1e0      	bne.n	8007e8a <_free_r+0x26>
 8007ec8:	681c      	ldr	r4, [r3, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	6053      	str	r3, [r2, #4]
 8007ece:	440c      	add	r4, r1
 8007ed0:	6014      	str	r4, [r2, #0]
 8007ed2:	e7da      	b.n	8007e8a <_free_r+0x26>
 8007ed4:	d902      	bls.n	8007edc <_free_r+0x78>
 8007ed6:	230c      	movs	r3, #12
 8007ed8:	6003      	str	r3, [r0, #0]
 8007eda:	e7d6      	b.n	8007e8a <_free_r+0x26>
 8007edc:	6825      	ldr	r5, [r4, #0]
 8007ede:	1961      	adds	r1, r4, r5
 8007ee0:	428b      	cmp	r3, r1
 8007ee2:	bf04      	itt	eq
 8007ee4:	6819      	ldreq	r1, [r3, #0]
 8007ee6:	685b      	ldreq	r3, [r3, #4]
 8007ee8:	6063      	str	r3, [r4, #4]
 8007eea:	bf04      	itt	eq
 8007eec:	1949      	addeq	r1, r1, r5
 8007eee:	6021      	streq	r1, [r4, #0]
 8007ef0:	6054      	str	r4, [r2, #4]
 8007ef2:	e7ca      	b.n	8007e8a <_free_r+0x26>
 8007ef4:	b003      	add	sp, #12
 8007ef6:	bd30      	pop	{r4, r5, pc}
 8007ef8:	20000388 	.word	0x20000388

08007efc <_Balloc>:
 8007efc:	b570      	push	{r4, r5, r6, lr}
 8007efe:	69c6      	ldr	r6, [r0, #28]
 8007f00:	4604      	mov	r4, r0
 8007f02:	460d      	mov	r5, r1
 8007f04:	b976      	cbnz	r6, 8007f24 <_Balloc+0x28>
 8007f06:	2010      	movs	r0, #16
 8007f08:	f7fe f94e 	bl	80061a8 <malloc>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	61e0      	str	r0, [r4, #28]
 8007f10:	b920      	cbnz	r0, 8007f1c <_Balloc+0x20>
 8007f12:	4b18      	ldr	r3, [pc, #96]	; (8007f74 <_Balloc+0x78>)
 8007f14:	4818      	ldr	r0, [pc, #96]	; (8007f78 <_Balloc+0x7c>)
 8007f16:	216b      	movs	r1, #107	; 0x6b
 8007f18:	f7ff f90c 	bl	8007134 <__assert_func>
 8007f1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f20:	6006      	str	r6, [r0, #0]
 8007f22:	60c6      	str	r6, [r0, #12]
 8007f24:	69e6      	ldr	r6, [r4, #28]
 8007f26:	68f3      	ldr	r3, [r6, #12]
 8007f28:	b183      	cbz	r3, 8007f4c <_Balloc+0x50>
 8007f2a:	69e3      	ldr	r3, [r4, #28]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f32:	b9b8      	cbnz	r0, 8007f64 <_Balloc+0x68>
 8007f34:	2101      	movs	r1, #1
 8007f36:	fa01 f605 	lsl.w	r6, r1, r5
 8007f3a:	1d72      	adds	r2, r6, #5
 8007f3c:	0092      	lsls	r2, r2, #2
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f000 fd9f 	bl	8008a82 <_calloc_r>
 8007f44:	b160      	cbz	r0, 8007f60 <_Balloc+0x64>
 8007f46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f4a:	e00e      	b.n	8007f6a <_Balloc+0x6e>
 8007f4c:	2221      	movs	r2, #33	; 0x21
 8007f4e:	2104      	movs	r1, #4
 8007f50:	4620      	mov	r0, r4
 8007f52:	f000 fd96 	bl	8008a82 <_calloc_r>
 8007f56:	69e3      	ldr	r3, [r4, #28]
 8007f58:	60f0      	str	r0, [r6, #12]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e4      	bne.n	8007f2a <_Balloc+0x2e>
 8007f60:	2000      	movs	r0, #0
 8007f62:	bd70      	pop	{r4, r5, r6, pc}
 8007f64:	6802      	ldr	r2, [r0, #0]
 8007f66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f70:	e7f7      	b.n	8007f62 <_Balloc+0x66>
 8007f72:	bf00      	nop
 8007f74:	0800a6c9 	.word	0x0800a6c9
 8007f78:	0800a7ec 	.word	0x0800a7ec

08007f7c <_Bfree>:
 8007f7c:	b570      	push	{r4, r5, r6, lr}
 8007f7e:	69c6      	ldr	r6, [r0, #28]
 8007f80:	4605      	mov	r5, r0
 8007f82:	460c      	mov	r4, r1
 8007f84:	b976      	cbnz	r6, 8007fa4 <_Bfree+0x28>
 8007f86:	2010      	movs	r0, #16
 8007f88:	f7fe f90e 	bl	80061a8 <malloc>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	61e8      	str	r0, [r5, #28]
 8007f90:	b920      	cbnz	r0, 8007f9c <_Bfree+0x20>
 8007f92:	4b09      	ldr	r3, [pc, #36]	; (8007fb8 <_Bfree+0x3c>)
 8007f94:	4809      	ldr	r0, [pc, #36]	; (8007fbc <_Bfree+0x40>)
 8007f96:	218f      	movs	r1, #143	; 0x8f
 8007f98:	f7ff f8cc 	bl	8007134 <__assert_func>
 8007f9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fa0:	6006      	str	r6, [r0, #0]
 8007fa2:	60c6      	str	r6, [r0, #12]
 8007fa4:	b13c      	cbz	r4, 8007fb6 <_Bfree+0x3a>
 8007fa6:	69eb      	ldr	r3, [r5, #28]
 8007fa8:	6862      	ldr	r2, [r4, #4]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fb0:	6021      	str	r1, [r4, #0]
 8007fb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007fb6:	bd70      	pop	{r4, r5, r6, pc}
 8007fb8:	0800a6c9 	.word	0x0800a6c9
 8007fbc:	0800a7ec 	.word	0x0800a7ec

08007fc0 <__multadd>:
 8007fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc4:	690d      	ldr	r5, [r1, #16]
 8007fc6:	4607      	mov	r7, r0
 8007fc8:	460c      	mov	r4, r1
 8007fca:	461e      	mov	r6, r3
 8007fcc:	f101 0c14 	add.w	ip, r1, #20
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	f8dc 3000 	ldr.w	r3, [ip]
 8007fd6:	b299      	uxth	r1, r3
 8007fd8:	fb02 6101 	mla	r1, r2, r1, r6
 8007fdc:	0c1e      	lsrs	r6, r3, #16
 8007fde:	0c0b      	lsrs	r3, r1, #16
 8007fe0:	fb02 3306 	mla	r3, r2, r6, r3
 8007fe4:	b289      	uxth	r1, r1
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007fec:	4285      	cmp	r5, r0
 8007fee:	f84c 1b04 	str.w	r1, [ip], #4
 8007ff2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007ff6:	dcec      	bgt.n	8007fd2 <__multadd+0x12>
 8007ff8:	b30e      	cbz	r6, 800803e <__multadd+0x7e>
 8007ffa:	68a3      	ldr	r3, [r4, #8]
 8007ffc:	42ab      	cmp	r3, r5
 8007ffe:	dc19      	bgt.n	8008034 <__multadd+0x74>
 8008000:	6861      	ldr	r1, [r4, #4]
 8008002:	4638      	mov	r0, r7
 8008004:	3101      	adds	r1, #1
 8008006:	f7ff ff79 	bl	8007efc <_Balloc>
 800800a:	4680      	mov	r8, r0
 800800c:	b928      	cbnz	r0, 800801a <__multadd+0x5a>
 800800e:	4602      	mov	r2, r0
 8008010:	4b0c      	ldr	r3, [pc, #48]	; (8008044 <__multadd+0x84>)
 8008012:	480d      	ldr	r0, [pc, #52]	; (8008048 <__multadd+0x88>)
 8008014:	21ba      	movs	r1, #186	; 0xba
 8008016:	f7ff f88d 	bl	8007134 <__assert_func>
 800801a:	6922      	ldr	r2, [r4, #16]
 800801c:	3202      	adds	r2, #2
 800801e:	f104 010c 	add.w	r1, r4, #12
 8008022:	0092      	lsls	r2, r2, #2
 8008024:	300c      	adds	r0, #12
 8008026:	f000 fd17 	bl	8008a58 <memcpy>
 800802a:	4621      	mov	r1, r4
 800802c:	4638      	mov	r0, r7
 800802e:	f7ff ffa5 	bl	8007f7c <_Bfree>
 8008032:	4644      	mov	r4, r8
 8008034:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008038:	3501      	adds	r5, #1
 800803a:	615e      	str	r6, [r3, #20]
 800803c:	6125      	str	r5, [r4, #16]
 800803e:	4620      	mov	r0, r4
 8008040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008044:	0800a7db 	.word	0x0800a7db
 8008048:	0800a7ec 	.word	0x0800a7ec

0800804c <__hi0bits>:
 800804c:	0c03      	lsrs	r3, r0, #16
 800804e:	041b      	lsls	r3, r3, #16
 8008050:	b9d3      	cbnz	r3, 8008088 <__hi0bits+0x3c>
 8008052:	0400      	lsls	r0, r0, #16
 8008054:	2310      	movs	r3, #16
 8008056:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800805a:	bf04      	itt	eq
 800805c:	0200      	lsleq	r0, r0, #8
 800805e:	3308      	addeq	r3, #8
 8008060:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008064:	bf04      	itt	eq
 8008066:	0100      	lsleq	r0, r0, #4
 8008068:	3304      	addeq	r3, #4
 800806a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800806e:	bf04      	itt	eq
 8008070:	0080      	lsleq	r0, r0, #2
 8008072:	3302      	addeq	r3, #2
 8008074:	2800      	cmp	r0, #0
 8008076:	db05      	blt.n	8008084 <__hi0bits+0x38>
 8008078:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800807c:	f103 0301 	add.w	r3, r3, #1
 8008080:	bf08      	it	eq
 8008082:	2320      	moveq	r3, #32
 8008084:	4618      	mov	r0, r3
 8008086:	4770      	bx	lr
 8008088:	2300      	movs	r3, #0
 800808a:	e7e4      	b.n	8008056 <__hi0bits+0xa>

0800808c <__lo0bits>:
 800808c:	6803      	ldr	r3, [r0, #0]
 800808e:	f013 0207 	ands.w	r2, r3, #7
 8008092:	d00c      	beq.n	80080ae <__lo0bits+0x22>
 8008094:	07d9      	lsls	r1, r3, #31
 8008096:	d422      	bmi.n	80080de <__lo0bits+0x52>
 8008098:	079a      	lsls	r2, r3, #30
 800809a:	bf49      	itett	mi
 800809c:	085b      	lsrmi	r3, r3, #1
 800809e:	089b      	lsrpl	r3, r3, #2
 80080a0:	6003      	strmi	r3, [r0, #0]
 80080a2:	2201      	movmi	r2, #1
 80080a4:	bf5c      	itt	pl
 80080a6:	6003      	strpl	r3, [r0, #0]
 80080a8:	2202      	movpl	r2, #2
 80080aa:	4610      	mov	r0, r2
 80080ac:	4770      	bx	lr
 80080ae:	b299      	uxth	r1, r3
 80080b0:	b909      	cbnz	r1, 80080b6 <__lo0bits+0x2a>
 80080b2:	0c1b      	lsrs	r3, r3, #16
 80080b4:	2210      	movs	r2, #16
 80080b6:	b2d9      	uxtb	r1, r3
 80080b8:	b909      	cbnz	r1, 80080be <__lo0bits+0x32>
 80080ba:	3208      	adds	r2, #8
 80080bc:	0a1b      	lsrs	r3, r3, #8
 80080be:	0719      	lsls	r1, r3, #28
 80080c0:	bf04      	itt	eq
 80080c2:	091b      	lsreq	r3, r3, #4
 80080c4:	3204      	addeq	r2, #4
 80080c6:	0799      	lsls	r1, r3, #30
 80080c8:	bf04      	itt	eq
 80080ca:	089b      	lsreq	r3, r3, #2
 80080cc:	3202      	addeq	r2, #2
 80080ce:	07d9      	lsls	r1, r3, #31
 80080d0:	d403      	bmi.n	80080da <__lo0bits+0x4e>
 80080d2:	085b      	lsrs	r3, r3, #1
 80080d4:	f102 0201 	add.w	r2, r2, #1
 80080d8:	d003      	beq.n	80080e2 <__lo0bits+0x56>
 80080da:	6003      	str	r3, [r0, #0]
 80080dc:	e7e5      	b.n	80080aa <__lo0bits+0x1e>
 80080de:	2200      	movs	r2, #0
 80080e0:	e7e3      	b.n	80080aa <__lo0bits+0x1e>
 80080e2:	2220      	movs	r2, #32
 80080e4:	e7e1      	b.n	80080aa <__lo0bits+0x1e>
	...

080080e8 <__i2b>:
 80080e8:	b510      	push	{r4, lr}
 80080ea:	460c      	mov	r4, r1
 80080ec:	2101      	movs	r1, #1
 80080ee:	f7ff ff05 	bl	8007efc <_Balloc>
 80080f2:	4602      	mov	r2, r0
 80080f4:	b928      	cbnz	r0, 8008102 <__i2b+0x1a>
 80080f6:	4b05      	ldr	r3, [pc, #20]	; (800810c <__i2b+0x24>)
 80080f8:	4805      	ldr	r0, [pc, #20]	; (8008110 <__i2b+0x28>)
 80080fa:	f240 1145 	movw	r1, #325	; 0x145
 80080fe:	f7ff f819 	bl	8007134 <__assert_func>
 8008102:	2301      	movs	r3, #1
 8008104:	6144      	str	r4, [r0, #20]
 8008106:	6103      	str	r3, [r0, #16]
 8008108:	bd10      	pop	{r4, pc}
 800810a:	bf00      	nop
 800810c:	0800a7db 	.word	0x0800a7db
 8008110:	0800a7ec 	.word	0x0800a7ec

08008114 <__multiply>:
 8008114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008118:	4691      	mov	r9, r2
 800811a:	690a      	ldr	r2, [r1, #16]
 800811c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008120:	429a      	cmp	r2, r3
 8008122:	bfb8      	it	lt
 8008124:	460b      	movlt	r3, r1
 8008126:	460c      	mov	r4, r1
 8008128:	bfbc      	itt	lt
 800812a:	464c      	movlt	r4, r9
 800812c:	4699      	movlt	r9, r3
 800812e:	6927      	ldr	r7, [r4, #16]
 8008130:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008134:	68a3      	ldr	r3, [r4, #8]
 8008136:	6861      	ldr	r1, [r4, #4]
 8008138:	eb07 060a 	add.w	r6, r7, sl
 800813c:	42b3      	cmp	r3, r6
 800813e:	b085      	sub	sp, #20
 8008140:	bfb8      	it	lt
 8008142:	3101      	addlt	r1, #1
 8008144:	f7ff feda 	bl	8007efc <_Balloc>
 8008148:	b930      	cbnz	r0, 8008158 <__multiply+0x44>
 800814a:	4602      	mov	r2, r0
 800814c:	4b44      	ldr	r3, [pc, #272]	; (8008260 <__multiply+0x14c>)
 800814e:	4845      	ldr	r0, [pc, #276]	; (8008264 <__multiply+0x150>)
 8008150:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008154:	f7fe ffee 	bl	8007134 <__assert_func>
 8008158:	f100 0514 	add.w	r5, r0, #20
 800815c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008160:	462b      	mov	r3, r5
 8008162:	2200      	movs	r2, #0
 8008164:	4543      	cmp	r3, r8
 8008166:	d321      	bcc.n	80081ac <__multiply+0x98>
 8008168:	f104 0314 	add.w	r3, r4, #20
 800816c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008170:	f109 0314 	add.w	r3, r9, #20
 8008174:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008178:	9202      	str	r2, [sp, #8]
 800817a:	1b3a      	subs	r2, r7, r4
 800817c:	3a15      	subs	r2, #21
 800817e:	f022 0203 	bic.w	r2, r2, #3
 8008182:	3204      	adds	r2, #4
 8008184:	f104 0115 	add.w	r1, r4, #21
 8008188:	428f      	cmp	r7, r1
 800818a:	bf38      	it	cc
 800818c:	2204      	movcc	r2, #4
 800818e:	9201      	str	r2, [sp, #4]
 8008190:	9a02      	ldr	r2, [sp, #8]
 8008192:	9303      	str	r3, [sp, #12]
 8008194:	429a      	cmp	r2, r3
 8008196:	d80c      	bhi.n	80081b2 <__multiply+0x9e>
 8008198:	2e00      	cmp	r6, #0
 800819a:	dd03      	ble.n	80081a4 <__multiply+0x90>
 800819c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d05b      	beq.n	800825c <__multiply+0x148>
 80081a4:	6106      	str	r6, [r0, #16]
 80081a6:	b005      	add	sp, #20
 80081a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ac:	f843 2b04 	str.w	r2, [r3], #4
 80081b0:	e7d8      	b.n	8008164 <__multiply+0x50>
 80081b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80081b6:	f1ba 0f00 	cmp.w	sl, #0
 80081ba:	d024      	beq.n	8008206 <__multiply+0xf2>
 80081bc:	f104 0e14 	add.w	lr, r4, #20
 80081c0:	46a9      	mov	r9, r5
 80081c2:	f04f 0c00 	mov.w	ip, #0
 80081c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80081ca:	f8d9 1000 	ldr.w	r1, [r9]
 80081ce:	fa1f fb82 	uxth.w	fp, r2
 80081d2:	b289      	uxth	r1, r1
 80081d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80081d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80081dc:	f8d9 2000 	ldr.w	r2, [r9]
 80081e0:	4461      	add	r1, ip
 80081e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80081ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80081ee:	b289      	uxth	r1, r1
 80081f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081f4:	4577      	cmp	r7, lr
 80081f6:	f849 1b04 	str.w	r1, [r9], #4
 80081fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081fe:	d8e2      	bhi.n	80081c6 <__multiply+0xb2>
 8008200:	9a01      	ldr	r2, [sp, #4]
 8008202:	f845 c002 	str.w	ip, [r5, r2]
 8008206:	9a03      	ldr	r2, [sp, #12]
 8008208:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800820c:	3304      	adds	r3, #4
 800820e:	f1b9 0f00 	cmp.w	r9, #0
 8008212:	d021      	beq.n	8008258 <__multiply+0x144>
 8008214:	6829      	ldr	r1, [r5, #0]
 8008216:	f104 0c14 	add.w	ip, r4, #20
 800821a:	46ae      	mov	lr, r5
 800821c:	f04f 0a00 	mov.w	sl, #0
 8008220:	f8bc b000 	ldrh.w	fp, [ip]
 8008224:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008228:	fb09 220b 	mla	r2, r9, fp, r2
 800822c:	4452      	add	r2, sl
 800822e:	b289      	uxth	r1, r1
 8008230:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008234:	f84e 1b04 	str.w	r1, [lr], #4
 8008238:	f85c 1b04 	ldr.w	r1, [ip], #4
 800823c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008240:	f8be 1000 	ldrh.w	r1, [lr]
 8008244:	fb09 110a 	mla	r1, r9, sl, r1
 8008248:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800824c:	4567      	cmp	r7, ip
 800824e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008252:	d8e5      	bhi.n	8008220 <__multiply+0x10c>
 8008254:	9a01      	ldr	r2, [sp, #4]
 8008256:	50a9      	str	r1, [r5, r2]
 8008258:	3504      	adds	r5, #4
 800825a:	e799      	b.n	8008190 <__multiply+0x7c>
 800825c:	3e01      	subs	r6, #1
 800825e:	e79b      	b.n	8008198 <__multiply+0x84>
 8008260:	0800a7db 	.word	0x0800a7db
 8008264:	0800a7ec 	.word	0x0800a7ec

08008268 <__pow5mult>:
 8008268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800826c:	4615      	mov	r5, r2
 800826e:	f012 0203 	ands.w	r2, r2, #3
 8008272:	4606      	mov	r6, r0
 8008274:	460f      	mov	r7, r1
 8008276:	d007      	beq.n	8008288 <__pow5mult+0x20>
 8008278:	4c25      	ldr	r4, [pc, #148]	; (8008310 <__pow5mult+0xa8>)
 800827a:	3a01      	subs	r2, #1
 800827c:	2300      	movs	r3, #0
 800827e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008282:	f7ff fe9d 	bl	8007fc0 <__multadd>
 8008286:	4607      	mov	r7, r0
 8008288:	10ad      	asrs	r5, r5, #2
 800828a:	d03d      	beq.n	8008308 <__pow5mult+0xa0>
 800828c:	69f4      	ldr	r4, [r6, #28]
 800828e:	b97c      	cbnz	r4, 80082b0 <__pow5mult+0x48>
 8008290:	2010      	movs	r0, #16
 8008292:	f7fd ff89 	bl	80061a8 <malloc>
 8008296:	4602      	mov	r2, r0
 8008298:	61f0      	str	r0, [r6, #28]
 800829a:	b928      	cbnz	r0, 80082a8 <__pow5mult+0x40>
 800829c:	4b1d      	ldr	r3, [pc, #116]	; (8008314 <__pow5mult+0xac>)
 800829e:	481e      	ldr	r0, [pc, #120]	; (8008318 <__pow5mult+0xb0>)
 80082a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80082a4:	f7fe ff46 	bl	8007134 <__assert_func>
 80082a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082ac:	6004      	str	r4, [r0, #0]
 80082ae:	60c4      	str	r4, [r0, #12]
 80082b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80082b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082b8:	b94c      	cbnz	r4, 80082ce <__pow5mult+0x66>
 80082ba:	f240 2171 	movw	r1, #625	; 0x271
 80082be:	4630      	mov	r0, r6
 80082c0:	f7ff ff12 	bl	80080e8 <__i2b>
 80082c4:	2300      	movs	r3, #0
 80082c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80082ca:	4604      	mov	r4, r0
 80082cc:	6003      	str	r3, [r0, #0]
 80082ce:	f04f 0900 	mov.w	r9, #0
 80082d2:	07eb      	lsls	r3, r5, #31
 80082d4:	d50a      	bpl.n	80082ec <__pow5mult+0x84>
 80082d6:	4639      	mov	r1, r7
 80082d8:	4622      	mov	r2, r4
 80082da:	4630      	mov	r0, r6
 80082dc:	f7ff ff1a 	bl	8008114 <__multiply>
 80082e0:	4639      	mov	r1, r7
 80082e2:	4680      	mov	r8, r0
 80082e4:	4630      	mov	r0, r6
 80082e6:	f7ff fe49 	bl	8007f7c <_Bfree>
 80082ea:	4647      	mov	r7, r8
 80082ec:	106d      	asrs	r5, r5, #1
 80082ee:	d00b      	beq.n	8008308 <__pow5mult+0xa0>
 80082f0:	6820      	ldr	r0, [r4, #0]
 80082f2:	b938      	cbnz	r0, 8008304 <__pow5mult+0x9c>
 80082f4:	4622      	mov	r2, r4
 80082f6:	4621      	mov	r1, r4
 80082f8:	4630      	mov	r0, r6
 80082fa:	f7ff ff0b 	bl	8008114 <__multiply>
 80082fe:	6020      	str	r0, [r4, #0]
 8008300:	f8c0 9000 	str.w	r9, [r0]
 8008304:	4604      	mov	r4, r0
 8008306:	e7e4      	b.n	80082d2 <__pow5mult+0x6a>
 8008308:	4638      	mov	r0, r7
 800830a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800830e:	bf00      	nop
 8008310:	0800a938 	.word	0x0800a938
 8008314:	0800a6c9 	.word	0x0800a6c9
 8008318:	0800a7ec 	.word	0x0800a7ec

0800831c <__lshift>:
 800831c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008320:	460c      	mov	r4, r1
 8008322:	6849      	ldr	r1, [r1, #4]
 8008324:	6923      	ldr	r3, [r4, #16]
 8008326:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800832a:	68a3      	ldr	r3, [r4, #8]
 800832c:	4607      	mov	r7, r0
 800832e:	4691      	mov	r9, r2
 8008330:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008334:	f108 0601 	add.w	r6, r8, #1
 8008338:	42b3      	cmp	r3, r6
 800833a:	db0b      	blt.n	8008354 <__lshift+0x38>
 800833c:	4638      	mov	r0, r7
 800833e:	f7ff fddd 	bl	8007efc <_Balloc>
 8008342:	4605      	mov	r5, r0
 8008344:	b948      	cbnz	r0, 800835a <__lshift+0x3e>
 8008346:	4602      	mov	r2, r0
 8008348:	4b28      	ldr	r3, [pc, #160]	; (80083ec <__lshift+0xd0>)
 800834a:	4829      	ldr	r0, [pc, #164]	; (80083f0 <__lshift+0xd4>)
 800834c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008350:	f7fe fef0 	bl	8007134 <__assert_func>
 8008354:	3101      	adds	r1, #1
 8008356:	005b      	lsls	r3, r3, #1
 8008358:	e7ee      	b.n	8008338 <__lshift+0x1c>
 800835a:	2300      	movs	r3, #0
 800835c:	f100 0114 	add.w	r1, r0, #20
 8008360:	f100 0210 	add.w	r2, r0, #16
 8008364:	4618      	mov	r0, r3
 8008366:	4553      	cmp	r3, sl
 8008368:	db33      	blt.n	80083d2 <__lshift+0xb6>
 800836a:	6920      	ldr	r0, [r4, #16]
 800836c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008370:	f104 0314 	add.w	r3, r4, #20
 8008374:	f019 091f 	ands.w	r9, r9, #31
 8008378:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800837c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008380:	d02b      	beq.n	80083da <__lshift+0xbe>
 8008382:	f1c9 0e20 	rsb	lr, r9, #32
 8008386:	468a      	mov	sl, r1
 8008388:	2200      	movs	r2, #0
 800838a:	6818      	ldr	r0, [r3, #0]
 800838c:	fa00 f009 	lsl.w	r0, r0, r9
 8008390:	4310      	orrs	r0, r2
 8008392:	f84a 0b04 	str.w	r0, [sl], #4
 8008396:	f853 2b04 	ldr.w	r2, [r3], #4
 800839a:	459c      	cmp	ip, r3
 800839c:	fa22 f20e 	lsr.w	r2, r2, lr
 80083a0:	d8f3      	bhi.n	800838a <__lshift+0x6e>
 80083a2:	ebac 0304 	sub.w	r3, ip, r4
 80083a6:	3b15      	subs	r3, #21
 80083a8:	f023 0303 	bic.w	r3, r3, #3
 80083ac:	3304      	adds	r3, #4
 80083ae:	f104 0015 	add.w	r0, r4, #21
 80083b2:	4584      	cmp	ip, r0
 80083b4:	bf38      	it	cc
 80083b6:	2304      	movcc	r3, #4
 80083b8:	50ca      	str	r2, [r1, r3]
 80083ba:	b10a      	cbz	r2, 80083c0 <__lshift+0xa4>
 80083bc:	f108 0602 	add.w	r6, r8, #2
 80083c0:	3e01      	subs	r6, #1
 80083c2:	4638      	mov	r0, r7
 80083c4:	612e      	str	r6, [r5, #16]
 80083c6:	4621      	mov	r1, r4
 80083c8:	f7ff fdd8 	bl	8007f7c <_Bfree>
 80083cc:	4628      	mov	r0, r5
 80083ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80083d6:	3301      	adds	r3, #1
 80083d8:	e7c5      	b.n	8008366 <__lshift+0x4a>
 80083da:	3904      	subs	r1, #4
 80083dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80083e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80083e4:	459c      	cmp	ip, r3
 80083e6:	d8f9      	bhi.n	80083dc <__lshift+0xc0>
 80083e8:	e7ea      	b.n	80083c0 <__lshift+0xa4>
 80083ea:	bf00      	nop
 80083ec:	0800a7db 	.word	0x0800a7db
 80083f0:	0800a7ec 	.word	0x0800a7ec

080083f4 <__mcmp>:
 80083f4:	b530      	push	{r4, r5, lr}
 80083f6:	6902      	ldr	r2, [r0, #16]
 80083f8:	690c      	ldr	r4, [r1, #16]
 80083fa:	1b12      	subs	r2, r2, r4
 80083fc:	d10e      	bne.n	800841c <__mcmp+0x28>
 80083fe:	f100 0314 	add.w	r3, r0, #20
 8008402:	3114      	adds	r1, #20
 8008404:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008408:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800840c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008410:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008414:	42a5      	cmp	r5, r4
 8008416:	d003      	beq.n	8008420 <__mcmp+0x2c>
 8008418:	d305      	bcc.n	8008426 <__mcmp+0x32>
 800841a:	2201      	movs	r2, #1
 800841c:	4610      	mov	r0, r2
 800841e:	bd30      	pop	{r4, r5, pc}
 8008420:	4283      	cmp	r3, r0
 8008422:	d3f3      	bcc.n	800840c <__mcmp+0x18>
 8008424:	e7fa      	b.n	800841c <__mcmp+0x28>
 8008426:	f04f 32ff 	mov.w	r2, #4294967295
 800842a:	e7f7      	b.n	800841c <__mcmp+0x28>

0800842c <__mdiff>:
 800842c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008430:	460c      	mov	r4, r1
 8008432:	4606      	mov	r6, r0
 8008434:	4611      	mov	r1, r2
 8008436:	4620      	mov	r0, r4
 8008438:	4690      	mov	r8, r2
 800843a:	f7ff ffdb 	bl	80083f4 <__mcmp>
 800843e:	1e05      	subs	r5, r0, #0
 8008440:	d110      	bne.n	8008464 <__mdiff+0x38>
 8008442:	4629      	mov	r1, r5
 8008444:	4630      	mov	r0, r6
 8008446:	f7ff fd59 	bl	8007efc <_Balloc>
 800844a:	b930      	cbnz	r0, 800845a <__mdiff+0x2e>
 800844c:	4b3a      	ldr	r3, [pc, #232]	; (8008538 <__mdiff+0x10c>)
 800844e:	4602      	mov	r2, r0
 8008450:	f240 2137 	movw	r1, #567	; 0x237
 8008454:	4839      	ldr	r0, [pc, #228]	; (800853c <__mdiff+0x110>)
 8008456:	f7fe fe6d 	bl	8007134 <__assert_func>
 800845a:	2301      	movs	r3, #1
 800845c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008460:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008464:	bfa4      	itt	ge
 8008466:	4643      	movge	r3, r8
 8008468:	46a0      	movge	r8, r4
 800846a:	4630      	mov	r0, r6
 800846c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008470:	bfa6      	itte	ge
 8008472:	461c      	movge	r4, r3
 8008474:	2500      	movge	r5, #0
 8008476:	2501      	movlt	r5, #1
 8008478:	f7ff fd40 	bl	8007efc <_Balloc>
 800847c:	b920      	cbnz	r0, 8008488 <__mdiff+0x5c>
 800847e:	4b2e      	ldr	r3, [pc, #184]	; (8008538 <__mdiff+0x10c>)
 8008480:	4602      	mov	r2, r0
 8008482:	f240 2145 	movw	r1, #581	; 0x245
 8008486:	e7e5      	b.n	8008454 <__mdiff+0x28>
 8008488:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800848c:	6926      	ldr	r6, [r4, #16]
 800848e:	60c5      	str	r5, [r0, #12]
 8008490:	f104 0914 	add.w	r9, r4, #20
 8008494:	f108 0514 	add.w	r5, r8, #20
 8008498:	f100 0e14 	add.w	lr, r0, #20
 800849c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80084a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80084a4:	f108 0210 	add.w	r2, r8, #16
 80084a8:	46f2      	mov	sl, lr
 80084aa:	2100      	movs	r1, #0
 80084ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80084b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80084b4:	fa11 f88b 	uxtah	r8, r1, fp
 80084b8:	b299      	uxth	r1, r3
 80084ba:	0c1b      	lsrs	r3, r3, #16
 80084bc:	eba8 0801 	sub.w	r8, r8, r1
 80084c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80084c4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80084c8:	fa1f f888 	uxth.w	r8, r8
 80084cc:	1419      	asrs	r1, r3, #16
 80084ce:	454e      	cmp	r6, r9
 80084d0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80084d4:	f84a 3b04 	str.w	r3, [sl], #4
 80084d8:	d8e8      	bhi.n	80084ac <__mdiff+0x80>
 80084da:	1b33      	subs	r3, r6, r4
 80084dc:	3b15      	subs	r3, #21
 80084de:	f023 0303 	bic.w	r3, r3, #3
 80084e2:	3304      	adds	r3, #4
 80084e4:	3415      	adds	r4, #21
 80084e6:	42a6      	cmp	r6, r4
 80084e8:	bf38      	it	cc
 80084ea:	2304      	movcc	r3, #4
 80084ec:	441d      	add	r5, r3
 80084ee:	4473      	add	r3, lr
 80084f0:	469e      	mov	lr, r3
 80084f2:	462e      	mov	r6, r5
 80084f4:	4566      	cmp	r6, ip
 80084f6:	d30e      	bcc.n	8008516 <__mdiff+0xea>
 80084f8:	f10c 0203 	add.w	r2, ip, #3
 80084fc:	1b52      	subs	r2, r2, r5
 80084fe:	f022 0203 	bic.w	r2, r2, #3
 8008502:	3d03      	subs	r5, #3
 8008504:	45ac      	cmp	ip, r5
 8008506:	bf38      	it	cc
 8008508:	2200      	movcc	r2, #0
 800850a:	4413      	add	r3, r2
 800850c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008510:	b17a      	cbz	r2, 8008532 <__mdiff+0x106>
 8008512:	6107      	str	r7, [r0, #16]
 8008514:	e7a4      	b.n	8008460 <__mdiff+0x34>
 8008516:	f856 8b04 	ldr.w	r8, [r6], #4
 800851a:	fa11 f288 	uxtah	r2, r1, r8
 800851e:	1414      	asrs	r4, r2, #16
 8008520:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008524:	b292      	uxth	r2, r2
 8008526:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800852a:	f84e 2b04 	str.w	r2, [lr], #4
 800852e:	1421      	asrs	r1, r4, #16
 8008530:	e7e0      	b.n	80084f4 <__mdiff+0xc8>
 8008532:	3f01      	subs	r7, #1
 8008534:	e7ea      	b.n	800850c <__mdiff+0xe0>
 8008536:	bf00      	nop
 8008538:	0800a7db 	.word	0x0800a7db
 800853c:	0800a7ec 	.word	0x0800a7ec

08008540 <__d2b>:
 8008540:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008544:	460f      	mov	r7, r1
 8008546:	2101      	movs	r1, #1
 8008548:	ec59 8b10 	vmov	r8, r9, d0
 800854c:	4616      	mov	r6, r2
 800854e:	f7ff fcd5 	bl	8007efc <_Balloc>
 8008552:	4604      	mov	r4, r0
 8008554:	b930      	cbnz	r0, 8008564 <__d2b+0x24>
 8008556:	4602      	mov	r2, r0
 8008558:	4b24      	ldr	r3, [pc, #144]	; (80085ec <__d2b+0xac>)
 800855a:	4825      	ldr	r0, [pc, #148]	; (80085f0 <__d2b+0xb0>)
 800855c:	f240 310f 	movw	r1, #783	; 0x30f
 8008560:	f7fe fde8 	bl	8007134 <__assert_func>
 8008564:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008568:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800856c:	bb2d      	cbnz	r5, 80085ba <__d2b+0x7a>
 800856e:	9301      	str	r3, [sp, #4]
 8008570:	f1b8 0300 	subs.w	r3, r8, #0
 8008574:	d026      	beq.n	80085c4 <__d2b+0x84>
 8008576:	4668      	mov	r0, sp
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	f7ff fd87 	bl	800808c <__lo0bits>
 800857e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008582:	b1e8      	cbz	r0, 80085c0 <__d2b+0x80>
 8008584:	f1c0 0320 	rsb	r3, r0, #32
 8008588:	fa02 f303 	lsl.w	r3, r2, r3
 800858c:	430b      	orrs	r3, r1
 800858e:	40c2      	lsrs	r2, r0
 8008590:	6163      	str	r3, [r4, #20]
 8008592:	9201      	str	r2, [sp, #4]
 8008594:	9b01      	ldr	r3, [sp, #4]
 8008596:	61a3      	str	r3, [r4, #24]
 8008598:	2b00      	cmp	r3, #0
 800859a:	bf14      	ite	ne
 800859c:	2202      	movne	r2, #2
 800859e:	2201      	moveq	r2, #1
 80085a0:	6122      	str	r2, [r4, #16]
 80085a2:	b1bd      	cbz	r5, 80085d4 <__d2b+0x94>
 80085a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80085a8:	4405      	add	r5, r0
 80085aa:	603d      	str	r5, [r7, #0]
 80085ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80085b0:	6030      	str	r0, [r6, #0]
 80085b2:	4620      	mov	r0, r4
 80085b4:	b003      	add	sp, #12
 80085b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085be:	e7d6      	b.n	800856e <__d2b+0x2e>
 80085c0:	6161      	str	r1, [r4, #20]
 80085c2:	e7e7      	b.n	8008594 <__d2b+0x54>
 80085c4:	a801      	add	r0, sp, #4
 80085c6:	f7ff fd61 	bl	800808c <__lo0bits>
 80085ca:	9b01      	ldr	r3, [sp, #4]
 80085cc:	6163      	str	r3, [r4, #20]
 80085ce:	3020      	adds	r0, #32
 80085d0:	2201      	movs	r2, #1
 80085d2:	e7e5      	b.n	80085a0 <__d2b+0x60>
 80085d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80085d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80085dc:	6038      	str	r0, [r7, #0]
 80085de:	6918      	ldr	r0, [r3, #16]
 80085e0:	f7ff fd34 	bl	800804c <__hi0bits>
 80085e4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80085e8:	e7e2      	b.n	80085b0 <__d2b+0x70>
 80085ea:	bf00      	nop
 80085ec:	0800a7db 	.word	0x0800a7db
 80085f0:	0800a7ec 	.word	0x0800a7ec

080085f4 <__ssputs_r>:
 80085f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f8:	688e      	ldr	r6, [r1, #8]
 80085fa:	461f      	mov	r7, r3
 80085fc:	42be      	cmp	r6, r7
 80085fe:	680b      	ldr	r3, [r1, #0]
 8008600:	4682      	mov	sl, r0
 8008602:	460c      	mov	r4, r1
 8008604:	4690      	mov	r8, r2
 8008606:	d82c      	bhi.n	8008662 <__ssputs_r+0x6e>
 8008608:	898a      	ldrh	r2, [r1, #12]
 800860a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800860e:	d026      	beq.n	800865e <__ssputs_r+0x6a>
 8008610:	6965      	ldr	r5, [r4, #20]
 8008612:	6909      	ldr	r1, [r1, #16]
 8008614:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008618:	eba3 0901 	sub.w	r9, r3, r1
 800861c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008620:	1c7b      	adds	r3, r7, #1
 8008622:	444b      	add	r3, r9
 8008624:	106d      	asrs	r5, r5, #1
 8008626:	429d      	cmp	r5, r3
 8008628:	bf38      	it	cc
 800862a:	461d      	movcc	r5, r3
 800862c:	0553      	lsls	r3, r2, #21
 800862e:	d527      	bpl.n	8008680 <__ssputs_r+0x8c>
 8008630:	4629      	mov	r1, r5
 8008632:	f7fd fde9 	bl	8006208 <_malloc_r>
 8008636:	4606      	mov	r6, r0
 8008638:	b360      	cbz	r0, 8008694 <__ssputs_r+0xa0>
 800863a:	6921      	ldr	r1, [r4, #16]
 800863c:	464a      	mov	r2, r9
 800863e:	f000 fa0b 	bl	8008a58 <memcpy>
 8008642:	89a3      	ldrh	r3, [r4, #12]
 8008644:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800864c:	81a3      	strh	r3, [r4, #12]
 800864e:	6126      	str	r6, [r4, #16]
 8008650:	6165      	str	r5, [r4, #20]
 8008652:	444e      	add	r6, r9
 8008654:	eba5 0509 	sub.w	r5, r5, r9
 8008658:	6026      	str	r6, [r4, #0]
 800865a:	60a5      	str	r5, [r4, #8]
 800865c:	463e      	mov	r6, r7
 800865e:	42be      	cmp	r6, r7
 8008660:	d900      	bls.n	8008664 <__ssputs_r+0x70>
 8008662:	463e      	mov	r6, r7
 8008664:	6820      	ldr	r0, [r4, #0]
 8008666:	4632      	mov	r2, r6
 8008668:	4641      	mov	r1, r8
 800866a:	f000 f9db 	bl	8008a24 <memmove>
 800866e:	68a3      	ldr	r3, [r4, #8]
 8008670:	1b9b      	subs	r3, r3, r6
 8008672:	60a3      	str	r3, [r4, #8]
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	4433      	add	r3, r6
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	2000      	movs	r0, #0
 800867c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008680:	462a      	mov	r2, r5
 8008682:	f000 fa26 	bl	8008ad2 <_realloc_r>
 8008686:	4606      	mov	r6, r0
 8008688:	2800      	cmp	r0, #0
 800868a:	d1e0      	bne.n	800864e <__ssputs_r+0x5a>
 800868c:	6921      	ldr	r1, [r4, #16]
 800868e:	4650      	mov	r0, sl
 8008690:	f7ff fbe8 	bl	8007e64 <_free_r>
 8008694:	230c      	movs	r3, #12
 8008696:	f8ca 3000 	str.w	r3, [sl]
 800869a:	89a3      	ldrh	r3, [r4, #12]
 800869c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086a0:	81a3      	strh	r3, [r4, #12]
 80086a2:	f04f 30ff 	mov.w	r0, #4294967295
 80086a6:	e7e9      	b.n	800867c <__ssputs_r+0x88>

080086a8 <_svfiprintf_r>:
 80086a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ac:	4698      	mov	r8, r3
 80086ae:	898b      	ldrh	r3, [r1, #12]
 80086b0:	061b      	lsls	r3, r3, #24
 80086b2:	b09d      	sub	sp, #116	; 0x74
 80086b4:	4607      	mov	r7, r0
 80086b6:	460d      	mov	r5, r1
 80086b8:	4614      	mov	r4, r2
 80086ba:	d50e      	bpl.n	80086da <_svfiprintf_r+0x32>
 80086bc:	690b      	ldr	r3, [r1, #16]
 80086be:	b963      	cbnz	r3, 80086da <_svfiprintf_r+0x32>
 80086c0:	2140      	movs	r1, #64	; 0x40
 80086c2:	f7fd fda1 	bl	8006208 <_malloc_r>
 80086c6:	6028      	str	r0, [r5, #0]
 80086c8:	6128      	str	r0, [r5, #16]
 80086ca:	b920      	cbnz	r0, 80086d6 <_svfiprintf_r+0x2e>
 80086cc:	230c      	movs	r3, #12
 80086ce:	603b      	str	r3, [r7, #0]
 80086d0:	f04f 30ff 	mov.w	r0, #4294967295
 80086d4:	e0d0      	b.n	8008878 <_svfiprintf_r+0x1d0>
 80086d6:	2340      	movs	r3, #64	; 0x40
 80086d8:	616b      	str	r3, [r5, #20]
 80086da:	2300      	movs	r3, #0
 80086dc:	9309      	str	r3, [sp, #36]	; 0x24
 80086de:	2320      	movs	r3, #32
 80086e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80086e8:	2330      	movs	r3, #48	; 0x30
 80086ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008890 <_svfiprintf_r+0x1e8>
 80086ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086f2:	f04f 0901 	mov.w	r9, #1
 80086f6:	4623      	mov	r3, r4
 80086f8:	469a      	mov	sl, r3
 80086fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086fe:	b10a      	cbz	r2, 8008704 <_svfiprintf_r+0x5c>
 8008700:	2a25      	cmp	r2, #37	; 0x25
 8008702:	d1f9      	bne.n	80086f8 <_svfiprintf_r+0x50>
 8008704:	ebba 0b04 	subs.w	fp, sl, r4
 8008708:	d00b      	beq.n	8008722 <_svfiprintf_r+0x7a>
 800870a:	465b      	mov	r3, fp
 800870c:	4622      	mov	r2, r4
 800870e:	4629      	mov	r1, r5
 8008710:	4638      	mov	r0, r7
 8008712:	f7ff ff6f 	bl	80085f4 <__ssputs_r>
 8008716:	3001      	adds	r0, #1
 8008718:	f000 80a9 	beq.w	800886e <_svfiprintf_r+0x1c6>
 800871c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800871e:	445a      	add	r2, fp
 8008720:	9209      	str	r2, [sp, #36]	; 0x24
 8008722:	f89a 3000 	ldrb.w	r3, [sl]
 8008726:	2b00      	cmp	r3, #0
 8008728:	f000 80a1 	beq.w	800886e <_svfiprintf_r+0x1c6>
 800872c:	2300      	movs	r3, #0
 800872e:	f04f 32ff 	mov.w	r2, #4294967295
 8008732:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008736:	f10a 0a01 	add.w	sl, sl, #1
 800873a:	9304      	str	r3, [sp, #16]
 800873c:	9307      	str	r3, [sp, #28]
 800873e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008742:	931a      	str	r3, [sp, #104]	; 0x68
 8008744:	4654      	mov	r4, sl
 8008746:	2205      	movs	r2, #5
 8008748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800874c:	4850      	ldr	r0, [pc, #320]	; (8008890 <_svfiprintf_r+0x1e8>)
 800874e:	f7f7 fd47 	bl	80001e0 <memchr>
 8008752:	9a04      	ldr	r2, [sp, #16]
 8008754:	b9d8      	cbnz	r0, 800878e <_svfiprintf_r+0xe6>
 8008756:	06d0      	lsls	r0, r2, #27
 8008758:	bf44      	itt	mi
 800875a:	2320      	movmi	r3, #32
 800875c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008760:	0711      	lsls	r1, r2, #28
 8008762:	bf44      	itt	mi
 8008764:	232b      	movmi	r3, #43	; 0x2b
 8008766:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800876a:	f89a 3000 	ldrb.w	r3, [sl]
 800876e:	2b2a      	cmp	r3, #42	; 0x2a
 8008770:	d015      	beq.n	800879e <_svfiprintf_r+0xf6>
 8008772:	9a07      	ldr	r2, [sp, #28]
 8008774:	4654      	mov	r4, sl
 8008776:	2000      	movs	r0, #0
 8008778:	f04f 0c0a 	mov.w	ip, #10
 800877c:	4621      	mov	r1, r4
 800877e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008782:	3b30      	subs	r3, #48	; 0x30
 8008784:	2b09      	cmp	r3, #9
 8008786:	d94d      	bls.n	8008824 <_svfiprintf_r+0x17c>
 8008788:	b1b0      	cbz	r0, 80087b8 <_svfiprintf_r+0x110>
 800878a:	9207      	str	r2, [sp, #28]
 800878c:	e014      	b.n	80087b8 <_svfiprintf_r+0x110>
 800878e:	eba0 0308 	sub.w	r3, r0, r8
 8008792:	fa09 f303 	lsl.w	r3, r9, r3
 8008796:	4313      	orrs	r3, r2
 8008798:	9304      	str	r3, [sp, #16]
 800879a:	46a2      	mov	sl, r4
 800879c:	e7d2      	b.n	8008744 <_svfiprintf_r+0x9c>
 800879e:	9b03      	ldr	r3, [sp, #12]
 80087a0:	1d19      	adds	r1, r3, #4
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	9103      	str	r1, [sp, #12]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	bfbb      	ittet	lt
 80087aa:	425b      	neglt	r3, r3
 80087ac:	f042 0202 	orrlt.w	r2, r2, #2
 80087b0:	9307      	strge	r3, [sp, #28]
 80087b2:	9307      	strlt	r3, [sp, #28]
 80087b4:	bfb8      	it	lt
 80087b6:	9204      	strlt	r2, [sp, #16]
 80087b8:	7823      	ldrb	r3, [r4, #0]
 80087ba:	2b2e      	cmp	r3, #46	; 0x2e
 80087bc:	d10c      	bne.n	80087d8 <_svfiprintf_r+0x130>
 80087be:	7863      	ldrb	r3, [r4, #1]
 80087c0:	2b2a      	cmp	r3, #42	; 0x2a
 80087c2:	d134      	bne.n	800882e <_svfiprintf_r+0x186>
 80087c4:	9b03      	ldr	r3, [sp, #12]
 80087c6:	1d1a      	adds	r2, r3, #4
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	9203      	str	r2, [sp, #12]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	bfb8      	it	lt
 80087d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80087d4:	3402      	adds	r4, #2
 80087d6:	9305      	str	r3, [sp, #20]
 80087d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80088a0 <_svfiprintf_r+0x1f8>
 80087dc:	7821      	ldrb	r1, [r4, #0]
 80087de:	2203      	movs	r2, #3
 80087e0:	4650      	mov	r0, sl
 80087e2:	f7f7 fcfd 	bl	80001e0 <memchr>
 80087e6:	b138      	cbz	r0, 80087f8 <_svfiprintf_r+0x150>
 80087e8:	9b04      	ldr	r3, [sp, #16]
 80087ea:	eba0 000a 	sub.w	r0, r0, sl
 80087ee:	2240      	movs	r2, #64	; 0x40
 80087f0:	4082      	lsls	r2, r0
 80087f2:	4313      	orrs	r3, r2
 80087f4:	3401      	adds	r4, #1
 80087f6:	9304      	str	r3, [sp, #16]
 80087f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087fc:	4825      	ldr	r0, [pc, #148]	; (8008894 <_svfiprintf_r+0x1ec>)
 80087fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008802:	2206      	movs	r2, #6
 8008804:	f7f7 fcec 	bl	80001e0 <memchr>
 8008808:	2800      	cmp	r0, #0
 800880a:	d038      	beq.n	800887e <_svfiprintf_r+0x1d6>
 800880c:	4b22      	ldr	r3, [pc, #136]	; (8008898 <_svfiprintf_r+0x1f0>)
 800880e:	bb1b      	cbnz	r3, 8008858 <_svfiprintf_r+0x1b0>
 8008810:	9b03      	ldr	r3, [sp, #12]
 8008812:	3307      	adds	r3, #7
 8008814:	f023 0307 	bic.w	r3, r3, #7
 8008818:	3308      	adds	r3, #8
 800881a:	9303      	str	r3, [sp, #12]
 800881c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800881e:	4433      	add	r3, r6
 8008820:	9309      	str	r3, [sp, #36]	; 0x24
 8008822:	e768      	b.n	80086f6 <_svfiprintf_r+0x4e>
 8008824:	fb0c 3202 	mla	r2, ip, r2, r3
 8008828:	460c      	mov	r4, r1
 800882a:	2001      	movs	r0, #1
 800882c:	e7a6      	b.n	800877c <_svfiprintf_r+0xd4>
 800882e:	2300      	movs	r3, #0
 8008830:	3401      	adds	r4, #1
 8008832:	9305      	str	r3, [sp, #20]
 8008834:	4619      	mov	r1, r3
 8008836:	f04f 0c0a 	mov.w	ip, #10
 800883a:	4620      	mov	r0, r4
 800883c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008840:	3a30      	subs	r2, #48	; 0x30
 8008842:	2a09      	cmp	r2, #9
 8008844:	d903      	bls.n	800884e <_svfiprintf_r+0x1a6>
 8008846:	2b00      	cmp	r3, #0
 8008848:	d0c6      	beq.n	80087d8 <_svfiprintf_r+0x130>
 800884a:	9105      	str	r1, [sp, #20]
 800884c:	e7c4      	b.n	80087d8 <_svfiprintf_r+0x130>
 800884e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008852:	4604      	mov	r4, r0
 8008854:	2301      	movs	r3, #1
 8008856:	e7f0      	b.n	800883a <_svfiprintf_r+0x192>
 8008858:	ab03      	add	r3, sp, #12
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	462a      	mov	r2, r5
 800885e:	4b0f      	ldr	r3, [pc, #60]	; (800889c <_svfiprintf_r+0x1f4>)
 8008860:	a904      	add	r1, sp, #16
 8008862:	4638      	mov	r0, r7
 8008864:	f7fd fe88 	bl	8006578 <_printf_float>
 8008868:	1c42      	adds	r2, r0, #1
 800886a:	4606      	mov	r6, r0
 800886c:	d1d6      	bne.n	800881c <_svfiprintf_r+0x174>
 800886e:	89ab      	ldrh	r3, [r5, #12]
 8008870:	065b      	lsls	r3, r3, #25
 8008872:	f53f af2d 	bmi.w	80086d0 <_svfiprintf_r+0x28>
 8008876:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008878:	b01d      	add	sp, #116	; 0x74
 800887a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800887e:	ab03      	add	r3, sp, #12
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	462a      	mov	r2, r5
 8008884:	4b05      	ldr	r3, [pc, #20]	; (800889c <_svfiprintf_r+0x1f4>)
 8008886:	a904      	add	r1, sp, #16
 8008888:	4638      	mov	r0, r7
 800888a:	f7fe f919 	bl	8006ac0 <_printf_i>
 800888e:	e7eb      	b.n	8008868 <_svfiprintf_r+0x1c0>
 8008890:	0800a944 	.word	0x0800a944
 8008894:	0800a94e 	.word	0x0800a94e
 8008898:	08006579 	.word	0x08006579
 800889c:	080085f5 	.word	0x080085f5
 80088a0:	0800a94a 	.word	0x0800a94a

080088a4 <__sflush_r>:
 80088a4:	898a      	ldrh	r2, [r1, #12]
 80088a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088aa:	4605      	mov	r5, r0
 80088ac:	0710      	lsls	r0, r2, #28
 80088ae:	460c      	mov	r4, r1
 80088b0:	d458      	bmi.n	8008964 <__sflush_r+0xc0>
 80088b2:	684b      	ldr	r3, [r1, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	dc05      	bgt.n	80088c4 <__sflush_r+0x20>
 80088b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	dc02      	bgt.n	80088c4 <__sflush_r+0x20>
 80088be:	2000      	movs	r0, #0
 80088c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088c6:	2e00      	cmp	r6, #0
 80088c8:	d0f9      	beq.n	80088be <__sflush_r+0x1a>
 80088ca:	2300      	movs	r3, #0
 80088cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088d0:	682f      	ldr	r7, [r5, #0]
 80088d2:	6a21      	ldr	r1, [r4, #32]
 80088d4:	602b      	str	r3, [r5, #0]
 80088d6:	d032      	beq.n	800893e <__sflush_r+0x9a>
 80088d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088da:	89a3      	ldrh	r3, [r4, #12]
 80088dc:	075a      	lsls	r2, r3, #29
 80088de:	d505      	bpl.n	80088ec <__sflush_r+0x48>
 80088e0:	6863      	ldr	r3, [r4, #4]
 80088e2:	1ac0      	subs	r0, r0, r3
 80088e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088e6:	b10b      	cbz	r3, 80088ec <__sflush_r+0x48>
 80088e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088ea:	1ac0      	subs	r0, r0, r3
 80088ec:	2300      	movs	r3, #0
 80088ee:	4602      	mov	r2, r0
 80088f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088f2:	6a21      	ldr	r1, [r4, #32]
 80088f4:	4628      	mov	r0, r5
 80088f6:	47b0      	blx	r6
 80088f8:	1c43      	adds	r3, r0, #1
 80088fa:	89a3      	ldrh	r3, [r4, #12]
 80088fc:	d106      	bne.n	800890c <__sflush_r+0x68>
 80088fe:	6829      	ldr	r1, [r5, #0]
 8008900:	291d      	cmp	r1, #29
 8008902:	d82b      	bhi.n	800895c <__sflush_r+0xb8>
 8008904:	4a29      	ldr	r2, [pc, #164]	; (80089ac <__sflush_r+0x108>)
 8008906:	410a      	asrs	r2, r1
 8008908:	07d6      	lsls	r6, r2, #31
 800890a:	d427      	bmi.n	800895c <__sflush_r+0xb8>
 800890c:	2200      	movs	r2, #0
 800890e:	6062      	str	r2, [r4, #4]
 8008910:	04d9      	lsls	r1, r3, #19
 8008912:	6922      	ldr	r2, [r4, #16]
 8008914:	6022      	str	r2, [r4, #0]
 8008916:	d504      	bpl.n	8008922 <__sflush_r+0x7e>
 8008918:	1c42      	adds	r2, r0, #1
 800891a:	d101      	bne.n	8008920 <__sflush_r+0x7c>
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	b903      	cbnz	r3, 8008922 <__sflush_r+0x7e>
 8008920:	6560      	str	r0, [r4, #84]	; 0x54
 8008922:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008924:	602f      	str	r7, [r5, #0]
 8008926:	2900      	cmp	r1, #0
 8008928:	d0c9      	beq.n	80088be <__sflush_r+0x1a>
 800892a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800892e:	4299      	cmp	r1, r3
 8008930:	d002      	beq.n	8008938 <__sflush_r+0x94>
 8008932:	4628      	mov	r0, r5
 8008934:	f7ff fa96 	bl	8007e64 <_free_r>
 8008938:	2000      	movs	r0, #0
 800893a:	6360      	str	r0, [r4, #52]	; 0x34
 800893c:	e7c0      	b.n	80088c0 <__sflush_r+0x1c>
 800893e:	2301      	movs	r3, #1
 8008940:	4628      	mov	r0, r5
 8008942:	47b0      	blx	r6
 8008944:	1c41      	adds	r1, r0, #1
 8008946:	d1c8      	bne.n	80088da <__sflush_r+0x36>
 8008948:	682b      	ldr	r3, [r5, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d0c5      	beq.n	80088da <__sflush_r+0x36>
 800894e:	2b1d      	cmp	r3, #29
 8008950:	d001      	beq.n	8008956 <__sflush_r+0xb2>
 8008952:	2b16      	cmp	r3, #22
 8008954:	d101      	bne.n	800895a <__sflush_r+0xb6>
 8008956:	602f      	str	r7, [r5, #0]
 8008958:	e7b1      	b.n	80088be <__sflush_r+0x1a>
 800895a:	89a3      	ldrh	r3, [r4, #12]
 800895c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008960:	81a3      	strh	r3, [r4, #12]
 8008962:	e7ad      	b.n	80088c0 <__sflush_r+0x1c>
 8008964:	690f      	ldr	r7, [r1, #16]
 8008966:	2f00      	cmp	r7, #0
 8008968:	d0a9      	beq.n	80088be <__sflush_r+0x1a>
 800896a:	0793      	lsls	r3, r2, #30
 800896c:	680e      	ldr	r6, [r1, #0]
 800896e:	bf08      	it	eq
 8008970:	694b      	ldreq	r3, [r1, #20]
 8008972:	600f      	str	r7, [r1, #0]
 8008974:	bf18      	it	ne
 8008976:	2300      	movne	r3, #0
 8008978:	eba6 0807 	sub.w	r8, r6, r7
 800897c:	608b      	str	r3, [r1, #8]
 800897e:	f1b8 0f00 	cmp.w	r8, #0
 8008982:	dd9c      	ble.n	80088be <__sflush_r+0x1a>
 8008984:	6a21      	ldr	r1, [r4, #32]
 8008986:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008988:	4643      	mov	r3, r8
 800898a:	463a      	mov	r2, r7
 800898c:	4628      	mov	r0, r5
 800898e:	47b0      	blx	r6
 8008990:	2800      	cmp	r0, #0
 8008992:	dc06      	bgt.n	80089a2 <__sflush_r+0xfe>
 8008994:	89a3      	ldrh	r3, [r4, #12]
 8008996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800899a:	81a3      	strh	r3, [r4, #12]
 800899c:	f04f 30ff 	mov.w	r0, #4294967295
 80089a0:	e78e      	b.n	80088c0 <__sflush_r+0x1c>
 80089a2:	4407      	add	r7, r0
 80089a4:	eba8 0800 	sub.w	r8, r8, r0
 80089a8:	e7e9      	b.n	800897e <__sflush_r+0xda>
 80089aa:	bf00      	nop
 80089ac:	dfbffffe 	.word	0xdfbffffe

080089b0 <_fflush_r>:
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	690b      	ldr	r3, [r1, #16]
 80089b4:	4605      	mov	r5, r0
 80089b6:	460c      	mov	r4, r1
 80089b8:	b913      	cbnz	r3, 80089c0 <_fflush_r+0x10>
 80089ba:	2500      	movs	r5, #0
 80089bc:	4628      	mov	r0, r5
 80089be:	bd38      	pop	{r3, r4, r5, pc}
 80089c0:	b118      	cbz	r0, 80089ca <_fflush_r+0x1a>
 80089c2:	6a03      	ldr	r3, [r0, #32]
 80089c4:	b90b      	cbnz	r3, 80089ca <_fflush_r+0x1a>
 80089c6:	f7fe fa17 	bl	8006df8 <__sinit>
 80089ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d0f3      	beq.n	80089ba <_fflush_r+0xa>
 80089d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089d4:	07d0      	lsls	r0, r2, #31
 80089d6:	d404      	bmi.n	80089e2 <_fflush_r+0x32>
 80089d8:	0599      	lsls	r1, r3, #22
 80089da:	d402      	bmi.n	80089e2 <_fflush_r+0x32>
 80089dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089de:	f7fe fb9f 	bl	8007120 <__retarget_lock_acquire_recursive>
 80089e2:	4628      	mov	r0, r5
 80089e4:	4621      	mov	r1, r4
 80089e6:	f7ff ff5d 	bl	80088a4 <__sflush_r>
 80089ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089ec:	07da      	lsls	r2, r3, #31
 80089ee:	4605      	mov	r5, r0
 80089f0:	d4e4      	bmi.n	80089bc <_fflush_r+0xc>
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	059b      	lsls	r3, r3, #22
 80089f6:	d4e1      	bmi.n	80089bc <_fflush_r+0xc>
 80089f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089fa:	f7fe fb92 	bl	8007122 <__retarget_lock_release_recursive>
 80089fe:	e7dd      	b.n	80089bc <_fflush_r+0xc>

08008a00 <fiprintf>:
 8008a00:	b40e      	push	{r1, r2, r3}
 8008a02:	b503      	push	{r0, r1, lr}
 8008a04:	4601      	mov	r1, r0
 8008a06:	ab03      	add	r3, sp, #12
 8008a08:	4805      	ldr	r0, [pc, #20]	; (8008a20 <fiprintf+0x20>)
 8008a0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a0e:	6800      	ldr	r0, [r0, #0]
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	f000 f8c3 	bl	8008b9c <_vfiprintf_r>
 8008a16:	b002      	add	sp, #8
 8008a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a1c:	b003      	add	sp, #12
 8008a1e:	4770      	bx	lr
 8008a20:	20000078 	.word	0x20000078

08008a24 <memmove>:
 8008a24:	4288      	cmp	r0, r1
 8008a26:	b510      	push	{r4, lr}
 8008a28:	eb01 0402 	add.w	r4, r1, r2
 8008a2c:	d902      	bls.n	8008a34 <memmove+0x10>
 8008a2e:	4284      	cmp	r4, r0
 8008a30:	4623      	mov	r3, r4
 8008a32:	d807      	bhi.n	8008a44 <memmove+0x20>
 8008a34:	1e43      	subs	r3, r0, #1
 8008a36:	42a1      	cmp	r1, r4
 8008a38:	d008      	beq.n	8008a4c <memmove+0x28>
 8008a3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a42:	e7f8      	b.n	8008a36 <memmove+0x12>
 8008a44:	4402      	add	r2, r0
 8008a46:	4601      	mov	r1, r0
 8008a48:	428a      	cmp	r2, r1
 8008a4a:	d100      	bne.n	8008a4e <memmove+0x2a>
 8008a4c:	bd10      	pop	{r4, pc}
 8008a4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a56:	e7f7      	b.n	8008a48 <memmove+0x24>

08008a58 <memcpy>:
 8008a58:	440a      	add	r2, r1
 8008a5a:	4291      	cmp	r1, r2
 8008a5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a60:	d100      	bne.n	8008a64 <memcpy+0xc>
 8008a62:	4770      	bx	lr
 8008a64:	b510      	push	{r4, lr}
 8008a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a6e:	4291      	cmp	r1, r2
 8008a70:	d1f9      	bne.n	8008a66 <memcpy+0xe>
 8008a72:	bd10      	pop	{r4, pc}

08008a74 <abort>:
 8008a74:	b508      	push	{r3, lr}
 8008a76:	2006      	movs	r0, #6
 8008a78:	f000 fa68 	bl	8008f4c <raise>
 8008a7c:	2001      	movs	r0, #1
 8008a7e:	f7fa f8a1 	bl	8002bc4 <_exit>

08008a82 <_calloc_r>:
 8008a82:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a84:	fba1 2402 	umull	r2, r4, r1, r2
 8008a88:	b94c      	cbnz	r4, 8008a9e <_calloc_r+0x1c>
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	9201      	str	r2, [sp, #4]
 8008a8e:	f7fd fbbb 	bl	8006208 <_malloc_r>
 8008a92:	9a01      	ldr	r2, [sp, #4]
 8008a94:	4605      	mov	r5, r0
 8008a96:	b930      	cbnz	r0, 8008aa6 <_calloc_r+0x24>
 8008a98:	4628      	mov	r0, r5
 8008a9a:	b003      	add	sp, #12
 8008a9c:	bd30      	pop	{r4, r5, pc}
 8008a9e:	220c      	movs	r2, #12
 8008aa0:	6002      	str	r2, [r0, #0]
 8008aa2:	2500      	movs	r5, #0
 8008aa4:	e7f8      	b.n	8008a98 <_calloc_r+0x16>
 8008aa6:	4621      	mov	r1, r4
 8008aa8:	f7fe fa3f 	bl	8006f2a <memset>
 8008aac:	e7f4      	b.n	8008a98 <_calloc_r+0x16>

08008aae <__ascii_mbtowc>:
 8008aae:	b082      	sub	sp, #8
 8008ab0:	b901      	cbnz	r1, 8008ab4 <__ascii_mbtowc+0x6>
 8008ab2:	a901      	add	r1, sp, #4
 8008ab4:	b142      	cbz	r2, 8008ac8 <__ascii_mbtowc+0x1a>
 8008ab6:	b14b      	cbz	r3, 8008acc <__ascii_mbtowc+0x1e>
 8008ab8:	7813      	ldrb	r3, [r2, #0]
 8008aba:	600b      	str	r3, [r1, #0]
 8008abc:	7812      	ldrb	r2, [r2, #0]
 8008abe:	1e10      	subs	r0, r2, #0
 8008ac0:	bf18      	it	ne
 8008ac2:	2001      	movne	r0, #1
 8008ac4:	b002      	add	sp, #8
 8008ac6:	4770      	bx	lr
 8008ac8:	4610      	mov	r0, r2
 8008aca:	e7fb      	b.n	8008ac4 <__ascii_mbtowc+0x16>
 8008acc:	f06f 0001 	mvn.w	r0, #1
 8008ad0:	e7f8      	b.n	8008ac4 <__ascii_mbtowc+0x16>

08008ad2 <_realloc_r>:
 8008ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad6:	4680      	mov	r8, r0
 8008ad8:	4614      	mov	r4, r2
 8008ada:	460e      	mov	r6, r1
 8008adc:	b921      	cbnz	r1, 8008ae8 <_realloc_r+0x16>
 8008ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	f7fd bb90 	b.w	8006208 <_malloc_r>
 8008ae8:	b92a      	cbnz	r2, 8008af6 <_realloc_r+0x24>
 8008aea:	f7ff f9bb 	bl	8007e64 <_free_r>
 8008aee:	4625      	mov	r5, r4
 8008af0:	4628      	mov	r0, r5
 8008af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008af6:	f000 fa45 	bl	8008f84 <_malloc_usable_size_r>
 8008afa:	4284      	cmp	r4, r0
 8008afc:	4607      	mov	r7, r0
 8008afe:	d802      	bhi.n	8008b06 <_realloc_r+0x34>
 8008b00:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b04:	d812      	bhi.n	8008b2c <_realloc_r+0x5a>
 8008b06:	4621      	mov	r1, r4
 8008b08:	4640      	mov	r0, r8
 8008b0a:	f7fd fb7d 	bl	8006208 <_malloc_r>
 8008b0e:	4605      	mov	r5, r0
 8008b10:	2800      	cmp	r0, #0
 8008b12:	d0ed      	beq.n	8008af0 <_realloc_r+0x1e>
 8008b14:	42bc      	cmp	r4, r7
 8008b16:	4622      	mov	r2, r4
 8008b18:	4631      	mov	r1, r6
 8008b1a:	bf28      	it	cs
 8008b1c:	463a      	movcs	r2, r7
 8008b1e:	f7ff ff9b 	bl	8008a58 <memcpy>
 8008b22:	4631      	mov	r1, r6
 8008b24:	4640      	mov	r0, r8
 8008b26:	f7ff f99d 	bl	8007e64 <_free_r>
 8008b2a:	e7e1      	b.n	8008af0 <_realloc_r+0x1e>
 8008b2c:	4635      	mov	r5, r6
 8008b2e:	e7df      	b.n	8008af0 <_realloc_r+0x1e>

08008b30 <__ascii_wctomb>:
 8008b30:	b149      	cbz	r1, 8008b46 <__ascii_wctomb+0x16>
 8008b32:	2aff      	cmp	r2, #255	; 0xff
 8008b34:	bf85      	ittet	hi
 8008b36:	238a      	movhi	r3, #138	; 0x8a
 8008b38:	6003      	strhi	r3, [r0, #0]
 8008b3a:	700a      	strbls	r2, [r1, #0]
 8008b3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008b40:	bf98      	it	ls
 8008b42:	2001      	movls	r0, #1
 8008b44:	4770      	bx	lr
 8008b46:	4608      	mov	r0, r1
 8008b48:	4770      	bx	lr

08008b4a <__sfputc_r>:
 8008b4a:	6893      	ldr	r3, [r2, #8]
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	b410      	push	{r4}
 8008b52:	6093      	str	r3, [r2, #8]
 8008b54:	da08      	bge.n	8008b68 <__sfputc_r+0x1e>
 8008b56:	6994      	ldr	r4, [r2, #24]
 8008b58:	42a3      	cmp	r3, r4
 8008b5a:	db01      	blt.n	8008b60 <__sfputc_r+0x16>
 8008b5c:	290a      	cmp	r1, #10
 8008b5e:	d103      	bne.n	8008b68 <__sfputc_r+0x1e>
 8008b60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b64:	f000 b934 	b.w	8008dd0 <__swbuf_r>
 8008b68:	6813      	ldr	r3, [r2, #0]
 8008b6a:	1c58      	adds	r0, r3, #1
 8008b6c:	6010      	str	r0, [r2, #0]
 8008b6e:	7019      	strb	r1, [r3, #0]
 8008b70:	4608      	mov	r0, r1
 8008b72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <__sfputs_r>:
 8008b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7a:	4606      	mov	r6, r0
 8008b7c:	460f      	mov	r7, r1
 8008b7e:	4614      	mov	r4, r2
 8008b80:	18d5      	adds	r5, r2, r3
 8008b82:	42ac      	cmp	r4, r5
 8008b84:	d101      	bne.n	8008b8a <__sfputs_r+0x12>
 8008b86:	2000      	movs	r0, #0
 8008b88:	e007      	b.n	8008b9a <__sfputs_r+0x22>
 8008b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b8e:	463a      	mov	r2, r7
 8008b90:	4630      	mov	r0, r6
 8008b92:	f7ff ffda 	bl	8008b4a <__sfputc_r>
 8008b96:	1c43      	adds	r3, r0, #1
 8008b98:	d1f3      	bne.n	8008b82 <__sfputs_r+0xa>
 8008b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b9c <_vfiprintf_r>:
 8008b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba0:	460d      	mov	r5, r1
 8008ba2:	b09d      	sub	sp, #116	; 0x74
 8008ba4:	4614      	mov	r4, r2
 8008ba6:	4698      	mov	r8, r3
 8008ba8:	4606      	mov	r6, r0
 8008baa:	b118      	cbz	r0, 8008bb4 <_vfiprintf_r+0x18>
 8008bac:	6a03      	ldr	r3, [r0, #32]
 8008bae:	b90b      	cbnz	r3, 8008bb4 <_vfiprintf_r+0x18>
 8008bb0:	f7fe f922 	bl	8006df8 <__sinit>
 8008bb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bb6:	07d9      	lsls	r1, r3, #31
 8008bb8:	d405      	bmi.n	8008bc6 <_vfiprintf_r+0x2a>
 8008bba:	89ab      	ldrh	r3, [r5, #12]
 8008bbc:	059a      	lsls	r2, r3, #22
 8008bbe:	d402      	bmi.n	8008bc6 <_vfiprintf_r+0x2a>
 8008bc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bc2:	f7fe faad 	bl	8007120 <__retarget_lock_acquire_recursive>
 8008bc6:	89ab      	ldrh	r3, [r5, #12]
 8008bc8:	071b      	lsls	r3, r3, #28
 8008bca:	d501      	bpl.n	8008bd0 <_vfiprintf_r+0x34>
 8008bcc:	692b      	ldr	r3, [r5, #16]
 8008bce:	b99b      	cbnz	r3, 8008bf8 <_vfiprintf_r+0x5c>
 8008bd0:	4629      	mov	r1, r5
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	f000 f93a 	bl	8008e4c <__swsetup_r>
 8008bd8:	b170      	cbz	r0, 8008bf8 <_vfiprintf_r+0x5c>
 8008bda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bdc:	07dc      	lsls	r4, r3, #31
 8008bde:	d504      	bpl.n	8008bea <_vfiprintf_r+0x4e>
 8008be0:	f04f 30ff 	mov.w	r0, #4294967295
 8008be4:	b01d      	add	sp, #116	; 0x74
 8008be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bea:	89ab      	ldrh	r3, [r5, #12]
 8008bec:	0598      	lsls	r0, r3, #22
 8008bee:	d4f7      	bmi.n	8008be0 <_vfiprintf_r+0x44>
 8008bf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bf2:	f7fe fa96 	bl	8007122 <__retarget_lock_release_recursive>
 8008bf6:	e7f3      	b.n	8008be0 <_vfiprintf_r+0x44>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8008bfc:	2320      	movs	r3, #32
 8008bfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c02:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c06:	2330      	movs	r3, #48	; 0x30
 8008c08:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008dbc <_vfiprintf_r+0x220>
 8008c0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c10:	f04f 0901 	mov.w	r9, #1
 8008c14:	4623      	mov	r3, r4
 8008c16:	469a      	mov	sl, r3
 8008c18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c1c:	b10a      	cbz	r2, 8008c22 <_vfiprintf_r+0x86>
 8008c1e:	2a25      	cmp	r2, #37	; 0x25
 8008c20:	d1f9      	bne.n	8008c16 <_vfiprintf_r+0x7a>
 8008c22:	ebba 0b04 	subs.w	fp, sl, r4
 8008c26:	d00b      	beq.n	8008c40 <_vfiprintf_r+0xa4>
 8008c28:	465b      	mov	r3, fp
 8008c2a:	4622      	mov	r2, r4
 8008c2c:	4629      	mov	r1, r5
 8008c2e:	4630      	mov	r0, r6
 8008c30:	f7ff ffa2 	bl	8008b78 <__sfputs_r>
 8008c34:	3001      	adds	r0, #1
 8008c36:	f000 80a9 	beq.w	8008d8c <_vfiprintf_r+0x1f0>
 8008c3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c3c:	445a      	add	r2, fp
 8008c3e:	9209      	str	r2, [sp, #36]	; 0x24
 8008c40:	f89a 3000 	ldrb.w	r3, [sl]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f000 80a1 	beq.w	8008d8c <_vfiprintf_r+0x1f0>
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c54:	f10a 0a01 	add.w	sl, sl, #1
 8008c58:	9304      	str	r3, [sp, #16]
 8008c5a:	9307      	str	r3, [sp, #28]
 8008c5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c60:	931a      	str	r3, [sp, #104]	; 0x68
 8008c62:	4654      	mov	r4, sl
 8008c64:	2205      	movs	r2, #5
 8008c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c6a:	4854      	ldr	r0, [pc, #336]	; (8008dbc <_vfiprintf_r+0x220>)
 8008c6c:	f7f7 fab8 	bl	80001e0 <memchr>
 8008c70:	9a04      	ldr	r2, [sp, #16]
 8008c72:	b9d8      	cbnz	r0, 8008cac <_vfiprintf_r+0x110>
 8008c74:	06d1      	lsls	r1, r2, #27
 8008c76:	bf44      	itt	mi
 8008c78:	2320      	movmi	r3, #32
 8008c7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c7e:	0713      	lsls	r3, r2, #28
 8008c80:	bf44      	itt	mi
 8008c82:	232b      	movmi	r3, #43	; 0x2b
 8008c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c88:	f89a 3000 	ldrb.w	r3, [sl]
 8008c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c8e:	d015      	beq.n	8008cbc <_vfiprintf_r+0x120>
 8008c90:	9a07      	ldr	r2, [sp, #28]
 8008c92:	4654      	mov	r4, sl
 8008c94:	2000      	movs	r0, #0
 8008c96:	f04f 0c0a 	mov.w	ip, #10
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ca0:	3b30      	subs	r3, #48	; 0x30
 8008ca2:	2b09      	cmp	r3, #9
 8008ca4:	d94d      	bls.n	8008d42 <_vfiprintf_r+0x1a6>
 8008ca6:	b1b0      	cbz	r0, 8008cd6 <_vfiprintf_r+0x13a>
 8008ca8:	9207      	str	r2, [sp, #28]
 8008caa:	e014      	b.n	8008cd6 <_vfiprintf_r+0x13a>
 8008cac:	eba0 0308 	sub.w	r3, r0, r8
 8008cb0:	fa09 f303 	lsl.w	r3, r9, r3
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	9304      	str	r3, [sp, #16]
 8008cb8:	46a2      	mov	sl, r4
 8008cba:	e7d2      	b.n	8008c62 <_vfiprintf_r+0xc6>
 8008cbc:	9b03      	ldr	r3, [sp, #12]
 8008cbe:	1d19      	adds	r1, r3, #4
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	9103      	str	r1, [sp, #12]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	bfbb      	ittet	lt
 8008cc8:	425b      	neglt	r3, r3
 8008cca:	f042 0202 	orrlt.w	r2, r2, #2
 8008cce:	9307      	strge	r3, [sp, #28]
 8008cd0:	9307      	strlt	r3, [sp, #28]
 8008cd2:	bfb8      	it	lt
 8008cd4:	9204      	strlt	r2, [sp, #16]
 8008cd6:	7823      	ldrb	r3, [r4, #0]
 8008cd8:	2b2e      	cmp	r3, #46	; 0x2e
 8008cda:	d10c      	bne.n	8008cf6 <_vfiprintf_r+0x15a>
 8008cdc:	7863      	ldrb	r3, [r4, #1]
 8008cde:	2b2a      	cmp	r3, #42	; 0x2a
 8008ce0:	d134      	bne.n	8008d4c <_vfiprintf_r+0x1b0>
 8008ce2:	9b03      	ldr	r3, [sp, #12]
 8008ce4:	1d1a      	adds	r2, r3, #4
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	9203      	str	r2, [sp, #12]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	bfb8      	it	lt
 8008cee:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cf2:	3402      	adds	r4, #2
 8008cf4:	9305      	str	r3, [sp, #20]
 8008cf6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008dcc <_vfiprintf_r+0x230>
 8008cfa:	7821      	ldrb	r1, [r4, #0]
 8008cfc:	2203      	movs	r2, #3
 8008cfe:	4650      	mov	r0, sl
 8008d00:	f7f7 fa6e 	bl	80001e0 <memchr>
 8008d04:	b138      	cbz	r0, 8008d16 <_vfiprintf_r+0x17a>
 8008d06:	9b04      	ldr	r3, [sp, #16]
 8008d08:	eba0 000a 	sub.w	r0, r0, sl
 8008d0c:	2240      	movs	r2, #64	; 0x40
 8008d0e:	4082      	lsls	r2, r0
 8008d10:	4313      	orrs	r3, r2
 8008d12:	3401      	adds	r4, #1
 8008d14:	9304      	str	r3, [sp, #16]
 8008d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d1a:	4829      	ldr	r0, [pc, #164]	; (8008dc0 <_vfiprintf_r+0x224>)
 8008d1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d20:	2206      	movs	r2, #6
 8008d22:	f7f7 fa5d 	bl	80001e0 <memchr>
 8008d26:	2800      	cmp	r0, #0
 8008d28:	d03f      	beq.n	8008daa <_vfiprintf_r+0x20e>
 8008d2a:	4b26      	ldr	r3, [pc, #152]	; (8008dc4 <_vfiprintf_r+0x228>)
 8008d2c:	bb1b      	cbnz	r3, 8008d76 <_vfiprintf_r+0x1da>
 8008d2e:	9b03      	ldr	r3, [sp, #12]
 8008d30:	3307      	adds	r3, #7
 8008d32:	f023 0307 	bic.w	r3, r3, #7
 8008d36:	3308      	adds	r3, #8
 8008d38:	9303      	str	r3, [sp, #12]
 8008d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d3c:	443b      	add	r3, r7
 8008d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d40:	e768      	b.n	8008c14 <_vfiprintf_r+0x78>
 8008d42:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d46:	460c      	mov	r4, r1
 8008d48:	2001      	movs	r0, #1
 8008d4a:	e7a6      	b.n	8008c9a <_vfiprintf_r+0xfe>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	3401      	adds	r4, #1
 8008d50:	9305      	str	r3, [sp, #20]
 8008d52:	4619      	mov	r1, r3
 8008d54:	f04f 0c0a 	mov.w	ip, #10
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d5e:	3a30      	subs	r2, #48	; 0x30
 8008d60:	2a09      	cmp	r2, #9
 8008d62:	d903      	bls.n	8008d6c <_vfiprintf_r+0x1d0>
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d0c6      	beq.n	8008cf6 <_vfiprintf_r+0x15a>
 8008d68:	9105      	str	r1, [sp, #20]
 8008d6a:	e7c4      	b.n	8008cf6 <_vfiprintf_r+0x15a>
 8008d6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d70:	4604      	mov	r4, r0
 8008d72:	2301      	movs	r3, #1
 8008d74:	e7f0      	b.n	8008d58 <_vfiprintf_r+0x1bc>
 8008d76:	ab03      	add	r3, sp, #12
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	462a      	mov	r2, r5
 8008d7c:	4b12      	ldr	r3, [pc, #72]	; (8008dc8 <_vfiprintf_r+0x22c>)
 8008d7e:	a904      	add	r1, sp, #16
 8008d80:	4630      	mov	r0, r6
 8008d82:	f7fd fbf9 	bl	8006578 <_printf_float>
 8008d86:	4607      	mov	r7, r0
 8008d88:	1c78      	adds	r0, r7, #1
 8008d8a:	d1d6      	bne.n	8008d3a <_vfiprintf_r+0x19e>
 8008d8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d8e:	07d9      	lsls	r1, r3, #31
 8008d90:	d405      	bmi.n	8008d9e <_vfiprintf_r+0x202>
 8008d92:	89ab      	ldrh	r3, [r5, #12]
 8008d94:	059a      	lsls	r2, r3, #22
 8008d96:	d402      	bmi.n	8008d9e <_vfiprintf_r+0x202>
 8008d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d9a:	f7fe f9c2 	bl	8007122 <__retarget_lock_release_recursive>
 8008d9e:	89ab      	ldrh	r3, [r5, #12]
 8008da0:	065b      	lsls	r3, r3, #25
 8008da2:	f53f af1d 	bmi.w	8008be0 <_vfiprintf_r+0x44>
 8008da6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008da8:	e71c      	b.n	8008be4 <_vfiprintf_r+0x48>
 8008daa:	ab03      	add	r3, sp, #12
 8008dac:	9300      	str	r3, [sp, #0]
 8008dae:	462a      	mov	r2, r5
 8008db0:	4b05      	ldr	r3, [pc, #20]	; (8008dc8 <_vfiprintf_r+0x22c>)
 8008db2:	a904      	add	r1, sp, #16
 8008db4:	4630      	mov	r0, r6
 8008db6:	f7fd fe83 	bl	8006ac0 <_printf_i>
 8008dba:	e7e4      	b.n	8008d86 <_vfiprintf_r+0x1ea>
 8008dbc:	0800a944 	.word	0x0800a944
 8008dc0:	0800a94e 	.word	0x0800a94e
 8008dc4:	08006579 	.word	0x08006579
 8008dc8:	08008b79 	.word	0x08008b79
 8008dcc:	0800a94a 	.word	0x0800a94a

08008dd0 <__swbuf_r>:
 8008dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd2:	460e      	mov	r6, r1
 8008dd4:	4614      	mov	r4, r2
 8008dd6:	4605      	mov	r5, r0
 8008dd8:	b118      	cbz	r0, 8008de2 <__swbuf_r+0x12>
 8008dda:	6a03      	ldr	r3, [r0, #32]
 8008ddc:	b90b      	cbnz	r3, 8008de2 <__swbuf_r+0x12>
 8008dde:	f7fe f80b 	bl	8006df8 <__sinit>
 8008de2:	69a3      	ldr	r3, [r4, #24]
 8008de4:	60a3      	str	r3, [r4, #8]
 8008de6:	89a3      	ldrh	r3, [r4, #12]
 8008de8:	071a      	lsls	r2, r3, #28
 8008dea:	d525      	bpl.n	8008e38 <__swbuf_r+0x68>
 8008dec:	6923      	ldr	r3, [r4, #16]
 8008dee:	b31b      	cbz	r3, 8008e38 <__swbuf_r+0x68>
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	6922      	ldr	r2, [r4, #16]
 8008df4:	1a98      	subs	r0, r3, r2
 8008df6:	6963      	ldr	r3, [r4, #20]
 8008df8:	b2f6      	uxtb	r6, r6
 8008dfa:	4283      	cmp	r3, r0
 8008dfc:	4637      	mov	r7, r6
 8008dfe:	dc04      	bgt.n	8008e0a <__swbuf_r+0x3a>
 8008e00:	4621      	mov	r1, r4
 8008e02:	4628      	mov	r0, r5
 8008e04:	f7ff fdd4 	bl	80089b0 <_fflush_r>
 8008e08:	b9e0      	cbnz	r0, 8008e44 <__swbuf_r+0x74>
 8008e0a:	68a3      	ldr	r3, [r4, #8]
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	60a3      	str	r3, [r4, #8]
 8008e10:	6823      	ldr	r3, [r4, #0]
 8008e12:	1c5a      	adds	r2, r3, #1
 8008e14:	6022      	str	r2, [r4, #0]
 8008e16:	701e      	strb	r6, [r3, #0]
 8008e18:	6962      	ldr	r2, [r4, #20]
 8008e1a:	1c43      	adds	r3, r0, #1
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d004      	beq.n	8008e2a <__swbuf_r+0x5a>
 8008e20:	89a3      	ldrh	r3, [r4, #12]
 8008e22:	07db      	lsls	r3, r3, #31
 8008e24:	d506      	bpl.n	8008e34 <__swbuf_r+0x64>
 8008e26:	2e0a      	cmp	r6, #10
 8008e28:	d104      	bne.n	8008e34 <__swbuf_r+0x64>
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	f7ff fdbf 	bl	80089b0 <_fflush_r>
 8008e32:	b938      	cbnz	r0, 8008e44 <__swbuf_r+0x74>
 8008e34:	4638      	mov	r0, r7
 8008e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e38:	4621      	mov	r1, r4
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	f000 f806 	bl	8008e4c <__swsetup_r>
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d0d5      	beq.n	8008df0 <__swbuf_r+0x20>
 8008e44:	f04f 37ff 	mov.w	r7, #4294967295
 8008e48:	e7f4      	b.n	8008e34 <__swbuf_r+0x64>
	...

08008e4c <__swsetup_r>:
 8008e4c:	b538      	push	{r3, r4, r5, lr}
 8008e4e:	4b2a      	ldr	r3, [pc, #168]	; (8008ef8 <__swsetup_r+0xac>)
 8008e50:	4605      	mov	r5, r0
 8008e52:	6818      	ldr	r0, [r3, #0]
 8008e54:	460c      	mov	r4, r1
 8008e56:	b118      	cbz	r0, 8008e60 <__swsetup_r+0x14>
 8008e58:	6a03      	ldr	r3, [r0, #32]
 8008e5a:	b90b      	cbnz	r3, 8008e60 <__swsetup_r+0x14>
 8008e5c:	f7fd ffcc 	bl	8006df8 <__sinit>
 8008e60:	89a3      	ldrh	r3, [r4, #12]
 8008e62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e66:	0718      	lsls	r0, r3, #28
 8008e68:	d422      	bmi.n	8008eb0 <__swsetup_r+0x64>
 8008e6a:	06d9      	lsls	r1, r3, #27
 8008e6c:	d407      	bmi.n	8008e7e <__swsetup_r+0x32>
 8008e6e:	2309      	movs	r3, #9
 8008e70:	602b      	str	r3, [r5, #0]
 8008e72:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e76:	81a3      	strh	r3, [r4, #12]
 8008e78:	f04f 30ff 	mov.w	r0, #4294967295
 8008e7c:	e034      	b.n	8008ee8 <__swsetup_r+0x9c>
 8008e7e:	0758      	lsls	r0, r3, #29
 8008e80:	d512      	bpl.n	8008ea8 <__swsetup_r+0x5c>
 8008e82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e84:	b141      	cbz	r1, 8008e98 <__swsetup_r+0x4c>
 8008e86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e8a:	4299      	cmp	r1, r3
 8008e8c:	d002      	beq.n	8008e94 <__swsetup_r+0x48>
 8008e8e:	4628      	mov	r0, r5
 8008e90:	f7fe ffe8 	bl	8007e64 <_free_r>
 8008e94:	2300      	movs	r3, #0
 8008e96:	6363      	str	r3, [r4, #52]	; 0x34
 8008e98:	89a3      	ldrh	r3, [r4, #12]
 8008e9a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e9e:	81a3      	strh	r3, [r4, #12]
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	6063      	str	r3, [r4, #4]
 8008ea4:	6923      	ldr	r3, [r4, #16]
 8008ea6:	6023      	str	r3, [r4, #0]
 8008ea8:	89a3      	ldrh	r3, [r4, #12]
 8008eaa:	f043 0308 	orr.w	r3, r3, #8
 8008eae:	81a3      	strh	r3, [r4, #12]
 8008eb0:	6923      	ldr	r3, [r4, #16]
 8008eb2:	b94b      	cbnz	r3, 8008ec8 <__swsetup_r+0x7c>
 8008eb4:	89a3      	ldrh	r3, [r4, #12]
 8008eb6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008eba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ebe:	d003      	beq.n	8008ec8 <__swsetup_r+0x7c>
 8008ec0:	4621      	mov	r1, r4
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	f000 f88c 	bl	8008fe0 <__smakebuf_r>
 8008ec8:	89a0      	ldrh	r0, [r4, #12]
 8008eca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ece:	f010 0301 	ands.w	r3, r0, #1
 8008ed2:	d00a      	beq.n	8008eea <__swsetup_r+0x9e>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	60a3      	str	r3, [r4, #8]
 8008ed8:	6963      	ldr	r3, [r4, #20]
 8008eda:	425b      	negs	r3, r3
 8008edc:	61a3      	str	r3, [r4, #24]
 8008ede:	6923      	ldr	r3, [r4, #16]
 8008ee0:	b943      	cbnz	r3, 8008ef4 <__swsetup_r+0xa8>
 8008ee2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ee6:	d1c4      	bne.n	8008e72 <__swsetup_r+0x26>
 8008ee8:	bd38      	pop	{r3, r4, r5, pc}
 8008eea:	0781      	lsls	r1, r0, #30
 8008eec:	bf58      	it	pl
 8008eee:	6963      	ldrpl	r3, [r4, #20]
 8008ef0:	60a3      	str	r3, [r4, #8]
 8008ef2:	e7f4      	b.n	8008ede <__swsetup_r+0x92>
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	e7f7      	b.n	8008ee8 <__swsetup_r+0x9c>
 8008ef8:	20000078 	.word	0x20000078

08008efc <_raise_r>:
 8008efc:	291f      	cmp	r1, #31
 8008efe:	b538      	push	{r3, r4, r5, lr}
 8008f00:	4604      	mov	r4, r0
 8008f02:	460d      	mov	r5, r1
 8008f04:	d904      	bls.n	8008f10 <_raise_r+0x14>
 8008f06:	2316      	movs	r3, #22
 8008f08:	6003      	str	r3, [r0, #0]
 8008f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
 8008f10:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008f12:	b112      	cbz	r2, 8008f1a <_raise_r+0x1e>
 8008f14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f18:	b94b      	cbnz	r3, 8008f2e <_raise_r+0x32>
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f000 f830 	bl	8008f80 <_getpid_r>
 8008f20:	462a      	mov	r2, r5
 8008f22:	4601      	mov	r1, r0
 8008f24:	4620      	mov	r0, r4
 8008f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f2a:	f000 b817 	b.w	8008f5c <_kill_r>
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d00a      	beq.n	8008f48 <_raise_r+0x4c>
 8008f32:	1c59      	adds	r1, r3, #1
 8008f34:	d103      	bne.n	8008f3e <_raise_r+0x42>
 8008f36:	2316      	movs	r3, #22
 8008f38:	6003      	str	r3, [r0, #0]
 8008f3a:	2001      	movs	r0, #1
 8008f3c:	e7e7      	b.n	8008f0e <_raise_r+0x12>
 8008f3e:	2400      	movs	r4, #0
 8008f40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f44:	4628      	mov	r0, r5
 8008f46:	4798      	blx	r3
 8008f48:	2000      	movs	r0, #0
 8008f4a:	e7e0      	b.n	8008f0e <_raise_r+0x12>

08008f4c <raise>:
 8008f4c:	4b02      	ldr	r3, [pc, #8]	; (8008f58 <raise+0xc>)
 8008f4e:	4601      	mov	r1, r0
 8008f50:	6818      	ldr	r0, [r3, #0]
 8008f52:	f7ff bfd3 	b.w	8008efc <_raise_r>
 8008f56:	bf00      	nop
 8008f58:	20000078 	.word	0x20000078

08008f5c <_kill_r>:
 8008f5c:	b538      	push	{r3, r4, r5, lr}
 8008f5e:	4d07      	ldr	r5, [pc, #28]	; (8008f7c <_kill_r+0x20>)
 8008f60:	2300      	movs	r3, #0
 8008f62:	4604      	mov	r4, r0
 8008f64:	4608      	mov	r0, r1
 8008f66:	4611      	mov	r1, r2
 8008f68:	602b      	str	r3, [r5, #0]
 8008f6a:	f7f9 fe1b 	bl	8002ba4 <_kill>
 8008f6e:	1c43      	adds	r3, r0, #1
 8008f70:	d102      	bne.n	8008f78 <_kill_r+0x1c>
 8008f72:	682b      	ldr	r3, [r5, #0]
 8008f74:	b103      	cbz	r3, 8008f78 <_kill_r+0x1c>
 8008f76:	6023      	str	r3, [r4, #0]
 8008f78:	bd38      	pop	{r3, r4, r5, pc}
 8008f7a:	bf00      	nop
 8008f7c:	200004cc 	.word	0x200004cc

08008f80 <_getpid_r>:
 8008f80:	f7f9 be08 	b.w	8002b94 <_getpid>

08008f84 <_malloc_usable_size_r>:
 8008f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f88:	1f18      	subs	r0, r3, #4
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	bfbc      	itt	lt
 8008f8e:	580b      	ldrlt	r3, [r1, r0]
 8008f90:	18c0      	addlt	r0, r0, r3
 8008f92:	4770      	bx	lr

08008f94 <__swhatbuf_r>:
 8008f94:	b570      	push	{r4, r5, r6, lr}
 8008f96:	460c      	mov	r4, r1
 8008f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f9c:	2900      	cmp	r1, #0
 8008f9e:	b096      	sub	sp, #88	; 0x58
 8008fa0:	4615      	mov	r5, r2
 8008fa2:	461e      	mov	r6, r3
 8008fa4:	da0d      	bge.n	8008fc2 <__swhatbuf_r+0x2e>
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008fac:	f04f 0100 	mov.w	r1, #0
 8008fb0:	bf0c      	ite	eq
 8008fb2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008fb6:	2340      	movne	r3, #64	; 0x40
 8008fb8:	2000      	movs	r0, #0
 8008fba:	6031      	str	r1, [r6, #0]
 8008fbc:	602b      	str	r3, [r5, #0]
 8008fbe:	b016      	add	sp, #88	; 0x58
 8008fc0:	bd70      	pop	{r4, r5, r6, pc}
 8008fc2:	466a      	mov	r2, sp
 8008fc4:	f000 f848 	bl	8009058 <_fstat_r>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	dbec      	blt.n	8008fa6 <__swhatbuf_r+0x12>
 8008fcc:	9901      	ldr	r1, [sp, #4]
 8008fce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008fd2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008fd6:	4259      	negs	r1, r3
 8008fd8:	4159      	adcs	r1, r3
 8008fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fde:	e7eb      	b.n	8008fb8 <__swhatbuf_r+0x24>

08008fe0 <__smakebuf_r>:
 8008fe0:	898b      	ldrh	r3, [r1, #12]
 8008fe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008fe4:	079d      	lsls	r5, r3, #30
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	460c      	mov	r4, r1
 8008fea:	d507      	bpl.n	8008ffc <__smakebuf_r+0x1c>
 8008fec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ff0:	6023      	str	r3, [r4, #0]
 8008ff2:	6123      	str	r3, [r4, #16]
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	6163      	str	r3, [r4, #20]
 8008ff8:	b002      	add	sp, #8
 8008ffa:	bd70      	pop	{r4, r5, r6, pc}
 8008ffc:	ab01      	add	r3, sp, #4
 8008ffe:	466a      	mov	r2, sp
 8009000:	f7ff ffc8 	bl	8008f94 <__swhatbuf_r>
 8009004:	9900      	ldr	r1, [sp, #0]
 8009006:	4605      	mov	r5, r0
 8009008:	4630      	mov	r0, r6
 800900a:	f7fd f8fd 	bl	8006208 <_malloc_r>
 800900e:	b948      	cbnz	r0, 8009024 <__smakebuf_r+0x44>
 8009010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009014:	059a      	lsls	r2, r3, #22
 8009016:	d4ef      	bmi.n	8008ff8 <__smakebuf_r+0x18>
 8009018:	f023 0303 	bic.w	r3, r3, #3
 800901c:	f043 0302 	orr.w	r3, r3, #2
 8009020:	81a3      	strh	r3, [r4, #12]
 8009022:	e7e3      	b.n	8008fec <__smakebuf_r+0xc>
 8009024:	89a3      	ldrh	r3, [r4, #12]
 8009026:	6020      	str	r0, [r4, #0]
 8009028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800902c:	81a3      	strh	r3, [r4, #12]
 800902e:	9b00      	ldr	r3, [sp, #0]
 8009030:	6163      	str	r3, [r4, #20]
 8009032:	9b01      	ldr	r3, [sp, #4]
 8009034:	6120      	str	r0, [r4, #16]
 8009036:	b15b      	cbz	r3, 8009050 <__smakebuf_r+0x70>
 8009038:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800903c:	4630      	mov	r0, r6
 800903e:	f000 f81d 	bl	800907c <_isatty_r>
 8009042:	b128      	cbz	r0, 8009050 <__smakebuf_r+0x70>
 8009044:	89a3      	ldrh	r3, [r4, #12]
 8009046:	f023 0303 	bic.w	r3, r3, #3
 800904a:	f043 0301 	orr.w	r3, r3, #1
 800904e:	81a3      	strh	r3, [r4, #12]
 8009050:	89a3      	ldrh	r3, [r4, #12]
 8009052:	431d      	orrs	r5, r3
 8009054:	81a5      	strh	r5, [r4, #12]
 8009056:	e7cf      	b.n	8008ff8 <__smakebuf_r+0x18>

08009058 <_fstat_r>:
 8009058:	b538      	push	{r3, r4, r5, lr}
 800905a:	4d07      	ldr	r5, [pc, #28]	; (8009078 <_fstat_r+0x20>)
 800905c:	2300      	movs	r3, #0
 800905e:	4604      	mov	r4, r0
 8009060:	4608      	mov	r0, r1
 8009062:	4611      	mov	r1, r2
 8009064:	602b      	str	r3, [r5, #0]
 8009066:	f7f9 fdfc 	bl	8002c62 <_fstat>
 800906a:	1c43      	adds	r3, r0, #1
 800906c:	d102      	bne.n	8009074 <_fstat_r+0x1c>
 800906e:	682b      	ldr	r3, [r5, #0]
 8009070:	b103      	cbz	r3, 8009074 <_fstat_r+0x1c>
 8009072:	6023      	str	r3, [r4, #0]
 8009074:	bd38      	pop	{r3, r4, r5, pc}
 8009076:	bf00      	nop
 8009078:	200004cc 	.word	0x200004cc

0800907c <_isatty_r>:
 800907c:	b538      	push	{r3, r4, r5, lr}
 800907e:	4d06      	ldr	r5, [pc, #24]	; (8009098 <_isatty_r+0x1c>)
 8009080:	2300      	movs	r3, #0
 8009082:	4604      	mov	r4, r0
 8009084:	4608      	mov	r0, r1
 8009086:	602b      	str	r3, [r5, #0]
 8009088:	f7f9 fdfb 	bl	8002c82 <_isatty>
 800908c:	1c43      	adds	r3, r0, #1
 800908e:	d102      	bne.n	8009096 <_isatty_r+0x1a>
 8009090:	682b      	ldr	r3, [r5, #0]
 8009092:	b103      	cbz	r3, 8009096 <_isatty_r+0x1a>
 8009094:	6023      	str	r3, [r4, #0]
 8009096:	bd38      	pop	{r3, r4, r5, pc}
 8009098:	200004cc 	.word	0x200004cc

0800909c <atan2>:
 800909c:	f000 b87c 	b.w	8009198 <__ieee754_atan2>

080090a0 <pow>:
 80090a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a2:	ed2d 8b02 	vpush	{d8}
 80090a6:	eeb0 8a40 	vmov.f32	s16, s0
 80090aa:	eef0 8a60 	vmov.f32	s17, s1
 80090ae:	ec55 4b11 	vmov	r4, r5, d1
 80090b2:	f000 f939 	bl	8009328 <__ieee754_pow>
 80090b6:	4622      	mov	r2, r4
 80090b8:	462b      	mov	r3, r5
 80090ba:	4620      	mov	r0, r4
 80090bc:	4629      	mov	r1, r5
 80090be:	ec57 6b10 	vmov	r6, r7, d0
 80090c2:	f7f7 fd3b 	bl	8000b3c <__aeabi_dcmpun>
 80090c6:	2800      	cmp	r0, #0
 80090c8:	d13b      	bne.n	8009142 <pow+0xa2>
 80090ca:	ec51 0b18 	vmov	r0, r1, d8
 80090ce:	2200      	movs	r2, #0
 80090d0:	2300      	movs	r3, #0
 80090d2:	f7f7 fd01 	bl	8000ad8 <__aeabi_dcmpeq>
 80090d6:	b1b8      	cbz	r0, 8009108 <pow+0x68>
 80090d8:	2200      	movs	r2, #0
 80090da:	2300      	movs	r3, #0
 80090dc:	4620      	mov	r0, r4
 80090de:	4629      	mov	r1, r5
 80090e0:	f7f7 fcfa 	bl	8000ad8 <__aeabi_dcmpeq>
 80090e4:	2800      	cmp	r0, #0
 80090e6:	d146      	bne.n	8009176 <pow+0xd6>
 80090e8:	ec45 4b10 	vmov	d0, r4, r5
 80090ec:	f000 f848 	bl	8009180 <finite>
 80090f0:	b338      	cbz	r0, 8009142 <pow+0xa2>
 80090f2:	2200      	movs	r2, #0
 80090f4:	2300      	movs	r3, #0
 80090f6:	4620      	mov	r0, r4
 80090f8:	4629      	mov	r1, r5
 80090fa:	f7f7 fcf7 	bl	8000aec <__aeabi_dcmplt>
 80090fe:	b300      	cbz	r0, 8009142 <pow+0xa2>
 8009100:	f7fd ffe4 	bl	80070cc <__errno>
 8009104:	2322      	movs	r3, #34	; 0x22
 8009106:	e01b      	b.n	8009140 <pow+0xa0>
 8009108:	ec47 6b10 	vmov	d0, r6, r7
 800910c:	f000 f838 	bl	8009180 <finite>
 8009110:	b9e0      	cbnz	r0, 800914c <pow+0xac>
 8009112:	eeb0 0a48 	vmov.f32	s0, s16
 8009116:	eef0 0a68 	vmov.f32	s1, s17
 800911a:	f000 f831 	bl	8009180 <finite>
 800911e:	b1a8      	cbz	r0, 800914c <pow+0xac>
 8009120:	ec45 4b10 	vmov	d0, r4, r5
 8009124:	f000 f82c 	bl	8009180 <finite>
 8009128:	b180      	cbz	r0, 800914c <pow+0xac>
 800912a:	4632      	mov	r2, r6
 800912c:	463b      	mov	r3, r7
 800912e:	4630      	mov	r0, r6
 8009130:	4639      	mov	r1, r7
 8009132:	f7f7 fd03 	bl	8000b3c <__aeabi_dcmpun>
 8009136:	2800      	cmp	r0, #0
 8009138:	d0e2      	beq.n	8009100 <pow+0x60>
 800913a:	f7fd ffc7 	bl	80070cc <__errno>
 800913e:	2321      	movs	r3, #33	; 0x21
 8009140:	6003      	str	r3, [r0, #0]
 8009142:	ecbd 8b02 	vpop	{d8}
 8009146:	ec47 6b10 	vmov	d0, r6, r7
 800914a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800914c:	2200      	movs	r2, #0
 800914e:	2300      	movs	r3, #0
 8009150:	4630      	mov	r0, r6
 8009152:	4639      	mov	r1, r7
 8009154:	f7f7 fcc0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009158:	2800      	cmp	r0, #0
 800915a:	d0f2      	beq.n	8009142 <pow+0xa2>
 800915c:	eeb0 0a48 	vmov.f32	s0, s16
 8009160:	eef0 0a68 	vmov.f32	s1, s17
 8009164:	f000 f80c 	bl	8009180 <finite>
 8009168:	2800      	cmp	r0, #0
 800916a:	d0ea      	beq.n	8009142 <pow+0xa2>
 800916c:	ec45 4b10 	vmov	d0, r4, r5
 8009170:	f000 f806 	bl	8009180 <finite>
 8009174:	e7c3      	b.n	80090fe <pow+0x5e>
 8009176:	4f01      	ldr	r7, [pc, #4]	; (800917c <pow+0xdc>)
 8009178:	2600      	movs	r6, #0
 800917a:	e7e2      	b.n	8009142 <pow+0xa2>
 800917c:	3ff00000 	.word	0x3ff00000

08009180 <finite>:
 8009180:	b082      	sub	sp, #8
 8009182:	ed8d 0b00 	vstr	d0, [sp]
 8009186:	9801      	ldr	r0, [sp, #4]
 8009188:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800918c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009190:	0fc0      	lsrs	r0, r0, #31
 8009192:	b002      	add	sp, #8
 8009194:	4770      	bx	lr
	...

08009198 <__ieee754_atan2>:
 8009198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800919c:	ec57 6b11 	vmov	r6, r7, d1
 80091a0:	4273      	negs	r3, r6
 80091a2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8009320 <__ieee754_atan2+0x188>
 80091a6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80091aa:	4333      	orrs	r3, r6
 80091ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80091b0:	4543      	cmp	r3, r8
 80091b2:	ec51 0b10 	vmov	r0, r1, d0
 80091b6:	ee11 5a10 	vmov	r5, s2
 80091ba:	d80a      	bhi.n	80091d2 <__ieee754_atan2+0x3a>
 80091bc:	4244      	negs	r4, r0
 80091be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80091c2:	4304      	orrs	r4, r0
 80091c4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80091c8:	4544      	cmp	r4, r8
 80091ca:	ee10 9a10 	vmov	r9, s0
 80091ce:	468e      	mov	lr, r1
 80091d0:	d907      	bls.n	80091e2 <__ieee754_atan2+0x4a>
 80091d2:	4632      	mov	r2, r6
 80091d4:	463b      	mov	r3, r7
 80091d6:	f7f7 f861 	bl	800029c <__adddf3>
 80091da:	ec41 0b10 	vmov	d0, r0, r1
 80091de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091e2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80091e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80091ea:	4334      	orrs	r4, r6
 80091ec:	d103      	bne.n	80091f6 <__ieee754_atan2+0x5e>
 80091ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091f2:	f000 bdc5 	b.w	8009d80 <atan>
 80091f6:	17bc      	asrs	r4, r7, #30
 80091f8:	f004 0402 	and.w	r4, r4, #2
 80091fc:	ea53 0909 	orrs.w	r9, r3, r9
 8009200:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009204:	d107      	bne.n	8009216 <__ieee754_atan2+0x7e>
 8009206:	2c02      	cmp	r4, #2
 8009208:	d05f      	beq.n	80092ca <__ieee754_atan2+0x132>
 800920a:	2c03      	cmp	r4, #3
 800920c:	d1e5      	bne.n	80091da <__ieee754_atan2+0x42>
 800920e:	a140      	add	r1, pc, #256	; (adr r1, 8009310 <__ieee754_atan2+0x178>)
 8009210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009214:	e7e1      	b.n	80091da <__ieee754_atan2+0x42>
 8009216:	4315      	orrs	r5, r2
 8009218:	d106      	bne.n	8009228 <__ieee754_atan2+0x90>
 800921a:	f1be 0f00 	cmp.w	lr, #0
 800921e:	da5f      	bge.n	80092e0 <__ieee754_atan2+0x148>
 8009220:	a13d      	add	r1, pc, #244	; (adr r1, 8009318 <__ieee754_atan2+0x180>)
 8009222:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009226:	e7d8      	b.n	80091da <__ieee754_atan2+0x42>
 8009228:	4542      	cmp	r2, r8
 800922a:	d10f      	bne.n	800924c <__ieee754_atan2+0xb4>
 800922c:	4293      	cmp	r3, r2
 800922e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009232:	d107      	bne.n	8009244 <__ieee754_atan2+0xac>
 8009234:	2c02      	cmp	r4, #2
 8009236:	d84c      	bhi.n	80092d2 <__ieee754_atan2+0x13a>
 8009238:	4b33      	ldr	r3, [pc, #204]	; (8009308 <__ieee754_atan2+0x170>)
 800923a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800923e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009242:	e7ca      	b.n	80091da <__ieee754_atan2+0x42>
 8009244:	2c02      	cmp	r4, #2
 8009246:	d848      	bhi.n	80092da <__ieee754_atan2+0x142>
 8009248:	4b30      	ldr	r3, [pc, #192]	; (800930c <__ieee754_atan2+0x174>)
 800924a:	e7f6      	b.n	800923a <__ieee754_atan2+0xa2>
 800924c:	4543      	cmp	r3, r8
 800924e:	d0e4      	beq.n	800921a <__ieee754_atan2+0x82>
 8009250:	1a9b      	subs	r3, r3, r2
 8009252:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009256:	ea4f 5223 	mov.w	r2, r3, asr #20
 800925a:	da1e      	bge.n	800929a <__ieee754_atan2+0x102>
 800925c:	2f00      	cmp	r7, #0
 800925e:	da01      	bge.n	8009264 <__ieee754_atan2+0xcc>
 8009260:	323c      	adds	r2, #60	; 0x3c
 8009262:	db1e      	blt.n	80092a2 <__ieee754_atan2+0x10a>
 8009264:	4632      	mov	r2, r6
 8009266:	463b      	mov	r3, r7
 8009268:	f7f7 faf8 	bl	800085c <__aeabi_ddiv>
 800926c:	ec41 0b10 	vmov	d0, r0, r1
 8009270:	f000 ff26 	bl	800a0c0 <fabs>
 8009274:	f000 fd84 	bl	8009d80 <atan>
 8009278:	ec51 0b10 	vmov	r0, r1, d0
 800927c:	2c01      	cmp	r4, #1
 800927e:	d013      	beq.n	80092a8 <__ieee754_atan2+0x110>
 8009280:	2c02      	cmp	r4, #2
 8009282:	d015      	beq.n	80092b0 <__ieee754_atan2+0x118>
 8009284:	2c00      	cmp	r4, #0
 8009286:	d0a8      	beq.n	80091da <__ieee754_atan2+0x42>
 8009288:	a317      	add	r3, pc, #92	; (adr r3, 80092e8 <__ieee754_atan2+0x150>)
 800928a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928e:	f7f7 f803 	bl	8000298 <__aeabi_dsub>
 8009292:	a317      	add	r3, pc, #92	; (adr r3, 80092f0 <__ieee754_atan2+0x158>)
 8009294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009298:	e014      	b.n	80092c4 <__ieee754_atan2+0x12c>
 800929a:	a117      	add	r1, pc, #92	; (adr r1, 80092f8 <__ieee754_atan2+0x160>)
 800929c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092a0:	e7ec      	b.n	800927c <__ieee754_atan2+0xe4>
 80092a2:	2000      	movs	r0, #0
 80092a4:	2100      	movs	r1, #0
 80092a6:	e7e9      	b.n	800927c <__ieee754_atan2+0xe4>
 80092a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092ac:	4619      	mov	r1, r3
 80092ae:	e794      	b.n	80091da <__ieee754_atan2+0x42>
 80092b0:	a30d      	add	r3, pc, #52	; (adr r3, 80092e8 <__ieee754_atan2+0x150>)
 80092b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b6:	f7f6 ffef 	bl	8000298 <__aeabi_dsub>
 80092ba:	4602      	mov	r2, r0
 80092bc:	460b      	mov	r3, r1
 80092be:	a10c      	add	r1, pc, #48	; (adr r1, 80092f0 <__ieee754_atan2+0x158>)
 80092c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092c4:	f7f6 ffe8 	bl	8000298 <__aeabi_dsub>
 80092c8:	e787      	b.n	80091da <__ieee754_atan2+0x42>
 80092ca:	a109      	add	r1, pc, #36	; (adr r1, 80092f0 <__ieee754_atan2+0x158>)
 80092cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092d0:	e783      	b.n	80091da <__ieee754_atan2+0x42>
 80092d2:	a10b      	add	r1, pc, #44	; (adr r1, 8009300 <__ieee754_atan2+0x168>)
 80092d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092d8:	e77f      	b.n	80091da <__ieee754_atan2+0x42>
 80092da:	2000      	movs	r0, #0
 80092dc:	2100      	movs	r1, #0
 80092de:	e77c      	b.n	80091da <__ieee754_atan2+0x42>
 80092e0:	a105      	add	r1, pc, #20	; (adr r1, 80092f8 <__ieee754_atan2+0x160>)
 80092e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092e6:	e778      	b.n	80091da <__ieee754_atan2+0x42>
 80092e8:	33145c07 	.word	0x33145c07
 80092ec:	3ca1a626 	.word	0x3ca1a626
 80092f0:	54442d18 	.word	0x54442d18
 80092f4:	400921fb 	.word	0x400921fb
 80092f8:	54442d18 	.word	0x54442d18
 80092fc:	3ff921fb 	.word	0x3ff921fb
 8009300:	54442d18 	.word	0x54442d18
 8009304:	3fe921fb 	.word	0x3fe921fb
 8009308:	0800a960 	.word	0x0800a960
 800930c:	0800a978 	.word	0x0800a978
 8009310:	54442d18 	.word	0x54442d18
 8009314:	c00921fb 	.word	0xc00921fb
 8009318:	54442d18 	.word	0x54442d18
 800931c:	bff921fb 	.word	0xbff921fb
 8009320:	7ff00000 	.word	0x7ff00000
 8009324:	00000000 	.word	0x00000000

08009328 <__ieee754_pow>:
 8009328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800932c:	ed2d 8b06 	vpush	{d8-d10}
 8009330:	b089      	sub	sp, #36	; 0x24
 8009332:	ed8d 1b00 	vstr	d1, [sp]
 8009336:	e9dd 2900 	ldrd	r2, r9, [sp]
 800933a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800933e:	ea58 0102 	orrs.w	r1, r8, r2
 8009342:	ec57 6b10 	vmov	r6, r7, d0
 8009346:	d115      	bne.n	8009374 <__ieee754_pow+0x4c>
 8009348:	19b3      	adds	r3, r6, r6
 800934a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800934e:	4152      	adcs	r2, r2
 8009350:	4299      	cmp	r1, r3
 8009352:	4b89      	ldr	r3, [pc, #548]	; (8009578 <__ieee754_pow+0x250>)
 8009354:	4193      	sbcs	r3, r2
 8009356:	f080 84d1 	bcs.w	8009cfc <__ieee754_pow+0x9d4>
 800935a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800935e:	4630      	mov	r0, r6
 8009360:	4639      	mov	r1, r7
 8009362:	f7f6 ff9b 	bl	800029c <__adddf3>
 8009366:	ec41 0b10 	vmov	d0, r0, r1
 800936a:	b009      	add	sp, #36	; 0x24
 800936c:	ecbd 8b06 	vpop	{d8-d10}
 8009370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009374:	4b81      	ldr	r3, [pc, #516]	; (800957c <__ieee754_pow+0x254>)
 8009376:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800937a:	429c      	cmp	r4, r3
 800937c:	ee10 aa10 	vmov	sl, s0
 8009380:	463d      	mov	r5, r7
 8009382:	dc06      	bgt.n	8009392 <__ieee754_pow+0x6a>
 8009384:	d101      	bne.n	800938a <__ieee754_pow+0x62>
 8009386:	2e00      	cmp	r6, #0
 8009388:	d1e7      	bne.n	800935a <__ieee754_pow+0x32>
 800938a:	4598      	cmp	r8, r3
 800938c:	dc01      	bgt.n	8009392 <__ieee754_pow+0x6a>
 800938e:	d10f      	bne.n	80093b0 <__ieee754_pow+0x88>
 8009390:	b172      	cbz	r2, 80093b0 <__ieee754_pow+0x88>
 8009392:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009396:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800939a:	ea55 050a 	orrs.w	r5, r5, sl
 800939e:	d1dc      	bne.n	800935a <__ieee754_pow+0x32>
 80093a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80093a4:	18db      	adds	r3, r3, r3
 80093a6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80093aa:	4152      	adcs	r2, r2
 80093ac:	429d      	cmp	r5, r3
 80093ae:	e7d0      	b.n	8009352 <__ieee754_pow+0x2a>
 80093b0:	2d00      	cmp	r5, #0
 80093b2:	da3b      	bge.n	800942c <__ieee754_pow+0x104>
 80093b4:	4b72      	ldr	r3, [pc, #456]	; (8009580 <__ieee754_pow+0x258>)
 80093b6:	4598      	cmp	r8, r3
 80093b8:	dc51      	bgt.n	800945e <__ieee754_pow+0x136>
 80093ba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80093be:	4598      	cmp	r8, r3
 80093c0:	f340 84ab 	ble.w	8009d1a <__ieee754_pow+0x9f2>
 80093c4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80093c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80093cc:	2b14      	cmp	r3, #20
 80093ce:	dd0f      	ble.n	80093f0 <__ieee754_pow+0xc8>
 80093d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80093d4:	fa22 f103 	lsr.w	r1, r2, r3
 80093d8:	fa01 f303 	lsl.w	r3, r1, r3
 80093dc:	4293      	cmp	r3, r2
 80093de:	f040 849c 	bne.w	8009d1a <__ieee754_pow+0x9f2>
 80093e2:	f001 0101 	and.w	r1, r1, #1
 80093e6:	f1c1 0302 	rsb	r3, r1, #2
 80093ea:	9304      	str	r3, [sp, #16]
 80093ec:	b182      	cbz	r2, 8009410 <__ieee754_pow+0xe8>
 80093ee:	e05f      	b.n	80094b0 <__ieee754_pow+0x188>
 80093f0:	2a00      	cmp	r2, #0
 80093f2:	d15b      	bne.n	80094ac <__ieee754_pow+0x184>
 80093f4:	f1c3 0314 	rsb	r3, r3, #20
 80093f8:	fa48 f103 	asr.w	r1, r8, r3
 80093fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009400:	4543      	cmp	r3, r8
 8009402:	f040 8487 	bne.w	8009d14 <__ieee754_pow+0x9ec>
 8009406:	f001 0101 	and.w	r1, r1, #1
 800940a:	f1c1 0302 	rsb	r3, r1, #2
 800940e:	9304      	str	r3, [sp, #16]
 8009410:	4b5c      	ldr	r3, [pc, #368]	; (8009584 <__ieee754_pow+0x25c>)
 8009412:	4598      	cmp	r8, r3
 8009414:	d132      	bne.n	800947c <__ieee754_pow+0x154>
 8009416:	f1b9 0f00 	cmp.w	r9, #0
 800941a:	f280 8477 	bge.w	8009d0c <__ieee754_pow+0x9e4>
 800941e:	4959      	ldr	r1, [pc, #356]	; (8009584 <__ieee754_pow+0x25c>)
 8009420:	4632      	mov	r2, r6
 8009422:	463b      	mov	r3, r7
 8009424:	2000      	movs	r0, #0
 8009426:	f7f7 fa19 	bl	800085c <__aeabi_ddiv>
 800942a:	e79c      	b.n	8009366 <__ieee754_pow+0x3e>
 800942c:	2300      	movs	r3, #0
 800942e:	9304      	str	r3, [sp, #16]
 8009430:	2a00      	cmp	r2, #0
 8009432:	d13d      	bne.n	80094b0 <__ieee754_pow+0x188>
 8009434:	4b51      	ldr	r3, [pc, #324]	; (800957c <__ieee754_pow+0x254>)
 8009436:	4598      	cmp	r8, r3
 8009438:	d1ea      	bne.n	8009410 <__ieee754_pow+0xe8>
 800943a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800943e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009442:	ea53 030a 	orrs.w	r3, r3, sl
 8009446:	f000 8459 	beq.w	8009cfc <__ieee754_pow+0x9d4>
 800944a:	4b4f      	ldr	r3, [pc, #316]	; (8009588 <__ieee754_pow+0x260>)
 800944c:	429c      	cmp	r4, r3
 800944e:	dd08      	ble.n	8009462 <__ieee754_pow+0x13a>
 8009450:	f1b9 0f00 	cmp.w	r9, #0
 8009454:	f2c0 8456 	blt.w	8009d04 <__ieee754_pow+0x9dc>
 8009458:	e9dd 0100 	ldrd	r0, r1, [sp]
 800945c:	e783      	b.n	8009366 <__ieee754_pow+0x3e>
 800945e:	2302      	movs	r3, #2
 8009460:	e7e5      	b.n	800942e <__ieee754_pow+0x106>
 8009462:	f1b9 0f00 	cmp.w	r9, #0
 8009466:	f04f 0000 	mov.w	r0, #0
 800946a:	f04f 0100 	mov.w	r1, #0
 800946e:	f6bf af7a 	bge.w	8009366 <__ieee754_pow+0x3e>
 8009472:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009476:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800947a:	e774      	b.n	8009366 <__ieee754_pow+0x3e>
 800947c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009480:	d106      	bne.n	8009490 <__ieee754_pow+0x168>
 8009482:	4632      	mov	r2, r6
 8009484:	463b      	mov	r3, r7
 8009486:	4630      	mov	r0, r6
 8009488:	4639      	mov	r1, r7
 800948a:	f7f7 f8bd 	bl	8000608 <__aeabi_dmul>
 800948e:	e76a      	b.n	8009366 <__ieee754_pow+0x3e>
 8009490:	4b3e      	ldr	r3, [pc, #248]	; (800958c <__ieee754_pow+0x264>)
 8009492:	4599      	cmp	r9, r3
 8009494:	d10c      	bne.n	80094b0 <__ieee754_pow+0x188>
 8009496:	2d00      	cmp	r5, #0
 8009498:	db0a      	blt.n	80094b0 <__ieee754_pow+0x188>
 800949a:	ec47 6b10 	vmov	d0, r6, r7
 800949e:	b009      	add	sp, #36	; 0x24
 80094a0:	ecbd 8b06 	vpop	{d8-d10}
 80094a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a8:	f000 bec4 	b.w	800a234 <__ieee754_sqrt>
 80094ac:	2300      	movs	r3, #0
 80094ae:	9304      	str	r3, [sp, #16]
 80094b0:	ec47 6b10 	vmov	d0, r6, r7
 80094b4:	f000 fe04 	bl	800a0c0 <fabs>
 80094b8:	ec51 0b10 	vmov	r0, r1, d0
 80094bc:	f1ba 0f00 	cmp.w	sl, #0
 80094c0:	d129      	bne.n	8009516 <__ieee754_pow+0x1ee>
 80094c2:	b124      	cbz	r4, 80094ce <__ieee754_pow+0x1a6>
 80094c4:	4b2f      	ldr	r3, [pc, #188]	; (8009584 <__ieee754_pow+0x25c>)
 80094c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d123      	bne.n	8009516 <__ieee754_pow+0x1ee>
 80094ce:	f1b9 0f00 	cmp.w	r9, #0
 80094d2:	da05      	bge.n	80094e0 <__ieee754_pow+0x1b8>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	2000      	movs	r0, #0
 80094da:	492a      	ldr	r1, [pc, #168]	; (8009584 <__ieee754_pow+0x25c>)
 80094dc:	f7f7 f9be 	bl	800085c <__aeabi_ddiv>
 80094e0:	2d00      	cmp	r5, #0
 80094e2:	f6bf af40 	bge.w	8009366 <__ieee754_pow+0x3e>
 80094e6:	9b04      	ldr	r3, [sp, #16]
 80094e8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80094ec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80094f0:	431c      	orrs	r4, r3
 80094f2:	d108      	bne.n	8009506 <__ieee754_pow+0x1de>
 80094f4:	4602      	mov	r2, r0
 80094f6:	460b      	mov	r3, r1
 80094f8:	4610      	mov	r0, r2
 80094fa:	4619      	mov	r1, r3
 80094fc:	f7f6 fecc 	bl	8000298 <__aeabi_dsub>
 8009500:	4602      	mov	r2, r0
 8009502:	460b      	mov	r3, r1
 8009504:	e78f      	b.n	8009426 <__ieee754_pow+0xfe>
 8009506:	9b04      	ldr	r3, [sp, #16]
 8009508:	2b01      	cmp	r3, #1
 800950a:	f47f af2c 	bne.w	8009366 <__ieee754_pow+0x3e>
 800950e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009512:	4619      	mov	r1, r3
 8009514:	e727      	b.n	8009366 <__ieee754_pow+0x3e>
 8009516:	0feb      	lsrs	r3, r5, #31
 8009518:	3b01      	subs	r3, #1
 800951a:	9306      	str	r3, [sp, #24]
 800951c:	9a06      	ldr	r2, [sp, #24]
 800951e:	9b04      	ldr	r3, [sp, #16]
 8009520:	4313      	orrs	r3, r2
 8009522:	d102      	bne.n	800952a <__ieee754_pow+0x202>
 8009524:	4632      	mov	r2, r6
 8009526:	463b      	mov	r3, r7
 8009528:	e7e6      	b.n	80094f8 <__ieee754_pow+0x1d0>
 800952a:	4b19      	ldr	r3, [pc, #100]	; (8009590 <__ieee754_pow+0x268>)
 800952c:	4598      	cmp	r8, r3
 800952e:	f340 80fb 	ble.w	8009728 <__ieee754_pow+0x400>
 8009532:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009536:	4598      	cmp	r8, r3
 8009538:	4b13      	ldr	r3, [pc, #76]	; (8009588 <__ieee754_pow+0x260>)
 800953a:	dd0c      	ble.n	8009556 <__ieee754_pow+0x22e>
 800953c:	429c      	cmp	r4, r3
 800953e:	dc0f      	bgt.n	8009560 <__ieee754_pow+0x238>
 8009540:	f1b9 0f00 	cmp.w	r9, #0
 8009544:	da0f      	bge.n	8009566 <__ieee754_pow+0x23e>
 8009546:	2000      	movs	r0, #0
 8009548:	b009      	add	sp, #36	; 0x24
 800954a:	ecbd 8b06 	vpop	{d8-d10}
 800954e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009552:	f000 be66 	b.w	800a222 <__math_oflow>
 8009556:	429c      	cmp	r4, r3
 8009558:	dbf2      	blt.n	8009540 <__ieee754_pow+0x218>
 800955a:	4b0a      	ldr	r3, [pc, #40]	; (8009584 <__ieee754_pow+0x25c>)
 800955c:	429c      	cmp	r4, r3
 800955e:	dd19      	ble.n	8009594 <__ieee754_pow+0x26c>
 8009560:	f1b9 0f00 	cmp.w	r9, #0
 8009564:	dcef      	bgt.n	8009546 <__ieee754_pow+0x21e>
 8009566:	2000      	movs	r0, #0
 8009568:	b009      	add	sp, #36	; 0x24
 800956a:	ecbd 8b06 	vpop	{d8-d10}
 800956e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009572:	f000 be4d 	b.w	800a210 <__math_uflow>
 8009576:	bf00      	nop
 8009578:	fff00000 	.word	0xfff00000
 800957c:	7ff00000 	.word	0x7ff00000
 8009580:	433fffff 	.word	0x433fffff
 8009584:	3ff00000 	.word	0x3ff00000
 8009588:	3fefffff 	.word	0x3fefffff
 800958c:	3fe00000 	.word	0x3fe00000
 8009590:	41e00000 	.word	0x41e00000
 8009594:	4b60      	ldr	r3, [pc, #384]	; (8009718 <__ieee754_pow+0x3f0>)
 8009596:	2200      	movs	r2, #0
 8009598:	f7f6 fe7e 	bl	8000298 <__aeabi_dsub>
 800959c:	a354      	add	r3, pc, #336	; (adr r3, 80096f0 <__ieee754_pow+0x3c8>)
 800959e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a2:	4604      	mov	r4, r0
 80095a4:	460d      	mov	r5, r1
 80095a6:	f7f7 f82f 	bl	8000608 <__aeabi_dmul>
 80095aa:	a353      	add	r3, pc, #332	; (adr r3, 80096f8 <__ieee754_pow+0x3d0>)
 80095ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b0:	4606      	mov	r6, r0
 80095b2:	460f      	mov	r7, r1
 80095b4:	4620      	mov	r0, r4
 80095b6:	4629      	mov	r1, r5
 80095b8:	f7f7 f826 	bl	8000608 <__aeabi_dmul>
 80095bc:	4b57      	ldr	r3, [pc, #348]	; (800971c <__ieee754_pow+0x3f4>)
 80095be:	4682      	mov	sl, r0
 80095c0:	468b      	mov	fp, r1
 80095c2:	2200      	movs	r2, #0
 80095c4:	4620      	mov	r0, r4
 80095c6:	4629      	mov	r1, r5
 80095c8:	f7f7 f81e 	bl	8000608 <__aeabi_dmul>
 80095cc:	4602      	mov	r2, r0
 80095ce:	460b      	mov	r3, r1
 80095d0:	a14b      	add	r1, pc, #300	; (adr r1, 8009700 <__ieee754_pow+0x3d8>)
 80095d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095d6:	f7f6 fe5f 	bl	8000298 <__aeabi_dsub>
 80095da:	4622      	mov	r2, r4
 80095dc:	462b      	mov	r3, r5
 80095de:	f7f7 f813 	bl	8000608 <__aeabi_dmul>
 80095e2:	4602      	mov	r2, r0
 80095e4:	460b      	mov	r3, r1
 80095e6:	2000      	movs	r0, #0
 80095e8:	494d      	ldr	r1, [pc, #308]	; (8009720 <__ieee754_pow+0x3f8>)
 80095ea:	f7f6 fe55 	bl	8000298 <__aeabi_dsub>
 80095ee:	4622      	mov	r2, r4
 80095f0:	4680      	mov	r8, r0
 80095f2:	4689      	mov	r9, r1
 80095f4:	462b      	mov	r3, r5
 80095f6:	4620      	mov	r0, r4
 80095f8:	4629      	mov	r1, r5
 80095fa:	f7f7 f805 	bl	8000608 <__aeabi_dmul>
 80095fe:	4602      	mov	r2, r0
 8009600:	460b      	mov	r3, r1
 8009602:	4640      	mov	r0, r8
 8009604:	4649      	mov	r1, r9
 8009606:	f7f6 ffff 	bl	8000608 <__aeabi_dmul>
 800960a:	a33f      	add	r3, pc, #252	; (adr r3, 8009708 <__ieee754_pow+0x3e0>)
 800960c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009610:	f7f6 fffa 	bl	8000608 <__aeabi_dmul>
 8009614:	4602      	mov	r2, r0
 8009616:	460b      	mov	r3, r1
 8009618:	4650      	mov	r0, sl
 800961a:	4659      	mov	r1, fp
 800961c:	f7f6 fe3c 	bl	8000298 <__aeabi_dsub>
 8009620:	4602      	mov	r2, r0
 8009622:	460b      	mov	r3, r1
 8009624:	4680      	mov	r8, r0
 8009626:	4689      	mov	r9, r1
 8009628:	4630      	mov	r0, r6
 800962a:	4639      	mov	r1, r7
 800962c:	f7f6 fe36 	bl	800029c <__adddf3>
 8009630:	2000      	movs	r0, #0
 8009632:	4632      	mov	r2, r6
 8009634:	463b      	mov	r3, r7
 8009636:	4604      	mov	r4, r0
 8009638:	460d      	mov	r5, r1
 800963a:	f7f6 fe2d 	bl	8000298 <__aeabi_dsub>
 800963e:	4602      	mov	r2, r0
 8009640:	460b      	mov	r3, r1
 8009642:	4640      	mov	r0, r8
 8009644:	4649      	mov	r1, r9
 8009646:	f7f6 fe27 	bl	8000298 <__aeabi_dsub>
 800964a:	9b04      	ldr	r3, [sp, #16]
 800964c:	9a06      	ldr	r2, [sp, #24]
 800964e:	3b01      	subs	r3, #1
 8009650:	4313      	orrs	r3, r2
 8009652:	4682      	mov	sl, r0
 8009654:	468b      	mov	fp, r1
 8009656:	f040 81e7 	bne.w	8009a28 <__ieee754_pow+0x700>
 800965a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009710 <__ieee754_pow+0x3e8>
 800965e:	eeb0 8a47 	vmov.f32	s16, s14
 8009662:	eef0 8a67 	vmov.f32	s17, s15
 8009666:	e9dd 6700 	ldrd	r6, r7, [sp]
 800966a:	2600      	movs	r6, #0
 800966c:	4632      	mov	r2, r6
 800966e:	463b      	mov	r3, r7
 8009670:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009674:	f7f6 fe10 	bl	8000298 <__aeabi_dsub>
 8009678:	4622      	mov	r2, r4
 800967a:	462b      	mov	r3, r5
 800967c:	f7f6 ffc4 	bl	8000608 <__aeabi_dmul>
 8009680:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009684:	4680      	mov	r8, r0
 8009686:	4689      	mov	r9, r1
 8009688:	4650      	mov	r0, sl
 800968a:	4659      	mov	r1, fp
 800968c:	f7f6 ffbc 	bl	8000608 <__aeabi_dmul>
 8009690:	4602      	mov	r2, r0
 8009692:	460b      	mov	r3, r1
 8009694:	4640      	mov	r0, r8
 8009696:	4649      	mov	r1, r9
 8009698:	f7f6 fe00 	bl	800029c <__adddf3>
 800969c:	4632      	mov	r2, r6
 800969e:	463b      	mov	r3, r7
 80096a0:	4680      	mov	r8, r0
 80096a2:	4689      	mov	r9, r1
 80096a4:	4620      	mov	r0, r4
 80096a6:	4629      	mov	r1, r5
 80096a8:	f7f6 ffae 	bl	8000608 <__aeabi_dmul>
 80096ac:	460b      	mov	r3, r1
 80096ae:	4604      	mov	r4, r0
 80096b0:	460d      	mov	r5, r1
 80096b2:	4602      	mov	r2, r0
 80096b4:	4649      	mov	r1, r9
 80096b6:	4640      	mov	r0, r8
 80096b8:	f7f6 fdf0 	bl	800029c <__adddf3>
 80096bc:	4b19      	ldr	r3, [pc, #100]	; (8009724 <__ieee754_pow+0x3fc>)
 80096be:	4299      	cmp	r1, r3
 80096c0:	ec45 4b19 	vmov	d9, r4, r5
 80096c4:	4606      	mov	r6, r0
 80096c6:	460f      	mov	r7, r1
 80096c8:	468b      	mov	fp, r1
 80096ca:	f340 82f0 	ble.w	8009cae <__ieee754_pow+0x986>
 80096ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80096d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80096d6:	4303      	orrs	r3, r0
 80096d8:	f000 81e4 	beq.w	8009aa4 <__ieee754_pow+0x77c>
 80096dc:	ec51 0b18 	vmov	r0, r1, d8
 80096e0:	2200      	movs	r2, #0
 80096e2:	2300      	movs	r3, #0
 80096e4:	f7f7 fa02 	bl	8000aec <__aeabi_dcmplt>
 80096e8:	3800      	subs	r0, #0
 80096ea:	bf18      	it	ne
 80096ec:	2001      	movne	r0, #1
 80096ee:	e72b      	b.n	8009548 <__ieee754_pow+0x220>
 80096f0:	60000000 	.word	0x60000000
 80096f4:	3ff71547 	.word	0x3ff71547
 80096f8:	f85ddf44 	.word	0xf85ddf44
 80096fc:	3e54ae0b 	.word	0x3e54ae0b
 8009700:	55555555 	.word	0x55555555
 8009704:	3fd55555 	.word	0x3fd55555
 8009708:	652b82fe 	.word	0x652b82fe
 800970c:	3ff71547 	.word	0x3ff71547
 8009710:	00000000 	.word	0x00000000
 8009714:	bff00000 	.word	0xbff00000
 8009718:	3ff00000 	.word	0x3ff00000
 800971c:	3fd00000 	.word	0x3fd00000
 8009720:	3fe00000 	.word	0x3fe00000
 8009724:	408fffff 	.word	0x408fffff
 8009728:	4bd5      	ldr	r3, [pc, #852]	; (8009a80 <__ieee754_pow+0x758>)
 800972a:	402b      	ands	r3, r5
 800972c:	2200      	movs	r2, #0
 800972e:	b92b      	cbnz	r3, 800973c <__ieee754_pow+0x414>
 8009730:	4bd4      	ldr	r3, [pc, #848]	; (8009a84 <__ieee754_pow+0x75c>)
 8009732:	f7f6 ff69 	bl	8000608 <__aeabi_dmul>
 8009736:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800973a:	460c      	mov	r4, r1
 800973c:	1523      	asrs	r3, r4, #20
 800973e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009742:	4413      	add	r3, r2
 8009744:	9305      	str	r3, [sp, #20]
 8009746:	4bd0      	ldr	r3, [pc, #832]	; (8009a88 <__ieee754_pow+0x760>)
 8009748:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800974c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009750:	429c      	cmp	r4, r3
 8009752:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009756:	dd08      	ble.n	800976a <__ieee754_pow+0x442>
 8009758:	4bcc      	ldr	r3, [pc, #816]	; (8009a8c <__ieee754_pow+0x764>)
 800975a:	429c      	cmp	r4, r3
 800975c:	f340 8162 	ble.w	8009a24 <__ieee754_pow+0x6fc>
 8009760:	9b05      	ldr	r3, [sp, #20]
 8009762:	3301      	adds	r3, #1
 8009764:	9305      	str	r3, [sp, #20]
 8009766:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800976a:	2400      	movs	r4, #0
 800976c:	00e3      	lsls	r3, r4, #3
 800976e:	9307      	str	r3, [sp, #28]
 8009770:	4bc7      	ldr	r3, [pc, #796]	; (8009a90 <__ieee754_pow+0x768>)
 8009772:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009776:	ed93 7b00 	vldr	d7, [r3]
 800977a:	4629      	mov	r1, r5
 800977c:	ec53 2b17 	vmov	r2, r3, d7
 8009780:	eeb0 9a47 	vmov.f32	s18, s14
 8009784:	eef0 9a67 	vmov.f32	s19, s15
 8009788:	4682      	mov	sl, r0
 800978a:	f7f6 fd85 	bl	8000298 <__aeabi_dsub>
 800978e:	4652      	mov	r2, sl
 8009790:	4606      	mov	r6, r0
 8009792:	460f      	mov	r7, r1
 8009794:	462b      	mov	r3, r5
 8009796:	ec51 0b19 	vmov	r0, r1, d9
 800979a:	f7f6 fd7f 	bl	800029c <__adddf3>
 800979e:	4602      	mov	r2, r0
 80097a0:	460b      	mov	r3, r1
 80097a2:	2000      	movs	r0, #0
 80097a4:	49bb      	ldr	r1, [pc, #748]	; (8009a94 <__ieee754_pow+0x76c>)
 80097a6:	f7f7 f859 	bl	800085c <__aeabi_ddiv>
 80097aa:	ec41 0b1a 	vmov	d10, r0, r1
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	4630      	mov	r0, r6
 80097b4:	4639      	mov	r1, r7
 80097b6:	f7f6 ff27 	bl	8000608 <__aeabi_dmul>
 80097ba:	2300      	movs	r3, #0
 80097bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097c0:	9302      	str	r3, [sp, #8]
 80097c2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80097c6:	46ab      	mov	fp, r5
 80097c8:	106d      	asrs	r5, r5, #1
 80097ca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80097ce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80097d2:	ec41 0b18 	vmov	d8, r0, r1
 80097d6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80097da:	2200      	movs	r2, #0
 80097dc:	4640      	mov	r0, r8
 80097de:	4649      	mov	r1, r9
 80097e0:	4614      	mov	r4, r2
 80097e2:	461d      	mov	r5, r3
 80097e4:	f7f6 ff10 	bl	8000608 <__aeabi_dmul>
 80097e8:	4602      	mov	r2, r0
 80097ea:	460b      	mov	r3, r1
 80097ec:	4630      	mov	r0, r6
 80097ee:	4639      	mov	r1, r7
 80097f0:	f7f6 fd52 	bl	8000298 <__aeabi_dsub>
 80097f4:	ec53 2b19 	vmov	r2, r3, d9
 80097f8:	4606      	mov	r6, r0
 80097fa:	460f      	mov	r7, r1
 80097fc:	4620      	mov	r0, r4
 80097fe:	4629      	mov	r1, r5
 8009800:	f7f6 fd4a 	bl	8000298 <__aeabi_dsub>
 8009804:	4602      	mov	r2, r0
 8009806:	460b      	mov	r3, r1
 8009808:	4650      	mov	r0, sl
 800980a:	4659      	mov	r1, fp
 800980c:	f7f6 fd44 	bl	8000298 <__aeabi_dsub>
 8009810:	4642      	mov	r2, r8
 8009812:	464b      	mov	r3, r9
 8009814:	f7f6 fef8 	bl	8000608 <__aeabi_dmul>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	4630      	mov	r0, r6
 800981e:	4639      	mov	r1, r7
 8009820:	f7f6 fd3a 	bl	8000298 <__aeabi_dsub>
 8009824:	ec53 2b1a 	vmov	r2, r3, d10
 8009828:	f7f6 feee 	bl	8000608 <__aeabi_dmul>
 800982c:	ec53 2b18 	vmov	r2, r3, d8
 8009830:	ec41 0b19 	vmov	d9, r0, r1
 8009834:	ec51 0b18 	vmov	r0, r1, d8
 8009838:	f7f6 fee6 	bl	8000608 <__aeabi_dmul>
 800983c:	a37c      	add	r3, pc, #496	; (adr r3, 8009a30 <__ieee754_pow+0x708>)
 800983e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009842:	4604      	mov	r4, r0
 8009844:	460d      	mov	r5, r1
 8009846:	f7f6 fedf 	bl	8000608 <__aeabi_dmul>
 800984a:	a37b      	add	r3, pc, #492	; (adr r3, 8009a38 <__ieee754_pow+0x710>)
 800984c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009850:	f7f6 fd24 	bl	800029c <__adddf3>
 8009854:	4622      	mov	r2, r4
 8009856:	462b      	mov	r3, r5
 8009858:	f7f6 fed6 	bl	8000608 <__aeabi_dmul>
 800985c:	a378      	add	r3, pc, #480	; (adr r3, 8009a40 <__ieee754_pow+0x718>)
 800985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009862:	f7f6 fd1b 	bl	800029c <__adddf3>
 8009866:	4622      	mov	r2, r4
 8009868:	462b      	mov	r3, r5
 800986a:	f7f6 fecd 	bl	8000608 <__aeabi_dmul>
 800986e:	a376      	add	r3, pc, #472	; (adr r3, 8009a48 <__ieee754_pow+0x720>)
 8009870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009874:	f7f6 fd12 	bl	800029c <__adddf3>
 8009878:	4622      	mov	r2, r4
 800987a:	462b      	mov	r3, r5
 800987c:	f7f6 fec4 	bl	8000608 <__aeabi_dmul>
 8009880:	a373      	add	r3, pc, #460	; (adr r3, 8009a50 <__ieee754_pow+0x728>)
 8009882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009886:	f7f6 fd09 	bl	800029c <__adddf3>
 800988a:	4622      	mov	r2, r4
 800988c:	462b      	mov	r3, r5
 800988e:	f7f6 febb 	bl	8000608 <__aeabi_dmul>
 8009892:	a371      	add	r3, pc, #452	; (adr r3, 8009a58 <__ieee754_pow+0x730>)
 8009894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009898:	f7f6 fd00 	bl	800029c <__adddf3>
 800989c:	4622      	mov	r2, r4
 800989e:	4606      	mov	r6, r0
 80098a0:	460f      	mov	r7, r1
 80098a2:	462b      	mov	r3, r5
 80098a4:	4620      	mov	r0, r4
 80098a6:	4629      	mov	r1, r5
 80098a8:	f7f6 feae 	bl	8000608 <__aeabi_dmul>
 80098ac:	4602      	mov	r2, r0
 80098ae:	460b      	mov	r3, r1
 80098b0:	4630      	mov	r0, r6
 80098b2:	4639      	mov	r1, r7
 80098b4:	f7f6 fea8 	bl	8000608 <__aeabi_dmul>
 80098b8:	4642      	mov	r2, r8
 80098ba:	4604      	mov	r4, r0
 80098bc:	460d      	mov	r5, r1
 80098be:	464b      	mov	r3, r9
 80098c0:	ec51 0b18 	vmov	r0, r1, d8
 80098c4:	f7f6 fcea 	bl	800029c <__adddf3>
 80098c8:	ec53 2b19 	vmov	r2, r3, d9
 80098cc:	f7f6 fe9c 	bl	8000608 <__aeabi_dmul>
 80098d0:	4622      	mov	r2, r4
 80098d2:	462b      	mov	r3, r5
 80098d4:	f7f6 fce2 	bl	800029c <__adddf3>
 80098d8:	4642      	mov	r2, r8
 80098da:	4682      	mov	sl, r0
 80098dc:	468b      	mov	fp, r1
 80098de:	464b      	mov	r3, r9
 80098e0:	4640      	mov	r0, r8
 80098e2:	4649      	mov	r1, r9
 80098e4:	f7f6 fe90 	bl	8000608 <__aeabi_dmul>
 80098e8:	4b6b      	ldr	r3, [pc, #428]	; (8009a98 <__ieee754_pow+0x770>)
 80098ea:	2200      	movs	r2, #0
 80098ec:	4606      	mov	r6, r0
 80098ee:	460f      	mov	r7, r1
 80098f0:	f7f6 fcd4 	bl	800029c <__adddf3>
 80098f4:	4652      	mov	r2, sl
 80098f6:	465b      	mov	r3, fp
 80098f8:	f7f6 fcd0 	bl	800029c <__adddf3>
 80098fc:	2000      	movs	r0, #0
 80098fe:	4604      	mov	r4, r0
 8009900:	460d      	mov	r5, r1
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	4640      	mov	r0, r8
 8009908:	4649      	mov	r1, r9
 800990a:	f7f6 fe7d 	bl	8000608 <__aeabi_dmul>
 800990e:	4b62      	ldr	r3, [pc, #392]	; (8009a98 <__ieee754_pow+0x770>)
 8009910:	4680      	mov	r8, r0
 8009912:	4689      	mov	r9, r1
 8009914:	2200      	movs	r2, #0
 8009916:	4620      	mov	r0, r4
 8009918:	4629      	mov	r1, r5
 800991a:	f7f6 fcbd 	bl	8000298 <__aeabi_dsub>
 800991e:	4632      	mov	r2, r6
 8009920:	463b      	mov	r3, r7
 8009922:	f7f6 fcb9 	bl	8000298 <__aeabi_dsub>
 8009926:	4602      	mov	r2, r0
 8009928:	460b      	mov	r3, r1
 800992a:	4650      	mov	r0, sl
 800992c:	4659      	mov	r1, fp
 800992e:	f7f6 fcb3 	bl	8000298 <__aeabi_dsub>
 8009932:	ec53 2b18 	vmov	r2, r3, d8
 8009936:	f7f6 fe67 	bl	8000608 <__aeabi_dmul>
 800993a:	4622      	mov	r2, r4
 800993c:	4606      	mov	r6, r0
 800993e:	460f      	mov	r7, r1
 8009940:	462b      	mov	r3, r5
 8009942:	ec51 0b19 	vmov	r0, r1, d9
 8009946:	f7f6 fe5f 	bl	8000608 <__aeabi_dmul>
 800994a:	4602      	mov	r2, r0
 800994c:	460b      	mov	r3, r1
 800994e:	4630      	mov	r0, r6
 8009950:	4639      	mov	r1, r7
 8009952:	f7f6 fca3 	bl	800029c <__adddf3>
 8009956:	4606      	mov	r6, r0
 8009958:	460f      	mov	r7, r1
 800995a:	4602      	mov	r2, r0
 800995c:	460b      	mov	r3, r1
 800995e:	4640      	mov	r0, r8
 8009960:	4649      	mov	r1, r9
 8009962:	f7f6 fc9b 	bl	800029c <__adddf3>
 8009966:	a33e      	add	r3, pc, #248	; (adr r3, 8009a60 <__ieee754_pow+0x738>)
 8009968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996c:	2000      	movs	r0, #0
 800996e:	4604      	mov	r4, r0
 8009970:	460d      	mov	r5, r1
 8009972:	f7f6 fe49 	bl	8000608 <__aeabi_dmul>
 8009976:	4642      	mov	r2, r8
 8009978:	ec41 0b18 	vmov	d8, r0, r1
 800997c:	464b      	mov	r3, r9
 800997e:	4620      	mov	r0, r4
 8009980:	4629      	mov	r1, r5
 8009982:	f7f6 fc89 	bl	8000298 <__aeabi_dsub>
 8009986:	4602      	mov	r2, r0
 8009988:	460b      	mov	r3, r1
 800998a:	4630      	mov	r0, r6
 800998c:	4639      	mov	r1, r7
 800998e:	f7f6 fc83 	bl	8000298 <__aeabi_dsub>
 8009992:	a335      	add	r3, pc, #212	; (adr r3, 8009a68 <__ieee754_pow+0x740>)
 8009994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009998:	f7f6 fe36 	bl	8000608 <__aeabi_dmul>
 800999c:	a334      	add	r3, pc, #208	; (adr r3, 8009a70 <__ieee754_pow+0x748>)
 800999e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a2:	4606      	mov	r6, r0
 80099a4:	460f      	mov	r7, r1
 80099a6:	4620      	mov	r0, r4
 80099a8:	4629      	mov	r1, r5
 80099aa:	f7f6 fe2d 	bl	8000608 <__aeabi_dmul>
 80099ae:	4602      	mov	r2, r0
 80099b0:	460b      	mov	r3, r1
 80099b2:	4630      	mov	r0, r6
 80099b4:	4639      	mov	r1, r7
 80099b6:	f7f6 fc71 	bl	800029c <__adddf3>
 80099ba:	9a07      	ldr	r2, [sp, #28]
 80099bc:	4b37      	ldr	r3, [pc, #220]	; (8009a9c <__ieee754_pow+0x774>)
 80099be:	4413      	add	r3, r2
 80099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c4:	f7f6 fc6a 	bl	800029c <__adddf3>
 80099c8:	4682      	mov	sl, r0
 80099ca:	9805      	ldr	r0, [sp, #20]
 80099cc:	468b      	mov	fp, r1
 80099ce:	f7f6 fdb1 	bl	8000534 <__aeabi_i2d>
 80099d2:	9a07      	ldr	r2, [sp, #28]
 80099d4:	4b32      	ldr	r3, [pc, #200]	; (8009aa0 <__ieee754_pow+0x778>)
 80099d6:	4413      	add	r3, r2
 80099d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099dc:	4606      	mov	r6, r0
 80099de:	460f      	mov	r7, r1
 80099e0:	4652      	mov	r2, sl
 80099e2:	465b      	mov	r3, fp
 80099e4:	ec51 0b18 	vmov	r0, r1, d8
 80099e8:	f7f6 fc58 	bl	800029c <__adddf3>
 80099ec:	4642      	mov	r2, r8
 80099ee:	464b      	mov	r3, r9
 80099f0:	f7f6 fc54 	bl	800029c <__adddf3>
 80099f4:	4632      	mov	r2, r6
 80099f6:	463b      	mov	r3, r7
 80099f8:	f7f6 fc50 	bl	800029c <__adddf3>
 80099fc:	2000      	movs	r0, #0
 80099fe:	4632      	mov	r2, r6
 8009a00:	463b      	mov	r3, r7
 8009a02:	4604      	mov	r4, r0
 8009a04:	460d      	mov	r5, r1
 8009a06:	f7f6 fc47 	bl	8000298 <__aeabi_dsub>
 8009a0a:	4642      	mov	r2, r8
 8009a0c:	464b      	mov	r3, r9
 8009a0e:	f7f6 fc43 	bl	8000298 <__aeabi_dsub>
 8009a12:	ec53 2b18 	vmov	r2, r3, d8
 8009a16:	f7f6 fc3f 	bl	8000298 <__aeabi_dsub>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4650      	mov	r0, sl
 8009a20:	4659      	mov	r1, fp
 8009a22:	e610      	b.n	8009646 <__ieee754_pow+0x31e>
 8009a24:	2401      	movs	r4, #1
 8009a26:	e6a1      	b.n	800976c <__ieee754_pow+0x444>
 8009a28:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009a78 <__ieee754_pow+0x750>
 8009a2c:	e617      	b.n	800965e <__ieee754_pow+0x336>
 8009a2e:	bf00      	nop
 8009a30:	4a454eef 	.word	0x4a454eef
 8009a34:	3fca7e28 	.word	0x3fca7e28
 8009a38:	93c9db65 	.word	0x93c9db65
 8009a3c:	3fcd864a 	.word	0x3fcd864a
 8009a40:	a91d4101 	.word	0xa91d4101
 8009a44:	3fd17460 	.word	0x3fd17460
 8009a48:	518f264d 	.word	0x518f264d
 8009a4c:	3fd55555 	.word	0x3fd55555
 8009a50:	db6fabff 	.word	0xdb6fabff
 8009a54:	3fdb6db6 	.word	0x3fdb6db6
 8009a58:	33333303 	.word	0x33333303
 8009a5c:	3fe33333 	.word	0x3fe33333
 8009a60:	e0000000 	.word	0xe0000000
 8009a64:	3feec709 	.word	0x3feec709
 8009a68:	dc3a03fd 	.word	0xdc3a03fd
 8009a6c:	3feec709 	.word	0x3feec709
 8009a70:	145b01f5 	.word	0x145b01f5
 8009a74:	be3e2fe0 	.word	0xbe3e2fe0
 8009a78:	00000000 	.word	0x00000000
 8009a7c:	3ff00000 	.word	0x3ff00000
 8009a80:	7ff00000 	.word	0x7ff00000
 8009a84:	43400000 	.word	0x43400000
 8009a88:	0003988e 	.word	0x0003988e
 8009a8c:	000bb679 	.word	0x000bb679
 8009a90:	0800a990 	.word	0x0800a990
 8009a94:	3ff00000 	.word	0x3ff00000
 8009a98:	40080000 	.word	0x40080000
 8009a9c:	0800a9b0 	.word	0x0800a9b0
 8009aa0:	0800a9a0 	.word	0x0800a9a0
 8009aa4:	a3b3      	add	r3, pc, #716	; (adr r3, 8009d74 <__ieee754_pow+0xa4c>)
 8009aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aaa:	4640      	mov	r0, r8
 8009aac:	4649      	mov	r1, r9
 8009aae:	f7f6 fbf5 	bl	800029c <__adddf3>
 8009ab2:	4622      	mov	r2, r4
 8009ab4:	ec41 0b1a 	vmov	d10, r0, r1
 8009ab8:	462b      	mov	r3, r5
 8009aba:	4630      	mov	r0, r6
 8009abc:	4639      	mov	r1, r7
 8009abe:	f7f6 fbeb 	bl	8000298 <__aeabi_dsub>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	ec51 0b1a 	vmov	r0, r1, d10
 8009aca:	f7f7 f82d 	bl	8000b28 <__aeabi_dcmpgt>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	f47f ae04 	bne.w	80096dc <__ieee754_pow+0x3b4>
 8009ad4:	4aa2      	ldr	r2, [pc, #648]	; (8009d60 <__ieee754_pow+0xa38>)
 8009ad6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ada:	4293      	cmp	r3, r2
 8009adc:	f340 8107 	ble.w	8009cee <__ieee754_pow+0x9c6>
 8009ae0:	151b      	asrs	r3, r3, #20
 8009ae2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009ae6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009aea:	fa4a fa03 	asr.w	sl, sl, r3
 8009aee:	44da      	add	sl, fp
 8009af0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009af4:	489b      	ldr	r0, [pc, #620]	; (8009d64 <__ieee754_pow+0xa3c>)
 8009af6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009afa:	4108      	asrs	r0, r1
 8009afc:	ea00 030a 	and.w	r3, r0, sl
 8009b00:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009b04:	f1c1 0114 	rsb	r1, r1, #20
 8009b08:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009b0c:	fa4a fa01 	asr.w	sl, sl, r1
 8009b10:	f1bb 0f00 	cmp.w	fp, #0
 8009b14:	f04f 0200 	mov.w	r2, #0
 8009b18:	4620      	mov	r0, r4
 8009b1a:	4629      	mov	r1, r5
 8009b1c:	bfb8      	it	lt
 8009b1e:	f1ca 0a00 	rsblt	sl, sl, #0
 8009b22:	f7f6 fbb9 	bl	8000298 <__aeabi_dsub>
 8009b26:	ec41 0b19 	vmov	d9, r0, r1
 8009b2a:	4642      	mov	r2, r8
 8009b2c:	464b      	mov	r3, r9
 8009b2e:	ec51 0b19 	vmov	r0, r1, d9
 8009b32:	f7f6 fbb3 	bl	800029c <__adddf3>
 8009b36:	a37a      	add	r3, pc, #488	; (adr r3, 8009d20 <__ieee754_pow+0x9f8>)
 8009b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	4604      	mov	r4, r0
 8009b40:	460d      	mov	r5, r1
 8009b42:	f7f6 fd61 	bl	8000608 <__aeabi_dmul>
 8009b46:	ec53 2b19 	vmov	r2, r3, d9
 8009b4a:	4606      	mov	r6, r0
 8009b4c:	460f      	mov	r7, r1
 8009b4e:	4620      	mov	r0, r4
 8009b50:	4629      	mov	r1, r5
 8009b52:	f7f6 fba1 	bl	8000298 <__aeabi_dsub>
 8009b56:	4602      	mov	r2, r0
 8009b58:	460b      	mov	r3, r1
 8009b5a:	4640      	mov	r0, r8
 8009b5c:	4649      	mov	r1, r9
 8009b5e:	f7f6 fb9b 	bl	8000298 <__aeabi_dsub>
 8009b62:	a371      	add	r3, pc, #452	; (adr r3, 8009d28 <__ieee754_pow+0xa00>)
 8009b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b68:	f7f6 fd4e 	bl	8000608 <__aeabi_dmul>
 8009b6c:	a370      	add	r3, pc, #448	; (adr r3, 8009d30 <__ieee754_pow+0xa08>)
 8009b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b72:	4680      	mov	r8, r0
 8009b74:	4689      	mov	r9, r1
 8009b76:	4620      	mov	r0, r4
 8009b78:	4629      	mov	r1, r5
 8009b7a:	f7f6 fd45 	bl	8000608 <__aeabi_dmul>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	460b      	mov	r3, r1
 8009b82:	4640      	mov	r0, r8
 8009b84:	4649      	mov	r1, r9
 8009b86:	f7f6 fb89 	bl	800029c <__adddf3>
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	460d      	mov	r5, r1
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	4630      	mov	r0, r6
 8009b94:	4639      	mov	r1, r7
 8009b96:	f7f6 fb81 	bl	800029c <__adddf3>
 8009b9a:	4632      	mov	r2, r6
 8009b9c:	463b      	mov	r3, r7
 8009b9e:	4680      	mov	r8, r0
 8009ba0:	4689      	mov	r9, r1
 8009ba2:	f7f6 fb79 	bl	8000298 <__aeabi_dsub>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	460b      	mov	r3, r1
 8009baa:	4620      	mov	r0, r4
 8009bac:	4629      	mov	r1, r5
 8009bae:	f7f6 fb73 	bl	8000298 <__aeabi_dsub>
 8009bb2:	4642      	mov	r2, r8
 8009bb4:	4606      	mov	r6, r0
 8009bb6:	460f      	mov	r7, r1
 8009bb8:	464b      	mov	r3, r9
 8009bba:	4640      	mov	r0, r8
 8009bbc:	4649      	mov	r1, r9
 8009bbe:	f7f6 fd23 	bl	8000608 <__aeabi_dmul>
 8009bc2:	a35d      	add	r3, pc, #372	; (adr r3, 8009d38 <__ieee754_pow+0xa10>)
 8009bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc8:	4604      	mov	r4, r0
 8009bca:	460d      	mov	r5, r1
 8009bcc:	f7f6 fd1c 	bl	8000608 <__aeabi_dmul>
 8009bd0:	a35b      	add	r3, pc, #364	; (adr r3, 8009d40 <__ieee754_pow+0xa18>)
 8009bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd6:	f7f6 fb5f 	bl	8000298 <__aeabi_dsub>
 8009bda:	4622      	mov	r2, r4
 8009bdc:	462b      	mov	r3, r5
 8009bde:	f7f6 fd13 	bl	8000608 <__aeabi_dmul>
 8009be2:	a359      	add	r3, pc, #356	; (adr r3, 8009d48 <__ieee754_pow+0xa20>)
 8009be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be8:	f7f6 fb58 	bl	800029c <__adddf3>
 8009bec:	4622      	mov	r2, r4
 8009bee:	462b      	mov	r3, r5
 8009bf0:	f7f6 fd0a 	bl	8000608 <__aeabi_dmul>
 8009bf4:	a356      	add	r3, pc, #344	; (adr r3, 8009d50 <__ieee754_pow+0xa28>)
 8009bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfa:	f7f6 fb4d 	bl	8000298 <__aeabi_dsub>
 8009bfe:	4622      	mov	r2, r4
 8009c00:	462b      	mov	r3, r5
 8009c02:	f7f6 fd01 	bl	8000608 <__aeabi_dmul>
 8009c06:	a354      	add	r3, pc, #336	; (adr r3, 8009d58 <__ieee754_pow+0xa30>)
 8009c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0c:	f7f6 fb46 	bl	800029c <__adddf3>
 8009c10:	4622      	mov	r2, r4
 8009c12:	462b      	mov	r3, r5
 8009c14:	f7f6 fcf8 	bl	8000608 <__aeabi_dmul>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	4640      	mov	r0, r8
 8009c1e:	4649      	mov	r1, r9
 8009c20:	f7f6 fb3a 	bl	8000298 <__aeabi_dsub>
 8009c24:	4604      	mov	r4, r0
 8009c26:	460d      	mov	r5, r1
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	4640      	mov	r0, r8
 8009c2e:	4649      	mov	r1, r9
 8009c30:	f7f6 fcea 	bl	8000608 <__aeabi_dmul>
 8009c34:	2200      	movs	r2, #0
 8009c36:	ec41 0b19 	vmov	d9, r0, r1
 8009c3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c3e:	4620      	mov	r0, r4
 8009c40:	4629      	mov	r1, r5
 8009c42:	f7f6 fb29 	bl	8000298 <__aeabi_dsub>
 8009c46:	4602      	mov	r2, r0
 8009c48:	460b      	mov	r3, r1
 8009c4a:	ec51 0b19 	vmov	r0, r1, d9
 8009c4e:	f7f6 fe05 	bl	800085c <__aeabi_ddiv>
 8009c52:	4632      	mov	r2, r6
 8009c54:	4604      	mov	r4, r0
 8009c56:	460d      	mov	r5, r1
 8009c58:	463b      	mov	r3, r7
 8009c5a:	4640      	mov	r0, r8
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	f7f6 fcd3 	bl	8000608 <__aeabi_dmul>
 8009c62:	4632      	mov	r2, r6
 8009c64:	463b      	mov	r3, r7
 8009c66:	f7f6 fb19 	bl	800029c <__adddf3>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	4620      	mov	r0, r4
 8009c70:	4629      	mov	r1, r5
 8009c72:	f7f6 fb11 	bl	8000298 <__aeabi_dsub>
 8009c76:	4642      	mov	r2, r8
 8009c78:	464b      	mov	r3, r9
 8009c7a:	f7f6 fb0d 	bl	8000298 <__aeabi_dsub>
 8009c7e:	460b      	mov	r3, r1
 8009c80:	4602      	mov	r2, r0
 8009c82:	4939      	ldr	r1, [pc, #228]	; (8009d68 <__ieee754_pow+0xa40>)
 8009c84:	2000      	movs	r0, #0
 8009c86:	f7f6 fb07 	bl	8000298 <__aeabi_dsub>
 8009c8a:	ec41 0b10 	vmov	d0, r0, r1
 8009c8e:	ee10 3a90 	vmov	r3, s1
 8009c92:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c9a:	da2b      	bge.n	8009cf4 <__ieee754_pow+0x9cc>
 8009c9c:	4650      	mov	r0, sl
 8009c9e:	f000 fa1b 	bl	800a0d8 <scalbn>
 8009ca2:	ec51 0b10 	vmov	r0, r1, d0
 8009ca6:	ec53 2b18 	vmov	r2, r3, d8
 8009caa:	f7ff bbee 	b.w	800948a <__ieee754_pow+0x162>
 8009cae:	4b2f      	ldr	r3, [pc, #188]	; (8009d6c <__ieee754_pow+0xa44>)
 8009cb0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009cb4:	429e      	cmp	r6, r3
 8009cb6:	f77f af0d 	ble.w	8009ad4 <__ieee754_pow+0x7ac>
 8009cba:	4b2d      	ldr	r3, [pc, #180]	; (8009d70 <__ieee754_pow+0xa48>)
 8009cbc:	440b      	add	r3, r1
 8009cbe:	4303      	orrs	r3, r0
 8009cc0:	d009      	beq.n	8009cd6 <__ieee754_pow+0x9ae>
 8009cc2:	ec51 0b18 	vmov	r0, r1, d8
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f7f6 ff0f 	bl	8000aec <__aeabi_dcmplt>
 8009cce:	3800      	subs	r0, #0
 8009cd0:	bf18      	it	ne
 8009cd2:	2001      	movne	r0, #1
 8009cd4:	e448      	b.n	8009568 <__ieee754_pow+0x240>
 8009cd6:	4622      	mov	r2, r4
 8009cd8:	462b      	mov	r3, r5
 8009cda:	f7f6 fadd 	bl	8000298 <__aeabi_dsub>
 8009cde:	4642      	mov	r2, r8
 8009ce0:	464b      	mov	r3, r9
 8009ce2:	f7f6 ff17 	bl	8000b14 <__aeabi_dcmpge>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	f43f aef4 	beq.w	8009ad4 <__ieee754_pow+0x7ac>
 8009cec:	e7e9      	b.n	8009cc2 <__ieee754_pow+0x99a>
 8009cee:	f04f 0a00 	mov.w	sl, #0
 8009cf2:	e71a      	b.n	8009b2a <__ieee754_pow+0x802>
 8009cf4:	ec51 0b10 	vmov	r0, r1, d0
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	e7d4      	b.n	8009ca6 <__ieee754_pow+0x97e>
 8009cfc:	491a      	ldr	r1, [pc, #104]	; (8009d68 <__ieee754_pow+0xa40>)
 8009cfe:	2000      	movs	r0, #0
 8009d00:	f7ff bb31 	b.w	8009366 <__ieee754_pow+0x3e>
 8009d04:	2000      	movs	r0, #0
 8009d06:	2100      	movs	r1, #0
 8009d08:	f7ff bb2d 	b.w	8009366 <__ieee754_pow+0x3e>
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	4639      	mov	r1, r7
 8009d10:	f7ff bb29 	b.w	8009366 <__ieee754_pow+0x3e>
 8009d14:	9204      	str	r2, [sp, #16]
 8009d16:	f7ff bb7b 	b.w	8009410 <__ieee754_pow+0xe8>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f7ff bb65 	b.w	80093ea <__ieee754_pow+0xc2>
 8009d20:	00000000 	.word	0x00000000
 8009d24:	3fe62e43 	.word	0x3fe62e43
 8009d28:	fefa39ef 	.word	0xfefa39ef
 8009d2c:	3fe62e42 	.word	0x3fe62e42
 8009d30:	0ca86c39 	.word	0x0ca86c39
 8009d34:	be205c61 	.word	0xbe205c61
 8009d38:	72bea4d0 	.word	0x72bea4d0
 8009d3c:	3e663769 	.word	0x3e663769
 8009d40:	c5d26bf1 	.word	0xc5d26bf1
 8009d44:	3ebbbd41 	.word	0x3ebbbd41
 8009d48:	af25de2c 	.word	0xaf25de2c
 8009d4c:	3f11566a 	.word	0x3f11566a
 8009d50:	16bebd93 	.word	0x16bebd93
 8009d54:	3f66c16c 	.word	0x3f66c16c
 8009d58:	5555553e 	.word	0x5555553e
 8009d5c:	3fc55555 	.word	0x3fc55555
 8009d60:	3fe00000 	.word	0x3fe00000
 8009d64:	fff00000 	.word	0xfff00000
 8009d68:	3ff00000 	.word	0x3ff00000
 8009d6c:	4090cbff 	.word	0x4090cbff
 8009d70:	3f6f3400 	.word	0x3f6f3400
 8009d74:	652b82fe 	.word	0x652b82fe
 8009d78:	3c971547 	.word	0x3c971547
 8009d7c:	00000000 	.word	0x00000000

08009d80 <atan>:
 8009d80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d84:	ec55 4b10 	vmov	r4, r5, d0
 8009d88:	4bc3      	ldr	r3, [pc, #780]	; (800a098 <atan+0x318>)
 8009d8a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009d8e:	429e      	cmp	r6, r3
 8009d90:	46ab      	mov	fp, r5
 8009d92:	dd18      	ble.n	8009dc6 <atan+0x46>
 8009d94:	4bc1      	ldr	r3, [pc, #772]	; (800a09c <atan+0x31c>)
 8009d96:	429e      	cmp	r6, r3
 8009d98:	dc01      	bgt.n	8009d9e <atan+0x1e>
 8009d9a:	d109      	bne.n	8009db0 <atan+0x30>
 8009d9c:	b144      	cbz	r4, 8009db0 <atan+0x30>
 8009d9e:	4622      	mov	r2, r4
 8009da0:	462b      	mov	r3, r5
 8009da2:	4620      	mov	r0, r4
 8009da4:	4629      	mov	r1, r5
 8009da6:	f7f6 fa79 	bl	800029c <__adddf3>
 8009daa:	4604      	mov	r4, r0
 8009dac:	460d      	mov	r5, r1
 8009dae:	e006      	b.n	8009dbe <atan+0x3e>
 8009db0:	f1bb 0f00 	cmp.w	fp, #0
 8009db4:	f300 8131 	bgt.w	800a01a <atan+0x29a>
 8009db8:	a59b      	add	r5, pc, #620	; (adr r5, 800a028 <atan+0x2a8>)
 8009dba:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009dbe:	ec45 4b10 	vmov	d0, r4, r5
 8009dc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc6:	4bb6      	ldr	r3, [pc, #728]	; (800a0a0 <atan+0x320>)
 8009dc8:	429e      	cmp	r6, r3
 8009dca:	dc14      	bgt.n	8009df6 <atan+0x76>
 8009dcc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009dd0:	429e      	cmp	r6, r3
 8009dd2:	dc0d      	bgt.n	8009df0 <atan+0x70>
 8009dd4:	a396      	add	r3, pc, #600	; (adr r3, 800a030 <atan+0x2b0>)
 8009dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dda:	ee10 0a10 	vmov	r0, s0
 8009dde:	4629      	mov	r1, r5
 8009de0:	f7f6 fa5c 	bl	800029c <__adddf3>
 8009de4:	4baf      	ldr	r3, [pc, #700]	; (800a0a4 <atan+0x324>)
 8009de6:	2200      	movs	r2, #0
 8009de8:	f7f6 fe9e 	bl	8000b28 <__aeabi_dcmpgt>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	d1e6      	bne.n	8009dbe <atan+0x3e>
 8009df0:	f04f 3aff 	mov.w	sl, #4294967295
 8009df4:	e02b      	b.n	8009e4e <atan+0xce>
 8009df6:	f000 f963 	bl	800a0c0 <fabs>
 8009dfa:	4bab      	ldr	r3, [pc, #684]	; (800a0a8 <atan+0x328>)
 8009dfc:	429e      	cmp	r6, r3
 8009dfe:	ec55 4b10 	vmov	r4, r5, d0
 8009e02:	f300 80bf 	bgt.w	8009f84 <atan+0x204>
 8009e06:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009e0a:	429e      	cmp	r6, r3
 8009e0c:	f300 80a0 	bgt.w	8009f50 <atan+0x1d0>
 8009e10:	ee10 2a10 	vmov	r2, s0
 8009e14:	ee10 0a10 	vmov	r0, s0
 8009e18:	462b      	mov	r3, r5
 8009e1a:	4629      	mov	r1, r5
 8009e1c:	f7f6 fa3e 	bl	800029c <__adddf3>
 8009e20:	4ba0      	ldr	r3, [pc, #640]	; (800a0a4 <atan+0x324>)
 8009e22:	2200      	movs	r2, #0
 8009e24:	f7f6 fa38 	bl	8000298 <__aeabi_dsub>
 8009e28:	2200      	movs	r2, #0
 8009e2a:	4606      	mov	r6, r0
 8009e2c:	460f      	mov	r7, r1
 8009e2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e32:	4620      	mov	r0, r4
 8009e34:	4629      	mov	r1, r5
 8009e36:	f7f6 fa31 	bl	800029c <__adddf3>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	4630      	mov	r0, r6
 8009e40:	4639      	mov	r1, r7
 8009e42:	f7f6 fd0b 	bl	800085c <__aeabi_ddiv>
 8009e46:	f04f 0a00 	mov.w	sl, #0
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	460d      	mov	r5, r1
 8009e4e:	4622      	mov	r2, r4
 8009e50:	462b      	mov	r3, r5
 8009e52:	4620      	mov	r0, r4
 8009e54:	4629      	mov	r1, r5
 8009e56:	f7f6 fbd7 	bl	8000608 <__aeabi_dmul>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4680      	mov	r8, r0
 8009e60:	4689      	mov	r9, r1
 8009e62:	f7f6 fbd1 	bl	8000608 <__aeabi_dmul>
 8009e66:	a374      	add	r3, pc, #464	; (adr r3, 800a038 <atan+0x2b8>)
 8009e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6c:	4606      	mov	r6, r0
 8009e6e:	460f      	mov	r7, r1
 8009e70:	f7f6 fbca 	bl	8000608 <__aeabi_dmul>
 8009e74:	a372      	add	r3, pc, #456	; (adr r3, 800a040 <atan+0x2c0>)
 8009e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7a:	f7f6 fa0f 	bl	800029c <__adddf3>
 8009e7e:	4632      	mov	r2, r6
 8009e80:	463b      	mov	r3, r7
 8009e82:	f7f6 fbc1 	bl	8000608 <__aeabi_dmul>
 8009e86:	a370      	add	r3, pc, #448	; (adr r3, 800a048 <atan+0x2c8>)
 8009e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8c:	f7f6 fa06 	bl	800029c <__adddf3>
 8009e90:	4632      	mov	r2, r6
 8009e92:	463b      	mov	r3, r7
 8009e94:	f7f6 fbb8 	bl	8000608 <__aeabi_dmul>
 8009e98:	a36d      	add	r3, pc, #436	; (adr r3, 800a050 <atan+0x2d0>)
 8009e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9e:	f7f6 f9fd 	bl	800029c <__adddf3>
 8009ea2:	4632      	mov	r2, r6
 8009ea4:	463b      	mov	r3, r7
 8009ea6:	f7f6 fbaf 	bl	8000608 <__aeabi_dmul>
 8009eaa:	a36b      	add	r3, pc, #428	; (adr r3, 800a058 <atan+0x2d8>)
 8009eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb0:	f7f6 f9f4 	bl	800029c <__adddf3>
 8009eb4:	4632      	mov	r2, r6
 8009eb6:	463b      	mov	r3, r7
 8009eb8:	f7f6 fba6 	bl	8000608 <__aeabi_dmul>
 8009ebc:	a368      	add	r3, pc, #416	; (adr r3, 800a060 <atan+0x2e0>)
 8009ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec2:	f7f6 f9eb 	bl	800029c <__adddf3>
 8009ec6:	4642      	mov	r2, r8
 8009ec8:	464b      	mov	r3, r9
 8009eca:	f7f6 fb9d 	bl	8000608 <__aeabi_dmul>
 8009ece:	a366      	add	r3, pc, #408	; (adr r3, 800a068 <atan+0x2e8>)
 8009ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed4:	4680      	mov	r8, r0
 8009ed6:	4689      	mov	r9, r1
 8009ed8:	4630      	mov	r0, r6
 8009eda:	4639      	mov	r1, r7
 8009edc:	f7f6 fb94 	bl	8000608 <__aeabi_dmul>
 8009ee0:	a363      	add	r3, pc, #396	; (adr r3, 800a070 <atan+0x2f0>)
 8009ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee6:	f7f6 f9d7 	bl	8000298 <__aeabi_dsub>
 8009eea:	4632      	mov	r2, r6
 8009eec:	463b      	mov	r3, r7
 8009eee:	f7f6 fb8b 	bl	8000608 <__aeabi_dmul>
 8009ef2:	a361      	add	r3, pc, #388	; (adr r3, 800a078 <atan+0x2f8>)
 8009ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef8:	f7f6 f9ce 	bl	8000298 <__aeabi_dsub>
 8009efc:	4632      	mov	r2, r6
 8009efe:	463b      	mov	r3, r7
 8009f00:	f7f6 fb82 	bl	8000608 <__aeabi_dmul>
 8009f04:	a35e      	add	r3, pc, #376	; (adr r3, 800a080 <atan+0x300>)
 8009f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0a:	f7f6 f9c5 	bl	8000298 <__aeabi_dsub>
 8009f0e:	4632      	mov	r2, r6
 8009f10:	463b      	mov	r3, r7
 8009f12:	f7f6 fb79 	bl	8000608 <__aeabi_dmul>
 8009f16:	a35c      	add	r3, pc, #368	; (adr r3, 800a088 <atan+0x308>)
 8009f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1c:	f7f6 f9bc 	bl	8000298 <__aeabi_dsub>
 8009f20:	4632      	mov	r2, r6
 8009f22:	463b      	mov	r3, r7
 8009f24:	f7f6 fb70 	bl	8000608 <__aeabi_dmul>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	4640      	mov	r0, r8
 8009f2e:	4649      	mov	r1, r9
 8009f30:	f7f6 f9b4 	bl	800029c <__adddf3>
 8009f34:	4622      	mov	r2, r4
 8009f36:	462b      	mov	r3, r5
 8009f38:	f7f6 fb66 	bl	8000608 <__aeabi_dmul>
 8009f3c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009f40:	4602      	mov	r2, r0
 8009f42:	460b      	mov	r3, r1
 8009f44:	d14b      	bne.n	8009fde <atan+0x25e>
 8009f46:	4620      	mov	r0, r4
 8009f48:	4629      	mov	r1, r5
 8009f4a:	f7f6 f9a5 	bl	8000298 <__aeabi_dsub>
 8009f4e:	e72c      	b.n	8009daa <atan+0x2a>
 8009f50:	ee10 0a10 	vmov	r0, s0
 8009f54:	4b53      	ldr	r3, [pc, #332]	; (800a0a4 <atan+0x324>)
 8009f56:	2200      	movs	r2, #0
 8009f58:	4629      	mov	r1, r5
 8009f5a:	f7f6 f99d 	bl	8000298 <__aeabi_dsub>
 8009f5e:	4b51      	ldr	r3, [pc, #324]	; (800a0a4 <atan+0x324>)
 8009f60:	4606      	mov	r6, r0
 8009f62:	460f      	mov	r7, r1
 8009f64:	2200      	movs	r2, #0
 8009f66:	4620      	mov	r0, r4
 8009f68:	4629      	mov	r1, r5
 8009f6a:	f7f6 f997 	bl	800029c <__adddf3>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	460b      	mov	r3, r1
 8009f72:	4630      	mov	r0, r6
 8009f74:	4639      	mov	r1, r7
 8009f76:	f7f6 fc71 	bl	800085c <__aeabi_ddiv>
 8009f7a:	f04f 0a01 	mov.w	sl, #1
 8009f7e:	4604      	mov	r4, r0
 8009f80:	460d      	mov	r5, r1
 8009f82:	e764      	b.n	8009e4e <atan+0xce>
 8009f84:	4b49      	ldr	r3, [pc, #292]	; (800a0ac <atan+0x32c>)
 8009f86:	429e      	cmp	r6, r3
 8009f88:	da1d      	bge.n	8009fc6 <atan+0x246>
 8009f8a:	ee10 0a10 	vmov	r0, s0
 8009f8e:	4b48      	ldr	r3, [pc, #288]	; (800a0b0 <atan+0x330>)
 8009f90:	2200      	movs	r2, #0
 8009f92:	4629      	mov	r1, r5
 8009f94:	f7f6 f980 	bl	8000298 <__aeabi_dsub>
 8009f98:	4b45      	ldr	r3, [pc, #276]	; (800a0b0 <atan+0x330>)
 8009f9a:	4606      	mov	r6, r0
 8009f9c:	460f      	mov	r7, r1
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	4629      	mov	r1, r5
 8009fa4:	f7f6 fb30 	bl	8000608 <__aeabi_dmul>
 8009fa8:	4b3e      	ldr	r3, [pc, #248]	; (800a0a4 <atan+0x324>)
 8009faa:	2200      	movs	r2, #0
 8009fac:	f7f6 f976 	bl	800029c <__adddf3>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	4639      	mov	r1, r7
 8009fb8:	f7f6 fc50 	bl	800085c <__aeabi_ddiv>
 8009fbc:	f04f 0a02 	mov.w	sl, #2
 8009fc0:	4604      	mov	r4, r0
 8009fc2:	460d      	mov	r5, r1
 8009fc4:	e743      	b.n	8009e4e <atan+0xce>
 8009fc6:	462b      	mov	r3, r5
 8009fc8:	ee10 2a10 	vmov	r2, s0
 8009fcc:	4939      	ldr	r1, [pc, #228]	; (800a0b4 <atan+0x334>)
 8009fce:	2000      	movs	r0, #0
 8009fd0:	f7f6 fc44 	bl	800085c <__aeabi_ddiv>
 8009fd4:	f04f 0a03 	mov.w	sl, #3
 8009fd8:	4604      	mov	r4, r0
 8009fda:	460d      	mov	r5, r1
 8009fdc:	e737      	b.n	8009e4e <atan+0xce>
 8009fde:	4b36      	ldr	r3, [pc, #216]	; (800a0b8 <atan+0x338>)
 8009fe0:	4e36      	ldr	r6, [pc, #216]	; (800a0bc <atan+0x33c>)
 8009fe2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fea:	f7f6 f955 	bl	8000298 <__aeabi_dsub>
 8009fee:	4622      	mov	r2, r4
 8009ff0:	462b      	mov	r3, r5
 8009ff2:	f7f6 f951 	bl	8000298 <__aeabi_dsub>
 8009ff6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a002:	f7f6 f949 	bl	8000298 <__aeabi_dsub>
 800a006:	f1bb 0f00 	cmp.w	fp, #0
 800a00a:	4604      	mov	r4, r0
 800a00c:	460d      	mov	r5, r1
 800a00e:	f6bf aed6 	bge.w	8009dbe <atan+0x3e>
 800a012:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a016:	461d      	mov	r5, r3
 800a018:	e6d1      	b.n	8009dbe <atan+0x3e>
 800a01a:	a51d      	add	r5, pc, #116	; (adr r5, 800a090 <atan+0x310>)
 800a01c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a020:	e6cd      	b.n	8009dbe <atan+0x3e>
 800a022:	bf00      	nop
 800a024:	f3af 8000 	nop.w
 800a028:	54442d18 	.word	0x54442d18
 800a02c:	bff921fb 	.word	0xbff921fb
 800a030:	8800759c 	.word	0x8800759c
 800a034:	7e37e43c 	.word	0x7e37e43c
 800a038:	e322da11 	.word	0xe322da11
 800a03c:	3f90ad3a 	.word	0x3f90ad3a
 800a040:	24760deb 	.word	0x24760deb
 800a044:	3fa97b4b 	.word	0x3fa97b4b
 800a048:	a0d03d51 	.word	0xa0d03d51
 800a04c:	3fb10d66 	.word	0x3fb10d66
 800a050:	c54c206e 	.word	0xc54c206e
 800a054:	3fb745cd 	.word	0x3fb745cd
 800a058:	920083ff 	.word	0x920083ff
 800a05c:	3fc24924 	.word	0x3fc24924
 800a060:	5555550d 	.word	0x5555550d
 800a064:	3fd55555 	.word	0x3fd55555
 800a068:	2c6a6c2f 	.word	0x2c6a6c2f
 800a06c:	bfa2b444 	.word	0xbfa2b444
 800a070:	52defd9a 	.word	0x52defd9a
 800a074:	3fadde2d 	.word	0x3fadde2d
 800a078:	af749a6d 	.word	0xaf749a6d
 800a07c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a080:	fe231671 	.word	0xfe231671
 800a084:	3fbc71c6 	.word	0x3fbc71c6
 800a088:	9998ebc4 	.word	0x9998ebc4
 800a08c:	3fc99999 	.word	0x3fc99999
 800a090:	54442d18 	.word	0x54442d18
 800a094:	3ff921fb 	.word	0x3ff921fb
 800a098:	440fffff 	.word	0x440fffff
 800a09c:	7ff00000 	.word	0x7ff00000
 800a0a0:	3fdbffff 	.word	0x3fdbffff
 800a0a4:	3ff00000 	.word	0x3ff00000
 800a0a8:	3ff2ffff 	.word	0x3ff2ffff
 800a0ac:	40038000 	.word	0x40038000
 800a0b0:	3ff80000 	.word	0x3ff80000
 800a0b4:	bff00000 	.word	0xbff00000
 800a0b8:	0800a9e0 	.word	0x0800a9e0
 800a0bc:	0800a9c0 	.word	0x0800a9c0

0800a0c0 <fabs>:
 800a0c0:	ec51 0b10 	vmov	r0, r1, d0
 800a0c4:	ee10 2a10 	vmov	r2, s0
 800a0c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a0cc:	ec43 2b10 	vmov	d0, r2, r3
 800a0d0:	4770      	bx	lr
 800a0d2:	0000      	movs	r0, r0
 800a0d4:	0000      	movs	r0, r0
	...

0800a0d8 <scalbn>:
 800a0d8:	b570      	push	{r4, r5, r6, lr}
 800a0da:	ec55 4b10 	vmov	r4, r5, d0
 800a0de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a0e2:	4606      	mov	r6, r0
 800a0e4:	462b      	mov	r3, r5
 800a0e6:	b999      	cbnz	r1, 800a110 <scalbn+0x38>
 800a0e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a0ec:	4323      	orrs	r3, r4
 800a0ee:	d03f      	beq.n	800a170 <scalbn+0x98>
 800a0f0:	4b35      	ldr	r3, [pc, #212]	; (800a1c8 <scalbn+0xf0>)
 800a0f2:	4629      	mov	r1, r5
 800a0f4:	ee10 0a10 	vmov	r0, s0
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f7f6 fa85 	bl	8000608 <__aeabi_dmul>
 800a0fe:	4b33      	ldr	r3, [pc, #204]	; (800a1cc <scalbn+0xf4>)
 800a100:	429e      	cmp	r6, r3
 800a102:	4604      	mov	r4, r0
 800a104:	460d      	mov	r5, r1
 800a106:	da10      	bge.n	800a12a <scalbn+0x52>
 800a108:	a327      	add	r3, pc, #156	; (adr r3, 800a1a8 <scalbn+0xd0>)
 800a10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10e:	e01f      	b.n	800a150 <scalbn+0x78>
 800a110:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a114:	4291      	cmp	r1, r2
 800a116:	d10c      	bne.n	800a132 <scalbn+0x5a>
 800a118:	ee10 2a10 	vmov	r2, s0
 800a11c:	4620      	mov	r0, r4
 800a11e:	4629      	mov	r1, r5
 800a120:	f7f6 f8bc 	bl	800029c <__adddf3>
 800a124:	4604      	mov	r4, r0
 800a126:	460d      	mov	r5, r1
 800a128:	e022      	b.n	800a170 <scalbn+0x98>
 800a12a:	460b      	mov	r3, r1
 800a12c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a130:	3936      	subs	r1, #54	; 0x36
 800a132:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a136:	4296      	cmp	r6, r2
 800a138:	dd0d      	ble.n	800a156 <scalbn+0x7e>
 800a13a:	2d00      	cmp	r5, #0
 800a13c:	a11c      	add	r1, pc, #112	; (adr r1, 800a1b0 <scalbn+0xd8>)
 800a13e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a142:	da02      	bge.n	800a14a <scalbn+0x72>
 800a144:	a11c      	add	r1, pc, #112	; (adr r1, 800a1b8 <scalbn+0xe0>)
 800a146:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a14a:	a319      	add	r3, pc, #100	; (adr r3, 800a1b0 <scalbn+0xd8>)
 800a14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a150:	f7f6 fa5a 	bl	8000608 <__aeabi_dmul>
 800a154:	e7e6      	b.n	800a124 <scalbn+0x4c>
 800a156:	1872      	adds	r2, r6, r1
 800a158:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a15c:	428a      	cmp	r2, r1
 800a15e:	dcec      	bgt.n	800a13a <scalbn+0x62>
 800a160:	2a00      	cmp	r2, #0
 800a162:	dd08      	ble.n	800a176 <scalbn+0x9e>
 800a164:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a168:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a16c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a170:	ec45 4b10 	vmov	d0, r4, r5
 800a174:	bd70      	pop	{r4, r5, r6, pc}
 800a176:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a17a:	da08      	bge.n	800a18e <scalbn+0xb6>
 800a17c:	2d00      	cmp	r5, #0
 800a17e:	a10a      	add	r1, pc, #40	; (adr r1, 800a1a8 <scalbn+0xd0>)
 800a180:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a184:	dac0      	bge.n	800a108 <scalbn+0x30>
 800a186:	a10e      	add	r1, pc, #56	; (adr r1, 800a1c0 <scalbn+0xe8>)
 800a188:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a18c:	e7bc      	b.n	800a108 <scalbn+0x30>
 800a18e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a192:	3236      	adds	r2, #54	; 0x36
 800a194:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a198:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a19c:	4620      	mov	r0, r4
 800a19e:	4b0c      	ldr	r3, [pc, #48]	; (800a1d0 <scalbn+0xf8>)
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	e7d5      	b.n	800a150 <scalbn+0x78>
 800a1a4:	f3af 8000 	nop.w
 800a1a8:	c2f8f359 	.word	0xc2f8f359
 800a1ac:	01a56e1f 	.word	0x01a56e1f
 800a1b0:	8800759c 	.word	0x8800759c
 800a1b4:	7e37e43c 	.word	0x7e37e43c
 800a1b8:	8800759c 	.word	0x8800759c
 800a1bc:	fe37e43c 	.word	0xfe37e43c
 800a1c0:	c2f8f359 	.word	0xc2f8f359
 800a1c4:	81a56e1f 	.word	0x81a56e1f
 800a1c8:	43500000 	.word	0x43500000
 800a1cc:	ffff3cb0 	.word	0xffff3cb0
 800a1d0:	3c900000 	.word	0x3c900000

0800a1d4 <with_errno>:
 800a1d4:	b570      	push	{r4, r5, r6, lr}
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	460d      	mov	r5, r1
 800a1da:	4616      	mov	r6, r2
 800a1dc:	f7fc ff76 	bl	80070cc <__errno>
 800a1e0:	4629      	mov	r1, r5
 800a1e2:	6006      	str	r6, [r0, #0]
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	bd70      	pop	{r4, r5, r6, pc}

0800a1e8 <xflow>:
 800a1e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1ea:	4614      	mov	r4, r2
 800a1ec:	461d      	mov	r5, r3
 800a1ee:	b108      	cbz	r0, 800a1f4 <xflow+0xc>
 800a1f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a1f4:	e9cd 2300 	strd	r2, r3, [sp]
 800a1f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	4629      	mov	r1, r5
 800a200:	f7f6 fa02 	bl	8000608 <__aeabi_dmul>
 800a204:	2222      	movs	r2, #34	; 0x22
 800a206:	b003      	add	sp, #12
 800a208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a20c:	f7ff bfe2 	b.w	800a1d4 <with_errno>

0800a210 <__math_uflow>:
 800a210:	b508      	push	{r3, lr}
 800a212:	2200      	movs	r2, #0
 800a214:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a218:	f7ff ffe6 	bl	800a1e8 <xflow>
 800a21c:	ec41 0b10 	vmov	d0, r0, r1
 800a220:	bd08      	pop	{r3, pc}

0800a222 <__math_oflow>:
 800a222:	b508      	push	{r3, lr}
 800a224:	2200      	movs	r2, #0
 800a226:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a22a:	f7ff ffdd 	bl	800a1e8 <xflow>
 800a22e:	ec41 0b10 	vmov	d0, r0, r1
 800a232:	bd08      	pop	{r3, pc}

0800a234 <__ieee754_sqrt>:
 800a234:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a238:	ec55 4b10 	vmov	r4, r5, d0
 800a23c:	4e67      	ldr	r6, [pc, #412]	; (800a3dc <__ieee754_sqrt+0x1a8>)
 800a23e:	43ae      	bics	r6, r5
 800a240:	ee10 0a10 	vmov	r0, s0
 800a244:	ee10 2a10 	vmov	r2, s0
 800a248:	4629      	mov	r1, r5
 800a24a:	462b      	mov	r3, r5
 800a24c:	d10d      	bne.n	800a26a <__ieee754_sqrt+0x36>
 800a24e:	f7f6 f9db 	bl	8000608 <__aeabi_dmul>
 800a252:	4602      	mov	r2, r0
 800a254:	460b      	mov	r3, r1
 800a256:	4620      	mov	r0, r4
 800a258:	4629      	mov	r1, r5
 800a25a:	f7f6 f81f 	bl	800029c <__adddf3>
 800a25e:	4604      	mov	r4, r0
 800a260:	460d      	mov	r5, r1
 800a262:	ec45 4b10 	vmov	d0, r4, r5
 800a266:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26a:	2d00      	cmp	r5, #0
 800a26c:	dc0b      	bgt.n	800a286 <__ieee754_sqrt+0x52>
 800a26e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a272:	4326      	orrs	r6, r4
 800a274:	d0f5      	beq.n	800a262 <__ieee754_sqrt+0x2e>
 800a276:	b135      	cbz	r5, 800a286 <__ieee754_sqrt+0x52>
 800a278:	f7f6 f80e 	bl	8000298 <__aeabi_dsub>
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	f7f6 faec 	bl	800085c <__aeabi_ddiv>
 800a284:	e7eb      	b.n	800a25e <__ieee754_sqrt+0x2a>
 800a286:	1509      	asrs	r1, r1, #20
 800a288:	f000 808d 	beq.w	800a3a6 <__ieee754_sqrt+0x172>
 800a28c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a290:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800a294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a298:	07c9      	lsls	r1, r1, #31
 800a29a:	bf5c      	itt	pl
 800a29c:	005b      	lslpl	r3, r3, #1
 800a29e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800a2a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a2a6:	bf58      	it	pl
 800a2a8:	0052      	lslpl	r2, r2, #1
 800a2aa:	2500      	movs	r5, #0
 800a2ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a2b0:	1076      	asrs	r6, r6, #1
 800a2b2:	0052      	lsls	r2, r2, #1
 800a2b4:	f04f 0e16 	mov.w	lr, #22
 800a2b8:	46ac      	mov	ip, r5
 800a2ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a2be:	eb0c 0001 	add.w	r0, ip, r1
 800a2c2:	4298      	cmp	r0, r3
 800a2c4:	bfde      	ittt	le
 800a2c6:	1a1b      	suble	r3, r3, r0
 800a2c8:	eb00 0c01 	addle.w	ip, r0, r1
 800a2cc:	186d      	addle	r5, r5, r1
 800a2ce:	005b      	lsls	r3, r3, #1
 800a2d0:	f1be 0e01 	subs.w	lr, lr, #1
 800a2d4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a2d8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a2dc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a2e0:	d1ed      	bne.n	800a2be <__ieee754_sqrt+0x8a>
 800a2e2:	4674      	mov	r4, lr
 800a2e4:	2720      	movs	r7, #32
 800a2e6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a2ea:	4563      	cmp	r3, ip
 800a2ec:	eb01 000e 	add.w	r0, r1, lr
 800a2f0:	dc02      	bgt.n	800a2f8 <__ieee754_sqrt+0xc4>
 800a2f2:	d113      	bne.n	800a31c <__ieee754_sqrt+0xe8>
 800a2f4:	4290      	cmp	r0, r2
 800a2f6:	d811      	bhi.n	800a31c <__ieee754_sqrt+0xe8>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	eb00 0e01 	add.w	lr, r0, r1
 800a2fe:	da57      	bge.n	800a3b0 <__ieee754_sqrt+0x17c>
 800a300:	f1be 0f00 	cmp.w	lr, #0
 800a304:	db54      	blt.n	800a3b0 <__ieee754_sqrt+0x17c>
 800a306:	f10c 0801 	add.w	r8, ip, #1
 800a30a:	eba3 030c 	sub.w	r3, r3, ip
 800a30e:	4290      	cmp	r0, r2
 800a310:	bf88      	it	hi
 800a312:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a316:	1a12      	subs	r2, r2, r0
 800a318:	440c      	add	r4, r1
 800a31a:	46c4      	mov	ip, r8
 800a31c:	005b      	lsls	r3, r3, #1
 800a31e:	3f01      	subs	r7, #1
 800a320:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a324:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a328:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a32c:	d1dd      	bne.n	800a2ea <__ieee754_sqrt+0xb6>
 800a32e:	4313      	orrs	r3, r2
 800a330:	d01b      	beq.n	800a36a <__ieee754_sqrt+0x136>
 800a332:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800a3e0 <__ieee754_sqrt+0x1ac>
 800a336:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a3e4 <__ieee754_sqrt+0x1b0>
 800a33a:	e9da 0100 	ldrd	r0, r1, [sl]
 800a33e:	e9db 2300 	ldrd	r2, r3, [fp]
 800a342:	f7f5 ffa9 	bl	8000298 <__aeabi_dsub>
 800a346:	e9da 8900 	ldrd	r8, r9, [sl]
 800a34a:	4602      	mov	r2, r0
 800a34c:	460b      	mov	r3, r1
 800a34e:	4640      	mov	r0, r8
 800a350:	4649      	mov	r1, r9
 800a352:	f7f6 fbd5 	bl	8000b00 <__aeabi_dcmple>
 800a356:	b140      	cbz	r0, 800a36a <__ieee754_sqrt+0x136>
 800a358:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a35c:	e9da 0100 	ldrd	r0, r1, [sl]
 800a360:	e9db 2300 	ldrd	r2, r3, [fp]
 800a364:	d126      	bne.n	800a3b4 <__ieee754_sqrt+0x180>
 800a366:	3501      	adds	r5, #1
 800a368:	463c      	mov	r4, r7
 800a36a:	106a      	asrs	r2, r5, #1
 800a36c:	0863      	lsrs	r3, r4, #1
 800a36e:	07e9      	lsls	r1, r5, #31
 800a370:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a374:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a378:	bf48      	it	mi
 800a37a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a37e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800a382:	461c      	mov	r4, r3
 800a384:	e76d      	b.n	800a262 <__ieee754_sqrt+0x2e>
 800a386:	0ad3      	lsrs	r3, r2, #11
 800a388:	3815      	subs	r0, #21
 800a38a:	0552      	lsls	r2, r2, #21
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d0fa      	beq.n	800a386 <__ieee754_sqrt+0x152>
 800a390:	02dc      	lsls	r4, r3, #11
 800a392:	d50a      	bpl.n	800a3aa <__ieee754_sqrt+0x176>
 800a394:	f1c1 0420 	rsb	r4, r1, #32
 800a398:	fa22 f404 	lsr.w	r4, r2, r4
 800a39c:	1e4d      	subs	r5, r1, #1
 800a39e:	408a      	lsls	r2, r1
 800a3a0:	4323      	orrs	r3, r4
 800a3a2:	1b41      	subs	r1, r0, r5
 800a3a4:	e772      	b.n	800a28c <__ieee754_sqrt+0x58>
 800a3a6:	4608      	mov	r0, r1
 800a3a8:	e7f0      	b.n	800a38c <__ieee754_sqrt+0x158>
 800a3aa:	005b      	lsls	r3, r3, #1
 800a3ac:	3101      	adds	r1, #1
 800a3ae:	e7ef      	b.n	800a390 <__ieee754_sqrt+0x15c>
 800a3b0:	46e0      	mov	r8, ip
 800a3b2:	e7aa      	b.n	800a30a <__ieee754_sqrt+0xd6>
 800a3b4:	f7f5 ff72 	bl	800029c <__adddf3>
 800a3b8:	e9da 8900 	ldrd	r8, r9, [sl]
 800a3bc:	4602      	mov	r2, r0
 800a3be:	460b      	mov	r3, r1
 800a3c0:	4640      	mov	r0, r8
 800a3c2:	4649      	mov	r1, r9
 800a3c4:	f7f6 fb92 	bl	8000aec <__aeabi_dcmplt>
 800a3c8:	b120      	cbz	r0, 800a3d4 <__ieee754_sqrt+0x1a0>
 800a3ca:	1ca0      	adds	r0, r4, #2
 800a3cc:	bf08      	it	eq
 800a3ce:	3501      	addeq	r5, #1
 800a3d0:	3402      	adds	r4, #2
 800a3d2:	e7ca      	b.n	800a36a <__ieee754_sqrt+0x136>
 800a3d4:	3401      	adds	r4, #1
 800a3d6:	f024 0401 	bic.w	r4, r4, #1
 800a3da:	e7c6      	b.n	800a36a <__ieee754_sqrt+0x136>
 800a3dc:	7ff00000 	.word	0x7ff00000
 800a3e0:	200001e8 	.word	0x200001e8
 800a3e4:	200001f0 	.word	0x200001f0

0800a3e8 <_init>:
 800a3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ea:	bf00      	nop
 800a3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ee:	bc08      	pop	{r3}
 800a3f0:	469e      	mov	lr, r3
 800a3f2:	4770      	bx	lr

0800a3f4 <_fini>:
 800a3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3f6:	bf00      	nop
 800a3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3fa:	bc08      	pop	{r3}
 800a3fc:	469e      	mov	lr, r3
 800a3fe:	4770      	bx	lr
