
Magnetometer Prototyping.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000506c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08005210  08005210  00015210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005360  08005360  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08005360  08005360  00015360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005368  08005368  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005368  08005368  00015368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800536c  0800536c  0001536c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000064  080053d4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  080053d4  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a0a5  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016e4  00000000  00000000  0002a17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000900  00000000  00000000  0002b860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000714  00000000  00000000  0002c160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015d55  00000000  00000000  0002c874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bfc9  00000000  00000000  000425c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088565  00000000  00000000  0004e592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d0c  00000000  00000000  000d6af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  000d9804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080051f4 	.word	0x080051f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	080051f4 	.word	0x080051f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2f>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b44:	bf24      	itt	cs
 8000b46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4e:	d90d      	bls.n	8000b6c <__aeabi_d2f+0x30>
 8000b50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b64:	bf08      	it	eq
 8000b66:	f020 0001 	biceq.w	r0, r0, #1
 8000b6a:	4770      	bx	lr
 8000b6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b70:	d121      	bne.n	8000bb6 <__aeabi_d2f+0x7a>
 8000b72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b76:	bfbc      	itt	lt
 8000b78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	4770      	bxlt	lr
 8000b7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b86:	f1c2 0218 	rsb	r2, r2, #24
 8000b8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b92:	fa20 f002 	lsr.w	r0, r0, r2
 8000b96:	bf18      	it	ne
 8000b98:	f040 0001 	orrne.w	r0, r0, #1
 8000b9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba8:	ea40 000c 	orr.w	r0, r0, ip
 8000bac:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb4:	e7cc      	b.n	8000b50 <__aeabi_d2f+0x14>
 8000bb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bba:	d107      	bne.n	8000bcc <__aeabi_d2f+0x90>
 8000bbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bca:	4770      	bxne	lr
 8000bcc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b970 	b.w	8000ed4 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9e08      	ldr	r6, [sp, #32]
 8000c12:	460d      	mov	r5, r1
 8000c14:	4604      	mov	r4, r0
 8000c16:	460f      	mov	r7, r1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d14a      	bne.n	8000cb2 <__udivmoddi4+0xa6>
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	4694      	mov	ip, r2
 8000c20:	d965      	bls.n	8000cee <__udivmoddi4+0xe2>
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	b143      	cbz	r3, 8000c3a <__udivmoddi4+0x2e>
 8000c28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c2c:	f1c3 0220 	rsb	r2, r3, #32
 8000c30:	409f      	lsls	r7, r3
 8000c32:	fa20 f202 	lsr.w	r2, r0, r2
 8000c36:	4317      	orrs	r7, r2
 8000c38:	409c      	lsls	r4, r3
 8000c3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3e:	fa1f f58c 	uxth.w	r5, ip
 8000c42:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c46:	0c22      	lsrs	r2, r4, #16
 8000c48:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c4c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c50:	fb01 f005 	mul.w	r0, r1, r5
 8000c54:	4290      	cmp	r0, r2
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x62>
 8000c58:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c60:	f080 811c 	bcs.w	8000e9c <__udivmoddi4+0x290>
 8000c64:	4290      	cmp	r0, r2
 8000c66:	f240 8119 	bls.w	8000e9c <__udivmoddi4+0x290>
 8000c6a:	3902      	subs	r1, #2
 8000c6c:	4462      	add	r2, ip
 8000c6e:	1a12      	subs	r2, r2, r0
 8000c70:	b2a4      	uxth	r4, r4
 8000c72:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c76:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c7a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7e:	fb00 f505 	mul.w	r5, r0, r5
 8000c82:	42a5      	cmp	r5, r4
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x90>
 8000c86:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x294>
 8000c92:	42a5      	cmp	r5, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x294>
 8000c98:	4464      	add	r4, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca0:	1b64      	subs	r4, r4, r5
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11e      	cbz	r6, 8000cae <__udivmoddi4+0xa2>
 8000ca6:	40dc      	lsrs	r4, r3
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e9c6 4300 	strd	r4, r3, [r6]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0xbc>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f000 80ed 	beq.w	8000e96 <__udivmoddi4+0x28a>
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e9c6 0500 	strd	r0, r5, [r6]
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc8:	fab3 f183 	clz	r1, r3
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	d149      	bne.n	8000d64 <__udivmoddi4+0x158>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	d302      	bcc.n	8000cda <__udivmoddi4+0xce>
 8000cd4:	4282      	cmp	r2, r0
 8000cd6:	f200 80f8 	bhi.w	8000eca <__udivmoddi4+0x2be>
 8000cda:	1a84      	subs	r4, r0, r2
 8000cdc:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	4617      	mov	r7, r2
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	d0e2      	beq.n	8000cae <__udivmoddi4+0xa2>
 8000ce8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cec:	e7df      	b.n	8000cae <__udivmoddi4+0xa2>
 8000cee:	b902      	cbnz	r2, 8000cf2 <__udivmoddi4+0xe6>
 8000cf0:	deff      	udf	#255	; 0xff
 8000cf2:	fab2 f382 	clz	r3, r2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x210>
 8000cfc:	1a8a      	subs	r2, r1, r2
 8000cfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d02:	fa1f fe8c 	uxth.w	lr, ip
 8000d06:	2101      	movs	r1, #1
 8000d08:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d0c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d10:	0c22      	lsrs	r2, r4, #16
 8000d12:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d16:	fb0e f005 	mul.w	r0, lr, r5
 8000d1a:	4290      	cmp	r0, r2
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x124>
 8000d1e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d22:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x122>
 8000d28:	4290      	cmp	r0, r2
 8000d2a:	f200 80cb 	bhi.w	8000ec4 <__udivmoddi4+0x2b8>
 8000d2e:	4645      	mov	r5, r8
 8000d30:	1a12      	subs	r2, r2, r0
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d38:	fb07 2210 	mls	r2, r7, r0, r2
 8000d3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d40:	fb0e fe00 	mul.w	lr, lr, r0
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x14e>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d50:	d202      	bcs.n	8000d58 <__udivmoddi4+0x14c>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	f200 80bb 	bhi.w	8000ece <__udivmoddi4+0x2c2>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	eba4 040e 	sub.w	r4, r4, lr
 8000d5e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d62:	e79f      	b.n	8000ca4 <__udivmoddi4+0x98>
 8000d64:	f1c1 0720 	rsb	r7, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d72:	fa05 f401 	lsl.w	r4, r5, r1
 8000d76:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7a:	40fd      	lsrs	r5, r7
 8000d7c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d94:	fb08 f50e 	mul.w	r5, r8, lr
 8000d98:	42a5      	cmp	r5, r4
 8000d9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9e:	fa00 f001 	lsl.w	r0, r0, r1
 8000da2:	d90b      	bls.n	8000dbc <__udivmoddi4+0x1b0>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dac:	f080 8088 	bcs.w	8000ec0 <__udivmoddi4+0x2b4>
 8000db0:	42a5      	cmp	r5, r4
 8000db2:	f240 8085 	bls.w	8000ec0 <__udivmoddi4+0x2b4>
 8000db6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dba:	4464      	add	r4, ip
 8000dbc:	1b64      	subs	r4, r4, r5
 8000dbe:	b29d      	uxth	r5, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dcc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1da>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ddc:	d26c      	bcs.n	8000eb8 <__udivmoddi4+0x2ac>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	d96a      	bls.n	8000eb8 <__udivmoddi4+0x2ac>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	4464      	add	r4, ip
 8000de6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dea:	fba3 9502 	umull	r9, r5, r3, r2
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	42ac      	cmp	r4, r5
 8000df4:	46c8      	mov	r8, r9
 8000df6:	46ae      	mov	lr, r5
 8000df8:	d356      	bcc.n	8000ea8 <__udivmoddi4+0x29c>
 8000dfa:	d053      	beq.n	8000ea4 <__udivmoddi4+0x298>
 8000dfc:	b156      	cbz	r6, 8000e14 <__udivmoddi4+0x208>
 8000dfe:	ebb0 0208 	subs.w	r2, r0, r8
 8000e02:	eb64 040e 	sbc.w	r4, r4, lr
 8000e06:	fa04 f707 	lsl.w	r7, r4, r7
 8000e0a:	40ca      	lsrs	r2, r1
 8000e0c:	40cc      	lsrs	r4, r1
 8000e0e:	4317      	orrs	r7, r2
 8000e10:	e9c6 7400 	strd	r7, r4, [r6]
 8000e14:	4618      	mov	r0, r3
 8000e16:	2100      	movs	r1, #0
 8000e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1c:	f1c3 0120 	rsb	r1, r3, #32
 8000e20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e24:	fa20 f201 	lsr.w	r2, r0, r1
 8000e28:	fa25 f101 	lsr.w	r1, r5, r1
 8000e2c:	409d      	lsls	r5, r3
 8000e2e:	432a      	orrs	r2, r5
 8000e30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e34:	fa1f fe8c 	uxth.w	lr, ip
 8000e38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e3c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e40:	0c11      	lsrs	r1, r2, #16
 8000e42:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e46:	fb00 f50e 	mul.w	r5, r0, lr
 8000e4a:	428d      	cmp	r5, r1
 8000e4c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x258>
 8000e52:	eb1c 0101 	adds.w	r1, ip, r1
 8000e56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5a:	d22f      	bcs.n	8000ebc <__udivmoddi4+0x2b0>
 8000e5c:	428d      	cmp	r5, r1
 8000e5e:	d92d      	bls.n	8000ebc <__udivmoddi4+0x2b0>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4461      	add	r1, ip
 8000e64:	1b49      	subs	r1, r1, r5
 8000e66:	b292      	uxth	r2, r2
 8000e68:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e6c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	fb05 f10e 	mul.w	r1, r5, lr
 8000e78:	4291      	cmp	r1, r2
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x282>
 8000e7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e80:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e84:	d216      	bcs.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e86:	4291      	cmp	r1, r2
 8000e88:	d914      	bls.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e8a:	3d02      	subs	r5, #2
 8000e8c:	4462      	add	r2, ip
 8000e8e:	1a52      	subs	r2, r2, r1
 8000e90:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e94:	e738      	b.n	8000d08 <__udivmoddi4+0xfc>
 8000e96:	4631      	mov	r1, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e708      	b.n	8000cae <__udivmoddi4+0xa2>
 8000e9c:	4639      	mov	r1, r7
 8000e9e:	e6e6      	b.n	8000c6e <__udivmoddi4+0x62>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x90>
 8000ea4:	4548      	cmp	r0, r9
 8000ea6:	d2a9      	bcs.n	8000dfc <__udivmoddi4+0x1f0>
 8000ea8:	ebb9 0802 	subs.w	r8, r9, r2
 8000eac:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	e7a3      	b.n	8000dfc <__udivmoddi4+0x1f0>
 8000eb4:	4645      	mov	r5, r8
 8000eb6:	e7ea      	b.n	8000e8e <__udivmoddi4+0x282>
 8000eb8:	462b      	mov	r3, r5
 8000eba:	e794      	b.n	8000de6 <__udivmoddi4+0x1da>
 8000ebc:	4640      	mov	r0, r8
 8000ebe:	e7d1      	b.n	8000e64 <__udivmoddi4+0x258>
 8000ec0:	46d0      	mov	r8, sl
 8000ec2:	e77b      	b.n	8000dbc <__udivmoddi4+0x1b0>
 8000ec4:	3d02      	subs	r5, #2
 8000ec6:	4462      	add	r2, ip
 8000ec8:	e732      	b.n	8000d30 <__udivmoddi4+0x124>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e70a      	b.n	8000ce4 <__udivmoddi4+0xd8>
 8000ece:	4464      	add	r4, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e742      	b.n	8000d5a <__udivmoddi4+0x14e>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <main>:
uint8_t initRegA = 0x0C;
uint8_t disRegA = 0x0E;
uint8_t initRegC = 0x10;

int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af02      	add	r7, sp, #8
  HAL_Init();
 8000ede:	f000 ff67 	bl	8001db0 <HAL_Init>

  SystemClock_Config();
 8000ee2:	f000 fcdb 	bl	800189c <SystemClock_Config>
  MX_GPIO_Init();
 8000ee6:	f000 fd9b 	bl	8001a20 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000eea:	f000 fd41 	bl	8001970 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000eee:	f000 fd6d 	bl	80019cc <MX_USART2_UART_Init>

  setupMag();
 8000ef2:	f000 f869 	bl	8000fc8 <setupMag>

//  uint8_t buf[10];

  //Calibration Values
  float xCal, yCal, zCal;
  xCal = 0;
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
  yCal = 0;
 8000efc:	f04f 0300 	mov.w	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  zCal = 0;
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]

  hardIronCal(&xCal, &yCal, &zCal);
 8000f08:	f107 0208 	add.w	r2, r7, #8
 8000f0c:	f107 010c 	add.w	r1, r7, #12
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 f989 	bl	800122c <hardIronCal>

  //Direction Angle
  float direction = 0;
 8000f1a:	f04f 0300 	mov.w	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]

  while (1)
  {
	  int16_t magnetometerVal [3] = {0};
 8000f20:	463b      	mov	r3, r7
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	809a      	strh	r2, [r3, #4]

	  while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &dataRegister, 1, 20) != HAL_OK){} //send data register address
 8000f28:	bf00      	nop
 8000f2a:	4b24      	ldr	r3, [pc, #144]	; (8000fbc <main+0xe4>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	b299      	uxth	r1, r3
 8000f34:	2314      	movs	r3, #20
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	4a21      	ldr	r2, [pc, #132]	; (8000fc0 <main+0xe8>)
 8000f3c:	4821      	ldr	r0, [pc, #132]	; (8000fc4 <main+0xec>)
 8000f3e:	f001 fb95 	bl	800266c <HAL_I2C_Master_Transmit>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1f0      	bne.n	8000f2a <main+0x52>
	  while (HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), magnetometerVal, 6, HAL_MAX_DELAY)){}
 8000f48:	bf00      	nop
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <main+0xe4>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	b21b      	sxth	r3, r3
 8000f58:	b299      	uxth	r1, r3
 8000f5a:	463a      	mov	r2, r7
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2306      	movs	r3, #6
 8000f64:	4817      	ldr	r0, [pc, #92]	; (8000fc4 <main+0xec>)
 8000f66:	f001 fc7f 	bl	8002868 <HAL_I2C_Master_Receive>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1ec      	bne.n	8000f4a <main+0x72>

	  int16_t xMag = magnetometerVal[0];
 8000f70:	883b      	ldrh	r3, [r7, #0]
 8000f72:	837b      	strh	r3, [r7, #26]

	  int16_t yMag = magnetometerVal[1];
 8000f74:	887b      	ldrh	r3, [r7, #2]
 8000f76:	833b      	strh	r3, [r7, #24]

	  int16_t zMag = magnetometerVal[2];
 8000f78:	88bb      	ldrh	r3, [r7, #4]
 8000f7a:	82fb      	strh	r3, [r7, #22]

	  direction = getDirectionAngle(xMag, yMag, zMag, xCal, yCal, zCal);
 8000f7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f80:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f84:	edd7 6a02 	vldr	s13, [r7, #8]
 8000f88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000f8c:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 8000f90:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000f94:	eeb0 1a66 	vmov.f32	s2, s13
 8000f98:	eef0 0a47 	vmov.f32	s1, s14
 8000f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fa55 	bl	8001450 <getDirectionAngle>
 8000fa6:	ed87 0a07 	vstr	s0, [r7, #28]
	  printDirection(direction);
 8000faa:	ed97 0a07 	vldr	s0, [r7, #28]
 8000fae:	f000 fb0f 	bl	80015d0 <printDirection>

	  HAL_Delay(1000);
 8000fb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb6:	f000 ff6d 	bl	8001e94 <HAL_Delay>
  {
 8000fba:	e7b1      	b.n	8000f20 <main+0x48>
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20000001 	.word	0x20000001
 8000fc4:	20000080 	.word	0x20000080

08000fc8 <setupMag>:
  }
}

void setupMag() {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af02      	add	r7, sp, #8
//
//	//Values to send
//	uint8_t initRegA = 0x0C;
//	uint8_t disRegA = 0x0E;
//	uint8_t initRegC = 0x10;
	uint8_t magSetupRX = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	71fb      	strb	r3, [r7, #7]

	uint8_t magSetupTX [2] = {0};
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	80bb      	strh	r3, [r7, #4]

	//1
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegC, 1, HAL_MAX_DELAY) != HAL_OK){} //send address pointer
 8000fd6:	bf00      	nop
 8000fd8:	4b8d      	ldr	r3, [pc, #564]	; (8001210 <setupMag+0x248>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	b299      	uxth	r1, r3
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	4a8a      	ldr	r2, [pc, #552]	; (8001214 <setupMag+0x24c>)
 8000fec:	488a      	ldr	r0, [pc, #552]	; (8001218 <setupMag+0x250>)
 8000fee:	f001 fb3d 	bl	800266c <HAL_I2C_Master_Transmit>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1ef      	bne.n	8000fd8 <setupMag+0x10>

	//2
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8000ff8:	4b85      	ldr	r3, [pc, #532]	; (8001210 <setupMag+0x248>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	b21b      	sxth	r3, r3
 8001006:	b299      	uxth	r1, r3
 8001008:	1dfa      	adds	r2, r7, #7
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2301      	movs	r3, #1
 8001012:	4881      	ldr	r0, [pc, #516]	; (8001218 <setupMag+0x250>)
 8001014:	f001 fc28 	bl	8002868 <HAL_I2C_Master_Receive>


	//3
	magSetupTX[0] = cfgRegC;
 8001018:	4b7e      	ldr	r3, [pc, #504]	; (8001214 <setupMag+0x24c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = initRegC;
 800101e:	4b7f      	ldr	r3, [pc, #508]	; (800121c <setupMag+0x254>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 8001024:	bf00      	nop
 8001026:	4b7a      	ldr	r3, [pc, #488]	; (8001210 <setupMag+0x248>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b29b      	uxth	r3, r3
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	b299      	uxth	r1, r3
 8001030:	1d3a      	adds	r2, r7, #4
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2302      	movs	r3, #2
 800103a:	4877      	ldr	r0, [pc, #476]	; (8001218 <setupMag+0x250>)
 800103c:	f001 fb16 	bl	800266c <HAL_I2C_Master_Transmit>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1ef      	bne.n	8001026 <setupMag+0x5e>

	//4
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegA, 1, HAL_MAX_DELAY) != HAL_OK){}
 8001046:	bf00      	nop
 8001048:	4b71      	ldr	r3, [pc, #452]	; (8001210 <setupMag+0x248>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b29b      	uxth	r3, r3
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	b299      	uxth	r1, r3
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	4a71      	ldr	r2, [pc, #452]	; (8001220 <setupMag+0x258>)
 800105c:	486e      	ldr	r0, [pc, #440]	; (8001218 <setupMag+0x250>)
 800105e:	f001 fb05 	bl	800266c <HAL_I2C_Master_Transmit>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1ef      	bne.n	8001048 <setupMag+0x80>

	//5
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8001068:	4b69      	ldr	r3, [pc, #420]	; (8001210 <setupMag+0x248>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	b21b      	sxth	r3, r3
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	b21b      	sxth	r3, r3
 8001076:	b299      	uxth	r1, r3
 8001078:	1dfa      	adds	r2, r7, #7
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2301      	movs	r3, #1
 8001082:	4865      	ldr	r0, [pc, #404]	; (8001218 <setupMag+0x250>)
 8001084:	f001 fbf0 	bl	8002868 <HAL_I2C_Master_Receive>

	//6
	magSetupTX[0] = cfgRegA;
 8001088:	4b65      	ldr	r3, [pc, #404]	; (8001220 <setupMag+0x258>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = disRegA;
 800108e:	4b65      	ldr	r3, [pc, #404]	; (8001224 <setupMag+0x25c>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 8001094:	bf00      	nop
 8001096:	4b5e      	ldr	r3, [pc, #376]	; (8001210 <setupMag+0x248>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b29b      	uxth	r3, r3
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	b299      	uxth	r1, r3
 80010a0:	1d3a      	adds	r2, r7, #4
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2302      	movs	r3, #2
 80010aa:	485b      	ldr	r0, [pc, #364]	; (8001218 <setupMag+0x250>)
 80010ac:	f001 fade 	bl	800266c <HAL_I2C_Master_Transmit>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1ef      	bne.n	8001096 <setupMag+0xce>

	//7
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegA, 1, HAL_MAX_DELAY) != HAL_OK){}
 80010b6:	bf00      	nop
 80010b8:	4b55      	ldr	r3, [pc, #340]	; (8001210 <setupMag+0x248>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	b299      	uxth	r1, r3
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	4a55      	ldr	r2, [pc, #340]	; (8001220 <setupMag+0x258>)
 80010cc:	4852      	ldr	r0, [pc, #328]	; (8001218 <setupMag+0x250>)
 80010ce:	f001 facd 	bl	800266c <HAL_I2C_Master_Transmit>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1ef      	bne.n	80010b8 <setupMag+0xf0>

	//8
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 80010d8:	4b4d      	ldr	r3, [pc, #308]	; (8001210 <setupMag+0x248>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	b21b      	sxth	r3, r3
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	b299      	uxth	r1, r3
 80010e8:	1dfa      	adds	r2, r7, #7
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	4849      	ldr	r0, [pc, #292]	; (8001218 <setupMag+0x250>)
 80010f4:	f001 fbb8 	bl	8002868 <HAL_I2C_Master_Receive>

	//9
	magSetupTX[0] = cfgRegA;
 80010f8:	4b49      	ldr	r3, [pc, #292]	; (8001220 <setupMag+0x258>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = disRegA;
 80010fe:	4b49      	ldr	r3, [pc, #292]	; (8001224 <setupMag+0x25c>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 8001104:	bf00      	nop
 8001106:	4b42      	ldr	r3, [pc, #264]	; (8001210 <setupMag+0x248>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b29b      	uxth	r3, r3
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	b299      	uxth	r1, r3
 8001110:	1d3a      	adds	r2, r7, #4
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2302      	movs	r3, #2
 800111a:	483f      	ldr	r0, [pc, #252]	; (8001218 <setupMag+0x250>)
 800111c:	f001 faa6 	bl	800266c <HAL_I2C_Master_Transmit>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1ef      	bne.n	8001106 <setupMag+0x13e>

	//10
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegC, 1, HAL_MAX_DELAY) != HAL_OK){}
 8001126:	bf00      	nop
 8001128:	4b39      	ldr	r3, [pc, #228]	; (8001210 <setupMag+0x248>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b29b      	uxth	r3, r3
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	b299      	uxth	r1, r3
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	4a36      	ldr	r2, [pc, #216]	; (8001214 <setupMag+0x24c>)
 800113c:	4836      	ldr	r0, [pc, #216]	; (8001218 <setupMag+0x250>)
 800113e:	f001 fa95 	bl	800266c <HAL_I2C_Master_Transmit>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1ef      	bne.n	8001128 <setupMag+0x160>

	//11
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8001148:	4b31      	ldr	r3, [pc, #196]	; (8001210 <setupMag+0x248>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	b21b      	sxth	r3, r3
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	b21b      	sxth	r3, r3
 8001156:	b299      	uxth	r1, r3
 8001158:	1dfa      	adds	r2, r7, #7
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2301      	movs	r3, #1
 8001162:	482d      	ldr	r0, [pc, #180]	; (8001218 <setupMag+0x250>)
 8001164:	f001 fb80 	bl	8002868 <HAL_I2C_Master_Receive>


	//12
	magSetupTX[0] = cfgRegC;
 8001168:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <setupMag+0x24c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = initRegC;
 800116e:	4b2b      	ldr	r3, [pc, #172]	; (800121c <setupMag+0x254>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 8001174:	bf00      	nop
 8001176:	4b26      	ldr	r3, [pc, #152]	; (8001210 <setupMag+0x248>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b29b      	uxth	r3, r3
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	b299      	uxth	r1, r3
 8001180:	1d3a      	adds	r2, r7, #4
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2302      	movs	r3, #2
 800118a:	4823      	ldr	r0, [pc, #140]	; (8001218 <setupMag+0x250>)
 800118c:	f001 fa6e 	bl	800266c <HAL_I2C_Master_Transmit>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1ef      	bne.n	8001176 <setupMag+0x1ae>

	//13
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegA, 2, HAL_MAX_DELAY) != HAL_OK){}
 8001196:	bf00      	nop
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <setupMag+0x248>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	b299      	uxth	r1, r3
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2302      	movs	r3, #2
 80011aa:	4a1d      	ldr	r2, [pc, #116]	; (8001220 <setupMag+0x258>)
 80011ac:	481a      	ldr	r0, [pc, #104]	; (8001218 <setupMag+0x250>)
 80011ae:	f001 fa5d 	bl	800266c <HAL_I2C_Master_Transmit>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1ef      	bne.n	8001198 <setupMag+0x1d0>

	//14
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <setupMag+0x248>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	b21b      	sxth	r3, r3
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	b299      	uxth	r1, r3
 80011c8:	1dfa      	adds	r2, r7, #7
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2301      	movs	r3, #1
 80011d2:	4811      	ldr	r0, [pc, #68]	; (8001218 <setupMag+0x250>)
 80011d4:	f001 fb48 	bl	8002868 <HAL_I2C_Master_Receive>


	//15
	magSetupTX[0] = cfgRegA;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <setupMag+0x258>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = initRegA;
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <setupMag+0x260>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 80011e4:	bf00      	nop
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <setupMag+0x248>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	b299      	uxth	r1, r3
 80011f0:	1d3a      	adds	r2, r7, #4
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2302      	movs	r3, #2
 80011fa:	4807      	ldr	r0, [pc, #28]	; (8001218 <setupMag+0x250>)
 80011fc:	f001 fa36 	bl	800266c <HAL_I2C_Master_Transmit>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1ef      	bne.n	80011e6 <setupMag+0x21e>
}
 8001206:	bf00      	nop
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000000 	.word	0x20000000
 8001214:	20000003 	.word	0x20000003
 8001218:	20000080 	.word	0x20000080
 800121c:	20000006 	.word	0x20000006
 8001220:	20000002 	.word	0x20000002
 8001224:	20000005 	.word	0x20000005
 8001228:	20000004 	.word	0x20000004

0800122c <hardIronCal>:

void hardIronCal(float* xCal, float* yCal, float* zCal) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b09c      	sub	sp, #112	; 0x70
 8001230:	af02      	add	r7, sp, #8
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  //Print Value to terminal
  uint8_t buf[30];
  sprintf((char*)buf, "Calibrating Magnetometer...\r\n");
 8001238:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800123c:	497e      	ldr	r1, [pc, #504]	; (8001438 <hardIronCal+0x20c>)
 800123e:	4618      	mov	r0, r3
 8001240:	f003 f8c0 	bl	80043c4 <siprintf>
  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001244:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001248:	4618      	mov	r0, r3
 800124a:	f7fe ffc9 	bl	80001e0 <strlen>
 800124e:	4603      	mov	r3, r0
 8001250:	b29a      	uxth	r2, r3
 8001252:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	4878      	ldr	r0, [pc, #480]	; (800143c <hardIronCal+0x210>)
 800125c:	f002 fd3d 	bl	8003cda <HAL_UART_Transmit>

  int16_t magnetometerVal [3] = {0};
 8001260:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	809a      	strh	r2, [r3, #4]

  while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &dataRegister, 1, 20) != HAL_OK){} //send data register address
 800126a:	bf00      	nop
 800126c:	4b74      	ldr	r3, [pc, #464]	; (8001440 <hardIronCal+0x214>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b29b      	uxth	r3, r3
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	b299      	uxth	r1, r3
 8001276:	2314      	movs	r3, #20
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	4a71      	ldr	r2, [pc, #452]	; (8001444 <hardIronCal+0x218>)
 800127e:	4872      	ldr	r0, [pc, #456]	; (8001448 <hardIronCal+0x21c>)
 8001280:	f001 f9f4 	bl	800266c <HAL_I2C_Master_Transmit>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <hardIronCal+0x40>
  while (HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), magnetometerVal, 6, HAL_MAX_DELAY)){}
 800128a:	bf00      	nop
 800128c:	4b6c      	ldr	r3, [pc, #432]	; (8001440 <hardIronCal+0x214>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	b21b      	sxth	r3, r3
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	b21b      	sxth	r3, r3
 800129a:	b299      	uxth	r1, r3
 800129c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2306      	movs	r3, #6
 80012a8:	4867      	ldr	r0, [pc, #412]	; (8001448 <hardIronCal+0x21c>)
 80012aa:	f001 fadd 	bl	8002868 <HAL_I2C_Master_Receive>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1eb      	bne.n	800128c <hardIronCal+0x60>

  int16_t xMax = magnetometerVal[0];
 80012b4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80012b6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  int16_t xMin = magnetometerVal[0];
 80012ba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80012bc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  int16_t yMax = magnetometerVal[1];
 80012c0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80012c2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  int16_t yMin = magnetometerVal[1];
 80012c6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80012c8:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

  int16_t zMax = magnetometerVal[2];
 80012cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012ce:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  int16_t zMin = magnetometerVal[2];
 80012d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012d4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c


  for (int i = 0; i < 50; i++) {
 80012d8:	2300      	movs	r3, #0
 80012da:	65bb      	str	r3, [r7, #88]	; 0x58
 80012dc:	e077      	b.n	80013ce <hardIronCal+0x1a2>
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &dataRegister, 1, 20) != HAL_OK){} //send data register address
 80012de:	bf00      	nop
 80012e0:	4b57      	ldr	r3, [pc, #348]	; (8001440 <hardIronCal+0x214>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	b299      	uxth	r1, r3
 80012ea:	2314      	movs	r3, #20
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2301      	movs	r3, #1
 80012f0:	4a54      	ldr	r2, [pc, #336]	; (8001444 <hardIronCal+0x218>)
 80012f2:	4855      	ldr	r0, [pc, #340]	; (8001448 <hardIronCal+0x21c>)
 80012f4:	f001 f9ba 	bl	800266c <HAL_I2C_Master_Transmit>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f0      	bne.n	80012e0 <hardIronCal+0xb4>
	while (HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), magnetometerVal, 6, HAL_MAX_DELAY)){}
 80012fe:	bf00      	nop
 8001300:	4b4f      	ldr	r3, [pc, #316]	; (8001440 <hardIronCal+0x214>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	b21b      	sxth	r3, r3
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	b21b      	sxth	r3, r3
 800130e:	b299      	uxth	r1, r3
 8001310:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2306      	movs	r3, #6
 800131c:	484a      	ldr	r0, [pc, #296]	; (8001448 <hardIronCal+0x21c>)
 800131e:	f001 faa3 	bl	8002868 <HAL_I2C_Master_Receive>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1eb      	bne.n	8001300 <hardIronCal+0xd4>

    //Updating xMax and xMin
    if (magnetometerVal[0] > xMax) {
 8001328:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800132c:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8001330:	429a      	cmp	r2, r3
 8001332:	da03      	bge.n	800133c <hardIronCal+0x110>
      xMax = magnetometerVal[0];
 8001334:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001336:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800133a:	e008      	b.n	800134e <hardIronCal+0x122>
    }

    else if (magnetometerVal[0] < xMin) {
 800133c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001340:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 8001344:	429a      	cmp	r2, r3
 8001346:	dd02      	ble.n	800134e <hardIronCal+0x122>
      xMin = magnetometerVal[0];
 8001348:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800134a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    }

    //Updating yMax and yMin
    if (magnetometerVal[1] > yMax) {
 800134e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001352:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8001356:	429a      	cmp	r2, r3
 8001358:	da03      	bge.n	8001362 <hardIronCal+0x136>
      yMax = magnetometerVal[1];
 800135a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800135c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001360:	e008      	b.n	8001374 <hardIronCal+0x148>
    }

    else if (magnetometerVal[1] < yMin) {
 8001362:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001366:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 800136a:	429a      	cmp	r2, r3
 800136c:	dd02      	ble.n	8001374 <hardIronCal+0x148>
      yMin = magnetometerVal[1];
 800136e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001370:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    }

    //Updating zMax and zMin
    if (magnetometerVal[2] > zMax) {
 8001374:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001378:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 800137c:	429a      	cmp	r2, r3
 800137e:	da03      	bge.n	8001388 <hardIronCal+0x15c>
      zMax = magnetometerVal[2];
 8001380:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001382:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001386:	e008      	b.n	800139a <hardIronCal+0x16e>
    }

    else if (magnetometerVal[2] < zMin) {
 8001388:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800138c:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 8001390:	429a      	cmp	r2, r3
 8001392:	dd02      	ble.n	800139a <hardIronCal+0x16e>
      zMin = magnetometerVal[2];
 8001394:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001396:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }

    HAL_Delay(250);
 800139a:	20fa      	movs	r0, #250	; 0xfa
 800139c:	f000 fd7a 	bl	8001e94 <HAL_Delay>
    uint8_t buf[30];
    sprintf((char*)buf, "Calibrating Magnetometer...\r\n");
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	4924      	ldr	r1, [pc, #144]	; (8001438 <hardIronCal+0x20c>)
 80013a6:	4618      	mov	r0, r3
 80013a8:	f003 f80c 	bl	80043c4 <siprintf>
    HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7fe ff15 	bl	80001e0 <strlen>
 80013b6:	4603      	mov	r3, r0
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	f107 0110 	add.w	r1, r7, #16
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	481e      	ldr	r0, [pc, #120]	; (800143c <hardIronCal+0x210>)
 80013c4:	f002 fc89 	bl	8003cda <HAL_UART_Transmit>
  for (int i = 0; i < 50; i++) {
 80013c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013ca:	3301      	adds	r3, #1
 80013cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80013ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013d0:	2b31      	cmp	r3, #49	; 0x31
 80013d2:	dd84      	ble.n	80012de <hardIronCal+0xb2>
  }

  //finding the calibration values
  *xCal = (xMax + xMin) / 2;
 80013d4:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 80013d8:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80013dc:	4413      	add	r3, r2
 80013de:	0fda      	lsrs	r2, r3, #31
 80013e0:	4413      	add	r3, r2
 80013e2:	105b      	asrs	r3, r3, #1
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	edc3 7a00 	vstr	s15, [r3]
  *yCal = (yMax + yMin) / 2;
 80013f2:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 80013f6:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 80013fa:	4413      	add	r3, r2
 80013fc:	0fda      	lsrs	r2, r3, #31
 80013fe:	4413      	add	r3, r2
 8001400:	105b      	asrs	r3, r3, #1
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	edc3 7a00 	vstr	s15, [r3]
  *zCal = (zMax + zMin) / 2;
 8001410:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8001414:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8001418:	4413      	add	r3, r2
 800141a:	0fda      	lsrs	r2, r3, #31
 800141c:	4413      	add	r3, r2
 800141e:	105b      	asrs	r3, r3, #1
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	edc3 7a00 	vstr	s15, [r3]
}
 800142e:	bf00      	nop
 8001430:	3768      	adds	r7, #104	; 0x68
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	08005210 	.word	0x08005210
 800143c:	200000d4 	.word	0x200000d4
 8001440:	20000000 	.word	0x20000000
 8001444:	20000001 	.word	0x20000001
 8001448:	20000080 	.word	0x20000080
 800144c:	00000000 	.word	0x00000000

08001450 <getDirectionAngle>:

float getDirectionAngle(int16_t xMag, int16_t yMag, int16_t zMag, float xCal, float yCal, float zCal){
 8001450:	b5b0      	push	{r4, r5, r7, lr}
 8001452:	b08c      	sub	sp, #48	; 0x30
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	ed87 0a03 	vstr	s0, [r7, #12]
 800145c:	edc7 0a02 	vstr	s1, [r7, #8]
 8001460:	ed87 1a01 	vstr	s2, [r7, #4]
 8001464:	82fb      	strh	r3, [r7, #22]
 8001466:	460b      	mov	r3, r1
 8001468:	82bb      	strh	r3, [r7, #20]
 800146a:	4613      	mov	r3, r2
 800146c:	827b      	strh	r3, [r7, #18]
  xMag -= xCal;
 800146e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800147a:	edd7 7a03 	vldr	s15, [r7, #12]
 800147e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001482:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001486:	ee17 3a90 	vmov	r3, s15
 800148a:	82fb      	strh	r3, [r7, #22]
  yMag -= yCal;
 800148c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001490:	ee07 3a90 	vmov	s15, r3
 8001494:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001498:	edd7 7a02 	vldr	s15, [r7, #8]
 800149c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014a4:	ee17 3a90 	vmov	r3, s15
 80014a8:	82bb      	strh	r3, [r7, #20]
  zMag -= zCal;
 80014aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014c2:	ee17 3a90 	vmov	r3, s15
 80014c6:	827b      	strh	r3, [r7, #18]

  float D = atan2(xMag, yMag) * (180 / M_PI);
 80014c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f831 	bl	8000534 <__aeabi_i2d>
 80014d2:	4604      	mov	r4, r0
 80014d4:	460d      	mov	r5, r1
 80014d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff f82a 	bl	8000534 <__aeabi_i2d>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	ec43 2b11 	vmov	d1, r2, r3
 80014e8:	ec45 4b10 	vmov	d0, r4, r5
 80014ec:	f003 fc0d 	bl	8004d0a <atan2>
 80014f0:	ec51 0b10 	vmov	r0, r1, d0
 80014f4:	a334      	add	r3, pc, #208	; (adr r3, 80015c8 <getDirectionAngle+0x178>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7ff f885 	bl	8000608 <__aeabi_dmul>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff fb19 	bl	8000b3c <__aeabi_d2f>
 800150a:	4603      	mov	r3, r0
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (D > 360) {
 800150e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001512:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80015b8 <getDirectionAngle+0x168>
 8001516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800151a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151e:	dd08      	ble.n	8001532 <getDirectionAngle+0xe2>
    D -= 360;
 8001520:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001524:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80015b8 <getDirectionAngle+0x168>
 8001528:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800152c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8001530:	e00e      	b.n	8001550 <getDirectionAngle+0x100>
  }
  else if (D < 0){
 8001532:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001536:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	d507      	bpl.n	8001550 <getDirectionAngle+0x100>
    D += 360;
 8001540:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001544:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80015b8 <getDirectionAngle+0x168>
 8001548:	ee77 7a87 	vadd.f32	s15, s15, s14
 800154c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  }

  uint8_t buf[20];
  sprintf((char*)buf, "D = %u%u \r\n", (unsigned int)D / 100, (unsigned int)D % 100);
 8001550:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001558:	ee17 2a90 	vmov	r2, s15
 800155c:	4b17      	ldr	r3, [pc, #92]	; (80015bc <getDirectionAngle+0x16c>)
 800155e:	fba3 2302 	umull	r2, r3, r3, r2
 8001562:	095a      	lsrs	r2, r3, #5
 8001564:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800156c:	ee17 1a90 	vmov	r1, s15
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <getDirectionAngle+0x16c>)
 8001572:	fba3 0301 	umull	r0, r3, r3, r1
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	2064      	movs	r0, #100	; 0x64
 800157a:	fb00 f303 	mul.w	r3, r0, r3
 800157e:	1acb      	subs	r3, r1, r3
 8001580:	f107 0018 	add.w	r0, r7, #24
 8001584:	490e      	ldr	r1, [pc, #56]	; (80015c0 <getDirectionAngle+0x170>)
 8001586:	f002 ff1d 	bl	80043c4 <siprintf>
  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800158a:	f107 0318 	add.w	r3, r7, #24
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe fe26 	bl	80001e0 <strlen>
 8001594:	4603      	mov	r3, r0
 8001596:	b29a      	uxth	r2, r3
 8001598:	f107 0118 	add.w	r1, r7, #24
 800159c:	f04f 33ff 	mov.w	r3, #4294967295
 80015a0:	4808      	ldr	r0, [pc, #32]	; (80015c4 <getDirectionAngle+0x174>)
 80015a2:	f002 fb9a 	bl	8003cda <HAL_UART_Transmit>

  return D;
 80015a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a8:	ee07 3a90 	vmov	s15, r3
}
 80015ac:	eeb0 0a67 	vmov.f32	s0, s15
 80015b0:	3730      	adds	r7, #48	; 0x30
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bdb0      	pop	{r4, r5, r7, pc}
 80015b6:	bf00      	nop
 80015b8:	43b40000 	.word	0x43b40000
 80015bc:	51eb851f 	.word	0x51eb851f
 80015c0:	08005230 	.word	0x08005230
 80015c4:	200000d4 	.word	0x200000d4
 80015c8:	1a63c1f8 	.word	0x1a63c1f8
 80015cc:	404ca5dc 	.word	0x404ca5dc

080015d0 <printDirection>:

void printDirection(float D) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0a2      	sub	sp, #136	; 0x88
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (D > 337.25 || D < 22.5)
 80015da:	edd7 7a01 	vldr	s15, [r7, #4]
 80015de:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8001858 <printDirection+0x288>
 80015e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ea:	dc08      	bgt.n	80015fe <printDirection+0x2e>
 80015ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80015f0:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 800185c <printDirection+0x28c>
 80015f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fc:	d514      	bpl.n	8001628 <printDirection+0x58>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "North \r\n");
 80015fe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001602:	4997      	ldr	r1, [pc, #604]	; (8001860 <printDirection+0x290>)
 8001604:	4618      	mov	r0, r3
 8001606:	f002 fedd 	bl	80043c4 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800160a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fde6 	bl	80001e0 <strlen>
 8001614:	4603      	mov	r3, r0
 8001616:	b29a      	uxth	r2, r3
 8001618:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800161c:	f04f 33ff 	mov.w	r3, #4294967295
 8001620:	4890      	ldr	r0, [pc, #576]	; (8001864 <printDirection+0x294>)
 8001622:	f002 fb5a 	bl	8003cda <HAL_UART_Transmit>
	{
 8001626:	e112      	b.n	800184e <printDirection+0x27e>
	}
	else if (D >= 292.5 && D <= 337.25)
 8001628:	edd7 7a01 	vldr	s15, [r7, #4]
 800162c:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001868 <printDirection+0x298>
 8001630:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001638:	db1d      	blt.n	8001676 <printDirection+0xa6>
 800163a:	edd7 7a01 	vldr	s15, [r7, #4]
 800163e:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001858 <printDirection+0x288>
 8001642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164a:	d814      	bhi.n	8001676 <printDirection+0xa6>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "North-West \r\n");
 800164c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001650:	4986      	ldr	r1, [pc, #536]	; (800186c <printDirection+0x29c>)
 8001652:	4618      	mov	r0, r3
 8001654:	f002 feb6 	bl	80043c4 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001658:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe fdbf 	bl	80001e0 <strlen>
 8001662:	4603      	mov	r3, r0
 8001664:	b29a      	uxth	r2, r3
 8001666:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
 800166e:	487d      	ldr	r0, [pc, #500]	; (8001864 <printDirection+0x294>)
 8001670:	f002 fb33 	bl	8003cda <HAL_UART_Transmit>
	{
 8001674:	e0eb      	b.n	800184e <printDirection+0x27e>
	}
	else if (D >= 247.5 && D < 292.5)
 8001676:	edd7 7a01 	vldr	s15, [r7, #4]
 800167a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8001870 <printDirection+0x2a0>
 800167e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001686:	db1d      	blt.n	80016c4 <printDirection+0xf4>
 8001688:	edd7 7a01 	vldr	s15, [r7, #4]
 800168c:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001868 <printDirection+0x298>
 8001690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001698:	d514      	bpl.n	80016c4 <printDirection+0xf4>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "West \r\n");
 800169a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800169e:	4975      	ldr	r1, [pc, #468]	; (8001874 <printDirection+0x2a4>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f002 fe8f 	bl	80043c4 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80016a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe fd98 	bl	80001e0 <strlen>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
 80016bc:	4869      	ldr	r0, [pc, #420]	; (8001864 <printDirection+0x294>)
 80016be:	f002 fb0c 	bl	8003cda <HAL_UART_Transmit>
	{
 80016c2:	e0c4      	b.n	800184e <printDirection+0x27e>
	}
	else if (D >= 202.5 && D < 247.5)
 80016c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80016c8:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001878 <printDirection+0x2a8>
 80016cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d4:	db1d      	blt.n	8001712 <printDirection+0x142>
 80016d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016da:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001870 <printDirection+0x2a0>
 80016de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e6:	d514      	bpl.n	8001712 <printDirection+0x142>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "South-West \r\n");
 80016e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016ec:	4963      	ldr	r1, [pc, #396]	; (800187c <printDirection+0x2ac>)
 80016ee:	4618      	mov	r0, r3
 80016f0:	f002 fe68 	bl	80043c4 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80016f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe fd71 	bl	80001e0 <strlen>
 80016fe:	4603      	mov	r3, r0
 8001700:	b29a      	uxth	r2, r3
 8001702:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001706:	f04f 33ff 	mov.w	r3, #4294967295
 800170a:	4856      	ldr	r0, [pc, #344]	; (8001864 <printDirection+0x294>)
 800170c:	f002 fae5 	bl	8003cda <HAL_UART_Transmit>
	{
 8001710:	e09d      	b.n	800184e <printDirection+0x27e>
	}
	else if (D >= 157.5 && D < 202.5)
 8001712:	edd7 7a01 	vldr	s15, [r7, #4]
 8001716:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001880 <printDirection+0x2b0>
 800171a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800171e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001722:	db1d      	blt.n	8001760 <printDirection+0x190>
 8001724:	edd7 7a01 	vldr	s15, [r7, #4]
 8001728:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001878 <printDirection+0x2a8>
 800172c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001734:	d514      	bpl.n	8001760 <printDirection+0x190>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "South \r\n");
 8001736:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800173a:	4952      	ldr	r1, [pc, #328]	; (8001884 <printDirection+0x2b4>)
 800173c:	4618      	mov	r0, r3
 800173e:	f002 fe41 	bl	80043c4 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001742:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fd4a 	bl	80001e0 <strlen>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001754:	f04f 33ff 	mov.w	r3, #4294967295
 8001758:	4842      	ldr	r0, [pc, #264]	; (8001864 <printDirection+0x294>)
 800175a:	f002 fabe 	bl	8003cda <HAL_UART_Transmit>
	{
 800175e:	e076      	b.n	800184e <printDirection+0x27e>
	}
	else if (D >= 112.5 && D < 157.5)
 8001760:	edd7 7a01 	vldr	s15, [r7, #4]
 8001764:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001888 <printDirection+0x2b8>
 8001768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001770:	db1d      	blt.n	80017ae <printDirection+0x1de>
 8001772:	edd7 7a01 	vldr	s15, [r7, #4]
 8001776:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001880 <printDirection+0x2b0>
 800177a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001782:	d514      	bpl.n	80017ae <printDirection+0x1de>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "South-East \r\n");
 8001784:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001788:	4940      	ldr	r1, [pc, #256]	; (800188c <printDirection+0x2bc>)
 800178a:	4618      	mov	r0, r3
 800178c:	f002 fe1a 	bl	80043c4 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001790:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fd23 	bl	80001e0 <strlen>
 800179a:	4603      	mov	r3, r0
 800179c:	b29a      	uxth	r2, r3
 800179e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	482f      	ldr	r0, [pc, #188]	; (8001864 <printDirection+0x294>)
 80017a8:	f002 fa97 	bl	8003cda <HAL_UART_Transmit>
	{
 80017ac:	e04f      	b.n	800184e <printDirection+0x27e>
	}
	else if (D >= 67.5 && D < 112.5)
 80017ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001890 <printDirection+0x2c0>
 80017b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017be:	db1d      	blt.n	80017fc <printDirection+0x22c>
 80017c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80017c4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001888 <printDirection+0x2b8>
 80017c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d0:	d514      	bpl.n	80017fc <printDirection+0x22c>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "East \r\n");
 80017d2:	f107 0318 	add.w	r3, r7, #24
 80017d6:	492f      	ldr	r1, [pc, #188]	; (8001894 <printDirection+0x2c4>)
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 fdf3 	bl	80043c4 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80017de:	f107 0318 	add.w	r3, r7, #24
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fcfc 	bl	80001e0 <strlen>
 80017e8:	4603      	mov	r3, r0
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	f107 0118 	add.w	r1, r7, #24
 80017f0:	f04f 33ff 	mov.w	r3, #4294967295
 80017f4:	481b      	ldr	r0, [pc, #108]	; (8001864 <printDirection+0x294>)
 80017f6:	f002 fa70 	bl	8003cda <HAL_UART_Transmit>
	{
 80017fa:	e028      	b.n	800184e <printDirection+0x27e>
	}
	else if (D >= 22.5 && D < 67.5)
 80017fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001800:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800185c <printDirection+0x28c>
 8001804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180c:	da00      	bge.n	8001810 <printDirection+0x240>
		uint8_t buf[15];
		sprintf((char*)buf, "North-East \r\n");
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
	}

}
 800180e:	e01e      	b.n	800184e <printDirection+0x27e>
	else if (D >= 22.5 && D < 67.5)
 8001810:	edd7 7a01 	vldr	s15, [r7, #4]
 8001814:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001890 <printDirection+0x2c0>
 8001818:	eef4 7ac7 	vcmpe.f32	s15, s14
 800181c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001820:	d400      	bmi.n	8001824 <printDirection+0x254>
}
 8001822:	e014      	b.n	800184e <printDirection+0x27e>
		sprintf((char*)buf, "North-East \r\n");
 8001824:	f107 0308 	add.w	r3, r7, #8
 8001828:	491b      	ldr	r1, [pc, #108]	; (8001898 <printDirection+0x2c8>)
 800182a:	4618      	mov	r0, r3
 800182c:	f002 fdca 	bl	80043c4 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001830:	f107 0308 	add.w	r3, r7, #8
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fcd3 	bl	80001e0 <strlen>
 800183a:	4603      	mov	r3, r0
 800183c:	b29a      	uxth	r2, r3
 800183e:	f107 0108 	add.w	r1, r7, #8
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	4807      	ldr	r0, [pc, #28]	; (8001864 <printDirection+0x294>)
 8001848:	f002 fa47 	bl	8003cda <HAL_UART_Transmit>
}
 800184c:	e7ff      	b.n	800184e <printDirection+0x27e>
 800184e:	bf00      	nop
 8001850:	3788      	adds	r7, #136	; 0x88
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	43a8a000 	.word	0x43a8a000
 800185c:	41b40000 	.word	0x41b40000
 8001860:	0800523c 	.word	0x0800523c
 8001864:	200000d4 	.word	0x200000d4
 8001868:	43924000 	.word	0x43924000
 800186c:	08005248 	.word	0x08005248
 8001870:	43778000 	.word	0x43778000
 8001874:	08005258 	.word	0x08005258
 8001878:	434a8000 	.word	0x434a8000
 800187c:	08005260 	.word	0x08005260
 8001880:	431d8000 	.word	0x431d8000
 8001884:	08005270 	.word	0x08005270
 8001888:	42e10000 	.word	0x42e10000
 800188c:	0800527c 	.word	0x0800527c
 8001890:	42870000 	.word	0x42870000
 8001894:	0800528c 	.word	0x0800528c
 8001898:	08005294 	.word	0x08005294

0800189c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b094      	sub	sp, #80	; 0x50
 80018a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a2:	f107 0320 	add.w	r3, r7, #32
 80018a6:	2230      	movs	r2, #48	; 0x30
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f002 fdaa 	bl	8004404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	4b28      	ldr	r3, [pc, #160]	; (8001968 <SystemClock_Config+0xcc>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	4a27      	ldr	r2, [pc, #156]	; (8001968 <SystemClock_Config+0xcc>)
 80018ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ce:	6413      	str	r3, [r2, #64]	; 0x40
 80018d0:	4b25      	ldr	r3, [pc, #148]	; (8001968 <SystemClock_Config+0xcc>)
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018dc:	2300      	movs	r3, #0
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	4b22      	ldr	r3, [pc, #136]	; (800196c <SystemClock_Config+0xd0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a21      	ldr	r2, [pc, #132]	; (800196c <SystemClock_Config+0xd0>)
 80018e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b1f      	ldr	r3, [pc, #124]	; (800196c <SystemClock_Config+0xd0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018f8:	2302      	movs	r3, #2
 80018fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018fc:	2301      	movs	r3, #1
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001900:	2310      	movs	r3, #16
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001904:	2302      	movs	r3, #2
 8001906:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001908:	2300      	movs	r3, #0
 800190a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800190c:	2310      	movs	r3, #16
 800190e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001910:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001914:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001916:	2304      	movs	r3, #4
 8001918:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800191a:	2304      	movs	r3, #4
 800191c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800191e:	f107 0320 	add.w	r3, r7, #32
 8001922:	4618      	mov	r0, r3
 8001924:	f001 fcf4 	bl	8003310 <HAL_RCC_OscConfig>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800192e:	f000 f8e5 	bl	8001afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001932:	230f      	movs	r3, #15
 8001934:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001936:	2302      	movs	r3, #2
 8001938:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800193e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001942:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001948:	f107 030c 	add.w	r3, r7, #12
 800194c:	2102      	movs	r1, #2
 800194e:	4618      	mov	r0, r3
 8001950:	f001 ff56 	bl	8003800 <HAL_RCC_ClockConfig>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800195a:	f000 f8cf 	bl	8001afc <Error_Handler>
  }
}
 800195e:	bf00      	nop
 8001960:	3750      	adds	r7, #80	; 0x50
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800
 800196c:	40007000 	.word	0x40007000

08001970 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <MX_I2C1_Init+0x50>)
 8001976:	4a13      	ldr	r2, [pc, #76]	; (80019c4 <MX_I2C1_Init+0x54>)
 8001978:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_I2C1_Init+0x50>)
 800197c:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <MX_I2C1_Init+0x58>)
 800197e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <MX_I2C1_Init+0x50>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <MX_I2C1_Init+0x50>)
 8001988:	2200      	movs	r2, #0
 800198a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <MX_I2C1_Init+0x50>)
 800198e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001992:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <MX_I2C1_Init+0x50>)
 8001996:	2200      	movs	r2, #0
 8001998:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <MX_I2C1_Init+0x50>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019a0:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <MX_I2C1_Init+0x50>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <MX_I2C1_Init+0x50>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019ac:	4804      	ldr	r0, [pc, #16]	; (80019c0 <MX_I2C1_Init+0x50>)
 80019ae:	f000 fd19 	bl	80023e4 <HAL_I2C_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019b8:	f000 f8a0 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000080 	.word	0x20000080
 80019c4:	40005400 	.word	0x40005400
 80019c8:	000186a0 	.word	0x000186a0

080019cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <MX_USART2_UART_Init+0x4c>)
 80019d2:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <MX_USART2_UART_Init+0x50>)
 80019d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <MX_USART2_UART_Init+0x4c>)
 80019d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <MX_USART2_UART_Init+0x4c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <MX_USART2_UART_Init+0x4c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <MX_USART2_UART_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <MX_USART2_UART_Init+0x4c>)
 80019f2:	220c      	movs	r2, #12
 80019f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <MX_USART2_UART_Init+0x4c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <MX_USART2_UART_Init+0x4c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a02:	4805      	ldr	r0, [pc, #20]	; (8001a18 <MX_USART2_UART_Init+0x4c>)
 8001a04:	f002 f91c 	bl	8003c40 <HAL_UART_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a0e:	f000 f875 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200000d4 	.word	0x200000d4
 8001a1c:	40004400 	.word	0x40004400

08001a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <MX_GPIO_Init+0xd0>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a2c      	ldr	r2, [pc, #176]	; (8001af0 <MX_GPIO_Init+0xd0>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <MX_GPIO_Init+0xd0>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <MX_GPIO_Init+0xd0>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a25      	ldr	r2, [pc, #148]	; (8001af0 <MX_GPIO_Init+0xd0>)
 8001a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <MX_GPIO_Init+0xd0>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <MX_GPIO_Init+0xd0>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a1e      	ldr	r2, [pc, #120]	; (8001af0 <MX_GPIO_Init+0xd0>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <MX_GPIO_Init+0xd0>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <MX_GPIO_Init+0xd0>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a17      	ldr	r2, [pc, #92]	; (8001af0 <MX_GPIO_Init+0xd0>)
 8001a94:	f043 0302 	orr.w	r3, r3, #2
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <MX_GPIO_Init+0xd0>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2120      	movs	r1, #32
 8001aaa:	4812      	ldr	r0, [pc, #72]	; (8001af4 <MX_GPIO_Init+0xd4>)
 8001aac:	f000 fc80 	bl	80023b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ab6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	480c      	ldr	r0, [pc, #48]	; (8001af8 <MX_GPIO_Init+0xd8>)
 8001ac8:	f000 faee 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001acc:	2320      	movs	r3, #32
 8001ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4804      	ldr	r0, [pc, #16]	; (8001af4 <MX_GPIO_Init+0xd4>)
 8001ae4:	f000 fae0 	bl	80020a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ae8:	bf00      	nop
 8001aea:	3728      	adds	r7, #40	; 0x28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020000 	.word	0x40020000
 8001af8:	40020800 	.word	0x40020800

08001afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b00:	b672      	cpsid	i
}
 8001b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <Error_Handler+0x8>
	...

08001b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a0f      	ldr	r2, [pc, #60]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	603b      	str	r3, [r7, #0]
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b46:	2007      	movs	r0, #7
 8001b48:	f000 fa7a 	bl	8002040 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800

08001b58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a19      	ldr	r2, [pc, #100]	; (8001bdc <HAL_I2C_MspInit+0x84>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d12c      	bne.n	8001bd4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <HAL_I2C_MspInit+0x88>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a17      	ldr	r2, [pc, #92]	; (8001be0 <HAL_I2C_MspInit+0x88>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <HAL_I2C_MspInit+0x88>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b9c:	2312      	movs	r3, #18
 8001b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ba8:	2304      	movs	r3, #4
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	480c      	ldr	r0, [pc, #48]	; (8001be4 <HAL_I2C_MspInit+0x8c>)
 8001bb4:	f000 fa78 	bl	80020a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_I2C_MspInit+0x88>)
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <HAL_I2C_MspInit+0x88>)
 8001bc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_I2C_MspInit+0x88>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bd4:	bf00      	nop
 8001bd6:	3728      	adds	r7, #40	; 0x28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40005400 	.word	0x40005400
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020400 	.word	0x40020400

08001be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a19      	ldr	r2, [pc, #100]	; (8001c6c <HAL_UART_MspInit+0x84>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d12b      	bne.n	8001c62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <HAL_UART_MspInit+0x88>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	4a17      	ldr	r2, [pc, #92]	; (8001c70 <HAL_UART_MspInit+0x88>)
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c18:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <HAL_UART_MspInit+0x88>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <HAL_UART_MspInit+0x88>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a10      	ldr	r2, [pc, #64]	; (8001c70 <HAL_UART_MspInit+0x88>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <HAL_UART_MspInit+0x88>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c42:	230c      	movs	r3, #12
 8001c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c52:	2307      	movs	r3, #7
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4805      	ldr	r0, [pc, #20]	; (8001c74 <HAL_UART_MspInit+0x8c>)
 8001c5e:	f000 fa23 	bl	80020a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c62:	bf00      	nop
 8001c64:	3728      	adds	r7, #40	; 0x28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40004400 	.word	0x40004400
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40020000 	.word	0x40020000

08001c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <NMI_Handler+0x4>

08001c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c82:	e7fe      	b.n	8001c82 <HardFault_Handler+0x4>

08001c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <MemManage_Handler+0x4>

08001c8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <BusFault_Handler+0x4>

08001c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <UsageFault_Handler+0x4>

08001c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc4:	f000 f8c6 	bl	8001e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd4:	4a14      	ldr	r2, [pc, #80]	; (8001d28 <_sbrk+0x5c>)
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <_sbrk+0x60>)
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <_sbrk+0x64>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <_sbrk+0x64>)
 8001cea:	4a12      	ldr	r2, [pc, #72]	; (8001d34 <_sbrk+0x68>)
 8001cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d207      	bcs.n	8001d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cfc:	f002 fb8a 	bl	8004414 <__errno>
 8001d00:	4603      	mov	r3, r0
 8001d02:	220c      	movs	r2, #12
 8001d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0a:	e009      	b.n	8001d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d12:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <_sbrk+0x64>)
 8001d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20020000 	.word	0x20020000
 8001d2c:	00000400 	.word	0x00000400
 8001d30:	20000118 	.word	0x20000118
 8001d34:	20000268 	.word	0x20000268

08001d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <SystemInit+0x20>)
 8001d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d42:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <SystemInit+0x20>)
 8001d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d60:	480d      	ldr	r0, [pc, #52]	; (8001d98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d62:	490e      	ldr	r1, [pc, #56]	; (8001d9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d64:	4a0e      	ldr	r2, [pc, #56]	; (8001da0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d68:	e002      	b.n	8001d70 <LoopCopyDataInit>

08001d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6e:	3304      	adds	r3, #4

08001d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d74:	d3f9      	bcc.n	8001d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d76:	4a0b      	ldr	r2, [pc, #44]	; (8001da4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d78:	4c0b      	ldr	r4, [pc, #44]	; (8001da8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d7c:	e001      	b.n	8001d82 <LoopFillZerobss>

08001d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d80:	3204      	adds	r2, #4

08001d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d84:	d3fb      	bcc.n	8001d7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d86:	f7ff ffd7 	bl	8001d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d8a:	f002 fb49 	bl	8004420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d8e:	f7ff f8a3 	bl	8000ed8 <main>
  bx  lr    
 8001d92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d9c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001da0:	08005370 	.word	0x08005370
  ldr r2, =_sbss
 8001da4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001da8:	20000268 	.word	0x20000268

08001dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dac:	e7fe      	b.n	8001dac <ADC_IRQHandler>
	...

08001db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001db4:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_Init+0x40>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0d      	ldr	r2, [pc, #52]	; (8001df0 <HAL_Init+0x40>)
 8001dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_Init+0x40>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <HAL_Init+0x40>)
 8001dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <HAL_Init+0x40>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a07      	ldr	r2, [pc, #28]	; (8001df0 <HAL_Init+0x40>)
 8001dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd8:	2003      	movs	r0, #3
 8001dda:	f000 f931 	bl	8002040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dde:	2000      	movs	r0, #0
 8001de0:	f000 f808 	bl	8001df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de4:	f7ff fe90 	bl	8001b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40023c00 	.word	0x40023c00

08001df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_InitTick+0x54>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_InitTick+0x58>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4619      	mov	r1, r3
 8001e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 f93b 	bl	800208e <HAL_SYSTICK_Config>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e00e      	b.n	8001e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b0f      	cmp	r3, #15
 8001e26:	d80a      	bhi.n	8001e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e30:	f000 f911 	bl	8002056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e34:	4a06      	ldr	r2, [pc, #24]	; (8001e50 <HAL_InitTick+0x5c>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e000      	b.n	8001e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000008 	.word	0x20000008
 8001e4c:	20000010 	.word	0x20000010
 8001e50:	2000000c 	.word	0x2000000c

08001e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_IncTick+0x20>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_IncTick+0x24>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <HAL_IncTick+0x24>)
 8001e66:	6013      	str	r3, [r2, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000010 	.word	0x20000010
 8001e78:	2000011c 	.word	0x2000011c

08001e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <HAL_GetTick+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	2000011c 	.word	0x2000011c

08001e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e9c:	f7ff ffee 	bl	8001e7c <HAL_GetTick>
 8001ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eac:	d005      	beq.n	8001eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <HAL_Delay+0x44>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eba:	bf00      	nop
 8001ebc:	f7ff ffde 	bl	8001e7c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d8f7      	bhi.n	8001ebc <HAL_Delay+0x28>
  {
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000010 	.word	0x20000010

08001edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f0e:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	60d3      	str	r3, [r2, #12]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <__NVIC_GetPriorityGrouping+0x18>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	f003 0307 	and.w	r3, r3, #7
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db0a      	blt.n	8001f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	490c      	ldr	r1, [pc, #48]	; (8001f8c <__NVIC_SetPriority+0x4c>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f68:	e00a      	b.n	8001f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4908      	ldr	r1, [pc, #32]	; (8001f90 <__NVIC_SetPriority+0x50>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3b04      	subs	r3, #4
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	761a      	strb	r2, [r3, #24]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000e100 	.word	0xe000e100
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	; 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f1c3 0307 	rsb	r3, r3, #7
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	bf28      	it	cs
 8001fb2:	2304      	movcs	r3, #4
 8001fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d902      	bls.n	8001fc4 <NVIC_EncodePriority+0x30>
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3b03      	subs	r3, #3
 8001fc2:	e000      	b.n	8001fc6 <NVIC_EncodePriority+0x32>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	43d9      	mvns	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	4313      	orrs	r3, r2
         );
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3724      	adds	r7, #36	; 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800200c:	d301      	bcc.n	8002012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200e:	2301      	movs	r3, #1
 8002010:	e00f      	b.n	8002032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002012:	4a0a      	ldr	r2, [pc, #40]	; (800203c <SysTick_Config+0x40>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201a:	210f      	movs	r1, #15
 800201c:	f04f 30ff 	mov.w	r0, #4294967295
 8002020:	f7ff ff8e 	bl	8001f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <SysTick_Config+0x40>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202a:	4b04      	ldr	r3, [pc, #16]	; (800203c <SysTick_Config+0x40>)
 800202c:	2207      	movs	r2, #7
 800202e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	e000e010 	.word	0xe000e010

08002040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ff47 	bl	8001edc <__NVIC_SetPriorityGrouping>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002068:	f7ff ff5c 	bl	8001f24 <__NVIC_GetPriorityGrouping>
 800206c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	6978      	ldr	r0, [r7, #20]
 8002074:	f7ff ff8e 	bl	8001f94 <NVIC_EncodePriority>
 8002078:	4602      	mov	r2, r0
 800207a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff5d 	bl	8001f40 <__NVIC_SetPriority>
}
 8002086:	bf00      	nop
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ffb0 	bl	8001ffc <SysTick_Config>
 800209c:	4603      	mov	r3, r0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	; 0x24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	e159      	b.n	8002378 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020c4:	2201      	movs	r2, #1
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	429a      	cmp	r2, r3
 80020de:	f040 8148 	bne.w	8002372 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d005      	beq.n	80020fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d130      	bne.n	800215c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	2203      	movs	r2, #3
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002130:	2201      	movs	r2, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 0201 	and.w	r2, r3, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	2b03      	cmp	r3, #3
 8002166:	d017      	beq.n	8002198 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2203      	movs	r2, #3
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d123      	bne.n	80021ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	08da      	lsrs	r2, r3, #3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3208      	adds	r2, #8
 80021ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	220f      	movs	r2, #15
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	08da      	lsrs	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3208      	adds	r2, #8
 80021e6:	69b9      	ldr	r1, [r7, #24]
 80021e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2203      	movs	r2, #3
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0203 	and.w	r2, r3, #3
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80a2 	beq.w	8002372 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b57      	ldr	r3, [pc, #348]	; (8002390 <HAL_GPIO_Init+0x2e8>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	4a56      	ldr	r2, [pc, #344]	; (8002390 <HAL_GPIO_Init+0x2e8>)
 8002238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800223c:	6453      	str	r3, [r2, #68]	; 0x44
 800223e:	4b54      	ldr	r3, [pc, #336]	; (8002390 <HAL_GPIO_Init+0x2e8>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800224a:	4a52      	ldr	r2, [pc, #328]	; (8002394 <HAL_GPIO_Init+0x2ec>)
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	089b      	lsrs	r3, r3, #2
 8002250:	3302      	adds	r3, #2
 8002252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	220f      	movs	r2, #15
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a49      	ldr	r2, [pc, #292]	; (8002398 <HAL_GPIO_Init+0x2f0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d019      	beq.n	80022aa <HAL_GPIO_Init+0x202>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a48      	ldr	r2, [pc, #288]	; (800239c <HAL_GPIO_Init+0x2f4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d013      	beq.n	80022a6 <HAL_GPIO_Init+0x1fe>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a47      	ldr	r2, [pc, #284]	; (80023a0 <HAL_GPIO_Init+0x2f8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00d      	beq.n	80022a2 <HAL_GPIO_Init+0x1fa>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a46      	ldr	r2, [pc, #280]	; (80023a4 <HAL_GPIO_Init+0x2fc>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d007      	beq.n	800229e <HAL_GPIO_Init+0x1f6>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a45      	ldr	r2, [pc, #276]	; (80023a8 <HAL_GPIO_Init+0x300>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d101      	bne.n	800229a <HAL_GPIO_Init+0x1f2>
 8002296:	2304      	movs	r3, #4
 8002298:	e008      	b.n	80022ac <HAL_GPIO_Init+0x204>
 800229a:	2307      	movs	r3, #7
 800229c:	e006      	b.n	80022ac <HAL_GPIO_Init+0x204>
 800229e:	2303      	movs	r3, #3
 80022a0:	e004      	b.n	80022ac <HAL_GPIO_Init+0x204>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e002      	b.n	80022ac <HAL_GPIO_Init+0x204>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_GPIO_Init+0x204>
 80022aa:	2300      	movs	r3, #0
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	f002 0203 	and.w	r2, r2, #3
 80022b2:	0092      	lsls	r2, r2, #2
 80022b4:	4093      	lsls	r3, r2
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022bc:	4935      	ldr	r1, [pc, #212]	; (8002394 <HAL_GPIO_Init+0x2ec>)
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	089b      	lsrs	r3, r3, #2
 80022c2:	3302      	adds	r3, #2
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ca:	4b38      	ldr	r3, [pc, #224]	; (80023ac <HAL_GPIO_Init+0x304>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ee:	4a2f      	ldr	r2, [pc, #188]	; (80023ac <HAL_GPIO_Init+0x304>)
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022f4:	4b2d      	ldr	r3, [pc, #180]	; (80023ac <HAL_GPIO_Init+0x304>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002318:	4a24      	ldr	r2, [pc, #144]	; (80023ac <HAL_GPIO_Init+0x304>)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800231e:	4b23      	ldr	r3, [pc, #140]	; (80023ac <HAL_GPIO_Init+0x304>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002342:	4a1a      	ldr	r2, [pc, #104]	; (80023ac <HAL_GPIO_Init+0x304>)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002348:	4b18      	ldr	r3, [pc, #96]	; (80023ac <HAL_GPIO_Init+0x304>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800236c:	4a0f      	ldr	r2, [pc, #60]	; (80023ac <HAL_GPIO_Init+0x304>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3301      	adds	r3, #1
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	2b0f      	cmp	r3, #15
 800237c:	f67f aea2 	bls.w	80020c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	3724      	adds	r7, #36	; 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800
 8002394:	40013800 	.word	0x40013800
 8002398:	40020000 	.word	0x40020000
 800239c:	40020400 	.word	0x40020400
 80023a0:	40020800 	.word	0x40020800
 80023a4:	40020c00 	.word	0x40020c00
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40013c00 	.word	0x40013c00

080023b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]
 80023bc:	4613      	mov	r3, r2
 80023be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c0:	787b      	ldrb	r3, [r7, #1]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023cc:	e003      	b.n	80023d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ce:	887b      	ldrh	r3, [r7, #2]
 80023d0:	041a      	lsls	r2, r3, #16
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	619a      	str	r2, [r3, #24]
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
	...

080023e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e12b      	b.n	800264e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d106      	bne.n	8002410 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff fba4 	bl	8001b58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2224      	movs	r2, #36	; 0x24
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0201 	bic.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002436:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002446:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002448:	f001 fbd2 	bl	8003bf0 <HAL_RCC_GetPCLK1Freq>
 800244c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4a81      	ldr	r2, [pc, #516]	; (8002658 <HAL_I2C_Init+0x274>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d807      	bhi.n	8002468 <HAL_I2C_Init+0x84>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4a80      	ldr	r2, [pc, #512]	; (800265c <HAL_I2C_Init+0x278>)
 800245c:	4293      	cmp	r3, r2
 800245e:	bf94      	ite	ls
 8002460:	2301      	movls	r3, #1
 8002462:	2300      	movhi	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	e006      	b.n	8002476 <HAL_I2C_Init+0x92>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4a7d      	ldr	r2, [pc, #500]	; (8002660 <HAL_I2C_Init+0x27c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	bf94      	ite	ls
 8002470:	2301      	movls	r3, #1
 8002472:	2300      	movhi	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0e7      	b.n	800264e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4a78      	ldr	r2, [pc, #480]	; (8002664 <HAL_I2C_Init+0x280>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	0c9b      	lsrs	r3, r3, #18
 8002488:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	430a      	orrs	r2, r1
 800249c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a6a      	ldr	r2, [pc, #424]	; (8002658 <HAL_I2C_Init+0x274>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d802      	bhi.n	80024b8 <HAL_I2C_Init+0xd4>
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	3301      	adds	r3, #1
 80024b6:	e009      	b.n	80024cc <HAL_I2C_Init+0xe8>
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024be:	fb02 f303 	mul.w	r3, r2, r3
 80024c2:	4a69      	ldr	r2, [pc, #420]	; (8002668 <HAL_I2C_Init+0x284>)
 80024c4:	fba2 2303 	umull	r2, r3, r2, r3
 80024c8:	099b      	lsrs	r3, r3, #6
 80024ca:	3301      	adds	r3, #1
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	430b      	orrs	r3, r1
 80024d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	495c      	ldr	r1, [pc, #368]	; (8002658 <HAL_I2C_Init+0x274>)
 80024e8:	428b      	cmp	r3, r1
 80024ea:	d819      	bhi.n	8002520 <HAL_I2C_Init+0x13c>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1e59      	subs	r1, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80024fa:	1c59      	adds	r1, r3, #1
 80024fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002500:	400b      	ands	r3, r1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <HAL_I2C_Init+0x138>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1e59      	subs	r1, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	fbb1 f3f3 	udiv	r3, r1, r3
 8002514:	3301      	adds	r3, #1
 8002516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251a:	e051      	b.n	80025c0 <HAL_I2C_Init+0x1dc>
 800251c:	2304      	movs	r3, #4
 800251e:	e04f      	b.n	80025c0 <HAL_I2C_Init+0x1dc>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d111      	bne.n	800254c <HAL_I2C_Init+0x168>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1e58      	subs	r0, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6859      	ldr	r1, [r3, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	440b      	add	r3, r1
 8002536:	fbb0 f3f3 	udiv	r3, r0, r3
 800253a:	3301      	adds	r3, #1
 800253c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002540:	2b00      	cmp	r3, #0
 8002542:	bf0c      	ite	eq
 8002544:	2301      	moveq	r3, #1
 8002546:	2300      	movne	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	e012      	b.n	8002572 <HAL_I2C_Init+0x18e>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1e58      	subs	r0, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	0099      	lsls	r1, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002562:	3301      	adds	r3, #1
 8002564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf0c      	ite	eq
 800256c:	2301      	moveq	r3, #1
 800256e:	2300      	movne	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_I2C_Init+0x196>
 8002576:	2301      	movs	r3, #1
 8002578:	e022      	b.n	80025c0 <HAL_I2C_Init+0x1dc>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10e      	bne.n	80025a0 <HAL_I2C_Init+0x1bc>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1e58      	subs	r0, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6859      	ldr	r1, [r3, #4]
 800258a:	460b      	mov	r3, r1
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	440b      	add	r3, r1
 8002590:	fbb0 f3f3 	udiv	r3, r0, r3
 8002594:	3301      	adds	r3, #1
 8002596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800259e:	e00f      	b.n	80025c0 <HAL_I2C_Init+0x1dc>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1e58      	subs	r0, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6859      	ldr	r1, [r3, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	0099      	lsls	r1, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b6:	3301      	adds	r3, #1
 80025b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	6809      	ldr	r1, [r1, #0]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69da      	ldr	r2, [r3, #28]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6911      	ldr	r1, [r2, #16]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68d2      	ldr	r2, [r2, #12]
 80025fa:	4311      	orrs	r1, r2
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	430b      	orrs	r3, r1
 8002602:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2220      	movs	r2, #32
 800263a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	000186a0 	.word	0x000186a0
 800265c:	001e847f 	.word	0x001e847f
 8002660:	003d08ff 	.word	0x003d08ff
 8002664:	431bde83 	.word	0x431bde83
 8002668:	10624dd3 	.word	0x10624dd3

0800266c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af02      	add	r7, sp, #8
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	461a      	mov	r2, r3
 8002678:	460b      	mov	r3, r1
 800267a:	817b      	strh	r3, [r7, #10]
 800267c:	4613      	mov	r3, r2
 800267e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002680:	f7ff fbfc 	bl	8001e7c <HAL_GetTick>
 8002684:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b20      	cmp	r3, #32
 8002690:	f040 80e0 	bne.w	8002854 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	2319      	movs	r3, #25
 800269a:	2201      	movs	r2, #1
 800269c:	4970      	ldr	r1, [pc, #448]	; (8002860 <HAL_I2C_Master_Transmit+0x1f4>)
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 fc58 	bl	8002f54 <I2C_WaitOnFlagUntilTimeout>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026aa:	2302      	movs	r3, #2
 80026ac:	e0d3      	b.n	8002856 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_I2C_Master_Transmit+0x50>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e0cc      	b.n	8002856 <HAL_I2C_Master_Transmit+0x1ea>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d007      	beq.n	80026e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0201 	orr.w	r2, r2, #1
 80026e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2221      	movs	r2, #33	; 0x21
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2210      	movs	r2, #16
 80026fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	893a      	ldrh	r2, [r7, #8]
 8002712:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4a50      	ldr	r2, [pc, #320]	; (8002864 <HAL_I2C_Master_Transmit+0x1f8>)
 8002722:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002724:	8979      	ldrh	r1, [r7, #10]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	6a3a      	ldr	r2, [r7, #32]
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 fac2 	bl	8002cb4 <I2C_MasterRequestWrite>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e08d      	b.n	8002856 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800273a:	2300      	movs	r3, #0
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002750:	e066      	b.n	8002820 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	6a39      	ldr	r1, [r7, #32]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 fcd2 	bl	8003100 <I2C_WaitOnTXEFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00d      	beq.n	800277e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	2b04      	cmp	r3, #4
 8002768:	d107      	bne.n	800277a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002778:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e06b      	b.n	8002856 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	781a      	ldrb	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d11b      	bne.n	80027f4 <HAL_I2C_Master_Transmit+0x188>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d017      	beq.n	80027f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	781a      	ldrb	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	6a39      	ldr	r1, [r7, #32]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 fcc2 	bl	8003182 <I2C_WaitOnBTFFlagUntilTimeout>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00d      	beq.n	8002820 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	2b04      	cmp	r3, #4
 800280a:	d107      	bne.n	800281c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e01a      	b.n	8002856 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002824:	2b00      	cmp	r3, #0
 8002826:	d194      	bne.n	8002752 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	e000      	b.n	8002856 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002854:	2302      	movs	r3, #2
  }
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	00100002 	.word	0x00100002
 8002864:	ffff0000 	.word	0xffff0000

08002868 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08c      	sub	sp, #48	; 0x30
 800286c:	af02      	add	r7, sp, #8
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	461a      	mov	r2, r3
 8002874:	460b      	mov	r3, r1
 8002876:	817b      	strh	r3, [r7, #10]
 8002878:	4613      	mov	r3, r2
 800287a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800287c:	f7ff fafe 	bl	8001e7c <HAL_GetTick>
 8002880:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b20      	cmp	r3, #32
 800288c:	f040 820b 	bne.w	8002ca6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	2319      	movs	r3, #25
 8002896:	2201      	movs	r2, #1
 8002898:	497c      	ldr	r1, [pc, #496]	; (8002a8c <HAL_I2C_Master_Receive+0x224>)
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fb5a 	bl	8002f54 <I2C_WaitOnFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80028a6:	2302      	movs	r3, #2
 80028a8:	e1fe      	b.n	8002ca8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_I2C_Master_Receive+0x50>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e1f7      	b.n	8002ca8 <HAL_I2C_Master_Receive+0x440>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d007      	beq.n	80028de <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0201 	orr.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2222      	movs	r2, #34	; 0x22
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2210      	movs	r2, #16
 80028fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	893a      	ldrh	r2, [r7, #8]
 800290e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4a5c      	ldr	r2, [pc, #368]	; (8002a90 <HAL_I2C_Master_Receive+0x228>)
 800291e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002920:	8979      	ldrh	r1, [r7, #10]
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 fa46 	bl	8002db8 <I2C_MasterRequestRead>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e1b8      	b.n	8002ca8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293a:	2b00      	cmp	r3, #0
 800293c:	d113      	bne.n	8002966 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293e:	2300      	movs	r3, #0
 8002940:	623b      	str	r3, [r7, #32]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	623b      	str	r3, [r7, #32]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	623b      	str	r3, [r7, #32]
 8002952:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	e18c      	b.n	8002c80 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296a:	2b01      	cmp	r3, #1
 800296c:	d11b      	bne.n	80029a6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800297c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	61fb      	str	r3, [r7, #28]
 8002992:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	e16c      	b.n	8002c80 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d11b      	bne.n	80029e6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ce:	2300      	movs	r3, #0
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	e14c      	b.n	8002c80 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a0c:	e138      	b.n	8002c80 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	f200 80f1 	bhi.w	8002bfa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d123      	bne.n	8002a68 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 fbed 	bl	8003204 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e139      	b.n	8002ca8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a66:	e10b      	b.n	8002c80 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d14e      	bne.n	8002b0e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a76:	2200      	movs	r2, #0
 8002a78:	4906      	ldr	r1, [pc, #24]	; (8002a94 <HAL_I2C_Master_Receive+0x22c>)
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 fa6a 	bl	8002f54 <I2C_WaitOnFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d008      	beq.n	8002a98 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e10e      	b.n	8002ca8 <HAL_I2C_Master_Receive+0x440>
 8002a8a:	bf00      	nop
 8002a8c:	00100002 	.word	0x00100002
 8002a90:	ffff0000 	.word	0xffff0000
 8002a94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691a      	ldr	r2, [r3, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b0c:	e0b8      	b.n	8002c80 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	2200      	movs	r2, #0
 8002b16:	4966      	ldr	r1, [pc, #408]	; (8002cb0 <HAL_I2C_Master_Receive+0x448>)
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 fa1b 	bl	8002f54 <I2C_WaitOnFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0bf      	b.n	8002ca8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691a      	ldr	r2, [r3, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	2200      	movs	r2, #0
 8002b72:	494f      	ldr	r1, [pc, #316]	; (8002cb0 <HAL_I2C_Master_Receive+0x448>)
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f9ed 	bl	8002f54 <I2C_WaitOnFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e091      	b.n	8002ca8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691a      	ldr	r2, [r3, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bf8:	e042      	b.n	8002c80 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 fb00 	bl	8003204 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e04c      	b.n	8002ca8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d118      	bne.n	8002c80 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f47f aec2 	bne.w	8002a0e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	e000      	b.n	8002ca8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002ca6:	2302      	movs	r3, #2
  }
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3728      	adds	r7, #40	; 0x28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	00010004 	.word	0x00010004

08002cb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	607a      	str	r2, [r7, #4]
 8002cbe:	603b      	str	r3, [r7, #0]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d006      	beq.n	8002cde <I2C_MasterRequestWrite+0x2a>
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d003      	beq.n	8002cde <I2C_MasterRequestWrite+0x2a>
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cdc:	d108      	bne.n	8002cf0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	e00b      	b.n	8002d08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	2b12      	cmp	r3, #18
 8002cf6:	d107      	bne.n	8002d08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f91d 	bl	8002f54 <I2C_WaitOnFlagUntilTimeout>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00d      	beq.n	8002d3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d2e:	d103      	bne.n	8002d38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e035      	b.n	8002da8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d44:	d108      	bne.n	8002d58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d46:	897b      	ldrh	r3, [r7, #10]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d54:	611a      	str	r2, [r3, #16]
 8002d56:	e01b      	b.n	8002d90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d58:	897b      	ldrh	r3, [r7, #10]
 8002d5a:	11db      	asrs	r3, r3, #7
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f003 0306 	and.w	r3, r3, #6
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	f063 030f 	orn	r3, r3, #15
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	490e      	ldr	r1, [pc, #56]	; (8002db0 <I2C_MasterRequestWrite+0xfc>)
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f943 	bl	8003002 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e010      	b.n	8002da8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d86:	897b      	ldrh	r3, [r7, #10]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4907      	ldr	r1, [pc, #28]	; (8002db4 <I2C_MasterRequestWrite+0x100>)
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f933 	bl	8003002 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	00010008 	.word	0x00010008
 8002db4:	00010002 	.word	0x00010002

08002db8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ddc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d006      	beq.n	8002df2 <I2C_MasterRequestRead+0x3a>
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d003      	beq.n	8002df2 <I2C_MasterRequestRead+0x3a>
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002df0:	d108      	bne.n	8002e04 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	e00b      	b.n	8002e1c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	2b11      	cmp	r3, #17
 8002e0a:	d107      	bne.n	8002e1c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f893 	bl	8002f54 <I2C_WaitOnFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00d      	beq.n	8002e50 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e42:	d103      	bne.n	8002e4c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e079      	b.n	8002f44 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e58:	d108      	bne.n	8002e6c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e5a:	897b      	ldrh	r3, [r7, #10]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	611a      	str	r2, [r3, #16]
 8002e6a:	e05f      	b.n	8002f2c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e6c:	897b      	ldrh	r3, [r7, #10]
 8002e6e:	11db      	asrs	r3, r3, #7
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f003 0306 	and.w	r3, r3, #6
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	f063 030f 	orn	r3, r3, #15
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	4930      	ldr	r1, [pc, #192]	; (8002f4c <I2C_MasterRequestRead+0x194>)
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f8b9 	bl	8003002 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e054      	b.n	8002f44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e9a:	897b      	ldrh	r3, [r7, #10]
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4929      	ldr	r1, [pc, #164]	; (8002f50 <I2C_MasterRequestRead+0x198>)
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f8a9 	bl	8003002 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e044      	b.n	8002f44 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eba:	2300      	movs	r3, #0
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ede:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f831 	bl	8002f54 <I2C_WaitOnFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00d      	beq.n	8002f14 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f06:	d103      	bne.n	8002f10 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f0e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e017      	b.n	8002f44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f14:	897b      	ldrh	r3, [r7, #10]
 8002f16:	11db      	asrs	r3, r3, #7
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f003 0306 	and.w	r3, r3, #6
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f063 030e 	orn	r3, r3, #14
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	4907      	ldr	r1, [pc, #28]	; (8002f50 <I2C_MasterRequestRead+0x198>)
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f865 	bl	8003002 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	00010008 	.word	0x00010008
 8002f50:	00010002 	.word	0x00010002

08002f54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	4613      	mov	r3, r2
 8002f62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f64:	e025      	b.n	8002fb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6c:	d021      	beq.n	8002fb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6e:	f7fe ff85 	bl	8001e7c <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d302      	bcc.n	8002f84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d116      	bne.n	8002fb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f043 0220 	orr.w	r2, r3, #32
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e023      	b.n	8002ffa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	0c1b      	lsrs	r3, r3, #16
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d10d      	bne.n	8002fd8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	43da      	mvns	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	bf0c      	ite	eq
 8002fce:	2301      	moveq	r3, #1
 8002fd0:	2300      	movne	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	e00c      	b.n	8002ff2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	43da      	mvns	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	bf0c      	ite	eq
 8002fea:	2301      	moveq	r3, #1
 8002fec:	2300      	movne	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d0b6      	beq.n	8002f66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b084      	sub	sp, #16
 8003006:	af00      	add	r7, sp, #0
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
 800300e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003010:	e051      	b.n	80030b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003020:	d123      	bne.n	800306a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003030:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800303a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f043 0204 	orr.w	r2, r3, #4
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e046      	b.n	80030f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d021      	beq.n	80030b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003072:	f7fe ff03 	bl	8001e7c <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	429a      	cmp	r2, r3
 8003080:	d302      	bcc.n	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d116      	bne.n	80030b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f043 0220 	orr.w	r2, r3, #32
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e020      	b.n	80030f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	0c1b      	lsrs	r3, r3, #16
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d10c      	bne.n	80030da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	43da      	mvns	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	4013      	ands	r3, r2
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	bf14      	ite	ne
 80030d2:	2301      	movne	r3, #1
 80030d4:	2300      	moveq	r3, #0
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	e00b      	b.n	80030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	43da      	mvns	r2, r3
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	4013      	ands	r3, r2
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bf14      	ite	ne
 80030ec:	2301      	movne	r3, #1
 80030ee:	2300      	moveq	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d18d      	bne.n	8003012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800310c:	e02d      	b.n	800316a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f8ce 	bl	80032b0 <I2C_IsAcknowledgeFailed>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e02d      	b.n	800317a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003124:	d021      	beq.n	800316a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003126:	f7fe fea9 	bl	8001e7c <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	429a      	cmp	r2, r3
 8003134:	d302      	bcc.n	800313c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d116      	bne.n	800316a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f043 0220 	orr.w	r2, r3, #32
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e007      	b.n	800317a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003174:	2b80      	cmp	r3, #128	; 0x80
 8003176:	d1ca      	bne.n	800310e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800318e:	e02d      	b.n	80031ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f88d 	bl	80032b0 <I2C_IsAcknowledgeFailed>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e02d      	b.n	80031fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a6:	d021      	beq.n	80031ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a8:	f7fe fe68 	bl	8001e7c <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d302      	bcc.n	80031be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d116      	bne.n	80031ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	f043 0220 	orr.w	r2, r3, #32
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e007      	b.n	80031fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d1ca      	bne.n	8003190 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003210:	e042      	b.n	8003298 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	2b10      	cmp	r3, #16
 800321e:	d119      	bne.n	8003254 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0210 	mvn.w	r2, #16
 8003228:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e029      	b.n	80032a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003254:	f7fe fe12 	bl	8001e7c <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	429a      	cmp	r2, r3
 8003262:	d302      	bcc.n	800326a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d116      	bne.n	8003298 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f043 0220 	orr.w	r2, r3, #32
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e007      	b.n	80032a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a2:	2b40      	cmp	r3, #64	; 0x40
 80032a4:	d1b5      	bne.n	8003212 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c6:	d11b      	bne.n	8003300 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f043 0204 	orr.w	r2, r3, #4
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e267      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d075      	beq.n	800341a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800332e:	4b88      	ldr	r3, [pc, #544]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b04      	cmp	r3, #4
 8003338:	d00c      	beq.n	8003354 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800333a:	4b85      	ldr	r3, [pc, #532]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003342:	2b08      	cmp	r3, #8
 8003344:	d112      	bne.n	800336c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003346:	4b82      	ldr	r3, [pc, #520]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003352:	d10b      	bne.n	800336c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003354:	4b7e      	ldr	r3, [pc, #504]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d05b      	beq.n	8003418 <HAL_RCC_OscConfig+0x108>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d157      	bne.n	8003418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e242      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003374:	d106      	bne.n	8003384 <HAL_RCC_OscConfig+0x74>
 8003376:	4b76      	ldr	r3, [pc, #472]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a75      	ldr	r2, [pc, #468]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	e01d      	b.n	80033c0 <HAL_RCC_OscConfig+0xb0>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x98>
 800338e:	4b70      	ldr	r3, [pc, #448]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a6f      	ldr	r2, [pc, #444]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	4b6d      	ldr	r3, [pc, #436]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a6c      	ldr	r2, [pc, #432]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	e00b      	b.n	80033c0 <HAL_RCC_OscConfig+0xb0>
 80033a8:	4b69      	ldr	r3, [pc, #420]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a68      	ldr	r2, [pc, #416]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 80033ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	4b66      	ldr	r3, [pc, #408]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a65      	ldr	r2, [pc, #404]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 80033ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d013      	beq.n	80033f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c8:	f7fe fd58 	bl	8001e7c <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d0:	f7fe fd54 	bl	8001e7c <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b64      	cmp	r3, #100	; 0x64
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e207      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e2:	4b5b      	ldr	r3, [pc, #364]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0xc0>
 80033ee:	e014      	b.n	800341a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f0:	f7fe fd44 	bl	8001e7c <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f8:	f7fe fd40 	bl	8001e7c <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b64      	cmp	r3, #100	; 0x64
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e1f3      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340a:	4b51      	ldr	r3, [pc, #324]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0xe8>
 8003416:	e000      	b.n	800341a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d063      	beq.n	80034ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003426:	4b4a      	ldr	r3, [pc, #296]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00b      	beq.n	800344a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003432:	4b47      	ldr	r3, [pc, #284]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800343a:	2b08      	cmp	r3, #8
 800343c:	d11c      	bne.n	8003478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800343e:	4b44      	ldr	r3, [pc, #272]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d116      	bne.n	8003478 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344a:	4b41      	ldr	r3, [pc, #260]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <HAL_RCC_OscConfig+0x152>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d001      	beq.n	8003462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e1c7      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003462:	4b3b      	ldr	r3, [pc, #236]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4937      	ldr	r1, [pc, #220]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003472:	4313      	orrs	r3, r2
 8003474:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003476:	e03a      	b.n	80034ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d020      	beq.n	80034c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003480:	4b34      	ldr	r3, [pc, #208]	; (8003554 <HAL_RCC_OscConfig+0x244>)
 8003482:	2201      	movs	r2, #1
 8003484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003486:	f7fe fcf9 	bl	8001e7c <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800348e:	f7fe fcf5 	bl	8001e7c <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e1a8      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a0:	4b2b      	ldr	r3, [pc, #172]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ac:	4b28      	ldr	r3, [pc, #160]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4925      	ldr	r1, [pc, #148]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	600b      	str	r3, [r1, #0]
 80034c0:	e015      	b.n	80034ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034c2:	4b24      	ldr	r3, [pc, #144]	; (8003554 <HAL_RCC_OscConfig+0x244>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fe fcd8 	bl	8001e7c <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d0:	f7fe fcd4 	bl	8001e7c <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e187      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e2:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d036      	beq.n	8003568 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d016      	beq.n	8003530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <HAL_RCC_OscConfig+0x248>)
 8003504:	2201      	movs	r2, #1
 8003506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003508:	f7fe fcb8 	bl	8001e7c <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003510:	f7fe fcb4 	bl	8001e7c <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e167      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003522:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <HAL_RCC_OscConfig+0x240>)
 8003524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0f0      	beq.n	8003510 <HAL_RCC_OscConfig+0x200>
 800352e:	e01b      	b.n	8003568 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003530:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_RCC_OscConfig+0x248>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003536:	f7fe fca1 	bl	8001e7c <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800353c:	e00e      	b.n	800355c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800353e:	f7fe fc9d 	bl	8001e7c <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d907      	bls.n	800355c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e150      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
 8003550:	40023800 	.word	0x40023800
 8003554:	42470000 	.word	0x42470000
 8003558:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800355c:	4b88      	ldr	r3, [pc, #544]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 800355e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1ea      	bne.n	800353e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 8097 	beq.w	80036a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003576:	2300      	movs	r3, #0
 8003578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800357a:	4b81      	ldr	r3, [pc, #516]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10f      	bne.n	80035a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	4b7d      	ldr	r3, [pc, #500]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	4a7c      	ldr	r2, [pc, #496]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 8003590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003594:	6413      	str	r3, [r2, #64]	; 0x40
 8003596:	4b7a      	ldr	r3, [pc, #488]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359e:	60bb      	str	r3, [r7, #8]
 80035a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035a2:	2301      	movs	r3, #1
 80035a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a6:	4b77      	ldr	r3, [pc, #476]	; (8003784 <HAL_RCC_OscConfig+0x474>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d118      	bne.n	80035e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035b2:	4b74      	ldr	r3, [pc, #464]	; (8003784 <HAL_RCC_OscConfig+0x474>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a73      	ldr	r2, [pc, #460]	; (8003784 <HAL_RCC_OscConfig+0x474>)
 80035b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035be:	f7fe fc5d 	bl	8001e7c <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c6:	f7fe fc59 	bl	8001e7c <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e10c      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d8:	4b6a      	ldr	r3, [pc, #424]	; (8003784 <HAL_RCC_OscConfig+0x474>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f0      	beq.n	80035c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d106      	bne.n	80035fa <HAL_RCC_OscConfig+0x2ea>
 80035ec:	4b64      	ldr	r3, [pc, #400]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 80035ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f0:	4a63      	ldr	r2, [pc, #396]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	6713      	str	r3, [r2, #112]	; 0x70
 80035f8:	e01c      	b.n	8003634 <HAL_RCC_OscConfig+0x324>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b05      	cmp	r3, #5
 8003600:	d10c      	bne.n	800361c <HAL_RCC_OscConfig+0x30c>
 8003602:	4b5f      	ldr	r3, [pc, #380]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	4a5e      	ldr	r2, [pc, #376]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 8003608:	f043 0304 	orr.w	r3, r3, #4
 800360c:	6713      	str	r3, [r2, #112]	; 0x70
 800360e:	4b5c      	ldr	r3, [pc, #368]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	4a5b      	ldr	r2, [pc, #364]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	6713      	str	r3, [r2, #112]	; 0x70
 800361a:	e00b      	b.n	8003634 <HAL_RCC_OscConfig+0x324>
 800361c:	4b58      	ldr	r3, [pc, #352]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	4a57      	ldr	r2, [pc, #348]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 8003622:	f023 0301 	bic.w	r3, r3, #1
 8003626:	6713      	str	r3, [r2, #112]	; 0x70
 8003628:	4b55      	ldr	r3, [pc, #340]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 800362a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362c:	4a54      	ldr	r2, [pc, #336]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 800362e:	f023 0304 	bic.w	r3, r3, #4
 8003632:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d015      	beq.n	8003668 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363c:	f7fe fc1e 	bl	8001e7c <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003642:	e00a      	b.n	800365a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003644:	f7fe fc1a 	bl	8001e7c <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e0cb      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365a:	4b49      	ldr	r3, [pc, #292]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0ee      	beq.n	8003644 <HAL_RCC_OscConfig+0x334>
 8003666:	e014      	b.n	8003692 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003668:	f7fe fc08 	bl	8001e7c <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366e:	e00a      	b.n	8003686 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003670:	f7fe fc04 	bl	8001e7c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	; 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e0b5      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003686:	4b3e      	ldr	r3, [pc, #248]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 8003688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1ee      	bne.n	8003670 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003692:	7dfb      	ldrb	r3, [r7, #23]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d105      	bne.n	80036a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003698:	4b39      	ldr	r3, [pc, #228]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	4a38      	ldr	r2, [pc, #224]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 800369e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80a1 	beq.w	80037f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ae:	4b34      	ldr	r3, [pc, #208]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d05c      	beq.n	8003774 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d141      	bne.n	8003746 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c2:	4b31      	ldr	r3, [pc, #196]	; (8003788 <HAL_RCC_OscConfig+0x478>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c8:	f7fe fbd8 	bl	8001e7c <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d0:	f7fe fbd4 	bl	8001e7c <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e087      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e2:	4b27      	ldr	r3, [pc, #156]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69da      	ldr	r2, [r3, #28]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	019b      	lsls	r3, r3, #6
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	085b      	lsrs	r3, r3, #1
 8003706:	3b01      	subs	r3, #1
 8003708:	041b      	lsls	r3, r3, #16
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	061b      	lsls	r3, r3, #24
 8003712:	491b      	ldr	r1, [pc, #108]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 8003714:	4313      	orrs	r3, r2
 8003716:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003718:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <HAL_RCC_OscConfig+0x478>)
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371e:	f7fe fbad 	bl	8001e7c <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003726:	f7fe fba9 	bl	8001e7c <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e05c      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003738:	4b11      	ldr	r3, [pc, #68]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0f0      	beq.n	8003726 <HAL_RCC_OscConfig+0x416>
 8003744:	e054      	b.n	80037f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003746:	4b10      	ldr	r3, [pc, #64]	; (8003788 <HAL_RCC_OscConfig+0x478>)
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374c:	f7fe fb96 	bl	8001e7c <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003754:	f7fe fb92 	bl	8001e7c <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e045      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_RCC_OscConfig+0x470>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f0      	bne.n	8003754 <HAL_RCC_OscConfig+0x444>
 8003772:	e03d      	b.n	80037f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d107      	bne.n	800378c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e038      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
 8003780:	40023800 	.word	0x40023800
 8003784:	40007000 	.word	0x40007000
 8003788:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800378c:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <HAL_RCC_OscConfig+0x4ec>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d028      	beq.n	80037ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d121      	bne.n	80037ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d11a      	bne.n	80037ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037bc:	4013      	ands	r3, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d111      	bne.n	80037ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d2:	085b      	lsrs	r3, r3, #1
 80037d4:	3b01      	subs	r3, #1
 80037d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d8:	429a      	cmp	r2, r3
 80037da:	d107      	bne.n	80037ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40023800 	.word	0x40023800

08003800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0cc      	b.n	80039ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003814:	4b68      	ldr	r3, [pc, #416]	; (80039b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d90c      	bls.n	800383c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003822:	4b65      	ldr	r3, [pc, #404]	; (80039b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800382a:	4b63      	ldr	r3, [pc, #396]	; (80039b8 <HAL_RCC_ClockConfig+0x1b8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d001      	beq.n	800383c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0b8      	b.n	80039ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d020      	beq.n	800388a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003854:	4b59      	ldr	r3, [pc, #356]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	4a58      	ldr	r2, [pc, #352]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800385e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800386c:	4b53      	ldr	r3, [pc, #332]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	4a52      	ldr	r2, [pc, #328]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003878:	4b50      	ldr	r3, [pc, #320]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	494d      	ldr	r1, [pc, #308]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d044      	beq.n	8003920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d107      	bne.n	80038ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389e:	4b47      	ldr	r3, [pc, #284]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d119      	bne.n	80038de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e07f      	b.n	80039ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d003      	beq.n	80038be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	d107      	bne.n	80038ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038be:	4b3f      	ldr	r3, [pc, #252]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e06f      	b.n	80039ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ce:	4b3b      	ldr	r3, [pc, #236]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e067      	b.n	80039ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038de:	4b37      	ldr	r3, [pc, #220]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f023 0203 	bic.w	r2, r3, #3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4934      	ldr	r1, [pc, #208]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038f0:	f7fe fac4 	bl	8001e7c <HAL_GetTick>
 80038f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	e00a      	b.n	800390e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f8:	f7fe fac0 	bl	8001e7c <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f241 3288 	movw	r2, #5000	; 0x1388
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e04f      	b.n	80039ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390e:	4b2b      	ldr	r3, [pc, #172]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 020c 	and.w	r2, r3, #12
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	429a      	cmp	r2, r3
 800391e:	d1eb      	bne.n	80038f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003920:	4b25      	ldr	r3, [pc, #148]	; (80039b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d20c      	bcs.n	8003948 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392e:	4b22      	ldr	r3, [pc, #136]	; (80039b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003936:	4b20      	ldr	r3, [pc, #128]	; (80039b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e032      	b.n	80039ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003954:	4b19      	ldr	r3, [pc, #100]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	4916      	ldr	r1, [pc, #88]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	4313      	orrs	r3, r2
 8003964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d009      	beq.n	8003986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003972:	4b12      	ldr	r3, [pc, #72]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	490e      	ldr	r1, [pc, #56]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	4313      	orrs	r3, r2
 8003984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003986:	f000 f821 	bl	80039cc <HAL_RCC_GetSysClockFreq>
 800398a:	4602      	mov	r2, r0
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	490a      	ldr	r1, [pc, #40]	; (80039c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003998:	5ccb      	ldrb	r3, [r1, r3]
 800399a:	fa22 f303 	lsr.w	r3, r2, r3
 800399e:	4a09      	ldr	r2, [pc, #36]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 80039a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039a2:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <HAL_RCC_ClockConfig+0x1c8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fe fa24 	bl	8001df4 <HAL_InitTick>

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40023c00 	.word	0x40023c00
 80039bc:	40023800 	.word	0x40023800
 80039c0:	080052a4 	.word	0x080052a4
 80039c4:	20000008 	.word	0x20000008
 80039c8:	2000000c 	.word	0x2000000c

080039cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039d0:	b094      	sub	sp, #80	; 0x50
 80039d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	647b      	str	r3, [r7, #68]	; 0x44
 80039d8:	2300      	movs	r3, #0
 80039da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039dc:	2300      	movs	r3, #0
 80039de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039e4:	4b79      	ldr	r3, [pc, #484]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x200>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 030c 	and.w	r3, r3, #12
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d00d      	beq.n	8003a0c <HAL_RCC_GetSysClockFreq+0x40>
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	f200 80e1 	bhi.w	8003bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <HAL_RCC_GetSysClockFreq+0x34>
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d003      	beq.n	8003a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80039fe:	e0db      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a00:	4b73      	ldr	r3, [pc, #460]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a04:	e0db      	b.n	8003bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a06:	4b73      	ldr	r3, [pc, #460]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a0a:	e0d8      	b.n	8003bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a0c:	4b6f      	ldr	r3, [pc, #444]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a16:	4b6d      	ldr	r3, [pc, #436]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d063      	beq.n	8003aea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a22:	4b6a      	ldr	r3, [pc, #424]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	099b      	lsrs	r3, r3, #6
 8003a28:	2200      	movs	r2, #0
 8003a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a34:	633b      	str	r3, [r7, #48]	; 0x30
 8003a36:	2300      	movs	r3, #0
 8003a38:	637b      	str	r3, [r7, #52]	; 0x34
 8003a3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a3e:	4622      	mov	r2, r4
 8003a40:	462b      	mov	r3, r5
 8003a42:	f04f 0000 	mov.w	r0, #0
 8003a46:	f04f 0100 	mov.w	r1, #0
 8003a4a:	0159      	lsls	r1, r3, #5
 8003a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a50:	0150      	lsls	r0, r2, #5
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	4621      	mov	r1, r4
 8003a58:	1a51      	subs	r1, r2, r1
 8003a5a:	6139      	str	r1, [r7, #16]
 8003a5c:	4629      	mov	r1, r5
 8003a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a70:	4659      	mov	r1, fp
 8003a72:	018b      	lsls	r3, r1, #6
 8003a74:	4651      	mov	r1, sl
 8003a76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a7a:	4651      	mov	r1, sl
 8003a7c:	018a      	lsls	r2, r1, #6
 8003a7e:	4651      	mov	r1, sl
 8003a80:	ebb2 0801 	subs.w	r8, r2, r1
 8003a84:	4659      	mov	r1, fp
 8003a86:	eb63 0901 	sbc.w	r9, r3, r1
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a9e:	4690      	mov	r8, r2
 8003aa0:	4699      	mov	r9, r3
 8003aa2:	4623      	mov	r3, r4
 8003aa4:	eb18 0303 	adds.w	r3, r8, r3
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	462b      	mov	r3, r5
 8003aac:	eb49 0303 	adc.w	r3, r9, r3
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003abe:	4629      	mov	r1, r5
 8003ac0:	024b      	lsls	r3, r1, #9
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ac8:	4621      	mov	r1, r4
 8003aca:	024a      	lsls	r2, r1, #9
 8003acc:	4610      	mov	r0, r2
 8003ace:	4619      	mov	r1, r3
 8003ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ad8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003adc:	f7fd f87e 	bl	8000bdc <__aeabi_uldivmod>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae8:	e058      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aea:	4b38      	ldr	r3, [pc, #224]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	099b      	lsrs	r3, r3, #6
 8003af0:	2200      	movs	r2, #0
 8003af2:	4618      	mov	r0, r3
 8003af4:	4611      	mov	r1, r2
 8003af6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003afa:	623b      	str	r3, [r7, #32]
 8003afc:	2300      	movs	r3, #0
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
 8003b00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b04:	4642      	mov	r2, r8
 8003b06:	464b      	mov	r3, r9
 8003b08:	f04f 0000 	mov.w	r0, #0
 8003b0c:	f04f 0100 	mov.w	r1, #0
 8003b10:	0159      	lsls	r1, r3, #5
 8003b12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b16:	0150      	lsls	r0, r2, #5
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4641      	mov	r1, r8
 8003b1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b22:	4649      	mov	r1, r9
 8003b24:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b3c:	ebb2 040a 	subs.w	r4, r2, sl
 8003b40:	eb63 050b 	sbc.w	r5, r3, fp
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	00eb      	lsls	r3, r5, #3
 8003b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b52:	00e2      	lsls	r2, r4, #3
 8003b54:	4614      	mov	r4, r2
 8003b56:	461d      	mov	r5, r3
 8003b58:	4643      	mov	r3, r8
 8003b5a:	18e3      	adds	r3, r4, r3
 8003b5c:	603b      	str	r3, [r7, #0]
 8003b5e:	464b      	mov	r3, r9
 8003b60:	eb45 0303 	adc.w	r3, r5, r3
 8003b64:	607b      	str	r3, [r7, #4]
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b72:	4629      	mov	r1, r5
 8003b74:	028b      	lsls	r3, r1, #10
 8003b76:	4621      	mov	r1, r4
 8003b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	028a      	lsls	r2, r1, #10
 8003b80:	4610      	mov	r0, r2
 8003b82:	4619      	mov	r1, r3
 8003b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b86:	2200      	movs	r2, #0
 8003b88:	61bb      	str	r3, [r7, #24]
 8003b8a:	61fa      	str	r2, [r7, #28]
 8003b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b90:	f7fd f824 	bl	8000bdc <__aeabi_uldivmod>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4613      	mov	r3, r2
 8003b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003bac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bb6:	e002      	b.n	8003bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bb8:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3750      	adds	r7, #80	; 0x50
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	00f42400 	.word	0x00f42400
 8003bd4:	007a1200 	.word	0x007a1200

08003bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bdc:	4b03      	ldr	r3, [pc, #12]	; (8003bec <HAL_RCC_GetHCLKFreq+0x14>)
 8003bde:	681b      	ldr	r3, [r3, #0]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000008 	.word	0x20000008

08003bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bf4:	f7ff fff0 	bl	8003bd8 <HAL_RCC_GetHCLKFreq>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	0a9b      	lsrs	r3, r3, #10
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	4903      	ldr	r1, [pc, #12]	; (8003c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c06:	5ccb      	ldrb	r3, [r1, r3]
 8003c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40023800 	.word	0x40023800
 8003c14:	080052b4 	.word	0x080052b4

08003c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c1c:	f7ff ffdc 	bl	8003bd8 <HAL_RCC_GetHCLKFreq>
 8003c20:	4602      	mov	r2, r0
 8003c22:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	0b5b      	lsrs	r3, r3, #13
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	4903      	ldr	r1, [pc, #12]	; (8003c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c2e:	5ccb      	ldrb	r3, [r1, r3]
 8003c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	080052b4 	.word	0x080052b4

08003c40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e03f      	b.n	8003cd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d106      	bne.n	8003c6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fd ffbe 	bl	8001be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2224      	movs	r2, #36	; 0x24
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f929 	bl	8003edc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695a      	ldr	r2, [r3, #20]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ca8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b08a      	sub	sp, #40	; 0x28
 8003cde:	af02      	add	r7, sp, #8
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	603b      	str	r3, [r7, #0]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d17c      	bne.n	8003df4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <HAL_UART_Transmit+0x2c>
 8003d00:	88fb      	ldrh	r3, [r7, #6]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e075      	b.n	8003df6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_UART_Transmit+0x3e>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e06e      	b.n	8003df6 <HAL_UART_Transmit+0x11c>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2221      	movs	r2, #33	; 0x21
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d2e:	f7fe f8a5 	bl	8001e7c <HAL_GetTick>
 8003d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	88fa      	ldrh	r2, [r7, #6]
 8003d38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	88fa      	ldrh	r2, [r7, #6]
 8003d3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d48:	d108      	bne.n	8003d5c <HAL_UART_Transmit+0x82>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d104      	bne.n	8003d5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	e003      	b.n	8003d64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d6c:	e02a      	b.n	8003dc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2200      	movs	r2, #0
 8003d76:	2180      	movs	r1, #128	; 0x80
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 f840 	bl	8003dfe <UART_WaitOnFlagUntilTimeout>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e036      	b.n	8003df6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10b      	bne.n	8003da6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	3302      	adds	r3, #2
 8003da2:	61bb      	str	r3, [r7, #24]
 8003da4:	e007      	b.n	8003db6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	781a      	ldrb	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	3301      	adds	r3, #1
 8003db4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1cf      	bne.n	8003d6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2140      	movs	r1, #64	; 0x40
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f810 	bl	8003dfe <UART_WaitOnFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e006      	b.n	8003df6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	e000      	b.n	8003df6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003df4:	2302      	movs	r3, #2
  }
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3720      	adds	r7, #32
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b090      	sub	sp, #64	; 0x40
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e0e:	e050      	b.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e16:	d04c      	beq.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <UART_WaitOnFlagUntilTimeout+0x30>
 8003e1e:	f7fe f82d 	bl	8001e7c <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d241      	bcs.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	330c      	adds	r3, #12
 8003e34:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	330c      	adds	r3, #12
 8003e4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e4e:	637a      	str	r2, [r7, #52]	; 0x34
 8003e50:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e5      	bne.n	8003e2e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3314      	adds	r3, #20
 8003e68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	613b      	str	r3, [r7, #16]
   return(result);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3314      	adds	r3, #20
 8003e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e82:	623a      	str	r2, [r7, #32]
 8003e84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	69f9      	ldr	r1, [r7, #28]
 8003e88:	6a3a      	ldr	r2, [r7, #32]
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e5      	bne.n	8003e62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e00f      	b.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	bf0c      	ite	eq
 8003ec2:	2301      	moveq	r3, #1
 8003ec4:	2300      	movne	r3, #0
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d09f      	beq.n	8003e10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3740      	adds	r7, #64	; 0x40
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee0:	b0c0      	sub	sp, #256	; 0x100
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef8:	68d9      	ldr	r1, [r3, #12]
 8003efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	ea40 0301 	orr.w	r3, r0, r1
 8003f04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f34:	f021 010c 	bic.w	r1, r1, #12
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f42:	430b      	orrs	r3, r1
 8003f44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f56:	6999      	ldr	r1, [r3, #24]
 8003f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	ea40 0301 	orr.w	r3, r0, r1
 8003f62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	4b8f      	ldr	r3, [pc, #572]	; (80041a8 <UART_SetConfig+0x2cc>)
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d005      	beq.n	8003f7c <UART_SetConfig+0xa0>
 8003f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	4b8d      	ldr	r3, [pc, #564]	; (80041ac <UART_SetConfig+0x2d0>)
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d104      	bne.n	8003f86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f7c:	f7ff fe4c 	bl	8003c18 <HAL_RCC_GetPCLK2Freq>
 8003f80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f84:	e003      	b.n	8003f8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f86:	f7ff fe33 	bl	8003bf0 <HAL_RCC_GetPCLK1Freq>
 8003f8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f98:	f040 810c 	bne.w	80041b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003fa6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003faa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003fae:	4622      	mov	r2, r4
 8003fb0:	462b      	mov	r3, r5
 8003fb2:	1891      	adds	r1, r2, r2
 8003fb4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fb6:	415b      	adcs	r3, r3
 8003fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	eb12 0801 	adds.w	r8, r2, r1
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	eb43 0901 	adc.w	r9, r3, r1
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fde:	4690      	mov	r8, r2
 8003fe0:	4699      	mov	r9, r3
 8003fe2:	4623      	mov	r3, r4
 8003fe4:	eb18 0303 	adds.w	r3, r8, r3
 8003fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fec:	462b      	mov	r3, r5
 8003fee:	eb49 0303 	adc.w	r3, r9, r3
 8003ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004002:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004006:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800400a:	460b      	mov	r3, r1
 800400c:	18db      	adds	r3, r3, r3
 800400e:	653b      	str	r3, [r7, #80]	; 0x50
 8004010:	4613      	mov	r3, r2
 8004012:	eb42 0303 	adc.w	r3, r2, r3
 8004016:	657b      	str	r3, [r7, #84]	; 0x54
 8004018:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800401c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004020:	f7fc fddc 	bl	8000bdc <__aeabi_uldivmod>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4b61      	ldr	r3, [pc, #388]	; (80041b0 <UART_SetConfig+0x2d4>)
 800402a:	fba3 2302 	umull	r2, r3, r3, r2
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	011c      	lsls	r4, r3, #4
 8004032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004036:	2200      	movs	r2, #0
 8004038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800403c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004040:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004044:	4642      	mov	r2, r8
 8004046:	464b      	mov	r3, r9
 8004048:	1891      	adds	r1, r2, r2
 800404a:	64b9      	str	r1, [r7, #72]	; 0x48
 800404c:	415b      	adcs	r3, r3
 800404e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004050:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004054:	4641      	mov	r1, r8
 8004056:	eb12 0a01 	adds.w	sl, r2, r1
 800405a:	4649      	mov	r1, r9
 800405c:	eb43 0b01 	adc.w	fp, r3, r1
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800406c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004070:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004074:	4692      	mov	sl, r2
 8004076:	469b      	mov	fp, r3
 8004078:	4643      	mov	r3, r8
 800407a:	eb1a 0303 	adds.w	r3, sl, r3
 800407e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004082:	464b      	mov	r3, r9
 8004084:	eb4b 0303 	adc.w	r3, fp, r3
 8004088:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004098:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800409c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040a0:	460b      	mov	r3, r1
 80040a2:	18db      	adds	r3, r3, r3
 80040a4:	643b      	str	r3, [r7, #64]	; 0x40
 80040a6:	4613      	mov	r3, r2
 80040a8:	eb42 0303 	adc.w	r3, r2, r3
 80040ac:	647b      	str	r3, [r7, #68]	; 0x44
 80040ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040b6:	f7fc fd91 	bl	8000bdc <__aeabi_uldivmod>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4611      	mov	r1, r2
 80040c0:	4b3b      	ldr	r3, [pc, #236]	; (80041b0 <UART_SetConfig+0x2d4>)
 80040c2:	fba3 2301 	umull	r2, r3, r3, r1
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	2264      	movs	r2, #100	; 0x64
 80040ca:	fb02 f303 	mul.w	r3, r2, r3
 80040ce:	1acb      	subs	r3, r1, r3
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040d6:	4b36      	ldr	r3, [pc, #216]	; (80041b0 <UART_SetConfig+0x2d4>)
 80040d8:	fba3 2302 	umull	r2, r3, r3, r2
 80040dc:	095b      	lsrs	r3, r3, #5
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040e4:	441c      	add	r4, r3
 80040e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040f8:	4642      	mov	r2, r8
 80040fa:	464b      	mov	r3, r9
 80040fc:	1891      	adds	r1, r2, r2
 80040fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004100:	415b      	adcs	r3, r3
 8004102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004104:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004108:	4641      	mov	r1, r8
 800410a:	1851      	adds	r1, r2, r1
 800410c:	6339      	str	r1, [r7, #48]	; 0x30
 800410e:	4649      	mov	r1, r9
 8004110:	414b      	adcs	r3, r1
 8004112:	637b      	str	r3, [r7, #52]	; 0x34
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004120:	4659      	mov	r1, fp
 8004122:	00cb      	lsls	r3, r1, #3
 8004124:	4651      	mov	r1, sl
 8004126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800412a:	4651      	mov	r1, sl
 800412c:	00ca      	lsls	r2, r1, #3
 800412e:	4610      	mov	r0, r2
 8004130:	4619      	mov	r1, r3
 8004132:	4603      	mov	r3, r0
 8004134:	4642      	mov	r2, r8
 8004136:	189b      	adds	r3, r3, r2
 8004138:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800413c:	464b      	mov	r3, r9
 800413e:	460a      	mov	r2, r1
 8004140:	eb42 0303 	adc.w	r3, r2, r3
 8004144:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004154:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004158:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800415c:	460b      	mov	r3, r1
 800415e:	18db      	adds	r3, r3, r3
 8004160:	62bb      	str	r3, [r7, #40]	; 0x28
 8004162:	4613      	mov	r3, r2
 8004164:	eb42 0303 	adc.w	r3, r2, r3
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800416a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800416e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004172:	f7fc fd33 	bl	8000bdc <__aeabi_uldivmod>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	4b0d      	ldr	r3, [pc, #52]	; (80041b0 <UART_SetConfig+0x2d4>)
 800417c:	fba3 1302 	umull	r1, r3, r3, r2
 8004180:	095b      	lsrs	r3, r3, #5
 8004182:	2164      	movs	r1, #100	; 0x64
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	3332      	adds	r3, #50	; 0x32
 800418e:	4a08      	ldr	r2, [pc, #32]	; (80041b0 <UART_SetConfig+0x2d4>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	f003 0207 	and.w	r2, r3, #7
 800419a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4422      	add	r2, r4
 80041a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041a4:	e106      	b.n	80043b4 <UART_SetConfig+0x4d8>
 80041a6:	bf00      	nop
 80041a8:	40011000 	.word	0x40011000
 80041ac:	40011400 	.word	0x40011400
 80041b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041b8:	2200      	movs	r2, #0
 80041ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041c6:	4642      	mov	r2, r8
 80041c8:	464b      	mov	r3, r9
 80041ca:	1891      	adds	r1, r2, r2
 80041cc:	6239      	str	r1, [r7, #32]
 80041ce:	415b      	adcs	r3, r3
 80041d0:	627b      	str	r3, [r7, #36]	; 0x24
 80041d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041d6:	4641      	mov	r1, r8
 80041d8:	1854      	adds	r4, r2, r1
 80041da:	4649      	mov	r1, r9
 80041dc:	eb43 0501 	adc.w	r5, r3, r1
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	00eb      	lsls	r3, r5, #3
 80041ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ee:	00e2      	lsls	r2, r4, #3
 80041f0:	4614      	mov	r4, r2
 80041f2:	461d      	mov	r5, r3
 80041f4:	4643      	mov	r3, r8
 80041f6:	18e3      	adds	r3, r4, r3
 80041f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041fc:	464b      	mov	r3, r9
 80041fe:	eb45 0303 	adc.w	r3, r5, r3
 8004202:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004212:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004222:	4629      	mov	r1, r5
 8004224:	008b      	lsls	r3, r1, #2
 8004226:	4621      	mov	r1, r4
 8004228:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800422c:	4621      	mov	r1, r4
 800422e:	008a      	lsls	r2, r1, #2
 8004230:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004234:	f7fc fcd2 	bl	8000bdc <__aeabi_uldivmod>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4b60      	ldr	r3, [pc, #384]	; (80043c0 <UART_SetConfig+0x4e4>)
 800423e:	fba3 2302 	umull	r2, r3, r3, r2
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	011c      	lsls	r4, r3, #4
 8004246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800424a:	2200      	movs	r2, #0
 800424c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004250:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004254:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004258:	4642      	mov	r2, r8
 800425a:	464b      	mov	r3, r9
 800425c:	1891      	adds	r1, r2, r2
 800425e:	61b9      	str	r1, [r7, #24]
 8004260:	415b      	adcs	r3, r3
 8004262:	61fb      	str	r3, [r7, #28]
 8004264:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004268:	4641      	mov	r1, r8
 800426a:	1851      	adds	r1, r2, r1
 800426c:	6139      	str	r1, [r7, #16]
 800426e:	4649      	mov	r1, r9
 8004270:	414b      	adcs	r3, r1
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004280:	4659      	mov	r1, fp
 8004282:	00cb      	lsls	r3, r1, #3
 8004284:	4651      	mov	r1, sl
 8004286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800428a:	4651      	mov	r1, sl
 800428c:	00ca      	lsls	r2, r1, #3
 800428e:	4610      	mov	r0, r2
 8004290:	4619      	mov	r1, r3
 8004292:	4603      	mov	r3, r0
 8004294:	4642      	mov	r2, r8
 8004296:	189b      	adds	r3, r3, r2
 8004298:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800429c:	464b      	mov	r3, r9
 800429e:	460a      	mov	r2, r1
 80042a0:	eb42 0303 	adc.w	r3, r2, r3
 80042a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80042b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042c0:	4649      	mov	r1, r9
 80042c2:	008b      	lsls	r3, r1, #2
 80042c4:	4641      	mov	r1, r8
 80042c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042ca:	4641      	mov	r1, r8
 80042cc:	008a      	lsls	r2, r1, #2
 80042ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042d2:	f7fc fc83 	bl	8000bdc <__aeabi_uldivmod>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4611      	mov	r1, r2
 80042dc:	4b38      	ldr	r3, [pc, #224]	; (80043c0 <UART_SetConfig+0x4e4>)
 80042de:	fba3 2301 	umull	r2, r3, r3, r1
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	2264      	movs	r2, #100	; 0x64
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	1acb      	subs	r3, r1, r3
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	3332      	adds	r3, #50	; 0x32
 80042f0:	4a33      	ldr	r2, [pc, #204]	; (80043c0 <UART_SetConfig+0x4e4>)
 80042f2:	fba2 2303 	umull	r2, r3, r2, r3
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042fc:	441c      	add	r4, r3
 80042fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004302:	2200      	movs	r2, #0
 8004304:	673b      	str	r3, [r7, #112]	; 0x70
 8004306:	677a      	str	r2, [r7, #116]	; 0x74
 8004308:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800430c:	4642      	mov	r2, r8
 800430e:	464b      	mov	r3, r9
 8004310:	1891      	adds	r1, r2, r2
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	415b      	adcs	r3, r3
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800431c:	4641      	mov	r1, r8
 800431e:	1851      	adds	r1, r2, r1
 8004320:	6039      	str	r1, [r7, #0]
 8004322:	4649      	mov	r1, r9
 8004324:	414b      	adcs	r3, r1
 8004326:	607b      	str	r3, [r7, #4]
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004334:	4659      	mov	r1, fp
 8004336:	00cb      	lsls	r3, r1, #3
 8004338:	4651      	mov	r1, sl
 800433a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800433e:	4651      	mov	r1, sl
 8004340:	00ca      	lsls	r2, r1, #3
 8004342:	4610      	mov	r0, r2
 8004344:	4619      	mov	r1, r3
 8004346:	4603      	mov	r3, r0
 8004348:	4642      	mov	r2, r8
 800434a:	189b      	adds	r3, r3, r2
 800434c:	66bb      	str	r3, [r7, #104]	; 0x68
 800434e:	464b      	mov	r3, r9
 8004350:	460a      	mov	r2, r1
 8004352:	eb42 0303 	adc.w	r3, r2, r3
 8004356:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	663b      	str	r3, [r7, #96]	; 0x60
 8004362:	667a      	str	r2, [r7, #100]	; 0x64
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004370:	4649      	mov	r1, r9
 8004372:	008b      	lsls	r3, r1, #2
 8004374:	4641      	mov	r1, r8
 8004376:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800437a:	4641      	mov	r1, r8
 800437c:	008a      	lsls	r2, r1, #2
 800437e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004382:	f7fc fc2b 	bl	8000bdc <__aeabi_uldivmod>
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	4b0d      	ldr	r3, [pc, #52]	; (80043c0 <UART_SetConfig+0x4e4>)
 800438c:	fba3 1302 	umull	r1, r3, r3, r2
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	2164      	movs	r1, #100	; 0x64
 8004394:	fb01 f303 	mul.w	r3, r1, r3
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	3332      	adds	r3, #50	; 0x32
 800439e:	4a08      	ldr	r2, [pc, #32]	; (80043c0 <UART_SetConfig+0x4e4>)
 80043a0:	fba2 2303 	umull	r2, r3, r2, r3
 80043a4:	095b      	lsrs	r3, r3, #5
 80043a6:	f003 020f 	and.w	r2, r3, #15
 80043aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4422      	add	r2, r4
 80043b2:	609a      	str	r2, [r3, #8]
}
 80043b4:	bf00      	nop
 80043b6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043ba:	46bd      	mov	sp, r7
 80043bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043c0:	51eb851f 	.word	0x51eb851f

080043c4 <siprintf>:
 80043c4:	b40e      	push	{r1, r2, r3}
 80043c6:	b500      	push	{lr}
 80043c8:	b09c      	sub	sp, #112	; 0x70
 80043ca:	ab1d      	add	r3, sp, #116	; 0x74
 80043cc:	9002      	str	r0, [sp, #8]
 80043ce:	9006      	str	r0, [sp, #24]
 80043d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043d4:	4809      	ldr	r0, [pc, #36]	; (80043fc <siprintf+0x38>)
 80043d6:	9107      	str	r1, [sp, #28]
 80043d8:	9104      	str	r1, [sp, #16]
 80043da:	4909      	ldr	r1, [pc, #36]	; (8004400 <siprintf+0x3c>)
 80043dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80043e0:	9105      	str	r1, [sp, #20]
 80043e2:	6800      	ldr	r0, [r0, #0]
 80043e4:	9301      	str	r3, [sp, #4]
 80043e6:	a902      	add	r1, sp, #8
 80043e8:	f000 f992 	bl	8004710 <_svfiprintf_r>
 80043ec:	9b02      	ldr	r3, [sp, #8]
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
 80043f2:	b01c      	add	sp, #112	; 0x70
 80043f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80043f8:	b003      	add	sp, #12
 80043fa:	4770      	bx	lr
 80043fc:	20000060 	.word	0x20000060
 8004400:	ffff0208 	.word	0xffff0208

08004404 <memset>:
 8004404:	4402      	add	r2, r0
 8004406:	4603      	mov	r3, r0
 8004408:	4293      	cmp	r3, r2
 800440a:	d100      	bne.n	800440e <memset+0xa>
 800440c:	4770      	bx	lr
 800440e:	f803 1b01 	strb.w	r1, [r3], #1
 8004412:	e7f9      	b.n	8004408 <memset+0x4>

08004414 <__errno>:
 8004414:	4b01      	ldr	r3, [pc, #4]	; (800441c <__errno+0x8>)
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20000060 	.word	0x20000060

08004420 <__libc_init_array>:
 8004420:	b570      	push	{r4, r5, r6, lr}
 8004422:	4d0d      	ldr	r5, [pc, #52]	; (8004458 <__libc_init_array+0x38>)
 8004424:	4c0d      	ldr	r4, [pc, #52]	; (800445c <__libc_init_array+0x3c>)
 8004426:	1b64      	subs	r4, r4, r5
 8004428:	10a4      	asrs	r4, r4, #2
 800442a:	2600      	movs	r6, #0
 800442c:	42a6      	cmp	r6, r4
 800442e:	d109      	bne.n	8004444 <__libc_init_array+0x24>
 8004430:	4d0b      	ldr	r5, [pc, #44]	; (8004460 <__libc_init_array+0x40>)
 8004432:	4c0c      	ldr	r4, [pc, #48]	; (8004464 <__libc_init_array+0x44>)
 8004434:	f000 fede 	bl	80051f4 <_init>
 8004438:	1b64      	subs	r4, r4, r5
 800443a:	10a4      	asrs	r4, r4, #2
 800443c:	2600      	movs	r6, #0
 800443e:	42a6      	cmp	r6, r4
 8004440:	d105      	bne.n	800444e <__libc_init_array+0x2e>
 8004442:	bd70      	pop	{r4, r5, r6, pc}
 8004444:	f855 3b04 	ldr.w	r3, [r5], #4
 8004448:	4798      	blx	r3
 800444a:	3601      	adds	r6, #1
 800444c:	e7ee      	b.n	800442c <__libc_init_array+0xc>
 800444e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004452:	4798      	blx	r3
 8004454:	3601      	adds	r6, #1
 8004456:	e7f2      	b.n	800443e <__libc_init_array+0x1e>
 8004458:	08005368 	.word	0x08005368
 800445c:	08005368 	.word	0x08005368
 8004460:	08005368 	.word	0x08005368
 8004464:	0800536c 	.word	0x0800536c

08004468 <__retarget_lock_acquire_recursive>:
 8004468:	4770      	bx	lr

0800446a <__retarget_lock_release_recursive>:
 800446a:	4770      	bx	lr

0800446c <_free_r>:
 800446c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800446e:	2900      	cmp	r1, #0
 8004470:	d044      	beq.n	80044fc <_free_r+0x90>
 8004472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004476:	9001      	str	r0, [sp, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f1a1 0404 	sub.w	r4, r1, #4
 800447e:	bfb8      	it	lt
 8004480:	18e4      	addlt	r4, r4, r3
 8004482:	f000 f8df 	bl	8004644 <__malloc_lock>
 8004486:	4a1e      	ldr	r2, [pc, #120]	; (8004500 <_free_r+0x94>)
 8004488:	9801      	ldr	r0, [sp, #4]
 800448a:	6813      	ldr	r3, [r2, #0]
 800448c:	b933      	cbnz	r3, 800449c <_free_r+0x30>
 800448e:	6063      	str	r3, [r4, #4]
 8004490:	6014      	str	r4, [r2, #0]
 8004492:	b003      	add	sp, #12
 8004494:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004498:	f000 b8da 	b.w	8004650 <__malloc_unlock>
 800449c:	42a3      	cmp	r3, r4
 800449e:	d908      	bls.n	80044b2 <_free_r+0x46>
 80044a0:	6825      	ldr	r5, [r4, #0]
 80044a2:	1961      	adds	r1, r4, r5
 80044a4:	428b      	cmp	r3, r1
 80044a6:	bf01      	itttt	eq
 80044a8:	6819      	ldreq	r1, [r3, #0]
 80044aa:	685b      	ldreq	r3, [r3, #4]
 80044ac:	1949      	addeq	r1, r1, r5
 80044ae:	6021      	streq	r1, [r4, #0]
 80044b0:	e7ed      	b.n	800448e <_free_r+0x22>
 80044b2:	461a      	mov	r2, r3
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	b10b      	cbz	r3, 80044bc <_free_r+0x50>
 80044b8:	42a3      	cmp	r3, r4
 80044ba:	d9fa      	bls.n	80044b2 <_free_r+0x46>
 80044bc:	6811      	ldr	r1, [r2, #0]
 80044be:	1855      	adds	r5, r2, r1
 80044c0:	42a5      	cmp	r5, r4
 80044c2:	d10b      	bne.n	80044dc <_free_r+0x70>
 80044c4:	6824      	ldr	r4, [r4, #0]
 80044c6:	4421      	add	r1, r4
 80044c8:	1854      	adds	r4, r2, r1
 80044ca:	42a3      	cmp	r3, r4
 80044cc:	6011      	str	r1, [r2, #0]
 80044ce:	d1e0      	bne.n	8004492 <_free_r+0x26>
 80044d0:	681c      	ldr	r4, [r3, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	6053      	str	r3, [r2, #4]
 80044d6:	440c      	add	r4, r1
 80044d8:	6014      	str	r4, [r2, #0]
 80044da:	e7da      	b.n	8004492 <_free_r+0x26>
 80044dc:	d902      	bls.n	80044e4 <_free_r+0x78>
 80044de:	230c      	movs	r3, #12
 80044e0:	6003      	str	r3, [r0, #0]
 80044e2:	e7d6      	b.n	8004492 <_free_r+0x26>
 80044e4:	6825      	ldr	r5, [r4, #0]
 80044e6:	1961      	adds	r1, r4, r5
 80044e8:	428b      	cmp	r3, r1
 80044ea:	bf04      	itt	eq
 80044ec:	6819      	ldreq	r1, [r3, #0]
 80044ee:	685b      	ldreq	r3, [r3, #4]
 80044f0:	6063      	str	r3, [r4, #4]
 80044f2:	bf04      	itt	eq
 80044f4:	1949      	addeq	r1, r1, r5
 80044f6:	6021      	streq	r1, [r4, #0]
 80044f8:	6054      	str	r4, [r2, #4]
 80044fa:	e7ca      	b.n	8004492 <_free_r+0x26>
 80044fc:	b003      	add	sp, #12
 80044fe:	bd30      	pop	{r4, r5, pc}
 8004500:	20000260 	.word	0x20000260

08004504 <sbrk_aligned>:
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	4e0e      	ldr	r6, [pc, #56]	; (8004540 <sbrk_aligned+0x3c>)
 8004508:	460c      	mov	r4, r1
 800450a:	6831      	ldr	r1, [r6, #0]
 800450c:	4605      	mov	r5, r0
 800450e:	b911      	cbnz	r1, 8004516 <sbrk_aligned+0x12>
 8004510:	f000 fba6 	bl	8004c60 <_sbrk_r>
 8004514:	6030      	str	r0, [r6, #0]
 8004516:	4621      	mov	r1, r4
 8004518:	4628      	mov	r0, r5
 800451a:	f000 fba1 	bl	8004c60 <_sbrk_r>
 800451e:	1c43      	adds	r3, r0, #1
 8004520:	d00a      	beq.n	8004538 <sbrk_aligned+0x34>
 8004522:	1cc4      	adds	r4, r0, #3
 8004524:	f024 0403 	bic.w	r4, r4, #3
 8004528:	42a0      	cmp	r0, r4
 800452a:	d007      	beq.n	800453c <sbrk_aligned+0x38>
 800452c:	1a21      	subs	r1, r4, r0
 800452e:	4628      	mov	r0, r5
 8004530:	f000 fb96 	bl	8004c60 <_sbrk_r>
 8004534:	3001      	adds	r0, #1
 8004536:	d101      	bne.n	800453c <sbrk_aligned+0x38>
 8004538:	f04f 34ff 	mov.w	r4, #4294967295
 800453c:	4620      	mov	r0, r4
 800453e:	bd70      	pop	{r4, r5, r6, pc}
 8004540:	20000264 	.word	0x20000264

08004544 <_malloc_r>:
 8004544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004548:	1ccd      	adds	r5, r1, #3
 800454a:	f025 0503 	bic.w	r5, r5, #3
 800454e:	3508      	adds	r5, #8
 8004550:	2d0c      	cmp	r5, #12
 8004552:	bf38      	it	cc
 8004554:	250c      	movcc	r5, #12
 8004556:	2d00      	cmp	r5, #0
 8004558:	4607      	mov	r7, r0
 800455a:	db01      	blt.n	8004560 <_malloc_r+0x1c>
 800455c:	42a9      	cmp	r1, r5
 800455e:	d905      	bls.n	800456c <_malloc_r+0x28>
 8004560:	230c      	movs	r3, #12
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	2600      	movs	r6, #0
 8004566:	4630      	mov	r0, r6
 8004568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800456c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004640 <_malloc_r+0xfc>
 8004570:	f000 f868 	bl	8004644 <__malloc_lock>
 8004574:	f8d8 3000 	ldr.w	r3, [r8]
 8004578:	461c      	mov	r4, r3
 800457a:	bb5c      	cbnz	r4, 80045d4 <_malloc_r+0x90>
 800457c:	4629      	mov	r1, r5
 800457e:	4638      	mov	r0, r7
 8004580:	f7ff ffc0 	bl	8004504 <sbrk_aligned>
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	4604      	mov	r4, r0
 8004588:	d155      	bne.n	8004636 <_malloc_r+0xf2>
 800458a:	f8d8 4000 	ldr.w	r4, [r8]
 800458e:	4626      	mov	r6, r4
 8004590:	2e00      	cmp	r6, #0
 8004592:	d145      	bne.n	8004620 <_malloc_r+0xdc>
 8004594:	2c00      	cmp	r4, #0
 8004596:	d048      	beq.n	800462a <_malloc_r+0xe6>
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	4631      	mov	r1, r6
 800459c:	4638      	mov	r0, r7
 800459e:	eb04 0903 	add.w	r9, r4, r3
 80045a2:	f000 fb5d 	bl	8004c60 <_sbrk_r>
 80045a6:	4581      	cmp	r9, r0
 80045a8:	d13f      	bne.n	800462a <_malloc_r+0xe6>
 80045aa:	6821      	ldr	r1, [r4, #0]
 80045ac:	1a6d      	subs	r5, r5, r1
 80045ae:	4629      	mov	r1, r5
 80045b0:	4638      	mov	r0, r7
 80045b2:	f7ff ffa7 	bl	8004504 <sbrk_aligned>
 80045b6:	3001      	adds	r0, #1
 80045b8:	d037      	beq.n	800462a <_malloc_r+0xe6>
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	442b      	add	r3, r5
 80045be:	6023      	str	r3, [r4, #0]
 80045c0:	f8d8 3000 	ldr.w	r3, [r8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d038      	beq.n	800463a <_malloc_r+0xf6>
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	42a2      	cmp	r2, r4
 80045cc:	d12b      	bne.n	8004626 <_malloc_r+0xe2>
 80045ce:	2200      	movs	r2, #0
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	e00f      	b.n	80045f4 <_malloc_r+0xb0>
 80045d4:	6822      	ldr	r2, [r4, #0]
 80045d6:	1b52      	subs	r2, r2, r5
 80045d8:	d41f      	bmi.n	800461a <_malloc_r+0xd6>
 80045da:	2a0b      	cmp	r2, #11
 80045dc:	d917      	bls.n	800460e <_malloc_r+0xca>
 80045de:	1961      	adds	r1, r4, r5
 80045e0:	42a3      	cmp	r3, r4
 80045e2:	6025      	str	r5, [r4, #0]
 80045e4:	bf18      	it	ne
 80045e6:	6059      	strne	r1, [r3, #4]
 80045e8:	6863      	ldr	r3, [r4, #4]
 80045ea:	bf08      	it	eq
 80045ec:	f8c8 1000 	streq.w	r1, [r8]
 80045f0:	5162      	str	r2, [r4, r5]
 80045f2:	604b      	str	r3, [r1, #4]
 80045f4:	4638      	mov	r0, r7
 80045f6:	f104 060b 	add.w	r6, r4, #11
 80045fa:	f000 f829 	bl	8004650 <__malloc_unlock>
 80045fe:	f026 0607 	bic.w	r6, r6, #7
 8004602:	1d23      	adds	r3, r4, #4
 8004604:	1af2      	subs	r2, r6, r3
 8004606:	d0ae      	beq.n	8004566 <_malloc_r+0x22>
 8004608:	1b9b      	subs	r3, r3, r6
 800460a:	50a3      	str	r3, [r4, r2]
 800460c:	e7ab      	b.n	8004566 <_malloc_r+0x22>
 800460e:	42a3      	cmp	r3, r4
 8004610:	6862      	ldr	r2, [r4, #4]
 8004612:	d1dd      	bne.n	80045d0 <_malloc_r+0x8c>
 8004614:	f8c8 2000 	str.w	r2, [r8]
 8004618:	e7ec      	b.n	80045f4 <_malloc_r+0xb0>
 800461a:	4623      	mov	r3, r4
 800461c:	6864      	ldr	r4, [r4, #4]
 800461e:	e7ac      	b.n	800457a <_malloc_r+0x36>
 8004620:	4634      	mov	r4, r6
 8004622:	6876      	ldr	r6, [r6, #4]
 8004624:	e7b4      	b.n	8004590 <_malloc_r+0x4c>
 8004626:	4613      	mov	r3, r2
 8004628:	e7cc      	b.n	80045c4 <_malloc_r+0x80>
 800462a:	230c      	movs	r3, #12
 800462c:	603b      	str	r3, [r7, #0]
 800462e:	4638      	mov	r0, r7
 8004630:	f000 f80e 	bl	8004650 <__malloc_unlock>
 8004634:	e797      	b.n	8004566 <_malloc_r+0x22>
 8004636:	6025      	str	r5, [r4, #0]
 8004638:	e7dc      	b.n	80045f4 <_malloc_r+0xb0>
 800463a:	605b      	str	r3, [r3, #4]
 800463c:	deff      	udf	#255	; 0xff
 800463e:	bf00      	nop
 8004640:	20000260 	.word	0x20000260

08004644 <__malloc_lock>:
 8004644:	4801      	ldr	r0, [pc, #4]	; (800464c <__malloc_lock+0x8>)
 8004646:	f7ff bf0f 	b.w	8004468 <__retarget_lock_acquire_recursive>
 800464a:	bf00      	nop
 800464c:	2000025c 	.word	0x2000025c

08004650 <__malloc_unlock>:
 8004650:	4801      	ldr	r0, [pc, #4]	; (8004658 <__malloc_unlock+0x8>)
 8004652:	f7ff bf0a 	b.w	800446a <__retarget_lock_release_recursive>
 8004656:	bf00      	nop
 8004658:	2000025c 	.word	0x2000025c

0800465c <__ssputs_r>:
 800465c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004660:	688e      	ldr	r6, [r1, #8]
 8004662:	461f      	mov	r7, r3
 8004664:	42be      	cmp	r6, r7
 8004666:	680b      	ldr	r3, [r1, #0]
 8004668:	4682      	mov	sl, r0
 800466a:	460c      	mov	r4, r1
 800466c:	4690      	mov	r8, r2
 800466e:	d82c      	bhi.n	80046ca <__ssputs_r+0x6e>
 8004670:	898a      	ldrh	r2, [r1, #12]
 8004672:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004676:	d026      	beq.n	80046c6 <__ssputs_r+0x6a>
 8004678:	6965      	ldr	r5, [r4, #20]
 800467a:	6909      	ldr	r1, [r1, #16]
 800467c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004680:	eba3 0901 	sub.w	r9, r3, r1
 8004684:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004688:	1c7b      	adds	r3, r7, #1
 800468a:	444b      	add	r3, r9
 800468c:	106d      	asrs	r5, r5, #1
 800468e:	429d      	cmp	r5, r3
 8004690:	bf38      	it	cc
 8004692:	461d      	movcc	r5, r3
 8004694:	0553      	lsls	r3, r2, #21
 8004696:	d527      	bpl.n	80046e8 <__ssputs_r+0x8c>
 8004698:	4629      	mov	r1, r5
 800469a:	f7ff ff53 	bl	8004544 <_malloc_r>
 800469e:	4606      	mov	r6, r0
 80046a0:	b360      	cbz	r0, 80046fc <__ssputs_r+0xa0>
 80046a2:	6921      	ldr	r1, [r4, #16]
 80046a4:	464a      	mov	r2, r9
 80046a6:	f000 faeb 	bl	8004c80 <memcpy>
 80046aa:	89a3      	ldrh	r3, [r4, #12]
 80046ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b4:	81a3      	strh	r3, [r4, #12]
 80046b6:	6126      	str	r6, [r4, #16]
 80046b8:	6165      	str	r5, [r4, #20]
 80046ba:	444e      	add	r6, r9
 80046bc:	eba5 0509 	sub.w	r5, r5, r9
 80046c0:	6026      	str	r6, [r4, #0]
 80046c2:	60a5      	str	r5, [r4, #8]
 80046c4:	463e      	mov	r6, r7
 80046c6:	42be      	cmp	r6, r7
 80046c8:	d900      	bls.n	80046cc <__ssputs_r+0x70>
 80046ca:	463e      	mov	r6, r7
 80046cc:	6820      	ldr	r0, [r4, #0]
 80046ce:	4632      	mov	r2, r6
 80046d0:	4641      	mov	r1, r8
 80046d2:	f000 faab 	bl	8004c2c <memmove>
 80046d6:	68a3      	ldr	r3, [r4, #8]
 80046d8:	1b9b      	subs	r3, r3, r6
 80046da:	60a3      	str	r3, [r4, #8]
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	4433      	add	r3, r6
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	2000      	movs	r0, #0
 80046e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e8:	462a      	mov	r2, r5
 80046ea:	f000 fad7 	bl	8004c9c <_realloc_r>
 80046ee:	4606      	mov	r6, r0
 80046f0:	2800      	cmp	r0, #0
 80046f2:	d1e0      	bne.n	80046b6 <__ssputs_r+0x5a>
 80046f4:	6921      	ldr	r1, [r4, #16]
 80046f6:	4650      	mov	r0, sl
 80046f8:	f7ff feb8 	bl	800446c <_free_r>
 80046fc:	230c      	movs	r3, #12
 80046fe:	f8ca 3000 	str.w	r3, [sl]
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004708:	81a3      	strh	r3, [r4, #12]
 800470a:	f04f 30ff 	mov.w	r0, #4294967295
 800470e:	e7e9      	b.n	80046e4 <__ssputs_r+0x88>

08004710 <_svfiprintf_r>:
 8004710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004714:	4698      	mov	r8, r3
 8004716:	898b      	ldrh	r3, [r1, #12]
 8004718:	061b      	lsls	r3, r3, #24
 800471a:	b09d      	sub	sp, #116	; 0x74
 800471c:	4607      	mov	r7, r0
 800471e:	460d      	mov	r5, r1
 8004720:	4614      	mov	r4, r2
 8004722:	d50e      	bpl.n	8004742 <_svfiprintf_r+0x32>
 8004724:	690b      	ldr	r3, [r1, #16]
 8004726:	b963      	cbnz	r3, 8004742 <_svfiprintf_r+0x32>
 8004728:	2140      	movs	r1, #64	; 0x40
 800472a:	f7ff ff0b 	bl	8004544 <_malloc_r>
 800472e:	6028      	str	r0, [r5, #0]
 8004730:	6128      	str	r0, [r5, #16]
 8004732:	b920      	cbnz	r0, 800473e <_svfiprintf_r+0x2e>
 8004734:	230c      	movs	r3, #12
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	f04f 30ff 	mov.w	r0, #4294967295
 800473c:	e0d0      	b.n	80048e0 <_svfiprintf_r+0x1d0>
 800473e:	2340      	movs	r3, #64	; 0x40
 8004740:	616b      	str	r3, [r5, #20]
 8004742:	2300      	movs	r3, #0
 8004744:	9309      	str	r3, [sp, #36]	; 0x24
 8004746:	2320      	movs	r3, #32
 8004748:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800474c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004750:	2330      	movs	r3, #48	; 0x30
 8004752:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80048f8 <_svfiprintf_r+0x1e8>
 8004756:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800475a:	f04f 0901 	mov.w	r9, #1
 800475e:	4623      	mov	r3, r4
 8004760:	469a      	mov	sl, r3
 8004762:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004766:	b10a      	cbz	r2, 800476c <_svfiprintf_r+0x5c>
 8004768:	2a25      	cmp	r2, #37	; 0x25
 800476a:	d1f9      	bne.n	8004760 <_svfiprintf_r+0x50>
 800476c:	ebba 0b04 	subs.w	fp, sl, r4
 8004770:	d00b      	beq.n	800478a <_svfiprintf_r+0x7a>
 8004772:	465b      	mov	r3, fp
 8004774:	4622      	mov	r2, r4
 8004776:	4629      	mov	r1, r5
 8004778:	4638      	mov	r0, r7
 800477a:	f7ff ff6f 	bl	800465c <__ssputs_r>
 800477e:	3001      	adds	r0, #1
 8004780:	f000 80a9 	beq.w	80048d6 <_svfiprintf_r+0x1c6>
 8004784:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004786:	445a      	add	r2, fp
 8004788:	9209      	str	r2, [sp, #36]	; 0x24
 800478a:	f89a 3000 	ldrb.w	r3, [sl]
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 80a1 	beq.w	80048d6 <_svfiprintf_r+0x1c6>
 8004794:	2300      	movs	r3, #0
 8004796:	f04f 32ff 	mov.w	r2, #4294967295
 800479a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800479e:	f10a 0a01 	add.w	sl, sl, #1
 80047a2:	9304      	str	r3, [sp, #16]
 80047a4:	9307      	str	r3, [sp, #28]
 80047a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047aa:	931a      	str	r3, [sp, #104]	; 0x68
 80047ac:	4654      	mov	r4, sl
 80047ae:	2205      	movs	r2, #5
 80047b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047b4:	4850      	ldr	r0, [pc, #320]	; (80048f8 <_svfiprintf_r+0x1e8>)
 80047b6:	f7fb fd1b 	bl	80001f0 <memchr>
 80047ba:	9a04      	ldr	r2, [sp, #16]
 80047bc:	b9d8      	cbnz	r0, 80047f6 <_svfiprintf_r+0xe6>
 80047be:	06d0      	lsls	r0, r2, #27
 80047c0:	bf44      	itt	mi
 80047c2:	2320      	movmi	r3, #32
 80047c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047c8:	0711      	lsls	r1, r2, #28
 80047ca:	bf44      	itt	mi
 80047cc:	232b      	movmi	r3, #43	; 0x2b
 80047ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047d2:	f89a 3000 	ldrb.w	r3, [sl]
 80047d6:	2b2a      	cmp	r3, #42	; 0x2a
 80047d8:	d015      	beq.n	8004806 <_svfiprintf_r+0xf6>
 80047da:	9a07      	ldr	r2, [sp, #28]
 80047dc:	4654      	mov	r4, sl
 80047de:	2000      	movs	r0, #0
 80047e0:	f04f 0c0a 	mov.w	ip, #10
 80047e4:	4621      	mov	r1, r4
 80047e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047ea:	3b30      	subs	r3, #48	; 0x30
 80047ec:	2b09      	cmp	r3, #9
 80047ee:	d94d      	bls.n	800488c <_svfiprintf_r+0x17c>
 80047f0:	b1b0      	cbz	r0, 8004820 <_svfiprintf_r+0x110>
 80047f2:	9207      	str	r2, [sp, #28]
 80047f4:	e014      	b.n	8004820 <_svfiprintf_r+0x110>
 80047f6:	eba0 0308 	sub.w	r3, r0, r8
 80047fa:	fa09 f303 	lsl.w	r3, r9, r3
 80047fe:	4313      	orrs	r3, r2
 8004800:	9304      	str	r3, [sp, #16]
 8004802:	46a2      	mov	sl, r4
 8004804:	e7d2      	b.n	80047ac <_svfiprintf_r+0x9c>
 8004806:	9b03      	ldr	r3, [sp, #12]
 8004808:	1d19      	adds	r1, r3, #4
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	9103      	str	r1, [sp, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	bfbb      	ittet	lt
 8004812:	425b      	neglt	r3, r3
 8004814:	f042 0202 	orrlt.w	r2, r2, #2
 8004818:	9307      	strge	r3, [sp, #28]
 800481a:	9307      	strlt	r3, [sp, #28]
 800481c:	bfb8      	it	lt
 800481e:	9204      	strlt	r2, [sp, #16]
 8004820:	7823      	ldrb	r3, [r4, #0]
 8004822:	2b2e      	cmp	r3, #46	; 0x2e
 8004824:	d10c      	bne.n	8004840 <_svfiprintf_r+0x130>
 8004826:	7863      	ldrb	r3, [r4, #1]
 8004828:	2b2a      	cmp	r3, #42	; 0x2a
 800482a:	d134      	bne.n	8004896 <_svfiprintf_r+0x186>
 800482c:	9b03      	ldr	r3, [sp, #12]
 800482e:	1d1a      	adds	r2, r3, #4
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	9203      	str	r2, [sp, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	bfb8      	it	lt
 8004838:	f04f 33ff 	movlt.w	r3, #4294967295
 800483c:	3402      	adds	r4, #2
 800483e:	9305      	str	r3, [sp, #20]
 8004840:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004908 <_svfiprintf_r+0x1f8>
 8004844:	7821      	ldrb	r1, [r4, #0]
 8004846:	2203      	movs	r2, #3
 8004848:	4650      	mov	r0, sl
 800484a:	f7fb fcd1 	bl	80001f0 <memchr>
 800484e:	b138      	cbz	r0, 8004860 <_svfiprintf_r+0x150>
 8004850:	9b04      	ldr	r3, [sp, #16]
 8004852:	eba0 000a 	sub.w	r0, r0, sl
 8004856:	2240      	movs	r2, #64	; 0x40
 8004858:	4082      	lsls	r2, r0
 800485a:	4313      	orrs	r3, r2
 800485c:	3401      	adds	r4, #1
 800485e:	9304      	str	r3, [sp, #16]
 8004860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004864:	4825      	ldr	r0, [pc, #148]	; (80048fc <_svfiprintf_r+0x1ec>)
 8004866:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800486a:	2206      	movs	r2, #6
 800486c:	f7fb fcc0 	bl	80001f0 <memchr>
 8004870:	2800      	cmp	r0, #0
 8004872:	d038      	beq.n	80048e6 <_svfiprintf_r+0x1d6>
 8004874:	4b22      	ldr	r3, [pc, #136]	; (8004900 <_svfiprintf_r+0x1f0>)
 8004876:	bb1b      	cbnz	r3, 80048c0 <_svfiprintf_r+0x1b0>
 8004878:	9b03      	ldr	r3, [sp, #12]
 800487a:	3307      	adds	r3, #7
 800487c:	f023 0307 	bic.w	r3, r3, #7
 8004880:	3308      	adds	r3, #8
 8004882:	9303      	str	r3, [sp, #12]
 8004884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004886:	4433      	add	r3, r6
 8004888:	9309      	str	r3, [sp, #36]	; 0x24
 800488a:	e768      	b.n	800475e <_svfiprintf_r+0x4e>
 800488c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004890:	460c      	mov	r4, r1
 8004892:	2001      	movs	r0, #1
 8004894:	e7a6      	b.n	80047e4 <_svfiprintf_r+0xd4>
 8004896:	2300      	movs	r3, #0
 8004898:	3401      	adds	r4, #1
 800489a:	9305      	str	r3, [sp, #20]
 800489c:	4619      	mov	r1, r3
 800489e:	f04f 0c0a 	mov.w	ip, #10
 80048a2:	4620      	mov	r0, r4
 80048a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048a8:	3a30      	subs	r2, #48	; 0x30
 80048aa:	2a09      	cmp	r2, #9
 80048ac:	d903      	bls.n	80048b6 <_svfiprintf_r+0x1a6>
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0c6      	beq.n	8004840 <_svfiprintf_r+0x130>
 80048b2:	9105      	str	r1, [sp, #20]
 80048b4:	e7c4      	b.n	8004840 <_svfiprintf_r+0x130>
 80048b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80048ba:	4604      	mov	r4, r0
 80048bc:	2301      	movs	r3, #1
 80048be:	e7f0      	b.n	80048a2 <_svfiprintf_r+0x192>
 80048c0:	ab03      	add	r3, sp, #12
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	462a      	mov	r2, r5
 80048c6:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <_svfiprintf_r+0x1f4>)
 80048c8:	a904      	add	r1, sp, #16
 80048ca:	4638      	mov	r0, r7
 80048cc:	f3af 8000 	nop.w
 80048d0:	1c42      	adds	r2, r0, #1
 80048d2:	4606      	mov	r6, r0
 80048d4:	d1d6      	bne.n	8004884 <_svfiprintf_r+0x174>
 80048d6:	89ab      	ldrh	r3, [r5, #12]
 80048d8:	065b      	lsls	r3, r3, #25
 80048da:	f53f af2d 	bmi.w	8004738 <_svfiprintf_r+0x28>
 80048de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048e0:	b01d      	add	sp, #116	; 0x74
 80048e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e6:	ab03      	add	r3, sp, #12
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	462a      	mov	r2, r5
 80048ec:	4b05      	ldr	r3, [pc, #20]	; (8004904 <_svfiprintf_r+0x1f4>)
 80048ee:	a904      	add	r1, sp, #16
 80048f0:	4638      	mov	r0, r7
 80048f2:	f000 f879 	bl	80049e8 <_printf_i>
 80048f6:	e7eb      	b.n	80048d0 <_svfiprintf_r+0x1c0>
 80048f8:	080052bc 	.word	0x080052bc
 80048fc:	080052c6 	.word	0x080052c6
 8004900:	00000000 	.word	0x00000000
 8004904:	0800465d 	.word	0x0800465d
 8004908:	080052c2 	.word	0x080052c2

0800490c <_printf_common>:
 800490c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004910:	4616      	mov	r6, r2
 8004912:	4699      	mov	r9, r3
 8004914:	688a      	ldr	r2, [r1, #8]
 8004916:	690b      	ldr	r3, [r1, #16]
 8004918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800491c:	4293      	cmp	r3, r2
 800491e:	bfb8      	it	lt
 8004920:	4613      	movlt	r3, r2
 8004922:	6033      	str	r3, [r6, #0]
 8004924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004928:	4607      	mov	r7, r0
 800492a:	460c      	mov	r4, r1
 800492c:	b10a      	cbz	r2, 8004932 <_printf_common+0x26>
 800492e:	3301      	adds	r3, #1
 8004930:	6033      	str	r3, [r6, #0]
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	0699      	lsls	r1, r3, #26
 8004936:	bf42      	ittt	mi
 8004938:	6833      	ldrmi	r3, [r6, #0]
 800493a:	3302      	addmi	r3, #2
 800493c:	6033      	strmi	r3, [r6, #0]
 800493e:	6825      	ldr	r5, [r4, #0]
 8004940:	f015 0506 	ands.w	r5, r5, #6
 8004944:	d106      	bne.n	8004954 <_printf_common+0x48>
 8004946:	f104 0a19 	add.w	sl, r4, #25
 800494a:	68e3      	ldr	r3, [r4, #12]
 800494c:	6832      	ldr	r2, [r6, #0]
 800494e:	1a9b      	subs	r3, r3, r2
 8004950:	42ab      	cmp	r3, r5
 8004952:	dc26      	bgt.n	80049a2 <_printf_common+0x96>
 8004954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004958:	1e13      	subs	r3, r2, #0
 800495a:	6822      	ldr	r2, [r4, #0]
 800495c:	bf18      	it	ne
 800495e:	2301      	movne	r3, #1
 8004960:	0692      	lsls	r2, r2, #26
 8004962:	d42b      	bmi.n	80049bc <_printf_common+0xb0>
 8004964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004968:	4649      	mov	r1, r9
 800496a:	4638      	mov	r0, r7
 800496c:	47c0      	blx	r8
 800496e:	3001      	adds	r0, #1
 8004970:	d01e      	beq.n	80049b0 <_printf_common+0xa4>
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	6922      	ldr	r2, [r4, #16]
 8004976:	f003 0306 	and.w	r3, r3, #6
 800497a:	2b04      	cmp	r3, #4
 800497c:	bf02      	ittt	eq
 800497e:	68e5      	ldreq	r5, [r4, #12]
 8004980:	6833      	ldreq	r3, [r6, #0]
 8004982:	1aed      	subeq	r5, r5, r3
 8004984:	68a3      	ldr	r3, [r4, #8]
 8004986:	bf0c      	ite	eq
 8004988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800498c:	2500      	movne	r5, #0
 800498e:	4293      	cmp	r3, r2
 8004990:	bfc4      	itt	gt
 8004992:	1a9b      	subgt	r3, r3, r2
 8004994:	18ed      	addgt	r5, r5, r3
 8004996:	2600      	movs	r6, #0
 8004998:	341a      	adds	r4, #26
 800499a:	42b5      	cmp	r5, r6
 800499c:	d11a      	bne.n	80049d4 <_printf_common+0xc8>
 800499e:	2000      	movs	r0, #0
 80049a0:	e008      	b.n	80049b4 <_printf_common+0xa8>
 80049a2:	2301      	movs	r3, #1
 80049a4:	4652      	mov	r2, sl
 80049a6:	4649      	mov	r1, r9
 80049a8:	4638      	mov	r0, r7
 80049aa:	47c0      	blx	r8
 80049ac:	3001      	adds	r0, #1
 80049ae:	d103      	bne.n	80049b8 <_printf_common+0xac>
 80049b0:	f04f 30ff 	mov.w	r0, #4294967295
 80049b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b8:	3501      	adds	r5, #1
 80049ba:	e7c6      	b.n	800494a <_printf_common+0x3e>
 80049bc:	18e1      	adds	r1, r4, r3
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	2030      	movs	r0, #48	; 0x30
 80049c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049c6:	4422      	add	r2, r4
 80049c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049d0:	3302      	adds	r3, #2
 80049d2:	e7c7      	b.n	8004964 <_printf_common+0x58>
 80049d4:	2301      	movs	r3, #1
 80049d6:	4622      	mov	r2, r4
 80049d8:	4649      	mov	r1, r9
 80049da:	4638      	mov	r0, r7
 80049dc:	47c0      	blx	r8
 80049de:	3001      	adds	r0, #1
 80049e0:	d0e6      	beq.n	80049b0 <_printf_common+0xa4>
 80049e2:	3601      	adds	r6, #1
 80049e4:	e7d9      	b.n	800499a <_printf_common+0x8e>
	...

080049e8 <_printf_i>:
 80049e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049ec:	7e0f      	ldrb	r7, [r1, #24]
 80049ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049f0:	2f78      	cmp	r7, #120	; 0x78
 80049f2:	4691      	mov	r9, r2
 80049f4:	4680      	mov	r8, r0
 80049f6:	460c      	mov	r4, r1
 80049f8:	469a      	mov	sl, r3
 80049fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049fe:	d807      	bhi.n	8004a10 <_printf_i+0x28>
 8004a00:	2f62      	cmp	r7, #98	; 0x62
 8004a02:	d80a      	bhi.n	8004a1a <_printf_i+0x32>
 8004a04:	2f00      	cmp	r7, #0
 8004a06:	f000 80d4 	beq.w	8004bb2 <_printf_i+0x1ca>
 8004a0a:	2f58      	cmp	r7, #88	; 0x58
 8004a0c:	f000 80c0 	beq.w	8004b90 <_printf_i+0x1a8>
 8004a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a18:	e03a      	b.n	8004a90 <_printf_i+0xa8>
 8004a1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a1e:	2b15      	cmp	r3, #21
 8004a20:	d8f6      	bhi.n	8004a10 <_printf_i+0x28>
 8004a22:	a101      	add	r1, pc, #4	; (adr r1, 8004a28 <_printf_i+0x40>)
 8004a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a28:	08004a81 	.word	0x08004a81
 8004a2c:	08004a95 	.word	0x08004a95
 8004a30:	08004a11 	.word	0x08004a11
 8004a34:	08004a11 	.word	0x08004a11
 8004a38:	08004a11 	.word	0x08004a11
 8004a3c:	08004a11 	.word	0x08004a11
 8004a40:	08004a95 	.word	0x08004a95
 8004a44:	08004a11 	.word	0x08004a11
 8004a48:	08004a11 	.word	0x08004a11
 8004a4c:	08004a11 	.word	0x08004a11
 8004a50:	08004a11 	.word	0x08004a11
 8004a54:	08004b99 	.word	0x08004b99
 8004a58:	08004ac1 	.word	0x08004ac1
 8004a5c:	08004b53 	.word	0x08004b53
 8004a60:	08004a11 	.word	0x08004a11
 8004a64:	08004a11 	.word	0x08004a11
 8004a68:	08004bbb 	.word	0x08004bbb
 8004a6c:	08004a11 	.word	0x08004a11
 8004a70:	08004ac1 	.word	0x08004ac1
 8004a74:	08004a11 	.word	0x08004a11
 8004a78:	08004a11 	.word	0x08004a11
 8004a7c:	08004b5b 	.word	0x08004b5b
 8004a80:	682b      	ldr	r3, [r5, #0]
 8004a82:	1d1a      	adds	r2, r3, #4
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	602a      	str	r2, [r5, #0]
 8004a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a90:	2301      	movs	r3, #1
 8004a92:	e09f      	b.n	8004bd4 <_printf_i+0x1ec>
 8004a94:	6820      	ldr	r0, [r4, #0]
 8004a96:	682b      	ldr	r3, [r5, #0]
 8004a98:	0607      	lsls	r7, r0, #24
 8004a9a:	f103 0104 	add.w	r1, r3, #4
 8004a9e:	6029      	str	r1, [r5, #0]
 8004aa0:	d501      	bpl.n	8004aa6 <_printf_i+0xbe>
 8004aa2:	681e      	ldr	r6, [r3, #0]
 8004aa4:	e003      	b.n	8004aae <_printf_i+0xc6>
 8004aa6:	0646      	lsls	r6, r0, #25
 8004aa8:	d5fb      	bpl.n	8004aa2 <_printf_i+0xba>
 8004aaa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004aae:	2e00      	cmp	r6, #0
 8004ab0:	da03      	bge.n	8004aba <_printf_i+0xd2>
 8004ab2:	232d      	movs	r3, #45	; 0x2d
 8004ab4:	4276      	negs	r6, r6
 8004ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aba:	485a      	ldr	r0, [pc, #360]	; (8004c24 <_printf_i+0x23c>)
 8004abc:	230a      	movs	r3, #10
 8004abe:	e012      	b.n	8004ae6 <_printf_i+0xfe>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	6820      	ldr	r0, [r4, #0]
 8004ac4:	1d19      	adds	r1, r3, #4
 8004ac6:	6029      	str	r1, [r5, #0]
 8004ac8:	0605      	lsls	r5, r0, #24
 8004aca:	d501      	bpl.n	8004ad0 <_printf_i+0xe8>
 8004acc:	681e      	ldr	r6, [r3, #0]
 8004ace:	e002      	b.n	8004ad6 <_printf_i+0xee>
 8004ad0:	0641      	lsls	r1, r0, #25
 8004ad2:	d5fb      	bpl.n	8004acc <_printf_i+0xe4>
 8004ad4:	881e      	ldrh	r6, [r3, #0]
 8004ad6:	4853      	ldr	r0, [pc, #332]	; (8004c24 <_printf_i+0x23c>)
 8004ad8:	2f6f      	cmp	r7, #111	; 0x6f
 8004ada:	bf0c      	ite	eq
 8004adc:	2308      	moveq	r3, #8
 8004ade:	230a      	movne	r3, #10
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ae6:	6865      	ldr	r5, [r4, #4]
 8004ae8:	60a5      	str	r5, [r4, #8]
 8004aea:	2d00      	cmp	r5, #0
 8004aec:	bfa2      	ittt	ge
 8004aee:	6821      	ldrge	r1, [r4, #0]
 8004af0:	f021 0104 	bicge.w	r1, r1, #4
 8004af4:	6021      	strge	r1, [r4, #0]
 8004af6:	b90e      	cbnz	r6, 8004afc <_printf_i+0x114>
 8004af8:	2d00      	cmp	r5, #0
 8004afa:	d04b      	beq.n	8004b94 <_printf_i+0x1ac>
 8004afc:	4615      	mov	r5, r2
 8004afe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b02:	fb03 6711 	mls	r7, r3, r1, r6
 8004b06:	5dc7      	ldrb	r7, [r0, r7]
 8004b08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b0c:	4637      	mov	r7, r6
 8004b0e:	42bb      	cmp	r3, r7
 8004b10:	460e      	mov	r6, r1
 8004b12:	d9f4      	bls.n	8004afe <_printf_i+0x116>
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d10b      	bne.n	8004b30 <_printf_i+0x148>
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	07de      	lsls	r6, r3, #31
 8004b1c:	d508      	bpl.n	8004b30 <_printf_i+0x148>
 8004b1e:	6923      	ldr	r3, [r4, #16]
 8004b20:	6861      	ldr	r1, [r4, #4]
 8004b22:	4299      	cmp	r1, r3
 8004b24:	bfde      	ittt	le
 8004b26:	2330      	movle	r3, #48	; 0x30
 8004b28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b30:	1b52      	subs	r2, r2, r5
 8004b32:	6122      	str	r2, [r4, #16]
 8004b34:	f8cd a000 	str.w	sl, [sp]
 8004b38:	464b      	mov	r3, r9
 8004b3a:	aa03      	add	r2, sp, #12
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	4640      	mov	r0, r8
 8004b40:	f7ff fee4 	bl	800490c <_printf_common>
 8004b44:	3001      	adds	r0, #1
 8004b46:	d14a      	bne.n	8004bde <_printf_i+0x1f6>
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4c:	b004      	add	sp, #16
 8004b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	f043 0320 	orr.w	r3, r3, #32
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	4833      	ldr	r0, [pc, #204]	; (8004c28 <_printf_i+0x240>)
 8004b5c:	2778      	movs	r7, #120	; 0x78
 8004b5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	6829      	ldr	r1, [r5, #0]
 8004b66:	061f      	lsls	r7, r3, #24
 8004b68:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b6c:	d402      	bmi.n	8004b74 <_printf_i+0x18c>
 8004b6e:	065f      	lsls	r7, r3, #25
 8004b70:	bf48      	it	mi
 8004b72:	b2b6      	uxthmi	r6, r6
 8004b74:	07df      	lsls	r7, r3, #31
 8004b76:	bf48      	it	mi
 8004b78:	f043 0320 	orrmi.w	r3, r3, #32
 8004b7c:	6029      	str	r1, [r5, #0]
 8004b7e:	bf48      	it	mi
 8004b80:	6023      	strmi	r3, [r4, #0]
 8004b82:	b91e      	cbnz	r6, 8004b8c <_printf_i+0x1a4>
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	f023 0320 	bic.w	r3, r3, #32
 8004b8a:	6023      	str	r3, [r4, #0]
 8004b8c:	2310      	movs	r3, #16
 8004b8e:	e7a7      	b.n	8004ae0 <_printf_i+0xf8>
 8004b90:	4824      	ldr	r0, [pc, #144]	; (8004c24 <_printf_i+0x23c>)
 8004b92:	e7e4      	b.n	8004b5e <_printf_i+0x176>
 8004b94:	4615      	mov	r5, r2
 8004b96:	e7bd      	b.n	8004b14 <_printf_i+0x12c>
 8004b98:	682b      	ldr	r3, [r5, #0]
 8004b9a:	6826      	ldr	r6, [r4, #0]
 8004b9c:	6961      	ldr	r1, [r4, #20]
 8004b9e:	1d18      	adds	r0, r3, #4
 8004ba0:	6028      	str	r0, [r5, #0]
 8004ba2:	0635      	lsls	r5, r6, #24
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	d501      	bpl.n	8004bac <_printf_i+0x1c4>
 8004ba8:	6019      	str	r1, [r3, #0]
 8004baa:	e002      	b.n	8004bb2 <_printf_i+0x1ca>
 8004bac:	0670      	lsls	r0, r6, #25
 8004bae:	d5fb      	bpl.n	8004ba8 <_printf_i+0x1c0>
 8004bb0:	8019      	strh	r1, [r3, #0]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	6123      	str	r3, [r4, #16]
 8004bb6:	4615      	mov	r5, r2
 8004bb8:	e7bc      	b.n	8004b34 <_printf_i+0x14c>
 8004bba:	682b      	ldr	r3, [r5, #0]
 8004bbc:	1d1a      	adds	r2, r3, #4
 8004bbe:	602a      	str	r2, [r5, #0]
 8004bc0:	681d      	ldr	r5, [r3, #0]
 8004bc2:	6862      	ldr	r2, [r4, #4]
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	f7fb fb12 	bl	80001f0 <memchr>
 8004bcc:	b108      	cbz	r0, 8004bd2 <_printf_i+0x1ea>
 8004bce:	1b40      	subs	r0, r0, r5
 8004bd0:	6060      	str	r0, [r4, #4]
 8004bd2:	6863      	ldr	r3, [r4, #4]
 8004bd4:	6123      	str	r3, [r4, #16]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bdc:	e7aa      	b.n	8004b34 <_printf_i+0x14c>
 8004bde:	6923      	ldr	r3, [r4, #16]
 8004be0:	462a      	mov	r2, r5
 8004be2:	4649      	mov	r1, r9
 8004be4:	4640      	mov	r0, r8
 8004be6:	47d0      	blx	sl
 8004be8:	3001      	adds	r0, #1
 8004bea:	d0ad      	beq.n	8004b48 <_printf_i+0x160>
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	079b      	lsls	r3, r3, #30
 8004bf0:	d413      	bmi.n	8004c1a <_printf_i+0x232>
 8004bf2:	68e0      	ldr	r0, [r4, #12]
 8004bf4:	9b03      	ldr	r3, [sp, #12]
 8004bf6:	4298      	cmp	r0, r3
 8004bf8:	bfb8      	it	lt
 8004bfa:	4618      	movlt	r0, r3
 8004bfc:	e7a6      	b.n	8004b4c <_printf_i+0x164>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	4632      	mov	r2, r6
 8004c02:	4649      	mov	r1, r9
 8004c04:	4640      	mov	r0, r8
 8004c06:	47d0      	blx	sl
 8004c08:	3001      	adds	r0, #1
 8004c0a:	d09d      	beq.n	8004b48 <_printf_i+0x160>
 8004c0c:	3501      	adds	r5, #1
 8004c0e:	68e3      	ldr	r3, [r4, #12]
 8004c10:	9903      	ldr	r1, [sp, #12]
 8004c12:	1a5b      	subs	r3, r3, r1
 8004c14:	42ab      	cmp	r3, r5
 8004c16:	dcf2      	bgt.n	8004bfe <_printf_i+0x216>
 8004c18:	e7eb      	b.n	8004bf2 <_printf_i+0x20a>
 8004c1a:	2500      	movs	r5, #0
 8004c1c:	f104 0619 	add.w	r6, r4, #25
 8004c20:	e7f5      	b.n	8004c0e <_printf_i+0x226>
 8004c22:	bf00      	nop
 8004c24:	080052cd 	.word	0x080052cd
 8004c28:	080052de 	.word	0x080052de

08004c2c <memmove>:
 8004c2c:	4288      	cmp	r0, r1
 8004c2e:	b510      	push	{r4, lr}
 8004c30:	eb01 0402 	add.w	r4, r1, r2
 8004c34:	d902      	bls.n	8004c3c <memmove+0x10>
 8004c36:	4284      	cmp	r4, r0
 8004c38:	4623      	mov	r3, r4
 8004c3a:	d807      	bhi.n	8004c4c <memmove+0x20>
 8004c3c:	1e43      	subs	r3, r0, #1
 8004c3e:	42a1      	cmp	r1, r4
 8004c40:	d008      	beq.n	8004c54 <memmove+0x28>
 8004c42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c4a:	e7f8      	b.n	8004c3e <memmove+0x12>
 8004c4c:	4402      	add	r2, r0
 8004c4e:	4601      	mov	r1, r0
 8004c50:	428a      	cmp	r2, r1
 8004c52:	d100      	bne.n	8004c56 <memmove+0x2a>
 8004c54:	bd10      	pop	{r4, pc}
 8004c56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c5e:	e7f7      	b.n	8004c50 <memmove+0x24>

08004c60 <_sbrk_r>:
 8004c60:	b538      	push	{r3, r4, r5, lr}
 8004c62:	4d06      	ldr	r5, [pc, #24]	; (8004c7c <_sbrk_r+0x1c>)
 8004c64:	2300      	movs	r3, #0
 8004c66:	4604      	mov	r4, r0
 8004c68:	4608      	mov	r0, r1
 8004c6a:	602b      	str	r3, [r5, #0]
 8004c6c:	f7fd f82e 	bl	8001ccc <_sbrk>
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	d102      	bne.n	8004c7a <_sbrk_r+0x1a>
 8004c74:	682b      	ldr	r3, [r5, #0]
 8004c76:	b103      	cbz	r3, 8004c7a <_sbrk_r+0x1a>
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	bd38      	pop	{r3, r4, r5, pc}
 8004c7c:	20000258 	.word	0x20000258

08004c80 <memcpy>:
 8004c80:	440a      	add	r2, r1
 8004c82:	4291      	cmp	r1, r2
 8004c84:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c88:	d100      	bne.n	8004c8c <memcpy+0xc>
 8004c8a:	4770      	bx	lr
 8004c8c:	b510      	push	{r4, lr}
 8004c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c96:	4291      	cmp	r1, r2
 8004c98:	d1f9      	bne.n	8004c8e <memcpy+0xe>
 8004c9a:	bd10      	pop	{r4, pc}

08004c9c <_realloc_r>:
 8004c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca0:	4680      	mov	r8, r0
 8004ca2:	4614      	mov	r4, r2
 8004ca4:	460e      	mov	r6, r1
 8004ca6:	b921      	cbnz	r1, 8004cb2 <_realloc_r+0x16>
 8004ca8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cac:	4611      	mov	r1, r2
 8004cae:	f7ff bc49 	b.w	8004544 <_malloc_r>
 8004cb2:	b92a      	cbnz	r2, 8004cc0 <_realloc_r+0x24>
 8004cb4:	f7ff fbda 	bl	800446c <_free_r>
 8004cb8:	4625      	mov	r5, r4
 8004cba:	4628      	mov	r0, r5
 8004cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cc0:	f000 f81b 	bl	8004cfa <_malloc_usable_size_r>
 8004cc4:	4284      	cmp	r4, r0
 8004cc6:	4607      	mov	r7, r0
 8004cc8:	d802      	bhi.n	8004cd0 <_realloc_r+0x34>
 8004cca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cce:	d812      	bhi.n	8004cf6 <_realloc_r+0x5a>
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	4640      	mov	r0, r8
 8004cd4:	f7ff fc36 	bl	8004544 <_malloc_r>
 8004cd8:	4605      	mov	r5, r0
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d0ed      	beq.n	8004cba <_realloc_r+0x1e>
 8004cde:	42bc      	cmp	r4, r7
 8004ce0:	4622      	mov	r2, r4
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	bf28      	it	cs
 8004ce6:	463a      	movcs	r2, r7
 8004ce8:	f7ff ffca 	bl	8004c80 <memcpy>
 8004cec:	4631      	mov	r1, r6
 8004cee:	4640      	mov	r0, r8
 8004cf0:	f7ff fbbc 	bl	800446c <_free_r>
 8004cf4:	e7e1      	b.n	8004cba <_realloc_r+0x1e>
 8004cf6:	4635      	mov	r5, r6
 8004cf8:	e7df      	b.n	8004cba <_realloc_r+0x1e>

08004cfa <_malloc_usable_size_r>:
 8004cfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cfe:	1f18      	subs	r0, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bfbc      	itt	lt
 8004d04:	580b      	ldrlt	r3, [r1, r0]
 8004d06:	18c0      	addlt	r0, r0, r3
 8004d08:	4770      	bx	lr

08004d0a <atan2>:
 8004d0a:	f000 b801 	b.w	8004d10 <__ieee754_atan2>
	...

08004d10 <__ieee754_atan2>:
 8004d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d14:	ec57 6b11 	vmov	r6, r7, d1
 8004d18:	4273      	negs	r3, r6
 8004d1a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8004e98 <__ieee754_atan2+0x188>
 8004d1e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8004d22:	4333      	orrs	r3, r6
 8004d24:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8004d28:	4543      	cmp	r3, r8
 8004d2a:	ec51 0b10 	vmov	r0, r1, d0
 8004d2e:	ee11 5a10 	vmov	r5, s2
 8004d32:	d80a      	bhi.n	8004d4a <__ieee754_atan2+0x3a>
 8004d34:	4244      	negs	r4, r0
 8004d36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004d3a:	4304      	orrs	r4, r0
 8004d3c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8004d40:	4544      	cmp	r4, r8
 8004d42:	ee10 9a10 	vmov	r9, s0
 8004d46:	468e      	mov	lr, r1
 8004d48:	d907      	bls.n	8004d5a <__ieee754_atan2+0x4a>
 8004d4a:	4632      	mov	r2, r6
 8004d4c:	463b      	mov	r3, r7
 8004d4e:	f7fb faa5 	bl	800029c <__adddf3>
 8004d52:	ec41 0b10 	vmov	d0, r0, r1
 8004d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d5a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8004d5e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004d62:	4334      	orrs	r4, r6
 8004d64:	d103      	bne.n	8004d6e <__ieee754_atan2+0x5e>
 8004d66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d6a:	f000 b899 	b.w	8004ea0 <atan>
 8004d6e:	17bc      	asrs	r4, r7, #30
 8004d70:	f004 0402 	and.w	r4, r4, #2
 8004d74:	ea53 0909 	orrs.w	r9, r3, r9
 8004d78:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8004d7c:	d107      	bne.n	8004d8e <__ieee754_atan2+0x7e>
 8004d7e:	2c02      	cmp	r4, #2
 8004d80:	d05f      	beq.n	8004e42 <__ieee754_atan2+0x132>
 8004d82:	2c03      	cmp	r4, #3
 8004d84:	d1e5      	bne.n	8004d52 <__ieee754_atan2+0x42>
 8004d86:	a140      	add	r1, pc, #256	; (adr r1, 8004e88 <__ieee754_atan2+0x178>)
 8004d88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d8c:	e7e1      	b.n	8004d52 <__ieee754_atan2+0x42>
 8004d8e:	4315      	orrs	r5, r2
 8004d90:	d106      	bne.n	8004da0 <__ieee754_atan2+0x90>
 8004d92:	f1be 0f00 	cmp.w	lr, #0
 8004d96:	da5f      	bge.n	8004e58 <__ieee754_atan2+0x148>
 8004d98:	a13d      	add	r1, pc, #244	; (adr r1, 8004e90 <__ieee754_atan2+0x180>)
 8004d9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d9e:	e7d8      	b.n	8004d52 <__ieee754_atan2+0x42>
 8004da0:	4542      	cmp	r2, r8
 8004da2:	d10f      	bne.n	8004dc4 <__ieee754_atan2+0xb4>
 8004da4:	4293      	cmp	r3, r2
 8004da6:	f104 34ff 	add.w	r4, r4, #4294967295
 8004daa:	d107      	bne.n	8004dbc <__ieee754_atan2+0xac>
 8004dac:	2c02      	cmp	r4, #2
 8004dae:	d84c      	bhi.n	8004e4a <__ieee754_atan2+0x13a>
 8004db0:	4b33      	ldr	r3, [pc, #204]	; (8004e80 <__ieee754_atan2+0x170>)
 8004db2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004db6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004dba:	e7ca      	b.n	8004d52 <__ieee754_atan2+0x42>
 8004dbc:	2c02      	cmp	r4, #2
 8004dbe:	d848      	bhi.n	8004e52 <__ieee754_atan2+0x142>
 8004dc0:	4b30      	ldr	r3, [pc, #192]	; (8004e84 <__ieee754_atan2+0x174>)
 8004dc2:	e7f6      	b.n	8004db2 <__ieee754_atan2+0xa2>
 8004dc4:	4543      	cmp	r3, r8
 8004dc6:	d0e4      	beq.n	8004d92 <__ieee754_atan2+0x82>
 8004dc8:	1a9b      	subs	r3, r3, r2
 8004dca:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8004dce:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004dd2:	da1e      	bge.n	8004e12 <__ieee754_atan2+0x102>
 8004dd4:	2f00      	cmp	r7, #0
 8004dd6:	da01      	bge.n	8004ddc <__ieee754_atan2+0xcc>
 8004dd8:	323c      	adds	r2, #60	; 0x3c
 8004dda:	db1e      	blt.n	8004e1a <__ieee754_atan2+0x10a>
 8004ddc:	4632      	mov	r2, r6
 8004dde:	463b      	mov	r3, r7
 8004de0:	f7fb fd3c 	bl	800085c <__aeabi_ddiv>
 8004de4:	ec41 0b10 	vmov	d0, r0, r1
 8004de8:	f000 f9fa 	bl	80051e0 <fabs>
 8004dec:	f000 f858 	bl	8004ea0 <atan>
 8004df0:	ec51 0b10 	vmov	r0, r1, d0
 8004df4:	2c01      	cmp	r4, #1
 8004df6:	d013      	beq.n	8004e20 <__ieee754_atan2+0x110>
 8004df8:	2c02      	cmp	r4, #2
 8004dfa:	d015      	beq.n	8004e28 <__ieee754_atan2+0x118>
 8004dfc:	2c00      	cmp	r4, #0
 8004dfe:	d0a8      	beq.n	8004d52 <__ieee754_atan2+0x42>
 8004e00:	a317      	add	r3, pc, #92	; (adr r3, 8004e60 <__ieee754_atan2+0x150>)
 8004e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e06:	f7fb fa47 	bl	8000298 <__aeabi_dsub>
 8004e0a:	a317      	add	r3, pc, #92	; (adr r3, 8004e68 <__ieee754_atan2+0x158>)
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	e014      	b.n	8004e3c <__ieee754_atan2+0x12c>
 8004e12:	a117      	add	r1, pc, #92	; (adr r1, 8004e70 <__ieee754_atan2+0x160>)
 8004e14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e18:	e7ec      	b.n	8004df4 <__ieee754_atan2+0xe4>
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	e7e9      	b.n	8004df4 <__ieee754_atan2+0xe4>
 8004e20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e24:	4619      	mov	r1, r3
 8004e26:	e794      	b.n	8004d52 <__ieee754_atan2+0x42>
 8004e28:	a30d      	add	r3, pc, #52	; (adr r3, 8004e60 <__ieee754_atan2+0x150>)
 8004e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2e:	f7fb fa33 	bl	8000298 <__aeabi_dsub>
 8004e32:	4602      	mov	r2, r0
 8004e34:	460b      	mov	r3, r1
 8004e36:	a10c      	add	r1, pc, #48	; (adr r1, 8004e68 <__ieee754_atan2+0x158>)
 8004e38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e3c:	f7fb fa2c 	bl	8000298 <__aeabi_dsub>
 8004e40:	e787      	b.n	8004d52 <__ieee754_atan2+0x42>
 8004e42:	a109      	add	r1, pc, #36	; (adr r1, 8004e68 <__ieee754_atan2+0x158>)
 8004e44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e48:	e783      	b.n	8004d52 <__ieee754_atan2+0x42>
 8004e4a:	a10b      	add	r1, pc, #44	; (adr r1, 8004e78 <__ieee754_atan2+0x168>)
 8004e4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e50:	e77f      	b.n	8004d52 <__ieee754_atan2+0x42>
 8004e52:	2000      	movs	r0, #0
 8004e54:	2100      	movs	r1, #0
 8004e56:	e77c      	b.n	8004d52 <__ieee754_atan2+0x42>
 8004e58:	a105      	add	r1, pc, #20	; (adr r1, 8004e70 <__ieee754_atan2+0x160>)
 8004e5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e5e:	e778      	b.n	8004d52 <__ieee754_atan2+0x42>
 8004e60:	33145c07 	.word	0x33145c07
 8004e64:	3ca1a626 	.word	0x3ca1a626
 8004e68:	54442d18 	.word	0x54442d18
 8004e6c:	400921fb 	.word	0x400921fb
 8004e70:	54442d18 	.word	0x54442d18
 8004e74:	3ff921fb 	.word	0x3ff921fb
 8004e78:	54442d18 	.word	0x54442d18
 8004e7c:	3fe921fb 	.word	0x3fe921fb
 8004e80:	080052f0 	.word	0x080052f0
 8004e84:	08005308 	.word	0x08005308
 8004e88:	54442d18 	.word	0x54442d18
 8004e8c:	c00921fb 	.word	0xc00921fb
 8004e90:	54442d18 	.word	0x54442d18
 8004e94:	bff921fb 	.word	0xbff921fb
 8004e98:	7ff00000 	.word	0x7ff00000
 8004e9c:	00000000 	.word	0x00000000

08004ea0 <atan>:
 8004ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea4:	ec55 4b10 	vmov	r4, r5, d0
 8004ea8:	4bc3      	ldr	r3, [pc, #780]	; (80051b8 <atan+0x318>)
 8004eaa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004eae:	429e      	cmp	r6, r3
 8004eb0:	46ab      	mov	fp, r5
 8004eb2:	dd18      	ble.n	8004ee6 <atan+0x46>
 8004eb4:	4bc1      	ldr	r3, [pc, #772]	; (80051bc <atan+0x31c>)
 8004eb6:	429e      	cmp	r6, r3
 8004eb8:	dc01      	bgt.n	8004ebe <atan+0x1e>
 8004eba:	d109      	bne.n	8004ed0 <atan+0x30>
 8004ebc:	b144      	cbz	r4, 8004ed0 <atan+0x30>
 8004ebe:	4622      	mov	r2, r4
 8004ec0:	462b      	mov	r3, r5
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	f7fb f9e9 	bl	800029c <__adddf3>
 8004eca:	4604      	mov	r4, r0
 8004ecc:	460d      	mov	r5, r1
 8004ece:	e006      	b.n	8004ede <atan+0x3e>
 8004ed0:	f1bb 0f00 	cmp.w	fp, #0
 8004ed4:	f300 8131 	bgt.w	800513a <atan+0x29a>
 8004ed8:	a59b      	add	r5, pc, #620	; (adr r5, 8005148 <atan+0x2a8>)
 8004eda:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004ede:	ec45 4b10 	vmov	d0, r4, r5
 8004ee2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ee6:	4bb6      	ldr	r3, [pc, #728]	; (80051c0 <atan+0x320>)
 8004ee8:	429e      	cmp	r6, r3
 8004eea:	dc14      	bgt.n	8004f16 <atan+0x76>
 8004eec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004ef0:	429e      	cmp	r6, r3
 8004ef2:	dc0d      	bgt.n	8004f10 <atan+0x70>
 8004ef4:	a396      	add	r3, pc, #600	; (adr r3, 8005150 <atan+0x2b0>)
 8004ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efa:	ee10 0a10 	vmov	r0, s0
 8004efe:	4629      	mov	r1, r5
 8004f00:	f7fb f9cc 	bl	800029c <__adddf3>
 8004f04:	4baf      	ldr	r3, [pc, #700]	; (80051c4 <atan+0x324>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	f7fb fe0e 	bl	8000b28 <__aeabi_dcmpgt>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d1e6      	bne.n	8004ede <atan+0x3e>
 8004f10:	f04f 3aff 	mov.w	sl, #4294967295
 8004f14:	e02b      	b.n	8004f6e <atan+0xce>
 8004f16:	f000 f963 	bl	80051e0 <fabs>
 8004f1a:	4bab      	ldr	r3, [pc, #684]	; (80051c8 <atan+0x328>)
 8004f1c:	429e      	cmp	r6, r3
 8004f1e:	ec55 4b10 	vmov	r4, r5, d0
 8004f22:	f300 80bf 	bgt.w	80050a4 <atan+0x204>
 8004f26:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004f2a:	429e      	cmp	r6, r3
 8004f2c:	f300 80a0 	bgt.w	8005070 <atan+0x1d0>
 8004f30:	ee10 2a10 	vmov	r2, s0
 8004f34:	ee10 0a10 	vmov	r0, s0
 8004f38:	462b      	mov	r3, r5
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	f7fb f9ae 	bl	800029c <__adddf3>
 8004f40:	4ba0      	ldr	r3, [pc, #640]	; (80051c4 <atan+0x324>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	f7fb f9a8 	bl	8000298 <__aeabi_dsub>
 8004f48:	2200      	movs	r2, #0
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	460f      	mov	r7, r1
 8004f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f52:	4620      	mov	r0, r4
 8004f54:	4629      	mov	r1, r5
 8004f56:	f7fb f9a1 	bl	800029c <__adddf3>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4630      	mov	r0, r6
 8004f60:	4639      	mov	r1, r7
 8004f62:	f7fb fc7b 	bl	800085c <__aeabi_ddiv>
 8004f66:	f04f 0a00 	mov.w	sl, #0
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	460d      	mov	r5, r1
 8004f6e:	4622      	mov	r2, r4
 8004f70:	462b      	mov	r3, r5
 8004f72:	4620      	mov	r0, r4
 8004f74:	4629      	mov	r1, r5
 8004f76:	f7fb fb47 	bl	8000608 <__aeabi_dmul>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4680      	mov	r8, r0
 8004f80:	4689      	mov	r9, r1
 8004f82:	f7fb fb41 	bl	8000608 <__aeabi_dmul>
 8004f86:	a374      	add	r3, pc, #464	; (adr r3, 8005158 <atan+0x2b8>)
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	4606      	mov	r6, r0
 8004f8e:	460f      	mov	r7, r1
 8004f90:	f7fb fb3a 	bl	8000608 <__aeabi_dmul>
 8004f94:	a372      	add	r3, pc, #456	; (adr r3, 8005160 <atan+0x2c0>)
 8004f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9a:	f7fb f97f 	bl	800029c <__adddf3>
 8004f9e:	4632      	mov	r2, r6
 8004fa0:	463b      	mov	r3, r7
 8004fa2:	f7fb fb31 	bl	8000608 <__aeabi_dmul>
 8004fa6:	a370      	add	r3, pc, #448	; (adr r3, 8005168 <atan+0x2c8>)
 8004fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fac:	f7fb f976 	bl	800029c <__adddf3>
 8004fb0:	4632      	mov	r2, r6
 8004fb2:	463b      	mov	r3, r7
 8004fb4:	f7fb fb28 	bl	8000608 <__aeabi_dmul>
 8004fb8:	a36d      	add	r3, pc, #436	; (adr r3, 8005170 <atan+0x2d0>)
 8004fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbe:	f7fb f96d 	bl	800029c <__adddf3>
 8004fc2:	4632      	mov	r2, r6
 8004fc4:	463b      	mov	r3, r7
 8004fc6:	f7fb fb1f 	bl	8000608 <__aeabi_dmul>
 8004fca:	a36b      	add	r3, pc, #428	; (adr r3, 8005178 <atan+0x2d8>)
 8004fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd0:	f7fb f964 	bl	800029c <__adddf3>
 8004fd4:	4632      	mov	r2, r6
 8004fd6:	463b      	mov	r3, r7
 8004fd8:	f7fb fb16 	bl	8000608 <__aeabi_dmul>
 8004fdc:	a368      	add	r3, pc, #416	; (adr r3, 8005180 <atan+0x2e0>)
 8004fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe2:	f7fb f95b 	bl	800029c <__adddf3>
 8004fe6:	4642      	mov	r2, r8
 8004fe8:	464b      	mov	r3, r9
 8004fea:	f7fb fb0d 	bl	8000608 <__aeabi_dmul>
 8004fee:	a366      	add	r3, pc, #408	; (adr r3, 8005188 <atan+0x2e8>)
 8004ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff4:	4680      	mov	r8, r0
 8004ff6:	4689      	mov	r9, r1
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	4639      	mov	r1, r7
 8004ffc:	f7fb fb04 	bl	8000608 <__aeabi_dmul>
 8005000:	a363      	add	r3, pc, #396	; (adr r3, 8005190 <atan+0x2f0>)
 8005002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005006:	f7fb f947 	bl	8000298 <__aeabi_dsub>
 800500a:	4632      	mov	r2, r6
 800500c:	463b      	mov	r3, r7
 800500e:	f7fb fafb 	bl	8000608 <__aeabi_dmul>
 8005012:	a361      	add	r3, pc, #388	; (adr r3, 8005198 <atan+0x2f8>)
 8005014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005018:	f7fb f93e 	bl	8000298 <__aeabi_dsub>
 800501c:	4632      	mov	r2, r6
 800501e:	463b      	mov	r3, r7
 8005020:	f7fb faf2 	bl	8000608 <__aeabi_dmul>
 8005024:	a35e      	add	r3, pc, #376	; (adr r3, 80051a0 <atan+0x300>)
 8005026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502a:	f7fb f935 	bl	8000298 <__aeabi_dsub>
 800502e:	4632      	mov	r2, r6
 8005030:	463b      	mov	r3, r7
 8005032:	f7fb fae9 	bl	8000608 <__aeabi_dmul>
 8005036:	a35c      	add	r3, pc, #368	; (adr r3, 80051a8 <atan+0x308>)
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	f7fb f92c 	bl	8000298 <__aeabi_dsub>
 8005040:	4632      	mov	r2, r6
 8005042:	463b      	mov	r3, r7
 8005044:	f7fb fae0 	bl	8000608 <__aeabi_dmul>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	4640      	mov	r0, r8
 800504e:	4649      	mov	r1, r9
 8005050:	f7fb f924 	bl	800029c <__adddf3>
 8005054:	4622      	mov	r2, r4
 8005056:	462b      	mov	r3, r5
 8005058:	f7fb fad6 	bl	8000608 <__aeabi_dmul>
 800505c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	d14b      	bne.n	80050fe <atan+0x25e>
 8005066:	4620      	mov	r0, r4
 8005068:	4629      	mov	r1, r5
 800506a:	f7fb f915 	bl	8000298 <__aeabi_dsub>
 800506e:	e72c      	b.n	8004eca <atan+0x2a>
 8005070:	ee10 0a10 	vmov	r0, s0
 8005074:	4b53      	ldr	r3, [pc, #332]	; (80051c4 <atan+0x324>)
 8005076:	2200      	movs	r2, #0
 8005078:	4629      	mov	r1, r5
 800507a:	f7fb f90d 	bl	8000298 <__aeabi_dsub>
 800507e:	4b51      	ldr	r3, [pc, #324]	; (80051c4 <atan+0x324>)
 8005080:	4606      	mov	r6, r0
 8005082:	460f      	mov	r7, r1
 8005084:	2200      	movs	r2, #0
 8005086:	4620      	mov	r0, r4
 8005088:	4629      	mov	r1, r5
 800508a:	f7fb f907 	bl	800029c <__adddf3>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4630      	mov	r0, r6
 8005094:	4639      	mov	r1, r7
 8005096:	f7fb fbe1 	bl	800085c <__aeabi_ddiv>
 800509a:	f04f 0a01 	mov.w	sl, #1
 800509e:	4604      	mov	r4, r0
 80050a0:	460d      	mov	r5, r1
 80050a2:	e764      	b.n	8004f6e <atan+0xce>
 80050a4:	4b49      	ldr	r3, [pc, #292]	; (80051cc <atan+0x32c>)
 80050a6:	429e      	cmp	r6, r3
 80050a8:	da1d      	bge.n	80050e6 <atan+0x246>
 80050aa:	ee10 0a10 	vmov	r0, s0
 80050ae:	4b48      	ldr	r3, [pc, #288]	; (80051d0 <atan+0x330>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	4629      	mov	r1, r5
 80050b4:	f7fb f8f0 	bl	8000298 <__aeabi_dsub>
 80050b8:	4b45      	ldr	r3, [pc, #276]	; (80051d0 <atan+0x330>)
 80050ba:	4606      	mov	r6, r0
 80050bc:	460f      	mov	r7, r1
 80050be:	2200      	movs	r2, #0
 80050c0:	4620      	mov	r0, r4
 80050c2:	4629      	mov	r1, r5
 80050c4:	f7fb faa0 	bl	8000608 <__aeabi_dmul>
 80050c8:	4b3e      	ldr	r3, [pc, #248]	; (80051c4 <atan+0x324>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	f7fb f8e6 	bl	800029c <__adddf3>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4630      	mov	r0, r6
 80050d6:	4639      	mov	r1, r7
 80050d8:	f7fb fbc0 	bl	800085c <__aeabi_ddiv>
 80050dc:	f04f 0a02 	mov.w	sl, #2
 80050e0:	4604      	mov	r4, r0
 80050e2:	460d      	mov	r5, r1
 80050e4:	e743      	b.n	8004f6e <atan+0xce>
 80050e6:	462b      	mov	r3, r5
 80050e8:	ee10 2a10 	vmov	r2, s0
 80050ec:	4939      	ldr	r1, [pc, #228]	; (80051d4 <atan+0x334>)
 80050ee:	2000      	movs	r0, #0
 80050f0:	f7fb fbb4 	bl	800085c <__aeabi_ddiv>
 80050f4:	f04f 0a03 	mov.w	sl, #3
 80050f8:	4604      	mov	r4, r0
 80050fa:	460d      	mov	r5, r1
 80050fc:	e737      	b.n	8004f6e <atan+0xce>
 80050fe:	4b36      	ldr	r3, [pc, #216]	; (80051d8 <atan+0x338>)
 8005100:	4e36      	ldr	r6, [pc, #216]	; (80051dc <atan+0x33c>)
 8005102:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510a:	f7fb f8c5 	bl	8000298 <__aeabi_dsub>
 800510e:	4622      	mov	r2, r4
 8005110:	462b      	mov	r3, r5
 8005112:	f7fb f8c1 	bl	8000298 <__aeabi_dsub>
 8005116:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005122:	f7fb f8b9 	bl	8000298 <__aeabi_dsub>
 8005126:	f1bb 0f00 	cmp.w	fp, #0
 800512a:	4604      	mov	r4, r0
 800512c:	460d      	mov	r5, r1
 800512e:	f6bf aed6 	bge.w	8004ede <atan+0x3e>
 8005132:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005136:	461d      	mov	r5, r3
 8005138:	e6d1      	b.n	8004ede <atan+0x3e>
 800513a:	a51d      	add	r5, pc, #116	; (adr r5, 80051b0 <atan+0x310>)
 800513c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005140:	e6cd      	b.n	8004ede <atan+0x3e>
 8005142:	bf00      	nop
 8005144:	f3af 8000 	nop.w
 8005148:	54442d18 	.word	0x54442d18
 800514c:	bff921fb 	.word	0xbff921fb
 8005150:	8800759c 	.word	0x8800759c
 8005154:	7e37e43c 	.word	0x7e37e43c
 8005158:	e322da11 	.word	0xe322da11
 800515c:	3f90ad3a 	.word	0x3f90ad3a
 8005160:	24760deb 	.word	0x24760deb
 8005164:	3fa97b4b 	.word	0x3fa97b4b
 8005168:	a0d03d51 	.word	0xa0d03d51
 800516c:	3fb10d66 	.word	0x3fb10d66
 8005170:	c54c206e 	.word	0xc54c206e
 8005174:	3fb745cd 	.word	0x3fb745cd
 8005178:	920083ff 	.word	0x920083ff
 800517c:	3fc24924 	.word	0x3fc24924
 8005180:	5555550d 	.word	0x5555550d
 8005184:	3fd55555 	.word	0x3fd55555
 8005188:	2c6a6c2f 	.word	0x2c6a6c2f
 800518c:	bfa2b444 	.word	0xbfa2b444
 8005190:	52defd9a 	.word	0x52defd9a
 8005194:	3fadde2d 	.word	0x3fadde2d
 8005198:	af749a6d 	.word	0xaf749a6d
 800519c:	3fb3b0f2 	.word	0x3fb3b0f2
 80051a0:	fe231671 	.word	0xfe231671
 80051a4:	3fbc71c6 	.word	0x3fbc71c6
 80051a8:	9998ebc4 	.word	0x9998ebc4
 80051ac:	3fc99999 	.word	0x3fc99999
 80051b0:	54442d18 	.word	0x54442d18
 80051b4:	3ff921fb 	.word	0x3ff921fb
 80051b8:	440fffff 	.word	0x440fffff
 80051bc:	7ff00000 	.word	0x7ff00000
 80051c0:	3fdbffff 	.word	0x3fdbffff
 80051c4:	3ff00000 	.word	0x3ff00000
 80051c8:	3ff2ffff 	.word	0x3ff2ffff
 80051cc:	40038000 	.word	0x40038000
 80051d0:	3ff80000 	.word	0x3ff80000
 80051d4:	bff00000 	.word	0xbff00000
 80051d8:	08005340 	.word	0x08005340
 80051dc:	08005320 	.word	0x08005320

080051e0 <fabs>:
 80051e0:	ec51 0b10 	vmov	r0, r1, d0
 80051e4:	ee10 2a10 	vmov	r2, s0
 80051e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80051ec:	ec43 2b10 	vmov	d0, r2, r3
 80051f0:	4770      	bx	lr
	...

080051f4 <_init>:
 80051f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f6:	bf00      	nop
 80051f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051fa:	bc08      	pop	{r3}
 80051fc:	469e      	mov	lr, r3
 80051fe:	4770      	bx	lr

08005200 <_fini>:
 8005200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005202:	bf00      	nop
 8005204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005206:	bc08      	pop	{r3}
 8005208:	469e      	mov	lr, r3
 800520a:	4770      	bx	lr
