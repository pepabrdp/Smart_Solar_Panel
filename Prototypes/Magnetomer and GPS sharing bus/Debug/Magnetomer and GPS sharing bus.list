
Magnetomer and GPS sharing bus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000644c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  080065f0  080065f0  000165f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006900  08006900  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006900  08006900  00016900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006908  08006908  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006908  08006908  00016908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800690c  0800690c  0001690c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000074  08006984  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08006984  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aaf3  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001933  00000000  00000000  0002abda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  0002c510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000079b  00000000  00000000  0002cec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000169ef  00000000  00000000  0002d663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cbb0  00000000  00000000  00044052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a2cb  00000000  00000000  00050c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000036f0  00000000  00000000  000daed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  000de5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080065d4 	.word	0x080065d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080065d4 	.word	0x080065d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2f>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b44:	bf24      	itt	cs
 8000b46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4e:	d90d      	bls.n	8000b6c <__aeabi_d2f+0x30>
 8000b50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b64:	bf08      	it	eq
 8000b66:	f020 0001 	biceq.w	r0, r0, #1
 8000b6a:	4770      	bx	lr
 8000b6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b70:	d121      	bne.n	8000bb6 <__aeabi_d2f+0x7a>
 8000b72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b76:	bfbc      	itt	lt
 8000b78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	4770      	bxlt	lr
 8000b7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b86:	f1c2 0218 	rsb	r2, r2, #24
 8000b8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b92:	fa20 f002 	lsr.w	r0, r0, r2
 8000b96:	bf18      	it	ne
 8000b98:	f040 0001 	orrne.w	r0, r0, #1
 8000b9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba8:	ea40 000c 	orr.w	r0, r0, ip
 8000bac:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb4:	e7cc      	b.n	8000b50 <__aeabi_d2f+0x14>
 8000bb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bba:	d107      	bne.n	8000bcc <__aeabi_d2f+0x90>
 8000bbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bca:	4770      	bxne	lr
 8000bcc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b970 	b.w	8000ed4 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9e08      	ldr	r6, [sp, #32]
 8000c12:	460d      	mov	r5, r1
 8000c14:	4604      	mov	r4, r0
 8000c16:	460f      	mov	r7, r1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d14a      	bne.n	8000cb2 <__udivmoddi4+0xa6>
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	4694      	mov	ip, r2
 8000c20:	d965      	bls.n	8000cee <__udivmoddi4+0xe2>
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	b143      	cbz	r3, 8000c3a <__udivmoddi4+0x2e>
 8000c28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c2c:	f1c3 0220 	rsb	r2, r3, #32
 8000c30:	409f      	lsls	r7, r3
 8000c32:	fa20 f202 	lsr.w	r2, r0, r2
 8000c36:	4317      	orrs	r7, r2
 8000c38:	409c      	lsls	r4, r3
 8000c3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3e:	fa1f f58c 	uxth.w	r5, ip
 8000c42:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c46:	0c22      	lsrs	r2, r4, #16
 8000c48:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c4c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c50:	fb01 f005 	mul.w	r0, r1, r5
 8000c54:	4290      	cmp	r0, r2
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x62>
 8000c58:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c60:	f080 811c 	bcs.w	8000e9c <__udivmoddi4+0x290>
 8000c64:	4290      	cmp	r0, r2
 8000c66:	f240 8119 	bls.w	8000e9c <__udivmoddi4+0x290>
 8000c6a:	3902      	subs	r1, #2
 8000c6c:	4462      	add	r2, ip
 8000c6e:	1a12      	subs	r2, r2, r0
 8000c70:	b2a4      	uxth	r4, r4
 8000c72:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c76:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c7a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7e:	fb00 f505 	mul.w	r5, r0, r5
 8000c82:	42a5      	cmp	r5, r4
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x90>
 8000c86:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x294>
 8000c92:	42a5      	cmp	r5, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x294>
 8000c98:	4464      	add	r4, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ca0:	1b64      	subs	r4, r4, r5
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11e      	cbz	r6, 8000cae <__udivmoddi4+0xa2>
 8000ca6:	40dc      	lsrs	r4, r3
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e9c6 4300 	strd	r4, r3, [r6]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0xbc>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f000 80ed 	beq.w	8000e96 <__udivmoddi4+0x28a>
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e9c6 0500 	strd	r0, r5, [r6]
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc8:	fab3 f183 	clz	r1, r3
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	d149      	bne.n	8000d64 <__udivmoddi4+0x158>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	d302      	bcc.n	8000cda <__udivmoddi4+0xce>
 8000cd4:	4282      	cmp	r2, r0
 8000cd6:	f200 80f8 	bhi.w	8000eca <__udivmoddi4+0x2be>
 8000cda:	1a84      	subs	r4, r0, r2
 8000cdc:	eb65 0203 	sbc.w	r2, r5, r3
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	4617      	mov	r7, r2
 8000ce4:	2e00      	cmp	r6, #0
 8000ce6:	d0e2      	beq.n	8000cae <__udivmoddi4+0xa2>
 8000ce8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cec:	e7df      	b.n	8000cae <__udivmoddi4+0xa2>
 8000cee:	b902      	cbnz	r2, 8000cf2 <__udivmoddi4+0xe6>
 8000cf0:	deff      	udf	#255	; 0xff
 8000cf2:	fab2 f382 	clz	r3, r2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x210>
 8000cfc:	1a8a      	subs	r2, r1, r2
 8000cfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d02:	fa1f fe8c 	uxth.w	lr, ip
 8000d06:	2101      	movs	r1, #1
 8000d08:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d0c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d10:	0c22      	lsrs	r2, r4, #16
 8000d12:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d16:	fb0e f005 	mul.w	r0, lr, r5
 8000d1a:	4290      	cmp	r0, r2
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x124>
 8000d1e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d22:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x122>
 8000d28:	4290      	cmp	r0, r2
 8000d2a:	f200 80cb 	bhi.w	8000ec4 <__udivmoddi4+0x2b8>
 8000d2e:	4645      	mov	r5, r8
 8000d30:	1a12      	subs	r2, r2, r0
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d38:	fb07 2210 	mls	r2, r7, r0, r2
 8000d3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d40:	fb0e fe00 	mul.w	lr, lr, r0
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x14e>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d50:	d202      	bcs.n	8000d58 <__udivmoddi4+0x14c>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	f200 80bb 	bhi.w	8000ece <__udivmoddi4+0x2c2>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	eba4 040e 	sub.w	r4, r4, lr
 8000d5e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d62:	e79f      	b.n	8000ca4 <__udivmoddi4+0x98>
 8000d64:	f1c1 0720 	rsb	r7, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d72:	fa05 f401 	lsl.w	r4, r5, r1
 8000d76:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7a:	40fd      	lsrs	r5, r7
 8000d7c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d94:	fb08 f50e 	mul.w	r5, r8, lr
 8000d98:	42a5      	cmp	r5, r4
 8000d9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9e:	fa00 f001 	lsl.w	r0, r0, r1
 8000da2:	d90b      	bls.n	8000dbc <__udivmoddi4+0x1b0>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dac:	f080 8088 	bcs.w	8000ec0 <__udivmoddi4+0x2b4>
 8000db0:	42a5      	cmp	r5, r4
 8000db2:	f240 8085 	bls.w	8000ec0 <__udivmoddi4+0x2b4>
 8000db6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dba:	4464      	add	r4, ip
 8000dbc:	1b64      	subs	r4, r4, r5
 8000dbe:	b29d      	uxth	r5, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dcc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1da>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ddc:	d26c      	bcs.n	8000eb8 <__udivmoddi4+0x2ac>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	d96a      	bls.n	8000eb8 <__udivmoddi4+0x2ac>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	4464      	add	r4, ip
 8000de6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dea:	fba3 9502 	umull	r9, r5, r3, r2
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	42ac      	cmp	r4, r5
 8000df4:	46c8      	mov	r8, r9
 8000df6:	46ae      	mov	lr, r5
 8000df8:	d356      	bcc.n	8000ea8 <__udivmoddi4+0x29c>
 8000dfa:	d053      	beq.n	8000ea4 <__udivmoddi4+0x298>
 8000dfc:	b156      	cbz	r6, 8000e14 <__udivmoddi4+0x208>
 8000dfe:	ebb0 0208 	subs.w	r2, r0, r8
 8000e02:	eb64 040e 	sbc.w	r4, r4, lr
 8000e06:	fa04 f707 	lsl.w	r7, r4, r7
 8000e0a:	40ca      	lsrs	r2, r1
 8000e0c:	40cc      	lsrs	r4, r1
 8000e0e:	4317      	orrs	r7, r2
 8000e10:	e9c6 7400 	strd	r7, r4, [r6]
 8000e14:	4618      	mov	r0, r3
 8000e16:	2100      	movs	r1, #0
 8000e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1c:	f1c3 0120 	rsb	r1, r3, #32
 8000e20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e24:	fa20 f201 	lsr.w	r2, r0, r1
 8000e28:	fa25 f101 	lsr.w	r1, r5, r1
 8000e2c:	409d      	lsls	r5, r3
 8000e2e:	432a      	orrs	r2, r5
 8000e30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e34:	fa1f fe8c 	uxth.w	lr, ip
 8000e38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e3c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e40:	0c11      	lsrs	r1, r2, #16
 8000e42:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e46:	fb00 f50e 	mul.w	r5, r0, lr
 8000e4a:	428d      	cmp	r5, r1
 8000e4c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x258>
 8000e52:	eb1c 0101 	adds.w	r1, ip, r1
 8000e56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5a:	d22f      	bcs.n	8000ebc <__udivmoddi4+0x2b0>
 8000e5c:	428d      	cmp	r5, r1
 8000e5e:	d92d      	bls.n	8000ebc <__udivmoddi4+0x2b0>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4461      	add	r1, ip
 8000e64:	1b49      	subs	r1, r1, r5
 8000e66:	b292      	uxth	r2, r2
 8000e68:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e6c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	fb05 f10e 	mul.w	r1, r5, lr
 8000e78:	4291      	cmp	r1, r2
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x282>
 8000e7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e80:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e84:	d216      	bcs.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e86:	4291      	cmp	r1, r2
 8000e88:	d914      	bls.n	8000eb4 <__udivmoddi4+0x2a8>
 8000e8a:	3d02      	subs	r5, #2
 8000e8c:	4462      	add	r2, ip
 8000e8e:	1a52      	subs	r2, r2, r1
 8000e90:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e94:	e738      	b.n	8000d08 <__udivmoddi4+0xfc>
 8000e96:	4631      	mov	r1, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e708      	b.n	8000cae <__udivmoddi4+0xa2>
 8000e9c:	4639      	mov	r1, r7
 8000e9e:	e6e6      	b.n	8000c6e <__udivmoddi4+0x62>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x90>
 8000ea4:	4548      	cmp	r0, r9
 8000ea6:	d2a9      	bcs.n	8000dfc <__udivmoddi4+0x1f0>
 8000ea8:	ebb9 0802 	subs.w	r8, r9, r2
 8000eac:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	e7a3      	b.n	8000dfc <__udivmoddi4+0x1f0>
 8000eb4:	4645      	mov	r5, r8
 8000eb6:	e7ea      	b.n	8000e8e <__udivmoddi4+0x282>
 8000eb8:	462b      	mov	r3, r5
 8000eba:	e794      	b.n	8000de6 <__udivmoddi4+0x1da>
 8000ebc:	4640      	mov	r0, r8
 8000ebe:	e7d1      	b.n	8000e64 <__udivmoddi4+0x258>
 8000ec0:	46d0      	mov	r8, sl
 8000ec2:	e77b      	b.n	8000dbc <__udivmoddi4+0x1b0>
 8000ec4:	3d02      	subs	r5, #2
 8000ec6:	4462      	add	r2, ip
 8000ec8:	e732      	b.n	8000d30 <__udivmoddi4+0x124>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e70a      	b.n	8000ce4 <__udivmoddi4+0xd8>
 8000ece:	4464      	add	r4, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e742      	b.n	8000d5a <__udivmoddi4+0x14e>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <main>:
//GPS Data
//Address
uint16_t gpsAddress = 0x42;

int main(void)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b08d      	sub	sp, #52	; 0x34
 8000edc:	af02      	add	r7, sp, #8
  HAL_Init();
 8000ede:	f001 fb71 	bl	80025c4 <HAL_Init>

  SystemClock_Config();
 8000ee2:	f001 f855 	bl	8001f90 <SystemClock_Config>
  MX_GPIO_Init();
 8000ee6:	f001 f915 	bl	8002114 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000eea:	f001 f8bb 	bl	8002064 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000eee:	f001 f8e7 	bl	80020c0 <MX_USART2_UART_Init>

  //MAGNEOTMETER
  float xCal, yCal, zCal;
  xCal = 0;
 8000ef2:	f04f 0300 	mov.w	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
  yCal = 0;
 8000ef8:	f04f 0300 	mov.w	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  zCal = 0;
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

  //GPS
  float lat = -1;
 8000f04:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <main+0xb0>)
 8000f06:	613b      	str	r3, [r7, #16]
  float longi = -1;
 8000f08:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <main+0xb0>)
 8000f0a:	60fb      	str	r3, [r7, #12]
  float time = -1;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <main+0xb0>)
 8000f0e:	60bb      	str	r3, [r7, #8]
  float date = -1;
 8000f10:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <main+0xb0>)
 8000f12:	607b      	str	r3, [r7, #4]
  char longiDir = 'x';
 8000f14:	2378      	movs	r3, #120	; 0x78
 8000f16:	70fb      	strb	r3, [r7, #3]
  char latDir = 'x';
 8000f18:	2378      	movs	r3, #120	; 0x78
 8000f1a:	70bb      	strb	r3, [r7, #2]

  for (int i = 0; i < 50; i++) {
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f20:	e010      	b.n	8000f44 <main+0x6c>
	  getGpsData(&lat, &longi, &time, &date, &longiDir, &latDir);
 8000f22:	1d3c      	adds	r4, r7, #4
 8000f24:	f107 0208 	add.w	r2, r7, #8
 8000f28:	f107 010c 	add.w	r1, r7, #12
 8000f2c:	f107 0010 	add.w	r0, r7, #16
 8000f30:	1cbb      	adds	r3, r7, #2
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	1cfb      	adds	r3, r7, #3
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	4623      	mov	r3, r4
 8000f3a:	f000 f827 	bl	8000f8c <getGpsData>
  for (int i = 0; i < 50; i++) {
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f40:	3301      	adds	r3, #1
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
 8000f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f46:	2b31      	cmp	r3, #49	; 0x31
 8000f48:	ddeb      	ble.n	8000f22 <main+0x4a>
  }

  //MAGNETOMETER
  setupMag();
 8000f4a:	f000 fbc9 	bl	80016e0 <setupMag>
  hardIronCal(&xCal, &yCal, &zCal);
 8000f4e:	f107 0214 	add.w	r2, r7, #20
 8000f52:	f107 0118 	add.w	r1, r7, #24
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 fcf2 	bl	8001944 <hardIronCal>

  //Direction Angle
  float direction = 0;
 8000f60:	f04f 0300 	mov.w	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]

  while (1)
  {
	  direction = magnetometerData(xCal, yCal, zCal);
 8000f66:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f6a:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f6e:	edd7 6a05 	vldr	s13, [r7, #20]
 8000f72:	eeb0 1a66 	vmov.f32	s2, s13
 8000f76:	eef0 0a47 	vmov.f32	s1, s14
 8000f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f7e:	f000 fb4f 	bl	8001620 <magnetometerData>
 8000f82:	ed87 0a08 	vstr	s0, [r7, #32]
 8000f86:	e7ee      	b.n	8000f66 <main+0x8e>
 8000f88:	bf800000 	.word	0xbf800000

08000f8c <getGpsData>:
  }
}


void getGpsData(float* lat, float* longi, float* time, float* date, char* longDir, char* latDir) {
 8000f8c:	b5b0      	push	{r4, r5, r7, lr}
 8000f8e:	b0b8      	sub	sp, #224	; 0xe0
 8000f90:	af02      	add	r7, sp, #8
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	603b      	str	r3, [r7, #0]
	uint8_t gpsDataTx [10] = {0}; //Data to send to GPS module
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000fa0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	809a      	strh	r2, [r3, #4]
	uint8_t gpsDataReady [2] = {0}; //Data to check if gps module ready
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	uint8_t gpsDataRx1 [32] = {0}; //Buffer 1
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000fb6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]
 8000fc6:	615a      	str	r2, [r3, #20]
 8000fc8:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx2 [32] = {0}; //Buffer 2
 8000fca:	2300      	movs	r3, #0
 8000fcc:	667b      	str	r3, [r7, #100]	; 0x64
 8000fce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]
 8000fde:	615a      	str	r2, [r3, #20]
 8000fe0:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx3 [32] = {0}; //Buffer 3
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8000fe6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]
 8000ff6:	615a      	str	r2, [r3, #20]
 8000ff8:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx4 [4] = {0}; //Buffer 4
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	643b      	str	r3, [r7, #64]	; 0x40

	//////////////////////////////////////////////////////////////////////////////////////////
	//INITIALIZATION
	gpsDataTx[0] = 0xB5;
 8000ffe:	23b5      	movs	r3, #181	; 0xb5
 8001000:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	gpsDataTx[1] = 0x62;
 8001004:	2362      	movs	r3, #98	; 0x62
 8001006:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
	gpsDataTx[2] = 0xF0;
 800100a:	23f0      	movs	r3, #240	; 0xf0
 800100c:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
	gpsDataTx[3] = 0x04;
 8001010:	2304      	movs	r3, #4
 8001012:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8001016:	bf00      	nop
 8001018:	480e      	ldr	r0, [pc, #56]	; (8001054 <getGpsData+0xc8>)
 800101a:	f002 fa55 	bl	80034c8 <HAL_I2C_GetState>
 800101e:	4603      	mov	r3, r0
 8001020:	2b20      	cmp	r3, #32
 8001022:	d1f9      	bne.n	8001018 <getGpsData+0x8c>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 4, 20) != HAL_OK){}
 8001024:	bf00      	nop
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <getGpsData+0xcc>)
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	b299      	uxth	r1, r3
 800102e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001032:	2314      	movs	r3, #20
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2304      	movs	r3, #4
 8001038:	4806      	ldr	r0, [pc, #24]	; (8001054 <getGpsData+0xc8>)
 800103a:	f001 ff21 	bl	8002e80 <HAL_I2C_Master_Transmit>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1f0      	bne.n	8001026 <getGpsData+0x9a>

//		/////////////////////////////////////////////////////////////////////////////////////////
//
//		//WAITING FOR DATA READY
	gpsDataReady[0] = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
	gpsDataReady[1] = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
	while ((gpsDataReady[0] == 0) && (gpsDataReady[1] == 0)) //We leave as soon as read something non zero
 8001050:	e02b      	b.n	80010aa <getGpsData+0x11e>
 8001052:	bf00      	nop
 8001054:	20000090 	.word	0x20000090
 8001058:	20000008 	.word	0x20000008
	{
		gpsDataTx[0] = 0xFD;
 800105c:	23fd      	movs	r3, #253	; 0xfd
 800105e:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
		HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, HAL_MAX_DELAY);
 8001062:	4bb5      	ldr	r3, [pc, #724]	; (8001338 <getGpsData+0x3ac>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	b299      	uxth	r1, r3
 800106a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2301      	movs	r3, #1
 8001076:	48b1      	ldr	r0, [pc, #708]	; (800133c <getGpsData+0x3b0>)
 8001078:	f001 ff02 	bl	8002e80 <HAL_I2C_Master_Transmit>
		gpsDataReady[0] = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
		gpsDataReady[1] = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
		HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataReady, 2, HAL_MAX_DELAY);
 8001088:	4bab      	ldr	r3, [pc, #684]	; (8001338 <getGpsData+0x3ac>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	b21b      	sxth	r3, r3
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	b21b      	sxth	r3, r3
 8001096:	b299      	uxth	r1, r3
 8001098:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2302      	movs	r3, #2
 80010a4:	48a5      	ldr	r0, [pc, #660]	; (800133c <getGpsData+0x3b0>)
 80010a6:	f001 ffe9 	bl	800307c <HAL_I2C_Master_Receive>
	while ((gpsDataReady[0] == 0) && (gpsDataReady[1] == 0)) //We leave as soon as read something non zero
 80010aa:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d103      	bne.n	80010ba <getGpsData+0x12e>
 80010b2:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0d0      	beq.n	800105c <getGpsData+0xd0>
	}


//		//Buffer 1
	gpsDataTx[0] = 0xFF;
 80010ba:	23ff      	movs	r3, #255	; 0xff
 80010bc:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80010c0:	bf00      	nop
 80010c2:	489e      	ldr	r0, [pc, #632]	; (800133c <getGpsData+0x3b0>)
 80010c4:	f002 fa00 	bl	80034c8 <HAL_I2C_GetState>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b20      	cmp	r3, #32
 80010cc:	d1f9      	bne.n	80010c2 <getGpsData+0x136>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 80010ce:	bf00      	nop
 80010d0:	4b99      	ldr	r3, [pc, #612]	; (8001338 <getGpsData+0x3ac>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	b299      	uxth	r1, r3
 80010d8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80010dc:	2314      	movs	r3, #20
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2301      	movs	r3, #1
 80010e2:	4896      	ldr	r0, [pc, #600]	; (800133c <getGpsData+0x3b0>)
 80010e4:	f001 fecc 	bl	8002e80 <HAL_I2C_Master_Transmit>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f0      	bne.n	80010d0 <getGpsData+0x144>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80010ee:	bf00      	nop
 80010f0:	4892      	ldr	r0, [pc, #584]	; (800133c <getGpsData+0x3b0>)
 80010f2:	f002 f9e9 	bl	80034c8 <HAL_I2C_GetState>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b20      	cmp	r3, #32
 80010fa:	d1f9      	bne.n	80010f0 <getGpsData+0x164>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx1, 32, HAL_MAX_DELAY)){}
 80010fc:	bf00      	nop
 80010fe:	4b8e      	ldr	r3, [pc, #568]	; (8001338 <getGpsData+0x3ac>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	b21b      	sxth	r3, r3
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	b21b      	sxth	r3, r3
 800110c:	b299      	uxth	r1, r3
 800110e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2320      	movs	r3, #32
 800111a:	4888      	ldr	r0, [pc, #544]	; (800133c <getGpsData+0x3b0>)
 800111c:	f001 ffae 	bl	800307c <HAL_I2C_Master_Receive>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1eb      	bne.n	80010fe <getGpsData+0x172>
//
//		//Buffer 2
	gpsDataTx[0] = 0xFF;
 8001126:	23ff      	movs	r3, #255	; 0xff
 8001128:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800112c:	bf00      	nop
 800112e:	4883      	ldr	r0, [pc, #524]	; (800133c <getGpsData+0x3b0>)
 8001130:	f002 f9ca 	bl	80034c8 <HAL_I2C_GetState>
 8001134:	4603      	mov	r3, r0
 8001136:	2b20      	cmp	r3, #32
 8001138:	d1f9      	bne.n	800112e <getGpsData+0x1a2>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 800113a:	bf00      	nop
 800113c:	4b7e      	ldr	r3, [pc, #504]	; (8001338 <getGpsData+0x3ac>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	b299      	uxth	r1, r3
 8001144:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001148:	2314      	movs	r3, #20
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2301      	movs	r3, #1
 800114e:	487b      	ldr	r0, [pc, #492]	; (800133c <getGpsData+0x3b0>)
 8001150:	f001 fe96 	bl	8002e80 <HAL_I2C_Master_Transmit>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f0      	bne.n	800113c <getGpsData+0x1b0>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800115a:	bf00      	nop
 800115c:	4877      	ldr	r0, [pc, #476]	; (800133c <getGpsData+0x3b0>)
 800115e:	f002 f9b3 	bl	80034c8 <HAL_I2C_GetState>
 8001162:	4603      	mov	r3, r0
 8001164:	2b20      	cmp	r3, #32
 8001166:	d1f9      	bne.n	800115c <getGpsData+0x1d0>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx2, 32, HAL_MAX_DELAY)){}
 8001168:	bf00      	nop
 800116a:	4b73      	ldr	r3, [pc, #460]	; (8001338 <getGpsData+0x3ac>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	b21b      	sxth	r3, r3
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	b21b      	sxth	r3, r3
 8001178:	b299      	uxth	r1, r3
 800117a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2320      	movs	r3, #32
 8001186:	486d      	ldr	r0, [pc, #436]	; (800133c <getGpsData+0x3b0>)
 8001188:	f001 ff78 	bl	800307c <HAL_I2C_Master_Receive>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1eb      	bne.n	800116a <getGpsData+0x1de>
//
//		//Buffer 3
	gpsDataTx[0] = 0xFF;
 8001192:	23ff      	movs	r3, #255	; 0xff
 8001194:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8001198:	bf00      	nop
 800119a:	4868      	ldr	r0, [pc, #416]	; (800133c <getGpsData+0x3b0>)
 800119c:	f002 f994 	bl	80034c8 <HAL_I2C_GetState>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b20      	cmp	r3, #32
 80011a4:	d1f9      	bne.n	800119a <getGpsData+0x20e>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 80011a6:	bf00      	nop
 80011a8:	4b63      	ldr	r3, [pc, #396]	; (8001338 <getGpsData+0x3ac>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	b299      	uxth	r1, r3
 80011b0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80011b4:	2314      	movs	r3, #20
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2301      	movs	r3, #1
 80011ba:	4860      	ldr	r0, [pc, #384]	; (800133c <getGpsData+0x3b0>)
 80011bc:	f001 fe60 	bl	8002e80 <HAL_I2C_Master_Transmit>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f0      	bne.n	80011a8 <getGpsData+0x21c>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80011c6:	bf00      	nop
 80011c8:	485c      	ldr	r0, [pc, #368]	; (800133c <getGpsData+0x3b0>)
 80011ca:	f002 f97d 	bl	80034c8 <HAL_I2C_GetState>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b20      	cmp	r3, #32
 80011d2:	d1f9      	bne.n	80011c8 <getGpsData+0x23c>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx3, 32, HAL_MAX_DELAY)){}
 80011d4:	bf00      	nop
 80011d6:	4b58      	ldr	r3, [pc, #352]	; (8001338 <getGpsData+0x3ac>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	b21b      	sxth	r3, r3
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	b299      	uxth	r1, r3
 80011e6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2320      	movs	r3, #32
 80011f2:	4852      	ldr	r0, [pc, #328]	; (800133c <getGpsData+0x3b0>)
 80011f4:	f001 ff42 	bl	800307c <HAL_I2C_Master_Receive>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1eb      	bne.n	80011d6 <getGpsData+0x24a>

	//Buffer 4
	gpsDataTx[0] = 0xFF;
 80011fe:	23ff      	movs	r3, #255	; 0xff
 8001200:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8001204:	bf00      	nop
 8001206:	484d      	ldr	r0, [pc, #308]	; (800133c <getGpsData+0x3b0>)
 8001208:	f002 f95e 	bl	80034c8 <HAL_I2C_GetState>
 800120c:	4603      	mov	r3, r0
 800120e:	2b20      	cmp	r3, #32
 8001210:	d1f9      	bne.n	8001206 <getGpsData+0x27a>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 8001212:	bf00      	nop
 8001214:	4b48      	ldr	r3, [pc, #288]	; (8001338 <getGpsData+0x3ac>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	b299      	uxth	r1, r3
 800121c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001220:	2314      	movs	r3, #20
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2301      	movs	r3, #1
 8001226:	4845      	ldr	r0, [pc, #276]	; (800133c <getGpsData+0x3b0>)
 8001228:	f001 fe2a 	bl	8002e80 <HAL_I2C_Master_Transmit>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f0      	bne.n	8001214 <getGpsData+0x288>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8001232:	bf00      	nop
 8001234:	4841      	ldr	r0, [pc, #260]	; (800133c <getGpsData+0x3b0>)
 8001236:	f002 f947 	bl	80034c8 <HAL_I2C_GetState>
 800123a:	4603      	mov	r3, r0
 800123c:	2b20      	cmp	r3, #32
 800123e:	d1f9      	bne.n	8001234 <getGpsData+0x2a8>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx4, 4, HAL_MAX_DELAY)){}
 8001240:	bf00      	nop
 8001242:	4b3d      	ldr	r3, [pc, #244]	; (8001338 <getGpsData+0x3ac>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	b21b      	sxth	r3, r3
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	b21b      	sxth	r3, r3
 8001250:	b299      	uxth	r1, r3
 8001252:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2304      	movs	r3, #4
 800125e:	4837      	ldr	r0, [pc, #220]	; (800133c <getGpsData+0x3b0>)
 8001260:	f001 ff0c 	bl	800307c <HAL_I2C_Master_Receive>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1eb      	bne.n	8001242 <getGpsData+0x2b6>


	//Create concaterated buffer
	 size_t totalSize = sizeof(gpsDataRx1) + sizeof(gpsDataRx2) + sizeof(gpsDataRx3) + sizeof(gpsDataRx4);
 800126a:	2364      	movs	r3, #100	; 0x64
 800126c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	// Allocate memory for the concatenated array
	uint8_t *concatenatedArray = (uint8_t *)malloc(totalSize);
 8001270:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001274:	f003 fcc2 	bl	8004bfc <malloc>
 8001278:	4603      	mov	r3, r0
 800127a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	// Copy the contents of each array into the concatenated array
	size_t offset = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx1, sizeof(gpsDataRx1));
 8001284:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001288:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800128c:	4413      	add	r3, r2
 800128e:	461d      	mov	r5, r3
 8001290:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8001294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001296:	6028      	str	r0, [r5, #0]
 8001298:	6069      	str	r1, [r5, #4]
 800129a:	60aa      	str	r2, [r5, #8]
 800129c:	60eb      	str	r3, [r5, #12]
 800129e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012a0:	6128      	str	r0, [r5, #16]
 80012a2:	6169      	str	r1, [r5, #20]
 80012a4:	61aa      	str	r2, [r5, #24]
 80012a6:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx1);
 80012a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80012ac:	3320      	adds	r3, #32
 80012ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx2, sizeof(gpsDataRx2));
 80012b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80012b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80012ba:	4413      	add	r3, r2
 80012bc:	461d      	mov	r5, r3
 80012be:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80012c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c4:	6028      	str	r0, [r5, #0]
 80012c6:	6069      	str	r1, [r5, #4]
 80012c8:	60aa      	str	r2, [r5, #8]
 80012ca:	60eb      	str	r3, [r5, #12]
 80012cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ce:	6128      	str	r0, [r5, #16]
 80012d0:	6169      	str	r1, [r5, #20]
 80012d2:	61aa      	str	r2, [r5, #24]
 80012d4:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx2);
 80012d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80012da:	3320      	adds	r3, #32
 80012dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx3, sizeof(gpsDataRx3));
 80012e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80012e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80012e8:	4413      	add	r3, r2
 80012ea:	461d      	mov	r5, r3
 80012ec:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80012f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f2:	6028      	str	r0, [r5, #0]
 80012f4:	6069      	str	r1, [r5, #4]
 80012f6:	60aa      	str	r2, [r5, #8]
 80012f8:	60eb      	str	r3, [r5, #12]
 80012fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012fc:	6128      	str	r0, [r5, #16]
 80012fe:	6169      	str	r1, [r5, #20]
 8001300:	61aa      	str	r2, [r5, #24]
 8001302:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx3);
 8001304:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001308:	3320      	adds	r3, #32
 800130a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx4, sizeof(gpsDataRx4));
 800130e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001312:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001316:	4413      	add	r3, r2
 8001318:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800131a:	601a      	str	r2, [r3, #0]


	//String comparisons
	const char* GNRMC = "NRMC,";
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <getGpsData+0x3b4>)
 800131e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	const char* minus1 = "-1";
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <getGpsData+0x3b8>)
 8001324:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	const char* comma = ",";
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <getGpsData+0x3bc>)
 800132a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	char* gpsDataList[12];

	for (int i = 0; i < 12; i++) {
 800132e:	2300      	movs	r3, #0
 8001330:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001334:	e017      	b.n	8001366 <getGpsData+0x3da>
 8001336:	bf00      	nop
 8001338:	20000008 	.word	0x20000008
 800133c:	20000090 	.word	0x20000090
 8001340:	080065f0 	.word	0x080065f0
 8001344:	080065f8 	.word	0x080065f8
 8001348:	080065fc 	.word	0x080065fc
	    gpsDataList[i] = "-1";
 800134c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	33d8      	adds	r3, #216	; 0xd8
 8001354:	443b      	add	r3, r7
 8001356:	4aaf      	ldr	r2, [pc, #700]	; (8001614 <getGpsData+0x688>)
 8001358:	f843 2cc8 	str.w	r2, [r3, #-200]
	for (int i = 0; i < 12; i++) {
 800135c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001360:	3301      	adds	r3, #1
 8001362:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800136a:	2b0b      	cmp	r3, #11
 800136c:	ddee      	ble.n	800134c <getGpsData+0x3c0>
	}

	//Parsing the data and updating our values

	if (strncmp(concatenatedArray, GNRMC, strlen(GNRMC)) == 0) {
 800136e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001372:	f7fe ff35 	bl	80001e0 <strlen>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800137e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001382:	f003 fe9e 	bl	80050c2 <strncmp>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d122      	bne.n	80013d2 <getGpsData+0x446>
		char* individualGpsData = strtok(concatenatedArray, ","); // Initialize strtok with the buffer
 800138c:	49a2      	ldr	r1, [pc, #648]	; (8001618 <getGpsData+0x68c>)
 800138e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001392:	f003 fea9 	bl	80050e8 <strtok>
 8001396:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		int index = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

		while (individualGpsData != NULL) {
 80013a0:	e013      	b.n	80013ca <getGpsData+0x43e>
			gpsDataList[index] = individualGpsData; // Store the token in an array
 80013a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	33d8      	adds	r3, #216	; 0xd8
 80013aa:	443b      	add	r3, r7
 80013ac:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80013b0:	f843 2cc8 	str.w	r2, [r3, #-200]
			individualGpsData = strtok(NULL, ","); // Get the next token
 80013b4:	4998      	ldr	r1, [pc, #608]	; (8001618 <getGpsData+0x68c>)
 80013b6:	2000      	movs	r0, #0
 80013b8:	f003 fe96 	bl	80050e8 <strtok>
 80013bc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
			index++;
 80013c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80013c4:	3301      	adds	r3, #1
 80013c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		while (individualGpsData != NULL) {
 80013ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1e7      	bne.n	80013a2 <getGpsData+0x416>
		}
	}

	//if the value is different from both -1 and ,, we update our time
	if ((strncmp(gpsDataList[1], minus1, strlen(minus1)) != 0) &&
 80013d2:	697c      	ldr	r4, [r7, #20]
 80013d4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80013d8:	f7fe ff02 	bl	80001e0 <strlen>
 80013dc:	4603      	mov	r3, r0
 80013de:	461a      	mov	r2, r3
 80013e0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80013e4:	4620      	mov	r0, r4
 80013e6:	f003 fe6c 	bl	80050c2 <strncmp>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d019      	beq.n	8001424 <getGpsData+0x498>
	   (strncmp(gpsDataList[1], comma, strlen(comma)) != 0)) {
 80013f0:	697c      	ldr	r4, [r7, #20]
 80013f2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80013f6:	f7fe fef3 	bl	80001e0 <strlen>
 80013fa:	4603      	mov	r3, r0
 80013fc:	461a      	mov	r2, r3
 80013fe:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001402:	4620      	mov	r0, r4
 8001404:	f003 fe5d 	bl	80050c2 <strncmp>
 8001408:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[1], minus1, strlen(minus1)) != 0) &&
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00a      	beq.n	8001424 <getGpsData+0x498>
		*time = atoi(gpsDataList[1]);
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	4618      	mov	r0, r3
 8001412:	f003 fbef 	bl	8004bf4 <atoi>
 8001416:	ee07 0a90 	vmov	s15, r0
 800141a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((strncmp(gpsDataList[3], minus1, strlen(minus1)) != 0) &&
 8001424:	69fc      	ldr	r4, [r7, #28]
 8001426:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800142a:	f7fe fed9 	bl	80001e0 <strlen>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001436:	4620      	mov	r0, r4
 8001438:	f003 fe43 	bl	80050c2 <strncmp>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d019      	beq.n	8001476 <getGpsData+0x4ea>
	   (strncmp(gpsDataList[3], comma, strlen(comma)) != 0)) {
 8001442:	69fc      	ldr	r4, [r7, #28]
 8001444:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001448:	f7fe feca 	bl	80001e0 <strlen>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001454:	4620      	mov	r0, r4
 8001456:	f003 fe34 	bl	80050c2 <strncmp>
 800145a:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[3], minus1, strlen(minus1)) != 0) &&
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00a      	beq.n	8001476 <getGpsData+0x4ea>
		*lat = atoi(gpsDataList[3]);
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	4618      	mov	r0, r3
 8001464:	f003 fbc6 	bl	8004bf4 <atoi>
 8001468:	ee07 0a90 	vmov	s15, r0
 800146c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((strncmp(gpsDataList[4], minus1, strlen(minus1)) != 0) &&
 8001476:	6a3c      	ldr	r4, [r7, #32]
 8001478:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800147c:	f7fe feb0 	bl	80001e0 <strlen>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001488:	4620      	mov	r0, r4
 800148a:	f003 fe1a 	bl	80050c2 <strncmp>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d014      	beq.n	80014be <getGpsData+0x532>
	   (strncmp(gpsDataList[4], comma, strlen(comma)) != 0)) {
 8001494:	6a3c      	ldr	r4, [r7, #32]
 8001496:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800149a:	f7fe fea1 	bl	80001e0 <strlen>
 800149e:	4603      	mov	r3, r0
 80014a0:	461a      	mov	r2, r3
 80014a2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80014a6:	4620      	mov	r0, r4
 80014a8:	f003 fe0b 	bl	80050c2 <strncmp>
 80014ac:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[4], minus1, strlen(minus1)) != 0) &&
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d005      	beq.n	80014be <getGpsData+0x532>
		strcpy(latDir, gpsDataList[4]);
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80014ba:	f003 fef3 	bl	80052a4 <strcpy>
	}

	if ((strncmp(gpsDataList[5], minus1, strlen(minus1)) != 0) &&
 80014be:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80014c0:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80014c4:	f7fe fe8c 	bl	80001e0 <strlen>
 80014c8:	4603      	mov	r3, r0
 80014ca:	461a      	mov	r2, r3
 80014cc:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80014d0:	4620      	mov	r0, r4
 80014d2:	f003 fdf6 	bl	80050c2 <strncmp>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d019      	beq.n	8001510 <getGpsData+0x584>
	   (strncmp(gpsDataList[5], comma, strlen(comma)) != 0)) {
 80014dc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80014de:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80014e2:	f7fe fe7d 	bl	80001e0 <strlen>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80014ee:	4620      	mov	r0, r4
 80014f0:	f003 fde7 	bl	80050c2 <strncmp>
 80014f4:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[5], minus1, strlen(minus1)) != 0) &&
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00a      	beq.n	8001510 <getGpsData+0x584>
		*longi = atoi(gpsDataList[5]);
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	4618      	mov	r0, r3
 80014fe:	f003 fb79 	bl	8004bf4 <atoi>
 8001502:	ee07 0a90 	vmov	s15, r0
 8001506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((strncmp(gpsDataList[6], minus1, strlen(minus1)) != 0) &&
 8001510:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001512:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001516:	f7fe fe63 	bl	80001e0 <strlen>
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001522:	4620      	mov	r0, r4
 8001524:	f003 fdcd 	bl	80050c2 <strncmp>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d014      	beq.n	8001558 <getGpsData+0x5cc>
	   (strncmp(gpsDataList[6], comma, strlen(comma)) != 0)) {
 800152e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001530:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001534:	f7fe fe54 	bl	80001e0 <strlen>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001540:	4620      	mov	r0, r4
 8001542:	f003 fdbe 	bl	80050c2 <strncmp>
 8001546:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[6], minus1, strlen(minus1)) != 0) &&
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <getGpsData+0x5cc>
		strcpy(longDir, gpsDataList[6]);
 800154c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154e:	4619      	mov	r1, r3
 8001550:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001554:	f003 fea6 	bl	80052a4 <strcpy>
	}

	if ((strncmp(gpsDataList[8], minus1, strlen(minus1)) != 0) &&
 8001558:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800155a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800155e:	f7fe fe3f 	bl	80001e0 <strlen>
 8001562:	4603      	mov	r3, r0
 8001564:	461a      	mov	r2, r3
 8001566:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800156a:	4620      	mov	r0, r4
 800156c:	f003 fda9 	bl	80050c2 <strncmp>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d019      	beq.n	80015aa <getGpsData+0x61e>
	   (strncmp(gpsDataList[8], comma, strlen(comma)) != 0)) {
 8001576:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001578:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800157c:	f7fe fe30 	bl	80001e0 <strlen>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001588:	4620      	mov	r0, r4
 800158a:	f003 fd9a 	bl	80050c2 <strncmp>
 800158e:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[8], minus1, strlen(minus1)) != 0) &&
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00a      	beq.n	80015aa <getGpsData+0x61e>
		*date = atoi(gpsDataList[8]);
 8001594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001596:	4618      	mov	r0, r3
 8001598:	f003 fb2c 	bl	8004bf4 <atoi>
 800159c:	ee07 0a90 	vmov	s15, r0
 80015a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	edc3 7a00 	vstr	s15, [r3]
	}


		//Sending data via UART
	HAL_UART_Transmit(&huart2, gpsDataRx1, sizeof(gpsDataRx1), HAL_MAX_DELAY);
 80015aa:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	2220      	movs	r2, #32
 80015b4:	4819      	ldr	r0, [pc, #100]	; (800161c <getGpsData+0x690>)
 80015b6:	f002 ffa8 	bl	800450a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, gpsDataRx2, sizeof(gpsDataRx2), HAL_MAX_DELAY);
 80015ba:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	2220      	movs	r2, #32
 80015c4:	4815      	ldr	r0, [pc, #84]	; (800161c <getGpsData+0x690>)
 80015c6:	f002 ffa0 	bl	800450a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, gpsDataRx3, sizeof(gpsDataRx3), HAL_MAX_DELAY);
 80015ca:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
 80015d2:	2220      	movs	r2, #32
 80015d4:	4811      	ldr	r0, [pc, #68]	; (800161c <getGpsData+0x690>)
 80015d6:	f002 ff98 	bl	800450a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, gpsDataRx4, sizeof(gpsDataRx4), HAL_MAX_DELAY);
 80015da:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	2204      	movs	r2, #4
 80015e4:	480d      	ldr	r0, [pc, #52]	; (800161c <getGpsData+0x690>)
 80015e6:	f002 ff90 	bl	800450a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, concatenatedArray, sizeof(concatenatedArray), HAL_MAX_DELAY);
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	2204      	movs	r2, #4
 80015f0:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80015f4:	4809      	ldr	r0, [pc, #36]	; (800161c <getGpsData+0x690>)
 80015f6:	f002 ff88 	bl	800450a <HAL_UART_Transmit>
	HAL_Delay(500);
 80015fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015fe:	f001 f853 	bl	80026a8 <HAL_Delay>

	free(concatenatedArray);
 8001602:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001606:	f003 fb01 	bl	8004c0c <free>
}
 800160a:	bf00      	nop
 800160c:	37d8      	adds	r7, #216	; 0xd8
 800160e:	46bd      	mov	sp, r7
 8001610:	bdb0      	pop	{r4, r5, r7, pc}
 8001612:	bf00      	nop
 8001614:	080065f8 	.word	0x080065f8
 8001618:	080065fc 	.word	0x080065fc
 800161c:	200000e4 	.word	0x200000e4

08001620 <magnetometerData>:

float magnetometerData(float xCal,float yCal,float zCal) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b08c      	sub	sp, #48	; 0x30
 8001624:	af02      	add	r7, sp, #8
 8001626:	ed87 0a03 	vstr	s0, [r7, #12]
 800162a:	edc7 0a02 	vstr	s1, [r7, #8]
 800162e:	ed87 1a01 	vstr	s2, [r7, #4]
	int16_t magnetometerVal [3] = {0};
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	809a      	strh	r2, [r3, #4]

	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &dataRegister, 1, 20) != HAL_OK){} //send data register address
 800163c:	bf00      	nop
 800163e:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <magnetometerData+0xb4>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	b29b      	uxth	r3, r3
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	b299      	uxth	r1, r3
 8001648:	2314      	movs	r3, #20
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	2301      	movs	r3, #1
 800164e:	4a22      	ldr	r2, [pc, #136]	; (80016d8 <magnetometerData+0xb8>)
 8001650:	4822      	ldr	r0, [pc, #136]	; (80016dc <magnetometerData+0xbc>)
 8001652:	f001 fc15 	bl	8002e80 <HAL_I2C_Master_Transmit>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1f0      	bne.n	800163e <magnetometerData+0x1e>
	while (HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), magnetometerVal, 6, HAL_MAX_DELAY)){}
 800165c:	bf00      	nop
 800165e:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <magnetometerData+0xb4>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	b21b      	sxth	r3, r3
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	b21b      	sxth	r3, r3
 800166c:	b299      	uxth	r1, r3
 800166e:	f107 0214 	add.w	r2, r7, #20
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2306      	movs	r3, #6
 800167a:	4818      	ldr	r0, [pc, #96]	; (80016dc <magnetometerData+0xbc>)
 800167c:	f001 fcfe 	bl	800307c <HAL_I2C_Master_Receive>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1eb      	bne.n	800165e <magnetometerData+0x3e>

	int16_t xMag = magnetometerVal[0];
 8001686:	8abb      	ldrh	r3, [r7, #20]
 8001688:	84fb      	strh	r3, [r7, #38]	; 0x26

	int16_t yMag = magnetometerVal[1];
 800168a:	8afb      	ldrh	r3, [r7, #22]
 800168c:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t zMag = magnetometerVal[2];
 800168e:	8b3b      	ldrh	r3, [r7, #24]
 8001690:	847b      	strh	r3, [r7, #34]	; 0x22

	float direction = getDirectionAngle(xMag, yMag, zMag, xCal, yCal, zCal);
 8001692:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8001696:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	; 0x24
 800169a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800169e:	ed97 1a01 	vldr	s2, [r7, #4]
 80016a2:	edd7 0a02 	vldr	s1, [r7, #8]
 80016a6:	ed97 0a03 	vldr	s0, [r7, #12]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 fa5c 	bl	8001b68 <getDirectionAngle>
 80016b0:	ed87 0a07 	vstr	s0, [r7, #28]
	printDirection(direction);
 80016b4:	ed97 0a07 	vldr	s0, [r7, #28]
 80016b8:	f000 fb04 	bl	8001cc4 <printDirection>

	HAL_Delay(1000);
 80016bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016c0:	f000 fff2 	bl	80026a8 <HAL_Delay>

	return direction;
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	ee07 3a90 	vmov	s15, r3
}
 80016ca:	eeb0 0a67 	vmov.f32	s0, s15
 80016ce:	3728      	adds	r7, #40	; 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000000 	.word	0x20000000
 80016d8:	20000001 	.word	0x20000001
 80016dc:	20000090 	.word	0x20000090

080016e0 <setupMag>:


void setupMag() {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af02      	add	r7, sp, #8
//
//	//Values to send
//	uint8_t initRegA = 0x0C;
//	uint8_t disRegA = 0x0E;
//	uint8_t initRegC = 0x10;
	uint8_t magSetupRX = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	71fb      	strb	r3, [r7, #7]

	uint8_t magSetupTX [2] = {0};
 80016ea:	2300      	movs	r3, #0
 80016ec:	80bb      	strh	r3, [r7, #4]

	//1
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegC, 1, HAL_MAX_DELAY) != HAL_OK){} //send address pointer
 80016ee:	bf00      	nop
 80016f0:	4b8d      	ldr	r3, [pc, #564]	; (8001928 <setupMag+0x248>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	b299      	uxth	r1, r3
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2301      	movs	r3, #1
 8001702:	4a8a      	ldr	r2, [pc, #552]	; (800192c <setupMag+0x24c>)
 8001704:	488a      	ldr	r0, [pc, #552]	; (8001930 <setupMag+0x250>)
 8001706:	f001 fbbb 	bl	8002e80 <HAL_I2C_Master_Transmit>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1ef      	bne.n	80016f0 <setupMag+0x10>

	//2
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8001710:	4b85      	ldr	r3, [pc, #532]	; (8001928 <setupMag+0x248>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	b21b      	sxth	r3, r3
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	b21b      	sxth	r3, r3
 800171e:	b299      	uxth	r1, r3
 8001720:	1dfa      	adds	r2, r7, #7
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	2301      	movs	r3, #1
 800172a:	4881      	ldr	r0, [pc, #516]	; (8001930 <setupMag+0x250>)
 800172c:	f001 fca6 	bl	800307c <HAL_I2C_Master_Receive>


	//3
	magSetupTX[0] = cfgRegC;
 8001730:	4b7e      	ldr	r3, [pc, #504]	; (800192c <setupMag+0x24c>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = initRegC;
 8001736:	4b7f      	ldr	r3, [pc, #508]	; (8001934 <setupMag+0x254>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 800173c:	bf00      	nop
 800173e:	4b7a      	ldr	r3, [pc, #488]	; (8001928 <setupMag+0x248>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	b29b      	uxth	r3, r3
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	b299      	uxth	r1, r3
 8001748:	1d3a      	adds	r2, r7, #4
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2302      	movs	r3, #2
 8001752:	4877      	ldr	r0, [pc, #476]	; (8001930 <setupMag+0x250>)
 8001754:	f001 fb94 	bl	8002e80 <HAL_I2C_Master_Transmit>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1ef      	bne.n	800173e <setupMag+0x5e>

	//4
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegA, 1, HAL_MAX_DELAY) != HAL_OK){}
 800175e:	bf00      	nop
 8001760:	4b71      	ldr	r3, [pc, #452]	; (8001928 <setupMag+0x248>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b29b      	uxth	r3, r3
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	b299      	uxth	r1, r3
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	2301      	movs	r3, #1
 8001772:	4a71      	ldr	r2, [pc, #452]	; (8001938 <setupMag+0x258>)
 8001774:	486e      	ldr	r0, [pc, #440]	; (8001930 <setupMag+0x250>)
 8001776:	f001 fb83 	bl	8002e80 <HAL_I2C_Master_Transmit>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1ef      	bne.n	8001760 <setupMag+0x80>

	//5
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8001780:	4b69      	ldr	r3, [pc, #420]	; (8001928 <setupMag+0x248>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	b21b      	sxth	r3, r3
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	b21b      	sxth	r3, r3
 800178e:	b299      	uxth	r1, r3
 8001790:	1dfa      	adds	r2, r7, #7
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2301      	movs	r3, #1
 800179a:	4865      	ldr	r0, [pc, #404]	; (8001930 <setupMag+0x250>)
 800179c:	f001 fc6e 	bl	800307c <HAL_I2C_Master_Receive>

	//6
	magSetupTX[0] = cfgRegA;
 80017a0:	4b65      	ldr	r3, [pc, #404]	; (8001938 <setupMag+0x258>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = disRegA;
 80017a6:	4b65      	ldr	r3, [pc, #404]	; (800193c <setupMag+0x25c>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 80017ac:	bf00      	nop
 80017ae:	4b5e      	ldr	r3, [pc, #376]	; (8001928 <setupMag+0x248>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	b299      	uxth	r1, r3
 80017b8:	1d3a      	adds	r2, r7, #4
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2302      	movs	r3, #2
 80017c2:	485b      	ldr	r0, [pc, #364]	; (8001930 <setupMag+0x250>)
 80017c4:	f001 fb5c 	bl	8002e80 <HAL_I2C_Master_Transmit>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1ef      	bne.n	80017ae <setupMag+0xce>

	//7
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegA, 1, HAL_MAX_DELAY) != HAL_OK){}
 80017ce:	bf00      	nop
 80017d0:	4b55      	ldr	r3, [pc, #340]	; (8001928 <setupMag+0x248>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	b299      	uxth	r1, r3
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	2301      	movs	r3, #1
 80017e2:	4a55      	ldr	r2, [pc, #340]	; (8001938 <setupMag+0x258>)
 80017e4:	4852      	ldr	r0, [pc, #328]	; (8001930 <setupMag+0x250>)
 80017e6:	f001 fb4b 	bl	8002e80 <HAL_I2C_Master_Transmit>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1ef      	bne.n	80017d0 <setupMag+0xf0>

	//8
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 80017f0:	4b4d      	ldr	r3, [pc, #308]	; (8001928 <setupMag+0x248>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	b299      	uxth	r1, r3
 8001800:	1dfa      	adds	r2, r7, #7
 8001802:	f04f 33ff 	mov.w	r3, #4294967295
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2301      	movs	r3, #1
 800180a:	4849      	ldr	r0, [pc, #292]	; (8001930 <setupMag+0x250>)
 800180c:	f001 fc36 	bl	800307c <HAL_I2C_Master_Receive>

	//9
	magSetupTX[0] = cfgRegA;
 8001810:	4b49      	ldr	r3, [pc, #292]	; (8001938 <setupMag+0x258>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = disRegA;
 8001816:	4b49      	ldr	r3, [pc, #292]	; (800193c <setupMag+0x25c>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 800181c:	bf00      	nop
 800181e:	4b42      	ldr	r3, [pc, #264]	; (8001928 <setupMag+0x248>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	b29b      	uxth	r3, r3
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	b299      	uxth	r1, r3
 8001828:	1d3a      	adds	r2, r7, #4
 800182a:	f04f 33ff 	mov.w	r3, #4294967295
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	2302      	movs	r3, #2
 8001832:	483f      	ldr	r0, [pc, #252]	; (8001930 <setupMag+0x250>)
 8001834:	f001 fb24 	bl	8002e80 <HAL_I2C_Master_Transmit>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1ef      	bne.n	800181e <setupMag+0x13e>

	//10
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegC, 1, HAL_MAX_DELAY) != HAL_OK){}
 800183e:	bf00      	nop
 8001840:	4b39      	ldr	r3, [pc, #228]	; (8001928 <setupMag+0x248>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	b29b      	uxth	r3, r3
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	b299      	uxth	r1, r3
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2301      	movs	r3, #1
 8001852:	4a36      	ldr	r2, [pc, #216]	; (800192c <setupMag+0x24c>)
 8001854:	4836      	ldr	r0, [pc, #216]	; (8001930 <setupMag+0x250>)
 8001856:	f001 fb13 	bl	8002e80 <HAL_I2C_Master_Transmit>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1ef      	bne.n	8001840 <setupMag+0x160>

	//11
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8001860:	4b31      	ldr	r3, [pc, #196]	; (8001928 <setupMag+0x248>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	b21b      	sxth	r3, r3
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	b21b      	sxth	r3, r3
 800186e:	b299      	uxth	r1, r3
 8001870:	1dfa      	adds	r2, r7, #7
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2301      	movs	r3, #1
 800187a:	482d      	ldr	r0, [pc, #180]	; (8001930 <setupMag+0x250>)
 800187c:	f001 fbfe 	bl	800307c <HAL_I2C_Master_Receive>


	//12
	magSetupTX[0] = cfgRegC;
 8001880:	4b2a      	ldr	r3, [pc, #168]	; (800192c <setupMag+0x24c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = initRegC;
 8001886:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <setupMag+0x254>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 800188c:	bf00      	nop
 800188e:	4b26      	ldr	r3, [pc, #152]	; (8001928 <setupMag+0x248>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b29b      	uxth	r3, r3
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	b299      	uxth	r1, r3
 8001898:	1d3a      	adds	r2, r7, #4
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	2302      	movs	r3, #2
 80018a2:	4823      	ldr	r0, [pc, #140]	; (8001930 <setupMag+0x250>)
 80018a4:	f001 faec 	bl	8002e80 <HAL_I2C_Master_Transmit>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1ef      	bne.n	800188e <setupMag+0x1ae>

	//13
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegA, 2, HAL_MAX_DELAY) != HAL_OK){}
 80018ae:	bf00      	nop
 80018b0:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <setupMag+0x248>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	b299      	uxth	r1, r3
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2302      	movs	r3, #2
 80018c2:	4a1d      	ldr	r2, [pc, #116]	; (8001938 <setupMag+0x258>)
 80018c4:	481a      	ldr	r0, [pc, #104]	; (8001930 <setupMag+0x250>)
 80018c6:	f001 fadb 	bl	8002e80 <HAL_I2C_Master_Transmit>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1ef      	bne.n	80018b0 <setupMag+0x1d0>

	//14
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 80018d0:	4b15      	ldr	r3, [pc, #84]	; (8001928 <setupMag+0x248>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	b21b      	sxth	r3, r3
 80018de:	b299      	uxth	r1, r3
 80018e0:	1dfa      	adds	r2, r7, #7
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2301      	movs	r3, #1
 80018ea:	4811      	ldr	r0, [pc, #68]	; (8001930 <setupMag+0x250>)
 80018ec:	f001 fbc6 	bl	800307c <HAL_I2C_Master_Receive>


	//15
	magSetupTX[0] = cfgRegA;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <setupMag+0x258>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = initRegA;
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <setupMag+0x260>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 80018fc:	bf00      	nop
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <setupMag+0x248>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	b299      	uxth	r1, r3
 8001908:	1d3a      	adds	r2, r7, #4
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2302      	movs	r3, #2
 8001912:	4807      	ldr	r0, [pc, #28]	; (8001930 <setupMag+0x250>)
 8001914:	f001 fab4 	bl	8002e80 <HAL_I2C_Master_Transmit>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1ef      	bne.n	80018fe <setupMag+0x21e>
}
 800191e:	bf00      	nop
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000000 	.word	0x20000000
 800192c:	20000003 	.word	0x20000003
 8001930:	20000090 	.word	0x20000090
 8001934:	20000006 	.word	0x20000006
 8001938:	20000002 	.word	0x20000002
 800193c:	20000005 	.word	0x20000005
 8001940:	20000004 	.word	0x20000004

08001944 <hardIronCal>:

void hardIronCal(float* xCal, float* yCal, float* zCal) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b09c      	sub	sp, #112	; 0x70
 8001948:	af02      	add	r7, sp, #8
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  //Print Value to terminal
  uint8_t buf[30];
  sprintf((char*)buf, "Calibrating Magnetometer...\r\n");
 8001950:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001954:	497e      	ldr	r1, [pc, #504]	; (8001b50 <hardIronCal+0x20c>)
 8001956:	4618      	mov	r0, r3
 8001958:	f003 fb48 	bl	8004fec <siprintf>
  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800195c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fc3d 	bl	80001e0 <strlen>
 8001966:	4603      	mov	r3, r0
 8001968:	b29a      	uxth	r2, r3
 800196a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
 8001972:	4878      	ldr	r0, [pc, #480]	; (8001b54 <hardIronCal+0x210>)
 8001974:	f002 fdc9 	bl	800450a <HAL_UART_Transmit>

  int16_t magnetometerVal [3] = {0};
 8001978:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	809a      	strh	r2, [r3, #4]

  while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &dataRegister, 1, 20) != HAL_OK){} //send data register address
 8001982:	bf00      	nop
 8001984:	4b74      	ldr	r3, [pc, #464]	; (8001b58 <hardIronCal+0x214>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	b29b      	uxth	r3, r3
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	b299      	uxth	r1, r3
 800198e:	2314      	movs	r3, #20
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	2301      	movs	r3, #1
 8001994:	4a71      	ldr	r2, [pc, #452]	; (8001b5c <hardIronCal+0x218>)
 8001996:	4872      	ldr	r0, [pc, #456]	; (8001b60 <hardIronCal+0x21c>)
 8001998:	f001 fa72 	bl	8002e80 <HAL_I2C_Master_Transmit>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <hardIronCal+0x40>
  while (HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), magnetometerVal, 6, HAL_MAX_DELAY)){}
 80019a2:	bf00      	nop
 80019a4:	4b6c      	ldr	r3, [pc, #432]	; (8001b58 <hardIronCal+0x214>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	b299      	uxth	r1, r3
 80019b4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2306      	movs	r3, #6
 80019c0:	4867      	ldr	r0, [pc, #412]	; (8001b60 <hardIronCal+0x21c>)
 80019c2:	f001 fb5b 	bl	800307c <HAL_I2C_Master_Receive>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1eb      	bne.n	80019a4 <hardIronCal+0x60>

  int16_t xMax = magnetometerVal[0];
 80019cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80019ce:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  int16_t xMin = magnetometerVal[0];
 80019d2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80019d4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  int16_t yMax = magnetometerVal[1];
 80019d8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80019da:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  int16_t yMin = magnetometerVal[1];
 80019de:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80019e0:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

  int16_t zMax = magnetometerVal[2];
 80019e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019e6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  int16_t zMin = magnetometerVal[2];
 80019ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019ec:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c


  for (int i = 0; i < 50; i++) {
 80019f0:	2300      	movs	r3, #0
 80019f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80019f4:	e077      	b.n	8001ae6 <hardIronCal+0x1a2>
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &dataRegister, 1, 20) != HAL_OK){} //send data register address
 80019f6:	bf00      	nop
 80019f8:	4b57      	ldr	r3, [pc, #348]	; (8001b58 <hardIronCal+0x214>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	b299      	uxth	r1, r3
 8001a02:	2314      	movs	r3, #20
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	2301      	movs	r3, #1
 8001a08:	4a54      	ldr	r2, [pc, #336]	; (8001b5c <hardIronCal+0x218>)
 8001a0a:	4855      	ldr	r0, [pc, #340]	; (8001b60 <hardIronCal+0x21c>)
 8001a0c:	f001 fa38 	bl	8002e80 <HAL_I2C_Master_Transmit>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <hardIronCal+0xb4>
	while (HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), magnetometerVal, 6, HAL_MAX_DELAY)){}
 8001a16:	bf00      	nop
 8001a18:	4b4f      	ldr	r3, [pc, #316]	; (8001b58 <hardIronCal+0x214>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	b21b      	sxth	r3, r3
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	b21b      	sxth	r3, r3
 8001a26:	b299      	uxth	r1, r3
 8001a28:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2306      	movs	r3, #6
 8001a34:	484a      	ldr	r0, [pc, #296]	; (8001b60 <hardIronCal+0x21c>)
 8001a36:	f001 fb21 	bl	800307c <HAL_I2C_Master_Receive>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1eb      	bne.n	8001a18 <hardIronCal+0xd4>

    //Updating xMax and xMin
    if (magnetometerVal[0] > xMax) {
 8001a40:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001a44:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	da03      	bge.n	8001a54 <hardIronCal+0x110>
      xMax = magnetometerVal[0];
 8001a4c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001a4e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001a52:	e008      	b.n	8001a66 <hardIronCal+0x122>
    }

    else if (magnetometerVal[0] < xMin) {
 8001a54:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001a58:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	dd02      	ble.n	8001a66 <hardIronCal+0x122>
      xMin = magnetometerVal[0];
 8001a60:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001a62:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    }

    //Updating yMax and yMin
    if (magnetometerVal[1] > yMax) {
 8001a66:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001a6a:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	da03      	bge.n	8001a7a <hardIronCal+0x136>
      yMax = magnetometerVal[1];
 8001a72:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001a74:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001a78:	e008      	b.n	8001a8c <hardIronCal+0x148>
    }

    else if (magnetometerVal[1] < yMin) {
 8001a7a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001a7e:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 8001a82:	429a      	cmp	r2, r3
 8001a84:	dd02      	ble.n	8001a8c <hardIronCal+0x148>
      yMin = magnetometerVal[1];
 8001a86:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001a88:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    }

    //Updating zMax and zMin
    if (magnetometerVal[2] > zMax) {
 8001a8c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001a90:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8001a94:	429a      	cmp	r2, r3
 8001a96:	da03      	bge.n	8001aa0 <hardIronCal+0x15c>
      zMax = magnetometerVal[2];
 8001a98:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001a9a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001a9e:	e008      	b.n	8001ab2 <hardIronCal+0x16e>
    }

    else if (magnetometerVal[2] < zMin) {
 8001aa0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001aa4:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	dd02      	ble.n	8001ab2 <hardIronCal+0x16e>
      zMin = magnetometerVal[2];
 8001aac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001aae:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }

    HAL_Delay(250);
 8001ab2:	20fa      	movs	r0, #250	; 0xfa
 8001ab4:	f000 fdf8 	bl	80026a8 <HAL_Delay>
    uint8_t buf[30];
    sprintf((char*)buf, "Calibrating Magnetometer...\r\n");
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	4924      	ldr	r1, [pc, #144]	; (8001b50 <hardIronCal+0x20c>)
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 fa94 	bl	8004fec <siprintf>
    HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fb89 	bl	80001e0 <strlen>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	f107 0110 	add.w	r1, r7, #16
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ada:	481e      	ldr	r0, [pc, #120]	; (8001b54 <hardIronCal+0x210>)
 8001adc:	f002 fd15 	bl	800450a <HAL_UART_Transmit>
  for (int i = 0; i < 50; i++) {
 8001ae0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ae6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ae8:	2b31      	cmp	r3, #49	; 0x31
 8001aea:	dd84      	ble.n	80019f6 <hardIronCal+0xb2>
  }

  //finding the calibration values
  *xCal = (xMax + xMin) / 2;
 8001aec:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8001af0:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001af4:	4413      	add	r3, r2
 8001af6:	0fda      	lsrs	r2, r3, #31
 8001af8:	4413      	add	r3, r2
 8001afa:	105b      	asrs	r3, r3, #1
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	edc3 7a00 	vstr	s15, [r3]
  *yCal = (yMax + yMin) / 2;
 8001b0a:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8001b0e:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001b12:	4413      	add	r3, r2
 8001b14:	0fda      	lsrs	r2, r3, #31
 8001b16:	4413      	add	r3, r2
 8001b18:	105b      	asrs	r3, r3, #1
 8001b1a:	ee07 3a90 	vmov	s15, r3
 8001b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	edc3 7a00 	vstr	s15, [r3]
  *zCal = (zMax + zMin) / 2;
 8001b28:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8001b2c:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8001b30:	4413      	add	r3, r2
 8001b32:	0fda      	lsrs	r2, r3, #31
 8001b34:	4413      	add	r3, r2
 8001b36:	105b      	asrs	r3, r3, #1
 8001b38:	ee07 3a90 	vmov	s15, r3
 8001b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	edc3 7a00 	vstr	s15, [r3]
}
 8001b46:	bf00      	nop
 8001b48:	3768      	adds	r7, #104	; 0x68
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	08006600 	.word	0x08006600
 8001b54:	200000e4 	.word	0x200000e4
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	20000001 	.word	0x20000001
 8001b60:	20000090 	.word	0x20000090
 8001b64:	00000000 	.word	0x00000000

08001b68 <getDirectionAngle>:

float getDirectionAngle(int16_t xMag, int16_t yMag, int16_t zMag, float xCal, float yCal, float zCal){
 8001b68:	b5b0      	push	{r4, r5, r7, lr}
 8001b6a:	b08c      	sub	sp, #48	; 0x30
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b74:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b78:	ed87 1a01 	vstr	s2, [r7, #4]
 8001b7c:	82fb      	strh	r3, [r7, #22]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	82bb      	strh	r3, [r7, #20]
 8001b82:	4613      	mov	r3, r2
 8001b84:	827b      	strh	r3, [r7, #18]
  xMag -= xCal;
 8001b86:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b8a:	ee07 3a90 	vmov	s15, r3
 8001b8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b92:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b9e:	ee17 3a90 	vmov	r3, s15
 8001ba2:	82fb      	strh	r3, [r7, #22]
  yMag -= yCal;
 8001ba4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ba8:	ee07 3a90 	vmov	s15, r3
 8001bac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bbc:	ee17 3a90 	vmov	r3, s15
 8001bc0:	82bb      	strh	r3, [r7, #20]
  zMag -= zCal;
 8001bc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bce:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bda:	ee17 3a90 	vmov	r3, s15
 8001bde:	827b      	strh	r3, [r7, #18]

  float D = atan2(xMag, yMag) * (180 / M_PI);
 8001be0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fca5 	bl	8000534 <__aeabi_i2d>
 8001bea:	4604      	mov	r4, r0
 8001bec:	460d      	mov	r5, r1
 8001bee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fc9e 	bl	8000534 <__aeabi_i2d>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	ec43 2b11 	vmov	d1, r2, r3
 8001c00:	ec45 4b10 	vmov	d0, r4, r5
 8001c04:	f004 fa70 	bl	80060e8 <atan2>
 8001c08:	ec51 0b10 	vmov	r0, r1, d0
 8001c0c:	a32b      	add	r3, pc, #172	; (adr r3, 8001cbc <getDirectionAngle+0x154>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe fcf9 	bl	8000608 <__aeabi_dmul>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f7fe ff8d 	bl	8000b3c <__aeabi_d2f>
 8001c22:	4603      	mov	r3, r0
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (D > 360) {
 8001c26:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c2a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001cb0 <getDirectionAngle+0x148>
 8001c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c36:	dd08      	ble.n	8001c4a <getDirectionAngle+0xe2>
    D -= 360;
 8001c38:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c3c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001cb0 <getDirectionAngle+0x148>
 8001c40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c44:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8001c48:	e00e      	b.n	8001c68 <getDirectionAngle+0x100>
  }
  else if (D < 0){
 8001c4a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c56:	d507      	bpl.n	8001c68 <getDirectionAngle+0x100>
    D += 360;
 8001c58:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c5c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001cb0 <getDirectionAngle+0x148>
 8001c60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c64:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  }

  uint8_t buf[20];
  sprintf((char*)buf, "D = %u \r\n", (unsigned int)D);
 8001c68:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c70:	f107 0318 	add.w	r3, r7, #24
 8001c74:	ee17 2a90 	vmov	r2, s15
 8001c78:	490e      	ldr	r1, [pc, #56]	; (8001cb4 <getDirectionAngle+0x14c>)
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f003 f9b6 	bl	8004fec <siprintf>
  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001c80:	f107 0318 	add.w	r3, r7, #24
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe faab 	bl	80001e0 <strlen>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	f107 0118 	add.w	r1, r7, #24
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
 8001c96:	4808      	ldr	r0, [pc, #32]	; (8001cb8 <getDirectionAngle+0x150>)
 8001c98:	f002 fc37 	bl	800450a <HAL_UART_Transmit>

  return D;
 8001c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c9e:	ee07 3a90 	vmov	s15, r3
}
 8001ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca6:	3730      	adds	r7, #48	; 0x30
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bdb0      	pop	{r4, r5, r7, pc}
 8001cac:	f3af 8000 	nop.w
 8001cb0:	43b40000 	.word	0x43b40000
 8001cb4:	08006620 	.word	0x08006620
 8001cb8:	200000e4 	.word	0x200000e4
 8001cbc:	1a63c1f8 	.word	0x1a63c1f8
 8001cc0:	404ca5dc 	.word	0x404ca5dc

08001cc4 <printDirection>:

void printDirection(float D) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b0a2      	sub	sp, #136	; 0x88
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	ed87 0a01 	vstr	s0, [r7, #4]
	if (D > 337.25 || D < 22.5)
 8001cce:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cd2:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8001f4c <printDirection+0x288>
 8001cd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cde:	dc08      	bgt.n	8001cf2 <printDirection+0x2e>
 8001ce0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ce4:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8001f50 <printDirection+0x28c>
 8001ce8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf0:	d514      	bpl.n	8001d1c <printDirection+0x58>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "North \r\n");
 8001cf2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001cf6:	4997      	ldr	r1, [pc, #604]	; (8001f54 <printDirection+0x290>)
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f003 f977 	bl	8004fec <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001cfe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fa6c 	bl	80001e0 <strlen>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295
 8001d14:	4890      	ldr	r0, [pc, #576]	; (8001f58 <printDirection+0x294>)
 8001d16:	f002 fbf8 	bl	800450a <HAL_UART_Transmit>
	{
 8001d1a:	e112      	b.n	8001f42 <printDirection+0x27e>
	}
	else if (D >= 292.5 && D <= 337.25)
 8001d1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d20:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001f5c <printDirection+0x298>
 8001d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2c:	db1d      	blt.n	8001d6a <printDirection+0xa6>
 8001d2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d32:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001f4c <printDirection+0x288>
 8001d36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3e:	d814      	bhi.n	8001d6a <printDirection+0xa6>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "North-West \r\n");
 8001d40:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d44:	4986      	ldr	r1, [pc, #536]	; (8001f60 <printDirection+0x29c>)
 8001d46:	4618      	mov	r0, r3
 8001d48:	f003 f950 	bl	8004fec <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001d4c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fa45 	bl	80001e0 <strlen>
 8001d56:	4603      	mov	r3, r0
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d62:	487d      	ldr	r0, [pc, #500]	; (8001f58 <printDirection+0x294>)
 8001d64:	f002 fbd1 	bl	800450a <HAL_UART_Transmit>
	{
 8001d68:	e0eb      	b.n	8001f42 <printDirection+0x27e>
	}
	else if (D >= 247.5 && D < 292.5)
 8001d6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d6e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8001f64 <printDirection+0x2a0>
 8001d72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7a:	db1d      	blt.n	8001db8 <printDirection+0xf4>
 8001d7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d80:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001f5c <printDirection+0x298>
 8001d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8c:	d514      	bpl.n	8001db8 <printDirection+0xf4>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "West \r\n");
 8001d8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d92:	4975      	ldr	r1, [pc, #468]	; (8001f68 <printDirection+0x2a4>)
 8001d94:	4618      	mov	r0, r3
 8001d96:	f003 f929 	bl	8004fec <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001d9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fa1e 	bl	80001e0 <strlen>
 8001da4:	4603      	mov	r3, r0
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
 8001db0:	4869      	ldr	r0, [pc, #420]	; (8001f58 <printDirection+0x294>)
 8001db2:	f002 fbaa 	bl	800450a <HAL_UART_Transmit>
	{
 8001db6:	e0c4      	b.n	8001f42 <printDirection+0x27e>
	}
	else if (D >= 202.5 && D < 247.5)
 8001db8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dbc:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001f6c <printDirection+0x2a8>
 8001dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc8:	db1d      	blt.n	8001e06 <printDirection+0x142>
 8001dca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dce:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001f64 <printDirection+0x2a0>
 8001dd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dda:	d514      	bpl.n	8001e06 <printDirection+0x142>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "South-West \r\n");
 8001ddc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001de0:	4963      	ldr	r1, [pc, #396]	; (8001f70 <printDirection+0x2ac>)
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 f902 	bl	8004fec <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001de8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe f9f7 	bl	80001e0 <strlen>
 8001df2:	4603      	mov	r3, r0
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfe:	4856      	ldr	r0, [pc, #344]	; (8001f58 <printDirection+0x294>)
 8001e00:	f002 fb83 	bl	800450a <HAL_UART_Transmit>
	{
 8001e04:	e09d      	b.n	8001f42 <printDirection+0x27e>
	}
	else if (D >= 157.5 && D < 202.5)
 8001e06:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e0a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001f74 <printDirection+0x2b0>
 8001e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e16:	db1d      	blt.n	8001e54 <printDirection+0x190>
 8001e18:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e1c:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001f6c <printDirection+0x2a8>
 8001e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e28:	d514      	bpl.n	8001e54 <printDirection+0x190>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "South \r\n");
 8001e2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e2e:	4952      	ldr	r1, [pc, #328]	; (8001f78 <printDirection+0x2b4>)
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 f8db 	bl	8004fec <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001e36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe f9d0 	bl	80001e0 <strlen>
 8001e40:	4603      	mov	r3, r0
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4c:	4842      	ldr	r0, [pc, #264]	; (8001f58 <printDirection+0x294>)
 8001e4e:	f002 fb5c 	bl	800450a <HAL_UART_Transmit>
	{
 8001e52:	e076      	b.n	8001f42 <printDirection+0x27e>
	}
	else if (D >= 112.5 && D < 157.5)
 8001e54:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e58:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001f7c <printDirection+0x2b8>
 8001e5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e64:	db1d      	blt.n	8001ea2 <printDirection+0x1de>
 8001e66:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e6a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001f74 <printDirection+0x2b0>
 8001e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	d514      	bpl.n	8001ea2 <printDirection+0x1de>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "South-East \r\n");
 8001e78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e7c:	4940      	ldr	r1, [pc, #256]	; (8001f80 <printDirection+0x2bc>)
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f003 f8b4 	bl	8004fec <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001e84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe f9a9 	bl	80001e0 <strlen>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9a:	482f      	ldr	r0, [pc, #188]	; (8001f58 <printDirection+0x294>)
 8001e9c:	f002 fb35 	bl	800450a <HAL_UART_Transmit>
	{
 8001ea0:	e04f      	b.n	8001f42 <printDirection+0x27e>
	}
	else if (D >= 67.5 && D < 112.5)
 8001ea2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ea6:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001f84 <printDirection+0x2c0>
 8001eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb2:	db1d      	blt.n	8001ef0 <printDirection+0x22c>
 8001eb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eb8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001f7c <printDirection+0x2b8>
 8001ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec4:	d514      	bpl.n	8001ef0 <printDirection+0x22c>
	{
		uint8_t buf[15];
		sprintf((char*)buf, "East \r\n");
 8001ec6:	f107 0318 	add.w	r3, r7, #24
 8001eca:	492f      	ldr	r1, [pc, #188]	; (8001f88 <printDirection+0x2c4>)
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f003 f88d 	bl	8004fec <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001ed2:	f107 0318 	add.w	r3, r7, #24
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe f982 	bl	80001e0 <strlen>
 8001edc:	4603      	mov	r3, r0
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	f107 0118 	add.w	r1, r7, #24
 8001ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee8:	481b      	ldr	r0, [pc, #108]	; (8001f58 <printDirection+0x294>)
 8001eea:	f002 fb0e 	bl	800450a <HAL_UART_Transmit>
	{
 8001eee:	e028      	b.n	8001f42 <printDirection+0x27e>
	}
	else if (D >= 22.5 && D < 67.5)
 8001ef0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ef4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001f50 <printDirection+0x28c>
 8001ef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f00:	da00      	bge.n	8001f04 <printDirection+0x240>
		uint8_t buf[15];
		sprintf((char*)buf, "North-East \r\n");
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
	}

}
 8001f02:	e01e      	b.n	8001f42 <printDirection+0x27e>
	else if (D >= 22.5 && D < 67.5)
 8001f04:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f08:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001f84 <printDirection+0x2c0>
 8001f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f14:	d400      	bmi.n	8001f18 <printDirection+0x254>
}
 8001f16:	e014      	b.n	8001f42 <printDirection+0x27e>
		sprintf((char*)buf, "North-East \r\n");
 8001f18:	f107 0308 	add.w	r3, r7, #8
 8001f1c:	491b      	ldr	r1, [pc, #108]	; (8001f8c <printDirection+0x2c8>)
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f003 f864 	bl	8004fec <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001f24:	f107 0308 	add.w	r3, r7, #8
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe f959 	bl	80001e0 <strlen>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	f107 0108 	add.w	r1, r7, #8
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3a:	4807      	ldr	r0, [pc, #28]	; (8001f58 <printDirection+0x294>)
 8001f3c:	f002 fae5 	bl	800450a <HAL_UART_Transmit>
}
 8001f40:	e7ff      	b.n	8001f42 <printDirection+0x27e>
 8001f42:	bf00      	nop
 8001f44:	3788      	adds	r7, #136	; 0x88
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	43a8a000 	.word	0x43a8a000
 8001f50:	41b40000 	.word	0x41b40000
 8001f54:	0800662c 	.word	0x0800662c
 8001f58:	200000e4 	.word	0x200000e4
 8001f5c:	43924000 	.word	0x43924000
 8001f60:	08006638 	.word	0x08006638
 8001f64:	43778000 	.word	0x43778000
 8001f68:	08006648 	.word	0x08006648
 8001f6c:	434a8000 	.word	0x434a8000
 8001f70:	08006650 	.word	0x08006650
 8001f74:	431d8000 	.word	0x431d8000
 8001f78:	08006660 	.word	0x08006660
 8001f7c:	42e10000 	.word	0x42e10000
 8001f80:	0800666c 	.word	0x0800666c
 8001f84:	42870000 	.word	0x42870000
 8001f88:	0800667c 	.word	0x0800667c
 8001f8c:	08006684 	.word	0x08006684

08001f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b094      	sub	sp, #80	; 0x50
 8001f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f96:	f107 0320 	add.w	r3, r7, #32
 8001f9a:	2230      	movs	r2, #48	; 0x30
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f003 f887 	bl	80050b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fa4:	f107 030c 	add.w	r3, r7, #12
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	4b28      	ldr	r3, [pc, #160]	; (800205c <SystemClock_Config+0xcc>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	4a27      	ldr	r2, [pc, #156]	; (800205c <SystemClock_Config+0xcc>)
 8001fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc4:	4b25      	ldr	r3, [pc, #148]	; (800205c <SystemClock_Config+0xcc>)
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	4b22      	ldr	r3, [pc, #136]	; (8002060 <SystemClock_Config+0xd0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a21      	ldr	r2, [pc, #132]	; (8002060 <SystemClock_Config+0xd0>)
 8001fda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <SystemClock_Config+0xd0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fec:	2302      	movs	r3, #2
 8001fee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ff4:	2310      	movs	r3, #16
 8001ff6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002000:	2310      	movs	r3, #16
 8002002:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002004:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002008:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800200a:	2304      	movs	r3, #4
 800200c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800200e:	2304      	movs	r3, #4
 8002010:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002012:	f107 0320 	add.w	r3, r7, #32
 8002016:	4618      	mov	r0, r3
 8002018:	f001 fd92 	bl	8003b40 <HAL_RCC_OscConfig>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002022:	f000 f8e5 	bl	80021f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002026:	230f      	movs	r3, #15
 8002028:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800202a:	2302      	movs	r3, #2
 800202c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002036:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800203c:	f107 030c 	add.w	r3, r7, #12
 8002040:	2102      	movs	r1, #2
 8002042:	4618      	mov	r0, r3
 8002044:	f001 fff4 	bl	8004030 <HAL_RCC_ClockConfig>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800204e:	f000 f8cf 	bl	80021f0 <Error_Handler>
  }
}
 8002052:	bf00      	nop
 8002054:	3750      	adds	r7, #80	; 0x50
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800
 8002060:	40007000 	.word	0x40007000

08002064 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002068:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <MX_I2C1_Init+0x50>)
 800206a:	4a13      	ldr	r2, [pc, #76]	; (80020b8 <MX_I2C1_Init+0x54>)
 800206c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <MX_I2C1_Init+0x50>)
 8002070:	4a12      	ldr	r2, [pc, #72]	; (80020bc <MX_I2C1_Init+0x58>)
 8002072:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <MX_I2C1_Init+0x50>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <MX_I2C1_Init+0x50>)
 800207c:	2200      	movs	r2, #0
 800207e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <MX_I2C1_Init+0x50>)
 8002082:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002086:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002088:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <MX_I2C1_Init+0x50>)
 800208a:	2200      	movs	r2, #0
 800208c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <MX_I2C1_Init+0x50>)
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <MX_I2C1_Init+0x50>)
 8002096:	2200      	movs	r2, #0
 8002098:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <MX_I2C1_Init+0x50>)
 800209c:	2200      	movs	r2, #0
 800209e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020a0:	4804      	ldr	r0, [pc, #16]	; (80020b4 <MX_I2C1_Init+0x50>)
 80020a2:	f000 fda9 	bl	8002bf8 <HAL_I2C_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020ac:	f000 f8a0 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000090 	.word	0x20000090
 80020b8:	40005400 	.word	0x40005400
 80020bc:	000186a0 	.word	0x000186a0

080020c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <MX_USART2_UART_Init+0x4c>)
 80020c6:	4a12      	ldr	r2, [pc, #72]	; (8002110 <MX_USART2_UART_Init+0x50>)
 80020c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <MX_USART2_UART_Init+0x4c>)
 80020cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <MX_USART2_UART_Init+0x4c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <MX_USART2_UART_Init+0x4c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <MX_USART2_UART_Init+0x4c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020e4:	4b09      	ldr	r3, [pc, #36]	; (800210c <MX_USART2_UART_Init+0x4c>)
 80020e6:	220c      	movs	r2, #12
 80020e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <MX_USART2_UART_Init+0x4c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <MX_USART2_UART_Init+0x4c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020f6:	4805      	ldr	r0, [pc, #20]	; (800210c <MX_USART2_UART_Init+0x4c>)
 80020f8:	f002 f9ba 	bl	8004470 <HAL_UART_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002102:	f000 f875 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	200000e4 	.word	0x200000e4
 8002110:	40004400 	.word	0x40004400

08002114 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	; 0x28
 8002118:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	609a      	str	r2, [r3, #8]
 8002126:	60da      	str	r2, [r3, #12]
 8002128:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <MX_GPIO_Init+0xd0>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a2c      	ldr	r2, [pc, #176]	; (80021e4 <MX_GPIO_Init+0xd0>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <MX_GPIO_Init+0xd0>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <MX_GPIO_Init+0xd0>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a25      	ldr	r2, [pc, #148]	; (80021e4 <MX_GPIO_Init+0xd0>)
 8002150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <MX_GPIO_Init+0xd0>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	4b1f      	ldr	r3, [pc, #124]	; (80021e4 <MX_GPIO_Init+0xd0>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a1e      	ldr	r2, [pc, #120]	; (80021e4 <MX_GPIO_Init+0xd0>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <MX_GPIO_Init+0xd0>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	607b      	str	r3, [r7, #4]
 8002182:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <MX_GPIO_Init+0xd0>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a17      	ldr	r2, [pc, #92]	; (80021e4 <MX_GPIO_Init+0xd0>)
 8002188:	f043 0302 	orr.w	r3, r3, #2
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <MX_GPIO_Init+0xd0>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800219a:	2200      	movs	r2, #0
 800219c:	2120      	movs	r1, #32
 800219e:	4812      	ldr	r0, [pc, #72]	; (80021e8 <MX_GPIO_Init+0xd4>)
 80021a0:	f000 fd10 	bl	8002bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	480c      	ldr	r0, [pc, #48]	; (80021ec <MX_GPIO_Init+0xd8>)
 80021bc:	f000 fb7e 	bl	80028bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80021c0:	2320      	movs	r3, #32
 80021c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c4:	2301      	movs	r3, #1
 80021c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	2300      	movs	r3, #0
 80021ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4619      	mov	r1, r3
 80021d6:	4804      	ldr	r0, [pc, #16]	; (80021e8 <MX_GPIO_Init+0xd4>)
 80021d8:	f000 fb70 	bl	80028bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021dc:	bf00      	nop
 80021de:	3728      	adds	r7, #40	; 0x28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40020000 	.word	0x40020000
 80021ec:	40020800 	.word	0x40020800

080021f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021f4:	b672      	cpsid	i
}
 80021f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <Error_Handler+0x8>
	...

080021fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <HAL_MspInit+0x4c>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	4a0f      	ldr	r2, [pc, #60]	; (8002248 <HAL_MspInit+0x4c>)
 800220c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002210:	6453      	str	r3, [r2, #68]	; 0x44
 8002212:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <HAL_MspInit+0x4c>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <HAL_MspInit+0x4c>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	4a08      	ldr	r2, [pc, #32]	; (8002248 <HAL_MspInit+0x4c>)
 8002228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222c:	6413      	str	r3, [r2, #64]	; 0x40
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_MspInit+0x4c>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800223a:	2007      	movs	r0, #7
 800223c:	f000 fb0a 	bl	8002854 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40023800 	.word	0x40023800

0800224c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	; 0x28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a19      	ldr	r2, [pc, #100]	; (80022d0 <HAL_I2C_MspInit+0x84>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d12c      	bne.n	80022c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <HAL_I2C_MspInit+0x88>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a17      	ldr	r2, [pc, #92]	; (80022d4 <HAL_I2C_MspInit+0x88>)
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <HAL_I2C_MspInit+0x88>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800228a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800228e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002290:	2312      	movs	r3, #18
 8002292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002298:	2303      	movs	r3, #3
 800229a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800229c:	2304      	movs	r3, #4
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	4619      	mov	r1, r3
 80022a6:	480c      	ldr	r0, [pc, #48]	; (80022d8 <HAL_I2C_MspInit+0x8c>)
 80022a8:	f000 fb08 	bl	80028bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_I2C_MspInit+0x88>)
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <HAL_I2C_MspInit+0x88>)
 80022b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022ba:	6413      	str	r3, [r2, #64]	; 0x40
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_I2C_MspInit+0x88>)
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022c8:	bf00      	nop
 80022ca:	3728      	adds	r7, #40	; 0x28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40005400 	.word	0x40005400
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40020400 	.word	0x40020400

080022dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a19      	ldr	r2, [pc, #100]	; (8002360 <HAL_UART_MspInit+0x84>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d12b      	bne.n	8002356 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	4b18      	ldr	r3, [pc, #96]	; (8002364 <HAL_UART_MspInit+0x88>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	4a17      	ldr	r2, [pc, #92]	; (8002364 <HAL_UART_MspInit+0x88>)
 8002308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800230c:	6413      	str	r3, [r2, #64]	; 0x40
 800230e:	4b15      	ldr	r3, [pc, #84]	; (8002364 <HAL_UART_MspInit+0x88>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	4b11      	ldr	r3, [pc, #68]	; (8002364 <HAL_UART_MspInit+0x88>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4a10      	ldr	r2, [pc, #64]	; (8002364 <HAL_UART_MspInit+0x88>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <HAL_UART_MspInit+0x88>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002336:	230c      	movs	r3, #12
 8002338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233a:	2302      	movs	r3, #2
 800233c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002342:	2303      	movs	r3, #3
 8002344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002346:	2307      	movs	r3, #7
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234a:	f107 0314 	add.w	r3, r7, #20
 800234e:	4619      	mov	r1, r3
 8002350:	4805      	ldr	r0, [pc, #20]	; (8002368 <HAL_UART_MspInit+0x8c>)
 8002352:	f000 fab3 	bl	80028bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002356:	bf00      	nop
 8002358:	3728      	adds	r7, #40	; 0x28
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40004400 	.word	0x40004400
 8002364:	40023800 	.word	0x40023800
 8002368:	40020000 	.word	0x40020000

0800236c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <NMI_Handler+0x4>

08002372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002376:	e7fe      	b.n	8002376 <HardFault_Handler+0x4>

08002378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800237c:	e7fe      	b.n	800237c <MemManage_Handler+0x4>

0800237e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002382:	e7fe      	b.n	8002382 <BusFault_Handler+0x4>

08002384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <UsageFault_Handler+0x4>

0800238a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023b8:	f000 f956 	bl	8002668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}

080023c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return 1;
 80023c4:	2301      	movs	r3, #1
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <_kill>:

int _kill(int pid, int sig)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023da:	f002 ff37 	bl	800524c <__errno>
 80023de:	4603      	mov	r3, r0
 80023e0:	2216      	movs	r2, #22
 80023e2:	601a      	str	r2, [r3, #0]
  return -1;
 80023e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <_exit>:

void _exit (int status)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ffe7 	bl	80023d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002402:	e7fe      	b.n	8002402 <_exit+0x12>

08002404 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	e00a      	b.n	800242c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002416:	f3af 8000 	nop.w
 800241a:	4601      	mov	r1, r0
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	60ba      	str	r2, [r7, #8]
 8002422:	b2ca      	uxtb	r2, r1
 8002424:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	3301      	adds	r3, #1
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	429a      	cmp	r2, r3
 8002432:	dbf0      	blt.n	8002416 <_read+0x12>
  }

  return len;
 8002434:	687b      	ldr	r3, [r7, #4]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	e009      	b.n	8002464 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	60ba      	str	r2, [r7, #8]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3301      	adds	r3, #1
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	429a      	cmp	r2, r3
 800246a:	dbf1      	blt.n	8002450 <_write+0x12>
  }
  return len;
 800246c:	687b      	ldr	r3, [r7, #4]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <_close>:

int _close(int file)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800247e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800249e:	605a      	str	r2, [r3, #4]
  return 0;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <_isatty>:

int _isatty(int file)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024b6:	2301      	movs	r3, #1
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024e8:	4a14      	ldr	r2, [pc, #80]	; (800253c <_sbrk+0x5c>)
 80024ea:	4b15      	ldr	r3, [pc, #84]	; (8002540 <_sbrk+0x60>)
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024f4:	4b13      	ldr	r3, [pc, #76]	; (8002544 <_sbrk+0x64>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d102      	bne.n	8002502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <_sbrk+0x64>)
 80024fe:	4a12      	ldr	r2, [pc, #72]	; (8002548 <_sbrk+0x68>)
 8002500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <_sbrk+0x64>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	429a      	cmp	r2, r3
 800250e:	d207      	bcs.n	8002520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002510:	f002 fe9c 	bl	800524c <__errno>
 8002514:	4603      	mov	r3, r0
 8002516:	220c      	movs	r2, #12
 8002518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800251a:	f04f 33ff 	mov.w	r3, #4294967295
 800251e:	e009      	b.n	8002534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <_sbrk+0x64>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002526:	4b07      	ldr	r3, [pc, #28]	; (8002544 <_sbrk+0x64>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	4a05      	ldr	r2, [pc, #20]	; (8002544 <_sbrk+0x64>)
 8002530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002532:	68fb      	ldr	r3, [r7, #12]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20020000 	.word	0x20020000
 8002540:	00000400 	.word	0x00000400
 8002544:	20000128 	.word	0x20000128
 8002548:	20000280 	.word	0x20000280

0800254c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <SystemInit+0x20>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	4a05      	ldr	r2, [pc, #20]	; (800256c <SystemInit+0x20>)
 8002558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800255c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002574:	480d      	ldr	r0, [pc, #52]	; (80025ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002576:	490e      	ldr	r1, [pc, #56]	; (80025b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002578:	4a0e      	ldr	r2, [pc, #56]	; (80025b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800257a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800257c:	e002      	b.n	8002584 <LoopCopyDataInit>

0800257e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800257e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002582:	3304      	adds	r3, #4

08002584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002588:	d3f9      	bcc.n	800257e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800258a:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800258c:	4c0b      	ldr	r4, [pc, #44]	; (80025bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800258e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002590:	e001      	b.n	8002596 <LoopFillZerobss>

08002592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002594:	3204      	adds	r2, #4

08002596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002598:	d3fb      	bcc.n	8002592 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800259a:	f7ff ffd7 	bl	800254c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800259e:	f002 fe5b 	bl	8005258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025a2:	f7fe fc99 	bl	8000ed8 <main>
  bx  lr    
 80025a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80025b4:	08006910 	.word	0x08006910
  ldr r2, =_sbss
 80025b8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80025bc:	2000027c 	.word	0x2000027c

080025c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c0:	e7fe      	b.n	80025c0 <ADC_IRQHandler>
	...

080025c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025c8:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_Init+0x40>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0d      	ldr	r2, [pc, #52]	; (8002604 <HAL_Init+0x40>)
 80025ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_Init+0x40>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <HAL_Init+0x40>)
 80025da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025e0:	4b08      	ldr	r3, [pc, #32]	; (8002604 <HAL_Init+0x40>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a07      	ldr	r2, [pc, #28]	; (8002604 <HAL_Init+0x40>)
 80025e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ec:	2003      	movs	r0, #3
 80025ee:	f000 f931 	bl	8002854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025f2:	2000      	movs	r0, #0
 80025f4:	f000 f808 	bl	8002608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025f8:	f7ff fe00 	bl	80021fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023c00 	.word	0x40023c00

08002608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002610:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_InitTick+0x54>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4b12      	ldr	r3, [pc, #72]	; (8002660 <HAL_InitTick+0x58>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	4619      	mov	r1, r3
 800261a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800261e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002622:	fbb2 f3f3 	udiv	r3, r2, r3
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f93b 	bl	80028a2 <HAL_SYSTICK_Config>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e00e      	b.n	8002654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b0f      	cmp	r3, #15
 800263a:	d80a      	bhi.n	8002652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800263c:	2200      	movs	r2, #0
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	f04f 30ff 	mov.w	r0, #4294967295
 8002644:	f000 f911 	bl	800286a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002648:	4a06      	ldr	r2, [pc, #24]	; (8002664 <HAL_InitTick+0x5c>)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	e000      	b.n	8002654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	2000000c 	.word	0x2000000c
 8002660:	20000014 	.word	0x20000014
 8002664:	20000010 	.word	0x20000010

08002668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_IncTick+0x20>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_IncTick+0x24>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4413      	add	r3, r2
 8002678:	4a04      	ldr	r2, [pc, #16]	; (800268c <HAL_IncTick+0x24>)
 800267a:	6013      	str	r3, [r2, #0]
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	20000014 	.word	0x20000014
 800268c:	2000012c 	.word	0x2000012c

08002690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return uwTick;
 8002694:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <HAL_GetTick+0x14>)
 8002696:	681b      	ldr	r3, [r3, #0]
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	2000012c 	.word	0x2000012c

080026a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b0:	f7ff ffee 	bl	8002690 <HAL_GetTick>
 80026b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c0:	d005      	beq.n	80026ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026c2:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <HAL_Delay+0x44>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4413      	add	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026ce:	bf00      	nop
 80026d0:	f7ff ffde 	bl	8002690 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d8f7      	bhi.n	80026d0 <HAL_Delay+0x28>
  {
  }
}
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000014 	.word	0x20000014

080026f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800270c:	4013      	ands	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800271c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002722:	4a04      	ldr	r2, [pc, #16]	; (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	60d3      	str	r3, [r2, #12]
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800273c:	4b04      	ldr	r3, [pc, #16]	; (8002750 <__NVIC_GetPriorityGrouping+0x18>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	f003 0307 	and.w	r3, r3, #7
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	6039      	str	r1, [r7, #0]
 800275e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002764:	2b00      	cmp	r3, #0
 8002766:	db0a      	blt.n	800277e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	b2da      	uxtb	r2, r3
 800276c:	490c      	ldr	r1, [pc, #48]	; (80027a0 <__NVIC_SetPriority+0x4c>)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	0112      	lsls	r2, r2, #4
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	440b      	add	r3, r1
 8002778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800277c:	e00a      	b.n	8002794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	b2da      	uxtb	r2, r3
 8002782:	4908      	ldr	r1, [pc, #32]	; (80027a4 <__NVIC_SetPriority+0x50>)
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	3b04      	subs	r3, #4
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	440b      	add	r3, r1
 8002792:	761a      	strb	r2, [r3, #24]
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000e100 	.word	0xe000e100
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b089      	sub	sp, #36	; 0x24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f1c3 0307 	rsb	r3, r3, #7
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	bf28      	it	cs
 80027c6:	2304      	movcs	r3, #4
 80027c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3304      	adds	r3, #4
 80027ce:	2b06      	cmp	r3, #6
 80027d0:	d902      	bls.n	80027d8 <NVIC_EncodePriority+0x30>
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3b03      	subs	r3, #3
 80027d6:	e000      	b.n	80027da <NVIC_EncodePriority+0x32>
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027dc:	f04f 32ff 	mov.w	r2, #4294967295
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43da      	mvns	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	401a      	ands	r2, r3
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f0:	f04f 31ff 	mov.w	r1, #4294967295
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	fa01 f303 	lsl.w	r3, r1, r3
 80027fa:	43d9      	mvns	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002800:	4313      	orrs	r3, r2
         );
}
 8002802:	4618      	mov	r0, r3
 8002804:	3724      	adds	r7, #36	; 0x24
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
	...

08002810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3b01      	subs	r3, #1
 800281c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002820:	d301      	bcc.n	8002826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002822:	2301      	movs	r3, #1
 8002824:	e00f      	b.n	8002846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002826:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <SysTick_Config+0x40>)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3b01      	subs	r3, #1
 800282c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800282e:	210f      	movs	r1, #15
 8002830:	f04f 30ff 	mov.w	r0, #4294967295
 8002834:	f7ff ff8e 	bl	8002754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <SysTick_Config+0x40>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800283e:	4b04      	ldr	r3, [pc, #16]	; (8002850 <SysTick_Config+0x40>)
 8002840:	2207      	movs	r2, #7
 8002842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	e000e010 	.word	0xe000e010

08002854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff ff47 	bl	80026f0 <__NVIC_SetPriorityGrouping>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800286a:	b580      	push	{r7, lr}
 800286c:	b086      	sub	sp, #24
 800286e:	af00      	add	r7, sp, #0
 8002870:	4603      	mov	r3, r0
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800287c:	f7ff ff5c 	bl	8002738 <__NVIC_GetPriorityGrouping>
 8002880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	6978      	ldr	r0, [r7, #20]
 8002888:	f7ff ff8e 	bl	80027a8 <NVIC_EncodePriority>
 800288c:	4602      	mov	r2, r0
 800288e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff5d 	bl	8002754 <__NVIC_SetPriority>
}
 800289a:	bf00      	nop
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff ffb0 	bl	8002810 <SysTick_Config>
 80028b0:	4603      	mov	r3, r0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028bc:	b480      	push	{r7}
 80028be:	b089      	sub	sp, #36	; 0x24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	e159      	b.n	8002b8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028d8:	2201      	movs	r2, #1
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4013      	ands	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	f040 8148 	bne.w	8002b86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d005      	beq.n	800290e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800290a:	2b02      	cmp	r3, #2
 800290c:	d130      	bne.n	8002970 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	2203      	movs	r2, #3
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4013      	ands	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002944:	2201      	movs	r2, #1
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 0201 	and.w	r2, r3, #1
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	2b03      	cmp	r3, #3
 800297a:	d017      	beq.n	80029ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	2203      	movs	r2, #3
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d123      	bne.n	8002a00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	08da      	lsrs	r2, r3, #3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3208      	adds	r2, #8
 80029c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	220f      	movs	r2, #15
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	08da      	lsrs	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3208      	adds	r2, #8
 80029fa:	69b9      	ldr	r1, [r7, #24]
 80029fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0203 	and.w	r2, r3, #3
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80a2 	beq.w	8002b86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	4b57      	ldr	r3, [pc, #348]	; (8002ba4 <HAL_GPIO_Init+0x2e8>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	4a56      	ldr	r2, [pc, #344]	; (8002ba4 <HAL_GPIO_Init+0x2e8>)
 8002a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a50:	6453      	str	r3, [r2, #68]	; 0x44
 8002a52:	4b54      	ldr	r3, [pc, #336]	; (8002ba4 <HAL_GPIO_Init+0x2e8>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a5e:	4a52      	ldr	r2, [pc, #328]	; (8002ba8 <HAL_GPIO_Init+0x2ec>)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	089b      	lsrs	r3, r3, #2
 8002a64:	3302      	adds	r3, #2
 8002a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	220f      	movs	r2, #15
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a49      	ldr	r2, [pc, #292]	; (8002bac <HAL_GPIO_Init+0x2f0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d019      	beq.n	8002abe <HAL_GPIO_Init+0x202>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a48      	ldr	r2, [pc, #288]	; (8002bb0 <HAL_GPIO_Init+0x2f4>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d013      	beq.n	8002aba <HAL_GPIO_Init+0x1fe>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a47      	ldr	r2, [pc, #284]	; (8002bb4 <HAL_GPIO_Init+0x2f8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00d      	beq.n	8002ab6 <HAL_GPIO_Init+0x1fa>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a46      	ldr	r2, [pc, #280]	; (8002bb8 <HAL_GPIO_Init+0x2fc>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d007      	beq.n	8002ab2 <HAL_GPIO_Init+0x1f6>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a45      	ldr	r2, [pc, #276]	; (8002bbc <HAL_GPIO_Init+0x300>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d101      	bne.n	8002aae <HAL_GPIO_Init+0x1f2>
 8002aaa:	2304      	movs	r3, #4
 8002aac:	e008      	b.n	8002ac0 <HAL_GPIO_Init+0x204>
 8002aae:	2307      	movs	r3, #7
 8002ab0:	e006      	b.n	8002ac0 <HAL_GPIO_Init+0x204>
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e004      	b.n	8002ac0 <HAL_GPIO_Init+0x204>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e002      	b.n	8002ac0 <HAL_GPIO_Init+0x204>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <HAL_GPIO_Init+0x204>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	f002 0203 	and.w	r2, r2, #3
 8002ac6:	0092      	lsls	r2, r2, #2
 8002ac8:	4093      	lsls	r3, r2
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ad0:	4935      	ldr	r1, [pc, #212]	; (8002ba8 <HAL_GPIO_Init+0x2ec>)
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	089b      	lsrs	r3, r3, #2
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ade:	4b38      	ldr	r3, [pc, #224]	; (8002bc0 <HAL_GPIO_Init+0x304>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b02:	4a2f      	ldr	r2, [pc, #188]	; (8002bc0 <HAL_GPIO_Init+0x304>)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b08:	4b2d      	ldr	r3, [pc, #180]	; (8002bc0 <HAL_GPIO_Init+0x304>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b2c:	4a24      	ldr	r2, [pc, #144]	; (8002bc0 <HAL_GPIO_Init+0x304>)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b32:	4b23      	ldr	r3, [pc, #140]	; (8002bc0 <HAL_GPIO_Init+0x304>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b56:	4a1a      	ldr	r2, [pc, #104]	; (8002bc0 <HAL_GPIO_Init+0x304>)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b5c:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <HAL_GPIO_Init+0x304>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b80:	4a0f      	ldr	r2, [pc, #60]	; (8002bc0 <HAL_GPIO_Init+0x304>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	2b0f      	cmp	r3, #15
 8002b90:	f67f aea2 	bls.w	80028d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop
 8002b98:	3724      	adds	r7, #36	; 0x24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40013800 	.word	0x40013800
 8002bac:	40020000 	.word	0x40020000
 8002bb0:	40020400 	.word	0x40020400
 8002bb4:	40020800 	.word	0x40020800
 8002bb8:	40020c00 	.word	0x40020c00
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40013c00 	.word	0x40013c00

08002bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	807b      	strh	r3, [r7, #2]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd4:	787b      	ldrb	r3, [r7, #1]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bda:	887a      	ldrh	r2, [r7, #2]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002be0:	e003      	b.n	8002bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002be2:	887b      	ldrh	r3, [r7, #2]
 8002be4:	041a      	lsls	r2, r3, #16
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	619a      	str	r2, [r3, #24]
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e12b      	b.n	8002e62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff fb14 	bl	800224c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2224      	movs	r2, #36	; 0x24
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c5c:	f001 fbe0 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 8002c60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4a81      	ldr	r2, [pc, #516]	; (8002e6c <HAL_I2C_Init+0x274>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d807      	bhi.n	8002c7c <HAL_I2C_Init+0x84>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a80      	ldr	r2, [pc, #512]	; (8002e70 <HAL_I2C_Init+0x278>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	bf94      	ite	ls
 8002c74:	2301      	movls	r3, #1
 8002c76:	2300      	movhi	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	e006      	b.n	8002c8a <HAL_I2C_Init+0x92>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4a7d      	ldr	r2, [pc, #500]	; (8002e74 <HAL_I2C_Init+0x27c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	bf94      	ite	ls
 8002c84:	2301      	movls	r3, #1
 8002c86:	2300      	movhi	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0e7      	b.n	8002e62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4a78      	ldr	r2, [pc, #480]	; (8002e78 <HAL_I2C_Init+0x280>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	0c9b      	lsrs	r3, r3, #18
 8002c9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4a6a      	ldr	r2, [pc, #424]	; (8002e6c <HAL_I2C_Init+0x274>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d802      	bhi.n	8002ccc <HAL_I2C_Init+0xd4>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	e009      	b.n	8002ce0 <HAL_I2C_Init+0xe8>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cd2:	fb02 f303 	mul.w	r3, r2, r3
 8002cd6:	4a69      	ldr	r2, [pc, #420]	; (8002e7c <HAL_I2C_Init+0x284>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	3301      	adds	r3, #1
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cf2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	495c      	ldr	r1, [pc, #368]	; (8002e6c <HAL_I2C_Init+0x274>)
 8002cfc:	428b      	cmp	r3, r1
 8002cfe:	d819      	bhi.n	8002d34 <HAL_I2C_Init+0x13c>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1e59      	subs	r1, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d0e:	1c59      	adds	r1, r3, #1
 8002d10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d14:	400b      	ands	r3, r1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_I2C_Init+0x138>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1e59      	subs	r1, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2e:	e051      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002d30:	2304      	movs	r3, #4
 8002d32:	e04f      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d111      	bne.n	8002d60 <HAL_I2C_Init+0x168>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1e58      	subs	r0, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	440b      	add	r3, r1
 8002d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e012      	b.n	8002d86 <HAL_I2C_Init+0x18e>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1e58      	subs	r0, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6859      	ldr	r1, [r3, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	0099      	lsls	r1, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d76:	3301      	adds	r3, #1
 8002d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf0c      	ite	eq
 8002d80:	2301      	moveq	r3, #1
 8002d82:	2300      	movne	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Init+0x196>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e022      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10e      	bne.n	8002db4 <HAL_I2C_Init+0x1bc>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1e58      	subs	r0, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	440b      	add	r3, r1
 8002da4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da8:	3301      	adds	r3, #1
 8002daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002db2:	e00f      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	1e58      	subs	r0, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6859      	ldr	r1, [r3, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	0099      	lsls	r1, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dca:	3301      	adds	r3, #1
 8002dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	6809      	ldr	r1, [r1, #0]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6911      	ldr	r1, [r2, #16]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68d2      	ldr	r2, [r2, #12]
 8002e0e:	4311      	orrs	r1, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	430b      	orrs	r3, r1
 8002e16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	000186a0 	.word	0x000186a0
 8002e70:	001e847f 	.word	0x001e847f
 8002e74:	003d08ff 	.word	0x003d08ff
 8002e78:	431bde83 	.word	0x431bde83
 8002e7c:	10624dd3 	.word	0x10624dd3

08002e80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	607a      	str	r2, [r7, #4]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	817b      	strh	r3, [r7, #10]
 8002e90:	4613      	mov	r3, r2
 8002e92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e94:	f7ff fbfc 	bl	8002690 <HAL_GetTick>
 8002e98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	f040 80e0 	bne.w	8003068 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	2319      	movs	r3, #25
 8002eae:	2201      	movs	r2, #1
 8002eb0:	4970      	ldr	r1, [pc, #448]	; (8003074 <HAL_I2C_Master_Transmit+0x1f4>)
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 fc66 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e0d3      	b.n	800306a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_I2C_Master_Transmit+0x50>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e0cc      	b.n	800306a <HAL_I2C_Master_Transmit+0x1ea>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d007      	beq.n	8002ef6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0201 	orr.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2221      	movs	r2, #33	; 0x21
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2210      	movs	r2, #16
 8002f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	893a      	ldrh	r2, [r7, #8]
 8002f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4a50      	ldr	r2, [pc, #320]	; (8003078 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f38:	8979      	ldrh	r1, [r7, #10]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	6a3a      	ldr	r2, [r7, #32]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 fad0 	bl	80034e4 <I2C_MasterRequestWrite>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e08d      	b.n	800306a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f64:	e066      	b.n	8003034 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	6a39      	ldr	r1, [r7, #32]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fce0 	bl	8003930 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00d      	beq.n	8002f92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d107      	bne.n	8002f8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e06b      	b.n	800306a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	781a      	ldrb	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d11b      	bne.n	8003008 <HAL_I2C_Master_Transmit+0x188>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d017      	beq.n	8003008 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	781a      	ldrb	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	6a39      	ldr	r1, [r7, #32]
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 fcd0 	bl	80039b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00d      	beq.n	8003034 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	2b04      	cmp	r3, #4
 800301e:	d107      	bne.n	8003030 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e01a      	b.n	800306a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003038:	2b00      	cmp	r3, #0
 800303a:	d194      	bne.n	8002f66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	e000      	b.n	800306a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003068:	2302      	movs	r3, #2
  }
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	00100002 	.word	0x00100002
 8003078:	ffff0000 	.word	0xffff0000

0800307c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08c      	sub	sp, #48	; 0x30
 8003080:	af02      	add	r7, sp, #8
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	607a      	str	r2, [r7, #4]
 8003086:	461a      	mov	r2, r3
 8003088:	460b      	mov	r3, r1
 800308a:	817b      	strh	r3, [r7, #10]
 800308c:	4613      	mov	r3, r2
 800308e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003090:	f7ff fafe 	bl	8002690 <HAL_GetTick>
 8003094:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b20      	cmp	r3, #32
 80030a0:	f040 820b 	bne.w	80034ba <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	2319      	movs	r3, #25
 80030aa:	2201      	movs	r2, #1
 80030ac:	497c      	ldr	r1, [pc, #496]	; (80032a0 <HAL_I2C_Master_Receive+0x224>)
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 fb68 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80030ba:	2302      	movs	r3, #2
 80030bc:	e1fe      	b.n	80034bc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_I2C_Master_Receive+0x50>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e1f7      	b.n	80034bc <HAL_I2C_Master_Receive+0x440>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d007      	beq.n	80030f2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 0201 	orr.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003100:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2222      	movs	r2, #34	; 0x22
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2210      	movs	r2, #16
 800310e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	893a      	ldrh	r2, [r7, #8]
 8003122:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4a5c      	ldr	r2, [pc, #368]	; (80032a4 <HAL_I2C_Master_Receive+0x228>)
 8003132:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003134:	8979      	ldrh	r1, [r7, #10]
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fa54 	bl	80035e8 <I2C_MasterRequestRead>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e1b8      	b.n	80034bc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314e:	2b00      	cmp	r3, #0
 8003150:	d113      	bne.n	800317a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003152:	2300      	movs	r3, #0
 8003154:	623b      	str	r3, [r7, #32]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	623b      	str	r3, [r7, #32]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	623b      	str	r3, [r7, #32]
 8003166:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	e18c      	b.n	8003494 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317e:	2b01      	cmp	r3, #1
 8003180:	d11b      	bne.n	80031ba <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003190:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	61fb      	str	r3, [r7, #28]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	e16c      	b.n	8003494 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d11b      	bne.n	80031fa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e2:	2300      	movs	r3, #0
 80031e4:	61bb      	str	r3, [r7, #24]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	e14c      	b.n	8003494 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003208:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003220:	e138      	b.n	8003494 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003226:	2b03      	cmp	r3, #3
 8003228:	f200 80f1 	bhi.w	800340e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003230:	2b01      	cmp	r3, #1
 8003232:	d123      	bne.n	800327c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003236:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 fbfb 	bl	8003a34 <I2C_WaitOnRXNEFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e139      	b.n	80034bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	855a      	strh	r2, [r3, #42]	; 0x2a
 800327a:	e10b      	b.n	8003494 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003280:	2b02      	cmp	r3, #2
 8003282:	d14e      	bne.n	8003322 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	2200      	movs	r2, #0
 800328c:	4906      	ldr	r1, [pc, #24]	; (80032a8 <HAL_I2C_Master_Receive+0x22c>)
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 fa78 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e10e      	b.n	80034bc <HAL_I2C_Master_Receive+0x440>
 800329e:	bf00      	nop
 80032a0:	00100002 	.word	0x00100002
 80032a4:	ffff0000 	.word	0xffff0000
 80032a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003320:	e0b8      	b.n	8003494 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003328:	2200      	movs	r2, #0
 800332a:	4966      	ldr	r1, [pc, #408]	; (80034c4 <HAL_I2C_Master_Receive+0x448>)
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 fa29 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0bf      	b.n	80034bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003374:	b29b      	uxth	r3, r3
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003384:	2200      	movs	r2, #0
 8003386:	494f      	ldr	r1, [pc, #316]	; (80034c4 <HAL_I2C_Master_Receive+0x448>)
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 f9fb 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e091      	b.n	80034bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	3b01      	subs	r3, #1
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800340c:	e042      	b.n	8003494 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800340e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003410:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 fb0e 	bl	8003a34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e04c      	b.n	80034bc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	2b04      	cmp	r3, #4
 8003460:	d118      	bne.n	8003494 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003498:	2b00      	cmp	r3, #0
 800349a:	f47f aec2 	bne.w	8003222 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	e000      	b.n	80034bc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80034ba:	2302      	movs	r3, #2
  }
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3728      	adds	r7, #40	; 0x28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	00010004 	.word	0x00010004

080034c8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d6:	b2db      	uxtb	r3, r3
}
 80034d8:	4618      	mov	r0, r3
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	460b      	mov	r3, r1
 80034f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d006      	beq.n	800350e <I2C_MasterRequestWrite+0x2a>
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d003      	beq.n	800350e <I2C_MasterRequestWrite+0x2a>
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800350c:	d108      	bne.n	8003520 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	e00b      	b.n	8003538 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	2b12      	cmp	r3, #18
 8003526:	d107      	bne.n	8003538 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003536:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f91d 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00d      	beq.n	800356c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355e:	d103      	bne.n	8003568 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003566:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e035      	b.n	80035d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003574:	d108      	bne.n	8003588 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003576:	897b      	ldrh	r3, [r7, #10]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003584:	611a      	str	r2, [r3, #16]
 8003586:	e01b      	b.n	80035c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003588:	897b      	ldrh	r3, [r7, #10]
 800358a:	11db      	asrs	r3, r3, #7
 800358c:	b2db      	uxtb	r3, r3
 800358e:	f003 0306 	and.w	r3, r3, #6
 8003592:	b2db      	uxtb	r3, r3
 8003594:	f063 030f 	orn	r3, r3, #15
 8003598:	b2da      	uxtb	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	490e      	ldr	r1, [pc, #56]	; (80035e0 <I2C_MasterRequestWrite+0xfc>)
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 f943 	bl	8003832 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e010      	b.n	80035d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035b6:	897b      	ldrh	r3, [r7, #10]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4907      	ldr	r1, [pc, #28]	; (80035e4 <I2C_MasterRequestWrite+0x100>)
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f933 	bl	8003832 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	00010008 	.word	0x00010008
 80035e4:	00010002 	.word	0x00010002

080035e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	460b      	mov	r3, r1
 80035f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800360c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2b08      	cmp	r3, #8
 8003612:	d006      	beq.n	8003622 <I2C_MasterRequestRead+0x3a>
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d003      	beq.n	8003622 <I2C_MasterRequestRead+0x3a>
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003620:	d108      	bne.n	8003634 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	e00b      	b.n	800364c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	2b11      	cmp	r3, #17
 800363a:	d107      	bne.n	800364c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800364a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 f893 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00d      	beq.n	8003680 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003672:	d103      	bne.n	800367c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800367a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e079      	b.n	8003774 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003688:	d108      	bne.n	800369c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800368a:	897b      	ldrh	r3, [r7, #10]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	b2da      	uxtb	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	611a      	str	r2, [r3, #16]
 800369a:	e05f      	b.n	800375c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800369c:	897b      	ldrh	r3, [r7, #10]
 800369e:	11db      	asrs	r3, r3, #7
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	f003 0306 	and.w	r3, r3, #6
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f063 030f 	orn	r3, r3, #15
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4930      	ldr	r1, [pc, #192]	; (800377c <I2C_MasterRequestRead+0x194>)
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f8b9 	bl	8003832 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e054      	b.n	8003774 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036ca:	897b      	ldrh	r3, [r7, #10]
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	4929      	ldr	r1, [pc, #164]	; (8003780 <I2C_MasterRequestRead+0x198>)
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 f8a9 	bl	8003832 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e044      	b.n	8003774 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800370e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f831 	bl	8003784 <I2C_WaitOnFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00d      	beq.n	8003744 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003736:	d103      	bne.n	8003740 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800373e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e017      	b.n	8003774 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003744:	897b      	ldrh	r3, [r7, #10]
 8003746:	11db      	asrs	r3, r3, #7
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f003 0306 	and.w	r3, r3, #6
 800374e:	b2db      	uxtb	r3, r3
 8003750:	f063 030e 	orn	r3, r3, #14
 8003754:	b2da      	uxtb	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	4907      	ldr	r1, [pc, #28]	; (8003780 <I2C_MasterRequestRead+0x198>)
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f865 	bl	8003832 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	00010008 	.word	0x00010008
 8003780:	00010002 	.word	0x00010002

08003784 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	4613      	mov	r3, r2
 8003792:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003794:	e025      	b.n	80037e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d021      	beq.n	80037e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379e:	f7fe ff77 	bl	8002690 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d302      	bcc.n	80037b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d116      	bne.n	80037e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f043 0220 	orr.w	r2, r3, #32
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e023      	b.n	800382a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	0c1b      	lsrs	r3, r3, #16
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d10d      	bne.n	8003808 <I2C_WaitOnFlagUntilTimeout+0x84>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	43da      	mvns	r2, r3
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4013      	ands	r3, r2
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bf0c      	ite	eq
 80037fe:	2301      	moveq	r3, #1
 8003800:	2300      	movne	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	461a      	mov	r2, r3
 8003806:	e00c      	b.n	8003822 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	43da      	mvns	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4013      	ands	r3, r2
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	bf0c      	ite	eq
 800381a:	2301      	moveq	r3, #1
 800381c:	2300      	movne	r3, #0
 800381e:	b2db      	uxtb	r3, r3
 8003820:	461a      	mov	r2, r3
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	429a      	cmp	r2, r3
 8003826:	d0b6      	beq.n	8003796 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
 800383e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003840:	e051      	b.n	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003850:	d123      	bne.n	800389a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003860:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800386a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	f043 0204 	orr.w	r2, r3, #4
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e046      	b.n	8003928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d021      	beq.n	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a2:	f7fe fef5 	bl	8002690 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d302      	bcc.n	80038b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d116      	bne.n	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f043 0220 	orr.w	r2, r3, #32
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e020      	b.n	8003928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	0c1b      	lsrs	r3, r3, #16
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d10c      	bne.n	800390a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	43da      	mvns	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4013      	ands	r3, r2
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	bf14      	ite	ne
 8003902:	2301      	movne	r3, #1
 8003904:	2300      	moveq	r3, #0
 8003906:	b2db      	uxtb	r3, r3
 8003908:	e00b      	b.n	8003922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	43da      	mvns	r2, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	4013      	ands	r3, r2
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf14      	ite	ne
 800391c:	2301      	movne	r3, #1
 800391e:	2300      	moveq	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d18d      	bne.n	8003842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800393c:	e02d      	b.n	800399a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f8ce 	bl	8003ae0 <I2C_IsAcknowledgeFailed>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e02d      	b.n	80039aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d021      	beq.n	800399a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003956:	f7fe fe9b 	bl	8002690 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	429a      	cmp	r2, r3
 8003964:	d302      	bcc.n	800396c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d116      	bne.n	800399a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f043 0220 	orr.w	r2, r3, #32
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e007      	b.n	80039aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a4:	2b80      	cmp	r3, #128	; 0x80
 80039a6:	d1ca      	bne.n	800393e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039be:	e02d      	b.n	8003a1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f88d 	bl	8003ae0 <I2C_IsAcknowledgeFailed>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e02d      	b.n	8003a2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d6:	d021      	beq.n	8003a1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d8:	f7fe fe5a 	bl	8002690 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d302      	bcc.n	80039ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d116      	bne.n	8003a1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	f043 0220 	orr.w	r2, r3, #32
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e007      	b.n	8003a2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d1ca      	bne.n	80039c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a40:	e042      	b.n	8003ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b10      	cmp	r3, #16
 8003a4e:	d119      	bne.n	8003a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0210 	mvn.w	r2, #16
 8003a58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e029      	b.n	8003ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a84:	f7fe fe04 	bl	8002690 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d302      	bcc.n	8003a9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d116      	bne.n	8003ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	f043 0220 	orr.w	r2, r3, #32
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e007      	b.n	8003ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad2:	2b40      	cmp	r3, #64	; 0x40
 8003ad4:	d1b5      	bne.n	8003a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af6:	d11b      	bne.n	8003b30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	f043 0204 	orr.w	r2, r3, #4
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
	...

08003b40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e267      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d075      	beq.n	8003c4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b5e:	4b88      	ldr	r3, [pc, #544]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d00c      	beq.n	8003b84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b6a:	4b85      	ldr	r3, [pc, #532]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d112      	bne.n	8003b9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b76:	4b82      	ldr	r3, [pc, #520]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b82:	d10b      	bne.n	8003b9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b84:	4b7e      	ldr	r3, [pc, #504]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d05b      	beq.n	8003c48 <HAL_RCC_OscConfig+0x108>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d157      	bne.n	8003c48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e242      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba4:	d106      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x74>
 8003ba6:	4b76      	ldr	r3, [pc, #472]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a75      	ldr	r2, [pc, #468]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	e01d      	b.n	8003bf0 <HAL_RCC_OscConfig+0xb0>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x98>
 8003bbe:	4b70      	ldr	r3, [pc, #448]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a6f      	ldr	r2, [pc, #444]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	4b6d      	ldr	r3, [pc, #436]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a6c      	ldr	r2, [pc, #432]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCC_OscConfig+0xb0>
 8003bd8:	4b69      	ldr	r3, [pc, #420]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a68      	ldr	r2, [pc, #416]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	4b66      	ldr	r3, [pc, #408]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a65      	ldr	r2, [pc, #404]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d013      	beq.n	8003c20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7fe fd4a 	bl	8002690 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c00:	f7fe fd46 	bl	8002690 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b64      	cmp	r3, #100	; 0x64
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e207      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c12:	4b5b      	ldr	r3, [pc, #364]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0xc0>
 8003c1e:	e014      	b.n	8003c4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c20:	f7fe fd36 	bl	8002690 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c28:	f7fe fd32 	bl	8002690 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b64      	cmp	r3, #100	; 0x64
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e1f3      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3a:	4b51      	ldr	r3, [pc, #324]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0xe8>
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d063      	beq.n	8003d1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c56:	4b4a      	ldr	r3, [pc, #296]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00b      	beq.n	8003c7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c62:	4b47      	ldr	r3, [pc, #284]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d11c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c6e:	4b44      	ldr	r3, [pc, #272]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d116      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7a:	4b41      	ldr	r3, [pc, #260]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d005      	beq.n	8003c92 <HAL_RCC_OscConfig+0x152>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e1c7      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c92:	4b3b      	ldr	r3, [pc, #236]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4937      	ldr	r1, [pc, #220]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca6:	e03a      	b.n	8003d1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d020      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cb0:	4b34      	ldr	r3, [pc, #208]	; (8003d84 <HAL_RCC_OscConfig+0x244>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb6:	f7fe fceb 	bl	8002690 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cbe:	f7fe fce7 	bl	8002690 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e1a8      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd0:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cdc:	4b28      	ldr	r3, [pc, #160]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4925      	ldr	r1, [pc, #148]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	600b      	str	r3, [r1, #0]
 8003cf0:	e015      	b.n	8003d1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cf2:	4b24      	ldr	r3, [pc, #144]	; (8003d84 <HAL_RCC_OscConfig+0x244>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fe fcca 	bl	8002690 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d00:	f7fe fcc6 	bl	8002690 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e187      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d12:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d036      	beq.n	8003d98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d016      	beq.n	8003d60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d32:	4b15      	ldr	r3, [pc, #84]	; (8003d88 <HAL_RCC_OscConfig+0x248>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d38:	f7fe fcaa 	bl	8002690 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d40:	f7fe fca6 	bl	8002690 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e167      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d52:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCC_OscConfig+0x240>)
 8003d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0x200>
 8003d5e:	e01b      	b.n	8003d98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d60:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <HAL_RCC_OscConfig+0x248>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d66:	f7fe fc93 	bl	8002690 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d6c:	e00e      	b.n	8003d8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d6e:	f7fe fc8f 	bl	8002690 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d907      	bls.n	8003d8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e150      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
 8003d80:	40023800 	.word	0x40023800
 8003d84:	42470000 	.word	0x42470000
 8003d88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d8c:	4b88      	ldr	r3, [pc, #544]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1ea      	bne.n	8003d6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 8097 	beq.w	8003ed4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003da6:	2300      	movs	r3, #0
 8003da8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003daa:	4b81      	ldr	r3, [pc, #516]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10f      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db6:	2300      	movs	r3, #0
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	4b7d      	ldr	r3, [pc, #500]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	4a7c      	ldr	r2, [pc, #496]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc6:	4b7a      	ldr	r3, [pc, #488]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd6:	4b77      	ldr	r3, [pc, #476]	; (8003fb4 <HAL_RCC_OscConfig+0x474>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d118      	bne.n	8003e14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003de2:	4b74      	ldr	r3, [pc, #464]	; (8003fb4 <HAL_RCC_OscConfig+0x474>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a73      	ldr	r2, [pc, #460]	; (8003fb4 <HAL_RCC_OscConfig+0x474>)
 8003de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dee:	f7fe fc4f 	bl	8002690 <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df4:	e008      	b.n	8003e08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df6:	f7fe fc4b 	bl	8002690 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e10c      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e08:	4b6a      	ldr	r3, [pc, #424]	; (8003fb4 <HAL_RCC_OscConfig+0x474>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0f0      	beq.n	8003df6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d106      	bne.n	8003e2a <HAL_RCC_OscConfig+0x2ea>
 8003e1c:	4b64      	ldr	r3, [pc, #400]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e20:	4a63      	ldr	r2, [pc, #396]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	6713      	str	r3, [r2, #112]	; 0x70
 8003e28:	e01c      	b.n	8003e64 <HAL_RCC_OscConfig+0x324>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2b05      	cmp	r3, #5
 8003e30:	d10c      	bne.n	8003e4c <HAL_RCC_OscConfig+0x30c>
 8003e32:	4b5f      	ldr	r3, [pc, #380]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e36:	4a5e      	ldr	r2, [pc, #376]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e38:	f043 0304 	orr.w	r3, r3, #4
 8003e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3e:	4b5c      	ldr	r3, [pc, #368]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	4a5b      	ldr	r2, [pc, #364]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4a:	e00b      	b.n	8003e64 <HAL_RCC_OscConfig+0x324>
 8003e4c:	4b58      	ldr	r3, [pc, #352]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e50:	4a57      	ldr	r2, [pc, #348]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	6713      	str	r3, [r2, #112]	; 0x70
 8003e58:	4b55      	ldr	r3, [pc, #340]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	4a54      	ldr	r2, [pc, #336]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e5e:	f023 0304 	bic.w	r3, r3, #4
 8003e62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d015      	beq.n	8003e98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6c:	f7fe fc10 	bl	8002690 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e72:	e00a      	b.n	8003e8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e74:	f7fe fc0c 	bl	8002690 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e0cb      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8a:	4b49      	ldr	r3, [pc, #292]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0ee      	beq.n	8003e74 <HAL_RCC_OscConfig+0x334>
 8003e96:	e014      	b.n	8003ec2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e98:	f7fe fbfa 	bl	8002690 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e9e:	e00a      	b.n	8003eb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea0:	f7fe fbf6 	bl	8002690 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e0b5      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb6:	4b3e      	ldr	r3, [pc, #248]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1ee      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ec2:	7dfb      	ldrb	r3, [r7, #23]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d105      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec8:	4b39      	ldr	r3, [pc, #228]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	4a38      	ldr	r2, [pc, #224]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80a1 	beq.w	8004020 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ede:	4b34      	ldr	r3, [pc, #208]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 030c 	and.w	r3, r3, #12
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d05c      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d141      	bne.n	8003f76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef2:	4b31      	ldr	r3, [pc, #196]	; (8003fb8 <HAL_RCC_OscConfig+0x478>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7fe fbca 	bl	8002690 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f00:	f7fe fbc6 	bl	8002690 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e087      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f12:	4b27      	ldr	r3, [pc, #156]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69da      	ldr	r2, [r3, #28]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	019b      	lsls	r3, r3, #6
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f34:	085b      	lsrs	r3, r3, #1
 8003f36:	3b01      	subs	r3, #1
 8003f38:	041b      	lsls	r3, r3, #16
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	061b      	lsls	r3, r3, #24
 8003f42:	491b      	ldr	r1, [pc, #108]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f48:	4b1b      	ldr	r3, [pc, #108]	; (8003fb8 <HAL_RCC_OscConfig+0x478>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4e:	f7fe fb9f 	bl	8002690 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f56:	f7fe fb9b 	bl	8002690 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e05c      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f68:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f0      	beq.n	8003f56 <HAL_RCC_OscConfig+0x416>
 8003f74:	e054      	b.n	8004020 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f76:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <HAL_RCC_OscConfig+0x478>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7fe fb88 	bl	8002690 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f84:	f7fe fb84 	bl	8002690 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e045      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f96:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <HAL_RCC_OscConfig+0x470>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x444>
 8003fa2:	e03d      	b.n	8004020 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d107      	bne.n	8003fbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e038      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	40007000 	.word	0x40007000
 8003fb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fbc:	4b1b      	ldr	r3, [pc, #108]	; (800402c <HAL_RCC_OscConfig+0x4ec>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d028      	beq.n	800401c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d121      	bne.n	800401c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d11a      	bne.n	800401c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fec:	4013      	ands	r3, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ff2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d111      	bne.n	800401c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004002:	085b      	lsrs	r3, r3, #1
 8004004:	3b01      	subs	r3, #1
 8004006:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d107      	bne.n	800401c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40023800 	.word	0x40023800

08004030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0cc      	b.n	80041de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004044:	4b68      	ldr	r3, [pc, #416]	; (80041e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d90c      	bls.n	800406c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004052:	4b65      	ldr	r3, [pc, #404]	; (80041e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800405a:	4b63      	ldr	r3, [pc, #396]	; (80041e8 <HAL_RCC_ClockConfig+0x1b8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0b8      	b.n	80041de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d020      	beq.n	80040ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004084:	4b59      	ldr	r3, [pc, #356]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	4a58      	ldr	r2, [pc, #352]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800408e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800409c:	4b53      	ldr	r3, [pc, #332]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	4a52      	ldr	r2, [pc, #328]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a8:	4b50      	ldr	r3, [pc, #320]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	494d      	ldr	r1, [pc, #308]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d044      	beq.n	8004150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d107      	bne.n	80040de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ce:	4b47      	ldr	r3, [pc, #284]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d119      	bne.n	800410e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e07f      	b.n	80041de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d003      	beq.n	80040ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d107      	bne.n	80040fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ee:	4b3f      	ldr	r3, [pc, #252]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e06f      	b.n	80041de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fe:	4b3b      	ldr	r3, [pc, #236]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e067      	b.n	80041de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800410e:	4b37      	ldr	r3, [pc, #220]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f023 0203 	bic.w	r2, r3, #3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	4934      	ldr	r1, [pc, #208]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 800411c:	4313      	orrs	r3, r2
 800411e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004120:	f7fe fab6 	bl	8002690 <HAL_GetTick>
 8004124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004126:	e00a      	b.n	800413e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004128:	f7fe fab2 	bl	8002690 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	f241 3288 	movw	r2, #5000	; 0x1388
 8004136:	4293      	cmp	r3, r2
 8004138:	d901      	bls.n	800413e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e04f      	b.n	80041de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413e:	4b2b      	ldr	r3, [pc, #172]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 020c 	and.w	r2, r3, #12
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	429a      	cmp	r2, r3
 800414e:	d1eb      	bne.n	8004128 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004150:	4b25      	ldr	r3, [pc, #148]	; (80041e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d20c      	bcs.n	8004178 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415e:	4b22      	ldr	r3, [pc, #136]	; (80041e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004166:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e032      	b.n	80041de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004184:	4b19      	ldr	r3, [pc, #100]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	4916      	ldr	r1, [pc, #88]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	4313      	orrs	r3, r2
 8004194:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041a2:	4b12      	ldr	r3, [pc, #72]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	490e      	ldr	r1, [pc, #56]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041b6:	f000 f821 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 80041ba:	4602      	mov	r2, r0
 80041bc:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	091b      	lsrs	r3, r3, #4
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	490a      	ldr	r1, [pc, #40]	; (80041f0 <HAL_RCC_ClockConfig+0x1c0>)
 80041c8:	5ccb      	ldrb	r3, [r1, r3]
 80041ca:	fa22 f303 	lsr.w	r3, r2, r3
 80041ce:	4a09      	ldr	r2, [pc, #36]	; (80041f4 <HAL_RCC_ClockConfig+0x1c4>)
 80041d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041d2:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fe fa16 	bl	8002608 <HAL_InitTick>

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40023c00 	.word	0x40023c00
 80041ec:	40023800 	.word	0x40023800
 80041f0:	08006694 	.word	0x08006694
 80041f4:	2000000c 	.word	0x2000000c
 80041f8:	20000010 	.word	0x20000010

080041fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004200:	b094      	sub	sp, #80	; 0x50
 8004202:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	647b      	str	r3, [r7, #68]	; 0x44
 8004208:	2300      	movs	r3, #0
 800420a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800420c:	2300      	movs	r3, #0
 800420e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004214:	4b79      	ldr	r3, [pc, #484]	; (80043fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 030c 	and.w	r3, r3, #12
 800421c:	2b08      	cmp	r3, #8
 800421e:	d00d      	beq.n	800423c <HAL_RCC_GetSysClockFreq+0x40>
 8004220:	2b08      	cmp	r3, #8
 8004222:	f200 80e1 	bhi.w	80043e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_RCC_GetSysClockFreq+0x34>
 800422a:	2b04      	cmp	r3, #4
 800422c:	d003      	beq.n	8004236 <HAL_RCC_GetSysClockFreq+0x3a>
 800422e:	e0db      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004230:	4b73      	ldr	r3, [pc, #460]	; (8004400 <HAL_RCC_GetSysClockFreq+0x204>)
 8004232:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004234:	e0db      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004236:	4b73      	ldr	r3, [pc, #460]	; (8004404 <HAL_RCC_GetSysClockFreq+0x208>)
 8004238:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800423a:	e0d8      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800423c:	4b6f      	ldr	r3, [pc, #444]	; (80043fc <HAL_RCC_GetSysClockFreq+0x200>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004244:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004246:	4b6d      	ldr	r3, [pc, #436]	; (80043fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d063      	beq.n	800431a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004252:	4b6a      	ldr	r3, [pc, #424]	; (80043fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	099b      	lsrs	r3, r3, #6
 8004258:	2200      	movs	r2, #0
 800425a:	63bb      	str	r3, [r7, #56]	; 0x38
 800425c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800425e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004264:	633b      	str	r3, [r7, #48]	; 0x30
 8004266:	2300      	movs	r3, #0
 8004268:	637b      	str	r3, [r7, #52]	; 0x34
 800426a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800426e:	4622      	mov	r2, r4
 8004270:	462b      	mov	r3, r5
 8004272:	f04f 0000 	mov.w	r0, #0
 8004276:	f04f 0100 	mov.w	r1, #0
 800427a:	0159      	lsls	r1, r3, #5
 800427c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004280:	0150      	lsls	r0, r2, #5
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4621      	mov	r1, r4
 8004288:	1a51      	subs	r1, r2, r1
 800428a:	6139      	str	r1, [r7, #16]
 800428c:	4629      	mov	r1, r5
 800428e:	eb63 0301 	sbc.w	r3, r3, r1
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042a0:	4659      	mov	r1, fp
 80042a2:	018b      	lsls	r3, r1, #6
 80042a4:	4651      	mov	r1, sl
 80042a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042aa:	4651      	mov	r1, sl
 80042ac:	018a      	lsls	r2, r1, #6
 80042ae:	4651      	mov	r1, sl
 80042b0:	ebb2 0801 	subs.w	r8, r2, r1
 80042b4:	4659      	mov	r1, fp
 80042b6:	eb63 0901 	sbc.w	r9, r3, r1
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ce:	4690      	mov	r8, r2
 80042d0:	4699      	mov	r9, r3
 80042d2:	4623      	mov	r3, r4
 80042d4:	eb18 0303 	adds.w	r3, r8, r3
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	462b      	mov	r3, r5
 80042dc:	eb49 0303 	adc.w	r3, r9, r3
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042ee:	4629      	mov	r1, r5
 80042f0:	024b      	lsls	r3, r1, #9
 80042f2:	4621      	mov	r1, r4
 80042f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042f8:	4621      	mov	r1, r4
 80042fa:	024a      	lsls	r2, r1, #9
 80042fc:	4610      	mov	r0, r2
 80042fe:	4619      	mov	r1, r3
 8004300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004302:	2200      	movs	r2, #0
 8004304:	62bb      	str	r3, [r7, #40]	; 0x28
 8004306:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004308:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800430c:	f7fc fc66 	bl	8000bdc <__aeabi_uldivmod>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4613      	mov	r3, r2
 8004316:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004318:	e058      	b.n	80043cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800431a:	4b38      	ldr	r3, [pc, #224]	; (80043fc <HAL_RCC_GetSysClockFreq+0x200>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	099b      	lsrs	r3, r3, #6
 8004320:	2200      	movs	r2, #0
 8004322:	4618      	mov	r0, r3
 8004324:	4611      	mov	r1, r2
 8004326:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800432a:	623b      	str	r3, [r7, #32]
 800432c:	2300      	movs	r3, #0
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
 8004330:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004334:	4642      	mov	r2, r8
 8004336:	464b      	mov	r3, r9
 8004338:	f04f 0000 	mov.w	r0, #0
 800433c:	f04f 0100 	mov.w	r1, #0
 8004340:	0159      	lsls	r1, r3, #5
 8004342:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004346:	0150      	lsls	r0, r2, #5
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4641      	mov	r1, r8
 800434e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004352:	4649      	mov	r1, r9
 8004354:	eb63 0b01 	sbc.w	fp, r3, r1
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004364:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004368:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800436c:	ebb2 040a 	subs.w	r4, r2, sl
 8004370:	eb63 050b 	sbc.w	r5, r3, fp
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	f04f 0300 	mov.w	r3, #0
 800437c:	00eb      	lsls	r3, r5, #3
 800437e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004382:	00e2      	lsls	r2, r4, #3
 8004384:	4614      	mov	r4, r2
 8004386:	461d      	mov	r5, r3
 8004388:	4643      	mov	r3, r8
 800438a:	18e3      	adds	r3, r4, r3
 800438c:	603b      	str	r3, [r7, #0]
 800438e:	464b      	mov	r3, r9
 8004390:	eb45 0303 	adc.w	r3, r5, r3
 8004394:	607b      	str	r3, [r7, #4]
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	f04f 0300 	mov.w	r3, #0
 800439e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043a2:	4629      	mov	r1, r5
 80043a4:	028b      	lsls	r3, r1, #10
 80043a6:	4621      	mov	r1, r4
 80043a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043ac:	4621      	mov	r1, r4
 80043ae:	028a      	lsls	r2, r1, #10
 80043b0:	4610      	mov	r0, r2
 80043b2:	4619      	mov	r1, r3
 80043b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043b6:	2200      	movs	r2, #0
 80043b8:	61bb      	str	r3, [r7, #24]
 80043ba:	61fa      	str	r2, [r7, #28]
 80043bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c0:	f7fc fc0c 	bl	8000bdc <__aeabi_uldivmod>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4613      	mov	r3, r2
 80043ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043cc:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <HAL_RCC_GetSysClockFreq+0x200>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	0c1b      	lsrs	r3, r3, #16
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	3301      	adds	r3, #1
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80043dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043e6:	e002      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <HAL_RCC_GetSysClockFreq+0x204>)
 80043ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3750      	adds	r7, #80	; 0x50
 80043f4:	46bd      	mov	sp, r7
 80043f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043fa:	bf00      	nop
 80043fc:	40023800 	.word	0x40023800
 8004400:	00f42400 	.word	0x00f42400
 8004404:	007a1200 	.word	0x007a1200

08004408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800440c:	4b03      	ldr	r3, [pc, #12]	; (800441c <HAL_RCC_GetHCLKFreq+0x14>)
 800440e:	681b      	ldr	r3, [r3, #0]
}
 8004410:	4618      	mov	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	2000000c 	.word	0x2000000c

08004420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004424:	f7ff fff0 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8004428:	4602      	mov	r2, r0
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	0a9b      	lsrs	r3, r3, #10
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	4903      	ldr	r1, [pc, #12]	; (8004444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004436:	5ccb      	ldrb	r3, [r1, r3]
 8004438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800443c:	4618      	mov	r0, r3
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40023800 	.word	0x40023800
 8004444:	080066a4 	.word	0x080066a4

08004448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800444c:	f7ff ffdc 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8004450:	4602      	mov	r2, r0
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	0b5b      	lsrs	r3, r3, #13
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	4903      	ldr	r1, [pc, #12]	; (800446c <HAL_RCC_GetPCLK2Freq+0x24>)
 800445e:	5ccb      	ldrb	r3, [r1, r3]
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004464:	4618      	mov	r0, r3
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40023800 	.word	0x40023800
 800446c:	080066a4 	.word	0x080066a4

08004470 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e03f      	b.n	8004502 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d106      	bne.n	800449c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7fd ff20 	bl	80022dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2224      	movs	r2, #36	; 0x24
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f929 	bl	800470c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695a      	ldr	r2, [r3, #20]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b08a      	sub	sp, #40	; 0x28
 800450e:	af02      	add	r7, sp, #8
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	603b      	str	r3, [r7, #0]
 8004516:	4613      	mov	r3, r2
 8004518:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800451a:	2300      	movs	r3, #0
 800451c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b20      	cmp	r3, #32
 8004528:	d17c      	bne.n	8004624 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <HAL_UART_Transmit+0x2c>
 8004530:	88fb      	ldrh	r3, [r7, #6]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e075      	b.n	8004626 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_UART_Transmit+0x3e>
 8004544:	2302      	movs	r3, #2
 8004546:	e06e      	b.n	8004626 <HAL_UART_Transmit+0x11c>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2221      	movs	r2, #33	; 0x21
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800455e:	f7fe f897 	bl	8002690 <HAL_GetTick>
 8004562:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	88fa      	ldrh	r2, [r7, #6]
 8004568:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	88fa      	ldrh	r2, [r7, #6]
 800456e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004578:	d108      	bne.n	800458c <HAL_UART_Transmit+0x82>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d104      	bne.n	800458c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004582:	2300      	movs	r3, #0
 8004584:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	e003      	b.n	8004594 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004590:	2300      	movs	r3, #0
 8004592:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800459c:	e02a      	b.n	80045f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2200      	movs	r2, #0
 80045a6:	2180      	movs	r1, #128	; 0x80
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f840 	bl	800462e <UART_WaitOnFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e036      	b.n	8004626 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	3302      	adds	r3, #2
 80045d2:	61bb      	str	r3, [r7, #24]
 80045d4:	e007      	b.n	80045e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	781a      	ldrb	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	3301      	adds	r3, #1
 80045e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1cf      	bne.n	800459e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2200      	movs	r2, #0
 8004606:	2140      	movs	r1, #64	; 0x40
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 f810 	bl	800462e <UART_WaitOnFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e006      	b.n	8004626 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	e000      	b.n	8004626 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004624:	2302      	movs	r3, #2
  }
}
 8004626:	4618      	mov	r0, r3
 8004628:	3720      	adds	r7, #32
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b090      	sub	sp, #64	; 0x40
 8004632:	af00      	add	r7, sp, #0
 8004634:	60f8      	str	r0, [r7, #12]
 8004636:	60b9      	str	r1, [r7, #8]
 8004638:	603b      	str	r3, [r7, #0]
 800463a:	4613      	mov	r3, r2
 800463c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800463e:	e050      	b.n	80046e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004646:	d04c      	beq.n	80046e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800464a:	2b00      	cmp	r3, #0
 800464c:	d007      	beq.n	800465e <UART_WaitOnFlagUntilTimeout+0x30>
 800464e:	f7fe f81f 	bl	8002690 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800465a:	429a      	cmp	r2, r3
 800465c:	d241      	bcs.n	80046e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	330c      	adds	r3, #12
 8004664:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004668:	e853 3f00 	ldrex	r3, [r3]
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	330c      	adds	r3, #12
 800467c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800467e:	637a      	str	r2, [r7, #52]	; 0x34
 8004680:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004684:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004686:	e841 2300 	strex	r3, r2, [r1]
 800468a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800468c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e5      	bne.n	800465e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3314      	adds	r3, #20
 8004698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	613b      	str	r3, [r7, #16]
   return(result);
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f023 0301 	bic.w	r3, r3, #1
 80046a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3314      	adds	r3, #20
 80046b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046b2:	623a      	str	r2, [r7, #32]
 80046b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	69f9      	ldr	r1, [r7, #28]
 80046b8:	6a3a      	ldr	r2, [r7, #32]
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	61bb      	str	r3, [r7, #24]
   return(result);
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1e5      	bne.n	8004692 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e00f      	b.n	8004702 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	4013      	ands	r3, r2
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	bf0c      	ite	eq
 80046f2:	2301      	moveq	r3, #1
 80046f4:	2300      	movne	r3, #0
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	461a      	mov	r2, r3
 80046fa:	79fb      	ldrb	r3, [r7, #7]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d09f      	beq.n	8004640 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3740      	adds	r7, #64	; 0x40
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800470c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004710:	b0c0      	sub	sp, #256	; 0x100
 8004712:	af00      	add	r7, sp, #0
 8004714:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004728:	68d9      	ldr	r1, [r3, #12]
 800472a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	ea40 0301 	orr.w	r3, r0, r1
 8004734:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	431a      	orrs	r2, r3
 8004744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	431a      	orrs	r2, r3
 800474c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004764:	f021 010c 	bic.w	r1, r1, #12
 8004768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004772:	430b      	orrs	r3, r1
 8004774:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004786:	6999      	ldr	r1, [r3, #24]
 8004788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	ea40 0301 	orr.w	r3, r0, r1
 8004792:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	4b8f      	ldr	r3, [pc, #572]	; (80049d8 <UART_SetConfig+0x2cc>)
 800479c:	429a      	cmp	r2, r3
 800479e:	d005      	beq.n	80047ac <UART_SetConfig+0xa0>
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	4b8d      	ldr	r3, [pc, #564]	; (80049dc <UART_SetConfig+0x2d0>)
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d104      	bne.n	80047b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047ac:	f7ff fe4c 	bl	8004448 <HAL_RCC_GetPCLK2Freq>
 80047b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047b4:	e003      	b.n	80047be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047b6:	f7ff fe33 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 80047ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c8:	f040 810c 	bne.w	80049e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047d0:	2200      	movs	r2, #0
 80047d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047de:	4622      	mov	r2, r4
 80047e0:	462b      	mov	r3, r5
 80047e2:	1891      	adds	r1, r2, r2
 80047e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80047e6:	415b      	adcs	r3, r3
 80047e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047ee:	4621      	mov	r1, r4
 80047f0:	eb12 0801 	adds.w	r8, r2, r1
 80047f4:	4629      	mov	r1, r5
 80047f6:	eb43 0901 	adc.w	r9, r3, r1
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004806:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800480a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800480e:	4690      	mov	r8, r2
 8004810:	4699      	mov	r9, r3
 8004812:	4623      	mov	r3, r4
 8004814:	eb18 0303 	adds.w	r3, r8, r3
 8004818:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800481c:	462b      	mov	r3, r5
 800481e:	eb49 0303 	adc.w	r3, r9, r3
 8004822:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004832:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004836:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800483a:	460b      	mov	r3, r1
 800483c:	18db      	adds	r3, r3, r3
 800483e:	653b      	str	r3, [r7, #80]	; 0x50
 8004840:	4613      	mov	r3, r2
 8004842:	eb42 0303 	adc.w	r3, r2, r3
 8004846:	657b      	str	r3, [r7, #84]	; 0x54
 8004848:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800484c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004850:	f7fc f9c4 	bl	8000bdc <__aeabi_uldivmod>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4b61      	ldr	r3, [pc, #388]	; (80049e0 <UART_SetConfig+0x2d4>)
 800485a:	fba3 2302 	umull	r2, r3, r3, r2
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	011c      	lsls	r4, r3, #4
 8004862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004866:	2200      	movs	r2, #0
 8004868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800486c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004870:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004874:	4642      	mov	r2, r8
 8004876:	464b      	mov	r3, r9
 8004878:	1891      	adds	r1, r2, r2
 800487a:	64b9      	str	r1, [r7, #72]	; 0x48
 800487c:	415b      	adcs	r3, r3
 800487e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004880:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004884:	4641      	mov	r1, r8
 8004886:	eb12 0a01 	adds.w	sl, r2, r1
 800488a:	4649      	mov	r1, r9
 800488c:	eb43 0b01 	adc.w	fp, r3, r1
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800489c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048a4:	4692      	mov	sl, r2
 80048a6:	469b      	mov	fp, r3
 80048a8:	4643      	mov	r3, r8
 80048aa:	eb1a 0303 	adds.w	r3, sl, r3
 80048ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048b2:	464b      	mov	r3, r9
 80048b4:	eb4b 0303 	adc.w	r3, fp, r3
 80048b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80048cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048d0:	460b      	mov	r3, r1
 80048d2:	18db      	adds	r3, r3, r3
 80048d4:	643b      	str	r3, [r7, #64]	; 0x40
 80048d6:	4613      	mov	r3, r2
 80048d8:	eb42 0303 	adc.w	r3, r2, r3
 80048dc:	647b      	str	r3, [r7, #68]	; 0x44
 80048de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048e6:	f7fc f979 	bl	8000bdc <__aeabi_uldivmod>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	4611      	mov	r1, r2
 80048f0:	4b3b      	ldr	r3, [pc, #236]	; (80049e0 <UART_SetConfig+0x2d4>)
 80048f2:	fba3 2301 	umull	r2, r3, r3, r1
 80048f6:	095b      	lsrs	r3, r3, #5
 80048f8:	2264      	movs	r2, #100	; 0x64
 80048fa:	fb02 f303 	mul.w	r3, r2, r3
 80048fe:	1acb      	subs	r3, r1, r3
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004906:	4b36      	ldr	r3, [pc, #216]	; (80049e0 <UART_SetConfig+0x2d4>)
 8004908:	fba3 2302 	umull	r2, r3, r3, r2
 800490c:	095b      	lsrs	r3, r3, #5
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004914:	441c      	add	r4, r3
 8004916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800491a:	2200      	movs	r2, #0
 800491c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004920:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004924:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004928:	4642      	mov	r2, r8
 800492a:	464b      	mov	r3, r9
 800492c:	1891      	adds	r1, r2, r2
 800492e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004930:	415b      	adcs	r3, r3
 8004932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004934:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004938:	4641      	mov	r1, r8
 800493a:	1851      	adds	r1, r2, r1
 800493c:	6339      	str	r1, [r7, #48]	; 0x30
 800493e:	4649      	mov	r1, r9
 8004940:	414b      	adcs	r3, r1
 8004942:	637b      	str	r3, [r7, #52]	; 0x34
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004950:	4659      	mov	r1, fp
 8004952:	00cb      	lsls	r3, r1, #3
 8004954:	4651      	mov	r1, sl
 8004956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800495a:	4651      	mov	r1, sl
 800495c:	00ca      	lsls	r2, r1, #3
 800495e:	4610      	mov	r0, r2
 8004960:	4619      	mov	r1, r3
 8004962:	4603      	mov	r3, r0
 8004964:	4642      	mov	r2, r8
 8004966:	189b      	adds	r3, r3, r2
 8004968:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800496c:	464b      	mov	r3, r9
 800496e:	460a      	mov	r2, r1
 8004970:	eb42 0303 	adc.w	r3, r2, r3
 8004974:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004984:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004988:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800498c:	460b      	mov	r3, r1
 800498e:	18db      	adds	r3, r3, r3
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28
 8004992:	4613      	mov	r3, r2
 8004994:	eb42 0303 	adc.w	r3, r2, r3
 8004998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800499a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800499e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049a2:	f7fc f91b 	bl	8000bdc <__aeabi_uldivmod>
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4b0d      	ldr	r3, [pc, #52]	; (80049e0 <UART_SetConfig+0x2d4>)
 80049ac:	fba3 1302 	umull	r1, r3, r3, r2
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	2164      	movs	r1, #100	; 0x64
 80049b4:	fb01 f303 	mul.w	r3, r1, r3
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	3332      	adds	r3, #50	; 0x32
 80049be:	4a08      	ldr	r2, [pc, #32]	; (80049e0 <UART_SetConfig+0x2d4>)
 80049c0:	fba2 2303 	umull	r2, r3, r2, r3
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	f003 0207 	and.w	r2, r3, #7
 80049ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4422      	add	r2, r4
 80049d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049d4:	e106      	b.n	8004be4 <UART_SetConfig+0x4d8>
 80049d6:	bf00      	nop
 80049d8:	40011000 	.word	0x40011000
 80049dc:	40011400 	.word	0x40011400
 80049e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049e8:	2200      	movs	r2, #0
 80049ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049f6:	4642      	mov	r2, r8
 80049f8:	464b      	mov	r3, r9
 80049fa:	1891      	adds	r1, r2, r2
 80049fc:	6239      	str	r1, [r7, #32]
 80049fe:	415b      	adcs	r3, r3
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
 8004a02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a06:	4641      	mov	r1, r8
 8004a08:	1854      	adds	r4, r2, r1
 8004a0a:	4649      	mov	r1, r9
 8004a0c:	eb43 0501 	adc.w	r5, r3, r1
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	00eb      	lsls	r3, r5, #3
 8004a1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a1e:	00e2      	lsls	r2, r4, #3
 8004a20:	4614      	mov	r4, r2
 8004a22:	461d      	mov	r5, r3
 8004a24:	4643      	mov	r3, r8
 8004a26:	18e3      	adds	r3, r4, r3
 8004a28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a2c:	464b      	mov	r3, r9
 8004a2e:	eb45 0303 	adc.w	r3, r5, r3
 8004a32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a46:	f04f 0200 	mov.w	r2, #0
 8004a4a:	f04f 0300 	mov.w	r3, #0
 8004a4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a52:	4629      	mov	r1, r5
 8004a54:	008b      	lsls	r3, r1, #2
 8004a56:	4621      	mov	r1, r4
 8004a58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	008a      	lsls	r2, r1, #2
 8004a60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a64:	f7fc f8ba 	bl	8000bdc <__aeabi_uldivmod>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4b60      	ldr	r3, [pc, #384]	; (8004bf0 <UART_SetConfig+0x4e4>)
 8004a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	011c      	lsls	r4, r3, #4
 8004a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a88:	4642      	mov	r2, r8
 8004a8a:	464b      	mov	r3, r9
 8004a8c:	1891      	adds	r1, r2, r2
 8004a8e:	61b9      	str	r1, [r7, #24]
 8004a90:	415b      	adcs	r3, r3
 8004a92:	61fb      	str	r3, [r7, #28]
 8004a94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a98:	4641      	mov	r1, r8
 8004a9a:	1851      	adds	r1, r2, r1
 8004a9c:	6139      	str	r1, [r7, #16]
 8004a9e:	4649      	mov	r1, r9
 8004aa0:	414b      	adcs	r3, r1
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ab0:	4659      	mov	r1, fp
 8004ab2:	00cb      	lsls	r3, r1, #3
 8004ab4:	4651      	mov	r1, sl
 8004ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aba:	4651      	mov	r1, sl
 8004abc:	00ca      	lsls	r2, r1, #3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	4642      	mov	r2, r8
 8004ac6:	189b      	adds	r3, r3, r2
 8004ac8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004acc:	464b      	mov	r3, r9
 8004ace:	460a      	mov	r2, r1
 8004ad0:	eb42 0303 	adc.w	r3, r2, r3
 8004ad4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ae2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004af0:	4649      	mov	r1, r9
 8004af2:	008b      	lsls	r3, r1, #2
 8004af4:	4641      	mov	r1, r8
 8004af6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004afa:	4641      	mov	r1, r8
 8004afc:	008a      	lsls	r2, r1, #2
 8004afe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b02:	f7fc f86b 	bl	8000bdc <__aeabi_uldivmod>
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	4b38      	ldr	r3, [pc, #224]	; (8004bf0 <UART_SetConfig+0x4e4>)
 8004b0e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	2264      	movs	r2, #100	; 0x64
 8004b16:	fb02 f303 	mul.w	r3, r2, r3
 8004b1a:	1acb      	subs	r3, r1, r3
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	3332      	adds	r3, #50	; 0x32
 8004b20:	4a33      	ldr	r2, [pc, #204]	; (8004bf0 <UART_SetConfig+0x4e4>)
 8004b22:	fba2 2303 	umull	r2, r3, r2, r3
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b2c:	441c      	add	r4, r3
 8004b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b32:	2200      	movs	r2, #0
 8004b34:	673b      	str	r3, [r7, #112]	; 0x70
 8004b36:	677a      	str	r2, [r7, #116]	; 0x74
 8004b38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b3c:	4642      	mov	r2, r8
 8004b3e:	464b      	mov	r3, r9
 8004b40:	1891      	adds	r1, r2, r2
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	415b      	adcs	r3, r3
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b4c:	4641      	mov	r1, r8
 8004b4e:	1851      	adds	r1, r2, r1
 8004b50:	6039      	str	r1, [r7, #0]
 8004b52:	4649      	mov	r1, r9
 8004b54:	414b      	adcs	r3, r1
 8004b56:	607b      	str	r3, [r7, #4]
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b64:	4659      	mov	r1, fp
 8004b66:	00cb      	lsls	r3, r1, #3
 8004b68:	4651      	mov	r1, sl
 8004b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b6e:	4651      	mov	r1, sl
 8004b70:	00ca      	lsls	r2, r1, #3
 8004b72:	4610      	mov	r0, r2
 8004b74:	4619      	mov	r1, r3
 8004b76:	4603      	mov	r3, r0
 8004b78:	4642      	mov	r2, r8
 8004b7a:	189b      	adds	r3, r3, r2
 8004b7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b7e:	464b      	mov	r3, r9
 8004b80:	460a      	mov	r2, r1
 8004b82:	eb42 0303 	adc.w	r3, r2, r3
 8004b86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	663b      	str	r3, [r7, #96]	; 0x60
 8004b92:	667a      	str	r2, [r7, #100]	; 0x64
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ba0:	4649      	mov	r1, r9
 8004ba2:	008b      	lsls	r3, r1, #2
 8004ba4:	4641      	mov	r1, r8
 8004ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004baa:	4641      	mov	r1, r8
 8004bac:	008a      	lsls	r2, r1, #2
 8004bae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004bb2:	f7fc f813 	bl	8000bdc <__aeabi_uldivmod>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4b0d      	ldr	r3, [pc, #52]	; (8004bf0 <UART_SetConfig+0x4e4>)
 8004bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc0:	095b      	lsrs	r3, r3, #5
 8004bc2:	2164      	movs	r1, #100	; 0x64
 8004bc4:	fb01 f303 	mul.w	r3, r1, r3
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	3332      	adds	r3, #50	; 0x32
 8004bce:	4a08      	ldr	r2, [pc, #32]	; (8004bf0 <UART_SetConfig+0x4e4>)
 8004bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	f003 020f 	and.w	r2, r3, #15
 8004bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4422      	add	r2, r4
 8004be2:	609a      	str	r2, [r3, #8]
}
 8004be4:	bf00      	nop
 8004be6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bea:	46bd      	mov	sp, r7
 8004bec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bf0:	51eb851f 	.word	0x51eb851f

08004bf4 <atoi>:
 8004bf4:	220a      	movs	r2, #10
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	f000 b93e 	b.w	8004e78 <strtol>

08004bfc <malloc>:
 8004bfc:	4b02      	ldr	r3, [pc, #8]	; (8004c08 <malloc+0xc>)
 8004bfe:	4601      	mov	r1, r0
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	f000 b82b 	b.w	8004c5c <_malloc_r>
 8004c06:	bf00      	nop
 8004c08:	20000070 	.word	0x20000070

08004c0c <free>:
 8004c0c:	4b02      	ldr	r3, [pc, #8]	; (8004c18 <free+0xc>)
 8004c0e:	4601      	mov	r1, r0
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	f000 bb6d 	b.w	80052f0 <_free_r>
 8004c16:	bf00      	nop
 8004c18:	20000070 	.word	0x20000070

08004c1c <sbrk_aligned>:
 8004c1c:	b570      	push	{r4, r5, r6, lr}
 8004c1e:	4e0e      	ldr	r6, [pc, #56]	; (8004c58 <sbrk_aligned+0x3c>)
 8004c20:	460c      	mov	r4, r1
 8004c22:	6831      	ldr	r1, [r6, #0]
 8004c24:	4605      	mov	r5, r0
 8004c26:	b911      	cbnz	r1, 8004c2e <sbrk_aligned+0x12>
 8004c28:	f000 faee 	bl	8005208 <_sbrk_r>
 8004c2c:	6030      	str	r0, [r6, #0]
 8004c2e:	4621      	mov	r1, r4
 8004c30:	4628      	mov	r0, r5
 8004c32:	f000 fae9 	bl	8005208 <_sbrk_r>
 8004c36:	1c43      	adds	r3, r0, #1
 8004c38:	d00a      	beq.n	8004c50 <sbrk_aligned+0x34>
 8004c3a:	1cc4      	adds	r4, r0, #3
 8004c3c:	f024 0403 	bic.w	r4, r4, #3
 8004c40:	42a0      	cmp	r0, r4
 8004c42:	d007      	beq.n	8004c54 <sbrk_aligned+0x38>
 8004c44:	1a21      	subs	r1, r4, r0
 8004c46:	4628      	mov	r0, r5
 8004c48:	f000 fade 	bl	8005208 <_sbrk_r>
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	d101      	bne.n	8004c54 <sbrk_aligned+0x38>
 8004c50:	f04f 34ff 	mov.w	r4, #4294967295
 8004c54:	4620      	mov	r0, r4
 8004c56:	bd70      	pop	{r4, r5, r6, pc}
 8004c58:	20000134 	.word	0x20000134

08004c5c <_malloc_r>:
 8004c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c60:	1ccd      	adds	r5, r1, #3
 8004c62:	f025 0503 	bic.w	r5, r5, #3
 8004c66:	3508      	adds	r5, #8
 8004c68:	2d0c      	cmp	r5, #12
 8004c6a:	bf38      	it	cc
 8004c6c:	250c      	movcc	r5, #12
 8004c6e:	2d00      	cmp	r5, #0
 8004c70:	4607      	mov	r7, r0
 8004c72:	db01      	blt.n	8004c78 <_malloc_r+0x1c>
 8004c74:	42a9      	cmp	r1, r5
 8004c76:	d905      	bls.n	8004c84 <_malloc_r+0x28>
 8004c78:	230c      	movs	r3, #12
 8004c7a:	603b      	str	r3, [r7, #0]
 8004c7c:	2600      	movs	r6, #0
 8004c7e:	4630      	mov	r0, r6
 8004c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d58 <_malloc_r+0xfc>
 8004c88:	f000 f868 	bl	8004d5c <__malloc_lock>
 8004c8c:	f8d8 3000 	ldr.w	r3, [r8]
 8004c90:	461c      	mov	r4, r3
 8004c92:	bb5c      	cbnz	r4, 8004cec <_malloc_r+0x90>
 8004c94:	4629      	mov	r1, r5
 8004c96:	4638      	mov	r0, r7
 8004c98:	f7ff ffc0 	bl	8004c1c <sbrk_aligned>
 8004c9c:	1c43      	adds	r3, r0, #1
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	d155      	bne.n	8004d4e <_malloc_r+0xf2>
 8004ca2:	f8d8 4000 	ldr.w	r4, [r8]
 8004ca6:	4626      	mov	r6, r4
 8004ca8:	2e00      	cmp	r6, #0
 8004caa:	d145      	bne.n	8004d38 <_malloc_r+0xdc>
 8004cac:	2c00      	cmp	r4, #0
 8004cae:	d048      	beq.n	8004d42 <_malloc_r+0xe6>
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	4631      	mov	r1, r6
 8004cb4:	4638      	mov	r0, r7
 8004cb6:	eb04 0903 	add.w	r9, r4, r3
 8004cba:	f000 faa5 	bl	8005208 <_sbrk_r>
 8004cbe:	4581      	cmp	r9, r0
 8004cc0:	d13f      	bne.n	8004d42 <_malloc_r+0xe6>
 8004cc2:	6821      	ldr	r1, [r4, #0]
 8004cc4:	1a6d      	subs	r5, r5, r1
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	4638      	mov	r0, r7
 8004cca:	f7ff ffa7 	bl	8004c1c <sbrk_aligned>
 8004cce:	3001      	adds	r0, #1
 8004cd0:	d037      	beq.n	8004d42 <_malloc_r+0xe6>
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	442b      	add	r3, r5
 8004cd6:	6023      	str	r3, [r4, #0]
 8004cd8:	f8d8 3000 	ldr.w	r3, [r8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d038      	beq.n	8004d52 <_malloc_r+0xf6>
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	42a2      	cmp	r2, r4
 8004ce4:	d12b      	bne.n	8004d3e <_malloc_r+0xe2>
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	605a      	str	r2, [r3, #4]
 8004cea:	e00f      	b.n	8004d0c <_malloc_r+0xb0>
 8004cec:	6822      	ldr	r2, [r4, #0]
 8004cee:	1b52      	subs	r2, r2, r5
 8004cf0:	d41f      	bmi.n	8004d32 <_malloc_r+0xd6>
 8004cf2:	2a0b      	cmp	r2, #11
 8004cf4:	d917      	bls.n	8004d26 <_malloc_r+0xca>
 8004cf6:	1961      	adds	r1, r4, r5
 8004cf8:	42a3      	cmp	r3, r4
 8004cfa:	6025      	str	r5, [r4, #0]
 8004cfc:	bf18      	it	ne
 8004cfe:	6059      	strne	r1, [r3, #4]
 8004d00:	6863      	ldr	r3, [r4, #4]
 8004d02:	bf08      	it	eq
 8004d04:	f8c8 1000 	streq.w	r1, [r8]
 8004d08:	5162      	str	r2, [r4, r5]
 8004d0a:	604b      	str	r3, [r1, #4]
 8004d0c:	4638      	mov	r0, r7
 8004d0e:	f104 060b 	add.w	r6, r4, #11
 8004d12:	f000 f829 	bl	8004d68 <__malloc_unlock>
 8004d16:	f026 0607 	bic.w	r6, r6, #7
 8004d1a:	1d23      	adds	r3, r4, #4
 8004d1c:	1af2      	subs	r2, r6, r3
 8004d1e:	d0ae      	beq.n	8004c7e <_malloc_r+0x22>
 8004d20:	1b9b      	subs	r3, r3, r6
 8004d22:	50a3      	str	r3, [r4, r2]
 8004d24:	e7ab      	b.n	8004c7e <_malloc_r+0x22>
 8004d26:	42a3      	cmp	r3, r4
 8004d28:	6862      	ldr	r2, [r4, #4]
 8004d2a:	d1dd      	bne.n	8004ce8 <_malloc_r+0x8c>
 8004d2c:	f8c8 2000 	str.w	r2, [r8]
 8004d30:	e7ec      	b.n	8004d0c <_malloc_r+0xb0>
 8004d32:	4623      	mov	r3, r4
 8004d34:	6864      	ldr	r4, [r4, #4]
 8004d36:	e7ac      	b.n	8004c92 <_malloc_r+0x36>
 8004d38:	4634      	mov	r4, r6
 8004d3a:	6876      	ldr	r6, [r6, #4]
 8004d3c:	e7b4      	b.n	8004ca8 <_malloc_r+0x4c>
 8004d3e:	4613      	mov	r3, r2
 8004d40:	e7cc      	b.n	8004cdc <_malloc_r+0x80>
 8004d42:	230c      	movs	r3, #12
 8004d44:	603b      	str	r3, [r7, #0]
 8004d46:	4638      	mov	r0, r7
 8004d48:	f000 f80e 	bl	8004d68 <__malloc_unlock>
 8004d4c:	e797      	b.n	8004c7e <_malloc_r+0x22>
 8004d4e:	6025      	str	r5, [r4, #0]
 8004d50:	e7dc      	b.n	8004d0c <_malloc_r+0xb0>
 8004d52:	605b      	str	r3, [r3, #4]
 8004d54:	deff      	udf	#255	; 0xff
 8004d56:	bf00      	nop
 8004d58:	20000130 	.word	0x20000130

08004d5c <__malloc_lock>:
 8004d5c:	4801      	ldr	r0, [pc, #4]	; (8004d64 <__malloc_lock+0x8>)
 8004d5e:	f000 ba9f 	b.w	80052a0 <__retarget_lock_acquire_recursive>
 8004d62:	bf00      	nop
 8004d64:	20000278 	.word	0x20000278

08004d68 <__malloc_unlock>:
 8004d68:	4801      	ldr	r0, [pc, #4]	; (8004d70 <__malloc_unlock+0x8>)
 8004d6a:	f000 ba9a 	b.w	80052a2 <__retarget_lock_release_recursive>
 8004d6e:	bf00      	nop
 8004d70:	20000278 	.word	0x20000278

08004d74 <_strtol_l.constprop.0>:
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d7a:	d001      	beq.n	8004d80 <_strtol_l.constprop.0+0xc>
 8004d7c:	2b24      	cmp	r3, #36	; 0x24
 8004d7e:	d906      	bls.n	8004d8e <_strtol_l.constprop.0+0x1a>
 8004d80:	f000 fa64 	bl	800524c <__errno>
 8004d84:	2316      	movs	r3, #22
 8004d86:	6003      	str	r3, [r0, #0]
 8004d88:	2000      	movs	r0, #0
 8004d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004e74 <_strtol_l.constprop.0+0x100>
 8004d92:	460d      	mov	r5, r1
 8004d94:	462e      	mov	r6, r5
 8004d96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d9a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004d9e:	f017 0708 	ands.w	r7, r7, #8
 8004da2:	d1f7      	bne.n	8004d94 <_strtol_l.constprop.0+0x20>
 8004da4:	2c2d      	cmp	r4, #45	; 0x2d
 8004da6:	d132      	bne.n	8004e0e <_strtol_l.constprop.0+0x9a>
 8004da8:	782c      	ldrb	r4, [r5, #0]
 8004daa:	2701      	movs	r7, #1
 8004dac:	1cb5      	adds	r5, r6, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d05b      	beq.n	8004e6a <_strtol_l.constprop.0+0xf6>
 8004db2:	2b10      	cmp	r3, #16
 8004db4:	d109      	bne.n	8004dca <_strtol_l.constprop.0+0x56>
 8004db6:	2c30      	cmp	r4, #48	; 0x30
 8004db8:	d107      	bne.n	8004dca <_strtol_l.constprop.0+0x56>
 8004dba:	782c      	ldrb	r4, [r5, #0]
 8004dbc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004dc0:	2c58      	cmp	r4, #88	; 0x58
 8004dc2:	d14d      	bne.n	8004e60 <_strtol_l.constprop.0+0xec>
 8004dc4:	786c      	ldrb	r4, [r5, #1]
 8004dc6:	2310      	movs	r3, #16
 8004dc8:	3502      	adds	r5, #2
 8004dca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004dce:	f108 38ff 	add.w	r8, r8, #4294967295
 8004dd2:	f04f 0e00 	mov.w	lr, #0
 8004dd6:	fbb8 f9f3 	udiv	r9, r8, r3
 8004dda:	4676      	mov	r6, lr
 8004ddc:	fb03 8a19 	mls	sl, r3, r9, r8
 8004de0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004de4:	f1bc 0f09 	cmp.w	ip, #9
 8004de8:	d816      	bhi.n	8004e18 <_strtol_l.constprop.0+0xa4>
 8004dea:	4664      	mov	r4, ip
 8004dec:	42a3      	cmp	r3, r4
 8004dee:	dd24      	ble.n	8004e3a <_strtol_l.constprop.0+0xc6>
 8004df0:	f1be 3fff 	cmp.w	lr, #4294967295
 8004df4:	d008      	beq.n	8004e08 <_strtol_l.constprop.0+0x94>
 8004df6:	45b1      	cmp	r9, r6
 8004df8:	d31c      	bcc.n	8004e34 <_strtol_l.constprop.0+0xc0>
 8004dfa:	d101      	bne.n	8004e00 <_strtol_l.constprop.0+0x8c>
 8004dfc:	45a2      	cmp	sl, r4
 8004dfe:	db19      	blt.n	8004e34 <_strtol_l.constprop.0+0xc0>
 8004e00:	fb06 4603 	mla	r6, r6, r3, r4
 8004e04:	f04f 0e01 	mov.w	lr, #1
 8004e08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e0c:	e7e8      	b.n	8004de0 <_strtol_l.constprop.0+0x6c>
 8004e0e:	2c2b      	cmp	r4, #43	; 0x2b
 8004e10:	bf04      	itt	eq
 8004e12:	782c      	ldrbeq	r4, [r5, #0]
 8004e14:	1cb5      	addeq	r5, r6, #2
 8004e16:	e7ca      	b.n	8004dae <_strtol_l.constprop.0+0x3a>
 8004e18:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004e1c:	f1bc 0f19 	cmp.w	ip, #25
 8004e20:	d801      	bhi.n	8004e26 <_strtol_l.constprop.0+0xb2>
 8004e22:	3c37      	subs	r4, #55	; 0x37
 8004e24:	e7e2      	b.n	8004dec <_strtol_l.constprop.0+0x78>
 8004e26:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004e2a:	f1bc 0f19 	cmp.w	ip, #25
 8004e2e:	d804      	bhi.n	8004e3a <_strtol_l.constprop.0+0xc6>
 8004e30:	3c57      	subs	r4, #87	; 0x57
 8004e32:	e7db      	b.n	8004dec <_strtol_l.constprop.0+0x78>
 8004e34:	f04f 3eff 	mov.w	lr, #4294967295
 8004e38:	e7e6      	b.n	8004e08 <_strtol_l.constprop.0+0x94>
 8004e3a:	f1be 3fff 	cmp.w	lr, #4294967295
 8004e3e:	d105      	bne.n	8004e4c <_strtol_l.constprop.0+0xd8>
 8004e40:	2322      	movs	r3, #34	; 0x22
 8004e42:	6003      	str	r3, [r0, #0]
 8004e44:	4646      	mov	r6, r8
 8004e46:	b942      	cbnz	r2, 8004e5a <_strtol_l.constprop.0+0xe6>
 8004e48:	4630      	mov	r0, r6
 8004e4a:	e79e      	b.n	8004d8a <_strtol_l.constprop.0+0x16>
 8004e4c:	b107      	cbz	r7, 8004e50 <_strtol_l.constprop.0+0xdc>
 8004e4e:	4276      	negs	r6, r6
 8004e50:	2a00      	cmp	r2, #0
 8004e52:	d0f9      	beq.n	8004e48 <_strtol_l.constprop.0+0xd4>
 8004e54:	f1be 0f00 	cmp.w	lr, #0
 8004e58:	d000      	beq.n	8004e5c <_strtol_l.constprop.0+0xe8>
 8004e5a:	1e69      	subs	r1, r5, #1
 8004e5c:	6011      	str	r1, [r2, #0]
 8004e5e:	e7f3      	b.n	8004e48 <_strtol_l.constprop.0+0xd4>
 8004e60:	2430      	movs	r4, #48	; 0x30
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1b1      	bne.n	8004dca <_strtol_l.constprop.0+0x56>
 8004e66:	2308      	movs	r3, #8
 8004e68:	e7af      	b.n	8004dca <_strtol_l.constprop.0+0x56>
 8004e6a:	2c30      	cmp	r4, #48	; 0x30
 8004e6c:	d0a5      	beq.n	8004dba <_strtol_l.constprop.0+0x46>
 8004e6e:	230a      	movs	r3, #10
 8004e70:	e7ab      	b.n	8004dca <_strtol_l.constprop.0+0x56>
 8004e72:	bf00      	nop
 8004e74:	080066ad 	.word	0x080066ad

08004e78 <strtol>:
 8004e78:	4613      	mov	r3, r2
 8004e7a:	460a      	mov	r2, r1
 8004e7c:	4601      	mov	r1, r0
 8004e7e:	4802      	ldr	r0, [pc, #8]	; (8004e88 <strtol+0x10>)
 8004e80:	6800      	ldr	r0, [r0, #0]
 8004e82:	f7ff bf77 	b.w	8004d74 <_strtol_l.constprop.0>
 8004e86:	bf00      	nop
 8004e88:	20000070 	.word	0x20000070

08004e8c <std>:
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	b510      	push	{r4, lr}
 8004e90:	4604      	mov	r4, r0
 8004e92:	e9c0 3300 	strd	r3, r3, [r0]
 8004e96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e9a:	6083      	str	r3, [r0, #8]
 8004e9c:	8181      	strh	r1, [r0, #12]
 8004e9e:	6643      	str	r3, [r0, #100]	; 0x64
 8004ea0:	81c2      	strh	r2, [r0, #14]
 8004ea2:	6183      	str	r3, [r0, #24]
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	2208      	movs	r2, #8
 8004ea8:	305c      	adds	r0, #92	; 0x5c
 8004eaa:	f000 f902 	bl	80050b2 <memset>
 8004eae:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <std+0x38>)
 8004eb0:	6263      	str	r3, [r4, #36]	; 0x24
 8004eb2:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <std+0x3c>)
 8004eb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004eb6:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <std+0x40>)
 8004eb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004eba:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <std+0x44>)
 8004ebc:	6224      	str	r4, [r4, #32]
 8004ebe:	6323      	str	r3, [r4, #48]	; 0x30
 8004ec0:	bd10      	pop	{r4, pc}
 8004ec2:	bf00      	nop
 8004ec4:	0800502d 	.word	0x0800502d
 8004ec8:	0800504f 	.word	0x0800504f
 8004ecc:	08005087 	.word	0x08005087
 8004ed0:	080050ab 	.word	0x080050ab

08004ed4 <stdio_exit_handler>:
 8004ed4:	4a02      	ldr	r2, [pc, #8]	; (8004ee0 <stdio_exit_handler+0xc>)
 8004ed6:	4903      	ldr	r1, [pc, #12]	; (8004ee4 <stdio_exit_handler+0x10>)
 8004ed8:	4803      	ldr	r0, [pc, #12]	; (8004ee8 <stdio_exit_handler+0x14>)
 8004eda:	f000 b869 	b.w	8004fb0 <_fwalk_sglue>
 8004ede:	bf00      	nop
 8004ee0:	20000018 	.word	0x20000018
 8004ee4:	08005a65 	.word	0x08005a65
 8004ee8:	20000024 	.word	0x20000024

08004eec <cleanup_stdio>:
 8004eec:	6841      	ldr	r1, [r0, #4]
 8004eee:	4b0c      	ldr	r3, [pc, #48]	; (8004f20 <cleanup_stdio+0x34>)
 8004ef0:	4299      	cmp	r1, r3
 8004ef2:	b510      	push	{r4, lr}
 8004ef4:	4604      	mov	r4, r0
 8004ef6:	d001      	beq.n	8004efc <cleanup_stdio+0x10>
 8004ef8:	f000 fdb4 	bl	8005a64 <_fflush_r>
 8004efc:	68a1      	ldr	r1, [r4, #8]
 8004efe:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <cleanup_stdio+0x38>)
 8004f00:	4299      	cmp	r1, r3
 8004f02:	d002      	beq.n	8004f0a <cleanup_stdio+0x1e>
 8004f04:	4620      	mov	r0, r4
 8004f06:	f000 fdad 	bl	8005a64 <_fflush_r>
 8004f0a:	68e1      	ldr	r1, [r4, #12]
 8004f0c:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <cleanup_stdio+0x3c>)
 8004f0e:	4299      	cmp	r1, r3
 8004f10:	d004      	beq.n	8004f1c <cleanup_stdio+0x30>
 8004f12:	4620      	mov	r0, r4
 8004f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f18:	f000 bda4 	b.w	8005a64 <_fflush_r>
 8004f1c:	bd10      	pop	{r4, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000138 	.word	0x20000138
 8004f24:	200001a0 	.word	0x200001a0
 8004f28:	20000208 	.word	0x20000208

08004f2c <global_stdio_init.part.0>:
 8004f2c:	b510      	push	{r4, lr}
 8004f2e:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <global_stdio_init.part.0+0x30>)
 8004f30:	4c0b      	ldr	r4, [pc, #44]	; (8004f60 <global_stdio_init.part.0+0x34>)
 8004f32:	4a0c      	ldr	r2, [pc, #48]	; (8004f64 <global_stdio_init.part.0+0x38>)
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	4620      	mov	r0, r4
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2104      	movs	r1, #4
 8004f3c:	f7ff ffa6 	bl	8004e8c <std>
 8004f40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004f44:	2201      	movs	r2, #1
 8004f46:	2109      	movs	r1, #9
 8004f48:	f7ff ffa0 	bl	8004e8c <std>
 8004f4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004f50:	2202      	movs	r2, #2
 8004f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f56:	2112      	movs	r1, #18
 8004f58:	f7ff bf98 	b.w	8004e8c <std>
 8004f5c:	20000270 	.word	0x20000270
 8004f60:	20000138 	.word	0x20000138
 8004f64:	08004ed5 	.word	0x08004ed5

08004f68 <__sfp_lock_acquire>:
 8004f68:	4801      	ldr	r0, [pc, #4]	; (8004f70 <__sfp_lock_acquire+0x8>)
 8004f6a:	f000 b999 	b.w	80052a0 <__retarget_lock_acquire_recursive>
 8004f6e:	bf00      	nop
 8004f70:	20000279 	.word	0x20000279

08004f74 <__sfp_lock_release>:
 8004f74:	4801      	ldr	r0, [pc, #4]	; (8004f7c <__sfp_lock_release+0x8>)
 8004f76:	f000 b994 	b.w	80052a2 <__retarget_lock_release_recursive>
 8004f7a:	bf00      	nop
 8004f7c:	20000279 	.word	0x20000279

08004f80 <__sinit>:
 8004f80:	b510      	push	{r4, lr}
 8004f82:	4604      	mov	r4, r0
 8004f84:	f7ff fff0 	bl	8004f68 <__sfp_lock_acquire>
 8004f88:	6a23      	ldr	r3, [r4, #32]
 8004f8a:	b11b      	cbz	r3, 8004f94 <__sinit+0x14>
 8004f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f90:	f7ff bff0 	b.w	8004f74 <__sfp_lock_release>
 8004f94:	4b04      	ldr	r3, [pc, #16]	; (8004fa8 <__sinit+0x28>)
 8004f96:	6223      	str	r3, [r4, #32]
 8004f98:	4b04      	ldr	r3, [pc, #16]	; (8004fac <__sinit+0x2c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1f5      	bne.n	8004f8c <__sinit+0xc>
 8004fa0:	f7ff ffc4 	bl	8004f2c <global_stdio_init.part.0>
 8004fa4:	e7f2      	b.n	8004f8c <__sinit+0xc>
 8004fa6:	bf00      	nop
 8004fa8:	08004eed 	.word	0x08004eed
 8004fac:	20000270 	.word	0x20000270

08004fb0 <_fwalk_sglue>:
 8004fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fb4:	4607      	mov	r7, r0
 8004fb6:	4688      	mov	r8, r1
 8004fb8:	4614      	mov	r4, r2
 8004fba:	2600      	movs	r6, #0
 8004fbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fc0:	f1b9 0901 	subs.w	r9, r9, #1
 8004fc4:	d505      	bpl.n	8004fd2 <_fwalk_sglue+0x22>
 8004fc6:	6824      	ldr	r4, [r4, #0]
 8004fc8:	2c00      	cmp	r4, #0
 8004fca:	d1f7      	bne.n	8004fbc <_fwalk_sglue+0xc>
 8004fcc:	4630      	mov	r0, r6
 8004fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fd2:	89ab      	ldrh	r3, [r5, #12]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d907      	bls.n	8004fe8 <_fwalk_sglue+0x38>
 8004fd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	d003      	beq.n	8004fe8 <_fwalk_sglue+0x38>
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	47c0      	blx	r8
 8004fe6:	4306      	orrs	r6, r0
 8004fe8:	3568      	adds	r5, #104	; 0x68
 8004fea:	e7e9      	b.n	8004fc0 <_fwalk_sglue+0x10>

08004fec <siprintf>:
 8004fec:	b40e      	push	{r1, r2, r3}
 8004fee:	b500      	push	{lr}
 8004ff0:	b09c      	sub	sp, #112	; 0x70
 8004ff2:	ab1d      	add	r3, sp, #116	; 0x74
 8004ff4:	9002      	str	r0, [sp, #8]
 8004ff6:	9006      	str	r0, [sp, #24]
 8004ff8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ffc:	4809      	ldr	r0, [pc, #36]	; (8005024 <siprintf+0x38>)
 8004ffe:	9107      	str	r1, [sp, #28]
 8005000:	9104      	str	r1, [sp, #16]
 8005002:	4909      	ldr	r1, [pc, #36]	; (8005028 <siprintf+0x3c>)
 8005004:	f853 2b04 	ldr.w	r2, [r3], #4
 8005008:	9105      	str	r1, [sp, #20]
 800500a:	6800      	ldr	r0, [r0, #0]
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	a902      	add	r1, sp, #8
 8005010:	f000 fa14 	bl	800543c <_svfiprintf_r>
 8005014:	9b02      	ldr	r3, [sp, #8]
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	b01c      	add	sp, #112	; 0x70
 800501c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005020:	b003      	add	sp, #12
 8005022:	4770      	bx	lr
 8005024:	20000070 	.word	0x20000070
 8005028:	ffff0208 	.word	0xffff0208

0800502c <__sread>:
 800502c:	b510      	push	{r4, lr}
 800502e:	460c      	mov	r4, r1
 8005030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005034:	f000 f8d6 	bl	80051e4 <_read_r>
 8005038:	2800      	cmp	r0, #0
 800503a:	bfab      	itete	ge
 800503c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800503e:	89a3      	ldrhlt	r3, [r4, #12]
 8005040:	181b      	addge	r3, r3, r0
 8005042:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005046:	bfac      	ite	ge
 8005048:	6563      	strge	r3, [r4, #84]	; 0x54
 800504a:	81a3      	strhlt	r3, [r4, #12]
 800504c:	bd10      	pop	{r4, pc}

0800504e <__swrite>:
 800504e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005052:	461f      	mov	r7, r3
 8005054:	898b      	ldrh	r3, [r1, #12]
 8005056:	05db      	lsls	r3, r3, #23
 8005058:	4605      	mov	r5, r0
 800505a:	460c      	mov	r4, r1
 800505c:	4616      	mov	r6, r2
 800505e:	d505      	bpl.n	800506c <__swrite+0x1e>
 8005060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005064:	2302      	movs	r3, #2
 8005066:	2200      	movs	r2, #0
 8005068:	f000 f8aa 	bl	80051c0 <_lseek_r>
 800506c:	89a3      	ldrh	r3, [r4, #12]
 800506e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005072:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005076:	81a3      	strh	r3, [r4, #12]
 8005078:	4632      	mov	r2, r6
 800507a:	463b      	mov	r3, r7
 800507c:	4628      	mov	r0, r5
 800507e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005082:	f000 b8d1 	b.w	8005228 <_write_r>

08005086 <__sseek>:
 8005086:	b510      	push	{r4, lr}
 8005088:	460c      	mov	r4, r1
 800508a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800508e:	f000 f897 	bl	80051c0 <_lseek_r>
 8005092:	1c43      	adds	r3, r0, #1
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	bf15      	itete	ne
 8005098:	6560      	strne	r0, [r4, #84]	; 0x54
 800509a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800509e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050a2:	81a3      	strheq	r3, [r4, #12]
 80050a4:	bf18      	it	ne
 80050a6:	81a3      	strhne	r3, [r4, #12]
 80050a8:	bd10      	pop	{r4, pc}

080050aa <__sclose>:
 80050aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ae:	f000 b877 	b.w	80051a0 <_close_r>

080050b2 <memset>:
 80050b2:	4402      	add	r2, r0
 80050b4:	4603      	mov	r3, r0
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d100      	bne.n	80050bc <memset+0xa>
 80050ba:	4770      	bx	lr
 80050bc:	f803 1b01 	strb.w	r1, [r3], #1
 80050c0:	e7f9      	b.n	80050b6 <memset+0x4>

080050c2 <strncmp>:
 80050c2:	b510      	push	{r4, lr}
 80050c4:	b16a      	cbz	r2, 80050e2 <strncmp+0x20>
 80050c6:	3901      	subs	r1, #1
 80050c8:	1884      	adds	r4, r0, r2
 80050ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d103      	bne.n	80050de <strncmp+0x1c>
 80050d6:	42a0      	cmp	r0, r4
 80050d8:	d001      	beq.n	80050de <strncmp+0x1c>
 80050da:	2a00      	cmp	r2, #0
 80050dc:	d1f5      	bne.n	80050ca <strncmp+0x8>
 80050de:	1ad0      	subs	r0, r2, r3
 80050e0:	bd10      	pop	{r4, pc}
 80050e2:	4610      	mov	r0, r2
 80050e4:	e7fc      	b.n	80050e0 <strncmp+0x1e>
	...

080050e8 <strtok>:
 80050e8:	4b16      	ldr	r3, [pc, #88]	; (8005144 <strtok+0x5c>)
 80050ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050ec:	681e      	ldr	r6, [r3, #0]
 80050ee:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80050f0:	4605      	mov	r5, r0
 80050f2:	b9fc      	cbnz	r4, 8005134 <strtok+0x4c>
 80050f4:	2050      	movs	r0, #80	; 0x50
 80050f6:	9101      	str	r1, [sp, #4]
 80050f8:	f7ff fd80 	bl	8004bfc <malloc>
 80050fc:	9901      	ldr	r1, [sp, #4]
 80050fe:	6470      	str	r0, [r6, #68]	; 0x44
 8005100:	4602      	mov	r2, r0
 8005102:	b920      	cbnz	r0, 800510e <strtok+0x26>
 8005104:	4b10      	ldr	r3, [pc, #64]	; (8005148 <strtok+0x60>)
 8005106:	4811      	ldr	r0, [pc, #68]	; (800514c <strtok+0x64>)
 8005108:	215b      	movs	r1, #91	; 0x5b
 800510a:	f000 f8d3 	bl	80052b4 <__assert_func>
 800510e:	e9c0 4400 	strd	r4, r4, [r0]
 8005112:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005116:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800511a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800511e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005122:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005126:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800512a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800512e:	6184      	str	r4, [r0, #24]
 8005130:	7704      	strb	r4, [r0, #28]
 8005132:	6244      	str	r4, [r0, #36]	; 0x24
 8005134:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8005136:	2301      	movs	r3, #1
 8005138:	4628      	mov	r0, r5
 800513a:	b002      	add	sp, #8
 800513c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005140:	f000 b806 	b.w	8005150 <__strtok_r>
 8005144:	20000070 	.word	0x20000070
 8005148:	080067ad 	.word	0x080067ad
 800514c:	080067c4 	.word	0x080067c4

08005150 <__strtok_r>:
 8005150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005152:	b908      	cbnz	r0, 8005158 <__strtok_r+0x8>
 8005154:	6810      	ldr	r0, [r2, #0]
 8005156:	b188      	cbz	r0, 800517c <__strtok_r+0x2c>
 8005158:	4604      	mov	r4, r0
 800515a:	4620      	mov	r0, r4
 800515c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005160:	460f      	mov	r7, r1
 8005162:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005166:	b91e      	cbnz	r6, 8005170 <__strtok_r+0x20>
 8005168:	b965      	cbnz	r5, 8005184 <__strtok_r+0x34>
 800516a:	6015      	str	r5, [r2, #0]
 800516c:	4628      	mov	r0, r5
 800516e:	e005      	b.n	800517c <__strtok_r+0x2c>
 8005170:	42b5      	cmp	r5, r6
 8005172:	d1f6      	bne.n	8005162 <__strtok_r+0x12>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1f0      	bne.n	800515a <__strtok_r+0xa>
 8005178:	6014      	str	r4, [r2, #0]
 800517a:	7003      	strb	r3, [r0, #0]
 800517c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800517e:	461c      	mov	r4, r3
 8005180:	e00c      	b.n	800519c <__strtok_r+0x4c>
 8005182:	b915      	cbnz	r5, 800518a <__strtok_r+0x3a>
 8005184:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005188:	460e      	mov	r6, r1
 800518a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800518e:	42ab      	cmp	r3, r5
 8005190:	d1f7      	bne.n	8005182 <__strtok_r+0x32>
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f3      	beq.n	800517e <__strtok_r+0x2e>
 8005196:	2300      	movs	r3, #0
 8005198:	f804 3c01 	strb.w	r3, [r4, #-1]
 800519c:	6014      	str	r4, [r2, #0]
 800519e:	e7ed      	b.n	800517c <__strtok_r+0x2c>

080051a0 <_close_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	4d06      	ldr	r5, [pc, #24]	; (80051bc <_close_r+0x1c>)
 80051a4:	2300      	movs	r3, #0
 80051a6:	4604      	mov	r4, r0
 80051a8:	4608      	mov	r0, r1
 80051aa:	602b      	str	r3, [r5, #0]
 80051ac:	f7fd f963 	bl	8002476 <_close>
 80051b0:	1c43      	adds	r3, r0, #1
 80051b2:	d102      	bne.n	80051ba <_close_r+0x1a>
 80051b4:	682b      	ldr	r3, [r5, #0]
 80051b6:	b103      	cbz	r3, 80051ba <_close_r+0x1a>
 80051b8:	6023      	str	r3, [r4, #0]
 80051ba:	bd38      	pop	{r3, r4, r5, pc}
 80051bc:	20000274 	.word	0x20000274

080051c0 <_lseek_r>:
 80051c0:	b538      	push	{r3, r4, r5, lr}
 80051c2:	4d07      	ldr	r5, [pc, #28]	; (80051e0 <_lseek_r+0x20>)
 80051c4:	4604      	mov	r4, r0
 80051c6:	4608      	mov	r0, r1
 80051c8:	4611      	mov	r1, r2
 80051ca:	2200      	movs	r2, #0
 80051cc:	602a      	str	r2, [r5, #0]
 80051ce:	461a      	mov	r2, r3
 80051d0:	f7fd f978 	bl	80024c4 <_lseek>
 80051d4:	1c43      	adds	r3, r0, #1
 80051d6:	d102      	bne.n	80051de <_lseek_r+0x1e>
 80051d8:	682b      	ldr	r3, [r5, #0]
 80051da:	b103      	cbz	r3, 80051de <_lseek_r+0x1e>
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	bd38      	pop	{r3, r4, r5, pc}
 80051e0:	20000274 	.word	0x20000274

080051e4 <_read_r>:
 80051e4:	b538      	push	{r3, r4, r5, lr}
 80051e6:	4d07      	ldr	r5, [pc, #28]	; (8005204 <_read_r+0x20>)
 80051e8:	4604      	mov	r4, r0
 80051ea:	4608      	mov	r0, r1
 80051ec:	4611      	mov	r1, r2
 80051ee:	2200      	movs	r2, #0
 80051f0:	602a      	str	r2, [r5, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	f7fd f906 	bl	8002404 <_read>
 80051f8:	1c43      	adds	r3, r0, #1
 80051fa:	d102      	bne.n	8005202 <_read_r+0x1e>
 80051fc:	682b      	ldr	r3, [r5, #0]
 80051fe:	b103      	cbz	r3, 8005202 <_read_r+0x1e>
 8005200:	6023      	str	r3, [r4, #0]
 8005202:	bd38      	pop	{r3, r4, r5, pc}
 8005204:	20000274 	.word	0x20000274

08005208 <_sbrk_r>:
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	4d06      	ldr	r5, [pc, #24]	; (8005224 <_sbrk_r+0x1c>)
 800520c:	2300      	movs	r3, #0
 800520e:	4604      	mov	r4, r0
 8005210:	4608      	mov	r0, r1
 8005212:	602b      	str	r3, [r5, #0]
 8005214:	f7fd f964 	bl	80024e0 <_sbrk>
 8005218:	1c43      	adds	r3, r0, #1
 800521a:	d102      	bne.n	8005222 <_sbrk_r+0x1a>
 800521c:	682b      	ldr	r3, [r5, #0]
 800521e:	b103      	cbz	r3, 8005222 <_sbrk_r+0x1a>
 8005220:	6023      	str	r3, [r4, #0]
 8005222:	bd38      	pop	{r3, r4, r5, pc}
 8005224:	20000274 	.word	0x20000274

08005228 <_write_r>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	4d07      	ldr	r5, [pc, #28]	; (8005248 <_write_r+0x20>)
 800522c:	4604      	mov	r4, r0
 800522e:	4608      	mov	r0, r1
 8005230:	4611      	mov	r1, r2
 8005232:	2200      	movs	r2, #0
 8005234:	602a      	str	r2, [r5, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	f7fd f901 	bl	800243e <_write>
 800523c:	1c43      	adds	r3, r0, #1
 800523e:	d102      	bne.n	8005246 <_write_r+0x1e>
 8005240:	682b      	ldr	r3, [r5, #0]
 8005242:	b103      	cbz	r3, 8005246 <_write_r+0x1e>
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	bd38      	pop	{r3, r4, r5, pc}
 8005248:	20000274 	.word	0x20000274

0800524c <__errno>:
 800524c:	4b01      	ldr	r3, [pc, #4]	; (8005254 <__errno+0x8>)
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	20000070 	.word	0x20000070

08005258 <__libc_init_array>:
 8005258:	b570      	push	{r4, r5, r6, lr}
 800525a:	4d0d      	ldr	r5, [pc, #52]	; (8005290 <__libc_init_array+0x38>)
 800525c:	4c0d      	ldr	r4, [pc, #52]	; (8005294 <__libc_init_array+0x3c>)
 800525e:	1b64      	subs	r4, r4, r5
 8005260:	10a4      	asrs	r4, r4, #2
 8005262:	2600      	movs	r6, #0
 8005264:	42a6      	cmp	r6, r4
 8005266:	d109      	bne.n	800527c <__libc_init_array+0x24>
 8005268:	4d0b      	ldr	r5, [pc, #44]	; (8005298 <__libc_init_array+0x40>)
 800526a:	4c0c      	ldr	r4, [pc, #48]	; (800529c <__libc_init_array+0x44>)
 800526c:	f001 f9b2 	bl	80065d4 <_init>
 8005270:	1b64      	subs	r4, r4, r5
 8005272:	10a4      	asrs	r4, r4, #2
 8005274:	2600      	movs	r6, #0
 8005276:	42a6      	cmp	r6, r4
 8005278:	d105      	bne.n	8005286 <__libc_init_array+0x2e>
 800527a:	bd70      	pop	{r4, r5, r6, pc}
 800527c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005280:	4798      	blx	r3
 8005282:	3601      	adds	r6, #1
 8005284:	e7ee      	b.n	8005264 <__libc_init_array+0xc>
 8005286:	f855 3b04 	ldr.w	r3, [r5], #4
 800528a:	4798      	blx	r3
 800528c:	3601      	adds	r6, #1
 800528e:	e7f2      	b.n	8005276 <__libc_init_array+0x1e>
 8005290:	08006908 	.word	0x08006908
 8005294:	08006908 	.word	0x08006908
 8005298:	08006908 	.word	0x08006908
 800529c:	0800690c 	.word	0x0800690c

080052a0 <__retarget_lock_acquire_recursive>:
 80052a0:	4770      	bx	lr

080052a2 <__retarget_lock_release_recursive>:
 80052a2:	4770      	bx	lr

080052a4 <strcpy>:
 80052a4:	4603      	mov	r3, r0
 80052a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052aa:	f803 2b01 	strb.w	r2, [r3], #1
 80052ae:	2a00      	cmp	r2, #0
 80052b0:	d1f9      	bne.n	80052a6 <strcpy+0x2>
 80052b2:	4770      	bx	lr

080052b4 <__assert_func>:
 80052b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80052b6:	4614      	mov	r4, r2
 80052b8:	461a      	mov	r2, r3
 80052ba:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <__assert_func+0x2c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4605      	mov	r5, r0
 80052c0:	68d8      	ldr	r0, [r3, #12]
 80052c2:	b14c      	cbz	r4, 80052d8 <__assert_func+0x24>
 80052c4:	4b07      	ldr	r3, [pc, #28]	; (80052e4 <__assert_func+0x30>)
 80052c6:	9100      	str	r1, [sp, #0]
 80052c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80052cc:	4906      	ldr	r1, [pc, #24]	; (80052e8 <__assert_func+0x34>)
 80052ce:	462b      	mov	r3, r5
 80052d0:	f000 fbf0 	bl	8005ab4 <fiprintf>
 80052d4:	f000 fc28 	bl	8005b28 <abort>
 80052d8:	4b04      	ldr	r3, [pc, #16]	; (80052ec <__assert_func+0x38>)
 80052da:	461c      	mov	r4, r3
 80052dc:	e7f3      	b.n	80052c6 <__assert_func+0x12>
 80052de:	bf00      	nop
 80052e0:	20000070 	.word	0x20000070
 80052e4:	0800681e 	.word	0x0800681e
 80052e8:	0800682b 	.word	0x0800682b
 80052ec:	08006859 	.word	0x08006859

080052f0 <_free_r>:
 80052f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052f2:	2900      	cmp	r1, #0
 80052f4:	d044      	beq.n	8005380 <_free_r+0x90>
 80052f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052fa:	9001      	str	r0, [sp, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f1a1 0404 	sub.w	r4, r1, #4
 8005302:	bfb8      	it	lt
 8005304:	18e4      	addlt	r4, r4, r3
 8005306:	f7ff fd29 	bl	8004d5c <__malloc_lock>
 800530a:	4a1e      	ldr	r2, [pc, #120]	; (8005384 <_free_r+0x94>)
 800530c:	9801      	ldr	r0, [sp, #4]
 800530e:	6813      	ldr	r3, [r2, #0]
 8005310:	b933      	cbnz	r3, 8005320 <_free_r+0x30>
 8005312:	6063      	str	r3, [r4, #4]
 8005314:	6014      	str	r4, [r2, #0]
 8005316:	b003      	add	sp, #12
 8005318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800531c:	f7ff bd24 	b.w	8004d68 <__malloc_unlock>
 8005320:	42a3      	cmp	r3, r4
 8005322:	d908      	bls.n	8005336 <_free_r+0x46>
 8005324:	6825      	ldr	r5, [r4, #0]
 8005326:	1961      	adds	r1, r4, r5
 8005328:	428b      	cmp	r3, r1
 800532a:	bf01      	itttt	eq
 800532c:	6819      	ldreq	r1, [r3, #0]
 800532e:	685b      	ldreq	r3, [r3, #4]
 8005330:	1949      	addeq	r1, r1, r5
 8005332:	6021      	streq	r1, [r4, #0]
 8005334:	e7ed      	b.n	8005312 <_free_r+0x22>
 8005336:	461a      	mov	r2, r3
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	b10b      	cbz	r3, 8005340 <_free_r+0x50>
 800533c:	42a3      	cmp	r3, r4
 800533e:	d9fa      	bls.n	8005336 <_free_r+0x46>
 8005340:	6811      	ldr	r1, [r2, #0]
 8005342:	1855      	adds	r5, r2, r1
 8005344:	42a5      	cmp	r5, r4
 8005346:	d10b      	bne.n	8005360 <_free_r+0x70>
 8005348:	6824      	ldr	r4, [r4, #0]
 800534a:	4421      	add	r1, r4
 800534c:	1854      	adds	r4, r2, r1
 800534e:	42a3      	cmp	r3, r4
 8005350:	6011      	str	r1, [r2, #0]
 8005352:	d1e0      	bne.n	8005316 <_free_r+0x26>
 8005354:	681c      	ldr	r4, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	6053      	str	r3, [r2, #4]
 800535a:	440c      	add	r4, r1
 800535c:	6014      	str	r4, [r2, #0]
 800535e:	e7da      	b.n	8005316 <_free_r+0x26>
 8005360:	d902      	bls.n	8005368 <_free_r+0x78>
 8005362:	230c      	movs	r3, #12
 8005364:	6003      	str	r3, [r0, #0]
 8005366:	e7d6      	b.n	8005316 <_free_r+0x26>
 8005368:	6825      	ldr	r5, [r4, #0]
 800536a:	1961      	adds	r1, r4, r5
 800536c:	428b      	cmp	r3, r1
 800536e:	bf04      	itt	eq
 8005370:	6819      	ldreq	r1, [r3, #0]
 8005372:	685b      	ldreq	r3, [r3, #4]
 8005374:	6063      	str	r3, [r4, #4]
 8005376:	bf04      	itt	eq
 8005378:	1949      	addeq	r1, r1, r5
 800537a:	6021      	streq	r1, [r4, #0]
 800537c:	6054      	str	r4, [r2, #4]
 800537e:	e7ca      	b.n	8005316 <_free_r+0x26>
 8005380:	b003      	add	sp, #12
 8005382:	bd30      	pop	{r4, r5, pc}
 8005384:	20000130 	.word	0x20000130

08005388 <__ssputs_r>:
 8005388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800538c:	688e      	ldr	r6, [r1, #8]
 800538e:	461f      	mov	r7, r3
 8005390:	42be      	cmp	r6, r7
 8005392:	680b      	ldr	r3, [r1, #0]
 8005394:	4682      	mov	sl, r0
 8005396:	460c      	mov	r4, r1
 8005398:	4690      	mov	r8, r2
 800539a:	d82c      	bhi.n	80053f6 <__ssputs_r+0x6e>
 800539c:	898a      	ldrh	r2, [r1, #12]
 800539e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80053a2:	d026      	beq.n	80053f2 <__ssputs_r+0x6a>
 80053a4:	6965      	ldr	r5, [r4, #20]
 80053a6:	6909      	ldr	r1, [r1, #16]
 80053a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053ac:	eba3 0901 	sub.w	r9, r3, r1
 80053b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053b4:	1c7b      	adds	r3, r7, #1
 80053b6:	444b      	add	r3, r9
 80053b8:	106d      	asrs	r5, r5, #1
 80053ba:	429d      	cmp	r5, r3
 80053bc:	bf38      	it	cc
 80053be:	461d      	movcc	r5, r3
 80053c0:	0553      	lsls	r3, r2, #21
 80053c2:	d527      	bpl.n	8005414 <__ssputs_r+0x8c>
 80053c4:	4629      	mov	r1, r5
 80053c6:	f7ff fc49 	bl	8004c5c <_malloc_r>
 80053ca:	4606      	mov	r6, r0
 80053cc:	b360      	cbz	r0, 8005428 <__ssputs_r+0xa0>
 80053ce:	6921      	ldr	r1, [r4, #16]
 80053d0:	464a      	mov	r2, r9
 80053d2:	f000 fb9b 	bl	8005b0c <memcpy>
 80053d6:	89a3      	ldrh	r3, [r4, #12]
 80053d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e0:	81a3      	strh	r3, [r4, #12]
 80053e2:	6126      	str	r6, [r4, #16]
 80053e4:	6165      	str	r5, [r4, #20]
 80053e6:	444e      	add	r6, r9
 80053e8:	eba5 0509 	sub.w	r5, r5, r9
 80053ec:	6026      	str	r6, [r4, #0]
 80053ee:	60a5      	str	r5, [r4, #8]
 80053f0:	463e      	mov	r6, r7
 80053f2:	42be      	cmp	r6, r7
 80053f4:	d900      	bls.n	80053f8 <__ssputs_r+0x70>
 80053f6:	463e      	mov	r6, r7
 80053f8:	6820      	ldr	r0, [r4, #0]
 80053fa:	4632      	mov	r2, r6
 80053fc:	4641      	mov	r1, r8
 80053fe:	f000 fb6b 	bl	8005ad8 <memmove>
 8005402:	68a3      	ldr	r3, [r4, #8]
 8005404:	1b9b      	subs	r3, r3, r6
 8005406:	60a3      	str	r3, [r4, #8]
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	4433      	add	r3, r6
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	2000      	movs	r0, #0
 8005410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005414:	462a      	mov	r2, r5
 8005416:	f000 fb8e 	bl	8005b36 <_realloc_r>
 800541a:	4606      	mov	r6, r0
 800541c:	2800      	cmp	r0, #0
 800541e:	d1e0      	bne.n	80053e2 <__ssputs_r+0x5a>
 8005420:	6921      	ldr	r1, [r4, #16]
 8005422:	4650      	mov	r0, sl
 8005424:	f7ff ff64 	bl	80052f0 <_free_r>
 8005428:	230c      	movs	r3, #12
 800542a:	f8ca 3000 	str.w	r3, [sl]
 800542e:	89a3      	ldrh	r3, [r4, #12]
 8005430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005434:	81a3      	strh	r3, [r4, #12]
 8005436:	f04f 30ff 	mov.w	r0, #4294967295
 800543a:	e7e9      	b.n	8005410 <__ssputs_r+0x88>

0800543c <_svfiprintf_r>:
 800543c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005440:	4698      	mov	r8, r3
 8005442:	898b      	ldrh	r3, [r1, #12]
 8005444:	061b      	lsls	r3, r3, #24
 8005446:	b09d      	sub	sp, #116	; 0x74
 8005448:	4607      	mov	r7, r0
 800544a:	460d      	mov	r5, r1
 800544c:	4614      	mov	r4, r2
 800544e:	d50e      	bpl.n	800546e <_svfiprintf_r+0x32>
 8005450:	690b      	ldr	r3, [r1, #16]
 8005452:	b963      	cbnz	r3, 800546e <_svfiprintf_r+0x32>
 8005454:	2140      	movs	r1, #64	; 0x40
 8005456:	f7ff fc01 	bl	8004c5c <_malloc_r>
 800545a:	6028      	str	r0, [r5, #0]
 800545c:	6128      	str	r0, [r5, #16]
 800545e:	b920      	cbnz	r0, 800546a <_svfiprintf_r+0x2e>
 8005460:	230c      	movs	r3, #12
 8005462:	603b      	str	r3, [r7, #0]
 8005464:	f04f 30ff 	mov.w	r0, #4294967295
 8005468:	e0d0      	b.n	800560c <_svfiprintf_r+0x1d0>
 800546a:	2340      	movs	r3, #64	; 0x40
 800546c:	616b      	str	r3, [r5, #20]
 800546e:	2300      	movs	r3, #0
 8005470:	9309      	str	r3, [sp, #36]	; 0x24
 8005472:	2320      	movs	r3, #32
 8005474:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005478:	f8cd 800c 	str.w	r8, [sp, #12]
 800547c:	2330      	movs	r3, #48	; 0x30
 800547e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005624 <_svfiprintf_r+0x1e8>
 8005482:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005486:	f04f 0901 	mov.w	r9, #1
 800548a:	4623      	mov	r3, r4
 800548c:	469a      	mov	sl, r3
 800548e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005492:	b10a      	cbz	r2, 8005498 <_svfiprintf_r+0x5c>
 8005494:	2a25      	cmp	r2, #37	; 0x25
 8005496:	d1f9      	bne.n	800548c <_svfiprintf_r+0x50>
 8005498:	ebba 0b04 	subs.w	fp, sl, r4
 800549c:	d00b      	beq.n	80054b6 <_svfiprintf_r+0x7a>
 800549e:	465b      	mov	r3, fp
 80054a0:	4622      	mov	r2, r4
 80054a2:	4629      	mov	r1, r5
 80054a4:	4638      	mov	r0, r7
 80054a6:	f7ff ff6f 	bl	8005388 <__ssputs_r>
 80054aa:	3001      	adds	r0, #1
 80054ac:	f000 80a9 	beq.w	8005602 <_svfiprintf_r+0x1c6>
 80054b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054b2:	445a      	add	r2, fp
 80054b4:	9209      	str	r2, [sp, #36]	; 0x24
 80054b6:	f89a 3000 	ldrb.w	r3, [sl]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 80a1 	beq.w	8005602 <_svfiprintf_r+0x1c6>
 80054c0:	2300      	movs	r3, #0
 80054c2:	f04f 32ff 	mov.w	r2, #4294967295
 80054c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054ca:	f10a 0a01 	add.w	sl, sl, #1
 80054ce:	9304      	str	r3, [sp, #16]
 80054d0:	9307      	str	r3, [sp, #28]
 80054d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054d6:	931a      	str	r3, [sp, #104]	; 0x68
 80054d8:	4654      	mov	r4, sl
 80054da:	2205      	movs	r2, #5
 80054dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054e0:	4850      	ldr	r0, [pc, #320]	; (8005624 <_svfiprintf_r+0x1e8>)
 80054e2:	f7fa fe85 	bl	80001f0 <memchr>
 80054e6:	9a04      	ldr	r2, [sp, #16]
 80054e8:	b9d8      	cbnz	r0, 8005522 <_svfiprintf_r+0xe6>
 80054ea:	06d0      	lsls	r0, r2, #27
 80054ec:	bf44      	itt	mi
 80054ee:	2320      	movmi	r3, #32
 80054f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054f4:	0711      	lsls	r1, r2, #28
 80054f6:	bf44      	itt	mi
 80054f8:	232b      	movmi	r3, #43	; 0x2b
 80054fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005502:	2b2a      	cmp	r3, #42	; 0x2a
 8005504:	d015      	beq.n	8005532 <_svfiprintf_r+0xf6>
 8005506:	9a07      	ldr	r2, [sp, #28]
 8005508:	4654      	mov	r4, sl
 800550a:	2000      	movs	r0, #0
 800550c:	f04f 0c0a 	mov.w	ip, #10
 8005510:	4621      	mov	r1, r4
 8005512:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005516:	3b30      	subs	r3, #48	; 0x30
 8005518:	2b09      	cmp	r3, #9
 800551a:	d94d      	bls.n	80055b8 <_svfiprintf_r+0x17c>
 800551c:	b1b0      	cbz	r0, 800554c <_svfiprintf_r+0x110>
 800551e:	9207      	str	r2, [sp, #28]
 8005520:	e014      	b.n	800554c <_svfiprintf_r+0x110>
 8005522:	eba0 0308 	sub.w	r3, r0, r8
 8005526:	fa09 f303 	lsl.w	r3, r9, r3
 800552a:	4313      	orrs	r3, r2
 800552c:	9304      	str	r3, [sp, #16]
 800552e:	46a2      	mov	sl, r4
 8005530:	e7d2      	b.n	80054d8 <_svfiprintf_r+0x9c>
 8005532:	9b03      	ldr	r3, [sp, #12]
 8005534:	1d19      	adds	r1, r3, #4
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	9103      	str	r1, [sp, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	bfbb      	ittet	lt
 800553e:	425b      	neglt	r3, r3
 8005540:	f042 0202 	orrlt.w	r2, r2, #2
 8005544:	9307      	strge	r3, [sp, #28]
 8005546:	9307      	strlt	r3, [sp, #28]
 8005548:	bfb8      	it	lt
 800554a:	9204      	strlt	r2, [sp, #16]
 800554c:	7823      	ldrb	r3, [r4, #0]
 800554e:	2b2e      	cmp	r3, #46	; 0x2e
 8005550:	d10c      	bne.n	800556c <_svfiprintf_r+0x130>
 8005552:	7863      	ldrb	r3, [r4, #1]
 8005554:	2b2a      	cmp	r3, #42	; 0x2a
 8005556:	d134      	bne.n	80055c2 <_svfiprintf_r+0x186>
 8005558:	9b03      	ldr	r3, [sp, #12]
 800555a:	1d1a      	adds	r2, r3, #4
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	9203      	str	r2, [sp, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	bfb8      	it	lt
 8005564:	f04f 33ff 	movlt.w	r3, #4294967295
 8005568:	3402      	adds	r4, #2
 800556a:	9305      	str	r3, [sp, #20]
 800556c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005634 <_svfiprintf_r+0x1f8>
 8005570:	7821      	ldrb	r1, [r4, #0]
 8005572:	2203      	movs	r2, #3
 8005574:	4650      	mov	r0, sl
 8005576:	f7fa fe3b 	bl	80001f0 <memchr>
 800557a:	b138      	cbz	r0, 800558c <_svfiprintf_r+0x150>
 800557c:	9b04      	ldr	r3, [sp, #16]
 800557e:	eba0 000a 	sub.w	r0, r0, sl
 8005582:	2240      	movs	r2, #64	; 0x40
 8005584:	4082      	lsls	r2, r0
 8005586:	4313      	orrs	r3, r2
 8005588:	3401      	adds	r4, #1
 800558a:	9304      	str	r3, [sp, #16]
 800558c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005590:	4825      	ldr	r0, [pc, #148]	; (8005628 <_svfiprintf_r+0x1ec>)
 8005592:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005596:	2206      	movs	r2, #6
 8005598:	f7fa fe2a 	bl	80001f0 <memchr>
 800559c:	2800      	cmp	r0, #0
 800559e:	d038      	beq.n	8005612 <_svfiprintf_r+0x1d6>
 80055a0:	4b22      	ldr	r3, [pc, #136]	; (800562c <_svfiprintf_r+0x1f0>)
 80055a2:	bb1b      	cbnz	r3, 80055ec <_svfiprintf_r+0x1b0>
 80055a4:	9b03      	ldr	r3, [sp, #12]
 80055a6:	3307      	adds	r3, #7
 80055a8:	f023 0307 	bic.w	r3, r3, #7
 80055ac:	3308      	adds	r3, #8
 80055ae:	9303      	str	r3, [sp, #12]
 80055b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055b2:	4433      	add	r3, r6
 80055b4:	9309      	str	r3, [sp, #36]	; 0x24
 80055b6:	e768      	b.n	800548a <_svfiprintf_r+0x4e>
 80055b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80055bc:	460c      	mov	r4, r1
 80055be:	2001      	movs	r0, #1
 80055c0:	e7a6      	b.n	8005510 <_svfiprintf_r+0xd4>
 80055c2:	2300      	movs	r3, #0
 80055c4:	3401      	adds	r4, #1
 80055c6:	9305      	str	r3, [sp, #20]
 80055c8:	4619      	mov	r1, r3
 80055ca:	f04f 0c0a 	mov.w	ip, #10
 80055ce:	4620      	mov	r0, r4
 80055d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055d4:	3a30      	subs	r2, #48	; 0x30
 80055d6:	2a09      	cmp	r2, #9
 80055d8:	d903      	bls.n	80055e2 <_svfiprintf_r+0x1a6>
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0c6      	beq.n	800556c <_svfiprintf_r+0x130>
 80055de:	9105      	str	r1, [sp, #20]
 80055e0:	e7c4      	b.n	800556c <_svfiprintf_r+0x130>
 80055e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80055e6:	4604      	mov	r4, r0
 80055e8:	2301      	movs	r3, #1
 80055ea:	e7f0      	b.n	80055ce <_svfiprintf_r+0x192>
 80055ec:	ab03      	add	r3, sp, #12
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	462a      	mov	r2, r5
 80055f2:	4b0f      	ldr	r3, [pc, #60]	; (8005630 <_svfiprintf_r+0x1f4>)
 80055f4:	a904      	add	r1, sp, #16
 80055f6:	4638      	mov	r0, r7
 80055f8:	f3af 8000 	nop.w
 80055fc:	1c42      	adds	r2, r0, #1
 80055fe:	4606      	mov	r6, r0
 8005600:	d1d6      	bne.n	80055b0 <_svfiprintf_r+0x174>
 8005602:	89ab      	ldrh	r3, [r5, #12]
 8005604:	065b      	lsls	r3, r3, #25
 8005606:	f53f af2d 	bmi.w	8005464 <_svfiprintf_r+0x28>
 800560a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800560c:	b01d      	add	sp, #116	; 0x74
 800560e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005612:	ab03      	add	r3, sp, #12
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	462a      	mov	r2, r5
 8005618:	4b05      	ldr	r3, [pc, #20]	; (8005630 <_svfiprintf_r+0x1f4>)
 800561a:	a904      	add	r1, sp, #16
 800561c:	4638      	mov	r0, r7
 800561e:	f000 f879 	bl	8005714 <_printf_i>
 8005622:	e7eb      	b.n	80055fc <_svfiprintf_r+0x1c0>
 8005624:	0800685a 	.word	0x0800685a
 8005628:	08006864 	.word	0x08006864
 800562c:	00000000 	.word	0x00000000
 8005630:	08005389 	.word	0x08005389
 8005634:	08006860 	.word	0x08006860

08005638 <_printf_common>:
 8005638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800563c:	4616      	mov	r6, r2
 800563e:	4699      	mov	r9, r3
 8005640:	688a      	ldr	r2, [r1, #8]
 8005642:	690b      	ldr	r3, [r1, #16]
 8005644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005648:	4293      	cmp	r3, r2
 800564a:	bfb8      	it	lt
 800564c:	4613      	movlt	r3, r2
 800564e:	6033      	str	r3, [r6, #0]
 8005650:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005654:	4607      	mov	r7, r0
 8005656:	460c      	mov	r4, r1
 8005658:	b10a      	cbz	r2, 800565e <_printf_common+0x26>
 800565a:	3301      	adds	r3, #1
 800565c:	6033      	str	r3, [r6, #0]
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	0699      	lsls	r1, r3, #26
 8005662:	bf42      	ittt	mi
 8005664:	6833      	ldrmi	r3, [r6, #0]
 8005666:	3302      	addmi	r3, #2
 8005668:	6033      	strmi	r3, [r6, #0]
 800566a:	6825      	ldr	r5, [r4, #0]
 800566c:	f015 0506 	ands.w	r5, r5, #6
 8005670:	d106      	bne.n	8005680 <_printf_common+0x48>
 8005672:	f104 0a19 	add.w	sl, r4, #25
 8005676:	68e3      	ldr	r3, [r4, #12]
 8005678:	6832      	ldr	r2, [r6, #0]
 800567a:	1a9b      	subs	r3, r3, r2
 800567c:	42ab      	cmp	r3, r5
 800567e:	dc26      	bgt.n	80056ce <_printf_common+0x96>
 8005680:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005684:	1e13      	subs	r3, r2, #0
 8005686:	6822      	ldr	r2, [r4, #0]
 8005688:	bf18      	it	ne
 800568a:	2301      	movne	r3, #1
 800568c:	0692      	lsls	r2, r2, #26
 800568e:	d42b      	bmi.n	80056e8 <_printf_common+0xb0>
 8005690:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005694:	4649      	mov	r1, r9
 8005696:	4638      	mov	r0, r7
 8005698:	47c0      	blx	r8
 800569a:	3001      	adds	r0, #1
 800569c:	d01e      	beq.n	80056dc <_printf_common+0xa4>
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	6922      	ldr	r2, [r4, #16]
 80056a2:	f003 0306 	and.w	r3, r3, #6
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	bf02      	ittt	eq
 80056aa:	68e5      	ldreq	r5, [r4, #12]
 80056ac:	6833      	ldreq	r3, [r6, #0]
 80056ae:	1aed      	subeq	r5, r5, r3
 80056b0:	68a3      	ldr	r3, [r4, #8]
 80056b2:	bf0c      	ite	eq
 80056b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056b8:	2500      	movne	r5, #0
 80056ba:	4293      	cmp	r3, r2
 80056bc:	bfc4      	itt	gt
 80056be:	1a9b      	subgt	r3, r3, r2
 80056c0:	18ed      	addgt	r5, r5, r3
 80056c2:	2600      	movs	r6, #0
 80056c4:	341a      	adds	r4, #26
 80056c6:	42b5      	cmp	r5, r6
 80056c8:	d11a      	bne.n	8005700 <_printf_common+0xc8>
 80056ca:	2000      	movs	r0, #0
 80056cc:	e008      	b.n	80056e0 <_printf_common+0xa8>
 80056ce:	2301      	movs	r3, #1
 80056d0:	4652      	mov	r2, sl
 80056d2:	4649      	mov	r1, r9
 80056d4:	4638      	mov	r0, r7
 80056d6:	47c0      	blx	r8
 80056d8:	3001      	adds	r0, #1
 80056da:	d103      	bne.n	80056e4 <_printf_common+0xac>
 80056dc:	f04f 30ff 	mov.w	r0, #4294967295
 80056e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056e4:	3501      	adds	r5, #1
 80056e6:	e7c6      	b.n	8005676 <_printf_common+0x3e>
 80056e8:	18e1      	adds	r1, r4, r3
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	2030      	movs	r0, #48	; 0x30
 80056ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056f2:	4422      	add	r2, r4
 80056f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056fc:	3302      	adds	r3, #2
 80056fe:	e7c7      	b.n	8005690 <_printf_common+0x58>
 8005700:	2301      	movs	r3, #1
 8005702:	4622      	mov	r2, r4
 8005704:	4649      	mov	r1, r9
 8005706:	4638      	mov	r0, r7
 8005708:	47c0      	blx	r8
 800570a:	3001      	adds	r0, #1
 800570c:	d0e6      	beq.n	80056dc <_printf_common+0xa4>
 800570e:	3601      	adds	r6, #1
 8005710:	e7d9      	b.n	80056c6 <_printf_common+0x8e>
	...

08005714 <_printf_i>:
 8005714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005718:	7e0f      	ldrb	r7, [r1, #24]
 800571a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800571c:	2f78      	cmp	r7, #120	; 0x78
 800571e:	4691      	mov	r9, r2
 8005720:	4680      	mov	r8, r0
 8005722:	460c      	mov	r4, r1
 8005724:	469a      	mov	sl, r3
 8005726:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800572a:	d807      	bhi.n	800573c <_printf_i+0x28>
 800572c:	2f62      	cmp	r7, #98	; 0x62
 800572e:	d80a      	bhi.n	8005746 <_printf_i+0x32>
 8005730:	2f00      	cmp	r7, #0
 8005732:	f000 80d4 	beq.w	80058de <_printf_i+0x1ca>
 8005736:	2f58      	cmp	r7, #88	; 0x58
 8005738:	f000 80c0 	beq.w	80058bc <_printf_i+0x1a8>
 800573c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005744:	e03a      	b.n	80057bc <_printf_i+0xa8>
 8005746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800574a:	2b15      	cmp	r3, #21
 800574c:	d8f6      	bhi.n	800573c <_printf_i+0x28>
 800574e:	a101      	add	r1, pc, #4	; (adr r1, 8005754 <_printf_i+0x40>)
 8005750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005754:	080057ad 	.word	0x080057ad
 8005758:	080057c1 	.word	0x080057c1
 800575c:	0800573d 	.word	0x0800573d
 8005760:	0800573d 	.word	0x0800573d
 8005764:	0800573d 	.word	0x0800573d
 8005768:	0800573d 	.word	0x0800573d
 800576c:	080057c1 	.word	0x080057c1
 8005770:	0800573d 	.word	0x0800573d
 8005774:	0800573d 	.word	0x0800573d
 8005778:	0800573d 	.word	0x0800573d
 800577c:	0800573d 	.word	0x0800573d
 8005780:	080058c5 	.word	0x080058c5
 8005784:	080057ed 	.word	0x080057ed
 8005788:	0800587f 	.word	0x0800587f
 800578c:	0800573d 	.word	0x0800573d
 8005790:	0800573d 	.word	0x0800573d
 8005794:	080058e7 	.word	0x080058e7
 8005798:	0800573d 	.word	0x0800573d
 800579c:	080057ed 	.word	0x080057ed
 80057a0:	0800573d 	.word	0x0800573d
 80057a4:	0800573d 	.word	0x0800573d
 80057a8:	08005887 	.word	0x08005887
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	1d1a      	adds	r2, r3, #4
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	602a      	str	r2, [r5, #0]
 80057b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057bc:	2301      	movs	r3, #1
 80057be:	e09f      	b.n	8005900 <_printf_i+0x1ec>
 80057c0:	6820      	ldr	r0, [r4, #0]
 80057c2:	682b      	ldr	r3, [r5, #0]
 80057c4:	0607      	lsls	r7, r0, #24
 80057c6:	f103 0104 	add.w	r1, r3, #4
 80057ca:	6029      	str	r1, [r5, #0]
 80057cc:	d501      	bpl.n	80057d2 <_printf_i+0xbe>
 80057ce:	681e      	ldr	r6, [r3, #0]
 80057d0:	e003      	b.n	80057da <_printf_i+0xc6>
 80057d2:	0646      	lsls	r6, r0, #25
 80057d4:	d5fb      	bpl.n	80057ce <_printf_i+0xba>
 80057d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80057da:	2e00      	cmp	r6, #0
 80057dc:	da03      	bge.n	80057e6 <_printf_i+0xd2>
 80057de:	232d      	movs	r3, #45	; 0x2d
 80057e0:	4276      	negs	r6, r6
 80057e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057e6:	485a      	ldr	r0, [pc, #360]	; (8005950 <_printf_i+0x23c>)
 80057e8:	230a      	movs	r3, #10
 80057ea:	e012      	b.n	8005812 <_printf_i+0xfe>
 80057ec:	682b      	ldr	r3, [r5, #0]
 80057ee:	6820      	ldr	r0, [r4, #0]
 80057f0:	1d19      	adds	r1, r3, #4
 80057f2:	6029      	str	r1, [r5, #0]
 80057f4:	0605      	lsls	r5, r0, #24
 80057f6:	d501      	bpl.n	80057fc <_printf_i+0xe8>
 80057f8:	681e      	ldr	r6, [r3, #0]
 80057fa:	e002      	b.n	8005802 <_printf_i+0xee>
 80057fc:	0641      	lsls	r1, r0, #25
 80057fe:	d5fb      	bpl.n	80057f8 <_printf_i+0xe4>
 8005800:	881e      	ldrh	r6, [r3, #0]
 8005802:	4853      	ldr	r0, [pc, #332]	; (8005950 <_printf_i+0x23c>)
 8005804:	2f6f      	cmp	r7, #111	; 0x6f
 8005806:	bf0c      	ite	eq
 8005808:	2308      	moveq	r3, #8
 800580a:	230a      	movne	r3, #10
 800580c:	2100      	movs	r1, #0
 800580e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005812:	6865      	ldr	r5, [r4, #4]
 8005814:	60a5      	str	r5, [r4, #8]
 8005816:	2d00      	cmp	r5, #0
 8005818:	bfa2      	ittt	ge
 800581a:	6821      	ldrge	r1, [r4, #0]
 800581c:	f021 0104 	bicge.w	r1, r1, #4
 8005820:	6021      	strge	r1, [r4, #0]
 8005822:	b90e      	cbnz	r6, 8005828 <_printf_i+0x114>
 8005824:	2d00      	cmp	r5, #0
 8005826:	d04b      	beq.n	80058c0 <_printf_i+0x1ac>
 8005828:	4615      	mov	r5, r2
 800582a:	fbb6 f1f3 	udiv	r1, r6, r3
 800582e:	fb03 6711 	mls	r7, r3, r1, r6
 8005832:	5dc7      	ldrb	r7, [r0, r7]
 8005834:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005838:	4637      	mov	r7, r6
 800583a:	42bb      	cmp	r3, r7
 800583c:	460e      	mov	r6, r1
 800583e:	d9f4      	bls.n	800582a <_printf_i+0x116>
 8005840:	2b08      	cmp	r3, #8
 8005842:	d10b      	bne.n	800585c <_printf_i+0x148>
 8005844:	6823      	ldr	r3, [r4, #0]
 8005846:	07de      	lsls	r6, r3, #31
 8005848:	d508      	bpl.n	800585c <_printf_i+0x148>
 800584a:	6923      	ldr	r3, [r4, #16]
 800584c:	6861      	ldr	r1, [r4, #4]
 800584e:	4299      	cmp	r1, r3
 8005850:	bfde      	ittt	le
 8005852:	2330      	movle	r3, #48	; 0x30
 8005854:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005858:	f105 35ff 	addle.w	r5, r5, #4294967295
 800585c:	1b52      	subs	r2, r2, r5
 800585e:	6122      	str	r2, [r4, #16]
 8005860:	f8cd a000 	str.w	sl, [sp]
 8005864:	464b      	mov	r3, r9
 8005866:	aa03      	add	r2, sp, #12
 8005868:	4621      	mov	r1, r4
 800586a:	4640      	mov	r0, r8
 800586c:	f7ff fee4 	bl	8005638 <_printf_common>
 8005870:	3001      	adds	r0, #1
 8005872:	d14a      	bne.n	800590a <_printf_i+0x1f6>
 8005874:	f04f 30ff 	mov.w	r0, #4294967295
 8005878:	b004      	add	sp, #16
 800587a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	f043 0320 	orr.w	r3, r3, #32
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	4833      	ldr	r0, [pc, #204]	; (8005954 <_printf_i+0x240>)
 8005888:	2778      	movs	r7, #120	; 0x78
 800588a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	6829      	ldr	r1, [r5, #0]
 8005892:	061f      	lsls	r7, r3, #24
 8005894:	f851 6b04 	ldr.w	r6, [r1], #4
 8005898:	d402      	bmi.n	80058a0 <_printf_i+0x18c>
 800589a:	065f      	lsls	r7, r3, #25
 800589c:	bf48      	it	mi
 800589e:	b2b6      	uxthmi	r6, r6
 80058a0:	07df      	lsls	r7, r3, #31
 80058a2:	bf48      	it	mi
 80058a4:	f043 0320 	orrmi.w	r3, r3, #32
 80058a8:	6029      	str	r1, [r5, #0]
 80058aa:	bf48      	it	mi
 80058ac:	6023      	strmi	r3, [r4, #0]
 80058ae:	b91e      	cbnz	r6, 80058b8 <_printf_i+0x1a4>
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	f023 0320 	bic.w	r3, r3, #32
 80058b6:	6023      	str	r3, [r4, #0]
 80058b8:	2310      	movs	r3, #16
 80058ba:	e7a7      	b.n	800580c <_printf_i+0xf8>
 80058bc:	4824      	ldr	r0, [pc, #144]	; (8005950 <_printf_i+0x23c>)
 80058be:	e7e4      	b.n	800588a <_printf_i+0x176>
 80058c0:	4615      	mov	r5, r2
 80058c2:	e7bd      	b.n	8005840 <_printf_i+0x12c>
 80058c4:	682b      	ldr	r3, [r5, #0]
 80058c6:	6826      	ldr	r6, [r4, #0]
 80058c8:	6961      	ldr	r1, [r4, #20]
 80058ca:	1d18      	adds	r0, r3, #4
 80058cc:	6028      	str	r0, [r5, #0]
 80058ce:	0635      	lsls	r5, r6, #24
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	d501      	bpl.n	80058d8 <_printf_i+0x1c4>
 80058d4:	6019      	str	r1, [r3, #0]
 80058d6:	e002      	b.n	80058de <_printf_i+0x1ca>
 80058d8:	0670      	lsls	r0, r6, #25
 80058da:	d5fb      	bpl.n	80058d4 <_printf_i+0x1c0>
 80058dc:	8019      	strh	r1, [r3, #0]
 80058de:	2300      	movs	r3, #0
 80058e0:	6123      	str	r3, [r4, #16]
 80058e2:	4615      	mov	r5, r2
 80058e4:	e7bc      	b.n	8005860 <_printf_i+0x14c>
 80058e6:	682b      	ldr	r3, [r5, #0]
 80058e8:	1d1a      	adds	r2, r3, #4
 80058ea:	602a      	str	r2, [r5, #0]
 80058ec:	681d      	ldr	r5, [r3, #0]
 80058ee:	6862      	ldr	r2, [r4, #4]
 80058f0:	2100      	movs	r1, #0
 80058f2:	4628      	mov	r0, r5
 80058f4:	f7fa fc7c 	bl	80001f0 <memchr>
 80058f8:	b108      	cbz	r0, 80058fe <_printf_i+0x1ea>
 80058fa:	1b40      	subs	r0, r0, r5
 80058fc:	6060      	str	r0, [r4, #4]
 80058fe:	6863      	ldr	r3, [r4, #4]
 8005900:	6123      	str	r3, [r4, #16]
 8005902:	2300      	movs	r3, #0
 8005904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005908:	e7aa      	b.n	8005860 <_printf_i+0x14c>
 800590a:	6923      	ldr	r3, [r4, #16]
 800590c:	462a      	mov	r2, r5
 800590e:	4649      	mov	r1, r9
 8005910:	4640      	mov	r0, r8
 8005912:	47d0      	blx	sl
 8005914:	3001      	adds	r0, #1
 8005916:	d0ad      	beq.n	8005874 <_printf_i+0x160>
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	079b      	lsls	r3, r3, #30
 800591c:	d413      	bmi.n	8005946 <_printf_i+0x232>
 800591e:	68e0      	ldr	r0, [r4, #12]
 8005920:	9b03      	ldr	r3, [sp, #12]
 8005922:	4298      	cmp	r0, r3
 8005924:	bfb8      	it	lt
 8005926:	4618      	movlt	r0, r3
 8005928:	e7a6      	b.n	8005878 <_printf_i+0x164>
 800592a:	2301      	movs	r3, #1
 800592c:	4632      	mov	r2, r6
 800592e:	4649      	mov	r1, r9
 8005930:	4640      	mov	r0, r8
 8005932:	47d0      	blx	sl
 8005934:	3001      	adds	r0, #1
 8005936:	d09d      	beq.n	8005874 <_printf_i+0x160>
 8005938:	3501      	adds	r5, #1
 800593a:	68e3      	ldr	r3, [r4, #12]
 800593c:	9903      	ldr	r1, [sp, #12]
 800593e:	1a5b      	subs	r3, r3, r1
 8005940:	42ab      	cmp	r3, r5
 8005942:	dcf2      	bgt.n	800592a <_printf_i+0x216>
 8005944:	e7eb      	b.n	800591e <_printf_i+0x20a>
 8005946:	2500      	movs	r5, #0
 8005948:	f104 0619 	add.w	r6, r4, #25
 800594c:	e7f5      	b.n	800593a <_printf_i+0x226>
 800594e:	bf00      	nop
 8005950:	0800686b 	.word	0x0800686b
 8005954:	0800687c 	.word	0x0800687c

08005958 <__sflush_r>:
 8005958:	898a      	ldrh	r2, [r1, #12]
 800595a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800595e:	4605      	mov	r5, r0
 8005960:	0710      	lsls	r0, r2, #28
 8005962:	460c      	mov	r4, r1
 8005964:	d458      	bmi.n	8005a18 <__sflush_r+0xc0>
 8005966:	684b      	ldr	r3, [r1, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	dc05      	bgt.n	8005978 <__sflush_r+0x20>
 800596c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800596e:	2b00      	cmp	r3, #0
 8005970:	dc02      	bgt.n	8005978 <__sflush_r+0x20>
 8005972:	2000      	movs	r0, #0
 8005974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800597a:	2e00      	cmp	r6, #0
 800597c:	d0f9      	beq.n	8005972 <__sflush_r+0x1a>
 800597e:	2300      	movs	r3, #0
 8005980:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005984:	682f      	ldr	r7, [r5, #0]
 8005986:	6a21      	ldr	r1, [r4, #32]
 8005988:	602b      	str	r3, [r5, #0]
 800598a:	d032      	beq.n	80059f2 <__sflush_r+0x9a>
 800598c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	075a      	lsls	r2, r3, #29
 8005992:	d505      	bpl.n	80059a0 <__sflush_r+0x48>
 8005994:	6863      	ldr	r3, [r4, #4]
 8005996:	1ac0      	subs	r0, r0, r3
 8005998:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800599a:	b10b      	cbz	r3, 80059a0 <__sflush_r+0x48>
 800599c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800599e:	1ac0      	subs	r0, r0, r3
 80059a0:	2300      	movs	r3, #0
 80059a2:	4602      	mov	r2, r0
 80059a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059a6:	6a21      	ldr	r1, [r4, #32]
 80059a8:	4628      	mov	r0, r5
 80059aa:	47b0      	blx	r6
 80059ac:	1c43      	adds	r3, r0, #1
 80059ae:	89a3      	ldrh	r3, [r4, #12]
 80059b0:	d106      	bne.n	80059c0 <__sflush_r+0x68>
 80059b2:	6829      	ldr	r1, [r5, #0]
 80059b4:	291d      	cmp	r1, #29
 80059b6:	d82b      	bhi.n	8005a10 <__sflush_r+0xb8>
 80059b8:	4a29      	ldr	r2, [pc, #164]	; (8005a60 <__sflush_r+0x108>)
 80059ba:	410a      	asrs	r2, r1
 80059bc:	07d6      	lsls	r6, r2, #31
 80059be:	d427      	bmi.n	8005a10 <__sflush_r+0xb8>
 80059c0:	2200      	movs	r2, #0
 80059c2:	6062      	str	r2, [r4, #4]
 80059c4:	04d9      	lsls	r1, r3, #19
 80059c6:	6922      	ldr	r2, [r4, #16]
 80059c8:	6022      	str	r2, [r4, #0]
 80059ca:	d504      	bpl.n	80059d6 <__sflush_r+0x7e>
 80059cc:	1c42      	adds	r2, r0, #1
 80059ce:	d101      	bne.n	80059d4 <__sflush_r+0x7c>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	b903      	cbnz	r3, 80059d6 <__sflush_r+0x7e>
 80059d4:	6560      	str	r0, [r4, #84]	; 0x54
 80059d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059d8:	602f      	str	r7, [r5, #0]
 80059da:	2900      	cmp	r1, #0
 80059dc:	d0c9      	beq.n	8005972 <__sflush_r+0x1a>
 80059de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059e2:	4299      	cmp	r1, r3
 80059e4:	d002      	beq.n	80059ec <__sflush_r+0x94>
 80059e6:	4628      	mov	r0, r5
 80059e8:	f7ff fc82 	bl	80052f0 <_free_r>
 80059ec:	2000      	movs	r0, #0
 80059ee:	6360      	str	r0, [r4, #52]	; 0x34
 80059f0:	e7c0      	b.n	8005974 <__sflush_r+0x1c>
 80059f2:	2301      	movs	r3, #1
 80059f4:	4628      	mov	r0, r5
 80059f6:	47b0      	blx	r6
 80059f8:	1c41      	adds	r1, r0, #1
 80059fa:	d1c8      	bne.n	800598e <__sflush_r+0x36>
 80059fc:	682b      	ldr	r3, [r5, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d0c5      	beq.n	800598e <__sflush_r+0x36>
 8005a02:	2b1d      	cmp	r3, #29
 8005a04:	d001      	beq.n	8005a0a <__sflush_r+0xb2>
 8005a06:	2b16      	cmp	r3, #22
 8005a08:	d101      	bne.n	8005a0e <__sflush_r+0xb6>
 8005a0a:	602f      	str	r7, [r5, #0]
 8005a0c:	e7b1      	b.n	8005972 <__sflush_r+0x1a>
 8005a0e:	89a3      	ldrh	r3, [r4, #12]
 8005a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a14:	81a3      	strh	r3, [r4, #12]
 8005a16:	e7ad      	b.n	8005974 <__sflush_r+0x1c>
 8005a18:	690f      	ldr	r7, [r1, #16]
 8005a1a:	2f00      	cmp	r7, #0
 8005a1c:	d0a9      	beq.n	8005972 <__sflush_r+0x1a>
 8005a1e:	0793      	lsls	r3, r2, #30
 8005a20:	680e      	ldr	r6, [r1, #0]
 8005a22:	bf08      	it	eq
 8005a24:	694b      	ldreq	r3, [r1, #20]
 8005a26:	600f      	str	r7, [r1, #0]
 8005a28:	bf18      	it	ne
 8005a2a:	2300      	movne	r3, #0
 8005a2c:	eba6 0807 	sub.w	r8, r6, r7
 8005a30:	608b      	str	r3, [r1, #8]
 8005a32:	f1b8 0f00 	cmp.w	r8, #0
 8005a36:	dd9c      	ble.n	8005972 <__sflush_r+0x1a>
 8005a38:	6a21      	ldr	r1, [r4, #32]
 8005a3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a3c:	4643      	mov	r3, r8
 8005a3e:	463a      	mov	r2, r7
 8005a40:	4628      	mov	r0, r5
 8005a42:	47b0      	blx	r6
 8005a44:	2800      	cmp	r0, #0
 8005a46:	dc06      	bgt.n	8005a56 <__sflush_r+0xfe>
 8005a48:	89a3      	ldrh	r3, [r4, #12]
 8005a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a4e:	81a3      	strh	r3, [r4, #12]
 8005a50:	f04f 30ff 	mov.w	r0, #4294967295
 8005a54:	e78e      	b.n	8005974 <__sflush_r+0x1c>
 8005a56:	4407      	add	r7, r0
 8005a58:	eba8 0800 	sub.w	r8, r8, r0
 8005a5c:	e7e9      	b.n	8005a32 <__sflush_r+0xda>
 8005a5e:	bf00      	nop
 8005a60:	dfbffffe 	.word	0xdfbffffe

08005a64 <_fflush_r>:
 8005a64:	b538      	push	{r3, r4, r5, lr}
 8005a66:	690b      	ldr	r3, [r1, #16]
 8005a68:	4605      	mov	r5, r0
 8005a6a:	460c      	mov	r4, r1
 8005a6c:	b913      	cbnz	r3, 8005a74 <_fflush_r+0x10>
 8005a6e:	2500      	movs	r5, #0
 8005a70:	4628      	mov	r0, r5
 8005a72:	bd38      	pop	{r3, r4, r5, pc}
 8005a74:	b118      	cbz	r0, 8005a7e <_fflush_r+0x1a>
 8005a76:	6a03      	ldr	r3, [r0, #32]
 8005a78:	b90b      	cbnz	r3, 8005a7e <_fflush_r+0x1a>
 8005a7a:	f7ff fa81 	bl	8004f80 <__sinit>
 8005a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0f3      	beq.n	8005a6e <_fflush_r+0xa>
 8005a86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a88:	07d0      	lsls	r0, r2, #31
 8005a8a:	d404      	bmi.n	8005a96 <_fflush_r+0x32>
 8005a8c:	0599      	lsls	r1, r3, #22
 8005a8e:	d402      	bmi.n	8005a96 <_fflush_r+0x32>
 8005a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a92:	f7ff fc05 	bl	80052a0 <__retarget_lock_acquire_recursive>
 8005a96:	4628      	mov	r0, r5
 8005a98:	4621      	mov	r1, r4
 8005a9a:	f7ff ff5d 	bl	8005958 <__sflush_r>
 8005a9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005aa0:	07da      	lsls	r2, r3, #31
 8005aa2:	4605      	mov	r5, r0
 8005aa4:	d4e4      	bmi.n	8005a70 <_fflush_r+0xc>
 8005aa6:	89a3      	ldrh	r3, [r4, #12]
 8005aa8:	059b      	lsls	r3, r3, #22
 8005aaa:	d4e1      	bmi.n	8005a70 <_fflush_r+0xc>
 8005aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aae:	f7ff fbf8 	bl	80052a2 <__retarget_lock_release_recursive>
 8005ab2:	e7dd      	b.n	8005a70 <_fflush_r+0xc>

08005ab4 <fiprintf>:
 8005ab4:	b40e      	push	{r1, r2, r3}
 8005ab6:	b503      	push	{r0, r1, lr}
 8005ab8:	4601      	mov	r1, r0
 8005aba:	ab03      	add	r3, sp, #12
 8005abc:	4805      	ldr	r0, [pc, #20]	; (8005ad4 <fiprintf+0x20>)
 8005abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ac2:	6800      	ldr	r0, [r0, #0]
 8005ac4:	9301      	str	r3, [sp, #4]
 8005ac6:	f000 f88f 	bl	8005be8 <_vfiprintf_r>
 8005aca:	b002      	add	sp, #8
 8005acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ad0:	b003      	add	sp, #12
 8005ad2:	4770      	bx	lr
 8005ad4:	20000070 	.word	0x20000070

08005ad8 <memmove>:
 8005ad8:	4288      	cmp	r0, r1
 8005ada:	b510      	push	{r4, lr}
 8005adc:	eb01 0402 	add.w	r4, r1, r2
 8005ae0:	d902      	bls.n	8005ae8 <memmove+0x10>
 8005ae2:	4284      	cmp	r4, r0
 8005ae4:	4623      	mov	r3, r4
 8005ae6:	d807      	bhi.n	8005af8 <memmove+0x20>
 8005ae8:	1e43      	subs	r3, r0, #1
 8005aea:	42a1      	cmp	r1, r4
 8005aec:	d008      	beq.n	8005b00 <memmove+0x28>
 8005aee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005af2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005af6:	e7f8      	b.n	8005aea <memmove+0x12>
 8005af8:	4402      	add	r2, r0
 8005afa:	4601      	mov	r1, r0
 8005afc:	428a      	cmp	r2, r1
 8005afe:	d100      	bne.n	8005b02 <memmove+0x2a>
 8005b00:	bd10      	pop	{r4, pc}
 8005b02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b0a:	e7f7      	b.n	8005afc <memmove+0x24>

08005b0c <memcpy>:
 8005b0c:	440a      	add	r2, r1
 8005b0e:	4291      	cmp	r1, r2
 8005b10:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b14:	d100      	bne.n	8005b18 <memcpy+0xc>
 8005b16:	4770      	bx	lr
 8005b18:	b510      	push	{r4, lr}
 8005b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b22:	4291      	cmp	r1, r2
 8005b24:	d1f9      	bne.n	8005b1a <memcpy+0xe>
 8005b26:	bd10      	pop	{r4, pc}

08005b28 <abort>:
 8005b28:	b508      	push	{r3, lr}
 8005b2a:	2006      	movs	r0, #6
 8005b2c:	f000 fa34 	bl	8005f98 <raise>
 8005b30:	2001      	movs	r0, #1
 8005b32:	f7fc fc5d 	bl	80023f0 <_exit>

08005b36 <_realloc_r>:
 8005b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b3a:	4680      	mov	r8, r0
 8005b3c:	4614      	mov	r4, r2
 8005b3e:	460e      	mov	r6, r1
 8005b40:	b921      	cbnz	r1, 8005b4c <_realloc_r+0x16>
 8005b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b46:	4611      	mov	r1, r2
 8005b48:	f7ff b888 	b.w	8004c5c <_malloc_r>
 8005b4c:	b92a      	cbnz	r2, 8005b5a <_realloc_r+0x24>
 8005b4e:	f7ff fbcf 	bl	80052f0 <_free_r>
 8005b52:	4625      	mov	r5, r4
 8005b54:	4628      	mov	r0, r5
 8005b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b5a:	f000 fa39 	bl	8005fd0 <_malloc_usable_size_r>
 8005b5e:	4284      	cmp	r4, r0
 8005b60:	4607      	mov	r7, r0
 8005b62:	d802      	bhi.n	8005b6a <_realloc_r+0x34>
 8005b64:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b68:	d812      	bhi.n	8005b90 <_realloc_r+0x5a>
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	4640      	mov	r0, r8
 8005b6e:	f7ff f875 	bl	8004c5c <_malloc_r>
 8005b72:	4605      	mov	r5, r0
 8005b74:	2800      	cmp	r0, #0
 8005b76:	d0ed      	beq.n	8005b54 <_realloc_r+0x1e>
 8005b78:	42bc      	cmp	r4, r7
 8005b7a:	4622      	mov	r2, r4
 8005b7c:	4631      	mov	r1, r6
 8005b7e:	bf28      	it	cs
 8005b80:	463a      	movcs	r2, r7
 8005b82:	f7ff ffc3 	bl	8005b0c <memcpy>
 8005b86:	4631      	mov	r1, r6
 8005b88:	4640      	mov	r0, r8
 8005b8a:	f7ff fbb1 	bl	80052f0 <_free_r>
 8005b8e:	e7e1      	b.n	8005b54 <_realloc_r+0x1e>
 8005b90:	4635      	mov	r5, r6
 8005b92:	e7df      	b.n	8005b54 <_realloc_r+0x1e>

08005b94 <__sfputc_r>:
 8005b94:	6893      	ldr	r3, [r2, #8]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	b410      	push	{r4}
 8005b9c:	6093      	str	r3, [r2, #8]
 8005b9e:	da08      	bge.n	8005bb2 <__sfputc_r+0x1e>
 8005ba0:	6994      	ldr	r4, [r2, #24]
 8005ba2:	42a3      	cmp	r3, r4
 8005ba4:	db01      	blt.n	8005baa <__sfputc_r+0x16>
 8005ba6:	290a      	cmp	r1, #10
 8005ba8:	d103      	bne.n	8005bb2 <__sfputc_r+0x1e>
 8005baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bae:	f000 b935 	b.w	8005e1c <__swbuf_r>
 8005bb2:	6813      	ldr	r3, [r2, #0]
 8005bb4:	1c58      	adds	r0, r3, #1
 8005bb6:	6010      	str	r0, [r2, #0]
 8005bb8:	7019      	strb	r1, [r3, #0]
 8005bba:	4608      	mov	r0, r1
 8005bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <__sfputs_r>:
 8005bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc4:	4606      	mov	r6, r0
 8005bc6:	460f      	mov	r7, r1
 8005bc8:	4614      	mov	r4, r2
 8005bca:	18d5      	adds	r5, r2, r3
 8005bcc:	42ac      	cmp	r4, r5
 8005bce:	d101      	bne.n	8005bd4 <__sfputs_r+0x12>
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	e007      	b.n	8005be4 <__sfputs_r+0x22>
 8005bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bd8:	463a      	mov	r2, r7
 8005bda:	4630      	mov	r0, r6
 8005bdc:	f7ff ffda 	bl	8005b94 <__sfputc_r>
 8005be0:	1c43      	adds	r3, r0, #1
 8005be2:	d1f3      	bne.n	8005bcc <__sfputs_r+0xa>
 8005be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005be8 <_vfiprintf_r>:
 8005be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bec:	460d      	mov	r5, r1
 8005bee:	b09d      	sub	sp, #116	; 0x74
 8005bf0:	4614      	mov	r4, r2
 8005bf2:	4698      	mov	r8, r3
 8005bf4:	4606      	mov	r6, r0
 8005bf6:	b118      	cbz	r0, 8005c00 <_vfiprintf_r+0x18>
 8005bf8:	6a03      	ldr	r3, [r0, #32]
 8005bfa:	b90b      	cbnz	r3, 8005c00 <_vfiprintf_r+0x18>
 8005bfc:	f7ff f9c0 	bl	8004f80 <__sinit>
 8005c00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c02:	07d9      	lsls	r1, r3, #31
 8005c04:	d405      	bmi.n	8005c12 <_vfiprintf_r+0x2a>
 8005c06:	89ab      	ldrh	r3, [r5, #12]
 8005c08:	059a      	lsls	r2, r3, #22
 8005c0a:	d402      	bmi.n	8005c12 <_vfiprintf_r+0x2a>
 8005c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c0e:	f7ff fb47 	bl	80052a0 <__retarget_lock_acquire_recursive>
 8005c12:	89ab      	ldrh	r3, [r5, #12]
 8005c14:	071b      	lsls	r3, r3, #28
 8005c16:	d501      	bpl.n	8005c1c <_vfiprintf_r+0x34>
 8005c18:	692b      	ldr	r3, [r5, #16]
 8005c1a:	b99b      	cbnz	r3, 8005c44 <_vfiprintf_r+0x5c>
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f000 f93a 	bl	8005e98 <__swsetup_r>
 8005c24:	b170      	cbz	r0, 8005c44 <_vfiprintf_r+0x5c>
 8005c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c28:	07dc      	lsls	r4, r3, #31
 8005c2a:	d504      	bpl.n	8005c36 <_vfiprintf_r+0x4e>
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c30:	b01d      	add	sp, #116	; 0x74
 8005c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c36:	89ab      	ldrh	r3, [r5, #12]
 8005c38:	0598      	lsls	r0, r3, #22
 8005c3a:	d4f7      	bmi.n	8005c2c <_vfiprintf_r+0x44>
 8005c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c3e:	f7ff fb30 	bl	80052a2 <__retarget_lock_release_recursive>
 8005c42:	e7f3      	b.n	8005c2c <_vfiprintf_r+0x44>
 8005c44:	2300      	movs	r3, #0
 8005c46:	9309      	str	r3, [sp, #36]	; 0x24
 8005c48:	2320      	movs	r3, #32
 8005c4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c52:	2330      	movs	r3, #48	; 0x30
 8005c54:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005e08 <_vfiprintf_r+0x220>
 8005c58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c5c:	f04f 0901 	mov.w	r9, #1
 8005c60:	4623      	mov	r3, r4
 8005c62:	469a      	mov	sl, r3
 8005c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c68:	b10a      	cbz	r2, 8005c6e <_vfiprintf_r+0x86>
 8005c6a:	2a25      	cmp	r2, #37	; 0x25
 8005c6c:	d1f9      	bne.n	8005c62 <_vfiprintf_r+0x7a>
 8005c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8005c72:	d00b      	beq.n	8005c8c <_vfiprintf_r+0xa4>
 8005c74:	465b      	mov	r3, fp
 8005c76:	4622      	mov	r2, r4
 8005c78:	4629      	mov	r1, r5
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	f7ff ffa1 	bl	8005bc2 <__sfputs_r>
 8005c80:	3001      	adds	r0, #1
 8005c82:	f000 80a9 	beq.w	8005dd8 <_vfiprintf_r+0x1f0>
 8005c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c88:	445a      	add	r2, fp
 8005c8a:	9209      	str	r2, [sp, #36]	; 0x24
 8005c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 80a1 	beq.w	8005dd8 <_vfiprintf_r+0x1f0>
 8005c96:	2300      	movs	r3, #0
 8005c98:	f04f 32ff 	mov.w	r2, #4294967295
 8005c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ca0:	f10a 0a01 	add.w	sl, sl, #1
 8005ca4:	9304      	str	r3, [sp, #16]
 8005ca6:	9307      	str	r3, [sp, #28]
 8005ca8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cac:	931a      	str	r3, [sp, #104]	; 0x68
 8005cae:	4654      	mov	r4, sl
 8005cb0:	2205      	movs	r2, #5
 8005cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cb6:	4854      	ldr	r0, [pc, #336]	; (8005e08 <_vfiprintf_r+0x220>)
 8005cb8:	f7fa fa9a 	bl	80001f0 <memchr>
 8005cbc:	9a04      	ldr	r2, [sp, #16]
 8005cbe:	b9d8      	cbnz	r0, 8005cf8 <_vfiprintf_r+0x110>
 8005cc0:	06d1      	lsls	r1, r2, #27
 8005cc2:	bf44      	itt	mi
 8005cc4:	2320      	movmi	r3, #32
 8005cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cca:	0713      	lsls	r3, r2, #28
 8005ccc:	bf44      	itt	mi
 8005cce:	232b      	movmi	r3, #43	; 0x2b
 8005cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8005cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8005cda:	d015      	beq.n	8005d08 <_vfiprintf_r+0x120>
 8005cdc:	9a07      	ldr	r2, [sp, #28]
 8005cde:	4654      	mov	r4, sl
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	f04f 0c0a 	mov.w	ip, #10
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cec:	3b30      	subs	r3, #48	; 0x30
 8005cee:	2b09      	cmp	r3, #9
 8005cf0:	d94d      	bls.n	8005d8e <_vfiprintf_r+0x1a6>
 8005cf2:	b1b0      	cbz	r0, 8005d22 <_vfiprintf_r+0x13a>
 8005cf4:	9207      	str	r2, [sp, #28]
 8005cf6:	e014      	b.n	8005d22 <_vfiprintf_r+0x13a>
 8005cf8:	eba0 0308 	sub.w	r3, r0, r8
 8005cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8005d00:	4313      	orrs	r3, r2
 8005d02:	9304      	str	r3, [sp, #16]
 8005d04:	46a2      	mov	sl, r4
 8005d06:	e7d2      	b.n	8005cae <_vfiprintf_r+0xc6>
 8005d08:	9b03      	ldr	r3, [sp, #12]
 8005d0a:	1d19      	adds	r1, r3, #4
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	9103      	str	r1, [sp, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	bfbb      	ittet	lt
 8005d14:	425b      	neglt	r3, r3
 8005d16:	f042 0202 	orrlt.w	r2, r2, #2
 8005d1a:	9307      	strge	r3, [sp, #28]
 8005d1c:	9307      	strlt	r3, [sp, #28]
 8005d1e:	bfb8      	it	lt
 8005d20:	9204      	strlt	r2, [sp, #16]
 8005d22:	7823      	ldrb	r3, [r4, #0]
 8005d24:	2b2e      	cmp	r3, #46	; 0x2e
 8005d26:	d10c      	bne.n	8005d42 <_vfiprintf_r+0x15a>
 8005d28:	7863      	ldrb	r3, [r4, #1]
 8005d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005d2c:	d134      	bne.n	8005d98 <_vfiprintf_r+0x1b0>
 8005d2e:	9b03      	ldr	r3, [sp, #12]
 8005d30:	1d1a      	adds	r2, r3, #4
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	9203      	str	r2, [sp, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	bfb8      	it	lt
 8005d3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d3e:	3402      	adds	r4, #2
 8005d40:	9305      	str	r3, [sp, #20]
 8005d42:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005e18 <_vfiprintf_r+0x230>
 8005d46:	7821      	ldrb	r1, [r4, #0]
 8005d48:	2203      	movs	r2, #3
 8005d4a:	4650      	mov	r0, sl
 8005d4c:	f7fa fa50 	bl	80001f0 <memchr>
 8005d50:	b138      	cbz	r0, 8005d62 <_vfiprintf_r+0x17a>
 8005d52:	9b04      	ldr	r3, [sp, #16]
 8005d54:	eba0 000a 	sub.w	r0, r0, sl
 8005d58:	2240      	movs	r2, #64	; 0x40
 8005d5a:	4082      	lsls	r2, r0
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	3401      	adds	r4, #1
 8005d60:	9304      	str	r3, [sp, #16]
 8005d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d66:	4829      	ldr	r0, [pc, #164]	; (8005e0c <_vfiprintf_r+0x224>)
 8005d68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d6c:	2206      	movs	r2, #6
 8005d6e:	f7fa fa3f 	bl	80001f0 <memchr>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d03f      	beq.n	8005df6 <_vfiprintf_r+0x20e>
 8005d76:	4b26      	ldr	r3, [pc, #152]	; (8005e10 <_vfiprintf_r+0x228>)
 8005d78:	bb1b      	cbnz	r3, 8005dc2 <_vfiprintf_r+0x1da>
 8005d7a:	9b03      	ldr	r3, [sp, #12]
 8005d7c:	3307      	adds	r3, #7
 8005d7e:	f023 0307 	bic.w	r3, r3, #7
 8005d82:	3308      	adds	r3, #8
 8005d84:	9303      	str	r3, [sp, #12]
 8005d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d88:	443b      	add	r3, r7
 8005d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d8c:	e768      	b.n	8005c60 <_vfiprintf_r+0x78>
 8005d8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d92:	460c      	mov	r4, r1
 8005d94:	2001      	movs	r0, #1
 8005d96:	e7a6      	b.n	8005ce6 <_vfiprintf_r+0xfe>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	3401      	adds	r4, #1
 8005d9c:	9305      	str	r3, [sp, #20]
 8005d9e:	4619      	mov	r1, r3
 8005da0:	f04f 0c0a 	mov.w	ip, #10
 8005da4:	4620      	mov	r0, r4
 8005da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005daa:	3a30      	subs	r2, #48	; 0x30
 8005dac:	2a09      	cmp	r2, #9
 8005dae:	d903      	bls.n	8005db8 <_vfiprintf_r+0x1d0>
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0c6      	beq.n	8005d42 <_vfiprintf_r+0x15a>
 8005db4:	9105      	str	r1, [sp, #20]
 8005db6:	e7c4      	b.n	8005d42 <_vfiprintf_r+0x15a>
 8005db8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e7f0      	b.n	8005da4 <_vfiprintf_r+0x1bc>
 8005dc2:	ab03      	add	r3, sp, #12
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	462a      	mov	r2, r5
 8005dc8:	4b12      	ldr	r3, [pc, #72]	; (8005e14 <_vfiprintf_r+0x22c>)
 8005dca:	a904      	add	r1, sp, #16
 8005dcc:	4630      	mov	r0, r6
 8005dce:	f3af 8000 	nop.w
 8005dd2:	4607      	mov	r7, r0
 8005dd4:	1c78      	adds	r0, r7, #1
 8005dd6:	d1d6      	bne.n	8005d86 <_vfiprintf_r+0x19e>
 8005dd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dda:	07d9      	lsls	r1, r3, #31
 8005ddc:	d405      	bmi.n	8005dea <_vfiprintf_r+0x202>
 8005dde:	89ab      	ldrh	r3, [r5, #12]
 8005de0:	059a      	lsls	r2, r3, #22
 8005de2:	d402      	bmi.n	8005dea <_vfiprintf_r+0x202>
 8005de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005de6:	f7ff fa5c 	bl	80052a2 <__retarget_lock_release_recursive>
 8005dea:	89ab      	ldrh	r3, [r5, #12]
 8005dec:	065b      	lsls	r3, r3, #25
 8005dee:	f53f af1d 	bmi.w	8005c2c <_vfiprintf_r+0x44>
 8005df2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005df4:	e71c      	b.n	8005c30 <_vfiprintf_r+0x48>
 8005df6:	ab03      	add	r3, sp, #12
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	462a      	mov	r2, r5
 8005dfc:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <_vfiprintf_r+0x22c>)
 8005dfe:	a904      	add	r1, sp, #16
 8005e00:	4630      	mov	r0, r6
 8005e02:	f7ff fc87 	bl	8005714 <_printf_i>
 8005e06:	e7e4      	b.n	8005dd2 <_vfiprintf_r+0x1ea>
 8005e08:	0800685a 	.word	0x0800685a
 8005e0c:	08006864 	.word	0x08006864
 8005e10:	00000000 	.word	0x00000000
 8005e14:	08005bc3 	.word	0x08005bc3
 8005e18:	08006860 	.word	0x08006860

08005e1c <__swbuf_r>:
 8005e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1e:	460e      	mov	r6, r1
 8005e20:	4614      	mov	r4, r2
 8005e22:	4605      	mov	r5, r0
 8005e24:	b118      	cbz	r0, 8005e2e <__swbuf_r+0x12>
 8005e26:	6a03      	ldr	r3, [r0, #32]
 8005e28:	b90b      	cbnz	r3, 8005e2e <__swbuf_r+0x12>
 8005e2a:	f7ff f8a9 	bl	8004f80 <__sinit>
 8005e2e:	69a3      	ldr	r3, [r4, #24]
 8005e30:	60a3      	str	r3, [r4, #8]
 8005e32:	89a3      	ldrh	r3, [r4, #12]
 8005e34:	071a      	lsls	r2, r3, #28
 8005e36:	d525      	bpl.n	8005e84 <__swbuf_r+0x68>
 8005e38:	6923      	ldr	r3, [r4, #16]
 8005e3a:	b31b      	cbz	r3, 8005e84 <__swbuf_r+0x68>
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	6922      	ldr	r2, [r4, #16]
 8005e40:	1a98      	subs	r0, r3, r2
 8005e42:	6963      	ldr	r3, [r4, #20]
 8005e44:	b2f6      	uxtb	r6, r6
 8005e46:	4283      	cmp	r3, r0
 8005e48:	4637      	mov	r7, r6
 8005e4a:	dc04      	bgt.n	8005e56 <__swbuf_r+0x3a>
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	4628      	mov	r0, r5
 8005e50:	f7ff fe08 	bl	8005a64 <_fflush_r>
 8005e54:	b9e0      	cbnz	r0, 8005e90 <__swbuf_r+0x74>
 8005e56:	68a3      	ldr	r3, [r4, #8]
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	60a3      	str	r3, [r4, #8]
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	6022      	str	r2, [r4, #0]
 8005e62:	701e      	strb	r6, [r3, #0]
 8005e64:	6962      	ldr	r2, [r4, #20]
 8005e66:	1c43      	adds	r3, r0, #1
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d004      	beq.n	8005e76 <__swbuf_r+0x5a>
 8005e6c:	89a3      	ldrh	r3, [r4, #12]
 8005e6e:	07db      	lsls	r3, r3, #31
 8005e70:	d506      	bpl.n	8005e80 <__swbuf_r+0x64>
 8005e72:	2e0a      	cmp	r6, #10
 8005e74:	d104      	bne.n	8005e80 <__swbuf_r+0x64>
 8005e76:	4621      	mov	r1, r4
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f7ff fdf3 	bl	8005a64 <_fflush_r>
 8005e7e:	b938      	cbnz	r0, 8005e90 <__swbuf_r+0x74>
 8005e80:	4638      	mov	r0, r7
 8005e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e84:	4621      	mov	r1, r4
 8005e86:	4628      	mov	r0, r5
 8005e88:	f000 f806 	bl	8005e98 <__swsetup_r>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	d0d5      	beq.n	8005e3c <__swbuf_r+0x20>
 8005e90:	f04f 37ff 	mov.w	r7, #4294967295
 8005e94:	e7f4      	b.n	8005e80 <__swbuf_r+0x64>
	...

08005e98 <__swsetup_r>:
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	4b2a      	ldr	r3, [pc, #168]	; (8005f44 <__swsetup_r+0xac>)
 8005e9c:	4605      	mov	r5, r0
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	460c      	mov	r4, r1
 8005ea2:	b118      	cbz	r0, 8005eac <__swsetup_r+0x14>
 8005ea4:	6a03      	ldr	r3, [r0, #32]
 8005ea6:	b90b      	cbnz	r3, 8005eac <__swsetup_r+0x14>
 8005ea8:	f7ff f86a 	bl	8004f80 <__sinit>
 8005eac:	89a3      	ldrh	r3, [r4, #12]
 8005eae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005eb2:	0718      	lsls	r0, r3, #28
 8005eb4:	d422      	bmi.n	8005efc <__swsetup_r+0x64>
 8005eb6:	06d9      	lsls	r1, r3, #27
 8005eb8:	d407      	bmi.n	8005eca <__swsetup_r+0x32>
 8005eba:	2309      	movs	r3, #9
 8005ebc:	602b      	str	r3, [r5, #0]
 8005ebe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ec2:	81a3      	strh	r3, [r4, #12]
 8005ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec8:	e034      	b.n	8005f34 <__swsetup_r+0x9c>
 8005eca:	0758      	lsls	r0, r3, #29
 8005ecc:	d512      	bpl.n	8005ef4 <__swsetup_r+0x5c>
 8005ece:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ed0:	b141      	cbz	r1, 8005ee4 <__swsetup_r+0x4c>
 8005ed2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ed6:	4299      	cmp	r1, r3
 8005ed8:	d002      	beq.n	8005ee0 <__swsetup_r+0x48>
 8005eda:	4628      	mov	r0, r5
 8005edc:	f7ff fa08 	bl	80052f0 <_free_r>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	6363      	str	r3, [r4, #52]	; 0x34
 8005ee4:	89a3      	ldrh	r3, [r4, #12]
 8005ee6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005eea:	81a3      	strh	r3, [r4, #12]
 8005eec:	2300      	movs	r3, #0
 8005eee:	6063      	str	r3, [r4, #4]
 8005ef0:	6923      	ldr	r3, [r4, #16]
 8005ef2:	6023      	str	r3, [r4, #0]
 8005ef4:	89a3      	ldrh	r3, [r4, #12]
 8005ef6:	f043 0308 	orr.w	r3, r3, #8
 8005efa:	81a3      	strh	r3, [r4, #12]
 8005efc:	6923      	ldr	r3, [r4, #16]
 8005efe:	b94b      	cbnz	r3, 8005f14 <__swsetup_r+0x7c>
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f0a:	d003      	beq.n	8005f14 <__swsetup_r+0x7c>
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f000 f88c 	bl	800602c <__smakebuf_r>
 8005f14:	89a0      	ldrh	r0, [r4, #12]
 8005f16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f1a:	f010 0301 	ands.w	r3, r0, #1
 8005f1e:	d00a      	beq.n	8005f36 <__swsetup_r+0x9e>
 8005f20:	2300      	movs	r3, #0
 8005f22:	60a3      	str	r3, [r4, #8]
 8005f24:	6963      	ldr	r3, [r4, #20]
 8005f26:	425b      	negs	r3, r3
 8005f28:	61a3      	str	r3, [r4, #24]
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	b943      	cbnz	r3, 8005f40 <__swsetup_r+0xa8>
 8005f2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f32:	d1c4      	bne.n	8005ebe <__swsetup_r+0x26>
 8005f34:	bd38      	pop	{r3, r4, r5, pc}
 8005f36:	0781      	lsls	r1, r0, #30
 8005f38:	bf58      	it	pl
 8005f3a:	6963      	ldrpl	r3, [r4, #20]
 8005f3c:	60a3      	str	r3, [r4, #8]
 8005f3e:	e7f4      	b.n	8005f2a <__swsetup_r+0x92>
 8005f40:	2000      	movs	r0, #0
 8005f42:	e7f7      	b.n	8005f34 <__swsetup_r+0x9c>
 8005f44:	20000070 	.word	0x20000070

08005f48 <_raise_r>:
 8005f48:	291f      	cmp	r1, #31
 8005f4a:	b538      	push	{r3, r4, r5, lr}
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	460d      	mov	r5, r1
 8005f50:	d904      	bls.n	8005f5c <_raise_r+0x14>
 8005f52:	2316      	movs	r3, #22
 8005f54:	6003      	str	r3, [r0, #0]
 8005f56:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5a:	bd38      	pop	{r3, r4, r5, pc}
 8005f5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005f5e:	b112      	cbz	r2, 8005f66 <_raise_r+0x1e>
 8005f60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f64:	b94b      	cbnz	r3, 8005f7a <_raise_r+0x32>
 8005f66:	4620      	mov	r0, r4
 8005f68:	f000 f830 	bl	8005fcc <_getpid_r>
 8005f6c:	462a      	mov	r2, r5
 8005f6e:	4601      	mov	r1, r0
 8005f70:	4620      	mov	r0, r4
 8005f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f76:	f000 b817 	b.w	8005fa8 <_kill_r>
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d00a      	beq.n	8005f94 <_raise_r+0x4c>
 8005f7e:	1c59      	adds	r1, r3, #1
 8005f80:	d103      	bne.n	8005f8a <_raise_r+0x42>
 8005f82:	2316      	movs	r3, #22
 8005f84:	6003      	str	r3, [r0, #0]
 8005f86:	2001      	movs	r0, #1
 8005f88:	e7e7      	b.n	8005f5a <_raise_r+0x12>
 8005f8a:	2400      	movs	r4, #0
 8005f8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005f90:	4628      	mov	r0, r5
 8005f92:	4798      	blx	r3
 8005f94:	2000      	movs	r0, #0
 8005f96:	e7e0      	b.n	8005f5a <_raise_r+0x12>

08005f98 <raise>:
 8005f98:	4b02      	ldr	r3, [pc, #8]	; (8005fa4 <raise+0xc>)
 8005f9a:	4601      	mov	r1, r0
 8005f9c:	6818      	ldr	r0, [r3, #0]
 8005f9e:	f7ff bfd3 	b.w	8005f48 <_raise_r>
 8005fa2:	bf00      	nop
 8005fa4:	20000070 	.word	0x20000070

08005fa8 <_kill_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	4d07      	ldr	r5, [pc, #28]	; (8005fc8 <_kill_r+0x20>)
 8005fac:	2300      	movs	r3, #0
 8005fae:	4604      	mov	r4, r0
 8005fb0:	4608      	mov	r0, r1
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	602b      	str	r3, [r5, #0]
 8005fb6:	f7fc fa0b 	bl	80023d0 <_kill>
 8005fba:	1c43      	adds	r3, r0, #1
 8005fbc:	d102      	bne.n	8005fc4 <_kill_r+0x1c>
 8005fbe:	682b      	ldr	r3, [r5, #0]
 8005fc0:	b103      	cbz	r3, 8005fc4 <_kill_r+0x1c>
 8005fc2:	6023      	str	r3, [r4, #0]
 8005fc4:	bd38      	pop	{r3, r4, r5, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20000274 	.word	0x20000274

08005fcc <_getpid_r>:
 8005fcc:	f7fc b9f8 	b.w	80023c0 <_getpid>

08005fd0 <_malloc_usable_size_r>:
 8005fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fd4:	1f18      	subs	r0, r3, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	bfbc      	itt	lt
 8005fda:	580b      	ldrlt	r3, [r1, r0]
 8005fdc:	18c0      	addlt	r0, r0, r3
 8005fde:	4770      	bx	lr

08005fe0 <__swhatbuf_r>:
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe8:	2900      	cmp	r1, #0
 8005fea:	b096      	sub	sp, #88	; 0x58
 8005fec:	4615      	mov	r5, r2
 8005fee:	461e      	mov	r6, r3
 8005ff0:	da0d      	bge.n	800600e <__swhatbuf_r+0x2e>
 8005ff2:	89a3      	ldrh	r3, [r4, #12]
 8005ff4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ff8:	f04f 0100 	mov.w	r1, #0
 8005ffc:	bf0c      	ite	eq
 8005ffe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006002:	2340      	movne	r3, #64	; 0x40
 8006004:	2000      	movs	r0, #0
 8006006:	6031      	str	r1, [r6, #0]
 8006008:	602b      	str	r3, [r5, #0]
 800600a:	b016      	add	sp, #88	; 0x58
 800600c:	bd70      	pop	{r4, r5, r6, pc}
 800600e:	466a      	mov	r2, sp
 8006010:	f000 f848 	bl	80060a4 <_fstat_r>
 8006014:	2800      	cmp	r0, #0
 8006016:	dbec      	blt.n	8005ff2 <__swhatbuf_r+0x12>
 8006018:	9901      	ldr	r1, [sp, #4]
 800601a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800601e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006022:	4259      	negs	r1, r3
 8006024:	4159      	adcs	r1, r3
 8006026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800602a:	e7eb      	b.n	8006004 <__swhatbuf_r+0x24>

0800602c <__smakebuf_r>:
 800602c:	898b      	ldrh	r3, [r1, #12]
 800602e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006030:	079d      	lsls	r5, r3, #30
 8006032:	4606      	mov	r6, r0
 8006034:	460c      	mov	r4, r1
 8006036:	d507      	bpl.n	8006048 <__smakebuf_r+0x1c>
 8006038:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800603c:	6023      	str	r3, [r4, #0]
 800603e:	6123      	str	r3, [r4, #16]
 8006040:	2301      	movs	r3, #1
 8006042:	6163      	str	r3, [r4, #20]
 8006044:	b002      	add	sp, #8
 8006046:	bd70      	pop	{r4, r5, r6, pc}
 8006048:	ab01      	add	r3, sp, #4
 800604a:	466a      	mov	r2, sp
 800604c:	f7ff ffc8 	bl	8005fe0 <__swhatbuf_r>
 8006050:	9900      	ldr	r1, [sp, #0]
 8006052:	4605      	mov	r5, r0
 8006054:	4630      	mov	r0, r6
 8006056:	f7fe fe01 	bl	8004c5c <_malloc_r>
 800605a:	b948      	cbnz	r0, 8006070 <__smakebuf_r+0x44>
 800605c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006060:	059a      	lsls	r2, r3, #22
 8006062:	d4ef      	bmi.n	8006044 <__smakebuf_r+0x18>
 8006064:	f023 0303 	bic.w	r3, r3, #3
 8006068:	f043 0302 	orr.w	r3, r3, #2
 800606c:	81a3      	strh	r3, [r4, #12]
 800606e:	e7e3      	b.n	8006038 <__smakebuf_r+0xc>
 8006070:	89a3      	ldrh	r3, [r4, #12]
 8006072:	6020      	str	r0, [r4, #0]
 8006074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006078:	81a3      	strh	r3, [r4, #12]
 800607a:	9b00      	ldr	r3, [sp, #0]
 800607c:	6163      	str	r3, [r4, #20]
 800607e:	9b01      	ldr	r3, [sp, #4]
 8006080:	6120      	str	r0, [r4, #16]
 8006082:	b15b      	cbz	r3, 800609c <__smakebuf_r+0x70>
 8006084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006088:	4630      	mov	r0, r6
 800608a:	f000 f81d 	bl	80060c8 <_isatty_r>
 800608e:	b128      	cbz	r0, 800609c <__smakebuf_r+0x70>
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	f023 0303 	bic.w	r3, r3, #3
 8006096:	f043 0301 	orr.w	r3, r3, #1
 800609a:	81a3      	strh	r3, [r4, #12]
 800609c:	89a3      	ldrh	r3, [r4, #12]
 800609e:	431d      	orrs	r5, r3
 80060a0:	81a5      	strh	r5, [r4, #12]
 80060a2:	e7cf      	b.n	8006044 <__smakebuf_r+0x18>

080060a4 <_fstat_r>:
 80060a4:	b538      	push	{r3, r4, r5, lr}
 80060a6:	4d07      	ldr	r5, [pc, #28]	; (80060c4 <_fstat_r+0x20>)
 80060a8:	2300      	movs	r3, #0
 80060aa:	4604      	mov	r4, r0
 80060ac:	4608      	mov	r0, r1
 80060ae:	4611      	mov	r1, r2
 80060b0:	602b      	str	r3, [r5, #0]
 80060b2:	f7fc f9ec 	bl	800248e <_fstat>
 80060b6:	1c43      	adds	r3, r0, #1
 80060b8:	d102      	bne.n	80060c0 <_fstat_r+0x1c>
 80060ba:	682b      	ldr	r3, [r5, #0]
 80060bc:	b103      	cbz	r3, 80060c0 <_fstat_r+0x1c>
 80060be:	6023      	str	r3, [r4, #0]
 80060c0:	bd38      	pop	{r3, r4, r5, pc}
 80060c2:	bf00      	nop
 80060c4:	20000274 	.word	0x20000274

080060c8 <_isatty_r>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	4d06      	ldr	r5, [pc, #24]	; (80060e4 <_isatty_r+0x1c>)
 80060cc:	2300      	movs	r3, #0
 80060ce:	4604      	mov	r4, r0
 80060d0:	4608      	mov	r0, r1
 80060d2:	602b      	str	r3, [r5, #0]
 80060d4:	f7fc f9eb 	bl	80024ae <_isatty>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d102      	bne.n	80060e2 <_isatty_r+0x1a>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	b103      	cbz	r3, 80060e2 <_isatty_r+0x1a>
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	20000274 	.word	0x20000274

080060e8 <atan2>:
 80060e8:	f000 b802 	b.w	80060f0 <__ieee754_atan2>
 80060ec:	0000      	movs	r0, r0
	...

080060f0 <__ieee754_atan2>:
 80060f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060f4:	ec57 6b11 	vmov	r6, r7, d1
 80060f8:	4273      	negs	r3, r6
 80060fa:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8006278 <__ieee754_atan2+0x188>
 80060fe:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8006102:	4333      	orrs	r3, r6
 8006104:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006108:	4543      	cmp	r3, r8
 800610a:	ec51 0b10 	vmov	r0, r1, d0
 800610e:	ee11 5a10 	vmov	r5, s2
 8006112:	d80a      	bhi.n	800612a <__ieee754_atan2+0x3a>
 8006114:	4244      	negs	r4, r0
 8006116:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800611a:	4304      	orrs	r4, r0
 800611c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006120:	4544      	cmp	r4, r8
 8006122:	ee10 9a10 	vmov	r9, s0
 8006126:	468e      	mov	lr, r1
 8006128:	d907      	bls.n	800613a <__ieee754_atan2+0x4a>
 800612a:	4632      	mov	r2, r6
 800612c:	463b      	mov	r3, r7
 800612e:	f7fa f8b5 	bl	800029c <__adddf3>
 8006132:	ec41 0b10 	vmov	d0, r0, r1
 8006136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800613a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800613e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006142:	4334      	orrs	r4, r6
 8006144:	d103      	bne.n	800614e <__ieee754_atan2+0x5e>
 8006146:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800614a:	f000 b899 	b.w	8006280 <atan>
 800614e:	17bc      	asrs	r4, r7, #30
 8006150:	f004 0402 	and.w	r4, r4, #2
 8006154:	ea53 0909 	orrs.w	r9, r3, r9
 8006158:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800615c:	d107      	bne.n	800616e <__ieee754_atan2+0x7e>
 800615e:	2c02      	cmp	r4, #2
 8006160:	d05f      	beq.n	8006222 <__ieee754_atan2+0x132>
 8006162:	2c03      	cmp	r4, #3
 8006164:	d1e5      	bne.n	8006132 <__ieee754_atan2+0x42>
 8006166:	a140      	add	r1, pc, #256	; (adr r1, 8006268 <__ieee754_atan2+0x178>)
 8006168:	e9d1 0100 	ldrd	r0, r1, [r1]
 800616c:	e7e1      	b.n	8006132 <__ieee754_atan2+0x42>
 800616e:	4315      	orrs	r5, r2
 8006170:	d106      	bne.n	8006180 <__ieee754_atan2+0x90>
 8006172:	f1be 0f00 	cmp.w	lr, #0
 8006176:	da5f      	bge.n	8006238 <__ieee754_atan2+0x148>
 8006178:	a13d      	add	r1, pc, #244	; (adr r1, 8006270 <__ieee754_atan2+0x180>)
 800617a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800617e:	e7d8      	b.n	8006132 <__ieee754_atan2+0x42>
 8006180:	4542      	cmp	r2, r8
 8006182:	d10f      	bne.n	80061a4 <__ieee754_atan2+0xb4>
 8006184:	4293      	cmp	r3, r2
 8006186:	f104 34ff 	add.w	r4, r4, #4294967295
 800618a:	d107      	bne.n	800619c <__ieee754_atan2+0xac>
 800618c:	2c02      	cmp	r4, #2
 800618e:	d84c      	bhi.n	800622a <__ieee754_atan2+0x13a>
 8006190:	4b33      	ldr	r3, [pc, #204]	; (8006260 <__ieee754_atan2+0x170>)
 8006192:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006196:	e9d3 0100 	ldrd	r0, r1, [r3]
 800619a:	e7ca      	b.n	8006132 <__ieee754_atan2+0x42>
 800619c:	2c02      	cmp	r4, #2
 800619e:	d848      	bhi.n	8006232 <__ieee754_atan2+0x142>
 80061a0:	4b30      	ldr	r3, [pc, #192]	; (8006264 <__ieee754_atan2+0x174>)
 80061a2:	e7f6      	b.n	8006192 <__ieee754_atan2+0xa2>
 80061a4:	4543      	cmp	r3, r8
 80061a6:	d0e4      	beq.n	8006172 <__ieee754_atan2+0x82>
 80061a8:	1a9b      	subs	r3, r3, r2
 80061aa:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80061ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 80061b2:	da1e      	bge.n	80061f2 <__ieee754_atan2+0x102>
 80061b4:	2f00      	cmp	r7, #0
 80061b6:	da01      	bge.n	80061bc <__ieee754_atan2+0xcc>
 80061b8:	323c      	adds	r2, #60	; 0x3c
 80061ba:	db1e      	blt.n	80061fa <__ieee754_atan2+0x10a>
 80061bc:	4632      	mov	r2, r6
 80061be:	463b      	mov	r3, r7
 80061c0:	f7fa fb4c 	bl	800085c <__aeabi_ddiv>
 80061c4:	ec41 0b10 	vmov	d0, r0, r1
 80061c8:	f000 f9fa 	bl	80065c0 <fabs>
 80061cc:	f000 f858 	bl	8006280 <atan>
 80061d0:	ec51 0b10 	vmov	r0, r1, d0
 80061d4:	2c01      	cmp	r4, #1
 80061d6:	d013      	beq.n	8006200 <__ieee754_atan2+0x110>
 80061d8:	2c02      	cmp	r4, #2
 80061da:	d015      	beq.n	8006208 <__ieee754_atan2+0x118>
 80061dc:	2c00      	cmp	r4, #0
 80061de:	d0a8      	beq.n	8006132 <__ieee754_atan2+0x42>
 80061e0:	a317      	add	r3, pc, #92	; (adr r3, 8006240 <__ieee754_atan2+0x150>)
 80061e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e6:	f7fa f857 	bl	8000298 <__aeabi_dsub>
 80061ea:	a317      	add	r3, pc, #92	; (adr r3, 8006248 <__ieee754_atan2+0x158>)
 80061ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f0:	e014      	b.n	800621c <__ieee754_atan2+0x12c>
 80061f2:	a117      	add	r1, pc, #92	; (adr r1, 8006250 <__ieee754_atan2+0x160>)
 80061f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061f8:	e7ec      	b.n	80061d4 <__ieee754_atan2+0xe4>
 80061fa:	2000      	movs	r0, #0
 80061fc:	2100      	movs	r1, #0
 80061fe:	e7e9      	b.n	80061d4 <__ieee754_atan2+0xe4>
 8006200:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006204:	4619      	mov	r1, r3
 8006206:	e794      	b.n	8006132 <__ieee754_atan2+0x42>
 8006208:	a30d      	add	r3, pc, #52	; (adr r3, 8006240 <__ieee754_atan2+0x150>)
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	f7fa f843 	bl	8000298 <__aeabi_dsub>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	a10c      	add	r1, pc, #48	; (adr r1, 8006248 <__ieee754_atan2+0x158>)
 8006218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800621c:	f7fa f83c 	bl	8000298 <__aeabi_dsub>
 8006220:	e787      	b.n	8006132 <__ieee754_atan2+0x42>
 8006222:	a109      	add	r1, pc, #36	; (adr r1, 8006248 <__ieee754_atan2+0x158>)
 8006224:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006228:	e783      	b.n	8006132 <__ieee754_atan2+0x42>
 800622a:	a10b      	add	r1, pc, #44	; (adr r1, 8006258 <__ieee754_atan2+0x168>)
 800622c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006230:	e77f      	b.n	8006132 <__ieee754_atan2+0x42>
 8006232:	2000      	movs	r0, #0
 8006234:	2100      	movs	r1, #0
 8006236:	e77c      	b.n	8006132 <__ieee754_atan2+0x42>
 8006238:	a105      	add	r1, pc, #20	; (adr r1, 8006250 <__ieee754_atan2+0x160>)
 800623a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800623e:	e778      	b.n	8006132 <__ieee754_atan2+0x42>
 8006240:	33145c07 	.word	0x33145c07
 8006244:	3ca1a626 	.word	0x3ca1a626
 8006248:	54442d18 	.word	0x54442d18
 800624c:	400921fb 	.word	0x400921fb
 8006250:	54442d18 	.word	0x54442d18
 8006254:	3ff921fb 	.word	0x3ff921fb
 8006258:	54442d18 	.word	0x54442d18
 800625c:	3fe921fb 	.word	0x3fe921fb
 8006260:	08006890 	.word	0x08006890
 8006264:	080068a8 	.word	0x080068a8
 8006268:	54442d18 	.word	0x54442d18
 800626c:	c00921fb 	.word	0xc00921fb
 8006270:	54442d18 	.word	0x54442d18
 8006274:	bff921fb 	.word	0xbff921fb
 8006278:	7ff00000 	.word	0x7ff00000
 800627c:	00000000 	.word	0x00000000

08006280 <atan>:
 8006280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006284:	ec55 4b10 	vmov	r4, r5, d0
 8006288:	4bc3      	ldr	r3, [pc, #780]	; (8006598 <atan+0x318>)
 800628a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800628e:	429e      	cmp	r6, r3
 8006290:	46ab      	mov	fp, r5
 8006292:	dd18      	ble.n	80062c6 <atan+0x46>
 8006294:	4bc1      	ldr	r3, [pc, #772]	; (800659c <atan+0x31c>)
 8006296:	429e      	cmp	r6, r3
 8006298:	dc01      	bgt.n	800629e <atan+0x1e>
 800629a:	d109      	bne.n	80062b0 <atan+0x30>
 800629c:	b144      	cbz	r4, 80062b0 <atan+0x30>
 800629e:	4622      	mov	r2, r4
 80062a0:	462b      	mov	r3, r5
 80062a2:	4620      	mov	r0, r4
 80062a4:	4629      	mov	r1, r5
 80062a6:	f7f9 fff9 	bl	800029c <__adddf3>
 80062aa:	4604      	mov	r4, r0
 80062ac:	460d      	mov	r5, r1
 80062ae:	e006      	b.n	80062be <atan+0x3e>
 80062b0:	f1bb 0f00 	cmp.w	fp, #0
 80062b4:	f300 8131 	bgt.w	800651a <atan+0x29a>
 80062b8:	a59b      	add	r5, pc, #620	; (adr r5, 8006528 <atan+0x2a8>)
 80062ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80062be:	ec45 4b10 	vmov	d0, r4, r5
 80062c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c6:	4bb6      	ldr	r3, [pc, #728]	; (80065a0 <atan+0x320>)
 80062c8:	429e      	cmp	r6, r3
 80062ca:	dc14      	bgt.n	80062f6 <atan+0x76>
 80062cc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80062d0:	429e      	cmp	r6, r3
 80062d2:	dc0d      	bgt.n	80062f0 <atan+0x70>
 80062d4:	a396      	add	r3, pc, #600	; (adr r3, 8006530 <atan+0x2b0>)
 80062d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062da:	ee10 0a10 	vmov	r0, s0
 80062de:	4629      	mov	r1, r5
 80062e0:	f7f9 ffdc 	bl	800029c <__adddf3>
 80062e4:	4baf      	ldr	r3, [pc, #700]	; (80065a4 <atan+0x324>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	f7fa fc1e 	bl	8000b28 <__aeabi_dcmpgt>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	d1e6      	bne.n	80062be <atan+0x3e>
 80062f0:	f04f 3aff 	mov.w	sl, #4294967295
 80062f4:	e02b      	b.n	800634e <atan+0xce>
 80062f6:	f000 f963 	bl	80065c0 <fabs>
 80062fa:	4bab      	ldr	r3, [pc, #684]	; (80065a8 <atan+0x328>)
 80062fc:	429e      	cmp	r6, r3
 80062fe:	ec55 4b10 	vmov	r4, r5, d0
 8006302:	f300 80bf 	bgt.w	8006484 <atan+0x204>
 8006306:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800630a:	429e      	cmp	r6, r3
 800630c:	f300 80a0 	bgt.w	8006450 <atan+0x1d0>
 8006310:	ee10 2a10 	vmov	r2, s0
 8006314:	ee10 0a10 	vmov	r0, s0
 8006318:	462b      	mov	r3, r5
 800631a:	4629      	mov	r1, r5
 800631c:	f7f9 ffbe 	bl	800029c <__adddf3>
 8006320:	4ba0      	ldr	r3, [pc, #640]	; (80065a4 <atan+0x324>)
 8006322:	2200      	movs	r2, #0
 8006324:	f7f9 ffb8 	bl	8000298 <__aeabi_dsub>
 8006328:	2200      	movs	r2, #0
 800632a:	4606      	mov	r6, r0
 800632c:	460f      	mov	r7, r1
 800632e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006332:	4620      	mov	r0, r4
 8006334:	4629      	mov	r1, r5
 8006336:	f7f9 ffb1 	bl	800029c <__adddf3>
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	4630      	mov	r0, r6
 8006340:	4639      	mov	r1, r7
 8006342:	f7fa fa8b 	bl	800085c <__aeabi_ddiv>
 8006346:	f04f 0a00 	mov.w	sl, #0
 800634a:	4604      	mov	r4, r0
 800634c:	460d      	mov	r5, r1
 800634e:	4622      	mov	r2, r4
 8006350:	462b      	mov	r3, r5
 8006352:	4620      	mov	r0, r4
 8006354:	4629      	mov	r1, r5
 8006356:	f7fa f957 	bl	8000608 <__aeabi_dmul>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4680      	mov	r8, r0
 8006360:	4689      	mov	r9, r1
 8006362:	f7fa f951 	bl	8000608 <__aeabi_dmul>
 8006366:	a374      	add	r3, pc, #464	; (adr r3, 8006538 <atan+0x2b8>)
 8006368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636c:	4606      	mov	r6, r0
 800636e:	460f      	mov	r7, r1
 8006370:	f7fa f94a 	bl	8000608 <__aeabi_dmul>
 8006374:	a372      	add	r3, pc, #456	; (adr r3, 8006540 <atan+0x2c0>)
 8006376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637a:	f7f9 ff8f 	bl	800029c <__adddf3>
 800637e:	4632      	mov	r2, r6
 8006380:	463b      	mov	r3, r7
 8006382:	f7fa f941 	bl	8000608 <__aeabi_dmul>
 8006386:	a370      	add	r3, pc, #448	; (adr r3, 8006548 <atan+0x2c8>)
 8006388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638c:	f7f9 ff86 	bl	800029c <__adddf3>
 8006390:	4632      	mov	r2, r6
 8006392:	463b      	mov	r3, r7
 8006394:	f7fa f938 	bl	8000608 <__aeabi_dmul>
 8006398:	a36d      	add	r3, pc, #436	; (adr r3, 8006550 <atan+0x2d0>)
 800639a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639e:	f7f9 ff7d 	bl	800029c <__adddf3>
 80063a2:	4632      	mov	r2, r6
 80063a4:	463b      	mov	r3, r7
 80063a6:	f7fa f92f 	bl	8000608 <__aeabi_dmul>
 80063aa:	a36b      	add	r3, pc, #428	; (adr r3, 8006558 <atan+0x2d8>)
 80063ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b0:	f7f9 ff74 	bl	800029c <__adddf3>
 80063b4:	4632      	mov	r2, r6
 80063b6:	463b      	mov	r3, r7
 80063b8:	f7fa f926 	bl	8000608 <__aeabi_dmul>
 80063bc:	a368      	add	r3, pc, #416	; (adr r3, 8006560 <atan+0x2e0>)
 80063be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c2:	f7f9 ff6b 	bl	800029c <__adddf3>
 80063c6:	4642      	mov	r2, r8
 80063c8:	464b      	mov	r3, r9
 80063ca:	f7fa f91d 	bl	8000608 <__aeabi_dmul>
 80063ce:	a366      	add	r3, pc, #408	; (adr r3, 8006568 <atan+0x2e8>)
 80063d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d4:	4680      	mov	r8, r0
 80063d6:	4689      	mov	r9, r1
 80063d8:	4630      	mov	r0, r6
 80063da:	4639      	mov	r1, r7
 80063dc:	f7fa f914 	bl	8000608 <__aeabi_dmul>
 80063e0:	a363      	add	r3, pc, #396	; (adr r3, 8006570 <atan+0x2f0>)
 80063e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e6:	f7f9 ff57 	bl	8000298 <__aeabi_dsub>
 80063ea:	4632      	mov	r2, r6
 80063ec:	463b      	mov	r3, r7
 80063ee:	f7fa f90b 	bl	8000608 <__aeabi_dmul>
 80063f2:	a361      	add	r3, pc, #388	; (adr r3, 8006578 <atan+0x2f8>)
 80063f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f8:	f7f9 ff4e 	bl	8000298 <__aeabi_dsub>
 80063fc:	4632      	mov	r2, r6
 80063fe:	463b      	mov	r3, r7
 8006400:	f7fa f902 	bl	8000608 <__aeabi_dmul>
 8006404:	a35e      	add	r3, pc, #376	; (adr r3, 8006580 <atan+0x300>)
 8006406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640a:	f7f9 ff45 	bl	8000298 <__aeabi_dsub>
 800640e:	4632      	mov	r2, r6
 8006410:	463b      	mov	r3, r7
 8006412:	f7fa f8f9 	bl	8000608 <__aeabi_dmul>
 8006416:	a35c      	add	r3, pc, #368	; (adr r3, 8006588 <atan+0x308>)
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	f7f9 ff3c 	bl	8000298 <__aeabi_dsub>
 8006420:	4632      	mov	r2, r6
 8006422:	463b      	mov	r3, r7
 8006424:	f7fa f8f0 	bl	8000608 <__aeabi_dmul>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4640      	mov	r0, r8
 800642e:	4649      	mov	r1, r9
 8006430:	f7f9 ff34 	bl	800029c <__adddf3>
 8006434:	4622      	mov	r2, r4
 8006436:	462b      	mov	r3, r5
 8006438:	f7fa f8e6 	bl	8000608 <__aeabi_dmul>
 800643c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	d14b      	bne.n	80064de <atan+0x25e>
 8006446:	4620      	mov	r0, r4
 8006448:	4629      	mov	r1, r5
 800644a:	f7f9 ff25 	bl	8000298 <__aeabi_dsub>
 800644e:	e72c      	b.n	80062aa <atan+0x2a>
 8006450:	ee10 0a10 	vmov	r0, s0
 8006454:	4b53      	ldr	r3, [pc, #332]	; (80065a4 <atan+0x324>)
 8006456:	2200      	movs	r2, #0
 8006458:	4629      	mov	r1, r5
 800645a:	f7f9 ff1d 	bl	8000298 <__aeabi_dsub>
 800645e:	4b51      	ldr	r3, [pc, #324]	; (80065a4 <atan+0x324>)
 8006460:	4606      	mov	r6, r0
 8006462:	460f      	mov	r7, r1
 8006464:	2200      	movs	r2, #0
 8006466:	4620      	mov	r0, r4
 8006468:	4629      	mov	r1, r5
 800646a:	f7f9 ff17 	bl	800029c <__adddf3>
 800646e:	4602      	mov	r2, r0
 8006470:	460b      	mov	r3, r1
 8006472:	4630      	mov	r0, r6
 8006474:	4639      	mov	r1, r7
 8006476:	f7fa f9f1 	bl	800085c <__aeabi_ddiv>
 800647a:	f04f 0a01 	mov.w	sl, #1
 800647e:	4604      	mov	r4, r0
 8006480:	460d      	mov	r5, r1
 8006482:	e764      	b.n	800634e <atan+0xce>
 8006484:	4b49      	ldr	r3, [pc, #292]	; (80065ac <atan+0x32c>)
 8006486:	429e      	cmp	r6, r3
 8006488:	da1d      	bge.n	80064c6 <atan+0x246>
 800648a:	ee10 0a10 	vmov	r0, s0
 800648e:	4b48      	ldr	r3, [pc, #288]	; (80065b0 <atan+0x330>)
 8006490:	2200      	movs	r2, #0
 8006492:	4629      	mov	r1, r5
 8006494:	f7f9 ff00 	bl	8000298 <__aeabi_dsub>
 8006498:	4b45      	ldr	r3, [pc, #276]	; (80065b0 <atan+0x330>)
 800649a:	4606      	mov	r6, r0
 800649c:	460f      	mov	r7, r1
 800649e:	2200      	movs	r2, #0
 80064a0:	4620      	mov	r0, r4
 80064a2:	4629      	mov	r1, r5
 80064a4:	f7fa f8b0 	bl	8000608 <__aeabi_dmul>
 80064a8:	4b3e      	ldr	r3, [pc, #248]	; (80065a4 <atan+0x324>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	f7f9 fef6 	bl	800029c <__adddf3>
 80064b0:	4602      	mov	r2, r0
 80064b2:	460b      	mov	r3, r1
 80064b4:	4630      	mov	r0, r6
 80064b6:	4639      	mov	r1, r7
 80064b8:	f7fa f9d0 	bl	800085c <__aeabi_ddiv>
 80064bc:	f04f 0a02 	mov.w	sl, #2
 80064c0:	4604      	mov	r4, r0
 80064c2:	460d      	mov	r5, r1
 80064c4:	e743      	b.n	800634e <atan+0xce>
 80064c6:	462b      	mov	r3, r5
 80064c8:	ee10 2a10 	vmov	r2, s0
 80064cc:	4939      	ldr	r1, [pc, #228]	; (80065b4 <atan+0x334>)
 80064ce:	2000      	movs	r0, #0
 80064d0:	f7fa f9c4 	bl	800085c <__aeabi_ddiv>
 80064d4:	f04f 0a03 	mov.w	sl, #3
 80064d8:	4604      	mov	r4, r0
 80064da:	460d      	mov	r5, r1
 80064dc:	e737      	b.n	800634e <atan+0xce>
 80064de:	4b36      	ldr	r3, [pc, #216]	; (80065b8 <atan+0x338>)
 80064e0:	4e36      	ldr	r6, [pc, #216]	; (80065bc <atan+0x33c>)
 80064e2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80064e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ea:	f7f9 fed5 	bl	8000298 <__aeabi_dsub>
 80064ee:	4622      	mov	r2, r4
 80064f0:	462b      	mov	r3, r5
 80064f2:	f7f9 fed1 	bl	8000298 <__aeabi_dsub>
 80064f6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006502:	f7f9 fec9 	bl	8000298 <__aeabi_dsub>
 8006506:	f1bb 0f00 	cmp.w	fp, #0
 800650a:	4604      	mov	r4, r0
 800650c:	460d      	mov	r5, r1
 800650e:	f6bf aed6 	bge.w	80062be <atan+0x3e>
 8006512:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006516:	461d      	mov	r5, r3
 8006518:	e6d1      	b.n	80062be <atan+0x3e>
 800651a:	a51d      	add	r5, pc, #116	; (adr r5, 8006590 <atan+0x310>)
 800651c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006520:	e6cd      	b.n	80062be <atan+0x3e>
 8006522:	bf00      	nop
 8006524:	f3af 8000 	nop.w
 8006528:	54442d18 	.word	0x54442d18
 800652c:	bff921fb 	.word	0xbff921fb
 8006530:	8800759c 	.word	0x8800759c
 8006534:	7e37e43c 	.word	0x7e37e43c
 8006538:	e322da11 	.word	0xe322da11
 800653c:	3f90ad3a 	.word	0x3f90ad3a
 8006540:	24760deb 	.word	0x24760deb
 8006544:	3fa97b4b 	.word	0x3fa97b4b
 8006548:	a0d03d51 	.word	0xa0d03d51
 800654c:	3fb10d66 	.word	0x3fb10d66
 8006550:	c54c206e 	.word	0xc54c206e
 8006554:	3fb745cd 	.word	0x3fb745cd
 8006558:	920083ff 	.word	0x920083ff
 800655c:	3fc24924 	.word	0x3fc24924
 8006560:	5555550d 	.word	0x5555550d
 8006564:	3fd55555 	.word	0x3fd55555
 8006568:	2c6a6c2f 	.word	0x2c6a6c2f
 800656c:	bfa2b444 	.word	0xbfa2b444
 8006570:	52defd9a 	.word	0x52defd9a
 8006574:	3fadde2d 	.word	0x3fadde2d
 8006578:	af749a6d 	.word	0xaf749a6d
 800657c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006580:	fe231671 	.word	0xfe231671
 8006584:	3fbc71c6 	.word	0x3fbc71c6
 8006588:	9998ebc4 	.word	0x9998ebc4
 800658c:	3fc99999 	.word	0x3fc99999
 8006590:	54442d18 	.word	0x54442d18
 8006594:	3ff921fb 	.word	0x3ff921fb
 8006598:	440fffff 	.word	0x440fffff
 800659c:	7ff00000 	.word	0x7ff00000
 80065a0:	3fdbffff 	.word	0x3fdbffff
 80065a4:	3ff00000 	.word	0x3ff00000
 80065a8:	3ff2ffff 	.word	0x3ff2ffff
 80065ac:	40038000 	.word	0x40038000
 80065b0:	3ff80000 	.word	0x3ff80000
 80065b4:	bff00000 	.word	0xbff00000
 80065b8:	080068e0 	.word	0x080068e0
 80065bc:	080068c0 	.word	0x080068c0

080065c0 <fabs>:
 80065c0:	ec51 0b10 	vmov	r0, r1, d0
 80065c4:	ee10 2a10 	vmov	r2, s0
 80065c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80065cc:	ec43 2b10 	vmov	d0, r2, r3
 80065d0:	4770      	bx	lr
	...

080065d4 <_init>:
 80065d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d6:	bf00      	nop
 80065d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065da:	bc08      	pop	{r3}
 80065dc:	469e      	mov	lr, r3
 80065de:	4770      	bx	lr

080065e0 <_fini>:
 80065e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e2:	bf00      	nop
 80065e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e6:	bc08      	pop	{r3}
 80065e8:	469e      	mov	lr, r3
 80065ea:	4770      	bx	lr
