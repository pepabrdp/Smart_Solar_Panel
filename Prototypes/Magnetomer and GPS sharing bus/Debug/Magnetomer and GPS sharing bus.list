
Magnetomer and GPS sharing bus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000489c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08004a3c  08004a3c  00014a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cdc  08004cdc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cdc  08004cdc  00014cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ce4  08004ce4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ce8  08004ce8  00014ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000006c  08004d58  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08004d58  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aac2  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001933  00000000  00000000  0002aba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  0002c4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000079a  00000000  00000000  0002ce90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000169ef  00000000  00000000  0002d62a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cb88  00000000  00000000  00044019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a2c4  00000000  00000000  00050ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003288  00000000  00000000  000dae68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  000de0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a24 	.word	0x08004a24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08004a24 	.word	0x08004a24

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
//GPS Data
//Address
uint16_t gpsAddress = 0x42;

int main(void)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b08d      	sub	sp, #52	; 0x34
 8000590:	af02      	add	r7, sp, #8
  HAL_Init();
 8000592:	f000 fe95 	bl	80012c0 <HAL_Init>

  SystemClock_Config();
 8000596:	f000 fb79 	bl	8000c8c <SystemClock_Config>
  MX_GPIO_Init();
 800059a:	f000 fc39 	bl	8000e10 <MX_GPIO_Init>
  MX_I2C1_Init();
 800059e:	f000 fbdf 	bl	8000d60 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80005a2:	f000 fc0b 	bl	8000dbc <MX_USART2_UART_Init>

  //MAGNEOTMETER
  float xCal, yCal, zCal;
  xCal = 0;
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
  yCal = 0;
 80005ac:	f04f 0300 	mov.w	r3, #0
 80005b0:	623b      	str	r3, [r7, #32]
  zCal = 0;
 80005b2:	f04f 0300 	mov.w	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
//  setupMag();
//  hardIronCal(&xCal, &yCal, &zCal);

  //Direction Angle
  float direction = 0;
 80005b8:	f04f 0300 	mov.w	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]

  //GPS
  float lat = -1;
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <main+0x6c>)
 80005c0:	617b      	str	r3, [r7, #20]
  float longi = -1;
 80005c2:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <main+0x6c>)
 80005c4:	613b      	str	r3, [r7, #16]
  float time = -1;
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <main+0x6c>)
 80005c8:	60fb      	str	r3, [r7, #12]
  float date = -1;
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <main+0x6c>)
 80005cc:	60bb      	str	r3, [r7, #8]
  char longiDir = 'x';
 80005ce:	2378      	movs	r3, #120	; 0x78
 80005d0:	71fb      	strb	r3, [r7, #7]
  char latDir = 'x';
 80005d2:	2378      	movs	r3, #120	; 0x78
 80005d4:	71bb      	strb	r3, [r7, #6]
  while (1)
  {
//	  direction = magnetometerData(xCal, yCal, zCal);
	  getGpsData(&lat, &longi, &time, &date, &longiDir, &latDir);
 80005d6:	f107 0408 	add.w	r4, r7, #8
 80005da:	f107 020c 	add.w	r2, r7, #12
 80005de:	f107 0110 	add.w	r1, r7, #16
 80005e2:	f107 0014 	add.w	r0, r7, #20
 80005e6:	1dbb      	adds	r3, r7, #6
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	1dfb      	adds	r3, r7, #7
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	4623      	mov	r3, r4
 80005f0:	f000 f804 	bl	80005fc <getGpsData>
 80005f4:	e7ef      	b.n	80005d6 <main+0x4a>
 80005f6:	bf00      	nop
 80005f8:	bf800000 	.word	0xbf800000

080005fc <getGpsData>:

  }
}


void getGpsData(float* lat, float* longi, float* time, float* date, char* longDir, char* latDir) {
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b0b8      	sub	sp, #224	; 0xe0
 8000600:	af02      	add	r7, sp, #8
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
 8000608:	603b      	str	r3, [r7, #0]
	uint8_t gpsDataTx [10] = {0}; //Data to send to GPS module
 800060a:	2300      	movs	r3, #0
 800060c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000610:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	809a      	strh	r2, [r3, #4]
	uint8_t gpsDataReady [2] = {0}; //Data to check if gps module ready
 800061a:	2300      	movs	r3, #0
 800061c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	uint8_t gpsDataRx1 [32] = {0}; //Buffer 1
 8000620:	2300      	movs	r3, #0
 8000622:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000626:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]
 8000636:	615a      	str	r2, [r3, #20]
 8000638:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx2 [32] = {0}; //Buffer 2
 800063a:	2300      	movs	r3, #0
 800063c:	667b      	str	r3, [r7, #100]	; 0x64
 800063e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]
 800064e:	615a      	str	r2, [r3, #20]
 8000650:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx3 [32] = {0}; //Buffer 3
 8000652:	2300      	movs	r3, #0
 8000654:	647b      	str	r3, [r7, #68]	; 0x44
 8000656:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]
 8000666:	615a      	str	r2, [r3, #20]
 8000668:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx4 [4] = {0}; //Buffer 4
 800066a:	2300      	movs	r3, #0
 800066c:	643b      	str	r3, [r7, #64]	; 0x40

	//////////////////////////////////////////////////////////////////////////////////////////
	//INITIALIZATION
	gpsDataTx[0] = 0xB5;
 800066e:	23b5      	movs	r3, #181	; 0xb5
 8000670:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	gpsDataTx[1] = 0x62;
 8000674:	2362      	movs	r3, #98	; 0x62
 8000676:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
	gpsDataTx[2] = 0xF0;
 800067a:	23f0      	movs	r3, #240	; 0xf0
 800067c:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
	gpsDataTx[3] = 0x04;
 8000680:	2304      	movs	r3, #4
 8000682:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8000686:	bf00      	nop
 8000688:	480e      	ldr	r0, [pc, #56]	; (80006c4 <getGpsData+0xc8>)
 800068a:	f001 fd9b 	bl	80021c4 <HAL_I2C_GetState>
 800068e:	4603      	mov	r3, r0
 8000690:	2b20      	cmp	r3, #32
 8000692:	d1f9      	bne.n	8000688 <getGpsData+0x8c>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 4, 20) != HAL_OK){}
 8000694:	bf00      	nop
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <getGpsData+0xcc>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	b299      	uxth	r1, r3
 800069e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80006a2:	2314      	movs	r3, #20
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2304      	movs	r3, #4
 80006a8:	4806      	ldr	r0, [pc, #24]	; (80006c4 <getGpsData+0xc8>)
 80006aa:	f001 fa67 	bl	8001b7c <HAL_I2C_Master_Transmit>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1f0      	bne.n	8000696 <getGpsData+0x9a>

//		/////////////////////////////////////////////////////////////////////////////////////////
//
//		//WAITING FOR DATA READY
	gpsDataReady[0] = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
	gpsDataReady[1] = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
	while ((gpsDataReady[0] == 0) && (gpsDataReady[1] == 0)) //We leave as soon as read something non zero
 80006c0:	e02b      	b.n	800071a <getGpsData+0x11e>
 80006c2:	bf00      	nop
 80006c4:	20000088 	.word	0x20000088
 80006c8:	20000000 	.word	0x20000000
	{
		gpsDataTx[0] = 0xFD;
 80006cc:	23fd      	movs	r3, #253	; 0xfd
 80006ce:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
		HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, HAL_MAX_DELAY);
 80006d2:	4bb5      	ldr	r3, [pc, #724]	; (80009a8 <getGpsData+0x3ac>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	b299      	uxth	r1, r3
 80006da:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2301      	movs	r3, #1
 80006e6:	48b1      	ldr	r0, [pc, #708]	; (80009ac <getGpsData+0x3b0>)
 80006e8:	f001 fa48 	bl	8001b7c <HAL_I2C_Master_Transmit>
		gpsDataReady[0] = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
		gpsDataReady[1] = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
		HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataReady, 2, HAL_MAX_DELAY);
 80006f8:	4bab      	ldr	r3, [pc, #684]	; (80009a8 <getGpsData+0x3ac>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	b21b      	sxth	r3, r3
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	b21b      	sxth	r3, r3
 8000706:	b299      	uxth	r1, r3
 8000708:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800070c:	f04f 33ff 	mov.w	r3, #4294967295
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2302      	movs	r3, #2
 8000714:	48a5      	ldr	r0, [pc, #660]	; (80009ac <getGpsData+0x3b0>)
 8000716:	f001 fb2f 	bl	8001d78 <HAL_I2C_Master_Receive>
	while ((gpsDataReady[0] == 0) && (gpsDataReady[1] == 0)) //We leave as soon as read something non zero
 800071a:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 800071e:	2b00      	cmp	r3, #0
 8000720:	d103      	bne.n	800072a <getGpsData+0x12e>
 8000722:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0d0      	beq.n	80006cc <getGpsData+0xd0>
	}


//		//Buffer 1
	gpsDataTx[0] = 0xFF;
 800072a:	23ff      	movs	r3, #255	; 0xff
 800072c:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8000730:	bf00      	nop
 8000732:	489e      	ldr	r0, [pc, #632]	; (80009ac <getGpsData+0x3b0>)
 8000734:	f001 fd46 	bl	80021c4 <HAL_I2C_GetState>
 8000738:	4603      	mov	r3, r0
 800073a:	2b20      	cmp	r3, #32
 800073c:	d1f9      	bne.n	8000732 <getGpsData+0x136>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 800073e:	bf00      	nop
 8000740:	4b99      	ldr	r3, [pc, #612]	; (80009a8 <getGpsData+0x3ac>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	b299      	uxth	r1, r3
 8000748:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800074c:	2314      	movs	r3, #20
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2301      	movs	r3, #1
 8000752:	4896      	ldr	r0, [pc, #600]	; (80009ac <getGpsData+0x3b0>)
 8000754:	f001 fa12 	bl	8001b7c <HAL_I2C_Master_Transmit>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d1f0      	bne.n	8000740 <getGpsData+0x144>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800075e:	bf00      	nop
 8000760:	4892      	ldr	r0, [pc, #584]	; (80009ac <getGpsData+0x3b0>)
 8000762:	f001 fd2f 	bl	80021c4 <HAL_I2C_GetState>
 8000766:	4603      	mov	r3, r0
 8000768:	2b20      	cmp	r3, #32
 800076a:	d1f9      	bne.n	8000760 <getGpsData+0x164>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx1, 32, HAL_MAX_DELAY)){}
 800076c:	bf00      	nop
 800076e:	4b8e      	ldr	r3, [pc, #568]	; (80009a8 <getGpsData+0x3ac>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	b21b      	sxth	r3, r3
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	b21b      	sxth	r3, r3
 800077c:	b299      	uxth	r1, r3
 800077e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000782:	f04f 33ff 	mov.w	r3, #4294967295
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	2320      	movs	r3, #32
 800078a:	4888      	ldr	r0, [pc, #544]	; (80009ac <getGpsData+0x3b0>)
 800078c:	f001 faf4 	bl	8001d78 <HAL_I2C_Master_Receive>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1eb      	bne.n	800076e <getGpsData+0x172>
//
//		//Buffer 2
	gpsDataTx[0] = 0xFF;
 8000796:	23ff      	movs	r3, #255	; 0xff
 8000798:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800079c:	bf00      	nop
 800079e:	4883      	ldr	r0, [pc, #524]	; (80009ac <getGpsData+0x3b0>)
 80007a0:	f001 fd10 	bl	80021c4 <HAL_I2C_GetState>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b20      	cmp	r3, #32
 80007a8:	d1f9      	bne.n	800079e <getGpsData+0x1a2>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 80007aa:	bf00      	nop
 80007ac:	4b7e      	ldr	r3, [pc, #504]	; (80009a8 <getGpsData+0x3ac>)
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	b299      	uxth	r1, r3
 80007b4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80007b8:	2314      	movs	r3, #20
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2301      	movs	r3, #1
 80007be:	487b      	ldr	r0, [pc, #492]	; (80009ac <getGpsData+0x3b0>)
 80007c0:	f001 f9dc 	bl	8001b7c <HAL_I2C_Master_Transmit>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1f0      	bne.n	80007ac <getGpsData+0x1b0>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80007ca:	bf00      	nop
 80007cc:	4877      	ldr	r0, [pc, #476]	; (80009ac <getGpsData+0x3b0>)
 80007ce:	f001 fcf9 	bl	80021c4 <HAL_I2C_GetState>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b20      	cmp	r3, #32
 80007d6:	d1f9      	bne.n	80007cc <getGpsData+0x1d0>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx2, 32, HAL_MAX_DELAY)){}
 80007d8:	bf00      	nop
 80007da:	4b73      	ldr	r3, [pc, #460]	; (80009a8 <getGpsData+0x3ac>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	f043 0301 	orr.w	r3, r3, #1
 80007e6:	b21b      	sxth	r3, r3
 80007e8:	b299      	uxth	r1, r3
 80007ea:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2320      	movs	r3, #32
 80007f6:	486d      	ldr	r0, [pc, #436]	; (80009ac <getGpsData+0x3b0>)
 80007f8:	f001 fabe 	bl	8001d78 <HAL_I2C_Master_Receive>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1eb      	bne.n	80007da <getGpsData+0x1de>
//
//		//Buffer 3
	gpsDataTx[0] = 0xFF;
 8000802:	23ff      	movs	r3, #255	; 0xff
 8000804:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8000808:	bf00      	nop
 800080a:	4868      	ldr	r0, [pc, #416]	; (80009ac <getGpsData+0x3b0>)
 800080c:	f001 fcda 	bl	80021c4 <HAL_I2C_GetState>
 8000810:	4603      	mov	r3, r0
 8000812:	2b20      	cmp	r3, #32
 8000814:	d1f9      	bne.n	800080a <getGpsData+0x20e>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 8000816:	bf00      	nop
 8000818:	4b63      	ldr	r3, [pc, #396]	; (80009a8 <getGpsData+0x3ac>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	b299      	uxth	r1, r3
 8000820:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000824:	2314      	movs	r3, #20
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	2301      	movs	r3, #1
 800082a:	4860      	ldr	r0, [pc, #384]	; (80009ac <getGpsData+0x3b0>)
 800082c:	f001 f9a6 	bl	8001b7c <HAL_I2C_Master_Transmit>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d1f0      	bne.n	8000818 <getGpsData+0x21c>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8000836:	bf00      	nop
 8000838:	485c      	ldr	r0, [pc, #368]	; (80009ac <getGpsData+0x3b0>)
 800083a:	f001 fcc3 	bl	80021c4 <HAL_I2C_GetState>
 800083e:	4603      	mov	r3, r0
 8000840:	2b20      	cmp	r3, #32
 8000842:	d1f9      	bne.n	8000838 <getGpsData+0x23c>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx3, 32, HAL_MAX_DELAY)){}
 8000844:	bf00      	nop
 8000846:	4b58      	ldr	r3, [pc, #352]	; (80009a8 <getGpsData+0x3ac>)
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	b21b      	sxth	r3, r3
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	b21b      	sxth	r3, r3
 8000854:	b299      	uxth	r1, r3
 8000856:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	2320      	movs	r3, #32
 8000862:	4852      	ldr	r0, [pc, #328]	; (80009ac <getGpsData+0x3b0>)
 8000864:	f001 fa88 	bl	8001d78 <HAL_I2C_Master_Receive>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1eb      	bne.n	8000846 <getGpsData+0x24a>

	//Buffer 4
	gpsDataTx[0] = 0xFF;
 800086e:	23ff      	movs	r3, #255	; 0xff
 8000870:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8000874:	bf00      	nop
 8000876:	484d      	ldr	r0, [pc, #308]	; (80009ac <getGpsData+0x3b0>)
 8000878:	f001 fca4 	bl	80021c4 <HAL_I2C_GetState>
 800087c:	4603      	mov	r3, r0
 800087e:	2b20      	cmp	r3, #32
 8000880:	d1f9      	bne.n	8000876 <getGpsData+0x27a>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 8000882:	bf00      	nop
 8000884:	4b48      	ldr	r3, [pc, #288]	; (80009a8 <getGpsData+0x3ac>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	b299      	uxth	r1, r3
 800088c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000890:	2314      	movs	r3, #20
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2301      	movs	r3, #1
 8000896:	4845      	ldr	r0, [pc, #276]	; (80009ac <getGpsData+0x3b0>)
 8000898:	f001 f970 	bl	8001b7c <HAL_I2C_Master_Transmit>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d1f0      	bne.n	8000884 <getGpsData+0x288>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80008a2:	bf00      	nop
 80008a4:	4841      	ldr	r0, [pc, #260]	; (80009ac <getGpsData+0x3b0>)
 80008a6:	f001 fc8d 	bl	80021c4 <HAL_I2C_GetState>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b20      	cmp	r3, #32
 80008ae:	d1f9      	bne.n	80008a4 <getGpsData+0x2a8>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx4, 4, HAL_MAX_DELAY)){}
 80008b0:	bf00      	nop
 80008b2:	4b3d      	ldr	r3, [pc, #244]	; (80009a8 <getGpsData+0x3ac>)
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	b21b      	sxth	r3, r3
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	b21b      	sxth	r3, r3
 80008c0:	b299      	uxth	r1, r3
 80008c2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2304      	movs	r3, #4
 80008ce:	4837      	ldr	r0, [pc, #220]	; (80009ac <getGpsData+0x3b0>)
 80008d0:	f001 fa52 	bl	8001d78 <HAL_I2C_Master_Receive>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d1eb      	bne.n	80008b2 <getGpsData+0x2b6>


	//Create concaterated buffer
	 size_t totalSize = sizeof(gpsDataRx1) + sizeof(gpsDataRx2) + sizeof(gpsDataRx3) + sizeof(gpsDataRx4);
 80008da:	2364      	movs	r3, #100	; 0x64
 80008dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	// Allocate memory for the concatenated array
	uint8_t *concatenatedArray = (uint8_t *)malloc(totalSize);
 80008e0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80008e4:	f003 f808 	bl	80038f8 <malloc>
 80008e8:	4603      	mov	r3, r0
 80008ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	// Copy the contents of each array into the concatenated array
	size_t offset = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx1, sizeof(gpsDataRx1));
 80008f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80008f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80008fc:	4413      	add	r3, r2
 80008fe:	461d      	mov	r5, r3
 8000900:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8000904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000906:	6028      	str	r0, [r5, #0]
 8000908:	6069      	str	r1, [r5, #4]
 800090a:	60aa      	str	r2, [r5, #8]
 800090c:	60eb      	str	r3, [r5, #12]
 800090e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000910:	6128      	str	r0, [r5, #16]
 8000912:	6169      	str	r1, [r5, #20]
 8000914:	61aa      	str	r2, [r5, #24]
 8000916:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx1);
 8000918:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800091c:	3320      	adds	r3, #32
 800091e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx2, sizeof(gpsDataRx2));
 8000922:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000926:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800092a:	4413      	add	r3, r2
 800092c:	461d      	mov	r5, r3
 800092e:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000934:	6028      	str	r0, [r5, #0]
 8000936:	6069      	str	r1, [r5, #4]
 8000938:	60aa      	str	r2, [r5, #8]
 800093a:	60eb      	str	r3, [r5, #12]
 800093c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800093e:	6128      	str	r0, [r5, #16]
 8000940:	6169      	str	r1, [r5, #20]
 8000942:	61aa      	str	r2, [r5, #24]
 8000944:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx2);
 8000946:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800094a:	3320      	adds	r3, #32
 800094c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx3, sizeof(gpsDataRx3));
 8000950:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000954:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000958:	4413      	add	r3, r2
 800095a:	461d      	mov	r5, r3
 800095c:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000962:	6028      	str	r0, [r5, #0]
 8000964:	6069      	str	r1, [r5, #4]
 8000966:	60aa      	str	r2, [r5, #8]
 8000968:	60eb      	str	r3, [r5, #12]
 800096a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800096c:	6128      	str	r0, [r5, #16]
 800096e:	6169      	str	r1, [r5, #20]
 8000970:	61aa      	str	r2, [r5, #24]
 8000972:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx3);
 8000974:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000978:	3320      	adds	r3, #32
 800097a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx4, sizeof(gpsDataRx4));
 800097e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000982:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000986:	4413      	add	r3, r2
 8000988:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800098a:	601a      	str	r2, [r3, #0]


	//String comparisons
	const char* GNRMC = "NRMC,";
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <getGpsData+0x3b4>)
 800098e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	const char* minus1 = "-1";
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <getGpsData+0x3b8>)
 8000994:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	const char* comma = ",";
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <getGpsData+0x3bc>)
 800099a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	char* gpsDataList[12];

	for (int i = 0; i < 12; i++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80009a4:	e017      	b.n	80009d6 <getGpsData+0x3da>
 80009a6:	bf00      	nop
 80009a8:	20000000 	.word	0x20000000
 80009ac:	20000088 	.word	0x20000088
 80009b0:	08004a3c 	.word	0x08004a3c
 80009b4:	08004a44 	.word	0x08004a44
 80009b8:	08004a48 	.word	0x08004a48
	    gpsDataList[i] = "-1";
 80009bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	33d8      	adds	r3, #216	; 0xd8
 80009c4:	443b      	add	r3, r7
 80009c6:	4aae      	ldr	r2, [pc, #696]	; (8000c80 <getGpsData+0x684>)
 80009c8:	f843 2cc8 	str.w	r2, [r3, #-200]
	for (int i = 0; i < 12; i++) {
 80009cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80009d0:	3301      	adds	r3, #1
 80009d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80009d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80009da:	2b0b      	cmp	r3, #11
 80009dc:	ddee      	ble.n	80009bc <getGpsData+0x3c0>
	}

	//Parsing the data and updating our values

	if (strncmp(concatenatedArray, GNRMC, strlen(GNRMC)) == 0) {
 80009de:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80009e2:	f7ff fbfd 	bl	80001e0 <strlen>
 80009e6:	4603      	mov	r3, r0
 80009e8:	461a      	mov	r2, r3
 80009ea:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80009ee:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80009f2:	f003 f9c4 	bl	8003d7e <strncmp>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d123      	bne.n	8000a44 <getGpsData+0x448>
		char* individualGpsData = strtok(gpsDataRx1, ","); // Initialize strtok with the buffer
 80009fc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000a00:	49a0      	ldr	r1, [pc, #640]	; (8000c84 <getGpsData+0x688>)
 8000a02:	4618      	mov	r0, r3
 8000a04:	f003 f9ce 	bl	8003da4 <strtok>
 8000a08:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		int index = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

		while (individualGpsData != NULL) {
 8000a12:	e013      	b.n	8000a3c <getGpsData+0x440>
			gpsDataList[index] = individualGpsData; // Store the token in an array
 8000a14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	33d8      	adds	r3, #216	; 0xd8
 8000a1c:	443b      	add	r3, r7
 8000a1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8000a22:	f843 2cc8 	str.w	r2, [r3, #-200]
			individualGpsData = strtok(NULL, ","); // Get the next token
 8000a26:	4997      	ldr	r1, [pc, #604]	; (8000c84 <getGpsData+0x688>)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f003 f9bb 	bl	8003da4 <strtok>
 8000a2e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
			index++;
 8000a32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000a36:	3301      	adds	r3, #1
 8000a38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		while (individualGpsData != NULL) {
 8000a3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d1e7      	bne.n	8000a14 <getGpsData+0x418>
		}
	}

	//if the value is different from both -1 and ,, we update our time
	if ((strncmp(gpsDataList[1], minus1, strlen(minus1)) != 0) &&
 8000a44:	697c      	ldr	r4, [r7, #20]
 8000a46:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8000a4a:	f7ff fbc9 	bl	80001e0 <strlen>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	461a      	mov	r2, r3
 8000a52:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8000a56:	4620      	mov	r0, r4
 8000a58:	f003 f991 	bl	8003d7e <strncmp>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d019      	beq.n	8000a96 <getGpsData+0x49a>
	   (strncmp(gpsDataList[1], comma, strlen(comma)) != 0)) {
 8000a62:	697c      	ldr	r4, [r7, #20]
 8000a64:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8000a68:	f7ff fbba 	bl	80001e0 <strlen>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	461a      	mov	r2, r3
 8000a70:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8000a74:	4620      	mov	r0, r4
 8000a76:	f003 f982 	bl	8003d7e <strncmp>
 8000a7a:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[1], minus1, strlen(minus1)) != 0) &&
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d00a      	beq.n	8000a96 <getGpsData+0x49a>
		*time = atoi(gpsDataList[1]);
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 ff34 	bl	80038f0 <atoi>
 8000a88:	ee07 0a90 	vmov	s15, r0
 8000a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((strncmp(gpsDataList[3], minus1, strlen(minus1)) != 0) &&
 8000a96:	69fc      	ldr	r4, [r7, #28]
 8000a98:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8000a9c:	f7ff fba0 	bl	80001e0 <strlen>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8000aa8:	4620      	mov	r0, r4
 8000aaa:	f003 f968 	bl	8003d7e <strncmp>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d019      	beq.n	8000ae8 <getGpsData+0x4ec>
	   (strncmp(gpsDataList[3], comma, strlen(comma)) != 0)) {
 8000ab4:	69fc      	ldr	r4, [r7, #28]
 8000ab6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8000aba:	f7ff fb91 	bl	80001e0 <strlen>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8000ac6:	4620      	mov	r0, r4
 8000ac8:	f003 f959 	bl	8003d7e <strncmp>
 8000acc:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[3], minus1, strlen(minus1)) != 0) &&
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d00a      	beq.n	8000ae8 <getGpsData+0x4ec>
		*lat = atoi(gpsDataList[3]);
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f002 ff0b 	bl	80038f0 <atoi>
 8000ada:	ee07 0a90 	vmov	s15, r0
 8000ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((strncmp(gpsDataList[4], minus1, strlen(minus1)) != 0) &&
 8000ae8:	6a3c      	ldr	r4, [r7, #32]
 8000aea:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8000aee:	f7ff fb77 	bl	80001e0 <strlen>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8000afa:	4620      	mov	r0, r4
 8000afc:	f003 f93f 	bl	8003d7e <strncmp>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d013      	beq.n	8000b2e <getGpsData+0x532>
	   (strncmp(gpsDataList[4], comma, strlen(comma)) != 0)) {
 8000b06:	6a3c      	ldr	r4, [r7, #32]
 8000b08:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8000b0c:	f7ff fb68 	bl	80001e0 <strlen>
 8000b10:	4603      	mov	r3, r0
 8000b12:	461a      	mov	r2, r3
 8000b14:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8000b18:	4620      	mov	r0, r4
 8000b1a:	f003 f930 	bl	8003d7e <strncmp>
 8000b1e:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[4], minus1, strlen(minus1)) != 0) &&
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d004      	beq.n	8000b2e <getGpsData+0x532>
		*latDir = (gpsDataList[4]);
 8000b24:	6a3b      	ldr	r3, [r7, #32]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000b2c:	701a      	strb	r2, [r3, #0]
	}

	if ((strncmp(gpsDataList[5], minus1, strlen(minus1)) != 0) &&
 8000b2e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000b30:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8000b34:	f7ff fb54 	bl	80001e0 <strlen>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8000b40:	4620      	mov	r0, r4
 8000b42:	f003 f91c 	bl	8003d7e <strncmp>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d019      	beq.n	8000b80 <getGpsData+0x584>
	   (strncmp(gpsDataList[5], comma, strlen(comma)) != 0)) {
 8000b4c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000b4e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8000b52:	f7ff fb45 	bl	80001e0 <strlen>
 8000b56:	4603      	mov	r3, r0
 8000b58:	461a      	mov	r2, r3
 8000b5a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8000b5e:	4620      	mov	r0, r4
 8000b60:	f003 f90d 	bl	8003d7e <strncmp>
 8000b64:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[5], minus1, strlen(minus1)) != 0) &&
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d00a      	beq.n	8000b80 <getGpsData+0x584>
		*longi = atoi(gpsDataList[5]);
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 febf 	bl	80038f0 <atoi>
 8000b72:	ee07 0a90 	vmov	s15, r0
 8000b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((strncmp(gpsDataList[6], minus1, strlen(minus1)) != 0) &&
 8000b80:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8000b82:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8000b86:	f7ff fb2b 	bl	80001e0 <strlen>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8000b92:	4620      	mov	r0, r4
 8000b94:	f003 f8f3 	bl	8003d7e <strncmp>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d013      	beq.n	8000bc6 <getGpsData+0x5ca>
	   (strncmp(gpsDataList[6], comma, strlen(comma)) != 0)) {
 8000b9e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8000ba0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8000ba4:	f7ff fb1c 	bl	80001e0 <strlen>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	461a      	mov	r2, r3
 8000bac:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	f003 f8e4 	bl	8003d7e <strncmp>
 8000bb6:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[6], minus1, strlen(minus1)) != 0) &&
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d004      	beq.n	8000bc6 <getGpsData+0x5ca>
		*longDir = gpsDataList[6];
 8000bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000bc4:	701a      	strb	r2, [r3, #0]
	}

	if ((strncmp(gpsDataList[7], minus1, strlen(minus1)) != 0) &&
 8000bc6:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8000bc8:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8000bcc:	f7ff fb08 	bl	80001e0 <strlen>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8000bd8:	4620      	mov	r0, r4
 8000bda:	f003 f8d0 	bl	8003d7e <strncmp>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d019      	beq.n	8000c18 <getGpsData+0x61c>
	   (strncmp(gpsDataList[7], comma, strlen(comma)) != 0)) {
 8000be4:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8000be6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8000bea:	f7ff faf9 	bl	80001e0 <strlen>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	f003 f8c1 	bl	8003d7e <strncmp>
 8000bfc:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[7], minus1, strlen(minus1)) != 0) &&
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d00a      	beq.n	8000c18 <getGpsData+0x61c>
		*date = atoi(gpsDataList[7]);
 8000c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c04:	4618      	mov	r0, r3
 8000c06:	f002 fe73 	bl	80038f0 <atoi>
 8000c0a:	ee07 0a90 	vmov	s15, r0
 8000c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	edc3 7a00 	vstr	s15, [r3]
	}


		//Sending data via UART
	HAL_UART_Transmit(&huart2, gpsDataRx1, sizeof(gpsDataRx1), HAL_MAX_DELAY);
 8000c18:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c20:	2220      	movs	r2, #32
 8000c22:	4819      	ldr	r0, [pc, #100]	; (8000c88 <getGpsData+0x68c>)
 8000c24:	f002 faef 	bl	8003206 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, gpsDataRx2, sizeof(gpsDataRx2), HAL_MAX_DELAY);
 8000c28:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c30:	2220      	movs	r2, #32
 8000c32:	4815      	ldr	r0, [pc, #84]	; (8000c88 <getGpsData+0x68c>)
 8000c34:	f002 fae7 	bl	8003206 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, gpsDataRx3, sizeof(gpsDataRx3), HAL_MAX_DELAY);
 8000c38:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c40:	2220      	movs	r2, #32
 8000c42:	4811      	ldr	r0, [pc, #68]	; (8000c88 <getGpsData+0x68c>)
 8000c44:	f002 fadf 	bl	8003206 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, gpsDataRx4, sizeof(gpsDataRx4), HAL_MAX_DELAY);
 8000c48:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c50:	2204      	movs	r2, #4
 8000c52:	480d      	ldr	r0, [pc, #52]	; (8000c88 <getGpsData+0x68c>)
 8000c54:	f002 fad7 	bl	8003206 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, concatenatedArray, sizeof(concatenatedArray), HAL_MAX_DELAY);
 8000c58:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5c:	2204      	movs	r2, #4
 8000c5e:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8000c62:	4809      	ldr	r0, [pc, #36]	; (8000c88 <getGpsData+0x68c>)
 8000c64:	f002 facf 	bl	8003206 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000c68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c6c:	f000 fb9a 	bl	80013a4 <HAL_Delay>

	free(concatenatedArray);
 8000c70:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8000c74:	f002 fe48 	bl	8003908 <free>
}
 8000c78:	bf00      	nop
 8000c7a:	37d8      	adds	r7, #216	; 0xd8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bdb0      	pop	{r4, r5, r7, pc}
 8000c80:	08004a44 	.word	0x08004a44
 8000c84:	08004a48 	.word	0x08004a48
 8000c88:	200000dc 	.word	0x200000dc

08000c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b094      	sub	sp, #80	; 0x50
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	f107 0320 	add.w	r3, r7, #32
 8000c96:	2230      	movs	r2, #48	; 0x30
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f003 f867 	bl	8003d6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	4b28      	ldr	r3, [pc, #160]	; (8000d58 <SystemClock_Config+0xcc>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb8:	4a27      	ldr	r2, [pc, #156]	; (8000d58 <SystemClock_Config+0xcc>)
 8000cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc0:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <SystemClock_Config+0xcc>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <SystemClock_Config+0xd0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a21      	ldr	r2, [pc, #132]	; (8000d5c <SystemClock_Config+0xd0>)
 8000cd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <SystemClock_Config+0xd0>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cec:	2301      	movs	r3, #1
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf0:	2310      	movs	r3, #16
 8000cf2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cfc:	2310      	movs	r3, #16
 8000cfe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d00:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d06:	2304      	movs	r3, #4
 8000d08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0e:	f107 0320 	add.w	r3, r7, #32
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 fd92 	bl	800283c <HAL_RCC_OscConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d1e:	f000 f8e5 	bl	8000eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d22:	230f      	movs	r3, #15
 8000d24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d26:	2302      	movs	r3, #2
 8000d28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	2102      	movs	r1, #2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 fff4 	bl	8002d2c <HAL_RCC_ClockConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d4a:	f000 f8cf 	bl	8000eec <Error_Handler>
  }
}
 8000d4e:	bf00      	nop
 8000d50:	3750      	adds	r7, #80	; 0x50
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40007000 	.word	0x40007000

08000d60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d66:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <MX_I2C1_Init+0x54>)
 8000d68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d6c:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <MX_I2C1_Init+0x58>)
 8000d6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <MX_I2C1_Init+0x50>)
 8000d9e:	f000 fda9 	bl	80018f4 <HAL_I2C_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000da8:	f000 f8a0 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000088 	.word	0x20000088
 8000db4:	40005400 	.word	0x40005400
 8000db8:	000186a0 	.word	0x000186a0

08000dbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <MX_USART2_UART_Init+0x50>)
 8000dc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000de2:	220c      	movs	r2, #12
 8000de4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000df4:	f002 f9ba 	bl	800316c <HAL_UART_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dfe:	f000 f875 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200000dc 	.word	0x200000dc
 8000e0c:	40004400 	.word	0x40004400

08000e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <MX_GPIO_Init+0xd0>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a2c      	ldr	r2, [pc, #176]	; (8000ee0 <MX_GPIO_Init+0xd0>)
 8000e30:	f043 0304 	orr.w	r3, r3, #4
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b2a      	ldr	r3, [pc, #168]	; (8000ee0 <MX_GPIO_Init+0xd0>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b26      	ldr	r3, [pc, #152]	; (8000ee0 <MX_GPIO_Init+0xd0>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a25      	ldr	r2, [pc, #148]	; (8000ee0 <MX_GPIO_Init+0xd0>)
 8000e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <MX_GPIO_Init+0xd0>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <MX_GPIO_Init+0xd0>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a1e      	ldr	r2, [pc, #120]	; (8000ee0 <MX_GPIO_Init+0xd0>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <MX_GPIO_Init+0xd0>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_GPIO_Init+0xd0>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <MX_GPIO_Init+0xd0>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <MX_GPIO_Init+0xd0>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2120      	movs	r1, #32
 8000e9a:	4812      	ldr	r0, [pc, #72]	; (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e9c:	f000 fd10 	bl	80018c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ea0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ea6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <MX_GPIO_Init+0xd8>)
 8000eb8:	f000 fb7e 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ebc:	2320      	movs	r3, #32
 8000ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <MX_GPIO_Init+0xd4>)
 8000ed4:	f000 fb70 	bl	80015b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ed8:	bf00      	nop
 8000eda:	3728      	adds	r7, #40	; 0x28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40020800 	.word	0x40020800

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
}
 8000ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <Error_Handler+0x8>
	...

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	4a0f      	ldr	r2, [pc, #60]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f28:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_MspInit+0x4c>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f36:	2007      	movs	r0, #7
 8000f38:	f000 fb0a 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40023800 	.word	0x40023800

08000f48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a19      	ldr	r2, [pc, #100]	; (8000fcc <HAL_I2C_MspInit+0x84>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d12c      	bne.n	8000fc4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <HAL_I2C_MspInit+0x88>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a17      	ldr	r2, [pc, #92]	; (8000fd0 <HAL_I2C_MspInit+0x88>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <HAL_I2C_MspInit+0x88>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f8c:	2312      	movs	r3, #18
 8000f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <HAL_I2C_MspInit+0x8c>)
 8000fa4:	f000 fb08 	bl	80015b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_I2C_MspInit+0x88>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_I2C_MspInit+0x88>)
 8000fb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <HAL_I2C_MspInit+0x88>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fc4:	bf00      	nop
 8000fc6:	3728      	adds	r7, #40	; 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40005400 	.word	0x40005400
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020400 	.word	0x40020400

08000fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a19      	ldr	r2, [pc, #100]	; (800105c <HAL_UART_MspInit+0x84>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d12b      	bne.n	8001052 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <HAL_UART_MspInit+0x88>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	4a17      	ldr	r2, [pc, #92]	; (8001060 <HAL_UART_MspInit+0x88>)
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	6413      	str	r3, [r2, #64]	; 0x40
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_UART_MspInit+0x88>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <HAL_UART_MspInit+0x88>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a10      	ldr	r2, [pc, #64]	; (8001060 <HAL_UART_MspInit+0x88>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <HAL_UART_MspInit+0x88>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001032:	230c      	movs	r3, #12
 8001034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001042:	2307      	movs	r3, #7
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <HAL_UART_MspInit+0x8c>)
 800104e:	f000 fab3 	bl	80015b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001052:	bf00      	nop
 8001054:	3728      	adds	r7, #40	; 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40004400 	.word	0x40004400
 8001060:	40023800 	.word	0x40023800
 8001064:	40020000 	.word	0x40020000

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800106c:	e7fe      	b.n	800106c <NMI_Handler+0x4>

0800106e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <MemManage_Handler+0x4>

0800107a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <UsageFault_Handler+0x4>

08001086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b4:	f000 f956 	bl	8001364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return 1;
 80010c0:	2301      	movs	r3, #1
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_kill>:

int _kill(int pid, int sig)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010d6:	f002 ff17 	bl	8003f08 <__errno>
 80010da:	4603      	mov	r3, r0
 80010dc:	2216      	movs	r2, #22
 80010de:	601a      	str	r2, [r3, #0]
  return -1;
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <_exit>:

void _exit (int status)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ffe7 	bl	80010cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80010fe:	e7fe      	b.n	80010fe <_exit+0x12>

08001100 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	e00a      	b.n	8001128 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001112:	f3af 8000 	nop.w
 8001116:	4601      	mov	r1, r0
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	60ba      	str	r2, [r7, #8]
 800111e:	b2ca      	uxtb	r2, r1
 8001120:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3301      	adds	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	dbf0      	blt.n	8001112 <_read+0x12>
  }

  return len;
 8001130:	687b      	ldr	r3, [r7, #4]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	e009      	b.n	8001160 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	60ba      	str	r2, [r7, #8]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3301      	adds	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	dbf1      	blt.n	800114c <_write+0x12>
  }
  return len;
 8001168:	687b      	ldr	r3, [r7, #4]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_close>:

int _close(int file)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800119a:	605a      	str	r2, [r3, #4]
  return 0;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <_isatty>:

int _isatty(int file)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <_sbrk+0x5c>)
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <_sbrk+0x60>)
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <_sbrk+0x64>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <_sbrk+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	429a      	cmp	r2, r3
 800120a:	d207      	bcs.n	800121c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800120c:	f002 fe7c 	bl	8003f08 <__errno>
 8001210:	4603      	mov	r3, r0
 8001212:	220c      	movs	r2, #12
 8001214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	e009      	b.n	8001230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <_sbrk+0x64>)
 800122c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20020000 	.word	0x20020000
 800123c:	00000400 	.word	0x00000400
 8001240:	20000120 	.word	0x20000120
 8001244:	20000278 	.word	0x20000278

08001248 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <SystemInit+0x20>)
 800124e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <SystemInit+0x20>)
 8001254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800126c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001270:	480d      	ldr	r0, [pc, #52]	; (80012a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001272:	490e      	ldr	r1, [pc, #56]	; (80012ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001274:	4a0e      	ldr	r2, [pc, #56]	; (80012b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001278:	e002      	b.n	8001280 <LoopCopyDataInit>

0800127a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800127c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127e:	3304      	adds	r3, #4

08001280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001284:	d3f9      	bcc.n	800127a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001286:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001288:	4c0b      	ldr	r4, [pc, #44]	; (80012b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800128c:	e001      	b.n	8001292 <LoopFillZerobss>

0800128e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001290:	3204      	adds	r2, #4

08001292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001294:	d3fb      	bcc.n	800128e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001296:	f7ff ffd7 	bl	8001248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800129a:	f002 fe3b 	bl	8003f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129e:	f7ff f975 	bl	800058c <main>
  bx  lr    
 80012a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ac:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80012b0:	08004cec 	.word	0x08004cec
  ldr r2, =_sbss
 80012b4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80012b8:	20000274 	.word	0x20000274

080012bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC_IRQHandler>
	...

080012c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <HAL_Init+0x40>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0d      	ldr	r2, [pc, #52]	; (8001300 <HAL_Init+0x40>)
 80012ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <HAL_Init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_Init+0x40>)
 80012d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_Init+0x40>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_Init+0x40>)
 80012e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e8:	2003      	movs	r0, #3
 80012ea:	f000 f931 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f000 f808 	bl	8001304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f4:	f7ff fe00 	bl	8000ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023c00 	.word	0x40023c00

08001304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_InitTick+0x54>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_InitTick+0x58>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131a:	fbb3 f3f1 	udiv	r3, r3, r1
 800131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f93b 	bl	800159e <HAL_SYSTICK_Config>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e00e      	b.n	8001350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b0f      	cmp	r3, #15
 8001336:	d80a      	bhi.n	800134e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001338:	2200      	movs	r2, #0
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f000 f911 	bl	8001566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001344:	4a06      	ldr	r2, [pc, #24]	; (8001360 <HAL_InitTick+0x5c>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	e000      	b.n	8001350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000004 	.word	0x20000004
 800135c:	2000000c 	.word	0x2000000c
 8001360:	20000008 	.word	0x20000008

08001364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_IncTick+0x20>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_IncTick+0x24>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4413      	add	r3, r2
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <HAL_IncTick+0x24>)
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	2000000c 	.word	0x2000000c
 8001388:	20000124 	.word	0x20000124

0800138c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return uwTick;
 8001390:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <HAL_GetTick+0x14>)
 8001392:	681b      	ldr	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000124 	.word	0x20000124

080013a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ac:	f7ff ffee 	bl	800138c <HAL_GetTick>
 80013b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013bc:	d005      	beq.n	80013ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_Delay+0x44>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4413      	add	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ca:	bf00      	nop
 80013cc:	f7ff ffde 	bl	800138c <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d8f7      	bhi.n	80013cc <HAL_Delay+0x28>
  {
  }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000000c 	.word	0x2000000c

080013ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001408:	4013      	ands	r3, r2
 800140a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141e:	4a04      	ldr	r2, [pc, #16]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	60d3      	str	r3, [r2, #12]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <__NVIC_GetPriorityGrouping+0x18>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	f003 0307 	and.w	r3, r3, #7
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	; (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
         );
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800151c:	d301      	bcc.n	8001522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151e:	2301      	movs	r3, #1
 8001520:	e00f      	b.n	8001542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <SysTick_Config+0x40>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152a:	210f      	movs	r1, #15
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f7ff ff8e 	bl	8001450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <SysTick_Config+0x40>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <SysTick_Config+0x40>)
 800153c:	2207      	movs	r2, #7
 800153e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	e000e010 	.word	0xe000e010

08001550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff47 	bl	80013ec <__NVIC_SetPriorityGrouping>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001578:	f7ff ff5c 	bl	8001434 <__NVIC_GetPriorityGrouping>
 800157c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff ff8e 	bl	80014a4 <NVIC_EncodePriority>
 8001588:	4602      	mov	r2, r0
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff5d 	bl	8001450 <__NVIC_SetPriority>
}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ffb0 	bl	800150c <SysTick_Config>
 80015ac:	4603      	mov	r3, r0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	e159      	b.n	8001888 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015d4:	2201      	movs	r2, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	f040 8148 	bne.w	8001882 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d005      	beq.n	800160a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001606:	2b02      	cmp	r3, #2
 8001608:	d130      	bne.n	800166c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	2203      	movs	r2, #3
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001640:	2201      	movs	r2, #1
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	f003 0201 	and.w	r2, r3, #1
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b03      	cmp	r3, #3
 8001676:	d017      	beq.n	80016a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d123      	bne.n	80016fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	08da      	lsrs	r2, r3, #3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3208      	adds	r2, #8
 80016bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	220f      	movs	r2, #15
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	08da      	lsrs	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3208      	adds	r2, #8
 80016f6:	69b9      	ldr	r1, [r7, #24]
 80016f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0203 	and.w	r2, r3, #3
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80a2 	beq.w	8001882 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b57      	ldr	r3, [pc, #348]	; (80018a0 <HAL_GPIO_Init+0x2e8>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	4a56      	ldr	r2, [pc, #344]	; (80018a0 <HAL_GPIO_Init+0x2e8>)
 8001748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174c:	6453      	str	r3, [r2, #68]	; 0x44
 800174e:	4b54      	ldr	r3, [pc, #336]	; (80018a0 <HAL_GPIO_Init+0x2e8>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800175a:	4a52      	ldr	r2, [pc, #328]	; (80018a4 <HAL_GPIO_Init+0x2ec>)
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	089b      	lsrs	r3, r3, #2
 8001760:	3302      	adds	r3, #2
 8001762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	220f      	movs	r2, #15
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a49      	ldr	r2, [pc, #292]	; (80018a8 <HAL_GPIO_Init+0x2f0>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d019      	beq.n	80017ba <HAL_GPIO_Init+0x202>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a48      	ldr	r2, [pc, #288]	; (80018ac <HAL_GPIO_Init+0x2f4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d013      	beq.n	80017b6 <HAL_GPIO_Init+0x1fe>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a47      	ldr	r2, [pc, #284]	; (80018b0 <HAL_GPIO_Init+0x2f8>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d00d      	beq.n	80017b2 <HAL_GPIO_Init+0x1fa>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a46      	ldr	r2, [pc, #280]	; (80018b4 <HAL_GPIO_Init+0x2fc>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d007      	beq.n	80017ae <HAL_GPIO_Init+0x1f6>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a45      	ldr	r2, [pc, #276]	; (80018b8 <HAL_GPIO_Init+0x300>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d101      	bne.n	80017aa <HAL_GPIO_Init+0x1f2>
 80017a6:	2304      	movs	r3, #4
 80017a8:	e008      	b.n	80017bc <HAL_GPIO_Init+0x204>
 80017aa:	2307      	movs	r3, #7
 80017ac:	e006      	b.n	80017bc <HAL_GPIO_Init+0x204>
 80017ae:	2303      	movs	r3, #3
 80017b0:	e004      	b.n	80017bc <HAL_GPIO_Init+0x204>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e002      	b.n	80017bc <HAL_GPIO_Init+0x204>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <HAL_GPIO_Init+0x204>
 80017ba:	2300      	movs	r3, #0
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	f002 0203 	and.w	r2, r2, #3
 80017c2:	0092      	lsls	r2, r2, #2
 80017c4:	4093      	lsls	r3, r2
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017cc:	4935      	ldr	r1, [pc, #212]	; (80018a4 <HAL_GPIO_Init+0x2ec>)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	089b      	lsrs	r3, r3, #2
 80017d2:	3302      	adds	r3, #2
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017da:	4b38      	ldr	r3, [pc, #224]	; (80018bc <HAL_GPIO_Init+0x304>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017fe:	4a2f      	ldr	r2, [pc, #188]	; (80018bc <HAL_GPIO_Init+0x304>)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001804:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <HAL_GPIO_Init+0x304>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001828:	4a24      	ldr	r2, [pc, #144]	; (80018bc <HAL_GPIO_Init+0x304>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800182e:	4b23      	ldr	r3, [pc, #140]	; (80018bc <HAL_GPIO_Init+0x304>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001852:	4a1a      	ldr	r2, [pc, #104]	; (80018bc <HAL_GPIO_Init+0x304>)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001858:	4b18      	ldr	r3, [pc, #96]	; (80018bc <HAL_GPIO_Init+0x304>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800187c:	4a0f      	ldr	r2, [pc, #60]	; (80018bc <HAL_GPIO_Init+0x304>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3301      	adds	r3, #1
 8001886:	61fb      	str	r3, [r7, #28]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	2b0f      	cmp	r3, #15
 800188c:	f67f aea2 	bls.w	80015d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3724      	adds	r7, #36	; 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40013800 	.word	0x40013800
 80018a8:	40020000 	.word	0x40020000
 80018ac:	40020400 	.word	0x40020400
 80018b0:	40020800 	.word	0x40020800
 80018b4:	40020c00 	.word	0x40020c00
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40013c00 	.word	0x40013c00

080018c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	807b      	strh	r3, [r7, #2]
 80018cc:	4613      	mov	r3, r2
 80018ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018d0:	787b      	ldrb	r3, [r7, #1]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018d6:	887a      	ldrh	r2, [r7, #2]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018dc:	e003      	b.n	80018e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018de:	887b      	ldrh	r3, [r7, #2]
 80018e0:	041a      	lsls	r2, r3, #16
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	619a      	str	r2, [r3, #24]
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e12b      	b.n	8001b5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d106      	bne.n	8001920 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff fb14 	bl	8000f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2224      	movs	r2, #36	; 0x24
 8001924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0201 	bic.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001946:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001956:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001958:	f001 fbe0 	bl	800311c <HAL_RCC_GetPCLK1Freq>
 800195c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	4a81      	ldr	r2, [pc, #516]	; (8001b68 <HAL_I2C_Init+0x274>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d807      	bhi.n	8001978 <HAL_I2C_Init+0x84>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4a80      	ldr	r2, [pc, #512]	; (8001b6c <HAL_I2C_Init+0x278>)
 800196c:	4293      	cmp	r3, r2
 800196e:	bf94      	ite	ls
 8001970:	2301      	movls	r3, #1
 8001972:	2300      	movhi	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	e006      	b.n	8001986 <HAL_I2C_Init+0x92>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4a7d      	ldr	r2, [pc, #500]	; (8001b70 <HAL_I2C_Init+0x27c>)
 800197c:	4293      	cmp	r3, r2
 800197e:	bf94      	ite	ls
 8001980:	2301      	movls	r3, #1
 8001982:	2300      	movhi	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e0e7      	b.n	8001b5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4a78      	ldr	r2, [pc, #480]	; (8001b74 <HAL_I2C_Init+0x280>)
 8001992:	fba2 2303 	umull	r2, r3, r2, r3
 8001996:	0c9b      	lsrs	r3, r3, #18
 8001998:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	4a6a      	ldr	r2, [pc, #424]	; (8001b68 <HAL_I2C_Init+0x274>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d802      	bhi.n	80019c8 <HAL_I2C_Init+0xd4>
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	3301      	adds	r3, #1
 80019c6:	e009      	b.n	80019dc <HAL_I2C_Init+0xe8>
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019ce:	fb02 f303 	mul.w	r3, r2, r3
 80019d2:	4a69      	ldr	r2, [pc, #420]	; (8001b78 <HAL_I2C_Init+0x284>)
 80019d4:	fba2 2303 	umull	r2, r3, r2, r3
 80019d8:	099b      	lsrs	r3, r3, #6
 80019da:	3301      	adds	r3, #1
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	430b      	orrs	r3, r1
 80019e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	495c      	ldr	r1, [pc, #368]	; (8001b68 <HAL_I2C_Init+0x274>)
 80019f8:	428b      	cmp	r3, r1
 80019fa:	d819      	bhi.n	8001a30 <HAL_I2C_Init+0x13c>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	1e59      	subs	r1, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a0a:	1c59      	adds	r1, r3, #1
 8001a0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a10:	400b      	ands	r3, r1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00a      	beq.n	8001a2c <HAL_I2C_Init+0x138>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1e59      	subs	r1, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a24:	3301      	adds	r3, #1
 8001a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a2a:	e051      	b.n	8001ad0 <HAL_I2C_Init+0x1dc>
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	e04f      	b.n	8001ad0 <HAL_I2C_Init+0x1dc>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d111      	bne.n	8001a5c <HAL_I2C_Init+0x168>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1e58      	subs	r0, r3, #1
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6859      	ldr	r1, [r3, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	440b      	add	r3, r1
 8001a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	bf0c      	ite	eq
 8001a54:	2301      	moveq	r3, #1
 8001a56:	2300      	movne	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	e012      	b.n	8001a82 <HAL_I2C_Init+0x18e>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	1e58      	subs	r0, r3, #1
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6859      	ldr	r1, [r3, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	0099      	lsls	r1, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a72:	3301      	adds	r3, #1
 8001a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	bf0c      	ite	eq
 8001a7c:	2301      	moveq	r3, #1
 8001a7e:	2300      	movne	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_I2C_Init+0x196>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e022      	b.n	8001ad0 <HAL_I2C_Init+0x1dc>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10e      	bne.n	8001ab0 <HAL_I2C_Init+0x1bc>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1e58      	subs	r0, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6859      	ldr	r1, [r3, #4]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	440b      	add	r3, r1
 8001aa0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aae:	e00f      	b.n	8001ad0 <HAL_I2C_Init+0x1dc>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1e58      	subs	r0, r3, #1
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6859      	ldr	r1, [r3, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	0099      	lsls	r1, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001acc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	6809      	ldr	r1, [r1, #0]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69da      	ldr	r2, [r3, #28]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001afe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6911      	ldr	r1, [r2, #16]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68d2      	ldr	r2, [r2, #12]
 8001b0a:	4311      	orrs	r1, r2
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	430b      	orrs	r3, r1
 8001b12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0201 	orr.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	000186a0 	.word	0x000186a0
 8001b6c:	001e847f 	.word	0x001e847f
 8001b70:	003d08ff 	.word	0x003d08ff
 8001b74:	431bde83 	.word	0x431bde83
 8001b78:	10624dd3 	.word	0x10624dd3

08001b7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	461a      	mov	r2, r3
 8001b88:	460b      	mov	r3, r1
 8001b8a:	817b      	strh	r3, [r7, #10]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff fbfc 	bl	800138c <HAL_GetTick>
 8001b94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b20      	cmp	r3, #32
 8001ba0:	f040 80e0 	bne.w	8001d64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	2319      	movs	r3, #25
 8001baa:	2201      	movs	r2, #1
 8001bac:	4970      	ldr	r1, [pc, #448]	; (8001d70 <HAL_I2C_Master_Transmit+0x1f4>)
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 fc66 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e0d3      	b.n	8001d66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_I2C_Master_Transmit+0x50>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e0cc      	b.n	8001d66 <HAL_I2C_Master_Transmit+0x1ea>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d007      	beq.n	8001bf2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f042 0201 	orr.w	r2, r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2221      	movs	r2, #33	; 0x21
 8001c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2210      	movs	r2, #16
 8001c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	893a      	ldrh	r2, [r7, #8]
 8001c22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4a50      	ldr	r2, [pc, #320]	; (8001d74 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c34:	8979      	ldrh	r1, [r7, #10]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	6a3a      	ldr	r2, [r7, #32]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 fad0 	bl	80021e0 <I2C_MasterRequestWrite>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e08d      	b.n	8001d66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c60:	e066      	b.n	8001d30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	6a39      	ldr	r1, [r7, #32]
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 fce0 	bl	800262c <I2C_WaitOnTXEFlagUntilTimeout>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00d      	beq.n	8001c8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d107      	bne.n	8001c8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e06b      	b.n	8001d66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	781a      	ldrb	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d11b      	bne.n	8001d04 <HAL_I2C_Master_Transmit+0x188>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d017      	beq.n	8001d04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	781a      	ldrb	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	6a39      	ldr	r1, [r7, #32]
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f000 fcd0 	bl	80026ae <I2C_WaitOnBTFFlagUntilTimeout>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00d      	beq.n	8001d30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d107      	bne.n	8001d2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e01a      	b.n	8001d66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d194      	bne.n	8001c62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	e000      	b.n	8001d66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d64:	2302      	movs	r3, #2
  }
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	00100002 	.word	0x00100002
 8001d74:	ffff0000 	.word	0xffff0000

08001d78 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08c      	sub	sp, #48	; 0x30
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	461a      	mov	r2, r3
 8001d84:	460b      	mov	r3, r1
 8001d86:	817b      	strh	r3, [r7, #10]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d8c:	f7ff fafe 	bl	800138c <HAL_GetTick>
 8001d90:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b20      	cmp	r3, #32
 8001d9c:	f040 820b 	bne.w	80021b6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	2319      	movs	r3, #25
 8001da6:	2201      	movs	r2, #1
 8001da8:	497c      	ldr	r1, [pc, #496]	; (8001f9c <HAL_I2C_Master_Receive+0x224>)
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 fb68 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001db6:	2302      	movs	r3, #2
 8001db8:	e1fe      	b.n	80021b8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_I2C_Master_Receive+0x50>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e1f7      	b.n	80021b8 <HAL_I2C_Master_Receive+0x440>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d007      	beq.n	8001dee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f042 0201 	orr.w	r2, r2, #1
 8001dec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dfc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2222      	movs	r2, #34	; 0x22
 8001e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2210      	movs	r2, #16
 8001e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	893a      	ldrh	r2, [r7, #8]
 8001e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4a5c      	ldr	r2, [pc, #368]	; (8001fa0 <HAL_I2C_Master_Receive+0x228>)
 8001e2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e30:	8979      	ldrh	r1, [r7, #10]
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 fa54 	bl	80022e4 <I2C_MasterRequestRead>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e1b8      	b.n	80021b8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d113      	bne.n	8001e76 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e4e:	2300      	movs	r3, #0
 8001e50:	623b      	str	r3, [r7, #32]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	623b      	str	r3, [r7, #32]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	623b      	str	r3, [r7, #32]
 8001e62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	e18c      	b.n	8002190 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d11b      	bne.n	8001eb6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	61fb      	str	r3, [r7, #28]
 8001ea2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	e16c      	b.n	8002190 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d11b      	bne.n	8001ef6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ecc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001edc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	61bb      	str	r3, [r7, #24]
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	e14c      	b.n	8002190 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f1c:	e138      	b.n	8002190 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	f200 80f1 	bhi.w	800210a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d123      	bne.n	8001f78 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 fbfb 	bl	8002730 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e139      	b.n	80021b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691a      	ldr	r2, [r3, #16]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f76:	e10b      	b.n	8002190 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d14e      	bne.n	800201e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f86:	2200      	movs	r2, #0
 8001f88:	4906      	ldr	r1, [pc, #24]	; (8001fa4 <HAL_I2C_Master_Receive+0x22c>)
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 fa78 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d008      	beq.n	8001fa8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e10e      	b.n	80021b8 <HAL_I2C_Master_Receive+0x440>
 8001f9a:	bf00      	nop
 8001f9c:	00100002 	.word	0x00100002
 8001fa0:	ffff0000 	.word	0xffff0000
 8001fa4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002012:	b29b      	uxth	r3, r3
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800201c:	e0b8      	b.n	8002190 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002024:	2200      	movs	r2, #0
 8002026:	4966      	ldr	r1, [pc, #408]	; (80021c0 <HAL_I2C_Master_Receive+0x448>)
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 fa29 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0bf      	b.n	80021b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691a      	ldr	r2, [r3, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002070:	b29b      	uxth	r3, r3
 8002072:	3b01      	subs	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002080:	2200      	movs	r2, #0
 8002082:	494f      	ldr	r1, [pc, #316]	; (80021c0 <HAL_I2C_Master_Receive+0x448>)
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 f9fb 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e091      	b.n	80021b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c0:	3b01      	subs	r3, #1
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fe:	b29b      	uxth	r3, r3
 8002100:	3b01      	subs	r3, #1
 8002102:	b29a      	uxth	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002108:	e042      	b.n	8002190 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800210a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800210c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 fb0e 	bl	8002730 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e04c      	b.n	80021b8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002146:	b29b      	uxth	r3, r3
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	2b04      	cmp	r3, #4
 800215c:	d118      	bne.n	8002190 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002186:	b29b      	uxth	r3, r3
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002194:	2b00      	cmp	r3, #0
 8002196:	f47f aec2 	bne.w	8001f1e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2220      	movs	r2, #32
 800219e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	e000      	b.n	80021b8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80021b6:	2302      	movs	r3, #2
  }
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3728      	adds	r7, #40	; 0x28
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	00010004 	.word	0x00010004

080021c4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d2:	b2db      	uxtb	r3, r3
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	460b      	mov	r3, r1
 80021ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d006      	beq.n	800220a <I2C_MasterRequestWrite+0x2a>
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d003      	beq.n	800220a <I2C_MasterRequestWrite+0x2a>
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002208:	d108      	bne.n	800221c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	e00b      	b.n	8002234 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	2b12      	cmp	r3, #18
 8002222:	d107      	bne.n	8002234 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002232:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 f91d 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00d      	beq.n	8002268 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800225a:	d103      	bne.n	8002264 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002262:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e035      	b.n	80022d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002270:	d108      	bne.n	8002284 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002272:	897b      	ldrh	r3, [r7, #10]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002280:	611a      	str	r2, [r3, #16]
 8002282:	e01b      	b.n	80022bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002284:	897b      	ldrh	r3, [r7, #10]
 8002286:	11db      	asrs	r3, r3, #7
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f003 0306 	and.w	r3, r3, #6
 800228e:	b2db      	uxtb	r3, r3
 8002290:	f063 030f 	orn	r3, r3, #15
 8002294:	b2da      	uxtb	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	490e      	ldr	r1, [pc, #56]	; (80022dc <I2C_MasterRequestWrite+0xfc>)
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f943 	bl	800252e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e010      	b.n	80022d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022b2:	897b      	ldrh	r3, [r7, #10]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	4907      	ldr	r1, [pc, #28]	; (80022e0 <I2C_MasterRequestWrite+0x100>)
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f933 	bl	800252e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	00010008 	.word	0x00010008
 80022e0:	00010002 	.word	0x00010002

080022e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	460b      	mov	r3, r1
 80022f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002308:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2b08      	cmp	r3, #8
 800230e:	d006      	beq.n	800231e <I2C_MasterRequestRead+0x3a>
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d003      	beq.n	800231e <I2C_MasterRequestRead+0x3a>
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800231c:	d108      	bne.n	8002330 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	e00b      	b.n	8002348 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	2b11      	cmp	r3, #17
 8002336:	d107      	bne.n	8002348 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002346:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f893 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00d      	beq.n	800237c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800236e:	d103      	bne.n	8002378 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002376:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e079      	b.n	8002470 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002384:	d108      	bne.n	8002398 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002386:	897b      	ldrh	r3, [r7, #10]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	b2da      	uxtb	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	611a      	str	r2, [r3, #16]
 8002396:	e05f      	b.n	8002458 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002398:	897b      	ldrh	r3, [r7, #10]
 800239a:	11db      	asrs	r3, r3, #7
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f003 0306 	and.w	r3, r3, #6
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f063 030f 	orn	r3, r3, #15
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	4930      	ldr	r1, [pc, #192]	; (8002478 <I2C_MasterRequestRead+0x194>)
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f8b9 	bl	800252e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e054      	b.n	8002470 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023c6:	897b      	ldrh	r3, [r7, #10]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	4929      	ldr	r1, [pc, #164]	; (800247c <I2C_MasterRequestRead+0x198>)
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f8a9 	bl	800252e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e044      	b.n	8002470 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800240a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 f831 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00d      	beq.n	8002440 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002432:	d103      	bne.n	800243c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800243a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e017      	b.n	8002470 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002440:	897b      	ldrh	r3, [r7, #10]
 8002442:	11db      	asrs	r3, r3, #7
 8002444:	b2db      	uxtb	r3, r3
 8002446:	f003 0306 	and.w	r3, r3, #6
 800244a:	b2db      	uxtb	r3, r3
 800244c:	f063 030e 	orn	r3, r3, #14
 8002450:	b2da      	uxtb	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	4907      	ldr	r1, [pc, #28]	; (800247c <I2C_MasterRequestRead+0x198>)
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f865 	bl	800252e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	00010008 	.word	0x00010008
 800247c:	00010002 	.word	0x00010002

08002480 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	4613      	mov	r3, r2
 800248e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002490:	e025      	b.n	80024de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002498:	d021      	beq.n	80024de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249a:	f7fe ff77 	bl	800138c <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d302      	bcc.n	80024b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d116      	bne.n	80024de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f043 0220 	orr.w	r2, r3, #32
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e023      	b.n	8002526 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	0c1b      	lsrs	r3, r3, #16
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d10d      	bne.n	8002504 <I2C_WaitOnFlagUntilTimeout+0x84>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	43da      	mvns	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4013      	ands	r3, r2
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bf0c      	ite	eq
 80024fa:	2301      	moveq	r3, #1
 80024fc:	2300      	movne	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	e00c      	b.n	800251e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	43da      	mvns	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	4013      	ands	r3, r2
 8002510:	b29b      	uxth	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	bf0c      	ite	eq
 8002516:	2301      	moveq	r3, #1
 8002518:	2300      	movne	r3, #0
 800251a:	b2db      	uxtb	r3, r3
 800251c:	461a      	mov	r2, r3
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	429a      	cmp	r2, r3
 8002522:	d0b6      	beq.n	8002492 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b084      	sub	sp, #16
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
 800253a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800253c:	e051      	b.n	80025e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800254c:	d123      	bne.n	8002596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800255c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002566:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f043 0204 	orr.w	r2, r3, #4
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e046      	b.n	8002624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259c:	d021      	beq.n	80025e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800259e:	f7fe fef5 	bl	800138c <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d302      	bcc.n	80025b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d116      	bne.n	80025e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2220      	movs	r2, #32
 80025be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f043 0220 	orr.w	r2, r3, #32
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e020      	b.n	8002624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	0c1b      	lsrs	r3, r3, #16
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d10c      	bne.n	8002606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	43da      	mvns	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4013      	ands	r3, r2
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	bf14      	ite	ne
 80025fe:	2301      	movne	r3, #1
 8002600:	2300      	moveq	r3, #0
 8002602:	b2db      	uxtb	r3, r3
 8002604:	e00b      	b.n	800261e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	43da      	mvns	r2, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	4013      	ands	r3, r2
 8002612:	b29b      	uxth	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	bf14      	ite	ne
 8002618:	2301      	movne	r3, #1
 800261a:	2300      	moveq	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d18d      	bne.n	800253e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002638:	e02d      	b.n	8002696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 f8ce 	bl	80027dc <I2C_IsAcknowledgeFailed>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e02d      	b.n	80026a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002650:	d021      	beq.n	8002696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002652:	f7fe fe9b 	bl	800138c <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	429a      	cmp	r2, r3
 8002660:	d302      	bcc.n	8002668 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d116      	bne.n	8002696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2220      	movs	r2, #32
 8002672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f043 0220 	orr.w	r2, r3, #32
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e007      	b.n	80026a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a0:	2b80      	cmp	r3, #128	; 0x80
 80026a2:	d1ca      	bne.n	800263a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026ba:	e02d      	b.n	8002718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f88d 	bl	80027dc <I2C_IsAcknowledgeFailed>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e02d      	b.n	8002728 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d2:	d021      	beq.n	8002718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d4:	f7fe fe5a 	bl	800138c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d302      	bcc.n	80026ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d116      	bne.n	8002718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	f043 0220 	orr.w	r2, r3, #32
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e007      	b.n	8002728 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b04      	cmp	r3, #4
 8002724:	d1ca      	bne.n	80026bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800273c:	e042      	b.n	80027c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	2b10      	cmp	r3, #16
 800274a:	d119      	bne.n	8002780 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0210 	mvn.w	r2, #16
 8002754:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e029      	b.n	80027d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002780:	f7fe fe04 	bl	800138c <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	429a      	cmp	r2, r3
 800278e:	d302      	bcc.n	8002796 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d116      	bne.n	80027c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f043 0220 	orr.w	r2, r3, #32
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e007      	b.n	80027d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ce:	2b40      	cmp	r3, #64	; 0x40
 80027d0:	d1b5      	bne.n	800273e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f2:	d11b      	bne.n	800282c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	f043 0204 	orr.w	r2, r3, #4
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e267      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d075      	beq.n	8002946 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800285a:	4b88      	ldr	r3, [pc, #544]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b04      	cmp	r3, #4
 8002864:	d00c      	beq.n	8002880 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002866:	4b85      	ldr	r3, [pc, #532]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800286e:	2b08      	cmp	r3, #8
 8002870:	d112      	bne.n	8002898 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002872:	4b82      	ldr	r3, [pc, #520]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800287e:	d10b      	bne.n	8002898 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002880:	4b7e      	ldr	r3, [pc, #504]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d05b      	beq.n	8002944 <HAL_RCC_OscConfig+0x108>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d157      	bne.n	8002944 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e242      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a0:	d106      	bne.n	80028b0 <HAL_RCC_OscConfig+0x74>
 80028a2:	4b76      	ldr	r3, [pc, #472]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a75      	ldr	r2, [pc, #468]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e01d      	b.n	80028ec <HAL_RCC_OscConfig+0xb0>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x98>
 80028ba:	4b70      	ldr	r3, [pc, #448]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a6f      	ldr	r2, [pc, #444]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b6d      	ldr	r3, [pc, #436]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6c      	ldr	r2, [pc, #432]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0xb0>
 80028d4:	4b69      	ldr	r3, [pc, #420]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a68      	ldr	r2, [pc, #416]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b66      	ldr	r3, [pc, #408]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a65      	ldr	r2, [pc, #404]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d013      	beq.n	800291c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe fd4a 	bl	800138c <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028fc:	f7fe fd46 	bl	800138c <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	; 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e207      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	4b5b      	ldr	r3, [pc, #364]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0xc0>
 800291a:	e014      	b.n	8002946 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe fd36 	bl	800138c <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002924:	f7fe fd32 	bl	800138c <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	; 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e1f3      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002936:	4b51      	ldr	r3, [pc, #324]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0xe8>
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d063      	beq.n	8002a1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002952:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800295e:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002966:	2b08      	cmp	r3, #8
 8002968:	d11c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296a:	4b44      	ldr	r3, [pc, #272]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d116      	bne.n	80029a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002976:	4b41      	ldr	r3, [pc, #260]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_RCC_OscConfig+0x152>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d001      	beq.n	800298e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e1c7      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298e:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4937      	ldr	r1, [pc, #220]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	e03a      	b.n	8002a1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ac:	4b34      	ldr	r3, [pc, #208]	; (8002a80 <HAL_RCC_OscConfig+0x244>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b2:	f7fe fceb 	bl	800138c <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ba:	f7fe fce7 	bl	800138c <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e1a8      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029cc:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d8:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4925      	ldr	r1, [pc, #148]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]
 80029ec:	e015      	b.n	8002a1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ee:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <HAL_RCC_OscConfig+0x244>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fe fcca 	bl	800138c <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029fc:	f7fe fcc6 	bl	800138c <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e187      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0e:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d036      	beq.n	8002a94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d016      	beq.n	8002a5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <HAL_RCC_OscConfig+0x248>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a34:	f7fe fcaa 	bl	800138c <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a3c:	f7fe fca6 	bl	800138c <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e167      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x200>
 8002a5a:	e01b      	b.n	8002a94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_RCC_OscConfig+0x248>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a62:	f7fe fc93 	bl	800138c <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a68:	e00e      	b.n	8002a88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a6a:	f7fe fc8f 	bl	800138c <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d907      	bls.n	8002a88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e150      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	42470000 	.word	0x42470000
 8002a84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a88:	4b88      	ldr	r3, [pc, #544]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1ea      	bne.n	8002a6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 8097 	beq.w	8002bd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa6:	4b81      	ldr	r3, [pc, #516]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10f      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	4b7d      	ldr	r3, [pc, #500]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a7c      	ldr	r2, [pc, #496]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac2:	4b7a      	ldr	r3, [pc, #488]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad2:	4b77      	ldr	r3, [pc, #476]	; (8002cb0 <HAL_RCC_OscConfig+0x474>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d118      	bne.n	8002b10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ade:	4b74      	ldr	r3, [pc, #464]	; (8002cb0 <HAL_RCC_OscConfig+0x474>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a73      	ldr	r2, [pc, #460]	; (8002cb0 <HAL_RCC_OscConfig+0x474>)
 8002ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aea:	f7fe fc4f 	bl	800138c <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af2:	f7fe fc4b 	bl	800138c <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e10c      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b04:	4b6a      	ldr	r3, [pc, #424]	; (8002cb0 <HAL_RCC_OscConfig+0x474>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d106      	bne.n	8002b26 <HAL_RCC_OscConfig+0x2ea>
 8002b18:	4b64      	ldr	r3, [pc, #400]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	4a63      	ldr	r2, [pc, #396]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	6713      	str	r3, [r2, #112]	; 0x70
 8002b24:	e01c      	b.n	8002b60 <HAL_RCC_OscConfig+0x324>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b05      	cmp	r3, #5
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x30c>
 8002b2e:	4b5f      	ldr	r3, [pc, #380]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	4a5e      	ldr	r2, [pc, #376]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b34:	f043 0304 	orr.w	r3, r3, #4
 8002b38:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3a:	4b5c      	ldr	r3, [pc, #368]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	4a5b      	ldr	r2, [pc, #364]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	6713      	str	r3, [r2, #112]	; 0x70
 8002b46:	e00b      	b.n	8002b60 <HAL_RCC_OscConfig+0x324>
 8002b48:	4b58      	ldr	r3, [pc, #352]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4c:	4a57      	ldr	r2, [pc, #348]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b4e:	f023 0301 	bic.w	r3, r3, #1
 8002b52:	6713      	str	r3, [r2, #112]	; 0x70
 8002b54:	4b55      	ldr	r3, [pc, #340]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	4a54      	ldr	r2, [pc, #336]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b5a:	f023 0304 	bic.w	r3, r3, #4
 8002b5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d015      	beq.n	8002b94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b68:	f7fe fc10 	bl	800138c <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6e:	e00a      	b.n	8002b86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b70:	f7fe fc0c 	bl	800138c <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e0cb      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b86:	4b49      	ldr	r3, [pc, #292]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0ee      	beq.n	8002b70 <HAL_RCC_OscConfig+0x334>
 8002b92:	e014      	b.n	8002bbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b94:	f7fe fbfa 	bl	800138c <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9c:	f7fe fbf6 	bl	800138c <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e0b5      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb2:	4b3e      	ldr	r3, [pc, #248]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1ee      	bne.n	8002b9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bbe:	7dfb      	ldrb	r3, [r7, #23]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d105      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc4:	4b39      	ldr	r3, [pc, #228]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	4a38      	ldr	r2, [pc, #224]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 80a1 	beq.w	8002d1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bda:	4b34      	ldr	r3, [pc, #208]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d05c      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d141      	bne.n	8002c72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bee:	4b31      	ldr	r3, [pc, #196]	; (8002cb4 <HAL_RCC_OscConfig+0x478>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fbca 	bl	800138c <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfc:	f7fe fbc6 	bl	800138c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e087      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0e:	4b27      	ldr	r3, [pc, #156]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69da      	ldr	r2, [r3, #28]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	019b      	lsls	r3, r3, #6
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	085b      	lsrs	r3, r3, #1
 8002c32:	3b01      	subs	r3, #1
 8002c34:	041b      	lsls	r3, r3, #16
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	061b      	lsls	r3, r3, #24
 8002c3e:	491b      	ldr	r1, [pc, #108]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c44:	4b1b      	ldr	r3, [pc, #108]	; (8002cb4 <HAL_RCC_OscConfig+0x478>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4a:	f7fe fb9f 	bl	800138c <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c52:	f7fe fb9b 	bl	800138c <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e05c      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x416>
 8002c70:	e054      	b.n	8002d1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <HAL_RCC_OscConfig+0x478>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fe fb88 	bl	800138c <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c80:	f7fe fb84 	bl	800138c <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e045      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x444>
 8002c9e:	e03d      	b.n	8002d1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d107      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e038      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40007000 	.word	0x40007000
 8002cb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <HAL_RCC_OscConfig+0x4ec>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d028      	beq.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d121      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d11a      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ce8:	4013      	ands	r3, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d111      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	085b      	lsrs	r3, r3, #1
 8002d00:	3b01      	subs	r3, #1
 8002d02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d107      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40023800 	.word	0x40023800

08002d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0cc      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d40:	4b68      	ldr	r3, [pc, #416]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d90c      	bls.n	8002d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0b8      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d020      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d80:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	4a58      	ldr	r2, [pc, #352]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d98:	4b53      	ldr	r3, [pc, #332]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a52      	ldr	r2, [pc, #328]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da4:	4b50      	ldr	r3, [pc, #320]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	494d      	ldr	r1, [pc, #308]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d044      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d119      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e07f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d003      	beq.n	8002dea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dea:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e06f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e067      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e0a:	4b37      	ldr	r3, [pc, #220]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f023 0203 	bic.w	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4934      	ldr	r1, [pc, #208]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e1c:	f7fe fab6 	bl	800138c <HAL_GetTick>
 8002e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e24:	f7fe fab2 	bl	800138c <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e04f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 020c 	and.w	r2, r3, #12
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d1eb      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d20c      	bcs.n	8002e74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e032      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e80:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4916      	ldr	r1, [pc, #88]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	490e      	ldr	r1, [pc, #56]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eb2:	f000 f821 	bl	8002ef8 <HAL_RCC_GetSysClockFreq>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	490a      	ldr	r1, [pc, #40]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	5ccb      	ldrb	r3, [r1, r3]
 8002ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eca:	4a09      	ldr	r2, [pc, #36]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe fa16 	bl	8001304 <HAL_InitTick>

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023c00 	.word	0x40023c00
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	08004ae0 	.word	0x08004ae0
 8002ef0:	20000004 	.word	0x20000004
 8002ef4:	20000008 	.word	0x20000008

08002ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002efc:	b094      	sub	sp, #80	; 0x50
 8002efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	647b      	str	r3, [r7, #68]	; 0x44
 8002f04:	2300      	movs	r3, #0
 8002f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f08:	2300      	movs	r3, #0
 8002f0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f10:	4b79      	ldr	r3, [pc, #484]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 030c 	and.w	r3, r3, #12
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d00d      	beq.n	8002f38 <HAL_RCC_GetSysClockFreq+0x40>
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	f200 80e1 	bhi.w	80030e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <HAL_RCC_GetSysClockFreq+0x34>
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d003      	beq.n	8002f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f2a:	e0db      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f2c:	4b73      	ldr	r3, [pc, #460]	; (80030fc <HAL_RCC_GetSysClockFreq+0x204>)
 8002f2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f30:	e0db      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f32:	4b73      	ldr	r3, [pc, #460]	; (8003100 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f36:	e0d8      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f38:	4b6f      	ldr	r3, [pc, #444]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f42:	4b6d      	ldr	r3, [pc, #436]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d063      	beq.n	8003016 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4e:	4b6a      	ldr	r3, [pc, #424]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	099b      	lsrs	r3, r3, #6
 8002f54:	2200      	movs	r2, #0
 8002f56:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f60:	633b      	str	r3, [r7, #48]	; 0x30
 8002f62:	2300      	movs	r3, #0
 8002f64:	637b      	str	r3, [r7, #52]	; 0x34
 8002f66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f6a:	4622      	mov	r2, r4
 8002f6c:	462b      	mov	r3, r5
 8002f6e:	f04f 0000 	mov.w	r0, #0
 8002f72:	f04f 0100 	mov.w	r1, #0
 8002f76:	0159      	lsls	r1, r3, #5
 8002f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f7c:	0150      	lsls	r0, r2, #5
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4621      	mov	r1, r4
 8002f84:	1a51      	subs	r1, r2, r1
 8002f86:	6139      	str	r1, [r7, #16]
 8002f88:	4629      	mov	r1, r5
 8002f8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f9c:	4659      	mov	r1, fp
 8002f9e:	018b      	lsls	r3, r1, #6
 8002fa0:	4651      	mov	r1, sl
 8002fa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fa6:	4651      	mov	r1, sl
 8002fa8:	018a      	lsls	r2, r1, #6
 8002faa:	4651      	mov	r1, sl
 8002fac:	ebb2 0801 	subs.w	r8, r2, r1
 8002fb0:	4659      	mov	r1, fp
 8002fb2:	eb63 0901 	sbc.w	r9, r3, r1
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fca:	4690      	mov	r8, r2
 8002fcc:	4699      	mov	r9, r3
 8002fce:	4623      	mov	r3, r4
 8002fd0:	eb18 0303 	adds.w	r3, r8, r3
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	462b      	mov	r3, r5
 8002fd8:	eb49 0303 	adc.w	r3, r9, r3
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fea:	4629      	mov	r1, r5
 8002fec:	024b      	lsls	r3, r1, #9
 8002fee:	4621      	mov	r1, r4
 8002ff0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ff4:	4621      	mov	r1, r4
 8002ff6:	024a      	lsls	r2, r1, #9
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ffe:	2200      	movs	r2, #0
 8003000:	62bb      	str	r3, [r7, #40]	; 0x28
 8003002:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003004:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003008:	f7fd f942 	bl	8000290 <__aeabi_uldivmod>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4613      	mov	r3, r2
 8003012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003014:	e058      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003016:	4b38      	ldr	r3, [pc, #224]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	099b      	lsrs	r3, r3, #6
 800301c:	2200      	movs	r2, #0
 800301e:	4618      	mov	r0, r3
 8003020:	4611      	mov	r1, r2
 8003022:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003026:	623b      	str	r3, [r7, #32]
 8003028:	2300      	movs	r3, #0
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
 800302c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003030:	4642      	mov	r2, r8
 8003032:	464b      	mov	r3, r9
 8003034:	f04f 0000 	mov.w	r0, #0
 8003038:	f04f 0100 	mov.w	r1, #0
 800303c:	0159      	lsls	r1, r3, #5
 800303e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003042:	0150      	lsls	r0, r2, #5
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4641      	mov	r1, r8
 800304a:	ebb2 0a01 	subs.w	sl, r2, r1
 800304e:	4649      	mov	r1, r9
 8003050:	eb63 0b01 	sbc.w	fp, r3, r1
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003060:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003064:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003068:	ebb2 040a 	subs.w	r4, r2, sl
 800306c:	eb63 050b 	sbc.w	r5, r3, fp
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	00eb      	lsls	r3, r5, #3
 800307a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800307e:	00e2      	lsls	r2, r4, #3
 8003080:	4614      	mov	r4, r2
 8003082:	461d      	mov	r5, r3
 8003084:	4643      	mov	r3, r8
 8003086:	18e3      	adds	r3, r4, r3
 8003088:	603b      	str	r3, [r7, #0]
 800308a:	464b      	mov	r3, r9
 800308c:	eb45 0303 	adc.w	r3, r5, r3
 8003090:	607b      	str	r3, [r7, #4]
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800309e:	4629      	mov	r1, r5
 80030a0:	028b      	lsls	r3, r1, #10
 80030a2:	4621      	mov	r1, r4
 80030a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030a8:	4621      	mov	r1, r4
 80030aa:	028a      	lsls	r2, r1, #10
 80030ac:	4610      	mov	r0, r2
 80030ae:	4619      	mov	r1, r3
 80030b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b2:	2200      	movs	r2, #0
 80030b4:	61bb      	str	r3, [r7, #24]
 80030b6:	61fa      	str	r2, [r7, #28]
 80030b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030bc:	f7fd f8e8 	bl	8000290 <__aeabi_uldivmod>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4613      	mov	r3, r2
 80030c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030c8:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	0c1b      	lsrs	r3, r3, #16
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	3301      	adds	r3, #1
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80030d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030e2:	e002      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030e4:	4b05      	ldr	r3, [pc, #20]	; (80030fc <HAL_RCC_GetSysClockFreq+0x204>)
 80030e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3750      	adds	r7, #80	; 0x50
 80030f0:	46bd      	mov	sp, r7
 80030f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030f6:	bf00      	nop
 80030f8:	40023800 	.word	0x40023800
 80030fc:	00f42400 	.word	0x00f42400
 8003100:	007a1200 	.word	0x007a1200

08003104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003108:	4b03      	ldr	r3, [pc, #12]	; (8003118 <HAL_RCC_GetHCLKFreq+0x14>)
 800310a:	681b      	ldr	r3, [r3, #0]
}
 800310c:	4618      	mov	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	20000004 	.word	0x20000004

0800311c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003120:	f7ff fff0 	bl	8003104 <HAL_RCC_GetHCLKFreq>
 8003124:	4602      	mov	r2, r0
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	0a9b      	lsrs	r3, r3, #10
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	4903      	ldr	r1, [pc, #12]	; (8003140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003132:	5ccb      	ldrb	r3, [r1, r3]
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003138:	4618      	mov	r0, r3
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40023800 	.word	0x40023800
 8003140:	08004af0 	.word	0x08004af0

08003144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003148:	f7ff ffdc 	bl	8003104 <HAL_RCC_GetHCLKFreq>
 800314c:	4602      	mov	r2, r0
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	0b5b      	lsrs	r3, r3, #13
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	4903      	ldr	r1, [pc, #12]	; (8003168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800315a:	5ccb      	ldrb	r3, [r1, r3]
 800315c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003160:	4618      	mov	r0, r3
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40023800 	.word	0x40023800
 8003168:	08004af0 	.word	0x08004af0

0800316c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e03f      	b.n	80031fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fd ff20 	bl	8000fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2224      	movs	r2, #36	; 0x24
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f929 	bl	8003408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695a      	ldr	r2, [r3, #20]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b08a      	sub	sp, #40	; 0x28
 800320a:	af02      	add	r7, sp, #8
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	603b      	str	r3, [r7, #0]
 8003212:	4613      	mov	r3, r2
 8003214:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b20      	cmp	r3, #32
 8003224:	d17c      	bne.n	8003320 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_UART_Transmit+0x2c>
 800322c:	88fb      	ldrh	r3, [r7, #6]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e075      	b.n	8003322 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_UART_Transmit+0x3e>
 8003240:	2302      	movs	r3, #2
 8003242:	e06e      	b.n	8003322 <HAL_UART_Transmit+0x11c>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2221      	movs	r2, #33	; 0x21
 8003256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800325a:	f7fe f897 	bl	800138c <HAL_GetTick>
 800325e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	88fa      	ldrh	r2, [r7, #6]
 8003264:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	88fa      	ldrh	r2, [r7, #6]
 800326a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003274:	d108      	bne.n	8003288 <HAL_UART_Transmit+0x82>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d104      	bne.n	8003288 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	e003      	b.n	8003290 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800328c:	2300      	movs	r3, #0
 800328e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003298:	e02a      	b.n	80032f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2200      	movs	r2, #0
 80032a2:	2180      	movs	r1, #128	; 0x80
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f840 	bl	800332a <UART_WaitOnFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e036      	b.n	8003322 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10b      	bne.n	80032d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	3302      	adds	r3, #2
 80032ce:	61bb      	str	r3, [r7, #24]
 80032d0:	e007      	b.n	80032e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	781a      	ldrb	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	3301      	adds	r3, #1
 80032e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1cf      	bne.n	800329a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2200      	movs	r2, #0
 8003302:	2140      	movs	r1, #64	; 0x40
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f810 	bl	800332a <UART_WaitOnFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e006      	b.n	8003322 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	e000      	b.n	8003322 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003320:	2302      	movs	r3, #2
  }
}
 8003322:	4618      	mov	r0, r3
 8003324:	3720      	adds	r7, #32
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b090      	sub	sp, #64	; 0x40
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	603b      	str	r3, [r7, #0]
 8003336:	4613      	mov	r3, r2
 8003338:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800333a:	e050      	b.n	80033de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800333e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003342:	d04c      	beq.n	80033de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003346:	2b00      	cmp	r3, #0
 8003348:	d007      	beq.n	800335a <UART_WaitOnFlagUntilTimeout+0x30>
 800334a:	f7fe f81f 	bl	800138c <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003356:	429a      	cmp	r2, r3
 8003358:	d241      	bcs.n	80033de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	330c      	adds	r3, #12
 8003360:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003364:	e853 3f00 	ldrex	r3, [r3]
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	330c      	adds	r3, #12
 8003378:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800337a:	637a      	str	r2, [r7, #52]	; 0x34
 800337c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003382:	e841 2300 	strex	r3, r2, [r1]
 8003386:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1e5      	bne.n	800335a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3314      	adds	r3, #20
 8003394:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	e853 3f00 	ldrex	r3, [r3]
 800339c:	613b      	str	r3, [r7, #16]
   return(result);
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3314      	adds	r3, #20
 80033ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033ae:	623a      	str	r2, [r7, #32]
 80033b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b2:	69f9      	ldr	r1, [r7, #28]
 80033b4:	6a3a      	ldr	r2, [r7, #32]
 80033b6:	e841 2300 	strex	r3, r2, [r1]
 80033ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1e5      	bne.n	800338e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e00f      	b.n	80033fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4013      	ands	r3, r2
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	bf0c      	ite	eq
 80033ee:	2301      	moveq	r3, #1
 80033f0:	2300      	movne	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	461a      	mov	r2, r3
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d09f      	beq.n	800333c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3740      	adds	r7, #64	; 0x40
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800340c:	b0c0      	sub	sp, #256	; 0x100
 800340e:	af00      	add	r7, sp, #0
 8003410:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003424:	68d9      	ldr	r1, [r3, #12]
 8003426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	ea40 0301 	orr.w	r3, r0, r1
 8003430:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	431a      	orrs	r2, r3
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	431a      	orrs	r2, r3
 8003448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003460:	f021 010c 	bic.w	r1, r1, #12
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800346e:	430b      	orrs	r3, r1
 8003470:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800347e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003482:	6999      	ldr	r1, [r3, #24]
 8003484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	ea40 0301 	orr.w	r3, r0, r1
 800348e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	4b8f      	ldr	r3, [pc, #572]	; (80036d4 <UART_SetConfig+0x2cc>)
 8003498:	429a      	cmp	r2, r3
 800349a:	d005      	beq.n	80034a8 <UART_SetConfig+0xa0>
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	4b8d      	ldr	r3, [pc, #564]	; (80036d8 <UART_SetConfig+0x2d0>)
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d104      	bne.n	80034b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034a8:	f7ff fe4c 	bl	8003144 <HAL_RCC_GetPCLK2Freq>
 80034ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034b0:	e003      	b.n	80034ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034b2:	f7ff fe33 	bl	800311c <HAL_RCC_GetPCLK1Freq>
 80034b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c4:	f040 810c 	bne.w	80036e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034cc:	2200      	movs	r2, #0
 80034ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034da:	4622      	mov	r2, r4
 80034dc:	462b      	mov	r3, r5
 80034de:	1891      	adds	r1, r2, r2
 80034e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80034e2:	415b      	adcs	r3, r3
 80034e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034ea:	4621      	mov	r1, r4
 80034ec:	eb12 0801 	adds.w	r8, r2, r1
 80034f0:	4629      	mov	r1, r5
 80034f2:	eb43 0901 	adc.w	r9, r3, r1
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003502:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003506:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800350a:	4690      	mov	r8, r2
 800350c:	4699      	mov	r9, r3
 800350e:	4623      	mov	r3, r4
 8003510:	eb18 0303 	adds.w	r3, r8, r3
 8003514:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003518:	462b      	mov	r3, r5
 800351a:	eb49 0303 	adc.w	r3, r9, r3
 800351e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800352e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003532:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003536:	460b      	mov	r3, r1
 8003538:	18db      	adds	r3, r3, r3
 800353a:	653b      	str	r3, [r7, #80]	; 0x50
 800353c:	4613      	mov	r3, r2
 800353e:	eb42 0303 	adc.w	r3, r2, r3
 8003542:	657b      	str	r3, [r7, #84]	; 0x54
 8003544:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003548:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800354c:	f7fc fea0 	bl	8000290 <__aeabi_uldivmod>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4b61      	ldr	r3, [pc, #388]	; (80036dc <UART_SetConfig+0x2d4>)
 8003556:	fba3 2302 	umull	r2, r3, r3, r2
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	011c      	lsls	r4, r3, #4
 800355e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003562:	2200      	movs	r2, #0
 8003564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003568:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800356c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003570:	4642      	mov	r2, r8
 8003572:	464b      	mov	r3, r9
 8003574:	1891      	adds	r1, r2, r2
 8003576:	64b9      	str	r1, [r7, #72]	; 0x48
 8003578:	415b      	adcs	r3, r3
 800357a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800357c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003580:	4641      	mov	r1, r8
 8003582:	eb12 0a01 	adds.w	sl, r2, r1
 8003586:	4649      	mov	r1, r9
 8003588:	eb43 0b01 	adc.w	fp, r3, r1
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003598:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800359c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035a0:	4692      	mov	sl, r2
 80035a2:	469b      	mov	fp, r3
 80035a4:	4643      	mov	r3, r8
 80035a6:	eb1a 0303 	adds.w	r3, sl, r3
 80035aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035ae:	464b      	mov	r3, r9
 80035b0:	eb4b 0303 	adc.w	r3, fp, r3
 80035b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035cc:	460b      	mov	r3, r1
 80035ce:	18db      	adds	r3, r3, r3
 80035d0:	643b      	str	r3, [r7, #64]	; 0x40
 80035d2:	4613      	mov	r3, r2
 80035d4:	eb42 0303 	adc.w	r3, r2, r3
 80035d8:	647b      	str	r3, [r7, #68]	; 0x44
 80035da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035e2:	f7fc fe55 	bl	8000290 <__aeabi_uldivmod>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4611      	mov	r1, r2
 80035ec:	4b3b      	ldr	r3, [pc, #236]	; (80036dc <UART_SetConfig+0x2d4>)
 80035ee:	fba3 2301 	umull	r2, r3, r3, r1
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	2264      	movs	r2, #100	; 0x64
 80035f6:	fb02 f303 	mul.w	r3, r2, r3
 80035fa:	1acb      	subs	r3, r1, r3
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003602:	4b36      	ldr	r3, [pc, #216]	; (80036dc <UART_SetConfig+0x2d4>)
 8003604:	fba3 2302 	umull	r2, r3, r3, r2
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003610:	441c      	add	r4, r3
 8003612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003616:	2200      	movs	r2, #0
 8003618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800361c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003620:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003624:	4642      	mov	r2, r8
 8003626:	464b      	mov	r3, r9
 8003628:	1891      	adds	r1, r2, r2
 800362a:	63b9      	str	r1, [r7, #56]	; 0x38
 800362c:	415b      	adcs	r3, r3
 800362e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003630:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003634:	4641      	mov	r1, r8
 8003636:	1851      	adds	r1, r2, r1
 8003638:	6339      	str	r1, [r7, #48]	; 0x30
 800363a:	4649      	mov	r1, r9
 800363c:	414b      	adcs	r3, r1
 800363e:	637b      	str	r3, [r7, #52]	; 0x34
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800364c:	4659      	mov	r1, fp
 800364e:	00cb      	lsls	r3, r1, #3
 8003650:	4651      	mov	r1, sl
 8003652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003656:	4651      	mov	r1, sl
 8003658:	00ca      	lsls	r2, r1, #3
 800365a:	4610      	mov	r0, r2
 800365c:	4619      	mov	r1, r3
 800365e:	4603      	mov	r3, r0
 8003660:	4642      	mov	r2, r8
 8003662:	189b      	adds	r3, r3, r2
 8003664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003668:	464b      	mov	r3, r9
 800366a:	460a      	mov	r2, r1
 800366c:	eb42 0303 	adc.w	r3, r2, r3
 8003670:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003680:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003684:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003688:	460b      	mov	r3, r1
 800368a:	18db      	adds	r3, r3, r3
 800368c:	62bb      	str	r3, [r7, #40]	; 0x28
 800368e:	4613      	mov	r3, r2
 8003690:	eb42 0303 	adc.w	r3, r2, r3
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003696:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800369a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800369e:	f7fc fdf7 	bl	8000290 <__aeabi_uldivmod>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4b0d      	ldr	r3, [pc, #52]	; (80036dc <UART_SetConfig+0x2d4>)
 80036a8:	fba3 1302 	umull	r1, r3, r3, r2
 80036ac:	095b      	lsrs	r3, r3, #5
 80036ae:	2164      	movs	r1, #100	; 0x64
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	3332      	adds	r3, #50	; 0x32
 80036ba:	4a08      	ldr	r2, [pc, #32]	; (80036dc <UART_SetConfig+0x2d4>)
 80036bc:	fba2 2303 	umull	r2, r3, r2, r3
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	f003 0207 	and.w	r2, r3, #7
 80036c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4422      	add	r2, r4
 80036ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036d0:	e106      	b.n	80038e0 <UART_SetConfig+0x4d8>
 80036d2:	bf00      	nop
 80036d4:	40011000 	.word	0x40011000
 80036d8:	40011400 	.word	0x40011400
 80036dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036e4:	2200      	movs	r2, #0
 80036e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036f2:	4642      	mov	r2, r8
 80036f4:	464b      	mov	r3, r9
 80036f6:	1891      	adds	r1, r2, r2
 80036f8:	6239      	str	r1, [r7, #32]
 80036fa:	415b      	adcs	r3, r3
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
 80036fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003702:	4641      	mov	r1, r8
 8003704:	1854      	adds	r4, r2, r1
 8003706:	4649      	mov	r1, r9
 8003708:	eb43 0501 	adc.w	r5, r3, r1
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	00eb      	lsls	r3, r5, #3
 8003716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800371a:	00e2      	lsls	r2, r4, #3
 800371c:	4614      	mov	r4, r2
 800371e:	461d      	mov	r5, r3
 8003720:	4643      	mov	r3, r8
 8003722:	18e3      	adds	r3, r4, r3
 8003724:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003728:	464b      	mov	r3, r9
 800372a:	eb45 0303 	adc.w	r3, r5, r3
 800372e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800373e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800374e:	4629      	mov	r1, r5
 8003750:	008b      	lsls	r3, r1, #2
 8003752:	4621      	mov	r1, r4
 8003754:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003758:	4621      	mov	r1, r4
 800375a:	008a      	lsls	r2, r1, #2
 800375c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003760:	f7fc fd96 	bl	8000290 <__aeabi_uldivmod>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4b60      	ldr	r3, [pc, #384]	; (80038ec <UART_SetConfig+0x4e4>)
 800376a:	fba3 2302 	umull	r2, r3, r3, r2
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	011c      	lsls	r4, r3, #4
 8003772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003776:	2200      	movs	r2, #0
 8003778:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800377c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003780:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003784:	4642      	mov	r2, r8
 8003786:	464b      	mov	r3, r9
 8003788:	1891      	adds	r1, r2, r2
 800378a:	61b9      	str	r1, [r7, #24]
 800378c:	415b      	adcs	r3, r3
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003794:	4641      	mov	r1, r8
 8003796:	1851      	adds	r1, r2, r1
 8003798:	6139      	str	r1, [r7, #16]
 800379a:	4649      	mov	r1, r9
 800379c:	414b      	adcs	r3, r1
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037ac:	4659      	mov	r1, fp
 80037ae:	00cb      	lsls	r3, r1, #3
 80037b0:	4651      	mov	r1, sl
 80037b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037b6:	4651      	mov	r1, sl
 80037b8:	00ca      	lsls	r2, r1, #3
 80037ba:	4610      	mov	r0, r2
 80037bc:	4619      	mov	r1, r3
 80037be:	4603      	mov	r3, r0
 80037c0:	4642      	mov	r2, r8
 80037c2:	189b      	adds	r3, r3, r2
 80037c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037c8:	464b      	mov	r3, r9
 80037ca:	460a      	mov	r2, r1
 80037cc:	eb42 0303 	adc.w	r3, r2, r3
 80037d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80037de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037ec:	4649      	mov	r1, r9
 80037ee:	008b      	lsls	r3, r1, #2
 80037f0:	4641      	mov	r1, r8
 80037f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037f6:	4641      	mov	r1, r8
 80037f8:	008a      	lsls	r2, r1, #2
 80037fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037fe:	f7fc fd47 	bl	8000290 <__aeabi_uldivmod>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4611      	mov	r1, r2
 8003808:	4b38      	ldr	r3, [pc, #224]	; (80038ec <UART_SetConfig+0x4e4>)
 800380a:	fba3 2301 	umull	r2, r3, r3, r1
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	2264      	movs	r2, #100	; 0x64
 8003812:	fb02 f303 	mul.w	r3, r2, r3
 8003816:	1acb      	subs	r3, r1, r3
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	3332      	adds	r3, #50	; 0x32
 800381c:	4a33      	ldr	r2, [pc, #204]	; (80038ec <UART_SetConfig+0x4e4>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003828:	441c      	add	r4, r3
 800382a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800382e:	2200      	movs	r2, #0
 8003830:	673b      	str	r3, [r7, #112]	; 0x70
 8003832:	677a      	str	r2, [r7, #116]	; 0x74
 8003834:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003838:	4642      	mov	r2, r8
 800383a:	464b      	mov	r3, r9
 800383c:	1891      	adds	r1, r2, r2
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	415b      	adcs	r3, r3
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003848:	4641      	mov	r1, r8
 800384a:	1851      	adds	r1, r2, r1
 800384c:	6039      	str	r1, [r7, #0]
 800384e:	4649      	mov	r1, r9
 8003850:	414b      	adcs	r3, r1
 8003852:	607b      	str	r3, [r7, #4]
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003860:	4659      	mov	r1, fp
 8003862:	00cb      	lsls	r3, r1, #3
 8003864:	4651      	mov	r1, sl
 8003866:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800386a:	4651      	mov	r1, sl
 800386c:	00ca      	lsls	r2, r1, #3
 800386e:	4610      	mov	r0, r2
 8003870:	4619      	mov	r1, r3
 8003872:	4603      	mov	r3, r0
 8003874:	4642      	mov	r2, r8
 8003876:	189b      	adds	r3, r3, r2
 8003878:	66bb      	str	r3, [r7, #104]	; 0x68
 800387a:	464b      	mov	r3, r9
 800387c:	460a      	mov	r2, r1
 800387e:	eb42 0303 	adc.w	r3, r2, r3
 8003882:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	663b      	str	r3, [r7, #96]	; 0x60
 800388e:	667a      	str	r2, [r7, #100]	; 0x64
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800389c:	4649      	mov	r1, r9
 800389e:	008b      	lsls	r3, r1, #2
 80038a0:	4641      	mov	r1, r8
 80038a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038a6:	4641      	mov	r1, r8
 80038a8:	008a      	lsls	r2, r1, #2
 80038aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038ae:	f7fc fcef 	bl	8000290 <__aeabi_uldivmod>
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	4b0d      	ldr	r3, [pc, #52]	; (80038ec <UART_SetConfig+0x4e4>)
 80038b8:	fba3 1302 	umull	r1, r3, r3, r2
 80038bc:	095b      	lsrs	r3, r3, #5
 80038be:	2164      	movs	r1, #100	; 0x64
 80038c0:	fb01 f303 	mul.w	r3, r1, r3
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	3332      	adds	r3, #50	; 0x32
 80038ca:	4a08      	ldr	r2, [pc, #32]	; (80038ec <UART_SetConfig+0x4e4>)
 80038cc:	fba2 2303 	umull	r2, r3, r2, r3
 80038d0:	095b      	lsrs	r3, r3, #5
 80038d2:	f003 020f 	and.w	r2, r3, #15
 80038d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4422      	add	r2, r4
 80038de:	609a      	str	r2, [r3, #8]
}
 80038e0:	bf00      	nop
 80038e2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038e6:	46bd      	mov	sp, r7
 80038e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ec:	51eb851f 	.word	0x51eb851f

080038f0 <atoi>:
 80038f0:	220a      	movs	r2, #10
 80038f2:	2100      	movs	r1, #0
 80038f4:	f000 b93e 	b.w	8003b74 <strtol>

080038f8 <malloc>:
 80038f8:	4b02      	ldr	r3, [pc, #8]	; (8003904 <malloc+0xc>)
 80038fa:	4601      	mov	r1, r0
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	f000 b82b 	b.w	8003958 <_malloc_r>
 8003902:	bf00      	nop
 8003904:	20000068 	.word	0x20000068

08003908 <free>:
 8003908:	4b02      	ldr	r3, [pc, #8]	; (8003914 <free+0xc>)
 800390a:	4601      	mov	r1, r0
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	f000 bb45 	b.w	8003f9c <_free_r>
 8003912:	bf00      	nop
 8003914:	20000068 	.word	0x20000068

08003918 <sbrk_aligned>:
 8003918:	b570      	push	{r4, r5, r6, lr}
 800391a:	4e0e      	ldr	r6, [pc, #56]	; (8003954 <sbrk_aligned+0x3c>)
 800391c:	460c      	mov	r4, r1
 800391e:	6831      	ldr	r1, [r6, #0]
 8003920:	4605      	mov	r5, r0
 8003922:	b911      	cbnz	r1, 800392a <sbrk_aligned+0x12>
 8003924:	f000 face 	bl	8003ec4 <_sbrk_r>
 8003928:	6030      	str	r0, [r6, #0]
 800392a:	4621      	mov	r1, r4
 800392c:	4628      	mov	r0, r5
 800392e:	f000 fac9 	bl	8003ec4 <_sbrk_r>
 8003932:	1c43      	adds	r3, r0, #1
 8003934:	d00a      	beq.n	800394c <sbrk_aligned+0x34>
 8003936:	1cc4      	adds	r4, r0, #3
 8003938:	f024 0403 	bic.w	r4, r4, #3
 800393c:	42a0      	cmp	r0, r4
 800393e:	d007      	beq.n	8003950 <sbrk_aligned+0x38>
 8003940:	1a21      	subs	r1, r4, r0
 8003942:	4628      	mov	r0, r5
 8003944:	f000 fabe 	bl	8003ec4 <_sbrk_r>
 8003948:	3001      	adds	r0, #1
 800394a:	d101      	bne.n	8003950 <sbrk_aligned+0x38>
 800394c:	f04f 34ff 	mov.w	r4, #4294967295
 8003950:	4620      	mov	r0, r4
 8003952:	bd70      	pop	{r4, r5, r6, pc}
 8003954:	2000012c 	.word	0x2000012c

08003958 <_malloc_r>:
 8003958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800395c:	1ccd      	adds	r5, r1, #3
 800395e:	f025 0503 	bic.w	r5, r5, #3
 8003962:	3508      	adds	r5, #8
 8003964:	2d0c      	cmp	r5, #12
 8003966:	bf38      	it	cc
 8003968:	250c      	movcc	r5, #12
 800396a:	2d00      	cmp	r5, #0
 800396c:	4607      	mov	r7, r0
 800396e:	db01      	blt.n	8003974 <_malloc_r+0x1c>
 8003970:	42a9      	cmp	r1, r5
 8003972:	d905      	bls.n	8003980 <_malloc_r+0x28>
 8003974:	230c      	movs	r3, #12
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	2600      	movs	r6, #0
 800397a:	4630      	mov	r0, r6
 800397c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003980:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a54 <_malloc_r+0xfc>
 8003984:	f000 f868 	bl	8003a58 <__malloc_lock>
 8003988:	f8d8 3000 	ldr.w	r3, [r8]
 800398c:	461c      	mov	r4, r3
 800398e:	bb5c      	cbnz	r4, 80039e8 <_malloc_r+0x90>
 8003990:	4629      	mov	r1, r5
 8003992:	4638      	mov	r0, r7
 8003994:	f7ff ffc0 	bl	8003918 <sbrk_aligned>
 8003998:	1c43      	adds	r3, r0, #1
 800399a:	4604      	mov	r4, r0
 800399c:	d155      	bne.n	8003a4a <_malloc_r+0xf2>
 800399e:	f8d8 4000 	ldr.w	r4, [r8]
 80039a2:	4626      	mov	r6, r4
 80039a4:	2e00      	cmp	r6, #0
 80039a6:	d145      	bne.n	8003a34 <_malloc_r+0xdc>
 80039a8:	2c00      	cmp	r4, #0
 80039aa:	d048      	beq.n	8003a3e <_malloc_r+0xe6>
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	4631      	mov	r1, r6
 80039b0:	4638      	mov	r0, r7
 80039b2:	eb04 0903 	add.w	r9, r4, r3
 80039b6:	f000 fa85 	bl	8003ec4 <_sbrk_r>
 80039ba:	4581      	cmp	r9, r0
 80039bc:	d13f      	bne.n	8003a3e <_malloc_r+0xe6>
 80039be:	6821      	ldr	r1, [r4, #0]
 80039c0:	1a6d      	subs	r5, r5, r1
 80039c2:	4629      	mov	r1, r5
 80039c4:	4638      	mov	r0, r7
 80039c6:	f7ff ffa7 	bl	8003918 <sbrk_aligned>
 80039ca:	3001      	adds	r0, #1
 80039cc:	d037      	beq.n	8003a3e <_malloc_r+0xe6>
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	442b      	add	r3, r5
 80039d2:	6023      	str	r3, [r4, #0]
 80039d4:	f8d8 3000 	ldr.w	r3, [r8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d038      	beq.n	8003a4e <_malloc_r+0xf6>
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	42a2      	cmp	r2, r4
 80039e0:	d12b      	bne.n	8003a3a <_malloc_r+0xe2>
 80039e2:	2200      	movs	r2, #0
 80039e4:	605a      	str	r2, [r3, #4]
 80039e6:	e00f      	b.n	8003a08 <_malloc_r+0xb0>
 80039e8:	6822      	ldr	r2, [r4, #0]
 80039ea:	1b52      	subs	r2, r2, r5
 80039ec:	d41f      	bmi.n	8003a2e <_malloc_r+0xd6>
 80039ee:	2a0b      	cmp	r2, #11
 80039f0:	d917      	bls.n	8003a22 <_malloc_r+0xca>
 80039f2:	1961      	adds	r1, r4, r5
 80039f4:	42a3      	cmp	r3, r4
 80039f6:	6025      	str	r5, [r4, #0]
 80039f8:	bf18      	it	ne
 80039fa:	6059      	strne	r1, [r3, #4]
 80039fc:	6863      	ldr	r3, [r4, #4]
 80039fe:	bf08      	it	eq
 8003a00:	f8c8 1000 	streq.w	r1, [r8]
 8003a04:	5162      	str	r2, [r4, r5]
 8003a06:	604b      	str	r3, [r1, #4]
 8003a08:	4638      	mov	r0, r7
 8003a0a:	f104 060b 	add.w	r6, r4, #11
 8003a0e:	f000 f829 	bl	8003a64 <__malloc_unlock>
 8003a12:	f026 0607 	bic.w	r6, r6, #7
 8003a16:	1d23      	adds	r3, r4, #4
 8003a18:	1af2      	subs	r2, r6, r3
 8003a1a:	d0ae      	beq.n	800397a <_malloc_r+0x22>
 8003a1c:	1b9b      	subs	r3, r3, r6
 8003a1e:	50a3      	str	r3, [r4, r2]
 8003a20:	e7ab      	b.n	800397a <_malloc_r+0x22>
 8003a22:	42a3      	cmp	r3, r4
 8003a24:	6862      	ldr	r2, [r4, #4]
 8003a26:	d1dd      	bne.n	80039e4 <_malloc_r+0x8c>
 8003a28:	f8c8 2000 	str.w	r2, [r8]
 8003a2c:	e7ec      	b.n	8003a08 <_malloc_r+0xb0>
 8003a2e:	4623      	mov	r3, r4
 8003a30:	6864      	ldr	r4, [r4, #4]
 8003a32:	e7ac      	b.n	800398e <_malloc_r+0x36>
 8003a34:	4634      	mov	r4, r6
 8003a36:	6876      	ldr	r6, [r6, #4]
 8003a38:	e7b4      	b.n	80039a4 <_malloc_r+0x4c>
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	e7cc      	b.n	80039d8 <_malloc_r+0x80>
 8003a3e:	230c      	movs	r3, #12
 8003a40:	603b      	str	r3, [r7, #0]
 8003a42:	4638      	mov	r0, r7
 8003a44:	f000 f80e 	bl	8003a64 <__malloc_unlock>
 8003a48:	e797      	b.n	800397a <_malloc_r+0x22>
 8003a4a:	6025      	str	r5, [r4, #0]
 8003a4c:	e7dc      	b.n	8003a08 <_malloc_r+0xb0>
 8003a4e:	605b      	str	r3, [r3, #4]
 8003a50:	deff      	udf	#255	; 0xff
 8003a52:	bf00      	nop
 8003a54:	20000128 	.word	0x20000128

08003a58 <__malloc_lock>:
 8003a58:	4801      	ldr	r0, [pc, #4]	; (8003a60 <__malloc_lock+0x8>)
 8003a5a:	f000 ba7f 	b.w	8003f5c <__retarget_lock_acquire_recursive>
 8003a5e:	bf00      	nop
 8003a60:	20000270 	.word	0x20000270

08003a64 <__malloc_unlock>:
 8003a64:	4801      	ldr	r0, [pc, #4]	; (8003a6c <__malloc_unlock+0x8>)
 8003a66:	f000 ba7a 	b.w	8003f5e <__retarget_lock_release_recursive>
 8003a6a:	bf00      	nop
 8003a6c:	20000270 	.word	0x20000270

08003a70 <_strtol_l.constprop.0>:
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a76:	d001      	beq.n	8003a7c <_strtol_l.constprop.0+0xc>
 8003a78:	2b24      	cmp	r3, #36	; 0x24
 8003a7a:	d906      	bls.n	8003a8a <_strtol_l.constprop.0+0x1a>
 8003a7c:	f000 fa44 	bl	8003f08 <__errno>
 8003a80:	2316      	movs	r3, #22
 8003a82:	6003      	str	r3, [r0, #0]
 8003a84:	2000      	movs	r0, #0
 8003a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a8a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003b70 <_strtol_l.constprop.0+0x100>
 8003a8e:	460d      	mov	r5, r1
 8003a90:	462e      	mov	r6, r5
 8003a92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003a96:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8003a9a:	f017 0708 	ands.w	r7, r7, #8
 8003a9e:	d1f7      	bne.n	8003a90 <_strtol_l.constprop.0+0x20>
 8003aa0:	2c2d      	cmp	r4, #45	; 0x2d
 8003aa2:	d132      	bne.n	8003b0a <_strtol_l.constprop.0+0x9a>
 8003aa4:	782c      	ldrb	r4, [r5, #0]
 8003aa6:	2701      	movs	r7, #1
 8003aa8:	1cb5      	adds	r5, r6, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d05b      	beq.n	8003b66 <_strtol_l.constprop.0+0xf6>
 8003aae:	2b10      	cmp	r3, #16
 8003ab0:	d109      	bne.n	8003ac6 <_strtol_l.constprop.0+0x56>
 8003ab2:	2c30      	cmp	r4, #48	; 0x30
 8003ab4:	d107      	bne.n	8003ac6 <_strtol_l.constprop.0+0x56>
 8003ab6:	782c      	ldrb	r4, [r5, #0]
 8003ab8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003abc:	2c58      	cmp	r4, #88	; 0x58
 8003abe:	d14d      	bne.n	8003b5c <_strtol_l.constprop.0+0xec>
 8003ac0:	786c      	ldrb	r4, [r5, #1]
 8003ac2:	2310      	movs	r3, #16
 8003ac4:	3502      	adds	r5, #2
 8003ac6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003aca:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ace:	f04f 0e00 	mov.w	lr, #0
 8003ad2:	fbb8 f9f3 	udiv	r9, r8, r3
 8003ad6:	4676      	mov	r6, lr
 8003ad8:	fb03 8a19 	mls	sl, r3, r9, r8
 8003adc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003ae0:	f1bc 0f09 	cmp.w	ip, #9
 8003ae4:	d816      	bhi.n	8003b14 <_strtol_l.constprop.0+0xa4>
 8003ae6:	4664      	mov	r4, ip
 8003ae8:	42a3      	cmp	r3, r4
 8003aea:	dd24      	ble.n	8003b36 <_strtol_l.constprop.0+0xc6>
 8003aec:	f1be 3fff 	cmp.w	lr, #4294967295
 8003af0:	d008      	beq.n	8003b04 <_strtol_l.constprop.0+0x94>
 8003af2:	45b1      	cmp	r9, r6
 8003af4:	d31c      	bcc.n	8003b30 <_strtol_l.constprop.0+0xc0>
 8003af6:	d101      	bne.n	8003afc <_strtol_l.constprop.0+0x8c>
 8003af8:	45a2      	cmp	sl, r4
 8003afa:	db19      	blt.n	8003b30 <_strtol_l.constprop.0+0xc0>
 8003afc:	fb06 4603 	mla	r6, r6, r3, r4
 8003b00:	f04f 0e01 	mov.w	lr, #1
 8003b04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b08:	e7e8      	b.n	8003adc <_strtol_l.constprop.0+0x6c>
 8003b0a:	2c2b      	cmp	r4, #43	; 0x2b
 8003b0c:	bf04      	itt	eq
 8003b0e:	782c      	ldrbeq	r4, [r5, #0]
 8003b10:	1cb5      	addeq	r5, r6, #2
 8003b12:	e7ca      	b.n	8003aaa <_strtol_l.constprop.0+0x3a>
 8003b14:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003b18:	f1bc 0f19 	cmp.w	ip, #25
 8003b1c:	d801      	bhi.n	8003b22 <_strtol_l.constprop.0+0xb2>
 8003b1e:	3c37      	subs	r4, #55	; 0x37
 8003b20:	e7e2      	b.n	8003ae8 <_strtol_l.constprop.0+0x78>
 8003b22:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003b26:	f1bc 0f19 	cmp.w	ip, #25
 8003b2a:	d804      	bhi.n	8003b36 <_strtol_l.constprop.0+0xc6>
 8003b2c:	3c57      	subs	r4, #87	; 0x57
 8003b2e:	e7db      	b.n	8003ae8 <_strtol_l.constprop.0+0x78>
 8003b30:	f04f 3eff 	mov.w	lr, #4294967295
 8003b34:	e7e6      	b.n	8003b04 <_strtol_l.constprop.0+0x94>
 8003b36:	f1be 3fff 	cmp.w	lr, #4294967295
 8003b3a:	d105      	bne.n	8003b48 <_strtol_l.constprop.0+0xd8>
 8003b3c:	2322      	movs	r3, #34	; 0x22
 8003b3e:	6003      	str	r3, [r0, #0]
 8003b40:	4646      	mov	r6, r8
 8003b42:	b942      	cbnz	r2, 8003b56 <_strtol_l.constprop.0+0xe6>
 8003b44:	4630      	mov	r0, r6
 8003b46:	e79e      	b.n	8003a86 <_strtol_l.constprop.0+0x16>
 8003b48:	b107      	cbz	r7, 8003b4c <_strtol_l.constprop.0+0xdc>
 8003b4a:	4276      	negs	r6, r6
 8003b4c:	2a00      	cmp	r2, #0
 8003b4e:	d0f9      	beq.n	8003b44 <_strtol_l.constprop.0+0xd4>
 8003b50:	f1be 0f00 	cmp.w	lr, #0
 8003b54:	d000      	beq.n	8003b58 <_strtol_l.constprop.0+0xe8>
 8003b56:	1e69      	subs	r1, r5, #1
 8003b58:	6011      	str	r1, [r2, #0]
 8003b5a:	e7f3      	b.n	8003b44 <_strtol_l.constprop.0+0xd4>
 8003b5c:	2430      	movs	r4, #48	; 0x30
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1b1      	bne.n	8003ac6 <_strtol_l.constprop.0+0x56>
 8003b62:	2308      	movs	r3, #8
 8003b64:	e7af      	b.n	8003ac6 <_strtol_l.constprop.0+0x56>
 8003b66:	2c30      	cmp	r4, #48	; 0x30
 8003b68:	d0a5      	beq.n	8003ab6 <_strtol_l.constprop.0+0x46>
 8003b6a:	230a      	movs	r3, #10
 8003b6c:	e7ab      	b.n	8003ac6 <_strtol_l.constprop.0+0x56>
 8003b6e:	bf00      	nop
 8003b70:	08004af9 	.word	0x08004af9

08003b74 <strtol>:
 8003b74:	4613      	mov	r3, r2
 8003b76:	460a      	mov	r2, r1
 8003b78:	4601      	mov	r1, r0
 8003b7a:	4802      	ldr	r0, [pc, #8]	; (8003b84 <strtol+0x10>)
 8003b7c:	6800      	ldr	r0, [r0, #0]
 8003b7e:	f7ff bf77 	b.w	8003a70 <_strtol_l.constprop.0>
 8003b82:	bf00      	nop
 8003b84:	20000068 	.word	0x20000068

08003b88 <std>:
 8003b88:	2300      	movs	r3, #0
 8003b8a:	b510      	push	{r4, lr}
 8003b8c:	4604      	mov	r4, r0
 8003b8e:	e9c0 3300 	strd	r3, r3, [r0]
 8003b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b96:	6083      	str	r3, [r0, #8]
 8003b98:	8181      	strh	r1, [r0, #12]
 8003b9a:	6643      	str	r3, [r0, #100]	; 0x64
 8003b9c:	81c2      	strh	r2, [r0, #14]
 8003b9e:	6183      	str	r3, [r0, #24]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	2208      	movs	r2, #8
 8003ba4:	305c      	adds	r0, #92	; 0x5c
 8003ba6:	f000 f8e2 	bl	8003d6e <memset>
 8003baa:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <std+0x38>)
 8003bac:	6263      	str	r3, [r4, #36]	; 0x24
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <std+0x3c>)
 8003bb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003bb2:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <std+0x40>)
 8003bb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bb6:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <std+0x44>)
 8003bb8:	6224      	str	r4, [r4, #32]
 8003bba:	6323      	str	r3, [r4, #48]	; 0x30
 8003bbc:	bd10      	pop	{r4, pc}
 8003bbe:	bf00      	nop
 8003bc0:	08003ce9 	.word	0x08003ce9
 8003bc4:	08003d0b 	.word	0x08003d0b
 8003bc8:	08003d43 	.word	0x08003d43
 8003bcc:	08003d67 	.word	0x08003d67

08003bd0 <stdio_exit_handler>:
 8003bd0:	4a02      	ldr	r2, [pc, #8]	; (8003bdc <stdio_exit_handler+0xc>)
 8003bd2:	4903      	ldr	r1, [pc, #12]	; (8003be0 <stdio_exit_handler+0x10>)
 8003bd4:	4803      	ldr	r0, [pc, #12]	; (8003be4 <stdio_exit_handler+0x14>)
 8003bd6:	f000 b869 	b.w	8003cac <_fwalk_sglue>
 8003bda:	bf00      	nop
 8003bdc:	20000010 	.word	0x20000010
 8003be0:	08004461 	.word	0x08004461
 8003be4:	2000001c 	.word	0x2000001c

08003be8 <cleanup_stdio>:
 8003be8:	6841      	ldr	r1, [r0, #4]
 8003bea:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <cleanup_stdio+0x34>)
 8003bec:	4299      	cmp	r1, r3
 8003bee:	b510      	push	{r4, lr}
 8003bf0:	4604      	mov	r4, r0
 8003bf2:	d001      	beq.n	8003bf8 <cleanup_stdio+0x10>
 8003bf4:	f000 fc34 	bl	8004460 <_fflush_r>
 8003bf8:	68a1      	ldr	r1, [r4, #8]
 8003bfa:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <cleanup_stdio+0x38>)
 8003bfc:	4299      	cmp	r1, r3
 8003bfe:	d002      	beq.n	8003c06 <cleanup_stdio+0x1e>
 8003c00:	4620      	mov	r0, r4
 8003c02:	f000 fc2d 	bl	8004460 <_fflush_r>
 8003c06:	68e1      	ldr	r1, [r4, #12]
 8003c08:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <cleanup_stdio+0x3c>)
 8003c0a:	4299      	cmp	r1, r3
 8003c0c:	d004      	beq.n	8003c18 <cleanup_stdio+0x30>
 8003c0e:	4620      	mov	r0, r4
 8003c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c14:	f000 bc24 	b.w	8004460 <_fflush_r>
 8003c18:	bd10      	pop	{r4, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20000130 	.word	0x20000130
 8003c20:	20000198 	.word	0x20000198
 8003c24:	20000200 	.word	0x20000200

08003c28 <global_stdio_init.part.0>:
 8003c28:	b510      	push	{r4, lr}
 8003c2a:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <global_stdio_init.part.0+0x30>)
 8003c2c:	4c0b      	ldr	r4, [pc, #44]	; (8003c5c <global_stdio_init.part.0+0x34>)
 8003c2e:	4a0c      	ldr	r2, [pc, #48]	; (8003c60 <global_stdio_init.part.0+0x38>)
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	4620      	mov	r0, r4
 8003c34:	2200      	movs	r2, #0
 8003c36:	2104      	movs	r1, #4
 8003c38:	f7ff ffa6 	bl	8003b88 <std>
 8003c3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003c40:	2201      	movs	r2, #1
 8003c42:	2109      	movs	r1, #9
 8003c44:	f7ff ffa0 	bl	8003b88 <std>
 8003c48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c52:	2112      	movs	r1, #18
 8003c54:	f7ff bf98 	b.w	8003b88 <std>
 8003c58:	20000268 	.word	0x20000268
 8003c5c:	20000130 	.word	0x20000130
 8003c60:	08003bd1 	.word	0x08003bd1

08003c64 <__sfp_lock_acquire>:
 8003c64:	4801      	ldr	r0, [pc, #4]	; (8003c6c <__sfp_lock_acquire+0x8>)
 8003c66:	f000 b979 	b.w	8003f5c <__retarget_lock_acquire_recursive>
 8003c6a:	bf00      	nop
 8003c6c:	20000271 	.word	0x20000271

08003c70 <__sfp_lock_release>:
 8003c70:	4801      	ldr	r0, [pc, #4]	; (8003c78 <__sfp_lock_release+0x8>)
 8003c72:	f000 b974 	b.w	8003f5e <__retarget_lock_release_recursive>
 8003c76:	bf00      	nop
 8003c78:	20000271 	.word	0x20000271

08003c7c <__sinit>:
 8003c7c:	b510      	push	{r4, lr}
 8003c7e:	4604      	mov	r4, r0
 8003c80:	f7ff fff0 	bl	8003c64 <__sfp_lock_acquire>
 8003c84:	6a23      	ldr	r3, [r4, #32]
 8003c86:	b11b      	cbz	r3, 8003c90 <__sinit+0x14>
 8003c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c8c:	f7ff bff0 	b.w	8003c70 <__sfp_lock_release>
 8003c90:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <__sinit+0x28>)
 8003c92:	6223      	str	r3, [r4, #32]
 8003c94:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <__sinit+0x2c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1f5      	bne.n	8003c88 <__sinit+0xc>
 8003c9c:	f7ff ffc4 	bl	8003c28 <global_stdio_init.part.0>
 8003ca0:	e7f2      	b.n	8003c88 <__sinit+0xc>
 8003ca2:	bf00      	nop
 8003ca4:	08003be9 	.word	0x08003be9
 8003ca8:	20000268 	.word	0x20000268

08003cac <_fwalk_sglue>:
 8003cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cb0:	4607      	mov	r7, r0
 8003cb2:	4688      	mov	r8, r1
 8003cb4:	4614      	mov	r4, r2
 8003cb6:	2600      	movs	r6, #0
 8003cb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cbc:	f1b9 0901 	subs.w	r9, r9, #1
 8003cc0:	d505      	bpl.n	8003cce <_fwalk_sglue+0x22>
 8003cc2:	6824      	ldr	r4, [r4, #0]
 8003cc4:	2c00      	cmp	r4, #0
 8003cc6:	d1f7      	bne.n	8003cb8 <_fwalk_sglue+0xc>
 8003cc8:	4630      	mov	r0, r6
 8003cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cce:	89ab      	ldrh	r3, [r5, #12]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d907      	bls.n	8003ce4 <_fwalk_sglue+0x38>
 8003cd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	d003      	beq.n	8003ce4 <_fwalk_sglue+0x38>
 8003cdc:	4629      	mov	r1, r5
 8003cde:	4638      	mov	r0, r7
 8003ce0:	47c0      	blx	r8
 8003ce2:	4306      	orrs	r6, r0
 8003ce4:	3568      	adds	r5, #104	; 0x68
 8003ce6:	e7e9      	b.n	8003cbc <_fwalk_sglue+0x10>

08003ce8 <__sread>:
 8003ce8:	b510      	push	{r4, lr}
 8003cea:	460c      	mov	r4, r1
 8003cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cf0:	f000 f8d6 	bl	8003ea0 <_read_r>
 8003cf4:	2800      	cmp	r0, #0
 8003cf6:	bfab      	itete	ge
 8003cf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cfa:	89a3      	ldrhlt	r3, [r4, #12]
 8003cfc:	181b      	addge	r3, r3, r0
 8003cfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d02:	bfac      	ite	ge
 8003d04:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d06:	81a3      	strhlt	r3, [r4, #12]
 8003d08:	bd10      	pop	{r4, pc}

08003d0a <__swrite>:
 8003d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d0e:	461f      	mov	r7, r3
 8003d10:	898b      	ldrh	r3, [r1, #12]
 8003d12:	05db      	lsls	r3, r3, #23
 8003d14:	4605      	mov	r5, r0
 8003d16:	460c      	mov	r4, r1
 8003d18:	4616      	mov	r6, r2
 8003d1a:	d505      	bpl.n	8003d28 <__swrite+0x1e>
 8003d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d20:	2302      	movs	r3, #2
 8003d22:	2200      	movs	r2, #0
 8003d24:	f000 f8aa 	bl	8003e7c <_lseek_r>
 8003d28:	89a3      	ldrh	r3, [r4, #12]
 8003d2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d32:	81a3      	strh	r3, [r4, #12]
 8003d34:	4632      	mov	r2, r6
 8003d36:	463b      	mov	r3, r7
 8003d38:	4628      	mov	r0, r5
 8003d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d3e:	f000 b8d1 	b.w	8003ee4 <_write_r>

08003d42 <__sseek>:
 8003d42:	b510      	push	{r4, lr}
 8003d44:	460c      	mov	r4, r1
 8003d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d4a:	f000 f897 	bl	8003e7c <_lseek_r>
 8003d4e:	1c43      	adds	r3, r0, #1
 8003d50:	89a3      	ldrh	r3, [r4, #12]
 8003d52:	bf15      	itete	ne
 8003d54:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d5e:	81a3      	strheq	r3, [r4, #12]
 8003d60:	bf18      	it	ne
 8003d62:	81a3      	strhne	r3, [r4, #12]
 8003d64:	bd10      	pop	{r4, pc}

08003d66 <__sclose>:
 8003d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d6a:	f000 b877 	b.w	8003e5c <_close_r>

08003d6e <memset>:
 8003d6e:	4402      	add	r2, r0
 8003d70:	4603      	mov	r3, r0
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d100      	bne.n	8003d78 <memset+0xa>
 8003d76:	4770      	bx	lr
 8003d78:	f803 1b01 	strb.w	r1, [r3], #1
 8003d7c:	e7f9      	b.n	8003d72 <memset+0x4>

08003d7e <strncmp>:
 8003d7e:	b510      	push	{r4, lr}
 8003d80:	b16a      	cbz	r2, 8003d9e <strncmp+0x20>
 8003d82:	3901      	subs	r1, #1
 8003d84:	1884      	adds	r4, r0, r2
 8003d86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d8a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d103      	bne.n	8003d9a <strncmp+0x1c>
 8003d92:	42a0      	cmp	r0, r4
 8003d94:	d001      	beq.n	8003d9a <strncmp+0x1c>
 8003d96:	2a00      	cmp	r2, #0
 8003d98:	d1f5      	bne.n	8003d86 <strncmp+0x8>
 8003d9a:	1ad0      	subs	r0, r2, r3
 8003d9c:	bd10      	pop	{r4, pc}
 8003d9e:	4610      	mov	r0, r2
 8003da0:	e7fc      	b.n	8003d9c <strncmp+0x1e>
	...

08003da4 <strtok>:
 8003da4:	4b16      	ldr	r3, [pc, #88]	; (8003e00 <strtok+0x5c>)
 8003da6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003da8:	681e      	ldr	r6, [r3, #0]
 8003daa:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8003dac:	4605      	mov	r5, r0
 8003dae:	b9fc      	cbnz	r4, 8003df0 <strtok+0x4c>
 8003db0:	2050      	movs	r0, #80	; 0x50
 8003db2:	9101      	str	r1, [sp, #4]
 8003db4:	f7ff fda0 	bl	80038f8 <malloc>
 8003db8:	9901      	ldr	r1, [sp, #4]
 8003dba:	6470      	str	r0, [r6, #68]	; 0x44
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	b920      	cbnz	r0, 8003dca <strtok+0x26>
 8003dc0:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <strtok+0x60>)
 8003dc2:	4811      	ldr	r0, [pc, #68]	; (8003e08 <strtok+0x64>)
 8003dc4:	215b      	movs	r1, #91	; 0x5b
 8003dc6:	f000 f8cb 	bl	8003f60 <__assert_func>
 8003dca:	e9c0 4400 	strd	r4, r4, [r0]
 8003dce:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003dd2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003dd6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003dda:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003dde:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003de2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003de6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003dea:	6184      	str	r4, [r0, #24]
 8003dec:	7704      	strb	r4, [r0, #28]
 8003dee:	6244      	str	r4, [r0, #36]	; 0x24
 8003df0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8003df2:	2301      	movs	r3, #1
 8003df4:	4628      	mov	r0, r5
 8003df6:	b002      	add	sp, #8
 8003df8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003dfc:	f000 b806 	b.w	8003e0c <__strtok_r>
 8003e00:	20000068 	.word	0x20000068
 8003e04:	08004bf9 	.word	0x08004bf9
 8003e08:	08004c10 	.word	0x08004c10

08003e0c <__strtok_r>:
 8003e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e0e:	b908      	cbnz	r0, 8003e14 <__strtok_r+0x8>
 8003e10:	6810      	ldr	r0, [r2, #0]
 8003e12:	b188      	cbz	r0, 8003e38 <__strtok_r+0x2c>
 8003e14:	4604      	mov	r4, r0
 8003e16:	4620      	mov	r0, r4
 8003e18:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003e1c:	460f      	mov	r7, r1
 8003e1e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003e22:	b91e      	cbnz	r6, 8003e2c <__strtok_r+0x20>
 8003e24:	b965      	cbnz	r5, 8003e40 <__strtok_r+0x34>
 8003e26:	6015      	str	r5, [r2, #0]
 8003e28:	4628      	mov	r0, r5
 8003e2a:	e005      	b.n	8003e38 <__strtok_r+0x2c>
 8003e2c:	42b5      	cmp	r5, r6
 8003e2e:	d1f6      	bne.n	8003e1e <__strtok_r+0x12>
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f0      	bne.n	8003e16 <__strtok_r+0xa>
 8003e34:	6014      	str	r4, [r2, #0]
 8003e36:	7003      	strb	r3, [r0, #0]
 8003e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e3a:	461c      	mov	r4, r3
 8003e3c:	e00c      	b.n	8003e58 <__strtok_r+0x4c>
 8003e3e:	b915      	cbnz	r5, 8003e46 <__strtok_r+0x3a>
 8003e40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003e44:	460e      	mov	r6, r1
 8003e46:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003e4a:	42ab      	cmp	r3, r5
 8003e4c:	d1f7      	bne.n	8003e3e <__strtok_r+0x32>
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f3      	beq.n	8003e3a <__strtok_r+0x2e>
 8003e52:	2300      	movs	r3, #0
 8003e54:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003e58:	6014      	str	r4, [r2, #0]
 8003e5a:	e7ed      	b.n	8003e38 <__strtok_r+0x2c>

08003e5c <_close_r>:
 8003e5c:	b538      	push	{r3, r4, r5, lr}
 8003e5e:	4d06      	ldr	r5, [pc, #24]	; (8003e78 <_close_r+0x1c>)
 8003e60:	2300      	movs	r3, #0
 8003e62:	4604      	mov	r4, r0
 8003e64:	4608      	mov	r0, r1
 8003e66:	602b      	str	r3, [r5, #0]
 8003e68:	f7fd f983 	bl	8001172 <_close>
 8003e6c:	1c43      	adds	r3, r0, #1
 8003e6e:	d102      	bne.n	8003e76 <_close_r+0x1a>
 8003e70:	682b      	ldr	r3, [r5, #0]
 8003e72:	b103      	cbz	r3, 8003e76 <_close_r+0x1a>
 8003e74:	6023      	str	r3, [r4, #0]
 8003e76:	bd38      	pop	{r3, r4, r5, pc}
 8003e78:	2000026c 	.word	0x2000026c

08003e7c <_lseek_r>:
 8003e7c:	b538      	push	{r3, r4, r5, lr}
 8003e7e:	4d07      	ldr	r5, [pc, #28]	; (8003e9c <_lseek_r+0x20>)
 8003e80:	4604      	mov	r4, r0
 8003e82:	4608      	mov	r0, r1
 8003e84:	4611      	mov	r1, r2
 8003e86:	2200      	movs	r2, #0
 8003e88:	602a      	str	r2, [r5, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f7fd f998 	bl	80011c0 <_lseek>
 8003e90:	1c43      	adds	r3, r0, #1
 8003e92:	d102      	bne.n	8003e9a <_lseek_r+0x1e>
 8003e94:	682b      	ldr	r3, [r5, #0]
 8003e96:	b103      	cbz	r3, 8003e9a <_lseek_r+0x1e>
 8003e98:	6023      	str	r3, [r4, #0]
 8003e9a:	bd38      	pop	{r3, r4, r5, pc}
 8003e9c:	2000026c 	.word	0x2000026c

08003ea0 <_read_r>:
 8003ea0:	b538      	push	{r3, r4, r5, lr}
 8003ea2:	4d07      	ldr	r5, [pc, #28]	; (8003ec0 <_read_r+0x20>)
 8003ea4:	4604      	mov	r4, r0
 8003ea6:	4608      	mov	r0, r1
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	2200      	movs	r2, #0
 8003eac:	602a      	str	r2, [r5, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	f7fd f926 	bl	8001100 <_read>
 8003eb4:	1c43      	adds	r3, r0, #1
 8003eb6:	d102      	bne.n	8003ebe <_read_r+0x1e>
 8003eb8:	682b      	ldr	r3, [r5, #0]
 8003eba:	b103      	cbz	r3, 8003ebe <_read_r+0x1e>
 8003ebc:	6023      	str	r3, [r4, #0]
 8003ebe:	bd38      	pop	{r3, r4, r5, pc}
 8003ec0:	2000026c 	.word	0x2000026c

08003ec4 <_sbrk_r>:
 8003ec4:	b538      	push	{r3, r4, r5, lr}
 8003ec6:	4d06      	ldr	r5, [pc, #24]	; (8003ee0 <_sbrk_r+0x1c>)
 8003ec8:	2300      	movs	r3, #0
 8003eca:	4604      	mov	r4, r0
 8003ecc:	4608      	mov	r0, r1
 8003ece:	602b      	str	r3, [r5, #0]
 8003ed0:	f7fd f984 	bl	80011dc <_sbrk>
 8003ed4:	1c43      	adds	r3, r0, #1
 8003ed6:	d102      	bne.n	8003ede <_sbrk_r+0x1a>
 8003ed8:	682b      	ldr	r3, [r5, #0]
 8003eda:	b103      	cbz	r3, 8003ede <_sbrk_r+0x1a>
 8003edc:	6023      	str	r3, [r4, #0]
 8003ede:	bd38      	pop	{r3, r4, r5, pc}
 8003ee0:	2000026c 	.word	0x2000026c

08003ee4 <_write_r>:
 8003ee4:	b538      	push	{r3, r4, r5, lr}
 8003ee6:	4d07      	ldr	r5, [pc, #28]	; (8003f04 <_write_r+0x20>)
 8003ee8:	4604      	mov	r4, r0
 8003eea:	4608      	mov	r0, r1
 8003eec:	4611      	mov	r1, r2
 8003eee:	2200      	movs	r2, #0
 8003ef0:	602a      	str	r2, [r5, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f7fd f921 	bl	800113a <_write>
 8003ef8:	1c43      	adds	r3, r0, #1
 8003efa:	d102      	bne.n	8003f02 <_write_r+0x1e>
 8003efc:	682b      	ldr	r3, [r5, #0]
 8003efe:	b103      	cbz	r3, 8003f02 <_write_r+0x1e>
 8003f00:	6023      	str	r3, [r4, #0]
 8003f02:	bd38      	pop	{r3, r4, r5, pc}
 8003f04:	2000026c 	.word	0x2000026c

08003f08 <__errno>:
 8003f08:	4b01      	ldr	r3, [pc, #4]	; (8003f10 <__errno+0x8>)
 8003f0a:	6818      	ldr	r0, [r3, #0]
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	20000068 	.word	0x20000068

08003f14 <__libc_init_array>:
 8003f14:	b570      	push	{r4, r5, r6, lr}
 8003f16:	4d0d      	ldr	r5, [pc, #52]	; (8003f4c <__libc_init_array+0x38>)
 8003f18:	4c0d      	ldr	r4, [pc, #52]	; (8003f50 <__libc_init_array+0x3c>)
 8003f1a:	1b64      	subs	r4, r4, r5
 8003f1c:	10a4      	asrs	r4, r4, #2
 8003f1e:	2600      	movs	r6, #0
 8003f20:	42a6      	cmp	r6, r4
 8003f22:	d109      	bne.n	8003f38 <__libc_init_array+0x24>
 8003f24:	4d0b      	ldr	r5, [pc, #44]	; (8003f54 <__libc_init_array+0x40>)
 8003f26:	4c0c      	ldr	r4, [pc, #48]	; (8003f58 <__libc_init_array+0x44>)
 8003f28:	f000 fd7c 	bl	8004a24 <_init>
 8003f2c:	1b64      	subs	r4, r4, r5
 8003f2e:	10a4      	asrs	r4, r4, #2
 8003f30:	2600      	movs	r6, #0
 8003f32:	42a6      	cmp	r6, r4
 8003f34:	d105      	bne.n	8003f42 <__libc_init_array+0x2e>
 8003f36:	bd70      	pop	{r4, r5, r6, pc}
 8003f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f3c:	4798      	blx	r3
 8003f3e:	3601      	adds	r6, #1
 8003f40:	e7ee      	b.n	8003f20 <__libc_init_array+0xc>
 8003f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f46:	4798      	blx	r3
 8003f48:	3601      	adds	r6, #1
 8003f4a:	e7f2      	b.n	8003f32 <__libc_init_array+0x1e>
 8003f4c:	08004ce4 	.word	0x08004ce4
 8003f50:	08004ce4 	.word	0x08004ce4
 8003f54:	08004ce4 	.word	0x08004ce4
 8003f58:	08004ce8 	.word	0x08004ce8

08003f5c <__retarget_lock_acquire_recursive>:
 8003f5c:	4770      	bx	lr

08003f5e <__retarget_lock_release_recursive>:
 8003f5e:	4770      	bx	lr

08003f60 <__assert_func>:
 8003f60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f62:	4614      	mov	r4, r2
 8003f64:	461a      	mov	r2, r3
 8003f66:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <__assert_func+0x2c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4605      	mov	r5, r0
 8003f6c:	68d8      	ldr	r0, [r3, #12]
 8003f6e:	b14c      	cbz	r4, 8003f84 <__assert_func+0x24>
 8003f70:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <__assert_func+0x30>)
 8003f72:	9100      	str	r1, [sp, #0]
 8003f74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003f78:	4906      	ldr	r1, [pc, #24]	; (8003f94 <__assert_func+0x34>)
 8003f7a:	462b      	mov	r3, r5
 8003f7c:	f000 fa98 	bl	80044b0 <fiprintf>
 8003f80:	f000 faa8 	bl	80044d4 <abort>
 8003f84:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <__assert_func+0x38>)
 8003f86:	461c      	mov	r4, r3
 8003f88:	e7f3      	b.n	8003f72 <__assert_func+0x12>
 8003f8a:	bf00      	nop
 8003f8c:	20000068 	.word	0x20000068
 8003f90:	08004c6a 	.word	0x08004c6a
 8003f94:	08004c77 	.word	0x08004c77
 8003f98:	08004ca5 	.word	0x08004ca5

08003f9c <_free_r>:
 8003f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f9e:	2900      	cmp	r1, #0
 8003fa0:	d044      	beq.n	800402c <_free_r+0x90>
 8003fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fa6:	9001      	str	r0, [sp, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f1a1 0404 	sub.w	r4, r1, #4
 8003fae:	bfb8      	it	lt
 8003fb0:	18e4      	addlt	r4, r4, r3
 8003fb2:	f7ff fd51 	bl	8003a58 <__malloc_lock>
 8003fb6:	4a1e      	ldr	r2, [pc, #120]	; (8004030 <_free_r+0x94>)
 8003fb8:	9801      	ldr	r0, [sp, #4]
 8003fba:	6813      	ldr	r3, [r2, #0]
 8003fbc:	b933      	cbnz	r3, 8003fcc <_free_r+0x30>
 8003fbe:	6063      	str	r3, [r4, #4]
 8003fc0:	6014      	str	r4, [r2, #0]
 8003fc2:	b003      	add	sp, #12
 8003fc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fc8:	f7ff bd4c 	b.w	8003a64 <__malloc_unlock>
 8003fcc:	42a3      	cmp	r3, r4
 8003fce:	d908      	bls.n	8003fe2 <_free_r+0x46>
 8003fd0:	6825      	ldr	r5, [r4, #0]
 8003fd2:	1961      	adds	r1, r4, r5
 8003fd4:	428b      	cmp	r3, r1
 8003fd6:	bf01      	itttt	eq
 8003fd8:	6819      	ldreq	r1, [r3, #0]
 8003fda:	685b      	ldreq	r3, [r3, #4]
 8003fdc:	1949      	addeq	r1, r1, r5
 8003fde:	6021      	streq	r1, [r4, #0]
 8003fe0:	e7ed      	b.n	8003fbe <_free_r+0x22>
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	b10b      	cbz	r3, 8003fec <_free_r+0x50>
 8003fe8:	42a3      	cmp	r3, r4
 8003fea:	d9fa      	bls.n	8003fe2 <_free_r+0x46>
 8003fec:	6811      	ldr	r1, [r2, #0]
 8003fee:	1855      	adds	r5, r2, r1
 8003ff0:	42a5      	cmp	r5, r4
 8003ff2:	d10b      	bne.n	800400c <_free_r+0x70>
 8003ff4:	6824      	ldr	r4, [r4, #0]
 8003ff6:	4421      	add	r1, r4
 8003ff8:	1854      	adds	r4, r2, r1
 8003ffa:	42a3      	cmp	r3, r4
 8003ffc:	6011      	str	r1, [r2, #0]
 8003ffe:	d1e0      	bne.n	8003fc2 <_free_r+0x26>
 8004000:	681c      	ldr	r4, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	6053      	str	r3, [r2, #4]
 8004006:	440c      	add	r4, r1
 8004008:	6014      	str	r4, [r2, #0]
 800400a:	e7da      	b.n	8003fc2 <_free_r+0x26>
 800400c:	d902      	bls.n	8004014 <_free_r+0x78>
 800400e:	230c      	movs	r3, #12
 8004010:	6003      	str	r3, [r0, #0]
 8004012:	e7d6      	b.n	8003fc2 <_free_r+0x26>
 8004014:	6825      	ldr	r5, [r4, #0]
 8004016:	1961      	adds	r1, r4, r5
 8004018:	428b      	cmp	r3, r1
 800401a:	bf04      	itt	eq
 800401c:	6819      	ldreq	r1, [r3, #0]
 800401e:	685b      	ldreq	r3, [r3, #4]
 8004020:	6063      	str	r3, [r4, #4]
 8004022:	bf04      	itt	eq
 8004024:	1949      	addeq	r1, r1, r5
 8004026:	6021      	streq	r1, [r4, #0]
 8004028:	6054      	str	r4, [r2, #4]
 800402a:	e7ca      	b.n	8003fc2 <_free_r+0x26>
 800402c:	b003      	add	sp, #12
 800402e:	bd30      	pop	{r4, r5, pc}
 8004030:	20000128 	.word	0x20000128

08004034 <_printf_common>:
 8004034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004038:	4616      	mov	r6, r2
 800403a:	4699      	mov	r9, r3
 800403c:	688a      	ldr	r2, [r1, #8]
 800403e:	690b      	ldr	r3, [r1, #16]
 8004040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004044:	4293      	cmp	r3, r2
 8004046:	bfb8      	it	lt
 8004048:	4613      	movlt	r3, r2
 800404a:	6033      	str	r3, [r6, #0]
 800404c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004050:	4607      	mov	r7, r0
 8004052:	460c      	mov	r4, r1
 8004054:	b10a      	cbz	r2, 800405a <_printf_common+0x26>
 8004056:	3301      	adds	r3, #1
 8004058:	6033      	str	r3, [r6, #0]
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	0699      	lsls	r1, r3, #26
 800405e:	bf42      	ittt	mi
 8004060:	6833      	ldrmi	r3, [r6, #0]
 8004062:	3302      	addmi	r3, #2
 8004064:	6033      	strmi	r3, [r6, #0]
 8004066:	6825      	ldr	r5, [r4, #0]
 8004068:	f015 0506 	ands.w	r5, r5, #6
 800406c:	d106      	bne.n	800407c <_printf_common+0x48>
 800406e:	f104 0a19 	add.w	sl, r4, #25
 8004072:	68e3      	ldr	r3, [r4, #12]
 8004074:	6832      	ldr	r2, [r6, #0]
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	42ab      	cmp	r3, r5
 800407a:	dc26      	bgt.n	80040ca <_printf_common+0x96>
 800407c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004080:	1e13      	subs	r3, r2, #0
 8004082:	6822      	ldr	r2, [r4, #0]
 8004084:	bf18      	it	ne
 8004086:	2301      	movne	r3, #1
 8004088:	0692      	lsls	r2, r2, #26
 800408a:	d42b      	bmi.n	80040e4 <_printf_common+0xb0>
 800408c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004090:	4649      	mov	r1, r9
 8004092:	4638      	mov	r0, r7
 8004094:	47c0      	blx	r8
 8004096:	3001      	adds	r0, #1
 8004098:	d01e      	beq.n	80040d8 <_printf_common+0xa4>
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	6922      	ldr	r2, [r4, #16]
 800409e:	f003 0306 	and.w	r3, r3, #6
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	bf02      	ittt	eq
 80040a6:	68e5      	ldreq	r5, [r4, #12]
 80040a8:	6833      	ldreq	r3, [r6, #0]
 80040aa:	1aed      	subeq	r5, r5, r3
 80040ac:	68a3      	ldr	r3, [r4, #8]
 80040ae:	bf0c      	ite	eq
 80040b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040b4:	2500      	movne	r5, #0
 80040b6:	4293      	cmp	r3, r2
 80040b8:	bfc4      	itt	gt
 80040ba:	1a9b      	subgt	r3, r3, r2
 80040bc:	18ed      	addgt	r5, r5, r3
 80040be:	2600      	movs	r6, #0
 80040c0:	341a      	adds	r4, #26
 80040c2:	42b5      	cmp	r5, r6
 80040c4:	d11a      	bne.n	80040fc <_printf_common+0xc8>
 80040c6:	2000      	movs	r0, #0
 80040c8:	e008      	b.n	80040dc <_printf_common+0xa8>
 80040ca:	2301      	movs	r3, #1
 80040cc:	4652      	mov	r2, sl
 80040ce:	4649      	mov	r1, r9
 80040d0:	4638      	mov	r0, r7
 80040d2:	47c0      	blx	r8
 80040d4:	3001      	adds	r0, #1
 80040d6:	d103      	bne.n	80040e0 <_printf_common+0xac>
 80040d8:	f04f 30ff 	mov.w	r0, #4294967295
 80040dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e0:	3501      	adds	r5, #1
 80040e2:	e7c6      	b.n	8004072 <_printf_common+0x3e>
 80040e4:	18e1      	adds	r1, r4, r3
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	2030      	movs	r0, #48	; 0x30
 80040ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040ee:	4422      	add	r2, r4
 80040f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040f8:	3302      	adds	r3, #2
 80040fa:	e7c7      	b.n	800408c <_printf_common+0x58>
 80040fc:	2301      	movs	r3, #1
 80040fe:	4622      	mov	r2, r4
 8004100:	4649      	mov	r1, r9
 8004102:	4638      	mov	r0, r7
 8004104:	47c0      	blx	r8
 8004106:	3001      	adds	r0, #1
 8004108:	d0e6      	beq.n	80040d8 <_printf_common+0xa4>
 800410a:	3601      	adds	r6, #1
 800410c:	e7d9      	b.n	80040c2 <_printf_common+0x8e>
	...

08004110 <_printf_i>:
 8004110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004114:	7e0f      	ldrb	r7, [r1, #24]
 8004116:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004118:	2f78      	cmp	r7, #120	; 0x78
 800411a:	4691      	mov	r9, r2
 800411c:	4680      	mov	r8, r0
 800411e:	460c      	mov	r4, r1
 8004120:	469a      	mov	sl, r3
 8004122:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004126:	d807      	bhi.n	8004138 <_printf_i+0x28>
 8004128:	2f62      	cmp	r7, #98	; 0x62
 800412a:	d80a      	bhi.n	8004142 <_printf_i+0x32>
 800412c:	2f00      	cmp	r7, #0
 800412e:	f000 80d4 	beq.w	80042da <_printf_i+0x1ca>
 8004132:	2f58      	cmp	r7, #88	; 0x58
 8004134:	f000 80c0 	beq.w	80042b8 <_printf_i+0x1a8>
 8004138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800413c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004140:	e03a      	b.n	80041b8 <_printf_i+0xa8>
 8004142:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004146:	2b15      	cmp	r3, #21
 8004148:	d8f6      	bhi.n	8004138 <_printf_i+0x28>
 800414a:	a101      	add	r1, pc, #4	; (adr r1, 8004150 <_printf_i+0x40>)
 800414c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004150:	080041a9 	.word	0x080041a9
 8004154:	080041bd 	.word	0x080041bd
 8004158:	08004139 	.word	0x08004139
 800415c:	08004139 	.word	0x08004139
 8004160:	08004139 	.word	0x08004139
 8004164:	08004139 	.word	0x08004139
 8004168:	080041bd 	.word	0x080041bd
 800416c:	08004139 	.word	0x08004139
 8004170:	08004139 	.word	0x08004139
 8004174:	08004139 	.word	0x08004139
 8004178:	08004139 	.word	0x08004139
 800417c:	080042c1 	.word	0x080042c1
 8004180:	080041e9 	.word	0x080041e9
 8004184:	0800427b 	.word	0x0800427b
 8004188:	08004139 	.word	0x08004139
 800418c:	08004139 	.word	0x08004139
 8004190:	080042e3 	.word	0x080042e3
 8004194:	08004139 	.word	0x08004139
 8004198:	080041e9 	.word	0x080041e9
 800419c:	08004139 	.word	0x08004139
 80041a0:	08004139 	.word	0x08004139
 80041a4:	08004283 	.word	0x08004283
 80041a8:	682b      	ldr	r3, [r5, #0]
 80041aa:	1d1a      	adds	r2, r3, #4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	602a      	str	r2, [r5, #0]
 80041b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041b8:	2301      	movs	r3, #1
 80041ba:	e09f      	b.n	80042fc <_printf_i+0x1ec>
 80041bc:	6820      	ldr	r0, [r4, #0]
 80041be:	682b      	ldr	r3, [r5, #0]
 80041c0:	0607      	lsls	r7, r0, #24
 80041c2:	f103 0104 	add.w	r1, r3, #4
 80041c6:	6029      	str	r1, [r5, #0]
 80041c8:	d501      	bpl.n	80041ce <_printf_i+0xbe>
 80041ca:	681e      	ldr	r6, [r3, #0]
 80041cc:	e003      	b.n	80041d6 <_printf_i+0xc6>
 80041ce:	0646      	lsls	r6, r0, #25
 80041d0:	d5fb      	bpl.n	80041ca <_printf_i+0xba>
 80041d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80041d6:	2e00      	cmp	r6, #0
 80041d8:	da03      	bge.n	80041e2 <_printf_i+0xd2>
 80041da:	232d      	movs	r3, #45	; 0x2d
 80041dc:	4276      	negs	r6, r6
 80041de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e2:	485a      	ldr	r0, [pc, #360]	; (800434c <_printf_i+0x23c>)
 80041e4:	230a      	movs	r3, #10
 80041e6:	e012      	b.n	800420e <_printf_i+0xfe>
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	6820      	ldr	r0, [r4, #0]
 80041ec:	1d19      	adds	r1, r3, #4
 80041ee:	6029      	str	r1, [r5, #0]
 80041f0:	0605      	lsls	r5, r0, #24
 80041f2:	d501      	bpl.n	80041f8 <_printf_i+0xe8>
 80041f4:	681e      	ldr	r6, [r3, #0]
 80041f6:	e002      	b.n	80041fe <_printf_i+0xee>
 80041f8:	0641      	lsls	r1, r0, #25
 80041fa:	d5fb      	bpl.n	80041f4 <_printf_i+0xe4>
 80041fc:	881e      	ldrh	r6, [r3, #0]
 80041fe:	4853      	ldr	r0, [pc, #332]	; (800434c <_printf_i+0x23c>)
 8004200:	2f6f      	cmp	r7, #111	; 0x6f
 8004202:	bf0c      	ite	eq
 8004204:	2308      	moveq	r3, #8
 8004206:	230a      	movne	r3, #10
 8004208:	2100      	movs	r1, #0
 800420a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800420e:	6865      	ldr	r5, [r4, #4]
 8004210:	60a5      	str	r5, [r4, #8]
 8004212:	2d00      	cmp	r5, #0
 8004214:	bfa2      	ittt	ge
 8004216:	6821      	ldrge	r1, [r4, #0]
 8004218:	f021 0104 	bicge.w	r1, r1, #4
 800421c:	6021      	strge	r1, [r4, #0]
 800421e:	b90e      	cbnz	r6, 8004224 <_printf_i+0x114>
 8004220:	2d00      	cmp	r5, #0
 8004222:	d04b      	beq.n	80042bc <_printf_i+0x1ac>
 8004224:	4615      	mov	r5, r2
 8004226:	fbb6 f1f3 	udiv	r1, r6, r3
 800422a:	fb03 6711 	mls	r7, r3, r1, r6
 800422e:	5dc7      	ldrb	r7, [r0, r7]
 8004230:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004234:	4637      	mov	r7, r6
 8004236:	42bb      	cmp	r3, r7
 8004238:	460e      	mov	r6, r1
 800423a:	d9f4      	bls.n	8004226 <_printf_i+0x116>
 800423c:	2b08      	cmp	r3, #8
 800423e:	d10b      	bne.n	8004258 <_printf_i+0x148>
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	07de      	lsls	r6, r3, #31
 8004244:	d508      	bpl.n	8004258 <_printf_i+0x148>
 8004246:	6923      	ldr	r3, [r4, #16]
 8004248:	6861      	ldr	r1, [r4, #4]
 800424a:	4299      	cmp	r1, r3
 800424c:	bfde      	ittt	le
 800424e:	2330      	movle	r3, #48	; 0x30
 8004250:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004254:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004258:	1b52      	subs	r2, r2, r5
 800425a:	6122      	str	r2, [r4, #16]
 800425c:	f8cd a000 	str.w	sl, [sp]
 8004260:	464b      	mov	r3, r9
 8004262:	aa03      	add	r2, sp, #12
 8004264:	4621      	mov	r1, r4
 8004266:	4640      	mov	r0, r8
 8004268:	f7ff fee4 	bl	8004034 <_printf_common>
 800426c:	3001      	adds	r0, #1
 800426e:	d14a      	bne.n	8004306 <_printf_i+0x1f6>
 8004270:	f04f 30ff 	mov.w	r0, #4294967295
 8004274:	b004      	add	sp, #16
 8004276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	f043 0320 	orr.w	r3, r3, #32
 8004280:	6023      	str	r3, [r4, #0]
 8004282:	4833      	ldr	r0, [pc, #204]	; (8004350 <_printf_i+0x240>)
 8004284:	2778      	movs	r7, #120	; 0x78
 8004286:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	6829      	ldr	r1, [r5, #0]
 800428e:	061f      	lsls	r7, r3, #24
 8004290:	f851 6b04 	ldr.w	r6, [r1], #4
 8004294:	d402      	bmi.n	800429c <_printf_i+0x18c>
 8004296:	065f      	lsls	r7, r3, #25
 8004298:	bf48      	it	mi
 800429a:	b2b6      	uxthmi	r6, r6
 800429c:	07df      	lsls	r7, r3, #31
 800429e:	bf48      	it	mi
 80042a0:	f043 0320 	orrmi.w	r3, r3, #32
 80042a4:	6029      	str	r1, [r5, #0]
 80042a6:	bf48      	it	mi
 80042a8:	6023      	strmi	r3, [r4, #0]
 80042aa:	b91e      	cbnz	r6, 80042b4 <_printf_i+0x1a4>
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	f023 0320 	bic.w	r3, r3, #32
 80042b2:	6023      	str	r3, [r4, #0]
 80042b4:	2310      	movs	r3, #16
 80042b6:	e7a7      	b.n	8004208 <_printf_i+0xf8>
 80042b8:	4824      	ldr	r0, [pc, #144]	; (800434c <_printf_i+0x23c>)
 80042ba:	e7e4      	b.n	8004286 <_printf_i+0x176>
 80042bc:	4615      	mov	r5, r2
 80042be:	e7bd      	b.n	800423c <_printf_i+0x12c>
 80042c0:	682b      	ldr	r3, [r5, #0]
 80042c2:	6826      	ldr	r6, [r4, #0]
 80042c4:	6961      	ldr	r1, [r4, #20]
 80042c6:	1d18      	adds	r0, r3, #4
 80042c8:	6028      	str	r0, [r5, #0]
 80042ca:	0635      	lsls	r5, r6, #24
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	d501      	bpl.n	80042d4 <_printf_i+0x1c4>
 80042d0:	6019      	str	r1, [r3, #0]
 80042d2:	e002      	b.n	80042da <_printf_i+0x1ca>
 80042d4:	0670      	lsls	r0, r6, #25
 80042d6:	d5fb      	bpl.n	80042d0 <_printf_i+0x1c0>
 80042d8:	8019      	strh	r1, [r3, #0]
 80042da:	2300      	movs	r3, #0
 80042dc:	6123      	str	r3, [r4, #16]
 80042de:	4615      	mov	r5, r2
 80042e0:	e7bc      	b.n	800425c <_printf_i+0x14c>
 80042e2:	682b      	ldr	r3, [r5, #0]
 80042e4:	1d1a      	adds	r2, r3, #4
 80042e6:	602a      	str	r2, [r5, #0]
 80042e8:	681d      	ldr	r5, [r3, #0]
 80042ea:	6862      	ldr	r2, [r4, #4]
 80042ec:	2100      	movs	r1, #0
 80042ee:	4628      	mov	r0, r5
 80042f0:	f7fb ff7e 	bl	80001f0 <memchr>
 80042f4:	b108      	cbz	r0, 80042fa <_printf_i+0x1ea>
 80042f6:	1b40      	subs	r0, r0, r5
 80042f8:	6060      	str	r0, [r4, #4]
 80042fa:	6863      	ldr	r3, [r4, #4]
 80042fc:	6123      	str	r3, [r4, #16]
 80042fe:	2300      	movs	r3, #0
 8004300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004304:	e7aa      	b.n	800425c <_printf_i+0x14c>
 8004306:	6923      	ldr	r3, [r4, #16]
 8004308:	462a      	mov	r2, r5
 800430a:	4649      	mov	r1, r9
 800430c:	4640      	mov	r0, r8
 800430e:	47d0      	blx	sl
 8004310:	3001      	adds	r0, #1
 8004312:	d0ad      	beq.n	8004270 <_printf_i+0x160>
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	079b      	lsls	r3, r3, #30
 8004318:	d413      	bmi.n	8004342 <_printf_i+0x232>
 800431a:	68e0      	ldr	r0, [r4, #12]
 800431c:	9b03      	ldr	r3, [sp, #12]
 800431e:	4298      	cmp	r0, r3
 8004320:	bfb8      	it	lt
 8004322:	4618      	movlt	r0, r3
 8004324:	e7a6      	b.n	8004274 <_printf_i+0x164>
 8004326:	2301      	movs	r3, #1
 8004328:	4632      	mov	r2, r6
 800432a:	4649      	mov	r1, r9
 800432c:	4640      	mov	r0, r8
 800432e:	47d0      	blx	sl
 8004330:	3001      	adds	r0, #1
 8004332:	d09d      	beq.n	8004270 <_printf_i+0x160>
 8004334:	3501      	adds	r5, #1
 8004336:	68e3      	ldr	r3, [r4, #12]
 8004338:	9903      	ldr	r1, [sp, #12]
 800433a:	1a5b      	subs	r3, r3, r1
 800433c:	42ab      	cmp	r3, r5
 800433e:	dcf2      	bgt.n	8004326 <_printf_i+0x216>
 8004340:	e7eb      	b.n	800431a <_printf_i+0x20a>
 8004342:	2500      	movs	r5, #0
 8004344:	f104 0619 	add.w	r6, r4, #25
 8004348:	e7f5      	b.n	8004336 <_printf_i+0x226>
 800434a:	bf00      	nop
 800434c:	08004ca6 	.word	0x08004ca6
 8004350:	08004cb7 	.word	0x08004cb7

08004354 <__sflush_r>:
 8004354:	898a      	ldrh	r2, [r1, #12]
 8004356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800435a:	4605      	mov	r5, r0
 800435c:	0710      	lsls	r0, r2, #28
 800435e:	460c      	mov	r4, r1
 8004360:	d458      	bmi.n	8004414 <__sflush_r+0xc0>
 8004362:	684b      	ldr	r3, [r1, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	dc05      	bgt.n	8004374 <__sflush_r+0x20>
 8004368:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800436a:	2b00      	cmp	r3, #0
 800436c:	dc02      	bgt.n	8004374 <__sflush_r+0x20>
 800436e:	2000      	movs	r0, #0
 8004370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004374:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004376:	2e00      	cmp	r6, #0
 8004378:	d0f9      	beq.n	800436e <__sflush_r+0x1a>
 800437a:	2300      	movs	r3, #0
 800437c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004380:	682f      	ldr	r7, [r5, #0]
 8004382:	6a21      	ldr	r1, [r4, #32]
 8004384:	602b      	str	r3, [r5, #0]
 8004386:	d032      	beq.n	80043ee <__sflush_r+0x9a>
 8004388:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800438a:	89a3      	ldrh	r3, [r4, #12]
 800438c:	075a      	lsls	r2, r3, #29
 800438e:	d505      	bpl.n	800439c <__sflush_r+0x48>
 8004390:	6863      	ldr	r3, [r4, #4]
 8004392:	1ac0      	subs	r0, r0, r3
 8004394:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004396:	b10b      	cbz	r3, 800439c <__sflush_r+0x48>
 8004398:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800439a:	1ac0      	subs	r0, r0, r3
 800439c:	2300      	movs	r3, #0
 800439e:	4602      	mov	r2, r0
 80043a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043a2:	6a21      	ldr	r1, [r4, #32]
 80043a4:	4628      	mov	r0, r5
 80043a6:	47b0      	blx	r6
 80043a8:	1c43      	adds	r3, r0, #1
 80043aa:	89a3      	ldrh	r3, [r4, #12]
 80043ac:	d106      	bne.n	80043bc <__sflush_r+0x68>
 80043ae:	6829      	ldr	r1, [r5, #0]
 80043b0:	291d      	cmp	r1, #29
 80043b2:	d82b      	bhi.n	800440c <__sflush_r+0xb8>
 80043b4:	4a29      	ldr	r2, [pc, #164]	; (800445c <__sflush_r+0x108>)
 80043b6:	410a      	asrs	r2, r1
 80043b8:	07d6      	lsls	r6, r2, #31
 80043ba:	d427      	bmi.n	800440c <__sflush_r+0xb8>
 80043bc:	2200      	movs	r2, #0
 80043be:	6062      	str	r2, [r4, #4]
 80043c0:	04d9      	lsls	r1, r3, #19
 80043c2:	6922      	ldr	r2, [r4, #16]
 80043c4:	6022      	str	r2, [r4, #0]
 80043c6:	d504      	bpl.n	80043d2 <__sflush_r+0x7e>
 80043c8:	1c42      	adds	r2, r0, #1
 80043ca:	d101      	bne.n	80043d0 <__sflush_r+0x7c>
 80043cc:	682b      	ldr	r3, [r5, #0]
 80043ce:	b903      	cbnz	r3, 80043d2 <__sflush_r+0x7e>
 80043d0:	6560      	str	r0, [r4, #84]	; 0x54
 80043d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043d4:	602f      	str	r7, [r5, #0]
 80043d6:	2900      	cmp	r1, #0
 80043d8:	d0c9      	beq.n	800436e <__sflush_r+0x1a>
 80043da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043de:	4299      	cmp	r1, r3
 80043e0:	d002      	beq.n	80043e8 <__sflush_r+0x94>
 80043e2:	4628      	mov	r0, r5
 80043e4:	f7ff fdda 	bl	8003f9c <_free_r>
 80043e8:	2000      	movs	r0, #0
 80043ea:	6360      	str	r0, [r4, #52]	; 0x34
 80043ec:	e7c0      	b.n	8004370 <__sflush_r+0x1c>
 80043ee:	2301      	movs	r3, #1
 80043f0:	4628      	mov	r0, r5
 80043f2:	47b0      	blx	r6
 80043f4:	1c41      	adds	r1, r0, #1
 80043f6:	d1c8      	bne.n	800438a <__sflush_r+0x36>
 80043f8:	682b      	ldr	r3, [r5, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0c5      	beq.n	800438a <__sflush_r+0x36>
 80043fe:	2b1d      	cmp	r3, #29
 8004400:	d001      	beq.n	8004406 <__sflush_r+0xb2>
 8004402:	2b16      	cmp	r3, #22
 8004404:	d101      	bne.n	800440a <__sflush_r+0xb6>
 8004406:	602f      	str	r7, [r5, #0]
 8004408:	e7b1      	b.n	800436e <__sflush_r+0x1a>
 800440a:	89a3      	ldrh	r3, [r4, #12]
 800440c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004410:	81a3      	strh	r3, [r4, #12]
 8004412:	e7ad      	b.n	8004370 <__sflush_r+0x1c>
 8004414:	690f      	ldr	r7, [r1, #16]
 8004416:	2f00      	cmp	r7, #0
 8004418:	d0a9      	beq.n	800436e <__sflush_r+0x1a>
 800441a:	0793      	lsls	r3, r2, #30
 800441c:	680e      	ldr	r6, [r1, #0]
 800441e:	bf08      	it	eq
 8004420:	694b      	ldreq	r3, [r1, #20]
 8004422:	600f      	str	r7, [r1, #0]
 8004424:	bf18      	it	ne
 8004426:	2300      	movne	r3, #0
 8004428:	eba6 0807 	sub.w	r8, r6, r7
 800442c:	608b      	str	r3, [r1, #8]
 800442e:	f1b8 0f00 	cmp.w	r8, #0
 8004432:	dd9c      	ble.n	800436e <__sflush_r+0x1a>
 8004434:	6a21      	ldr	r1, [r4, #32]
 8004436:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004438:	4643      	mov	r3, r8
 800443a:	463a      	mov	r2, r7
 800443c:	4628      	mov	r0, r5
 800443e:	47b0      	blx	r6
 8004440:	2800      	cmp	r0, #0
 8004442:	dc06      	bgt.n	8004452 <__sflush_r+0xfe>
 8004444:	89a3      	ldrh	r3, [r4, #12]
 8004446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800444a:	81a3      	strh	r3, [r4, #12]
 800444c:	f04f 30ff 	mov.w	r0, #4294967295
 8004450:	e78e      	b.n	8004370 <__sflush_r+0x1c>
 8004452:	4407      	add	r7, r0
 8004454:	eba8 0800 	sub.w	r8, r8, r0
 8004458:	e7e9      	b.n	800442e <__sflush_r+0xda>
 800445a:	bf00      	nop
 800445c:	dfbffffe 	.word	0xdfbffffe

08004460 <_fflush_r>:
 8004460:	b538      	push	{r3, r4, r5, lr}
 8004462:	690b      	ldr	r3, [r1, #16]
 8004464:	4605      	mov	r5, r0
 8004466:	460c      	mov	r4, r1
 8004468:	b913      	cbnz	r3, 8004470 <_fflush_r+0x10>
 800446a:	2500      	movs	r5, #0
 800446c:	4628      	mov	r0, r5
 800446e:	bd38      	pop	{r3, r4, r5, pc}
 8004470:	b118      	cbz	r0, 800447a <_fflush_r+0x1a>
 8004472:	6a03      	ldr	r3, [r0, #32]
 8004474:	b90b      	cbnz	r3, 800447a <_fflush_r+0x1a>
 8004476:	f7ff fc01 	bl	8003c7c <__sinit>
 800447a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f3      	beq.n	800446a <_fflush_r+0xa>
 8004482:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004484:	07d0      	lsls	r0, r2, #31
 8004486:	d404      	bmi.n	8004492 <_fflush_r+0x32>
 8004488:	0599      	lsls	r1, r3, #22
 800448a:	d402      	bmi.n	8004492 <_fflush_r+0x32>
 800448c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800448e:	f7ff fd65 	bl	8003f5c <__retarget_lock_acquire_recursive>
 8004492:	4628      	mov	r0, r5
 8004494:	4621      	mov	r1, r4
 8004496:	f7ff ff5d 	bl	8004354 <__sflush_r>
 800449a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800449c:	07da      	lsls	r2, r3, #31
 800449e:	4605      	mov	r5, r0
 80044a0:	d4e4      	bmi.n	800446c <_fflush_r+0xc>
 80044a2:	89a3      	ldrh	r3, [r4, #12]
 80044a4:	059b      	lsls	r3, r3, #22
 80044a6:	d4e1      	bmi.n	800446c <_fflush_r+0xc>
 80044a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044aa:	f7ff fd58 	bl	8003f5e <__retarget_lock_release_recursive>
 80044ae:	e7dd      	b.n	800446c <_fflush_r+0xc>

080044b0 <fiprintf>:
 80044b0:	b40e      	push	{r1, r2, r3}
 80044b2:	b503      	push	{r0, r1, lr}
 80044b4:	4601      	mov	r1, r0
 80044b6:	ab03      	add	r3, sp, #12
 80044b8:	4805      	ldr	r0, [pc, #20]	; (80044d0 <fiprintf+0x20>)
 80044ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80044be:	6800      	ldr	r0, [r0, #0]
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	f000 f837 	bl	8004534 <_vfiprintf_r>
 80044c6:	b002      	add	sp, #8
 80044c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80044cc:	b003      	add	sp, #12
 80044ce:	4770      	bx	lr
 80044d0:	20000068 	.word	0x20000068

080044d4 <abort>:
 80044d4:	b508      	push	{r3, lr}
 80044d6:	2006      	movs	r0, #6
 80044d8:	f000 fa04 	bl	80048e4 <raise>
 80044dc:	2001      	movs	r0, #1
 80044de:	f7fc fe05 	bl	80010ec <_exit>

080044e2 <__sfputc_r>:
 80044e2:	6893      	ldr	r3, [r2, #8]
 80044e4:	3b01      	subs	r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	b410      	push	{r4}
 80044ea:	6093      	str	r3, [r2, #8]
 80044ec:	da08      	bge.n	8004500 <__sfputc_r+0x1e>
 80044ee:	6994      	ldr	r4, [r2, #24]
 80044f0:	42a3      	cmp	r3, r4
 80044f2:	db01      	blt.n	80044f8 <__sfputc_r+0x16>
 80044f4:	290a      	cmp	r1, #10
 80044f6:	d103      	bne.n	8004500 <__sfputc_r+0x1e>
 80044f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044fc:	f000 b934 	b.w	8004768 <__swbuf_r>
 8004500:	6813      	ldr	r3, [r2, #0]
 8004502:	1c58      	adds	r0, r3, #1
 8004504:	6010      	str	r0, [r2, #0]
 8004506:	7019      	strb	r1, [r3, #0]
 8004508:	4608      	mov	r0, r1
 800450a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800450e:	4770      	bx	lr

08004510 <__sfputs_r>:
 8004510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004512:	4606      	mov	r6, r0
 8004514:	460f      	mov	r7, r1
 8004516:	4614      	mov	r4, r2
 8004518:	18d5      	adds	r5, r2, r3
 800451a:	42ac      	cmp	r4, r5
 800451c:	d101      	bne.n	8004522 <__sfputs_r+0x12>
 800451e:	2000      	movs	r0, #0
 8004520:	e007      	b.n	8004532 <__sfputs_r+0x22>
 8004522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004526:	463a      	mov	r2, r7
 8004528:	4630      	mov	r0, r6
 800452a:	f7ff ffda 	bl	80044e2 <__sfputc_r>
 800452e:	1c43      	adds	r3, r0, #1
 8004530:	d1f3      	bne.n	800451a <__sfputs_r+0xa>
 8004532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004534 <_vfiprintf_r>:
 8004534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004538:	460d      	mov	r5, r1
 800453a:	b09d      	sub	sp, #116	; 0x74
 800453c:	4614      	mov	r4, r2
 800453e:	4698      	mov	r8, r3
 8004540:	4606      	mov	r6, r0
 8004542:	b118      	cbz	r0, 800454c <_vfiprintf_r+0x18>
 8004544:	6a03      	ldr	r3, [r0, #32]
 8004546:	b90b      	cbnz	r3, 800454c <_vfiprintf_r+0x18>
 8004548:	f7ff fb98 	bl	8003c7c <__sinit>
 800454c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800454e:	07d9      	lsls	r1, r3, #31
 8004550:	d405      	bmi.n	800455e <_vfiprintf_r+0x2a>
 8004552:	89ab      	ldrh	r3, [r5, #12]
 8004554:	059a      	lsls	r2, r3, #22
 8004556:	d402      	bmi.n	800455e <_vfiprintf_r+0x2a>
 8004558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800455a:	f7ff fcff 	bl	8003f5c <__retarget_lock_acquire_recursive>
 800455e:	89ab      	ldrh	r3, [r5, #12]
 8004560:	071b      	lsls	r3, r3, #28
 8004562:	d501      	bpl.n	8004568 <_vfiprintf_r+0x34>
 8004564:	692b      	ldr	r3, [r5, #16]
 8004566:	b99b      	cbnz	r3, 8004590 <_vfiprintf_r+0x5c>
 8004568:	4629      	mov	r1, r5
 800456a:	4630      	mov	r0, r6
 800456c:	f000 f93a 	bl	80047e4 <__swsetup_r>
 8004570:	b170      	cbz	r0, 8004590 <_vfiprintf_r+0x5c>
 8004572:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004574:	07dc      	lsls	r4, r3, #31
 8004576:	d504      	bpl.n	8004582 <_vfiprintf_r+0x4e>
 8004578:	f04f 30ff 	mov.w	r0, #4294967295
 800457c:	b01d      	add	sp, #116	; 0x74
 800457e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004582:	89ab      	ldrh	r3, [r5, #12]
 8004584:	0598      	lsls	r0, r3, #22
 8004586:	d4f7      	bmi.n	8004578 <_vfiprintf_r+0x44>
 8004588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800458a:	f7ff fce8 	bl	8003f5e <__retarget_lock_release_recursive>
 800458e:	e7f3      	b.n	8004578 <_vfiprintf_r+0x44>
 8004590:	2300      	movs	r3, #0
 8004592:	9309      	str	r3, [sp, #36]	; 0x24
 8004594:	2320      	movs	r3, #32
 8004596:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800459a:	f8cd 800c 	str.w	r8, [sp, #12]
 800459e:	2330      	movs	r3, #48	; 0x30
 80045a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004754 <_vfiprintf_r+0x220>
 80045a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045a8:	f04f 0901 	mov.w	r9, #1
 80045ac:	4623      	mov	r3, r4
 80045ae:	469a      	mov	sl, r3
 80045b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045b4:	b10a      	cbz	r2, 80045ba <_vfiprintf_r+0x86>
 80045b6:	2a25      	cmp	r2, #37	; 0x25
 80045b8:	d1f9      	bne.n	80045ae <_vfiprintf_r+0x7a>
 80045ba:	ebba 0b04 	subs.w	fp, sl, r4
 80045be:	d00b      	beq.n	80045d8 <_vfiprintf_r+0xa4>
 80045c0:	465b      	mov	r3, fp
 80045c2:	4622      	mov	r2, r4
 80045c4:	4629      	mov	r1, r5
 80045c6:	4630      	mov	r0, r6
 80045c8:	f7ff ffa2 	bl	8004510 <__sfputs_r>
 80045cc:	3001      	adds	r0, #1
 80045ce:	f000 80a9 	beq.w	8004724 <_vfiprintf_r+0x1f0>
 80045d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045d4:	445a      	add	r2, fp
 80045d6:	9209      	str	r2, [sp, #36]	; 0x24
 80045d8:	f89a 3000 	ldrb.w	r3, [sl]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 80a1 	beq.w	8004724 <_vfiprintf_r+0x1f0>
 80045e2:	2300      	movs	r3, #0
 80045e4:	f04f 32ff 	mov.w	r2, #4294967295
 80045e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045ec:	f10a 0a01 	add.w	sl, sl, #1
 80045f0:	9304      	str	r3, [sp, #16]
 80045f2:	9307      	str	r3, [sp, #28]
 80045f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045f8:	931a      	str	r3, [sp, #104]	; 0x68
 80045fa:	4654      	mov	r4, sl
 80045fc:	2205      	movs	r2, #5
 80045fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004602:	4854      	ldr	r0, [pc, #336]	; (8004754 <_vfiprintf_r+0x220>)
 8004604:	f7fb fdf4 	bl	80001f0 <memchr>
 8004608:	9a04      	ldr	r2, [sp, #16]
 800460a:	b9d8      	cbnz	r0, 8004644 <_vfiprintf_r+0x110>
 800460c:	06d1      	lsls	r1, r2, #27
 800460e:	bf44      	itt	mi
 8004610:	2320      	movmi	r3, #32
 8004612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004616:	0713      	lsls	r3, r2, #28
 8004618:	bf44      	itt	mi
 800461a:	232b      	movmi	r3, #43	; 0x2b
 800461c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004620:	f89a 3000 	ldrb.w	r3, [sl]
 8004624:	2b2a      	cmp	r3, #42	; 0x2a
 8004626:	d015      	beq.n	8004654 <_vfiprintf_r+0x120>
 8004628:	9a07      	ldr	r2, [sp, #28]
 800462a:	4654      	mov	r4, sl
 800462c:	2000      	movs	r0, #0
 800462e:	f04f 0c0a 	mov.w	ip, #10
 8004632:	4621      	mov	r1, r4
 8004634:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004638:	3b30      	subs	r3, #48	; 0x30
 800463a:	2b09      	cmp	r3, #9
 800463c:	d94d      	bls.n	80046da <_vfiprintf_r+0x1a6>
 800463e:	b1b0      	cbz	r0, 800466e <_vfiprintf_r+0x13a>
 8004640:	9207      	str	r2, [sp, #28]
 8004642:	e014      	b.n	800466e <_vfiprintf_r+0x13a>
 8004644:	eba0 0308 	sub.w	r3, r0, r8
 8004648:	fa09 f303 	lsl.w	r3, r9, r3
 800464c:	4313      	orrs	r3, r2
 800464e:	9304      	str	r3, [sp, #16]
 8004650:	46a2      	mov	sl, r4
 8004652:	e7d2      	b.n	80045fa <_vfiprintf_r+0xc6>
 8004654:	9b03      	ldr	r3, [sp, #12]
 8004656:	1d19      	adds	r1, r3, #4
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	9103      	str	r1, [sp, #12]
 800465c:	2b00      	cmp	r3, #0
 800465e:	bfbb      	ittet	lt
 8004660:	425b      	neglt	r3, r3
 8004662:	f042 0202 	orrlt.w	r2, r2, #2
 8004666:	9307      	strge	r3, [sp, #28]
 8004668:	9307      	strlt	r3, [sp, #28]
 800466a:	bfb8      	it	lt
 800466c:	9204      	strlt	r2, [sp, #16]
 800466e:	7823      	ldrb	r3, [r4, #0]
 8004670:	2b2e      	cmp	r3, #46	; 0x2e
 8004672:	d10c      	bne.n	800468e <_vfiprintf_r+0x15a>
 8004674:	7863      	ldrb	r3, [r4, #1]
 8004676:	2b2a      	cmp	r3, #42	; 0x2a
 8004678:	d134      	bne.n	80046e4 <_vfiprintf_r+0x1b0>
 800467a:	9b03      	ldr	r3, [sp, #12]
 800467c:	1d1a      	adds	r2, r3, #4
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	9203      	str	r2, [sp, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	bfb8      	it	lt
 8004686:	f04f 33ff 	movlt.w	r3, #4294967295
 800468a:	3402      	adds	r4, #2
 800468c:	9305      	str	r3, [sp, #20]
 800468e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004764 <_vfiprintf_r+0x230>
 8004692:	7821      	ldrb	r1, [r4, #0]
 8004694:	2203      	movs	r2, #3
 8004696:	4650      	mov	r0, sl
 8004698:	f7fb fdaa 	bl	80001f0 <memchr>
 800469c:	b138      	cbz	r0, 80046ae <_vfiprintf_r+0x17a>
 800469e:	9b04      	ldr	r3, [sp, #16]
 80046a0:	eba0 000a 	sub.w	r0, r0, sl
 80046a4:	2240      	movs	r2, #64	; 0x40
 80046a6:	4082      	lsls	r2, r0
 80046a8:	4313      	orrs	r3, r2
 80046aa:	3401      	adds	r4, #1
 80046ac:	9304      	str	r3, [sp, #16]
 80046ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046b2:	4829      	ldr	r0, [pc, #164]	; (8004758 <_vfiprintf_r+0x224>)
 80046b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046b8:	2206      	movs	r2, #6
 80046ba:	f7fb fd99 	bl	80001f0 <memchr>
 80046be:	2800      	cmp	r0, #0
 80046c0:	d03f      	beq.n	8004742 <_vfiprintf_r+0x20e>
 80046c2:	4b26      	ldr	r3, [pc, #152]	; (800475c <_vfiprintf_r+0x228>)
 80046c4:	bb1b      	cbnz	r3, 800470e <_vfiprintf_r+0x1da>
 80046c6:	9b03      	ldr	r3, [sp, #12]
 80046c8:	3307      	adds	r3, #7
 80046ca:	f023 0307 	bic.w	r3, r3, #7
 80046ce:	3308      	adds	r3, #8
 80046d0:	9303      	str	r3, [sp, #12]
 80046d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046d4:	443b      	add	r3, r7
 80046d6:	9309      	str	r3, [sp, #36]	; 0x24
 80046d8:	e768      	b.n	80045ac <_vfiprintf_r+0x78>
 80046da:	fb0c 3202 	mla	r2, ip, r2, r3
 80046de:	460c      	mov	r4, r1
 80046e0:	2001      	movs	r0, #1
 80046e2:	e7a6      	b.n	8004632 <_vfiprintf_r+0xfe>
 80046e4:	2300      	movs	r3, #0
 80046e6:	3401      	adds	r4, #1
 80046e8:	9305      	str	r3, [sp, #20]
 80046ea:	4619      	mov	r1, r3
 80046ec:	f04f 0c0a 	mov.w	ip, #10
 80046f0:	4620      	mov	r0, r4
 80046f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046f6:	3a30      	subs	r2, #48	; 0x30
 80046f8:	2a09      	cmp	r2, #9
 80046fa:	d903      	bls.n	8004704 <_vfiprintf_r+0x1d0>
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0c6      	beq.n	800468e <_vfiprintf_r+0x15a>
 8004700:	9105      	str	r1, [sp, #20]
 8004702:	e7c4      	b.n	800468e <_vfiprintf_r+0x15a>
 8004704:	fb0c 2101 	mla	r1, ip, r1, r2
 8004708:	4604      	mov	r4, r0
 800470a:	2301      	movs	r3, #1
 800470c:	e7f0      	b.n	80046f0 <_vfiprintf_r+0x1bc>
 800470e:	ab03      	add	r3, sp, #12
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	462a      	mov	r2, r5
 8004714:	4b12      	ldr	r3, [pc, #72]	; (8004760 <_vfiprintf_r+0x22c>)
 8004716:	a904      	add	r1, sp, #16
 8004718:	4630      	mov	r0, r6
 800471a:	f3af 8000 	nop.w
 800471e:	4607      	mov	r7, r0
 8004720:	1c78      	adds	r0, r7, #1
 8004722:	d1d6      	bne.n	80046d2 <_vfiprintf_r+0x19e>
 8004724:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004726:	07d9      	lsls	r1, r3, #31
 8004728:	d405      	bmi.n	8004736 <_vfiprintf_r+0x202>
 800472a:	89ab      	ldrh	r3, [r5, #12]
 800472c:	059a      	lsls	r2, r3, #22
 800472e:	d402      	bmi.n	8004736 <_vfiprintf_r+0x202>
 8004730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004732:	f7ff fc14 	bl	8003f5e <__retarget_lock_release_recursive>
 8004736:	89ab      	ldrh	r3, [r5, #12]
 8004738:	065b      	lsls	r3, r3, #25
 800473a:	f53f af1d 	bmi.w	8004578 <_vfiprintf_r+0x44>
 800473e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004740:	e71c      	b.n	800457c <_vfiprintf_r+0x48>
 8004742:	ab03      	add	r3, sp, #12
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	462a      	mov	r2, r5
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <_vfiprintf_r+0x22c>)
 800474a:	a904      	add	r1, sp, #16
 800474c:	4630      	mov	r0, r6
 800474e:	f7ff fcdf 	bl	8004110 <_printf_i>
 8004752:	e7e4      	b.n	800471e <_vfiprintf_r+0x1ea>
 8004754:	08004cc8 	.word	0x08004cc8
 8004758:	08004cd2 	.word	0x08004cd2
 800475c:	00000000 	.word	0x00000000
 8004760:	08004511 	.word	0x08004511
 8004764:	08004cce 	.word	0x08004cce

08004768 <__swbuf_r>:
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	460e      	mov	r6, r1
 800476c:	4614      	mov	r4, r2
 800476e:	4605      	mov	r5, r0
 8004770:	b118      	cbz	r0, 800477a <__swbuf_r+0x12>
 8004772:	6a03      	ldr	r3, [r0, #32]
 8004774:	b90b      	cbnz	r3, 800477a <__swbuf_r+0x12>
 8004776:	f7ff fa81 	bl	8003c7c <__sinit>
 800477a:	69a3      	ldr	r3, [r4, #24]
 800477c:	60a3      	str	r3, [r4, #8]
 800477e:	89a3      	ldrh	r3, [r4, #12]
 8004780:	071a      	lsls	r2, r3, #28
 8004782:	d525      	bpl.n	80047d0 <__swbuf_r+0x68>
 8004784:	6923      	ldr	r3, [r4, #16]
 8004786:	b31b      	cbz	r3, 80047d0 <__swbuf_r+0x68>
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	6922      	ldr	r2, [r4, #16]
 800478c:	1a98      	subs	r0, r3, r2
 800478e:	6963      	ldr	r3, [r4, #20]
 8004790:	b2f6      	uxtb	r6, r6
 8004792:	4283      	cmp	r3, r0
 8004794:	4637      	mov	r7, r6
 8004796:	dc04      	bgt.n	80047a2 <__swbuf_r+0x3a>
 8004798:	4621      	mov	r1, r4
 800479a:	4628      	mov	r0, r5
 800479c:	f7ff fe60 	bl	8004460 <_fflush_r>
 80047a0:	b9e0      	cbnz	r0, 80047dc <__swbuf_r+0x74>
 80047a2:	68a3      	ldr	r3, [r4, #8]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	60a3      	str	r3, [r4, #8]
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	6022      	str	r2, [r4, #0]
 80047ae:	701e      	strb	r6, [r3, #0]
 80047b0:	6962      	ldr	r2, [r4, #20]
 80047b2:	1c43      	adds	r3, r0, #1
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d004      	beq.n	80047c2 <__swbuf_r+0x5a>
 80047b8:	89a3      	ldrh	r3, [r4, #12]
 80047ba:	07db      	lsls	r3, r3, #31
 80047bc:	d506      	bpl.n	80047cc <__swbuf_r+0x64>
 80047be:	2e0a      	cmp	r6, #10
 80047c0:	d104      	bne.n	80047cc <__swbuf_r+0x64>
 80047c2:	4621      	mov	r1, r4
 80047c4:	4628      	mov	r0, r5
 80047c6:	f7ff fe4b 	bl	8004460 <_fflush_r>
 80047ca:	b938      	cbnz	r0, 80047dc <__swbuf_r+0x74>
 80047cc:	4638      	mov	r0, r7
 80047ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047d0:	4621      	mov	r1, r4
 80047d2:	4628      	mov	r0, r5
 80047d4:	f000 f806 	bl	80047e4 <__swsetup_r>
 80047d8:	2800      	cmp	r0, #0
 80047da:	d0d5      	beq.n	8004788 <__swbuf_r+0x20>
 80047dc:	f04f 37ff 	mov.w	r7, #4294967295
 80047e0:	e7f4      	b.n	80047cc <__swbuf_r+0x64>
	...

080047e4 <__swsetup_r>:
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	4b2a      	ldr	r3, [pc, #168]	; (8004890 <__swsetup_r+0xac>)
 80047e8:	4605      	mov	r5, r0
 80047ea:	6818      	ldr	r0, [r3, #0]
 80047ec:	460c      	mov	r4, r1
 80047ee:	b118      	cbz	r0, 80047f8 <__swsetup_r+0x14>
 80047f0:	6a03      	ldr	r3, [r0, #32]
 80047f2:	b90b      	cbnz	r3, 80047f8 <__swsetup_r+0x14>
 80047f4:	f7ff fa42 	bl	8003c7c <__sinit>
 80047f8:	89a3      	ldrh	r3, [r4, #12]
 80047fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047fe:	0718      	lsls	r0, r3, #28
 8004800:	d422      	bmi.n	8004848 <__swsetup_r+0x64>
 8004802:	06d9      	lsls	r1, r3, #27
 8004804:	d407      	bmi.n	8004816 <__swsetup_r+0x32>
 8004806:	2309      	movs	r3, #9
 8004808:	602b      	str	r3, [r5, #0]
 800480a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800480e:	81a3      	strh	r3, [r4, #12]
 8004810:	f04f 30ff 	mov.w	r0, #4294967295
 8004814:	e034      	b.n	8004880 <__swsetup_r+0x9c>
 8004816:	0758      	lsls	r0, r3, #29
 8004818:	d512      	bpl.n	8004840 <__swsetup_r+0x5c>
 800481a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800481c:	b141      	cbz	r1, 8004830 <__swsetup_r+0x4c>
 800481e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004822:	4299      	cmp	r1, r3
 8004824:	d002      	beq.n	800482c <__swsetup_r+0x48>
 8004826:	4628      	mov	r0, r5
 8004828:	f7ff fbb8 	bl	8003f9c <_free_r>
 800482c:	2300      	movs	r3, #0
 800482e:	6363      	str	r3, [r4, #52]	; 0x34
 8004830:	89a3      	ldrh	r3, [r4, #12]
 8004832:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004836:	81a3      	strh	r3, [r4, #12]
 8004838:	2300      	movs	r3, #0
 800483a:	6063      	str	r3, [r4, #4]
 800483c:	6923      	ldr	r3, [r4, #16]
 800483e:	6023      	str	r3, [r4, #0]
 8004840:	89a3      	ldrh	r3, [r4, #12]
 8004842:	f043 0308 	orr.w	r3, r3, #8
 8004846:	81a3      	strh	r3, [r4, #12]
 8004848:	6923      	ldr	r3, [r4, #16]
 800484a:	b94b      	cbnz	r3, 8004860 <__swsetup_r+0x7c>
 800484c:	89a3      	ldrh	r3, [r4, #12]
 800484e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004856:	d003      	beq.n	8004860 <__swsetup_r+0x7c>
 8004858:	4621      	mov	r1, r4
 800485a:	4628      	mov	r0, r5
 800485c:	f000 f884 	bl	8004968 <__smakebuf_r>
 8004860:	89a0      	ldrh	r0, [r4, #12]
 8004862:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004866:	f010 0301 	ands.w	r3, r0, #1
 800486a:	d00a      	beq.n	8004882 <__swsetup_r+0x9e>
 800486c:	2300      	movs	r3, #0
 800486e:	60a3      	str	r3, [r4, #8]
 8004870:	6963      	ldr	r3, [r4, #20]
 8004872:	425b      	negs	r3, r3
 8004874:	61a3      	str	r3, [r4, #24]
 8004876:	6923      	ldr	r3, [r4, #16]
 8004878:	b943      	cbnz	r3, 800488c <__swsetup_r+0xa8>
 800487a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800487e:	d1c4      	bne.n	800480a <__swsetup_r+0x26>
 8004880:	bd38      	pop	{r3, r4, r5, pc}
 8004882:	0781      	lsls	r1, r0, #30
 8004884:	bf58      	it	pl
 8004886:	6963      	ldrpl	r3, [r4, #20]
 8004888:	60a3      	str	r3, [r4, #8]
 800488a:	e7f4      	b.n	8004876 <__swsetup_r+0x92>
 800488c:	2000      	movs	r0, #0
 800488e:	e7f7      	b.n	8004880 <__swsetup_r+0x9c>
 8004890:	20000068 	.word	0x20000068

08004894 <_raise_r>:
 8004894:	291f      	cmp	r1, #31
 8004896:	b538      	push	{r3, r4, r5, lr}
 8004898:	4604      	mov	r4, r0
 800489a:	460d      	mov	r5, r1
 800489c:	d904      	bls.n	80048a8 <_raise_r+0x14>
 800489e:	2316      	movs	r3, #22
 80048a0:	6003      	str	r3, [r0, #0]
 80048a2:	f04f 30ff 	mov.w	r0, #4294967295
 80048a6:	bd38      	pop	{r3, r4, r5, pc}
 80048a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80048aa:	b112      	cbz	r2, 80048b2 <_raise_r+0x1e>
 80048ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80048b0:	b94b      	cbnz	r3, 80048c6 <_raise_r+0x32>
 80048b2:	4620      	mov	r0, r4
 80048b4:	f000 f830 	bl	8004918 <_getpid_r>
 80048b8:	462a      	mov	r2, r5
 80048ba:	4601      	mov	r1, r0
 80048bc:	4620      	mov	r0, r4
 80048be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048c2:	f000 b817 	b.w	80048f4 <_kill_r>
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d00a      	beq.n	80048e0 <_raise_r+0x4c>
 80048ca:	1c59      	adds	r1, r3, #1
 80048cc:	d103      	bne.n	80048d6 <_raise_r+0x42>
 80048ce:	2316      	movs	r3, #22
 80048d0:	6003      	str	r3, [r0, #0]
 80048d2:	2001      	movs	r0, #1
 80048d4:	e7e7      	b.n	80048a6 <_raise_r+0x12>
 80048d6:	2400      	movs	r4, #0
 80048d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80048dc:	4628      	mov	r0, r5
 80048de:	4798      	blx	r3
 80048e0:	2000      	movs	r0, #0
 80048e2:	e7e0      	b.n	80048a6 <_raise_r+0x12>

080048e4 <raise>:
 80048e4:	4b02      	ldr	r3, [pc, #8]	; (80048f0 <raise+0xc>)
 80048e6:	4601      	mov	r1, r0
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	f7ff bfd3 	b.w	8004894 <_raise_r>
 80048ee:	bf00      	nop
 80048f0:	20000068 	.word	0x20000068

080048f4 <_kill_r>:
 80048f4:	b538      	push	{r3, r4, r5, lr}
 80048f6:	4d07      	ldr	r5, [pc, #28]	; (8004914 <_kill_r+0x20>)
 80048f8:	2300      	movs	r3, #0
 80048fa:	4604      	mov	r4, r0
 80048fc:	4608      	mov	r0, r1
 80048fe:	4611      	mov	r1, r2
 8004900:	602b      	str	r3, [r5, #0]
 8004902:	f7fc fbe3 	bl	80010cc <_kill>
 8004906:	1c43      	adds	r3, r0, #1
 8004908:	d102      	bne.n	8004910 <_kill_r+0x1c>
 800490a:	682b      	ldr	r3, [r5, #0]
 800490c:	b103      	cbz	r3, 8004910 <_kill_r+0x1c>
 800490e:	6023      	str	r3, [r4, #0]
 8004910:	bd38      	pop	{r3, r4, r5, pc}
 8004912:	bf00      	nop
 8004914:	2000026c 	.word	0x2000026c

08004918 <_getpid_r>:
 8004918:	f7fc bbd0 	b.w	80010bc <_getpid>

0800491c <__swhatbuf_r>:
 800491c:	b570      	push	{r4, r5, r6, lr}
 800491e:	460c      	mov	r4, r1
 8004920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004924:	2900      	cmp	r1, #0
 8004926:	b096      	sub	sp, #88	; 0x58
 8004928:	4615      	mov	r5, r2
 800492a:	461e      	mov	r6, r3
 800492c:	da0d      	bge.n	800494a <__swhatbuf_r+0x2e>
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004934:	f04f 0100 	mov.w	r1, #0
 8004938:	bf0c      	ite	eq
 800493a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800493e:	2340      	movne	r3, #64	; 0x40
 8004940:	2000      	movs	r0, #0
 8004942:	6031      	str	r1, [r6, #0]
 8004944:	602b      	str	r3, [r5, #0]
 8004946:	b016      	add	sp, #88	; 0x58
 8004948:	bd70      	pop	{r4, r5, r6, pc}
 800494a:	466a      	mov	r2, sp
 800494c:	f000 f848 	bl	80049e0 <_fstat_r>
 8004950:	2800      	cmp	r0, #0
 8004952:	dbec      	blt.n	800492e <__swhatbuf_r+0x12>
 8004954:	9901      	ldr	r1, [sp, #4]
 8004956:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800495a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800495e:	4259      	negs	r1, r3
 8004960:	4159      	adcs	r1, r3
 8004962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004966:	e7eb      	b.n	8004940 <__swhatbuf_r+0x24>

08004968 <__smakebuf_r>:
 8004968:	898b      	ldrh	r3, [r1, #12]
 800496a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800496c:	079d      	lsls	r5, r3, #30
 800496e:	4606      	mov	r6, r0
 8004970:	460c      	mov	r4, r1
 8004972:	d507      	bpl.n	8004984 <__smakebuf_r+0x1c>
 8004974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	6123      	str	r3, [r4, #16]
 800497c:	2301      	movs	r3, #1
 800497e:	6163      	str	r3, [r4, #20]
 8004980:	b002      	add	sp, #8
 8004982:	bd70      	pop	{r4, r5, r6, pc}
 8004984:	ab01      	add	r3, sp, #4
 8004986:	466a      	mov	r2, sp
 8004988:	f7ff ffc8 	bl	800491c <__swhatbuf_r>
 800498c:	9900      	ldr	r1, [sp, #0]
 800498e:	4605      	mov	r5, r0
 8004990:	4630      	mov	r0, r6
 8004992:	f7fe ffe1 	bl	8003958 <_malloc_r>
 8004996:	b948      	cbnz	r0, 80049ac <__smakebuf_r+0x44>
 8004998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800499c:	059a      	lsls	r2, r3, #22
 800499e:	d4ef      	bmi.n	8004980 <__smakebuf_r+0x18>
 80049a0:	f023 0303 	bic.w	r3, r3, #3
 80049a4:	f043 0302 	orr.w	r3, r3, #2
 80049a8:	81a3      	strh	r3, [r4, #12]
 80049aa:	e7e3      	b.n	8004974 <__smakebuf_r+0xc>
 80049ac:	89a3      	ldrh	r3, [r4, #12]
 80049ae:	6020      	str	r0, [r4, #0]
 80049b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b4:	81a3      	strh	r3, [r4, #12]
 80049b6:	9b00      	ldr	r3, [sp, #0]
 80049b8:	6163      	str	r3, [r4, #20]
 80049ba:	9b01      	ldr	r3, [sp, #4]
 80049bc:	6120      	str	r0, [r4, #16]
 80049be:	b15b      	cbz	r3, 80049d8 <__smakebuf_r+0x70>
 80049c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049c4:	4630      	mov	r0, r6
 80049c6:	f000 f81d 	bl	8004a04 <_isatty_r>
 80049ca:	b128      	cbz	r0, 80049d8 <__smakebuf_r+0x70>
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	f023 0303 	bic.w	r3, r3, #3
 80049d2:	f043 0301 	orr.w	r3, r3, #1
 80049d6:	81a3      	strh	r3, [r4, #12]
 80049d8:	89a3      	ldrh	r3, [r4, #12]
 80049da:	431d      	orrs	r5, r3
 80049dc:	81a5      	strh	r5, [r4, #12]
 80049de:	e7cf      	b.n	8004980 <__smakebuf_r+0x18>

080049e0 <_fstat_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	4d07      	ldr	r5, [pc, #28]	; (8004a00 <_fstat_r+0x20>)
 80049e4:	2300      	movs	r3, #0
 80049e6:	4604      	mov	r4, r0
 80049e8:	4608      	mov	r0, r1
 80049ea:	4611      	mov	r1, r2
 80049ec:	602b      	str	r3, [r5, #0]
 80049ee:	f7fc fbcc 	bl	800118a <_fstat>
 80049f2:	1c43      	adds	r3, r0, #1
 80049f4:	d102      	bne.n	80049fc <_fstat_r+0x1c>
 80049f6:	682b      	ldr	r3, [r5, #0]
 80049f8:	b103      	cbz	r3, 80049fc <_fstat_r+0x1c>
 80049fa:	6023      	str	r3, [r4, #0]
 80049fc:	bd38      	pop	{r3, r4, r5, pc}
 80049fe:	bf00      	nop
 8004a00:	2000026c 	.word	0x2000026c

08004a04 <_isatty_r>:
 8004a04:	b538      	push	{r3, r4, r5, lr}
 8004a06:	4d06      	ldr	r5, [pc, #24]	; (8004a20 <_isatty_r+0x1c>)
 8004a08:	2300      	movs	r3, #0
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	602b      	str	r3, [r5, #0]
 8004a10:	f7fc fbcb 	bl	80011aa <_isatty>
 8004a14:	1c43      	adds	r3, r0, #1
 8004a16:	d102      	bne.n	8004a1e <_isatty_r+0x1a>
 8004a18:	682b      	ldr	r3, [r5, #0]
 8004a1a:	b103      	cbz	r3, 8004a1e <_isatty_r+0x1a>
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	bd38      	pop	{r3, r4, r5, pc}
 8004a20:	2000026c 	.word	0x2000026c

08004a24 <_init>:
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	bf00      	nop
 8004a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2a:	bc08      	pop	{r3}
 8004a2c:	469e      	mov	lr, r3
 8004a2e:	4770      	bx	lr

08004a30 <_fini>:
 8004a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a32:	bf00      	nop
 8004a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a36:	bc08      	pop	{r3}
 8004a38:	469e      	mov	lr, r3
 8004a3a:	4770      	bx	lr
