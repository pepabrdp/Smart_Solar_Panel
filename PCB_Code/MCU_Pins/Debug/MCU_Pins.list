
MCU_Pins.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  080070f0  080070f0  000170f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007330  08007330  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007330  08007330  00017330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007338  08007338  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007338  08007338  00017338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800733c  0800733c  0001733c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007340  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000088  080073c8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  080073c8  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000106d0  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002137  00000000  00000000  000307cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001078  00000000  00000000  00032908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d0c  00000000  00000000  00033980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d29  00000000  00000000  0003468c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000135c2  00000000  00000000  0004d3b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ef94  00000000  00000000  00060977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005600  00000000  00000000  000ff90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00104f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080070d8 	.word	0x080070d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	080070d8 	.word	0x080070d8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b970 	b.w	8000f00 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	460f      	mov	r7, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	d965      	bls.n	8000d1a <__udivmoddi4+0xe2>
 8000c4e:	fab2 f382 	clz	r3, r2
 8000c52:	b143      	cbz	r3, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c58:	f1c3 0220 	rsb	r2, r3, #32
 8000c5c:	409f      	lsls	r7, r3
 8000c5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c62:	4317      	orrs	r7, r2
 8000c64:	409c      	lsls	r4, r3
 8000c66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c6a:	fa1f f58c 	uxth.w	r5, ip
 8000c6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c72:	0c22      	lsrs	r2, r4, #16
 8000c74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c7c:	fb01 f005 	mul.w	r0, r1, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c8c:	f080 811c 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000c90:	4290      	cmp	r0, r2
 8000c92:	f240 8119 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000c96:	3902      	subs	r1, #2
 8000c98:	4462      	add	r2, ip
 8000c9a:	1a12      	subs	r2, r2, r0
 8000c9c:	b2a4      	uxth	r4, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	fb00 f505 	mul.w	r5, r0, r5
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	d90a      	bls.n	8000cc8 <__udivmoddi4+0x90>
 8000cb2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cba:	f080 8107 	bcs.w	8000ecc <__udivmoddi4+0x294>
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	f240 8104 	bls.w	8000ecc <__udivmoddi4+0x294>
 8000cc4:	4464      	add	r4, ip
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11e      	cbz	r6, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40dc      	lsrs	r4, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0xbc>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80ed 	beq.w	8000ec2 <__udivmoddi4+0x28a>
 8000ce8:	2100      	movs	r1, #0
 8000cea:	e9c6 0500 	strd	r0, r5, [r6]
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf4:	fab3 f183 	clz	r1, r3
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d149      	bne.n	8000d90 <__udivmoddi4+0x158>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	d302      	bcc.n	8000d06 <__udivmoddi4+0xce>
 8000d00:	4282      	cmp	r2, r0
 8000d02:	f200 80f8 	bhi.w	8000ef6 <__udivmoddi4+0x2be>
 8000d06:	1a84      	subs	r4, r0, r2
 8000d08:	eb65 0203 	sbc.w	r2, r5, r3
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	4617      	mov	r7, r2
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d0e2      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	e9c6 4700 	strd	r4, r7, [r6]
 8000d18:	e7df      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d1a:	b902      	cbnz	r2, 8000d1e <__udivmoddi4+0xe6>
 8000d1c:	deff      	udf	#255	; 0xff
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8090 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d28:	1a8a      	subs	r2, r1, r2
 8000d2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2e:	fa1f fe8c 	uxth.w	lr, ip
 8000d32:	2101      	movs	r1, #1
 8000d34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d38:	fb07 2015 	mls	r0, r7, r5, r2
 8000d3c:	0c22      	lsrs	r2, r4, #16
 8000d3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d42:	fb0e f005 	mul.w	r0, lr, r5
 8000d46:	4290      	cmp	r0, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d4e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4290      	cmp	r0, r2
 8000d56:	f200 80cb 	bhi.w	8000ef0 <__udivmoddi4+0x2b8>
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	1a12      	subs	r2, r2, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d64:	fb07 2210 	mls	r2, r7, r0, r2
 8000d68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x14e>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x14c>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f200 80bb 	bhi.w	8000efa <__udivmoddi4+0x2c2>
 8000d84:	4610      	mov	r0, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d8e:	e79f      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d90:	f1c1 0720 	rsb	r7, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000da2:	fa20 f307 	lsr.w	r3, r0, r7
 8000da6:	40fd      	lsrs	r5, r7
 8000da8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dac:	4323      	orrs	r3, r4
 8000dae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dba:	0c1c      	lsrs	r4, r3, #16
 8000dbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dc0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dc4:	42a5      	cmp	r5, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	fa00 f001 	lsl.w	r0, r0, r1
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd8:	f080 8088 	bcs.w	8000eec <__udivmoddi4+0x2b4>
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	f240 8085 	bls.w	8000eec <__udivmoddi4+0x2b4>
 8000de2:	f1a8 0802 	sub.w	r8, r8, #2
 8000de6:	4464      	add	r4, ip
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	b29d      	uxth	r5, r3
 8000dec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df0:	fb09 4413 	mls	r4, r9, r3, r4
 8000df4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000df8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e08:	d26c      	bcs.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	d96a      	bls.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e16:	fba3 9502 	umull	r9, r5, r3, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	42ac      	cmp	r4, r5
 8000e20:	46c8      	mov	r8, r9
 8000e22:	46ae      	mov	lr, r5
 8000e24:	d356      	bcc.n	8000ed4 <__udivmoddi4+0x29c>
 8000e26:	d053      	beq.n	8000ed0 <__udivmoddi4+0x298>
 8000e28:	b156      	cbz	r6, 8000e40 <__udivmoddi4+0x208>
 8000e2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e32:	fa04 f707 	lsl.w	r7, r4, r7
 8000e36:	40ca      	lsrs	r2, r1
 8000e38:	40cc      	lsrs	r4, r1
 8000e3a:	4317      	orrs	r7, r2
 8000e3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e48:	f1c3 0120 	rsb	r1, r3, #32
 8000e4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e50:	fa20 f201 	lsr.w	r2, r0, r1
 8000e54:	fa25 f101 	lsr.w	r1, r5, r1
 8000e58:	409d      	lsls	r5, r3
 8000e5a:	432a      	orrs	r2, r5
 8000e5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1510 	mls	r5, r7, r0, r1
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e72:	fb00 f50e 	mul.w	r5, r0, lr
 8000e76:	428d      	cmp	r5, r1
 8000e78:	fa04 f403 	lsl.w	r4, r4, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x258>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e86:	d22f      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e88:	428d      	cmp	r5, r1
 8000e8a:	d92d      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1b49      	subs	r1, r1, r5
 8000e92:	b292      	uxth	r2, r2
 8000e94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e98:	fb07 1115 	mls	r1, r7, r5, r1
 8000e9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea4:	4291      	cmp	r1, r2
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x282>
 8000ea8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eac:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb0:	d216      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb2:	4291      	cmp	r1, r2
 8000eb4:	d914      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb6:	3d02      	subs	r5, #2
 8000eb8:	4462      	add	r2, ip
 8000eba:	1a52      	subs	r2, r2, r1
 8000ebc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ec0:	e738      	b.n	8000d34 <__udivmoddi4+0xfc>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	e708      	b.n	8000cda <__udivmoddi4+0xa2>
 8000ec8:	4639      	mov	r1, r7
 8000eca:	e6e6      	b.n	8000c9a <__udivmoddi4+0x62>
 8000ecc:	4610      	mov	r0, r2
 8000ece:	e6fb      	b.n	8000cc8 <__udivmoddi4+0x90>
 8000ed0:	4548      	cmp	r0, r9
 8000ed2:	d2a9      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000edc:	3b01      	subs	r3, #1
 8000ede:	e7a3      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ee0:	4645      	mov	r5, r8
 8000ee2:	e7ea      	b.n	8000eba <__udivmoddi4+0x282>
 8000ee4:	462b      	mov	r3, r5
 8000ee6:	e794      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee8:	4640      	mov	r0, r8
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x258>
 8000eec:	46d0      	mov	r8, sl
 8000eee:	e77b      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000ef0:	3d02      	subs	r5, #2
 8000ef2:	4462      	add	r2, ip
 8000ef4:	e732      	b.n	8000d5c <__udivmoddi4+0x124>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e70a      	b.n	8000d10 <__udivmoddi4+0xd8>
 8000efa:	4464      	add	r4, ip
 8000efc:	3802      	subs	r0, #2
 8000efe:	e742      	b.n	8000d86 <__udivmoddi4+0x14e>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <main>:
int stepsPerRev = 200;
float stepAngle = 1.8;
///////////////////////////////////

int main(void)
{
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b093      	sub	sp, #76	; 0x4c
 8000f08:	af02      	add	r7, sp, #8
	HAL_Init();
 8000f0a:	f001 f9eb 	bl	80022e4 <HAL_Init>

	SystemClock_Config();
 8000f0e:	f000 fd01 	bl	8001914 <SystemClock_Config>

	MX_GPIO_Init();
 8000f12:	f000 fe8f 	bl	8001c34 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000f16:	f000 fd65 	bl	80019e4 <MX_ADC1_Init>
	MX_I2C1_Init();
 8000f1a:	f000 fdb5 	bl	8001a88 <MX_I2C1_Init>
	MX_I2C3_Init();
 8000f1e:	f000 fde1 	bl	8001ae4 <MX_I2C3_Init>
	MX_TIM1_Init();
 8000f22:	f000 fe0d 	bl	8001b40 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8000f26:	f000 fe5b 	bl	8001be0 <MX_USART1_UART_Init>


	///////////////////////////////////////////////////////////////
	//GPS
	float lat = -1;
 8000f2a:	4b49      	ldr	r3, [pc, #292]	; (8001050 <main+0x14c>)
 8000f2c:	613b      	str	r3, [r7, #16]
	float longi = -1;
 8000f2e:	4b48      	ldr	r3, [pc, #288]	; (8001050 <main+0x14c>)
 8000f30:	60fb      	str	r3, [r7, #12]
	float time = -1;
 8000f32:	4b47      	ldr	r3, [pc, #284]	; (8001050 <main+0x14c>)
 8000f34:	60bb      	str	r3, [r7, #8]
	float date = -1;
 8000f36:	4b46      	ldr	r3, [pc, #280]	; (8001050 <main+0x14c>)
 8000f38:	607b      	str	r3, [r7, #4]
	char longiDir = 'x';
 8000f3a:	2378      	movs	r3, #120	; 0x78
 8000f3c:	70fb      	strb	r3, [r7, #3]
	char latDir = 'x';
 8000f3e:	2378      	movs	r3, #120	; 0x78
 8000f40:	70bb      	strb	r3, [r7, #2]

	for (int i = 0; i < 50; i++) {
 8000f42:	2300      	movs	r3, #0
 8000f44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f46:	e010      	b.n	8000f6a <main+0x66>
	 getGpsData(&lat, &longi, &time, &date, &longiDir, &latDir);
 8000f48:	1d3c      	adds	r4, r7, #4
 8000f4a:	f107 0208 	add.w	r2, r7, #8
 8000f4e:	f107 010c 	add.w	r1, r7, #12
 8000f52:	f107 0010 	add.w	r0, r7, #16
 8000f56:	1cbb      	adds	r3, r7, #2
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	1cfb      	adds	r3, r7, #3
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	4623      	mov	r3, r4
 8000f60:	f000 f9bc 	bl	80012dc <getGpsData>
	for (int i = 0; i < 50; i++) {
 8000f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f66:	3301      	adds	r3, #1
 8000f68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f6c:	2b31      	cmp	r3, #49	; 0x31
 8000f6e:	ddeb      	ble.n	8000f48 <main+0x44>
	}

	//////////////////////////////////////////////////////////////
	//LIGHT SENSOR
	setupLightSensor(lightAddressGND);
 8000f70:	4b38      	ldr	r3, [pc, #224]	; (8001054 <main+0x150>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 f8fd 	bl	8001174 <setupLightSensor>
	float lightDataGND = 0;
 8000f7a:	f04f 0300 	mov.w	r3, #0
 8000f7e:	637b      	str	r3, [r7, #52]	; 0x34
	float lightDataVDD = 0;
 8000f80:	f04f 0300 	mov.w	r3, #0
 8000f84:	633b      	str	r3, [r7, #48]	; 0x30
	float lightDataSDA = 0;
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	float lightDataSCL = 0;
 8000f8c:	f04f 0300 	mov.w	r3, #0
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28

	//////////////////////////////////////////////////////////////
	//MAGNETOMETER
	float xCal, yCal, zCal;
	xCal = 0;
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
	yCal = 0;
 8000f98:	f04f 0300 	mov.w	r3, #0
 8000f9c:	623b      	str	r3, [r7, #32]
	zCal = 0;
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
//	setupMag();
//	hardIronCal(&xCal, &yCal, &zCal);

	//Direction Angle
	float direction = 0;
 8000fa4:	f04f 0300 	mov.w	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
	//////////////////////////////////////////////////////////////
	//SOLAR PANEL VOLTAGE
	float solarPanelVoltage = 0;
 8000faa:	f04f 0300 	mov.w	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

	//////////////////////////////////////////////////////////////
	//MOTOR CONTROL
	HAL_TIM_Base_Start(&htim1);
 8000fb0:	4829      	ldr	r0, [pc, #164]	; (8001058 <main+0x154>)
 8000fb2:	f003 fb4b 	bl	800464c <HAL_TIM_Base_Start>
//	setCounterClockwiseRod(); //up
	setClockwiseRod(); //down
 8000fb6:	f000 f897 	bl	80010e8 <setClockwiseRod>
	float motorCounter = 0;
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	63bb      	str	r3, [r7, #56]	; 0x38
	///////////////////////////////////////////////////////////////

	while (1)
	{
		if ((HAL_GetTick() - motorCounter) > 1000) {
 8000fc0:	f001 f9f6 	bl	80023b0 <HAL_GetTick>
 8000fc4:	ee07 0a90 	vmov	s15, r0
 8000fc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fcc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800105c <main+0x158>
 8000fd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe0:	dd2a      	ble.n	8001038 <main+0x134>
			HAL_GPIO_WritePin(SMART_PANEL_LED_PORT, SMART_PANEL_LED_PIN, GPIO_PIN_SET);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2180      	movs	r1, #128	; 0x80
 8000fe6:	481e      	ldr	r0, [pc, #120]	; (8001060 <main+0x15c>)
 8000fe8:	f001 feca 	bl	8002d80 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEBUG_LED_PORT, DEBUG_LED_PIN, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff2:	481b      	ldr	r0, [pc, #108]	; (8001060 <main+0x15c>)
 8000ff4:	f001 fec4 	bl	8002d80 <HAL_GPIO_WritePin>


			lightDataGND = getLightData(lightAddressGND);
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <main+0x150>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 f8e3 	bl	80011c8 <getLightData>
 8001002:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34

			setupMotorRod();
 8001006:	f000 f895 	bl	8001134 <setupMotorRod>
			if (lightDataGND  > 80) {
 800100a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800100e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001064 <main+0x160>
 8001012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101a:	dd03      	ble.n	8001024 <main+0x120>
				rotateMotorRod(91);
 800101c:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001068 <main+0x164>
 8001020:	f000 f824 	bl	800106c <rotateMotorRod>

			}

			turnOffMotorRod();
 8001024:	f000 f89a 	bl	800115c <turnOffMotorRod>



			motorCounter = HAL_GetTick();
 8001028:	f001 f9c2 	bl	80023b0 <HAL_GetTick>
 800102c:	ee07 0a90 	vmov	s15, r0
 8001030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001034:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		}

		HAL_GPIO_WritePin(SMART_PANEL_LED_PORT, SMART_PANEL_LED_PIN, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2180      	movs	r1, #128	; 0x80
 800103c:	4808      	ldr	r0, [pc, #32]	; (8001060 <main+0x15c>)
 800103e:	f001 fe9f 	bl	8002d80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DEBUG_LED_PORT, DEBUG_LED_PIN, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <main+0x15c>)
 800104a:	f001 fe99 	bl	8002d80 <HAL_GPIO_WritePin>
		if ((HAL_GetTick() - motorCounter) > 1000) {
 800104e:	e7b7      	b.n	8000fc0 <main+0xbc>
 8001050:	bf800000 	.word	0xbf800000
 8001054:	20000002 	.word	0x20000002
 8001058:	20000194 	.word	0x20000194
 800105c:	447a0000 	.word	0x447a0000
 8001060:	40020800 	.word	0x40020800
 8001064:	42a00000 	.word	0x42a00000
 8001068:	42b60000 	.word	0x42b60000

0800106c <rotateMotorRod>:
	}
}

///////////////////////////////////////////////////////////////
//MOTOR CONTROL
void rotateMotorRod(float angle) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	ed87 0a01 	vstr	s0, [r7, #4]

	int steps = (angle / stepAngle);
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <rotateMotorRod+0x70>)
 8001078:	ed93 7a00 	vldr	s14, [r3]
 800107c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001084:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001088:	ee17 3a90 	vmov	r3, s15
 800108c:	60bb      	str	r3, [r7, #8]

	for(int x=0; x < steps; x++)
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	e01a      	b.n	80010ca <rotateMotorRod+0x5e>
	{
		HAL_GPIO_WritePin(ROD_STEP_PORT, ROD_STEP_PIN, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109a:	4811      	ldr	r0, [pc, #68]	; (80010e0 <rotateMotorRod+0x74>)
 800109c:	f001 fe70 	bl	8002d80 <HAL_GPIO_WritePin>
		microDelay(stepDelay);
 80010a0:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <rotateMotorRod+0x78>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f82a 	bl	8001100 <microDelay>
		HAL_GPIO_WritePin(ROD_STEP_PORT, ROD_STEP_PIN, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b2:	480b      	ldr	r0, [pc, #44]	; (80010e0 <rotateMotorRod+0x74>)
 80010b4:	f001 fe64 	bl	8002d80 <HAL_GPIO_WritePin>
		microDelay(stepDelay);
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <rotateMotorRod+0x78>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f81e 	bl	8001100 <microDelay>
	for(int x=0; x < steps; x++)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3301      	adds	r3, #1
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	dbe0      	blt.n	8001094 <rotateMotorRod+0x28>
	}
}
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000008 	.word	0x20000008
 80010e0:	40020800 	.word	0x40020800
 80010e4:	20000004 	.word	0x20000004

080010e8 <setClockwiseRod>:
		HAL_GPIO_WritePin(SUSAN_STEP_PORT, SUSAN_STEP_PIN, GPIO_PIN_RESET);
		microDelay(stepDelay);
	}
}

void setClockwiseRod() {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ROD_DIR_PORT, ROD_DIR_PIN, GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f2:	4802      	ldr	r0, [pc, #8]	; (80010fc <setClockwiseRod+0x14>)
 80010f4:	f001 fe44 	bl	8002d80 <HAL_GPIO_WritePin>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40020800 	.word	0x40020800

08001100 <microDelay>:
void setCounterClockwiseSusan() {
	HAL_GPIO_WritePin(SUSAN_DIR_PORT, SUSAN_DIR_PIN, GPIO_PIN_RESET);
}

void microDelay (uint16_t delay)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <microDelay+0x30>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8001112:	bf00      	nop
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <microDelay+0x30>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	429a      	cmp	r2, r3
 800111e:	d3f9      	bcc.n	8001114 <microDelay+0x14>
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000194 	.word	0x20000194

08001134 <setupMotorRod>:

void setupMotorRod() {
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ROD_SLEEP_PORT, ROD_SLEEP_PIN, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	2104      	movs	r1, #4
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <setupMotorRod+0x20>)
 800113e:	f001 fe1f 	bl	8002d80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROD_ENABLE_PORT, ROD_ENABLE_PIN, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001148:	4803      	ldr	r0, [pc, #12]	; (8001158 <setupMotorRod+0x24>)
 800114a:	f001 fe19 	bl	8002d80 <HAL_GPIO_WritePin>
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40020c00 	.word	0x40020c00
 8001158:	40020800 	.word	0x40020800

0800115c <turnOffMotorRod>:
void setupMotorSusan() {
	HAL_GPIO_WritePin(SUSAN_SLEEP_PORT, SUSAN_SLEEP_PIN, GPIO_PIN_SET);
	HAL_GPIO_WritePin(SUSAN_ENABLE_PORT, SUSAN_ENABLE_PIN, GPIO_PIN_RESET);
}

void turnOffMotorRod() {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ROD_SLEEP_PORT, ROD_SLEEP_PIN, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	2104      	movs	r1, #4
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <turnOffMotorRod+0x14>)
 8001166:	f001 fe0b 	bl	8002d80 <HAL_GPIO_WritePin>
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40020c00 	.word	0x40020c00

08001174 <setupLightSensor>:
void turnOffMotorSusan() {
	HAL_GPIO_WritePin(SUSAN_SLEEP_PORT, SUSAN_SLEEP_PIN, GPIO_PIN_RESET);
}
///////////////////////////////////////////////////////////////////

void setupLightSensor(uint8_t lightAddress) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af02      	add	r7, sp, #8
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	uint8_t data_send[3] = {0};
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <setupLightSensor+0x4c>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	81bb      	strh	r3, [r7, #12]
 8001184:	2300      	movs	r3, #0
 8001186:	73bb      	strb	r3, [r7, #14]
	data_send[0] = 0x0A;
 8001188:	230a      	movs	r3, #10
 800118a:	733b      	strb	r3, [r7, #12]
	data_send[1] = 0x32;
 800118c:	2332      	movs	r3, #50	; 0x32
 800118e:	737b      	strb	r3, [r7, #13]
	data_send[2] = 0xF8;
 8001190:	23f8      	movs	r3, #248	; 0xf8
 8001192:	73bb      	strb	r3, [r7, #14]
	while (HAL_I2C_Master_Transmit(&hi2c3, (lightAddress << 1), data_send, 3, 20) != HAL_OK){}
 8001194:	bf00      	nop
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	b29b      	uxth	r3, r3
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	b299      	uxth	r1, r3
 800119e:	f107 020c 	add.w	r2, r7, #12
 80011a2:	2314      	movs	r3, #20
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2303      	movs	r3, #3
 80011a8:	4806      	ldr	r0, [pc, #24]	; (80011c4 <setupLightSensor+0x50>)
 80011aa:	f001 ff47 	bl	800303c <HAL_I2C_Master_Transmit>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1f0      	bne.n	8001196 <setupLightSensor+0x22>
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	080070f0 	.word	0x080070f0
 80011c4:	20000140 	.word	0x20000140

080011c8 <getLightData>:

float getLightData(uint8_t lightAddress) {
 80011c8:	b5b0      	push	{r4, r5, r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	uint8_t data_send[4] = {0};
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
	uint8_t data_in [2] = {0};
 80011d6:	2300      	movs	r3, #0
 80011d8:	81bb      	strh	r3, [r7, #12]
	uint16_t exp;
	uint16_t man;
	uint16_t alldata;
	float ans = 0;
 80011da:	f04f 0300 	mov.w	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]

	data_send[0] = 0x00;
 80011e0:	2300      	movs	r3, #0
 80011e2:	743b      	strb	r3, [r7, #16]
	while (HAL_I2C_GetState(&hi2c3) != HAL_I2C_STATE_READY){}
 80011e4:	bf00      	nop
 80011e6:	483c      	ldr	r0, [pc, #240]	; (80012d8 <getLightData+0x110>)
 80011e8:	f002 fa4c 	bl	8003684 <HAL_I2C_GetState>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b20      	cmp	r3, #32
 80011f0:	d1f9      	bne.n	80011e6 <getLightData+0x1e>
	while (HAL_I2C_Master_Transmit(&hi2c3, (lightAddress << 1), data_send, 1, 20) != HAL_OK){}
 80011f2:	bf00      	nop
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	b299      	uxth	r1, r3
 80011fc:	f107 0210 	add.w	r2, r7, #16
 8001200:	2314      	movs	r3, #20
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2301      	movs	r3, #1
 8001206:	4834      	ldr	r0, [pc, #208]	; (80012d8 <getLightData+0x110>)
 8001208:	f001 ff18 	bl	800303c <HAL_I2C_Master_Transmit>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f0      	bne.n	80011f4 <getLightData+0x2c>
	while (HAL_I2C_GetState(&hi2c3) != HAL_I2C_STATE_READY){}
 8001212:	bf00      	nop
 8001214:	4830      	ldr	r0, [pc, #192]	; (80012d8 <getLightData+0x110>)
 8001216:	f002 fa35 	bl	8003684 <HAL_I2C_GetState>
 800121a:	4603      	mov	r3, r0
 800121c:	2b20      	cmp	r3, #32
 800121e:	d1f9      	bne.n	8001214 <getLightData+0x4c>
	while (HAL_I2C_Master_Receive(&hi2c3, (lightAddress << 1 | 1), data_in, 2, HAL_MAX_DELAY)){}
 8001220:	bf00      	nop
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	b21b      	sxth	r3, r3
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	b21b      	sxth	r3, r3
 800122e:	b299      	uxth	r1, r3
 8001230:	f107 020c 	add.w	r2, r7, #12
 8001234:	f04f 33ff 	mov.w	r3, #4294967295
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2302      	movs	r3, #2
 800123c:	4826      	ldr	r0, [pc, #152]	; (80012d8 <getLightData+0x110>)
 800123e:	f001 fffb 	bl	8003238 <HAL_I2C_Master_Receive>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1ec      	bne.n	8001222 <getLightData+0x5a>

	alldata = data_in[0];
 8001248:	7b3b      	ldrb	r3, [r7, #12]
 800124a:	837b      	strh	r3, [r7, #26]
	alldata = (alldata << 8) | data_in[1];
 800124c:	8b7b      	ldrh	r3, [r7, #26]
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	b21a      	sxth	r2, r3
 8001252:	7b7b      	ldrb	r3, [r7, #13]
 8001254:	b21b      	sxth	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	b21b      	sxth	r3, r3
 800125a:	837b      	strh	r3, [r7, #26]
	man = alldata & 0x0FFF;
 800125c:	8b7b      	ldrh	r3, [r7, #26]
 800125e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001262:	833b      	strh	r3, [r7, #24]
	exp = (alldata & 0xF000) >> 12;
 8001264:	8b7b      	ldrh	r3, [r7, #26]
 8001266:	0b1b      	lsrs	r3, r3, #12
 8001268:	82fb      	strh	r3, [r7, #22]

	ans = man * (0.01 * pow(2,exp));
 800126a:	8b3b      	ldrh	r3, [r7, #24]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f961 	bl	8000534 <__aeabi_i2d>
 8001272:	4604      	mov	r4, r0
 8001274:	460d      	mov	r5, r1
 8001276:	8afb      	ldrh	r3, [r7, #22]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f94b 	bl	8000514 <__aeabi_ui2d>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	ec43 2b11 	vmov	d1, r2, r3
 8001286:	ed9f 0b10 	vldr	d0, [pc, #64]	; 80012c8 <getLightData+0x100>
 800128a:	f004 ffed 	bl	8006268 <pow>
 800128e:	ec51 0b10 	vmov	r0, r1, d0
 8001292:	a30f      	add	r3, pc, #60	; (adr r3, 80012d0 <getLightData+0x108>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f9b6 	bl	8000608 <__aeabi_dmul>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4620      	mov	r0, r4
 80012a2:	4629      	mov	r1, r5
 80012a4:	f7ff f9b0 	bl	8000608 <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f7ff fc5a 	bl	8000b68 <__aeabi_d2f>
 80012b4:	4603      	mov	r3, r0
 80012b6:	61fb      	str	r3, [r7, #28]

	return ans;
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	ee07 3a90 	vmov	s15, r3
}
 80012be:	eeb0 0a67 	vmov.f32	s0, s15
 80012c2:	3720      	adds	r7, #32
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bdb0      	pop	{r4, r5, r7, pc}
 80012c8:	00000000 	.word	0x00000000
 80012cc:	40000000 	.word	0x40000000
 80012d0:	47ae147b 	.word	0x47ae147b
 80012d4:	3f847ae1 	.word	0x3f847ae1
 80012d8:	20000140 	.word	0x20000140

080012dc <getGpsData>:
	float solarPanelVoltage = (measuredVoltage * (voltageDividerLargeRes + voltageDividerSmallRes) / voltageDividerSmallRes);

	return solarPanelVoltage;
}

void getGpsData(float* lat, float* longi, float* time, float* date, char* longDir, char* latDir) {
 80012dc:	b5b0      	push	{r4, r5, r7, lr}
 80012de:	b0b8      	sub	sp, #224	; 0xe0
 80012e0:	af02      	add	r7, sp, #8
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	603b      	str	r3, [r7, #0]
	uint8_t gpsDataTx [10] = {0}; //Data to send to GPS module
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80012f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	809a      	strh	r2, [r3, #4]
	uint8_t gpsDataReady [2] = {0}; //Data to check if gps module ready
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	uint8_t gpsDataRx1 [32] = {0}; //Buffer 1
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001306:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]
 8001316:	615a      	str	r2, [r3, #20]
 8001318:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx2 [32] = {0}; //Buffer 2
 800131a:	2300      	movs	r3, #0
 800131c:	667b      	str	r3, [r7, #100]	; 0x64
 800131e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	611a      	str	r2, [r3, #16]
 800132e:	615a      	str	r2, [r3, #20]
 8001330:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx3 [32] = {0}; //Buffer 3
 8001332:	2300      	movs	r3, #0
 8001334:	647b      	str	r3, [r7, #68]	; 0x44
 8001336:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]
 8001346:	615a      	str	r2, [r3, #20]
 8001348:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx4 [4] = {0}; //Buffer 4
 800134a:	2300      	movs	r3, #0
 800134c:	643b      	str	r3, [r7, #64]	; 0x40

	//////////////////////////////////////////////////////////////////////////////////////////
	//INITIALIZATION
	gpsDataTx[0] = 0xB5;
 800134e:	23b5      	movs	r3, #181	; 0xb5
 8001350:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	gpsDataTx[1] = 0x62;
 8001354:	2362      	movs	r3, #98	; 0x62
 8001356:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
	gpsDataTx[2] = 0xF0;
 800135a:	23f0      	movs	r3, #240	; 0xf0
 800135c:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
	gpsDataTx[3] = 0x04;
 8001360:	2304      	movs	r3, #4
 8001362:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8001366:	bf00      	nop
 8001368:	480e      	ldr	r0, [pc, #56]	; (80013a4 <getGpsData+0xc8>)
 800136a:	f002 f98b 	bl	8003684 <HAL_I2C_GetState>
 800136e:	4603      	mov	r3, r0
 8001370:	2b20      	cmp	r3, #32
 8001372:	d1f9      	bne.n	8001368 <getGpsData+0x8c>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 4, 20) != HAL_OK){}
 8001374:	bf00      	nop
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <getGpsData+0xcc>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	b299      	uxth	r1, r3
 800137e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001382:	2314      	movs	r3, #20
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2304      	movs	r3, #4
 8001388:	4806      	ldr	r0, [pc, #24]	; (80013a4 <getGpsData+0xc8>)
 800138a:	f001 fe57 	bl	800303c <HAL_I2C_Master_Transmit>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f0      	bne.n	8001376 <getGpsData+0x9a>

//		/////////////////////////////////////////////////////////////////////////////////////////
//
//		//WAITING FOR DATA READY
	gpsDataReady[0] = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
	gpsDataReady[1] = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
	while ((gpsDataReady[0] == 0) && (gpsDataReady[1] == 0)) //We leave as soon as read something non zero
 80013a0:	e02b      	b.n	80013fa <getGpsData+0x11e>
 80013a2:	bf00      	nop
 80013a4:	200000ec 	.word	0x200000ec
 80013a8:	20000000 	.word	0x20000000
	{
		gpsDataTx[0] = 0xFD;
 80013ac:	23fd      	movs	r3, #253	; 0xfd
 80013ae:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
		HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, HAL_MAX_DELAY);
 80013b2:	4bb5      	ldr	r3, [pc, #724]	; (8001688 <getGpsData+0x3ac>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	b299      	uxth	r1, r3
 80013ba:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2301      	movs	r3, #1
 80013c6:	48b1      	ldr	r0, [pc, #708]	; (800168c <getGpsData+0x3b0>)
 80013c8:	f001 fe38 	bl	800303c <HAL_I2C_Master_Transmit>
		gpsDataReady[0] = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
		gpsDataReady[1] = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
		HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataReady, 2, HAL_MAX_DELAY);
 80013d8:	4bab      	ldr	r3, [pc, #684]	; (8001688 <getGpsData+0x3ac>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	b21b      	sxth	r3, r3
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	b299      	uxth	r1, r3
 80013e8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80013ec:	f04f 33ff 	mov.w	r3, #4294967295
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2302      	movs	r3, #2
 80013f4:	48a5      	ldr	r0, [pc, #660]	; (800168c <getGpsData+0x3b0>)
 80013f6:	f001 ff1f 	bl	8003238 <HAL_I2C_Master_Receive>
	while ((gpsDataReady[0] == 0) && (gpsDataReady[1] == 0)) //We leave as soon as read something non zero
 80013fa:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d103      	bne.n	800140a <getGpsData+0x12e>
 8001402:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0d0      	beq.n	80013ac <getGpsData+0xd0>
	}


//		//Buffer 1
	gpsDataTx[0] = 0xFF;
 800140a:	23ff      	movs	r3, #255	; 0xff
 800140c:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8001410:	bf00      	nop
 8001412:	489e      	ldr	r0, [pc, #632]	; (800168c <getGpsData+0x3b0>)
 8001414:	f002 f936 	bl	8003684 <HAL_I2C_GetState>
 8001418:	4603      	mov	r3, r0
 800141a:	2b20      	cmp	r3, #32
 800141c:	d1f9      	bne.n	8001412 <getGpsData+0x136>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 800141e:	bf00      	nop
 8001420:	4b99      	ldr	r3, [pc, #612]	; (8001688 <getGpsData+0x3ac>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	b299      	uxth	r1, r3
 8001428:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800142c:	2314      	movs	r3, #20
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2301      	movs	r3, #1
 8001432:	4896      	ldr	r0, [pc, #600]	; (800168c <getGpsData+0x3b0>)
 8001434:	f001 fe02 	bl	800303c <HAL_I2C_Master_Transmit>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <getGpsData+0x144>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800143e:	bf00      	nop
 8001440:	4892      	ldr	r0, [pc, #584]	; (800168c <getGpsData+0x3b0>)
 8001442:	f002 f91f 	bl	8003684 <HAL_I2C_GetState>
 8001446:	4603      	mov	r3, r0
 8001448:	2b20      	cmp	r3, #32
 800144a:	d1f9      	bne.n	8001440 <getGpsData+0x164>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx1, 32, HAL_MAX_DELAY)){}
 800144c:	bf00      	nop
 800144e:	4b8e      	ldr	r3, [pc, #568]	; (8001688 <getGpsData+0x3ac>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	b21b      	sxth	r3, r3
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	b21b      	sxth	r3, r3
 800145c:	b299      	uxth	r1, r3
 800145e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	2320      	movs	r3, #32
 800146a:	4888      	ldr	r0, [pc, #544]	; (800168c <getGpsData+0x3b0>)
 800146c:	f001 fee4 	bl	8003238 <HAL_I2C_Master_Receive>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1eb      	bne.n	800144e <getGpsData+0x172>
//
//		//Buffer 2
	gpsDataTx[0] = 0xFF;
 8001476:	23ff      	movs	r3, #255	; 0xff
 8001478:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800147c:	bf00      	nop
 800147e:	4883      	ldr	r0, [pc, #524]	; (800168c <getGpsData+0x3b0>)
 8001480:	f002 f900 	bl	8003684 <HAL_I2C_GetState>
 8001484:	4603      	mov	r3, r0
 8001486:	2b20      	cmp	r3, #32
 8001488:	d1f9      	bne.n	800147e <getGpsData+0x1a2>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 800148a:	bf00      	nop
 800148c:	4b7e      	ldr	r3, [pc, #504]	; (8001688 <getGpsData+0x3ac>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	b299      	uxth	r1, r3
 8001494:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001498:	2314      	movs	r3, #20
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2301      	movs	r3, #1
 800149e:	487b      	ldr	r0, [pc, #492]	; (800168c <getGpsData+0x3b0>)
 80014a0:	f001 fdcc 	bl	800303c <HAL_I2C_Master_Transmit>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <getGpsData+0x1b0>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80014aa:	bf00      	nop
 80014ac:	4877      	ldr	r0, [pc, #476]	; (800168c <getGpsData+0x3b0>)
 80014ae:	f002 f8e9 	bl	8003684 <HAL_I2C_GetState>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b20      	cmp	r3, #32
 80014b6:	d1f9      	bne.n	80014ac <getGpsData+0x1d0>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx2, 32, HAL_MAX_DELAY)){}
 80014b8:	bf00      	nop
 80014ba:	4b73      	ldr	r3, [pc, #460]	; (8001688 <getGpsData+0x3ac>)
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	b299      	uxth	r1, r3
 80014ca:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	2320      	movs	r3, #32
 80014d6:	486d      	ldr	r0, [pc, #436]	; (800168c <getGpsData+0x3b0>)
 80014d8:	f001 feae 	bl	8003238 <HAL_I2C_Master_Receive>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1eb      	bne.n	80014ba <getGpsData+0x1de>
//
//		//Buffer 3
	gpsDataTx[0] = 0xFF;
 80014e2:	23ff      	movs	r3, #255	; 0xff
 80014e4:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80014e8:	bf00      	nop
 80014ea:	4868      	ldr	r0, [pc, #416]	; (800168c <getGpsData+0x3b0>)
 80014ec:	f002 f8ca 	bl	8003684 <HAL_I2C_GetState>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b20      	cmp	r3, #32
 80014f4:	d1f9      	bne.n	80014ea <getGpsData+0x20e>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 80014f6:	bf00      	nop
 80014f8:	4b63      	ldr	r3, [pc, #396]	; (8001688 <getGpsData+0x3ac>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	b299      	uxth	r1, r3
 8001500:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001504:	2314      	movs	r3, #20
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2301      	movs	r3, #1
 800150a:	4860      	ldr	r0, [pc, #384]	; (800168c <getGpsData+0x3b0>)
 800150c:	f001 fd96 	bl	800303c <HAL_I2C_Master_Transmit>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <getGpsData+0x21c>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8001516:	bf00      	nop
 8001518:	485c      	ldr	r0, [pc, #368]	; (800168c <getGpsData+0x3b0>)
 800151a:	f002 f8b3 	bl	8003684 <HAL_I2C_GetState>
 800151e:	4603      	mov	r3, r0
 8001520:	2b20      	cmp	r3, #32
 8001522:	d1f9      	bne.n	8001518 <getGpsData+0x23c>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx3, 32, HAL_MAX_DELAY)){}
 8001524:	bf00      	nop
 8001526:	4b58      	ldr	r3, [pc, #352]	; (8001688 <getGpsData+0x3ac>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	b21b      	sxth	r3, r3
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	b21b      	sxth	r3, r3
 8001534:	b299      	uxth	r1, r3
 8001536:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800153a:	f04f 33ff 	mov.w	r3, #4294967295
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2320      	movs	r3, #32
 8001542:	4852      	ldr	r0, [pc, #328]	; (800168c <getGpsData+0x3b0>)
 8001544:	f001 fe78 	bl	8003238 <HAL_I2C_Master_Receive>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1eb      	bne.n	8001526 <getGpsData+0x24a>

	//Buffer 4
	gpsDataTx[0] = 0xFF;
 800154e:	23ff      	movs	r3, #255	; 0xff
 8001550:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8001554:	bf00      	nop
 8001556:	484d      	ldr	r0, [pc, #308]	; (800168c <getGpsData+0x3b0>)
 8001558:	f002 f894 	bl	8003684 <HAL_I2C_GetState>
 800155c:	4603      	mov	r3, r0
 800155e:	2b20      	cmp	r3, #32
 8001560:	d1f9      	bne.n	8001556 <getGpsData+0x27a>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 8001562:	bf00      	nop
 8001564:	4b48      	ldr	r3, [pc, #288]	; (8001688 <getGpsData+0x3ac>)
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	b299      	uxth	r1, r3
 800156c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001570:	2314      	movs	r3, #20
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2301      	movs	r3, #1
 8001576:	4845      	ldr	r0, [pc, #276]	; (800168c <getGpsData+0x3b0>)
 8001578:	f001 fd60 	bl	800303c <HAL_I2C_Master_Transmit>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <getGpsData+0x288>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8001582:	bf00      	nop
 8001584:	4841      	ldr	r0, [pc, #260]	; (800168c <getGpsData+0x3b0>)
 8001586:	f002 f87d 	bl	8003684 <HAL_I2C_GetState>
 800158a:	4603      	mov	r3, r0
 800158c:	2b20      	cmp	r3, #32
 800158e:	d1f9      	bne.n	8001584 <getGpsData+0x2a8>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx4, 4, HAL_MAX_DELAY)){}
 8001590:	bf00      	nop
 8001592:	4b3d      	ldr	r3, [pc, #244]	; (8001688 <getGpsData+0x3ac>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	b21b      	sxth	r3, r3
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	b21b      	sxth	r3, r3
 80015a0:	b299      	uxth	r1, r3
 80015a2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2304      	movs	r3, #4
 80015ae:	4837      	ldr	r0, [pc, #220]	; (800168c <getGpsData+0x3b0>)
 80015b0:	f001 fe42 	bl	8003238 <HAL_I2C_Master_Receive>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1eb      	bne.n	8001592 <getGpsData+0x2b6>


	//Create concaterated buffer
	 size_t totalSize = sizeof(gpsDataRx1) + sizeof(gpsDataRx2) + sizeof(gpsDataRx3) + sizeof(gpsDataRx4);
 80015ba:	2364      	movs	r3, #100	; 0x64
 80015bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	// Allocate memory for the concatenated array
	uint8_t *concatenatedArray = (uint8_t *)malloc(totalSize);
 80015c0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80015c4:	f003 fdb2 	bl	800512c <malloc>
 80015c8:	4603      	mov	r3, r0
 80015ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	// Copy the contents of each array into the concatenated array
	size_t offset = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx1, sizeof(gpsDataRx1));
 80015d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80015dc:	4413      	add	r3, r2
 80015de:	461d      	mov	r5, r3
 80015e0:	f107 0484 	add.w	r4, r7, #132	; 0x84
 80015e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e6:	6028      	str	r0, [r5, #0]
 80015e8:	6069      	str	r1, [r5, #4]
 80015ea:	60aa      	str	r2, [r5, #8]
 80015ec:	60eb      	str	r3, [r5, #12]
 80015ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f0:	6128      	str	r0, [r5, #16]
 80015f2:	6169      	str	r1, [r5, #20]
 80015f4:	61aa      	str	r2, [r5, #24]
 80015f6:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx1);
 80015f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80015fc:	3320      	adds	r3, #32
 80015fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx2, sizeof(gpsDataRx2));
 8001602:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001606:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800160a:	4413      	add	r3, r2
 800160c:	461d      	mov	r5, r3
 800160e:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001614:	6028      	str	r0, [r5, #0]
 8001616:	6069      	str	r1, [r5, #4]
 8001618:	60aa      	str	r2, [r5, #8]
 800161a:	60eb      	str	r3, [r5, #12]
 800161c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161e:	6128      	str	r0, [r5, #16]
 8001620:	6169      	str	r1, [r5, #20]
 8001622:	61aa      	str	r2, [r5, #24]
 8001624:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx2);
 8001626:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800162a:	3320      	adds	r3, #32
 800162c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx3, sizeof(gpsDataRx3));
 8001630:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001634:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001638:	4413      	add	r3, r2
 800163a:	461d      	mov	r5, r3
 800163c:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001642:	6028      	str	r0, [r5, #0]
 8001644:	6069      	str	r1, [r5, #4]
 8001646:	60aa      	str	r2, [r5, #8]
 8001648:	60eb      	str	r3, [r5, #12]
 800164a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800164c:	6128      	str	r0, [r5, #16]
 800164e:	6169      	str	r1, [r5, #20]
 8001650:	61aa      	str	r2, [r5, #24]
 8001652:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx3);
 8001654:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001658:	3320      	adds	r3, #32
 800165a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx4, sizeof(gpsDataRx4));
 800165e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001662:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001666:	4413      	add	r3, r2
 8001668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800166a:	601a      	str	r2, [r3, #0]


	//String comparisons
	const char* GNRMC = "NRMC,";
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <getGpsData+0x3b4>)
 800166e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	const char* minus1 = "-1";
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <getGpsData+0x3b8>)
 8001674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	const char* comma = ",";
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <getGpsData+0x3bc>)
 800167a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	char* gpsDataList[12];

	for (int i = 0; i < 12; i++) {
 800167e:	2300      	movs	r3, #0
 8001680:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001684:	e017      	b.n	80016b6 <getGpsData+0x3da>
 8001686:	bf00      	nop
 8001688:	20000000 	.word	0x20000000
 800168c:	200000ec 	.word	0x200000ec
 8001690:	080070f4 	.word	0x080070f4
 8001694:	080070fc 	.word	0x080070fc
 8001698:	08007100 	.word	0x08007100
	    gpsDataList[i] = "-1";
 800169c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	33d8      	adds	r3, #216	; 0xd8
 80016a4:	443b      	add	r3, r7
 80016a6:	4a99      	ldr	r2, [pc, #612]	; (800190c <getGpsData+0x630>)
 80016a8:	f843 2cc8 	str.w	r2, [r3, #-200]
	for (int i = 0; i < 12; i++) {
 80016ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80016b0:	3301      	adds	r3, #1
 80016b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80016b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80016ba:	2b0b      	cmp	r3, #11
 80016bc:	ddee      	ble.n	800169c <getGpsData+0x3c0>
	}

	//Parsing the data and updating our values

	if (strncmp(concatenatedArray, GNRMC, strlen(GNRMC)) == 0) {
 80016be:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80016c2:	f7fe fd8d 	bl	80001e0 <strlen>
 80016c6:	4603      	mov	r3, r0
 80016c8:	461a      	mov	r2, r3
 80016ca:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80016ce:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80016d2:	f003 ff6e 	bl	80055b2 <strncmp>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d122      	bne.n	8001722 <getGpsData+0x446>
		char* individualGpsData = strtok(concatenatedArray, ","); // Initialize strtok with the buffer
 80016dc:	498c      	ldr	r1, [pc, #560]	; (8001910 <getGpsData+0x634>)
 80016de:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80016e2:	f003 ff79 	bl	80055d8 <strtok>
 80016e6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		int index = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

		while (individualGpsData != NULL) {
 80016f0:	e013      	b.n	800171a <getGpsData+0x43e>
			gpsDataList[index] = individualGpsData; // Store the token in an array
 80016f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	33d8      	adds	r3, #216	; 0xd8
 80016fa:	443b      	add	r3, r7
 80016fc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001700:	f843 2cc8 	str.w	r2, [r3, #-200]
			individualGpsData = strtok(NULL, ","); // Get the next token
 8001704:	4982      	ldr	r1, [pc, #520]	; (8001910 <getGpsData+0x634>)
 8001706:	2000      	movs	r0, #0
 8001708:	f003 ff66 	bl	80055d8 <strtok>
 800170c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
			index++;
 8001710:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001714:	3301      	adds	r3, #1
 8001716:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		while (individualGpsData != NULL) {
 800171a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1e7      	bne.n	80016f2 <getGpsData+0x416>
		}
	}

	//if the value is different from both -1 and ,, we update our time
	if ((strncmp(gpsDataList[1], minus1, strlen(minus1)) != 0) &&
 8001722:	697c      	ldr	r4, [r7, #20]
 8001724:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001728:	f7fe fd5a 	bl	80001e0 <strlen>
 800172c:	4603      	mov	r3, r0
 800172e:	461a      	mov	r2, r3
 8001730:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001734:	4620      	mov	r0, r4
 8001736:	f003 ff3c 	bl	80055b2 <strncmp>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d019      	beq.n	8001774 <getGpsData+0x498>
	   (strncmp(gpsDataList[1], comma, strlen(comma)) != 0)) {
 8001740:	697c      	ldr	r4, [r7, #20]
 8001742:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001746:	f7fe fd4b 	bl	80001e0 <strlen>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001752:	4620      	mov	r0, r4
 8001754:	f003 ff2d 	bl	80055b2 <strncmp>
 8001758:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[1], minus1, strlen(minus1)) != 0) &&
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00a      	beq.n	8001774 <getGpsData+0x498>
		*time = atoi(gpsDataList[1]);
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	4618      	mov	r0, r3
 8001762:	f003 fcdf 	bl	8005124 <atoi>
 8001766:	ee07 0a90 	vmov	s15, r0
 800176a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((strncmp(gpsDataList[3], minus1, strlen(minus1)) != 0) &&
 8001774:	69fc      	ldr	r4, [r7, #28]
 8001776:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800177a:	f7fe fd31 	bl	80001e0 <strlen>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001786:	4620      	mov	r0, r4
 8001788:	f003 ff13 	bl	80055b2 <strncmp>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d019      	beq.n	80017c6 <getGpsData+0x4ea>
	   (strncmp(gpsDataList[3], comma, strlen(comma)) != 0)) {
 8001792:	69fc      	ldr	r4, [r7, #28]
 8001794:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001798:	f7fe fd22 	bl	80001e0 <strlen>
 800179c:	4603      	mov	r3, r0
 800179e:	461a      	mov	r2, r3
 80017a0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80017a4:	4620      	mov	r0, r4
 80017a6:	f003 ff04 	bl	80055b2 <strncmp>
 80017aa:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[3], minus1, strlen(minus1)) != 0) &&
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00a      	beq.n	80017c6 <getGpsData+0x4ea>
		*lat = atoi(gpsDataList[3]);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f003 fcb6 	bl	8005124 <atoi>
 80017b8:	ee07 0a90 	vmov	s15, r0
 80017bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((strncmp(gpsDataList[4], minus1, strlen(minus1)) != 0) &&
 80017c6:	6a3c      	ldr	r4, [r7, #32]
 80017c8:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80017cc:	f7fe fd08 	bl	80001e0 <strlen>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461a      	mov	r2, r3
 80017d4:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80017d8:	4620      	mov	r0, r4
 80017da:	f003 feea 	bl	80055b2 <strncmp>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d014      	beq.n	800180e <getGpsData+0x532>
	   (strncmp(gpsDataList[4], comma, strlen(comma)) != 0)) {
 80017e4:	6a3c      	ldr	r4, [r7, #32]
 80017e6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80017ea:	f7fe fcf9 	bl	80001e0 <strlen>
 80017ee:	4603      	mov	r3, r0
 80017f0:	461a      	mov	r2, r3
 80017f2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80017f6:	4620      	mov	r0, r4
 80017f8:	f003 fedb 	bl	80055b2 <strncmp>
 80017fc:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[4], minus1, strlen(minus1)) != 0) &&
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d005      	beq.n	800180e <getGpsData+0x532>
		strcpy(latDir, gpsDataList[4]);
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	4619      	mov	r1, r3
 8001806:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800180a:	f003 ffc3 	bl	8005794 <strcpy>
	}

	if ((strncmp(gpsDataList[5], minus1, strlen(minus1)) != 0) &&
 800180e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001810:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001814:	f7fe fce4 	bl	80001e0 <strlen>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001820:	4620      	mov	r0, r4
 8001822:	f003 fec6 	bl	80055b2 <strncmp>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d019      	beq.n	8001860 <getGpsData+0x584>
	   (strncmp(gpsDataList[5], comma, strlen(comma)) != 0)) {
 800182c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800182e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001832:	f7fe fcd5 	bl	80001e0 <strlen>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800183e:	4620      	mov	r0, r4
 8001840:	f003 feb7 	bl	80055b2 <strncmp>
 8001844:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[5], minus1, strlen(minus1)) != 0) &&
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00a      	beq.n	8001860 <getGpsData+0x584>
		*longi = atoi(gpsDataList[5]);
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	4618      	mov	r0, r3
 800184e:	f003 fc69 	bl	8005124 <atoi>
 8001852:	ee07 0a90 	vmov	s15, r0
 8001856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((strncmp(gpsDataList[6], minus1, strlen(minus1)) != 0) &&
 8001860:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001862:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001866:	f7fe fcbb 	bl	80001e0 <strlen>
 800186a:	4603      	mov	r3, r0
 800186c:	461a      	mov	r2, r3
 800186e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001872:	4620      	mov	r0, r4
 8001874:	f003 fe9d 	bl	80055b2 <strncmp>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d014      	beq.n	80018a8 <getGpsData+0x5cc>
	   (strncmp(gpsDataList[6], comma, strlen(comma)) != 0)) {
 800187e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001880:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001884:	f7fe fcac 	bl	80001e0 <strlen>
 8001888:	4603      	mov	r3, r0
 800188a:	461a      	mov	r2, r3
 800188c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001890:	4620      	mov	r0, r4
 8001892:	f003 fe8e 	bl	80055b2 <strncmp>
 8001896:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[6], minus1, strlen(minus1)) != 0) &&
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <getGpsData+0x5cc>
		strcpy(longDir, gpsDataList[6]);
 800189c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189e:	4619      	mov	r1, r3
 80018a0:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80018a4:	f003 ff76 	bl	8005794 <strcpy>
	}

	if ((strncmp(gpsDataList[8], minus1, strlen(minus1)) != 0) &&
 80018a8:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80018aa:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80018ae:	f7fe fc97 	bl	80001e0 <strlen>
 80018b2:	4603      	mov	r3, r0
 80018b4:	461a      	mov	r2, r3
 80018b6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80018ba:	4620      	mov	r0, r4
 80018bc:	f003 fe79 	bl	80055b2 <strncmp>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d019      	beq.n	80018fa <getGpsData+0x61e>
	   (strncmp(gpsDataList[8], comma, strlen(comma)) != 0)) {
 80018c6:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80018c8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80018cc:	f7fe fc88 	bl	80001e0 <strlen>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80018d8:	4620      	mov	r0, r4
 80018da:	f003 fe6a 	bl	80055b2 <strncmp>
 80018de:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[8], minus1, strlen(minus1)) != 0) &&
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00a      	beq.n	80018fa <getGpsData+0x61e>
		*date = atoi(gpsDataList[8]);
 80018e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e6:	4618      	mov	r0, r3
 80018e8:	f003 fc1c 	bl	8005124 <atoi>
 80018ec:	ee07 0a90 	vmov	s15, r0
 80018f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	edc3 7a00 	vstr	s15, [r3]
	}

	free(concatenatedArray);
 80018fa:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80018fe:	f003 fc1d 	bl	800513c <free>
}
 8001902:	bf00      	nop
 8001904:	37d8      	adds	r7, #216	; 0xd8
 8001906:	46bd      	mov	sp, r7
 8001908:	bdb0      	pop	{r4, r5, r7, pc}
 800190a:	bf00      	nop
 800190c:	080070fc 	.word	0x080070fc
 8001910:	08007100 	.word	0x08007100

08001914 <SystemClock_Config>:
  return D;
}


void SystemClock_Config(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b094      	sub	sp, #80	; 0x50
 8001918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191a:	f107 0320 	add.w	r3, r7, #32
 800191e:	2230      	movs	r2, #48	; 0x30
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f003 fe3d 	bl	80055a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	4b27      	ldr	r3, [pc, #156]	; (80019dc <SystemClock_Config+0xc8>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	4a26      	ldr	r2, [pc, #152]	; (80019dc <SystemClock_Config+0xc8>)
 8001942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001946:	6413      	str	r3, [r2, #64]	; 0x40
 8001948:	4b24      	ldr	r3, [pc, #144]	; (80019dc <SystemClock_Config+0xc8>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001954:	2300      	movs	r3, #0
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <SystemClock_Config+0xcc>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a20      	ldr	r2, [pc, #128]	; (80019e0 <SystemClock_Config+0xcc>)
 800195e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <SystemClock_Config+0xcc>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001970:	2302      	movs	r3, #2
 8001972:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001974:	2301      	movs	r3, #1
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001978:	2310      	movs	r3, #16
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800197c:	2302      	movs	r3, #2
 800197e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001980:	2300      	movs	r3, #0
 8001982:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001984:	2308      	movs	r3, #8
 8001986:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001988:	2348      	movs	r3, #72	; 0x48
 800198a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800198c:	2302      	movs	r3, #2
 800198e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001990:	2304      	movs	r3, #4
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001994:	f107 0320 	add.w	r3, r7, #32
 8001998:	4618      	mov	r0, r3
 800199a:	f002 f9af 	bl	8003cfc <HAL_RCC_OscConfig>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019a4:	f000 f9f6 	bl	8001d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a8:	230f      	movs	r3, #15
 80019aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ac:	2302      	movs	r3, #2
 80019ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019be:	f107 030c 	add.w	r3, r7, #12
 80019c2:	2102      	movs	r1, #2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f002 fc11 	bl	80041ec <HAL_RCC_ClockConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80019d0:	f000 f9e0 	bl	8001d94 <Error_Handler>
  }
}
 80019d4:	bf00      	nop
 80019d6:	3750      	adds	r7, #80	; 0x50
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40007000 	.word	0x40007000

080019e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ea:	463b      	mov	r3, r7
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019f6:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <MX_ADC1_Init+0x98>)
 80019f8:	4a21      	ldr	r2, [pc, #132]	; (8001a80 <MX_ADC1_Init+0x9c>)
 80019fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <MX_ADC1_Init+0x98>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a1c:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a22:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a24:	4a17      	ldr	r2, [pc, #92]	; (8001a84 <MX_ADC1_Init+0xa0>)
 8001a26:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a42:	480e      	ldr	r0, [pc, #56]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a44:	f000 fcc0 	bl	80023c8 <HAL_ADC_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001a4e:	f000 f9a1 	bl	8001d94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a56:	2301      	movs	r3, #1
 8001a58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a5e:	463b      	mov	r3, r7
 8001a60:	4619      	mov	r1, r3
 8001a62:	4806      	ldr	r0, [pc, #24]	; (8001a7c <MX_ADC1_Init+0x98>)
 8001a64:	f000 fcf4 	bl	8002450 <HAL_ADC_ConfigChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a6e:	f000 f991 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200000a4 	.word	0x200000a4
 8001a80:	40012000 	.word	0x40012000
 8001a84:	0f000001 	.word	0x0f000001

08001a88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001a8e:	4a13      	ldr	r2, [pc, #76]	; (8001adc <MX_I2C1_Init+0x54>)
 8001a90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001a94:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <MX_I2C1_Init+0x58>)
 8001a96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001aa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aaa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ac4:	4804      	ldr	r0, [pc, #16]	; (8001ad8 <MX_I2C1_Init+0x50>)
 8001ac6:	f001 f975 	bl	8002db4 <HAL_I2C_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ad0:	f000 f960 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	200000ec 	.word	0x200000ec
 8001adc:	40005400 	.word	0x40005400
 8001ae0:	000186a0 	.word	0x000186a0

08001ae4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <MX_I2C3_Init+0x50>)
 8001aea:	4a13      	ldr	r2, [pc, #76]	; (8001b38 <MX_I2C3_Init+0x54>)
 8001aec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_I2C3_Init+0x50>)
 8001af0:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <MX_I2C3_Init+0x58>)
 8001af2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <MX_I2C3_Init+0x50>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_I2C3_Init+0x50>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <MX_I2C3_Init+0x50>)
 8001b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b06:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b08:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <MX_I2C3_Init+0x50>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_I2C3_Init+0x50>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b14:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <MX_I2C3_Init+0x50>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MX_I2C3_Init+0x50>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b20:	4804      	ldr	r0, [pc, #16]	; (8001b34 <MX_I2C3_Init+0x50>)
 8001b22:	f001 f947 	bl	8002db4 <HAL_I2C_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001b2c:	f000 f932 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000140 	.word	0x20000140
 8001b38:	40005c00 	.word	0x40005c00
 8001b3c:	000186a0 	.word	0x000186a0

08001b40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b46:	f107 0308 	add.w	r3, r7, #8
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b54:	463b      	mov	r3, r7
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b5c:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <MX_TIM1_Init+0x98>)
 8001b5e:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <MX_TIM1_Init+0x9c>)
 8001b60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001b62:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <MX_TIM1_Init+0x98>)
 8001b64:	2247      	movs	r2, #71	; 0x47
 8001b66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b68:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <MX_TIM1_Init+0x98>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <MX_TIM1_Init+0x98>)
 8001b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <MX_TIM1_Init+0x98>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <MX_TIM1_Init+0x98>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <MX_TIM1_Init+0x98>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b88:	4813      	ldr	r0, [pc, #76]	; (8001bd8 <MX_TIM1_Init+0x98>)
 8001b8a:	f002 fd0f 	bl	80045ac <HAL_TIM_Base_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b94:	f000 f8fe 	bl	8001d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b9e:	f107 0308 	add.w	r3, r7, #8
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	480c      	ldr	r0, [pc, #48]	; (8001bd8 <MX_TIM1_Init+0x98>)
 8001ba6:	f002 fdab 	bl	8004700 <HAL_TIM_ConfigClockSource>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001bb0:	f000 f8f0 	bl	8001d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bbc:	463b      	mov	r3, r7
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_TIM1_Init+0x98>)
 8001bc2:	f002 ff7f 	bl	8004ac4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001bcc:	f000 f8e2 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000194 	.word	0x20000194
 8001bdc:	40010000 	.word	0x40010000

08001be0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <MX_USART1_UART_Init+0x4c>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <MX_USART1_UART_Init+0x50>)
 8001be8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <MX_USART1_UART_Init+0x4c>)
 8001bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <MX_USART1_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <MX_USART1_UART_Init+0x4c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <MX_USART1_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <MX_USART1_UART_Init+0x4c>)
 8001c06:	220c      	movs	r2, #12
 8001c08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <MX_USART1_UART_Init+0x4c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <MX_USART1_UART_Init+0x4c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c16:	4805      	ldr	r0, [pc, #20]	; (8001c2c <MX_USART1_UART_Init+0x4c>)
 8001c18:	f002 ffc2 	bl	8004ba0 <HAL_UART_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c22:	f000 f8b7 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200001dc 	.word	0x200001dc
 8001c30:	40011000 	.word	0x40011000

08001c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
 8001c48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	4b4c      	ldr	r3, [pc, #304]	; (8001d80 <MX_GPIO_Init+0x14c>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a4b      	ldr	r2, [pc, #300]	; (8001d80 <MX_GPIO_Init+0x14c>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b49      	ldr	r3, [pc, #292]	; (8001d80 <MX_GPIO_Init+0x14c>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b45      	ldr	r3, [pc, #276]	; (8001d80 <MX_GPIO_Init+0x14c>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a44      	ldr	r2, [pc, #272]	; (8001d80 <MX_GPIO_Init+0x14c>)
 8001c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b42      	ldr	r3, [pc, #264]	; (8001d80 <MX_GPIO_Init+0x14c>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	4b3e      	ldr	r3, [pc, #248]	; (8001d80 <MX_GPIO_Init+0x14c>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a3d      	ldr	r2, [pc, #244]	; (8001d80 <MX_GPIO_Init+0x14c>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b3b      	ldr	r3, [pc, #236]	; (8001d80 <MX_GPIO_Init+0x14c>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b37      	ldr	r3, [pc, #220]	; (8001d80 <MX_GPIO_Init+0x14c>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a36      	ldr	r2, [pc, #216]	; (8001d80 <MX_GPIO_Init+0x14c>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <MX_GPIO_Init+0x14c>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <MX_GPIO_Init+0x14c>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a2f      	ldr	r2, [pc, #188]	; (8001d80 <MX_GPIO_Init+0x14c>)
 8001cc4:	f043 0308 	orr.w	r3, r3, #8
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <MX_GPIO_Init+0x14c>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Extra_PC0_Pin|Extra_PC1_Pin|Extra_PC4_Pin|Solar_Panel_Voltage_LED_Pin
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f641 5193 	movw	r1, #7571	; 0x1d93
 8001cdc:	4829      	ldr	r0, [pc, #164]	; (8001d84 <MX_GPIO_Init+0x150>)
 8001cde:	f001 f84f 	bl	8002d80 <HAL_GPIO_WritePin>
                          |Debug_LED_Pin|Step_Rod_Logic_Pin|Direction_Rod_Logic_Pin|Enable_Rod_Logic_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Extra_PA1_Pin|Extra_PA2_Pin|Extra_PA3_Pin|Extra_PA4_Pin, GPIO_PIN_RESET);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	211e      	movs	r1, #30
 8001ce6:	4828      	ldr	r0, [pc, #160]	; (8001d88 <MX_GPIO_Init+0x154>)
 8001ce8:	f001 f84a 	bl	8002d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Extra_PB12_Pin|Extra_PB13_Pin|Extra_PB14_Pin|Extra_PB15_Pin
 8001cec:	2200      	movs	r2, #0
 8001cee:	f24f 01f8 	movw	r1, #61688	; 0xf0f8
 8001cf2:	4826      	ldr	r0, [pc, #152]	; (8001d8c <MX_GPIO_Init+0x158>)
 8001cf4:	f001 f844 	bl	8002d80 <HAL_GPIO_WritePin>
                          |Extra_PB3_Pin|Enable_Susan_Logic_Pin|Step_Susan_Logic_Pin|Direction_Susan_Logic_Pin
                          |nSleep_Susan_Logic_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSleep_Rod_Logic_GPIO_Port, nSleep_Rod_Logic_Pin, GPIO_PIN_RESET);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2104      	movs	r1, #4
 8001cfc:	4824      	ldr	r0, [pc, #144]	; (8001d90 <MX_GPIO_Init+0x15c>)
 8001cfe:	f001 f83f 	bl	8002d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Extra_PC0_Pin Extra_PC1_Pin Extra_PC4_Pin Solar_Panel_Voltage_LED_Pin
                           Debug_LED_Pin Step_Rod_Logic_Pin Direction_Rod_Logic_Pin Enable_Rod_Logic_Pin */
  GPIO_InitStruct.Pin = Extra_PC0_Pin|Extra_PC1_Pin|Extra_PC4_Pin|Solar_Panel_Voltage_LED_Pin
 8001d02:	f641 5393 	movw	r3, #7571	; 0x1d93
 8001d06:	617b      	str	r3, [r7, #20]
                          |Debug_LED_Pin|Step_Rod_Logic_Pin|Direction_Rod_Logic_Pin|Enable_Rod_Logic_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	4619      	mov	r1, r3
 8001d1a:	481a      	ldr	r0, [pc, #104]	; (8001d84 <MX_GPIO_Init+0x150>)
 8001d1c:	f000 feac 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : Extra_PA1_Pin Extra_PA2_Pin Extra_PA3_Pin Extra_PA4_Pin */
  GPIO_InitStruct.Pin = Extra_PA1_Pin|Extra_PA2_Pin|Extra_PA3_Pin|Extra_PA4_Pin;
 8001d20:	231e      	movs	r3, #30
 8001d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d24:	2301      	movs	r3, #1
 8001d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4619      	mov	r1, r3
 8001d36:	4814      	ldr	r0, [pc, #80]	; (8001d88 <MX_GPIO_Init+0x154>)
 8001d38:	f000 fe9e 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : Extra_PB12_Pin Extra_PB13_Pin Extra_PB14_Pin Extra_PB15_Pin
                           Extra_PB3_Pin Enable_Susan_Logic_Pin Step_Susan_Logic_Pin Direction_Susan_Logic_Pin
                           nSleep_Susan_Logic_Pin */
  GPIO_InitStruct.Pin = Extra_PB12_Pin|Extra_PB13_Pin|Extra_PB14_Pin|Extra_PB15_Pin
 8001d3c:	f24f 03f8 	movw	r3, #61688	; 0xf0f8
 8001d40:	617b      	str	r3, [r7, #20]
                          |Extra_PB3_Pin|Enable_Susan_Logic_Pin|Step_Susan_Logic_Pin|Direction_Susan_Logic_Pin
                          |nSleep_Susan_Logic_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d42:	2301      	movs	r3, #1
 8001d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	480d      	ldr	r0, [pc, #52]	; (8001d8c <MX_GPIO_Init+0x158>)
 8001d56:	f000 fe8f 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSleep_Rod_Logic_Pin */
  GPIO_InitStruct.Pin = nSleep_Rod_Logic_Pin;
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	2300      	movs	r3, #0
 8001d68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nSleep_Rod_Logic_GPIO_Port, &GPIO_InitStruct);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4807      	ldr	r0, [pc, #28]	; (8001d90 <MX_GPIO_Init+0x15c>)
 8001d72:	f000 fe81 	bl	8002a78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d76:	bf00      	nop
 8001d78:	3728      	adds	r7, #40	; 0x28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020800 	.word	0x40020800
 8001d88:	40020000 	.word	0x40020000
 8001d8c:	40020400 	.word	0x40020400
 8001d90:	40020c00 	.word	0x40020c00

08001d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d98:	b672      	cpsid	i
}
 8001d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <Error_Handler+0x8>
	...

08001da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <HAL_MspInit+0x4c>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	4a0f      	ldr	r2, [pc, #60]	; (8001dec <HAL_MspInit+0x4c>)
 8001db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db4:	6453      	str	r3, [r2, #68]	; 0x44
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <HAL_MspInit+0x4c>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	603b      	str	r3, [r7, #0]
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_MspInit+0x4c>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	4a08      	ldr	r2, [pc, #32]	; (8001dec <HAL_MspInit+0x4c>)
 8001dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_MspInit+0x4c>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800

08001df0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	; 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <HAL_ADC_MspInit+0x7c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d127      	bne.n	8001e62 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <HAL_ADC_MspInit+0x80>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	4a15      	ldr	r2, [pc, #84]	; (8001e70 <HAL_ADC_MspInit+0x80>)
 8001e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e20:	6453      	str	r3, [r2, #68]	; 0x44
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <HAL_ADC_MspInit+0x80>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <HAL_ADC_MspInit+0x80>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a0e      	ldr	r2, [pc, #56]	; (8001e70 <HAL_ADC_MspInit+0x80>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <HAL_ADC_MspInit+0x80>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Voltage_Divider_Pin;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Voltage_Divider_GPIO_Port, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4805      	ldr	r0, [pc, #20]	; (8001e74 <HAL_ADC_MspInit+0x84>)
 8001e5e:	f000 fe0b 	bl	8002a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e62:	bf00      	nop
 8001e64:	3728      	adds	r7, #40	; 0x28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40012000 	.word	0x40012000
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40020000 	.word	0x40020000

08001e78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08c      	sub	sp, #48	; 0x30
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a42      	ldr	r2, [pc, #264]	; (8001fa0 <HAL_I2C_MspInit+0x128>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d12d      	bne.n	8001ef6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
 8001e9e:	4b41      	ldr	r3, [pc, #260]	; (8001fa4 <HAL_I2C_MspInit+0x12c>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a40      	ldr	r2, [pc, #256]	; (8001fa4 <HAL_I2C_MspInit+0x12c>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b3e      	ldr	r3, [pc, #248]	; (8001fa4 <HAL_I2C_MspInit+0x12c>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	61bb      	str	r3, [r7, #24]
 8001eb4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPS_and_MAG_I2C_SCL_Pin|GPS_and_MAG_I2C_SDA_Pin;
 8001eb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ebc:	2312      	movs	r3, #18
 8001ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ec8:	2304      	movs	r3, #4
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4835      	ldr	r0, [pc, #212]	; (8001fa8 <HAL_I2C_MspInit+0x130>)
 8001ed4:	f000 fdd0 	bl	8002a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <HAL_I2C_MspInit+0x12c>)
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	4a30      	ldr	r2, [pc, #192]	; (8001fa4 <HAL_I2C_MspInit+0x12c>)
 8001ee2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ee6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee8:	4b2e      	ldr	r3, [pc, #184]	; (8001fa4 <HAL_I2C_MspInit+0x12c>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ef4:	e050      	b.n	8001f98 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a2c      	ldr	r2, [pc, #176]	; (8001fac <HAL_I2C_MspInit+0x134>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d14b      	bne.n	8001f98 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f00:	2300      	movs	r3, #0
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <HAL_I2C_MspInit+0x12c>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	4a26      	ldr	r2, [pc, #152]	; (8001fa4 <HAL_I2C_MspInit+0x12c>)
 8001f0a:	f043 0304 	orr.w	r3, r3, #4
 8001f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f10:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <HAL_I2C_MspInit+0x12c>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_I2C_MspInit+0x12c>)
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	4a1f      	ldr	r2, [pc, #124]	; (8001fa4 <HAL_I2C_MspInit+0x12c>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <HAL_I2C_MspInit+0x12c>)
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C_Light_SDA_Pin;
 8001f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f3e:	2312      	movs	r3, #18
 8001f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C_Light_SDA_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	f107 031c 	add.w	r3, r7, #28
 8001f52:	4619      	mov	r1, r3
 8001f54:	4816      	ldr	r0, [pc, #88]	; (8001fb0 <HAL_I2C_MspInit+0x138>)
 8001f56:	f000 fd8f 	bl	8002a78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C_Light_SCL_Pin;
 8001f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f60:	2312      	movs	r3, #18
 8001f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f6c:	2304      	movs	r3, #4
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C_Light_SCL_GPIO_Port, &GPIO_InitStruct);
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	4619      	mov	r1, r3
 8001f76:	480f      	ldr	r0, [pc, #60]	; (8001fb4 <HAL_I2C_MspInit+0x13c>)
 8001f78:	f000 fd7e 	bl	8002a78 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <HAL_I2C_MspInit+0x12c>)
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <HAL_I2C_MspInit+0x12c>)
 8001f86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_I2C_MspInit+0x12c>)
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	68bb      	ldr	r3, [r7, #8]
}
 8001f98:	bf00      	nop
 8001f9a:	3730      	adds	r7, #48	; 0x30
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40005400 	.word	0x40005400
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40020400 	.word	0x40020400
 8001fac:	40005c00 	.word	0x40005c00
 8001fb0:	40020800 	.word	0x40020800
 8001fb4:	40020000 	.word	0x40020000

08001fb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <HAL_TIM_Base_MspInit+0x3c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d10d      	bne.n	8001fe6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <HAL_TIM_Base_MspInit+0x40>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	4a09      	ldr	r2, [pc, #36]	; (8001ff8 <HAL_TIM_Base_MspInit+0x40>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fda:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <HAL_TIM_Base_MspInit+0x40>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40010000 	.word	0x40010000
 8001ff8:	40023800 	.word	0x40023800

08001ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	; 0x28
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a19      	ldr	r2, [pc, #100]	; (8002080 <HAL_UART_MspInit+0x84>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d12c      	bne.n	8002078 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	4b18      	ldr	r3, [pc, #96]	; (8002084 <HAL_UART_MspInit+0x88>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	4a17      	ldr	r2, [pc, #92]	; (8002084 <HAL_UART_MspInit+0x88>)
 8002028:	f043 0310 	orr.w	r3, r3, #16
 800202c:	6453      	str	r3, [r2, #68]	; 0x44
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <HAL_UART_MspInit+0x88>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	4b11      	ldr	r3, [pc, #68]	; (8002084 <HAL_UART_MspInit+0x88>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a10      	ldr	r2, [pc, #64]	; (8002084 <HAL_UART_MspInit+0x88>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <HAL_UART_MspInit+0x88>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_RX_Pin|Bluetooth_TX_Pin;
 8002056:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800205a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002064:	2303      	movs	r3, #3
 8002066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002068:	2307      	movs	r3, #7
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	4619      	mov	r1, r3
 8002072:	4805      	ldr	r0, [pc, #20]	; (8002088 <HAL_UART_MspInit+0x8c>)
 8002074:	f000 fd00 	bl	8002a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002078:	bf00      	nop
 800207a:	3728      	adds	r7, #40	; 0x28
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40011000 	.word	0x40011000
 8002084:	40023800 	.word	0x40023800
 8002088:	40020000 	.word	0x40020000

0800208c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <NMI_Handler+0x4>

08002092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002096:	e7fe      	b.n	8002096 <HardFault_Handler+0x4>

08002098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800209c:	e7fe      	b.n	800209c <MemManage_Handler+0x4>

0800209e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a2:	e7fe      	b.n	80020a2 <BusFault_Handler+0x4>

080020a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <UsageFault_Handler+0x4>

080020aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020d8:	f000 f956 	bl	8002388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return 1;
 80020e4:	2301      	movs	r3, #1
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <_kill>:

int _kill(int pid, int sig)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020fa:	f003 fb1f 	bl	800573c <__errno>
 80020fe:	4603      	mov	r3, r0
 8002100:	2216      	movs	r2, #22
 8002102:	601a      	str	r2, [r3, #0]
  return -1;
 8002104:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <_exit>:

void _exit (int status)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002118:	f04f 31ff 	mov.w	r1, #4294967295
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff ffe7 	bl	80020f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002122:	e7fe      	b.n	8002122 <_exit+0x12>

08002124 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	e00a      	b.n	800214c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002136:	f3af 8000 	nop.w
 800213a:	4601      	mov	r1, r0
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	60ba      	str	r2, [r7, #8]
 8002142:	b2ca      	uxtb	r2, r1
 8002144:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	3301      	adds	r3, #1
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	429a      	cmp	r2, r3
 8002152:	dbf0      	blt.n	8002136 <_read+0x12>
  }

  return len;
 8002154:	687b      	ldr	r3, [r7, #4]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b086      	sub	sp, #24
 8002162:	af00      	add	r7, sp, #0
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	e009      	b.n	8002184 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	60ba      	str	r2, [r7, #8]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	3301      	adds	r3, #1
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	429a      	cmp	r2, r3
 800218a:	dbf1      	blt.n	8002170 <_write+0x12>
  }
  return len;
 800218c:	687b      	ldr	r3, [r7, #4]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <_close>:

int _close(int file)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021be:	605a      	str	r2, [r3, #4]
  return 0;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <_isatty>:

int _isatty(int file)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021d6:	2301      	movs	r3, #1
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002208:	4a14      	ldr	r2, [pc, #80]	; (800225c <_sbrk+0x5c>)
 800220a:	4b15      	ldr	r3, [pc, #84]	; (8002260 <_sbrk+0x60>)
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002214:	4b13      	ldr	r3, [pc, #76]	; (8002264 <_sbrk+0x64>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <_sbrk+0x64>)
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <_sbrk+0x68>)
 8002220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <_sbrk+0x64>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	429a      	cmp	r2, r3
 800222e:	d207      	bcs.n	8002240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002230:	f003 fa84 	bl	800573c <__errno>
 8002234:	4603      	mov	r3, r0
 8002236:	220c      	movs	r2, #12
 8002238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
 800223e:	e009      	b.n	8002254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <_sbrk+0x64>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002246:	4b07      	ldr	r3, [pc, #28]	; (8002264 <_sbrk+0x64>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	4a05      	ldr	r2, [pc, #20]	; (8002264 <_sbrk+0x64>)
 8002250:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002252:	68fb      	ldr	r3, [r7, #12]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20020000 	.word	0x20020000
 8002260:	00000400 	.word	0x00000400
 8002264:	20000220 	.word	0x20000220
 8002268:	20000378 	.word	0x20000378

0800226c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <SystemInit+0x20>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	4a05      	ldr	r2, [pc, #20]	; (800228c <SystemInit+0x20>)
 8002278:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800227c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002290:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002294:	480d      	ldr	r0, [pc, #52]	; (80022cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002296:	490e      	ldr	r1, [pc, #56]	; (80022d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002298:	4a0e      	ldr	r2, [pc, #56]	; (80022d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800229a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800229c:	e002      	b.n	80022a4 <LoopCopyDataInit>

0800229e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800229e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022a2:	3304      	adds	r3, #4

080022a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a8:	d3f9      	bcc.n	800229e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022aa:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022ac:	4c0b      	ldr	r4, [pc, #44]	; (80022dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80022ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b0:	e001      	b.n	80022b6 <LoopFillZerobss>

080022b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b4:	3204      	adds	r2, #4

080022b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b8:	d3fb      	bcc.n	80022b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022ba:	f7ff ffd7 	bl	800226c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022be:	f003 fa43 	bl	8005748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022c2:	f7fe fe1f 	bl	8000f04 <main>
  bx  lr    
 80022c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80022d4:	08007340 	.word	0x08007340
  ldr r2, =_sbss
 80022d8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80022dc:	20000374 	.word	0x20000374

080022e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022e0:	e7fe      	b.n	80022e0 <ADC_IRQHandler>
	...

080022e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022e8:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <HAL_Init+0x40>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <HAL_Init+0x40>)
 80022ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_Init+0x40>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <HAL_Init+0x40>)
 80022fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002300:	4b08      	ldr	r3, [pc, #32]	; (8002324 <HAL_Init+0x40>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a07      	ldr	r2, [pc, #28]	; (8002324 <HAL_Init+0x40>)
 8002306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800230c:	2003      	movs	r0, #3
 800230e:	f000 fb7f 	bl	8002a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002312:	200f      	movs	r0, #15
 8002314:	f000 f808 	bl	8002328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002318:	f7ff fd42 	bl	8001da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023c00 	.word	0x40023c00

08002328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002330:	4b12      	ldr	r3, [pc, #72]	; (800237c <HAL_InitTick+0x54>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_InitTick+0x58>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	4619      	mov	r1, r3
 800233a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800233e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002342:	fbb2 f3f3 	udiv	r3, r2, r3
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fb89 	bl	8002a5e <HAL_SYSTICK_Config>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e00e      	b.n	8002374 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b0f      	cmp	r3, #15
 800235a:	d80a      	bhi.n	8002372 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800235c:	2200      	movs	r2, #0
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	f04f 30ff 	mov.w	r0, #4294967295
 8002364:	f000 fb5f 	bl	8002a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002368:	4a06      	ldr	r2, [pc, #24]	; (8002384 <HAL_InitTick+0x5c>)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	e000      	b.n	8002374 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	2000000c 	.word	0x2000000c
 8002380:	20000014 	.word	0x20000014
 8002384:	20000010 	.word	0x20000010

08002388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_IncTick+0x20>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_IncTick+0x24>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4413      	add	r3, r2
 8002398:	4a04      	ldr	r2, [pc, #16]	; (80023ac <HAL_IncTick+0x24>)
 800239a:	6013      	str	r3, [r2, #0]
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000014 	.word	0x20000014
 80023ac:	20000224 	.word	0x20000224

080023b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return uwTick;
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <HAL_GetTick+0x14>)
 80023b6:	681b      	ldr	r3, [r3, #0]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20000224 	.word	0x20000224

080023c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e033      	b.n	8002446 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff fd02 	bl	8001df0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	2b00      	cmp	r3, #0
 8002404:	d118      	bne.n	8002438 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800240e:	f023 0302 	bic.w	r3, r3, #2
 8002412:	f043 0202 	orr.w	r2, r3, #2
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f94a 	bl	80026b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f023 0303 	bic.w	r3, r3, #3
 800242e:	f043 0201 	orr.w	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
 8002436:	e001      	b.n	800243c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002444:	7bfb      	ldrb	r3, [r7, #15]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_ADC_ConfigChannel+0x1c>
 8002468:	2302      	movs	r3, #2
 800246a:	e113      	b.n	8002694 <HAL_ADC_ConfigChannel+0x244>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b09      	cmp	r3, #9
 800247a:	d925      	bls.n	80024c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68d9      	ldr	r1, [r3, #12]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	4613      	mov	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	4413      	add	r3, r2
 8002490:	3b1e      	subs	r3, #30
 8002492:	2207      	movs	r2, #7
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43da      	mvns	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	400a      	ands	r2, r1
 80024a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68d9      	ldr	r1, [r3, #12]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	4618      	mov	r0, r3
 80024b4:	4603      	mov	r3, r0
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4403      	add	r3, r0
 80024ba:	3b1e      	subs	r3, #30
 80024bc:	409a      	lsls	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	e022      	b.n	800250e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6919      	ldr	r1, [r3, #16]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	4613      	mov	r3, r2
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4413      	add	r3, r2
 80024dc:	2207      	movs	r2, #7
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43da      	mvns	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	400a      	ands	r2, r1
 80024ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6919      	ldr	r1, [r3, #16]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	4618      	mov	r0, r3
 80024fe:	4603      	mov	r3, r0
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	4403      	add	r3, r0
 8002504:	409a      	lsls	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b06      	cmp	r3, #6
 8002514:	d824      	bhi.n	8002560 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	3b05      	subs	r3, #5
 8002528:	221f      	movs	r2, #31
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	400a      	ands	r2, r1
 8002536:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	4618      	mov	r0, r3
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	3b05      	subs	r3, #5
 8002552:	fa00 f203 	lsl.w	r2, r0, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	635a      	str	r2, [r3, #52]	; 0x34
 800255e:	e04c      	b.n	80025fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b0c      	cmp	r3, #12
 8002566:	d824      	bhi.n	80025b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	3b23      	subs	r3, #35	; 0x23
 800257a:	221f      	movs	r2, #31
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43da      	mvns	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	400a      	ands	r2, r1
 8002588:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	b29b      	uxth	r3, r3
 8002596:	4618      	mov	r0, r3
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	3b23      	subs	r3, #35	; 0x23
 80025a4:	fa00 f203 	lsl.w	r2, r0, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
 80025b0:	e023      	b.n	80025fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	3b41      	subs	r3, #65	; 0x41
 80025c4:	221f      	movs	r2, #31
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43da      	mvns	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	400a      	ands	r2, r1
 80025d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	4618      	mov	r0, r3
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	3b41      	subs	r3, #65	; 0x41
 80025ee:	fa00 f203 	lsl.w	r2, r0, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025fa:	4b29      	ldr	r3, [pc, #164]	; (80026a0 <HAL_ADC_ConfigChannel+0x250>)
 80025fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a28      	ldr	r2, [pc, #160]	; (80026a4 <HAL_ADC_ConfigChannel+0x254>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d10f      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x1d8>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b12      	cmp	r3, #18
 800260e:	d10b      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1d      	ldr	r2, [pc, #116]	; (80026a4 <HAL_ADC_ConfigChannel+0x254>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d12b      	bne.n	800268a <HAL_ADC_ConfigChannel+0x23a>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1c      	ldr	r2, [pc, #112]	; (80026a8 <HAL_ADC_ConfigChannel+0x258>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d003      	beq.n	8002644 <HAL_ADC_ConfigChannel+0x1f4>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b11      	cmp	r3, #17
 8002642:	d122      	bne.n	800268a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <HAL_ADC_ConfigChannel+0x258>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d111      	bne.n	800268a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002666:	4b11      	ldr	r3, [pc, #68]	; (80026ac <HAL_ADC_ConfigChannel+0x25c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a11      	ldr	r2, [pc, #68]	; (80026b0 <HAL_ADC_ConfigChannel+0x260>)
 800266c:	fba2 2303 	umull	r2, r3, r2, r3
 8002670:	0c9a      	lsrs	r2, r3, #18
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800267c:	e002      	b.n	8002684 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	3b01      	subs	r3, #1
 8002682:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f9      	bne.n	800267e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	40012300 	.word	0x40012300
 80026a4:	40012000 	.word	0x40012000
 80026a8:	10000012 	.word	0x10000012
 80026ac:	2000000c 	.word	0x2000000c
 80026b0:	431bde83 	.word	0x431bde83

080026b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026bc:	4b79      	ldr	r3, [pc, #484]	; (80028a4 <ADC_Init+0x1f0>)
 80026be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	021a      	lsls	r2, r3, #8
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800270c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6859      	ldr	r1, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800272e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6899      	ldr	r1, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	4a58      	ldr	r2, [pc, #352]	; (80028a8 <ADC_Init+0x1f4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d022      	beq.n	8002792 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800275a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6899      	ldr	r1, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800277c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6899      	ldr	r1, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	e00f      	b.n	80027b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0202 	bic.w	r2, r2, #2
 80027c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6899      	ldr	r1, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	7e1b      	ldrb	r3, [r3, #24]
 80027cc:	005a      	lsls	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01b      	beq.n	8002818 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6859      	ldr	r1, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	3b01      	subs	r3, #1
 800280c:	035a      	lsls	r2, r3, #13
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	e007      	b.n	8002828 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002826:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002836:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	3b01      	subs	r3, #1
 8002844:	051a      	lsls	r2, r3, #20
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800285c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6899      	ldr	r1, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800286a:	025a      	lsls	r2, r3, #9
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6899      	ldr	r1, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	029a      	lsls	r2, r3, #10
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	609a      	str	r2, [r3, #8]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	40012300 	.word	0x40012300
 80028a8:	0f000001 	.word	0x0f000001

080028ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <__NVIC_SetPriorityGrouping+0x44>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c8:	4013      	ands	r3, r2
 80028ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028de:	4a04      	ldr	r2, [pc, #16]	; (80028f0 <__NVIC_SetPriorityGrouping+0x44>)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	60d3      	str	r3, [r2, #12]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f8:	4b04      	ldr	r3, [pc, #16]	; (800290c <__NVIC_GetPriorityGrouping+0x18>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	f003 0307 	and.w	r3, r3, #7
}
 8002902:	4618      	mov	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	6039      	str	r1, [r7, #0]
 800291a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002920:	2b00      	cmp	r3, #0
 8002922:	db0a      	blt.n	800293a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	b2da      	uxtb	r2, r3
 8002928:	490c      	ldr	r1, [pc, #48]	; (800295c <__NVIC_SetPriority+0x4c>)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	0112      	lsls	r2, r2, #4
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	440b      	add	r3, r1
 8002934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002938:	e00a      	b.n	8002950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4908      	ldr	r1, [pc, #32]	; (8002960 <__NVIC_SetPriority+0x50>)
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	3b04      	subs	r3, #4
 8002948:	0112      	lsls	r2, r2, #4
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	440b      	add	r3, r1
 800294e:	761a      	strb	r2, [r3, #24]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000e100 	.word	0xe000e100
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	; 0x24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f1c3 0307 	rsb	r3, r3, #7
 800297e:	2b04      	cmp	r3, #4
 8002980:	bf28      	it	cs
 8002982:	2304      	movcs	r3, #4
 8002984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3304      	adds	r3, #4
 800298a:	2b06      	cmp	r3, #6
 800298c:	d902      	bls.n	8002994 <NVIC_EncodePriority+0x30>
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3b03      	subs	r3, #3
 8002992:	e000      	b.n	8002996 <NVIC_EncodePriority+0x32>
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	f04f 32ff 	mov.w	r2, #4294967295
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43da      	mvns	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	401a      	ands	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ac:	f04f 31ff 	mov.w	r1, #4294967295
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	43d9      	mvns	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029bc:	4313      	orrs	r3, r2
         );
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3724      	adds	r7, #36	; 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029dc:	d301      	bcc.n	80029e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029de:	2301      	movs	r3, #1
 80029e0:	e00f      	b.n	8002a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029e2:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <SysTick_Config+0x40>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ea:	210f      	movs	r1, #15
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295
 80029f0:	f7ff ff8e 	bl	8002910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <SysTick_Config+0x40>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029fa:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <SysTick_Config+0x40>)
 80029fc:	2207      	movs	r2, #7
 80029fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	e000e010 	.word	0xe000e010

08002a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff ff47 	bl	80028ac <__NVIC_SetPriorityGrouping>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b086      	sub	sp, #24
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a38:	f7ff ff5c 	bl	80028f4 <__NVIC_GetPriorityGrouping>
 8002a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	6978      	ldr	r0, [r7, #20]
 8002a44:	f7ff ff8e 	bl	8002964 <NVIC_EncodePriority>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff5d 	bl	8002910 <__NVIC_SetPriority>
}
 8002a56:	bf00      	nop
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff ffb0 	bl	80029cc <SysTick_Config>
 8002a6c:	4603      	mov	r3, r0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b089      	sub	sp, #36	; 0x24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	e159      	b.n	8002d48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a94:	2201      	movs	r2, #1
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	f040 8148 	bne.w	8002d42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d005      	beq.n	8002aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d130      	bne.n	8002b2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b00:	2201      	movs	r2, #1
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 0201 	and.w	r2, r3, #1
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d017      	beq.n	8002b68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d123      	bne.n	8002bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	08da      	lsrs	r2, r3, #3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3208      	adds	r2, #8
 8002b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	220f      	movs	r2, #15
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	08da      	lsrs	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3208      	adds	r2, #8
 8002bb6:	69b9      	ldr	r1, [r7, #24]
 8002bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0203 	and.w	r2, r3, #3
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80a2 	beq.w	8002d42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	4b57      	ldr	r3, [pc, #348]	; (8002d60 <HAL_GPIO_Init+0x2e8>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	4a56      	ldr	r2, [pc, #344]	; (8002d60 <HAL_GPIO_Init+0x2e8>)
 8002c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c0e:	4b54      	ldr	r3, [pc, #336]	; (8002d60 <HAL_GPIO_Init+0x2e8>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c1a:	4a52      	ldr	r2, [pc, #328]	; (8002d64 <HAL_GPIO_Init+0x2ec>)
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	089b      	lsrs	r3, r3, #2
 8002c20:	3302      	adds	r3, #2
 8002c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	220f      	movs	r2, #15
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a49      	ldr	r2, [pc, #292]	; (8002d68 <HAL_GPIO_Init+0x2f0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d019      	beq.n	8002c7a <HAL_GPIO_Init+0x202>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a48      	ldr	r2, [pc, #288]	; (8002d6c <HAL_GPIO_Init+0x2f4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <HAL_GPIO_Init+0x1fe>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a47      	ldr	r2, [pc, #284]	; (8002d70 <HAL_GPIO_Init+0x2f8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00d      	beq.n	8002c72 <HAL_GPIO_Init+0x1fa>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a46      	ldr	r2, [pc, #280]	; (8002d74 <HAL_GPIO_Init+0x2fc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d007      	beq.n	8002c6e <HAL_GPIO_Init+0x1f6>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a45      	ldr	r2, [pc, #276]	; (8002d78 <HAL_GPIO_Init+0x300>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d101      	bne.n	8002c6a <HAL_GPIO_Init+0x1f2>
 8002c66:	2304      	movs	r3, #4
 8002c68:	e008      	b.n	8002c7c <HAL_GPIO_Init+0x204>
 8002c6a:	2307      	movs	r3, #7
 8002c6c:	e006      	b.n	8002c7c <HAL_GPIO_Init+0x204>
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e004      	b.n	8002c7c <HAL_GPIO_Init+0x204>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e002      	b.n	8002c7c <HAL_GPIO_Init+0x204>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_GPIO_Init+0x204>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	f002 0203 	and.w	r2, r2, #3
 8002c82:	0092      	lsls	r2, r2, #2
 8002c84:	4093      	lsls	r3, r2
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c8c:	4935      	ldr	r1, [pc, #212]	; (8002d64 <HAL_GPIO_Init+0x2ec>)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	089b      	lsrs	r3, r3, #2
 8002c92:	3302      	adds	r3, #2
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c9a:	4b38      	ldr	r3, [pc, #224]	; (8002d7c <HAL_GPIO_Init+0x304>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cbe:	4a2f      	ldr	r2, [pc, #188]	; (8002d7c <HAL_GPIO_Init+0x304>)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cc4:	4b2d      	ldr	r3, [pc, #180]	; (8002d7c <HAL_GPIO_Init+0x304>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce8:	4a24      	ldr	r2, [pc, #144]	; (8002d7c <HAL_GPIO_Init+0x304>)
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cee:	4b23      	ldr	r3, [pc, #140]	; (8002d7c <HAL_GPIO_Init+0x304>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d12:	4a1a      	ldr	r2, [pc, #104]	; (8002d7c <HAL_GPIO_Init+0x304>)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d18:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <HAL_GPIO_Init+0x304>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d3c:	4a0f      	ldr	r2, [pc, #60]	; (8002d7c <HAL_GPIO_Init+0x304>)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3301      	adds	r3, #1
 8002d46:	61fb      	str	r3, [r7, #28]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	2b0f      	cmp	r3, #15
 8002d4c:	f67f aea2 	bls.w	8002a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	3724      	adds	r7, #36	; 0x24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40013800 	.word	0x40013800
 8002d68:	40020000 	.word	0x40020000
 8002d6c:	40020400 	.word	0x40020400
 8002d70:	40020800 	.word	0x40020800
 8002d74:	40020c00 	.word	0x40020c00
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40013c00 	.word	0x40013c00

08002d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	807b      	strh	r3, [r7, #2]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d90:	787b      	ldrb	r3, [r7, #1]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d96:	887a      	ldrh	r2, [r7, #2]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d9c:	e003      	b.n	8002da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d9e:	887b      	ldrh	r3, [r7, #2]
 8002da0:	041a      	lsls	r2, r3, #16
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	619a      	str	r2, [r3, #24]
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e12b      	b.n	800301e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff f84c 	bl	8001e78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2224      	movs	r2, #36	; 0x24
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e18:	f001 fba0 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 8002e1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4a81      	ldr	r2, [pc, #516]	; (8003028 <HAL_I2C_Init+0x274>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d807      	bhi.n	8002e38 <HAL_I2C_Init+0x84>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4a80      	ldr	r2, [pc, #512]	; (800302c <HAL_I2C_Init+0x278>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	bf94      	ite	ls
 8002e30:	2301      	movls	r3, #1
 8002e32:	2300      	movhi	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	e006      	b.n	8002e46 <HAL_I2C_Init+0x92>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4a7d      	ldr	r2, [pc, #500]	; (8003030 <HAL_I2C_Init+0x27c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	bf94      	ite	ls
 8002e40:	2301      	movls	r3, #1
 8002e42:	2300      	movhi	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0e7      	b.n	800301e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4a78      	ldr	r2, [pc, #480]	; (8003034 <HAL_I2C_Init+0x280>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0c9b      	lsrs	r3, r3, #18
 8002e58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4a6a      	ldr	r2, [pc, #424]	; (8003028 <HAL_I2C_Init+0x274>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d802      	bhi.n	8002e88 <HAL_I2C_Init+0xd4>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	3301      	adds	r3, #1
 8002e86:	e009      	b.n	8002e9c <HAL_I2C_Init+0xe8>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e8e:	fb02 f303 	mul.w	r3, r2, r3
 8002e92:	4a69      	ldr	r2, [pc, #420]	; (8003038 <HAL_I2C_Init+0x284>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	099b      	lsrs	r3, r3, #6
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	495c      	ldr	r1, [pc, #368]	; (8003028 <HAL_I2C_Init+0x274>)
 8002eb8:	428b      	cmp	r3, r1
 8002eba:	d819      	bhi.n	8002ef0 <HAL_I2C_Init+0x13c>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1e59      	subs	r1, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eca:	1c59      	adds	r1, r3, #1
 8002ecc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ed0:	400b      	ands	r3, r1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_I2C_Init+0x138>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1e59      	subs	r1, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eea:	e051      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002eec:	2304      	movs	r3, #4
 8002eee:	e04f      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d111      	bne.n	8002f1c <HAL_I2C_Init+0x168>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1e58      	subs	r0, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	440b      	add	r3, r1
 8002f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e012      	b.n	8002f42 <HAL_I2C_Init+0x18e>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1e58      	subs	r0, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	0099      	lsls	r1, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Init+0x196>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e022      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10e      	bne.n	8002f70 <HAL_I2C_Init+0x1bc>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1e58      	subs	r0, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6859      	ldr	r1, [r3, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	440b      	add	r3, r1
 8002f60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f6e:	e00f      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1e58      	subs	r0, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	0099      	lsls	r1, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f86:	3301      	adds	r3, #1
 8002f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	6809      	ldr	r1, [r1, #0]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69da      	ldr	r2, [r3, #28]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6911      	ldr	r1, [r2, #16]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68d2      	ldr	r2, [r2, #12]
 8002fca:	4311      	orrs	r1, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	000186a0 	.word	0x000186a0
 800302c:	001e847f 	.word	0x001e847f
 8003030:	003d08ff 	.word	0x003d08ff
 8003034:	431bde83 	.word	0x431bde83
 8003038:	10624dd3 	.word	0x10624dd3

0800303c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	461a      	mov	r2, r3
 8003048:	460b      	mov	r3, r1
 800304a:	817b      	strh	r3, [r7, #10]
 800304c:	4613      	mov	r3, r2
 800304e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003050:	f7ff f9ae 	bl	80023b0 <HAL_GetTick>
 8003054:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b20      	cmp	r3, #32
 8003060:	f040 80e0 	bne.w	8003224 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	2319      	movs	r3, #25
 800306a:	2201      	movs	r2, #1
 800306c:	4970      	ldr	r1, [pc, #448]	; (8003230 <HAL_I2C_Master_Transmit+0x1f4>)
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 fc66 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800307a:	2302      	movs	r3, #2
 800307c:	e0d3      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_I2C_Master_Transmit+0x50>
 8003088:	2302      	movs	r3, #2
 800308a:	e0cc      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d007      	beq.n	80030b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0201 	orr.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2221      	movs	r2, #33	; 0x21
 80030c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2210      	movs	r2, #16
 80030ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	893a      	ldrh	r2, [r7, #8]
 80030e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4a50      	ldr	r2, [pc, #320]	; (8003234 <HAL_I2C_Master_Transmit+0x1f8>)
 80030f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030f4:	8979      	ldrh	r1, [r7, #10]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	6a3a      	ldr	r2, [r7, #32]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 fad0 	bl	80036a0 <I2C_MasterRequestWrite>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e08d      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003120:	e066      	b.n	80031f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	6a39      	ldr	r1, [r7, #32]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 fce0 	bl	8003aec <I2C_WaitOnTXEFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00d      	beq.n	800314e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	2b04      	cmp	r3, #4
 8003138:	d107      	bne.n	800314a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003148:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e06b      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	781a      	ldrb	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b04      	cmp	r3, #4
 800318a:	d11b      	bne.n	80031c4 <HAL_I2C_Master_Transmit+0x188>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003190:	2b00      	cmp	r3, #0
 8003192:	d017      	beq.n	80031c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	781a      	ldrb	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	6a39      	ldr	r1, [r7, #32]
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 fcd0 	bl	8003b6e <I2C_WaitOnBTFFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00d      	beq.n	80031f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d107      	bne.n	80031ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e01a      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d194      	bne.n	8003122 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	e000      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003224:	2302      	movs	r3, #2
  }
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	00100002 	.word	0x00100002
 8003234:	ffff0000 	.word	0xffff0000

08003238 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08c      	sub	sp, #48	; 0x30
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	607a      	str	r2, [r7, #4]
 8003242:	461a      	mov	r2, r3
 8003244:	460b      	mov	r3, r1
 8003246:	817b      	strh	r3, [r7, #10]
 8003248:	4613      	mov	r3, r2
 800324a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800324c:	f7ff f8b0 	bl	80023b0 <HAL_GetTick>
 8003250:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b20      	cmp	r3, #32
 800325c:	f040 820b 	bne.w	8003676 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	2319      	movs	r3, #25
 8003266:	2201      	movs	r2, #1
 8003268:	497c      	ldr	r1, [pc, #496]	; (800345c <HAL_I2C_Master_Receive+0x224>)
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 fb68 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003276:	2302      	movs	r3, #2
 8003278:	e1fe      	b.n	8003678 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_I2C_Master_Receive+0x50>
 8003284:	2302      	movs	r3, #2
 8003286:	e1f7      	b.n	8003678 <HAL_I2C_Master_Receive+0x440>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b01      	cmp	r3, #1
 800329c:	d007      	beq.n	80032ae <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0201 	orr.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2222      	movs	r2, #34	; 0x22
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2210      	movs	r2, #16
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	893a      	ldrh	r2, [r7, #8]
 80032de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4a5c      	ldr	r2, [pc, #368]	; (8003460 <HAL_I2C_Master_Receive+0x228>)
 80032ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032f0:	8979      	ldrh	r1, [r7, #10]
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 fa54 	bl	80037a4 <I2C_MasterRequestRead>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e1b8      	b.n	8003678 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330a:	2b00      	cmp	r3, #0
 800330c:	d113      	bne.n	8003336 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800330e:	2300      	movs	r3, #0
 8003310:	623b      	str	r3, [r7, #32]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	623b      	str	r3, [r7, #32]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	623b      	str	r3, [r7, #32]
 8003322:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e18c      	b.n	8003650 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333a:	2b01      	cmp	r3, #1
 800333c:	d11b      	bne.n	8003376 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	61fb      	str	r3, [r7, #28]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	61fb      	str	r3, [r7, #28]
 8003362:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	e16c      	b.n	8003650 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337a:	2b02      	cmp	r3, #2
 800337c:	d11b      	bne.n	80033b6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800338c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800339c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339e:	2300      	movs	r3, #0
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	e14c      	b.n	8003650 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80033dc:	e138      	b.n	8003650 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	f200 80f1 	bhi.w	80035ca <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d123      	bne.n	8003438 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 fbfb 	bl	8003bf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e139      	b.n	8003678 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003436:	e10b      	b.n	8003650 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343c:	2b02      	cmp	r3, #2
 800343e:	d14e      	bne.n	80034de <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	2200      	movs	r2, #0
 8003448:	4906      	ldr	r1, [pc, #24]	; (8003464 <HAL_I2C_Master_Receive+0x22c>)
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fa78 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d008      	beq.n	8003468 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e10e      	b.n	8003678 <HAL_I2C_Master_Receive+0x440>
 800345a:	bf00      	nop
 800345c:	00100002 	.word	0x00100002
 8003460:	ffff0000 	.word	0xffff0000
 8003464:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003476:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034dc:	e0b8      	b.n	8003650 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	2200      	movs	r2, #0
 80034e6:	4966      	ldr	r1, [pc, #408]	; (8003680 <HAL_I2C_Master_Receive+0x448>)
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 fa29 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0bf      	b.n	8003678 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003506:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691a      	ldr	r2, [r3, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	2200      	movs	r2, #0
 8003542:	494f      	ldr	r1, [pc, #316]	; (8003680 <HAL_I2C_Master_Receive+0x448>)
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f9fb 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e091      	b.n	8003678 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003562:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358c:	b29b      	uxth	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035c8:	e042      	b.n	8003650 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 fb0e 	bl	8003bf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e04c      	b.n	8003678 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b04      	cmp	r3, #4
 800361c:	d118      	bne.n	8003650 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003654:	2b00      	cmp	r3, #0
 8003656:	f47f aec2 	bne.w	80033de <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	e000      	b.n	8003678 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003676:	2302      	movs	r3, #2
  }
}
 8003678:	4618      	mov	r0, r3
 800367a:	3728      	adds	r7, #40	; 0x28
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	00010004 	.word	0x00010004

08003684 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003692:	b2db      	uxtb	r3, r3
}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	607a      	str	r2, [r7, #4]
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	460b      	mov	r3, r1
 80036ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d006      	beq.n	80036ca <I2C_MasterRequestWrite+0x2a>
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d003      	beq.n	80036ca <I2C_MasterRequestWrite+0x2a>
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036c8:	d108      	bne.n	80036dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	e00b      	b.n	80036f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	2b12      	cmp	r3, #18
 80036e2:	d107      	bne.n	80036f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f91d 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00d      	beq.n	8003728 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800371a:	d103      	bne.n	8003724 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003722:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e035      	b.n	8003794 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003730:	d108      	bne.n	8003744 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003732:	897b      	ldrh	r3, [r7, #10]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	461a      	mov	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003740:	611a      	str	r2, [r3, #16]
 8003742:	e01b      	b.n	800377c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003744:	897b      	ldrh	r3, [r7, #10]
 8003746:	11db      	asrs	r3, r3, #7
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f003 0306 	and.w	r3, r3, #6
 800374e:	b2db      	uxtb	r3, r3
 8003750:	f063 030f 	orn	r3, r3, #15
 8003754:	b2da      	uxtb	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	490e      	ldr	r1, [pc, #56]	; (800379c <I2C_MasterRequestWrite+0xfc>)
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f943 	bl	80039ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e010      	b.n	8003794 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003772:	897b      	ldrh	r3, [r7, #10]
 8003774:	b2da      	uxtb	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	4907      	ldr	r1, [pc, #28]	; (80037a0 <I2C_MasterRequestWrite+0x100>)
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 f933 	bl	80039ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	00010008 	.word	0x00010008
 80037a0:	00010002 	.word	0x00010002

080037a4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af02      	add	r7, sp, #8
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	607a      	str	r2, [r7, #4]
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	460b      	mov	r3, r1
 80037b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037c8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d006      	beq.n	80037de <I2C_MasterRequestRead+0x3a>
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d003      	beq.n	80037de <I2C_MasterRequestRead+0x3a>
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037dc:	d108      	bne.n	80037f0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	e00b      	b.n	8003808 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	2b11      	cmp	r3, #17
 80037f6:	d107      	bne.n	8003808 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003806:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f893 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00d      	beq.n	800383c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382e:	d103      	bne.n	8003838 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003836:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e079      	b.n	8003930 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003844:	d108      	bne.n	8003858 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003846:	897b      	ldrh	r3, [r7, #10]
 8003848:	b2db      	uxtb	r3, r3
 800384a:	f043 0301 	orr.w	r3, r3, #1
 800384e:	b2da      	uxtb	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	611a      	str	r2, [r3, #16]
 8003856:	e05f      	b.n	8003918 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003858:	897b      	ldrh	r3, [r7, #10]
 800385a:	11db      	asrs	r3, r3, #7
 800385c:	b2db      	uxtb	r3, r3
 800385e:	f003 0306 	and.w	r3, r3, #6
 8003862:	b2db      	uxtb	r3, r3
 8003864:	f063 030f 	orn	r3, r3, #15
 8003868:	b2da      	uxtb	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	4930      	ldr	r1, [pc, #192]	; (8003938 <I2C_MasterRequestRead+0x194>)
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f8b9 	bl	80039ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e054      	b.n	8003930 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003886:	897b      	ldrh	r3, [r7, #10]
 8003888:	b2da      	uxtb	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	4929      	ldr	r1, [pc, #164]	; (800393c <I2C_MasterRequestRead+0x198>)
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f8a9 	bl	80039ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e044      	b.n	8003930 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a6:	2300      	movs	r3, #0
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 f831 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00d      	beq.n	8003900 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038f2:	d103      	bne.n	80038fc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038fa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e017      	b.n	8003930 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003900:	897b      	ldrh	r3, [r7, #10]
 8003902:	11db      	asrs	r3, r3, #7
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f003 0306 	and.w	r3, r3, #6
 800390a:	b2db      	uxtb	r3, r3
 800390c:	f063 030e 	orn	r3, r3, #14
 8003910:	b2da      	uxtb	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	4907      	ldr	r1, [pc, #28]	; (800393c <I2C_MasterRequestRead+0x198>)
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f865 	bl	80039ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	00010008 	.word	0x00010008
 800393c:	00010002 	.word	0x00010002

08003940 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	4613      	mov	r3, r2
 800394e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003950:	e025      	b.n	800399e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003958:	d021      	beq.n	800399e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395a:	f7fe fd29 	bl	80023b0 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d302      	bcc.n	8003970 <I2C_WaitOnFlagUntilTimeout+0x30>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d116      	bne.n	800399e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f043 0220 	orr.w	r2, r3, #32
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e023      	b.n	80039e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	0c1b      	lsrs	r3, r3, #16
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d10d      	bne.n	80039c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	43da      	mvns	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	4013      	ands	r3, r2
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	bf0c      	ite	eq
 80039ba:	2301      	moveq	r3, #1
 80039bc:	2300      	movne	r3, #0
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	e00c      	b.n	80039de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	43da      	mvns	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4013      	ands	r3, r2
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	bf0c      	ite	eq
 80039d6:	2301      	moveq	r3, #1
 80039d8:	2300      	movne	r3, #0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	461a      	mov	r2, r3
 80039de:	79fb      	ldrb	r3, [r7, #7]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d0b6      	beq.n	8003952 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
 80039fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039fc:	e051      	b.n	8003aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a0c:	d123      	bne.n	8003a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f043 0204 	orr.w	r2, r3, #4
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e046      	b.n	8003ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5c:	d021      	beq.n	8003aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5e:	f7fe fca7 	bl	80023b0 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d302      	bcc.n	8003a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d116      	bne.n	8003aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f043 0220 	orr.w	r2, r3, #32
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e020      	b.n	8003ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	0c1b      	lsrs	r3, r3, #16
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d10c      	bne.n	8003ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	43da      	mvns	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	bf14      	ite	ne
 8003abe:	2301      	movne	r3, #1
 8003ac0:	2300      	moveq	r3, #0
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	e00b      	b.n	8003ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	43da      	mvns	r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	bf14      	ite	ne
 8003ad8:	2301      	movne	r3, #1
 8003ada:	2300      	moveq	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d18d      	bne.n	80039fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003af8:	e02d      	b.n	8003b56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f8ce 	bl	8003c9c <I2C_IsAcknowledgeFailed>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e02d      	b.n	8003b66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b10:	d021      	beq.n	8003b56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b12:	f7fe fc4d 	bl	80023b0 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d302      	bcc.n	8003b28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d116      	bne.n	8003b56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f043 0220 	orr.w	r2, r3, #32
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e007      	b.n	8003b66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b60:	2b80      	cmp	r3, #128	; 0x80
 8003b62:	d1ca      	bne.n	8003afa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b7a:	e02d      	b.n	8003bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f88d 	bl	8003c9c <I2C_IsAcknowledgeFailed>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e02d      	b.n	8003be8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b92:	d021      	beq.n	8003bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b94:	f7fe fc0c 	bl	80023b0 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d302      	bcc.n	8003baa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d116      	bne.n	8003bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	f043 0220 	orr.w	r2, r3, #32
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e007      	b.n	8003be8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d1ca      	bne.n	8003b7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bfc:	e042      	b.n	8003c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d119      	bne.n	8003c40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0210 	mvn.w	r2, #16
 8003c14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e029      	b.n	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c40:	f7fe fbb6 	bl	80023b0 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d302      	bcc.n	8003c56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d116      	bne.n	8003c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	f043 0220 	orr.w	r2, r3, #32
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e007      	b.n	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8e:	2b40      	cmp	r3, #64	; 0x40
 8003c90:	d1b5      	bne.n	8003bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb2:	d11b      	bne.n	8003cec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	f043 0204 	orr.w	r2, r3, #4
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
	...

08003cfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e267      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d075      	beq.n	8003e06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d1a:	4b88      	ldr	r3, [pc, #544]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d00c      	beq.n	8003d40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d26:	4b85      	ldr	r3, [pc, #532]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d112      	bne.n	8003d58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d32:	4b82      	ldr	r3, [pc, #520]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d3e:	d10b      	bne.n	8003d58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d40:	4b7e      	ldr	r3, [pc, #504]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d05b      	beq.n	8003e04 <HAL_RCC_OscConfig+0x108>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d157      	bne.n	8003e04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e242      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d60:	d106      	bne.n	8003d70 <HAL_RCC_OscConfig+0x74>
 8003d62:	4b76      	ldr	r3, [pc, #472]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a75      	ldr	r2, [pc, #468]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	e01d      	b.n	8003dac <HAL_RCC_OscConfig+0xb0>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x98>
 8003d7a:	4b70      	ldr	r3, [pc, #448]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a6f      	ldr	r2, [pc, #444]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	4b6d      	ldr	r3, [pc, #436]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a6c      	ldr	r2, [pc, #432]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	e00b      	b.n	8003dac <HAL_RCC_OscConfig+0xb0>
 8003d94:	4b69      	ldr	r3, [pc, #420]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a68      	ldr	r2, [pc, #416]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	4b66      	ldr	r3, [pc, #408]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a65      	ldr	r2, [pc, #404]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d013      	beq.n	8003ddc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db4:	f7fe fafc 	bl	80023b0 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dbc:	f7fe faf8 	bl	80023b0 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b64      	cmp	r3, #100	; 0x64
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e207      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dce:	4b5b      	ldr	r3, [pc, #364]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0xc0>
 8003dda:	e014      	b.n	8003e06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fe fae8 	bl	80023b0 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fe fae4 	bl	80023b0 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	; 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e1f3      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df6:	4b51      	ldr	r3, [pc, #324]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0xe8>
 8003e02:	e000      	b.n	8003e06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d063      	beq.n	8003eda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e12:	4b4a      	ldr	r3, [pc, #296]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00b      	beq.n	8003e36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e1e:	4b47      	ldr	r3, [pc, #284]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d11c      	bne.n	8003e64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2a:	4b44      	ldr	r3, [pc, #272]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d116      	bne.n	8003e64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e36:	4b41      	ldr	r3, [pc, #260]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_RCC_OscConfig+0x152>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d001      	beq.n	8003e4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e1c7      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4e:	4b3b      	ldr	r3, [pc, #236]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4937      	ldr	r1, [pc, #220]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e62:	e03a      	b.n	8003eda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d020      	beq.n	8003eae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e6c:	4b34      	ldr	r3, [pc, #208]	; (8003f40 <HAL_RCC_OscConfig+0x244>)
 8003e6e:	2201      	movs	r2, #1
 8003e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e72:	f7fe fa9d 	bl	80023b0 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e7a:	f7fe fa99 	bl	80023b0 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e1a8      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e8c:	4b2b      	ldr	r3, [pc, #172]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e98:	4b28      	ldr	r3, [pc, #160]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	4925      	ldr	r1, [pc, #148]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	600b      	str	r3, [r1, #0]
 8003eac:	e015      	b.n	8003eda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eae:	4b24      	ldr	r3, [pc, #144]	; (8003f40 <HAL_RCC_OscConfig+0x244>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fe fa7c 	bl	80023b0 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ebc:	f7fe fa78 	bl	80023b0 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e187      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ece:	4b1b      	ldr	r3, [pc, #108]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d036      	beq.n	8003f54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d016      	beq.n	8003f1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eee:	4b15      	ldr	r3, [pc, #84]	; (8003f44 <HAL_RCC_OscConfig+0x248>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef4:	f7fe fa5c 	bl	80023b0 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003efc:	f7fe fa58 	bl	80023b0 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e167      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0e:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <HAL_RCC_OscConfig+0x240>)
 8003f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0f0      	beq.n	8003efc <HAL_RCC_OscConfig+0x200>
 8003f1a:	e01b      	b.n	8003f54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f1c:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <HAL_RCC_OscConfig+0x248>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f22:	f7fe fa45 	bl	80023b0 <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f28:	e00e      	b.n	8003f48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f2a:	f7fe fa41 	bl	80023b0 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d907      	bls.n	8003f48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e150      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	42470000 	.word	0x42470000
 8003f44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f48:	4b88      	ldr	r3, [pc, #544]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8003f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1ea      	bne.n	8003f2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 8097 	beq.w	8004090 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f62:	2300      	movs	r3, #0
 8003f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f66:	4b81      	ldr	r3, [pc, #516]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10f      	bne.n	8003f92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	4b7d      	ldr	r3, [pc, #500]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	4a7c      	ldr	r2, [pc, #496]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8003f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f80:	6413      	str	r3, [r2, #64]	; 0x40
 8003f82:	4b7a      	ldr	r3, [pc, #488]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	60bb      	str	r3, [r7, #8]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f92:	4b77      	ldr	r3, [pc, #476]	; (8004170 <HAL_RCC_OscConfig+0x474>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d118      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f9e:	4b74      	ldr	r3, [pc, #464]	; (8004170 <HAL_RCC_OscConfig+0x474>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a73      	ldr	r2, [pc, #460]	; (8004170 <HAL_RCC_OscConfig+0x474>)
 8003fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003faa:	f7fe fa01 	bl	80023b0 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb2:	f7fe f9fd 	bl	80023b0 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e10c      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc4:	4b6a      	ldr	r3, [pc, #424]	; (8004170 <HAL_RCC_OscConfig+0x474>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d106      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x2ea>
 8003fd8:	4b64      	ldr	r3, [pc, #400]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8003fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fdc:	4a63      	ldr	r2, [pc, #396]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8003fde:	f043 0301 	orr.w	r3, r3, #1
 8003fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe4:	e01c      	b.n	8004020 <HAL_RCC_OscConfig+0x324>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b05      	cmp	r3, #5
 8003fec:	d10c      	bne.n	8004008 <HAL_RCC_OscConfig+0x30c>
 8003fee:	4b5f      	ldr	r3, [pc, #380]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	4a5e      	ldr	r2, [pc, #376]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8003ff4:	f043 0304 	orr.w	r3, r3, #4
 8003ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8003ffa:	4b5c      	ldr	r3, [pc, #368]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffe:	4a5b      	ldr	r2, [pc, #364]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	6713      	str	r3, [r2, #112]	; 0x70
 8004006:	e00b      	b.n	8004020 <HAL_RCC_OscConfig+0x324>
 8004008:	4b58      	ldr	r3, [pc, #352]	; (800416c <HAL_RCC_OscConfig+0x470>)
 800400a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400c:	4a57      	ldr	r2, [pc, #348]	; (800416c <HAL_RCC_OscConfig+0x470>)
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	6713      	str	r3, [r2, #112]	; 0x70
 8004014:	4b55      	ldr	r3, [pc, #340]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004018:	4a54      	ldr	r2, [pc, #336]	; (800416c <HAL_RCC_OscConfig+0x470>)
 800401a:	f023 0304 	bic.w	r3, r3, #4
 800401e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d015      	beq.n	8004054 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004028:	f7fe f9c2 	bl	80023b0 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800402e:	e00a      	b.n	8004046 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004030:	f7fe f9be 	bl	80023b0 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	f241 3288 	movw	r2, #5000	; 0x1388
 800403e:	4293      	cmp	r3, r2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e0cb      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004046:	4b49      	ldr	r3, [pc, #292]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0ee      	beq.n	8004030 <HAL_RCC_OscConfig+0x334>
 8004052:	e014      	b.n	800407e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004054:	f7fe f9ac 	bl	80023b0 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800405a:	e00a      	b.n	8004072 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800405c:	f7fe f9a8 	bl	80023b0 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	f241 3288 	movw	r2, #5000	; 0x1388
 800406a:	4293      	cmp	r3, r2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e0b5      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004072:	4b3e      	ldr	r3, [pc, #248]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1ee      	bne.n	800405c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800407e:	7dfb      	ldrb	r3, [r7, #23]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d105      	bne.n	8004090 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004084:	4b39      	ldr	r3, [pc, #228]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	4a38      	ldr	r2, [pc, #224]	; (800416c <HAL_RCC_OscConfig+0x470>)
 800408a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800408e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 80a1 	beq.w	80041dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800409a:	4b34      	ldr	r3, [pc, #208]	; (800416c <HAL_RCC_OscConfig+0x470>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d05c      	beq.n	8004160 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d141      	bne.n	8004132 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ae:	4b31      	ldr	r3, [pc, #196]	; (8004174 <HAL_RCC_OscConfig+0x478>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7fe f97c 	bl	80023b0 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040bc:	f7fe f978 	bl	80023b0 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e087      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ce:	4b27      	ldr	r3, [pc, #156]	; (800416c <HAL_RCC_OscConfig+0x470>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69da      	ldr	r2, [r3, #28]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	019b      	lsls	r3, r3, #6
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f0:	085b      	lsrs	r3, r3, #1
 80040f2:	3b01      	subs	r3, #1
 80040f4:	041b      	lsls	r3, r3, #16
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	061b      	lsls	r3, r3, #24
 80040fe:	491b      	ldr	r1, [pc, #108]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8004100:	4313      	orrs	r3, r2
 8004102:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004104:	4b1b      	ldr	r3, [pc, #108]	; (8004174 <HAL_RCC_OscConfig+0x478>)
 8004106:	2201      	movs	r2, #1
 8004108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410a:	f7fe f951 	bl	80023b0 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004112:	f7fe f94d 	bl	80023b0 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e05c      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004124:	4b11      	ldr	r3, [pc, #68]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x416>
 8004130:	e054      	b.n	80041dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004132:	4b10      	ldr	r3, [pc, #64]	; (8004174 <HAL_RCC_OscConfig+0x478>)
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004138:	f7fe f93a 	bl	80023b0 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004140:	f7fe f936 	bl	80023b0 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e045      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004152:	4b06      	ldr	r3, [pc, #24]	; (800416c <HAL_RCC_OscConfig+0x470>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x444>
 800415e:	e03d      	b.n	80041dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d107      	bne.n	8004178 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e038      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
 800416c:	40023800 	.word	0x40023800
 8004170:	40007000 	.word	0x40007000
 8004174:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004178:	4b1b      	ldr	r3, [pc, #108]	; (80041e8 <HAL_RCC_OscConfig+0x4ec>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d028      	beq.n	80041d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004190:	429a      	cmp	r2, r3
 8004192:	d121      	bne.n	80041d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419e:	429a      	cmp	r2, r3
 80041a0:	d11a      	bne.n	80041d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041a8:	4013      	ands	r3, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d111      	bne.n	80041d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	3b01      	subs	r3, #1
 80041c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d107      	bne.n	80041d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d001      	beq.n	80041dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e000      	b.n	80041de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40023800 	.word	0x40023800

080041ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0cc      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004200:	4b68      	ldr	r3, [pc, #416]	; (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d90c      	bls.n	8004228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420e:	4b65      	ldr	r3, [pc, #404]	; (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004216:	4b63      	ldr	r3, [pc, #396]	; (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d001      	beq.n	8004228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0b8      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d020      	beq.n	8004276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004240:	4b59      	ldr	r3, [pc, #356]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	4a58      	ldr	r2, [pc, #352]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800424a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d005      	beq.n	8004264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004258:	4b53      	ldr	r3, [pc, #332]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	4a52      	ldr	r2, [pc, #328]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004264:	4b50      	ldr	r3, [pc, #320]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	494d      	ldr	r1, [pc, #308]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	4313      	orrs	r3, r2
 8004274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d044      	beq.n	800430c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d107      	bne.n	800429a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428a:	4b47      	ldr	r3, [pc, #284]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d119      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e07f      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d003      	beq.n	80042aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d107      	bne.n	80042ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042aa:	4b3f      	ldr	r3, [pc, #252]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d109      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e06f      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ba:	4b3b      	ldr	r3, [pc, #236]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e067      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ca:	4b37      	ldr	r3, [pc, #220]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f023 0203 	bic.w	r2, r3, #3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4934      	ldr	r1, [pc, #208]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042dc:	f7fe f868 	bl	80023b0 <HAL_GetTick>
 80042e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e2:	e00a      	b.n	80042fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e4:	f7fe f864 	bl	80023b0 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e04f      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fa:	4b2b      	ldr	r3, [pc, #172]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 020c 	and.w	r2, r3, #12
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	429a      	cmp	r2, r3
 800430a:	d1eb      	bne.n	80042e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800430c:	4b25      	ldr	r3, [pc, #148]	; (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d20c      	bcs.n	8004334 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b22      	ldr	r3, [pc, #136]	; (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004322:	4b20      	ldr	r3, [pc, #128]	; (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e032      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004340:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	4916      	ldr	r1, [pc, #88]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d009      	beq.n	8004372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800435e:	4b12      	ldr	r3, [pc, #72]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	490e      	ldr	r1, [pc, #56]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	4313      	orrs	r3, r2
 8004370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004372:	f000 f821 	bl	80043b8 <HAL_RCC_GetSysClockFreq>
 8004376:	4602      	mov	r2, r0
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	091b      	lsrs	r3, r3, #4
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	490a      	ldr	r1, [pc, #40]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004384:	5ccb      	ldrb	r3, [r1, r3]
 8004386:	fa22 f303 	lsr.w	r3, r2, r3
 800438a:	4a09      	ldr	r2, [pc, #36]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800438c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800438e:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f7fd ffc8 	bl	8002328 <HAL_InitTick>

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40023c00 	.word	0x40023c00
 80043a8:	40023800 	.word	0x40023800
 80043ac:	08007104 	.word	0x08007104
 80043b0:	2000000c 	.word	0x2000000c
 80043b4:	20000010 	.word	0x20000010

080043b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043bc:	b090      	sub	sp, #64	; 0x40
 80043be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	637b      	str	r3, [r7, #52]	; 0x34
 80043c4:	2300      	movs	r3, #0
 80043c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043c8:	2300      	movs	r3, #0
 80043ca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043d0:	4b59      	ldr	r3, [pc, #356]	; (8004538 <HAL_RCC_GetSysClockFreq+0x180>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f003 030c 	and.w	r3, r3, #12
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d00d      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0x40>
 80043dc:	2b08      	cmp	r3, #8
 80043de:	f200 80a1 	bhi.w	8004524 <HAL_RCC_GetSysClockFreq+0x16c>
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <HAL_RCC_GetSysClockFreq+0x34>
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d003      	beq.n	80043f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80043ea:	e09b      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043ec:	4b53      	ldr	r3, [pc, #332]	; (800453c <HAL_RCC_GetSysClockFreq+0x184>)
 80043ee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80043f0:	e09b      	b.n	800452a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043f2:	4b53      	ldr	r3, [pc, #332]	; (8004540 <HAL_RCC_GetSysClockFreq+0x188>)
 80043f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043f6:	e098      	b.n	800452a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043f8:	4b4f      	ldr	r3, [pc, #316]	; (8004538 <HAL_RCC_GetSysClockFreq+0x180>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004400:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004402:	4b4d      	ldr	r3, [pc, #308]	; (8004538 <HAL_RCC_GetSysClockFreq+0x180>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d028      	beq.n	8004460 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800440e:	4b4a      	ldr	r3, [pc, #296]	; (8004538 <HAL_RCC_GetSysClockFreq+0x180>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	099b      	lsrs	r3, r3, #6
 8004414:	2200      	movs	r2, #0
 8004416:	623b      	str	r3, [r7, #32]
 8004418:	627a      	str	r2, [r7, #36]	; 0x24
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004420:	2100      	movs	r1, #0
 8004422:	4b47      	ldr	r3, [pc, #284]	; (8004540 <HAL_RCC_GetSysClockFreq+0x188>)
 8004424:	fb03 f201 	mul.w	r2, r3, r1
 8004428:	2300      	movs	r3, #0
 800442a:	fb00 f303 	mul.w	r3, r0, r3
 800442e:	4413      	add	r3, r2
 8004430:	4a43      	ldr	r2, [pc, #268]	; (8004540 <HAL_RCC_GetSysClockFreq+0x188>)
 8004432:	fba0 1202 	umull	r1, r2, r0, r2
 8004436:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004438:	460a      	mov	r2, r1
 800443a:	62ba      	str	r2, [r7, #40]	; 0x28
 800443c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800443e:	4413      	add	r3, r2
 8004440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004444:	2200      	movs	r2, #0
 8004446:	61bb      	str	r3, [r7, #24]
 8004448:	61fa      	str	r2, [r7, #28]
 800444a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800444e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004452:	f7fc fbd9 	bl	8000c08 <__aeabi_uldivmod>
 8004456:	4602      	mov	r2, r0
 8004458:	460b      	mov	r3, r1
 800445a:	4613      	mov	r3, r2
 800445c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800445e:	e053      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004460:	4b35      	ldr	r3, [pc, #212]	; (8004538 <HAL_RCC_GetSysClockFreq+0x180>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	099b      	lsrs	r3, r3, #6
 8004466:	2200      	movs	r2, #0
 8004468:	613b      	str	r3, [r7, #16]
 800446a:	617a      	str	r2, [r7, #20]
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004472:	f04f 0b00 	mov.w	fp, #0
 8004476:	4652      	mov	r2, sl
 8004478:	465b      	mov	r3, fp
 800447a:	f04f 0000 	mov.w	r0, #0
 800447e:	f04f 0100 	mov.w	r1, #0
 8004482:	0159      	lsls	r1, r3, #5
 8004484:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004488:	0150      	lsls	r0, r2, #5
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	ebb2 080a 	subs.w	r8, r2, sl
 8004492:	eb63 090b 	sbc.w	r9, r3, fp
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80044a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80044a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80044aa:	ebb2 0408 	subs.w	r4, r2, r8
 80044ae:	eb63 0509 	sbc.w	r5, r3, r9
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	00eb      	lsls	r3, r5, #3
 80044bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044c0:	00e2      	lsls	r2, r4, #3
 80044c2:	4614      	mov	r4, r2
 80044c4:	461d      	mov	r5, r3
 80044c6:	eb14 030a 	adds.w	r3, r4, sl
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	eb45 030b 	adc.w	r3, r5, fp
 80044d0:	607b      	str	r3, [r7, #4]
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044de:	4629      	mov	r1, r5
 80044e0:	028b      	lsls	r3, r1, #10
 80044e2:	4621      	mov	r1, r4
 80044e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044e8:	4621      	mov	r1, r4
 80044ea:	028a      	lsls	r2, r1, #10
 80044ec:	4610      	mov	r0, r2
 80044ee:	4619      	mov	r1, r3
 80044f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f2:	2200      	movs	r2, #0
 80044f4:	60bb      	str	r3, [r7, #8]
 80044f6:	60fa      	str	r2, [r7, #12]
 80044f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044fc:	f7fc fb84 	bl	8000c08 <__aeabi_uldivmod>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4613      	mov	r3, r2
 8004506:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004508:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <HAL_RCC_GetSysClockFreq+0x180>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	0c1b      	lsrs	r3, r3, #16
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	3301      	adds	r3, #1
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004518:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800451a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004520:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004522:	e002      	b.n	800452a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <HAL_RCC_GetSysClockFreq+0x184>)
 8004526:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800452a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800452c:	4618      	mov	r0, r3
 800452e:	3740      	adds	r7, #64	; 0x40
 8004530:	46bd      	mov	sp, r7
 8004532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004536:	bf00      	nop
 8004538:	40023800 	.word	0x40023800
 800453c:	00f42400 	.word	0x00f42400
 8004540:	017d7840 	.word	0x017d7840

08004544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004548:	4b03      	ldr	r3, [pc, #12]	; (8004558 <HAL_RCC_GetHCLKFreq+0x14>)
 800454a:	681b      	ldr	r3, [r3, #0]
}
 800454c:	4618      	mov	r0, r3
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	2000000c 	.word	0x2000000c

0800455c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004560:	f7ff fff0 	bl	8004544 <HAL_RCC_GetHCLKFreq>
 8004564:	4602      	mov	r2, r0
 8004566:	4b05      	ldr	r3, [pc, #20]	; (800457c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	0a9b      	lsrs	r3, r3, #10
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	4903      	ldr	r1, [pc, #12]	; (8004580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004572:	5ccb      	ldrb	r3, [r1, r3]
 8004574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004578:	4618      	mov	r0, r3
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40023800 	.word	0x40023800
 8004580:	08007114 	.word	0x08007114

08004584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004588:	f7ff ffdc 	bl	8004544 <HAL_RCC_GetHCLKFreq>
 800458c:	4602      	mov	r2, r0
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	0b5b      	lsrs	r3, r3, #13
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	4903      	ldr	r1, [pc, #12]	; (80045a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800459a:	5ccb      	ldrb	r3, [r1, r3]
 800459c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40023800 	.word	0x40023800
 80045a8:	08007114 	.word	0x08007114

080045ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e041      	b.n	8004642 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fd fcf0 	bl	8001fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3304      	adds	r3, #4
 80045e8:	4619      	mov	r1, r3
 80045ea:	4610      	mov	r0, r2
 80045ec:	f000 f950 	bl	8004890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b01      	cmp	r3, #1
 800465e:	d001      	beq.n	8004664 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e03c      	b.n	80046de <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a1e      	ldr	r2, [pc, #120]	; (80046ec <HAL_TIM_Base_Start+0xa0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d018      	beq.n	80046a8 <HAL_TIM_Base_Start+0x5c>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467e:	d013      	beq.n	80046a8 <HAL_TIM_Base_Start+0x5c>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a1a      	ldr	r2, [pc, #104]	; (80046f0 <HAL_TIM_Base_Start+0xa4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d00e      	beq.n	80046a8 <HAL_TIM_Base_Start+0x5c>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a19      	ldr	r2, [pc, #100]	; (80046f4 <HAL_TIM_Base_Start+0xa8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d009      	beq.n	80046a8 <HAL_TIM_Base_Start+0x5c>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a17      	ldr	r2, [pc, #92]	; (80046f8 <HAL_TIM_Base_Start+0xac>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d004      	beq.n	80046a8 <HAL_TIM_Base_Start+0x5c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a16      	ldr	r2, [pc, #88]	; (80046fc <HAL_TIM_Base_Start+0xb0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d111      	bne.n	80046cc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b06      	cmp	r3, #6
 80046b8:	d010      	beq.n	80046dc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f042 0201 	orr.w	r2, r2, #1
 80046c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ca:	e007      	b.n	80046dc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0201 	orr.w	r2, r2, #1
 80046da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40010000 	.word	0x40010000
 80046f0:	40000400 	.word	0x40000400
 80046f4:	40000800 	.word	0x40000800
 80046f8:	40000c00 	.word	0x40000c00
 80046fc:	40014000 	.word	0x40014000

08004700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_TIM_ConfigClockSource+0x1c>
 8004718:	2302      	movs	r3, #2
 800471a:	e0b4      	b.n	8004886 <HAL_TIM_ConfigClockSource+0x186>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800473a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004742:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004754:	d03e      	beq.n	80047d4 <HAL_TIM_ConfigClockSource+0xd4>
 8004756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475a:	f200 8087 	bhi.w	800486c <HAL_TIM_ConfigClockSource+0x16c>
 800475e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004762:	f000 8086 	beq.w	8004872 <HAL_TIM_ConfigClockSource+0x172>
 8004766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476a:	d87f      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
 800476c:	2b70      	cmp	r3, #112	; 0x70
 800476e:	d01a      	beq.n	80047a6 <HAL_TIM_ConfigClockSource+0xa6>
 8004770:	2b70      	cmp	r3, #112	; 0x70
 8004772:	d87b      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
 8004774:	2b60      	cmp	r3, #96	; 0x60
 8004776:	d050      	beq.n	800481a <HAL_TIM_ConfigClockSource+0x11a>
 8004778:	2b60      	cmp	r3, #96	; 0x60
 800477a:	d877      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
 800477c:	2b50      	cmp	r3, #80	; 0x50
 800477e:	d03c      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0xfa>
 8004780:	2b50      	cmp	r3, #80	; 0x50
 8004782:	d873      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
 8004784:	2b40      	cmp	r3, #64	; 0x40
 8004786:	d058      	beq.n	800483a <HAL_TIM_ConfigClockSource+0x13a>
 8004788:	2b40      	cmp	r3, #64	; 0x40
 800478a:	d86f      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
 800478c:	2b30      	cmp	r3, #48	; 0x30
 800478e:	d064      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x15a>
 8004790:	2b30      	cmp	r3, #48	; 0x30
 8004792:	d86b      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
 8004794:	2b20      	cmp	r3, #32
 8004796:	d060      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x15a>
 8004798:	2b20      	cmp	r3, #32
 800479a:	d867      	bhi.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
 800479c:	2b00      	cmp	r3, #0
 800479e:	d05c      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x15a>
 80047a0:	2b10      	cmp	r3, #16
 80047a2:	d05a      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x15a>
 80047a4:	e062      	b.n	800486c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	6899      	ldr	r1, [r3, #8]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f000 f965 	bl	8004a84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	609a      	str	r2, [r3, #8]
      break;
 80047d2:	e04f      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	6899      	ldr	r1, [r3, #8]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f000 f94e 	bl	8004a84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047f6:	609a      	str	r2, [r3, #8]
      break;
 80047f8:	e03c      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6818      	ldr	r0, [r3, #0]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	6859      	ldr	r1, [r3, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	461a      	mov	r2, r3
 8004808:	f000 f8c2 	bl	8004990 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2150      	movs	r1, #80	; 0x50
 8004812:	4618      	mov	r0, r3
 8004814:	f000 f91b 	bl	8004a4e <TIM_ITRx_SetConfig>
      break;
 8004818:	e02c      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6818      	ldr	r0, [r3, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6859      	ldr	r1, [r3, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	461a      	mov	r2, r3
 8004828:	f000 f8e1 	bl	80049ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2160      	movs	r1, #96	; 0x60
 8004832:	4618      	mov	r0, r3
 8004834:	f000 f90b 	bl	8004a4e <TIM_ITRx_SetConfig>
      break;
 8004838:	e01c      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6859      	ldr	r1, [r3, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	461a      	mov	r2, r3
 8004848:	f000 f8a2 	bl	8004990 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2140      	movs	r1, #64	; 0x40
 8004852:	4618      	mov	r0, r3
 8004854:	f000 f8fb 	bl	8004a4e <TIM_ITRx_SetConfig>
      break;
 8004858:	e00c      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4619      	mov	r1, r3
 8004864:	4610      	mov	r0, r2
 8004866:	f000 f8f2 	bl	8004a4e <TIM_ITRx_SetConfig>
      break;
 800486a:	e003      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	73fb      	strb	r3, [r7, #15]
      break;
 8004870:	e000      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004872:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004884:	7bfb      	ldrb	r3, [r7, #15]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a34      	ldr	r2, [pc, #208]	; (8004974 <TIM_Base_SetConfig+0xe4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00f      	beq.n	80048c8 <TIM_Base_SetConfig+0x38>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ae:	d00b      	beq.n	80048c8 <TIM_Base_SetConfig+0x38>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a31      	ldr	r2, [pc, #196]	; (8004978 <TIM_Base_SetConfig+0xe8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d007      	beq.n	80048c8 <TIM_Base_SetConfig+0x38>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a30      	ldr	r2, [pc, #192]	; (800497c <TIM_Base_SetConfig+0xec>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d003      	beq.n	80048c8 <TIM_Base_SetConfig+0x38>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a2f      	ldr	r2, [pc, #188]	; (8004980 <TIM_Base_SetConfig+0xf0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d108      	bne.n	80048da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a25      	ldr	r2, [pc, #148]	; (8004974 <TIM_Base_SetConfig+0xe4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d01b      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e8:	d017      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a22      	ldr	r2, [pc, #136]	; (8004978 <TIM_Base_SetConfig+0xe8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a21      	ldr	r2, [pc, #132]	; (800497c <TIM_Base_SetConfig+0xec>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00f      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a20      	ldr	r2, [pc, #128]	; (8004980 <TIM_Base_SetConfig+0xf0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00b      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a1f      	ldr	r2, [pc, #124]	; (8004984 <TIM_Base_SetConfig+0xf4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d007      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a1e      	ldr	r2, [pc, #120]	; (8004988 <TIM_Base_SetConfig+0xf8>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d003      	beq.n	800491a <TIM_Base_SetConfig+0x8a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a1d      	ldr	r2, [pc, #116]	; (800498c <TIM_Base_SetConfig+0xfc>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d108      	bne.n	800492c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a08      	ldr	r2, [pc, #32]	; (8004974 <TIM_Base_SetConfig+0xe4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d103      	bne.n	8004960 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	615a      	str	r2, [r3, #20]
}
 8004966:	bf00      	nop
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	40010000 	.word	0x40010000
 8004978:	40000400 	.word	0x40000400
 800497c:	40000800 	.word	0x40000800
 8004980:	40000c00 	.word	0x40000c00
 8004984:	40014000 	.word	0x40014000
 8004988:	40014400 	.word	0x40014400
 800498c:	40014800 	.word	0x40014800

08004990 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	f023 0201 	bic.w	r2, r3, #1
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f023 030a 	bic.w	r3, r3, #10
 80049cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	621a      	str	r2, [r3, #32]
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b087      	sub	sp, #28
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f023 0210 	bic.w	r2, r3, #16
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	031b      	lsls	r3, r3, #12
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	621a      	str	r2, [r3, #32]
}
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b085      	sub	sp, #20
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f043 0307 	orr.w	r3, r3, #7
 8004a70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	609a      	str	r2, [r3, #8]
}
 8004a78:	bf00      	nop
 8004a7a:	3714      	adds	r7, #20
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	021a      	lsls	r2, r3, #8
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	609a      	str	r2, [r3, #8]
}
 8004ab8:	bf00      	nop
 8004aba:	371c      	adds	r7, #28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e050      	b.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1c      	ldr	r2, [pc, #112]	; (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d018      	beq.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b28:	d013      	beq.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a18      	ldr	r2, [pc, #96]	; (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00e      	beq.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a16      	ldr	r2, [pc, #88]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d009      	beq.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a15      	ldr	r2, [pc, #84]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d004      	beq.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a13      	ldr	r2, [pc, #76]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d10c      	bne.n	8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40010000 	.word	0x40010000
 8004b90:	40000400 	.word	0x40000400
 8004b94:	40000800 	.word	0x40000800
 8004b98:	40000c00 	.word	0x40000c00
 8004b9c:	40014000 	.word	0x40014000

08004ba0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e03f      	b.n	8004c32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d106      	bne.n	8004bcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fd fa18 	bl	8001ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2224      	movs	r2, #36	; 0x24
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68da      	ldr	r2, [r3, #12]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004be2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f829 	bl	8004c3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695a      	ldr	r2, [r3, #20]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c40:	b0c0      	sub	sp, #256	; 0x100
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c58:	68d9      	ldr	r1, [r3, #12]
 8004c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	ea40 0301 	orr.w	r3, r0, r1
 8004c64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	431a      	orrs	r2, r3
 8004c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c94:	f021 010c 	bic.w	r1, r1, #12
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ca2:	430b      	orrs	r3, r1
 8004ca4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb6:	6999      	ldr	r1, [r3, #24]
 8004cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	ea40 0301 	orr.w	r3, r0, r1
 8004cc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	4b8f      	ldr	r3, [pc, #572]	; (8004f08 <UART_SetConfig+0x2cc>)
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d005      	beq.n	8004cdc <UART_SetConfig+0xa0>
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4b8d      	ldr	r3, [pc, #564]	; (8004f0c <UART_SetConfig+0x2d0>)
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d104      	bne.n	8004ce6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cdc:	f7ff fc52 	bl	8004584 <HAL_RCC_GetPCLK2Freq>
 8004ce0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ce4:	e003      	b.n	8004cee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ce6:	f7ff fc39 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 8004cea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf8:	f040 810c 	bne.w	8004f14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d00:	2200      	movs	r2, #0
 8004d02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d0e:	4622      	mov	r2, r4
 8004d10:	462b      	mov	r3, r5
 8004d12:	1891      	adds	r1, r2, r2
 8004d14:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d16:	415b      	adcs	r3, r3
 8004d18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d1e:	4621      	mov	r1, r4
 8004d20:	eb12 0801 	adds.w	r8, r2, r1
 8004d24:	4629      	mov	r1, r5
 8004d26:	eb43 0901 	adc.w	r9, r3, r1
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d3e:	4690      	mov	r8, r2
 8004d40:	4699      	mov	r9, r3
 8004d42:	4623      	mov	r3, r4
 8004d44:	eb18 0303 	adds.w	r3, r8, r3
 8004d48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d4c:	462b      	mov	r3, r5
 8004d4e:	eb49 0303 	adc.w	r3, r9, r3
 8004d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	18db      	adds	r3, r3, r3
 8004d6e:	653b      	str	r3, [r7, #80]	; 0x50
 8004d70:	4613      	mov	r3, r2
 8004d72:	eb42 0303 	adc.w	r3, r2, r3
 8004d76:	657b      	str	r3, [r7, #84]	; 0x54
 8004d78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d80:	f7fb ff42 	bl	8000c08 <__aeabi_uldivmod>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	4b61      	ldr	r3, [pc, #388]	; (8004f10 <UART_SetConfig+0x2d4>)
 8004d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	011c      	lsls	r4, r3, #4
 8004d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d96:	2200      	movs	r2, #0
 8004d98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004da0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004da4:	4642      	mov	r2, r8
 8004da6:	464b      	mov	r3, r9
 8004da8:	1891      	adds	r1, r2, r2
 8004daa:	64b9      	str	r1, [r7, #72]	; 0x48
 8004dac:	415b      	adcs	r3, r3
 8004dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004db0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004db4:	4641      	mov	r1, r8
 8004db6:	eb12 0a01 	adds.w	sl, r2, r1
 8004dba:	4649      	mov	r1, r9
 8004dbc:	eb43 0b01 	adc.w	fp, r3, r1
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004dcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004dd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dd4:	4692      	mov	sl, r2
 8004dd6:	469b      	mov	fp, r3
 8004dd8:	4643      	mov	r3, r8
 8004dda:	eb1a 0303 	adds.w	r3, sl, r3
 8004dde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004de2:	464b      	mov	r3, r9
 8004de4:	eb4b 0303 	adc.w	r3, fp, r3
 8004de8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004df8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004dfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e00:	460b      	mov	r3, r1
 8004e02:	18db      	adds	r3, r3, r3
 8004e04:	643b      	str	r3, [r7, #64]	; 0x40
 8004e06:	4613      	mov	r3, r2
 8004e08:	eb42 0303 	adc.w	r3, r2, r3
 8004e0c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e16:	f7fb fef7 	bl	8000c08 <__aeabi_uldivmod>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4611      	mov	r1, r2
 8004e20:	4b3b      	ldr	r3, [pc, #236]	; (8004f10 <UART_SetConfig+0x2d4>)
 8004e22:	fba3 2301 	umull	r2, r3, r3, r1
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	2264      	movs	r2, #100	; 0x64
 8004e2a:	fb02 f303 	mul.w	r3, r2, r3
 8004e2e:	1acb      	subs	r3, r1, r3
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e36:	4b36      	ldr	r3, [pc, #216]	; (8004f10 <UART_SetConfig+0x2d4>)
 8004e38:	fba3 2302 	umull	r2, r3, r3, r2
 8004e3c:	095b      	lsrs	r3, r3, #5
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e44:	441c      	add	r4, r3
 8004e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e58:	4642      	mov	r2, r8
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	1891      	adds	r1, r2, r2
 8004e5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e60:	415b      	adcs	r3, r3
 8004e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e68:	4641      	mov	r1, r8
 8004e6a:	1851      	adds	r1, r2, r1
 8004e6c:	6339      	str	r1, [r7, #48]	; 0x30
 8004e6e:	4649      	mov	r1, r9
 8004e70:	414b      	adcs	r3, r1
 8004e72:	637b      	str	r3, [r7, #52]	; 0x34
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e80:	4659      	mov	r1, fp
 8004e82:	00cb      	lsls	r3, r1, #3
 8004e84:	4651      	mov	r1, sl
 8004e86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e8a:	4651      	mov	r1, sl
 8004e8c:	00ca      	lsls	r2, r1, #3
 8004e8e:	4610      	mov	r0, r2
 8004e90:	4619      	mov	r1, r3
 8004e92:	4603      	mov	r3, r0
 8004e94:	4642      	mov	r2, r8
 8004e96:	189b      	adds	r3, r3, r2
 8004e98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e9c:	464b      	mov	r3, r9
 8004e9e:	460a      	mov	r2, r1
 8004ea0:	eb42 0303 	adc.w	r3, r2, r3
 8004ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004eb4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004eb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	18db      	adds	r3, r3, r3
 8004ec0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	eb42 0303 	adc.w	r3, r2, r3
 8004ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ece:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ed2:	f7fb fe99 	bl	8000c08 <__aeabi_uldivmod>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4b0d      	ldr	r3, [pc, #52]	; (8004f10 <UART_SetConfig+0x2d4>)
 8004edc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ee0:	095b      	lsrs	r3, r3, #5
 8004ee2:	2164      	movs	r1, #100	; 0x64
 8004ee4:	fb01 f303 	mul.w	r3, r1, r3
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	3332      	adds	r3, #50	; 0x32
 8004eee:	4a08      	ldr	r2, [pc, #32]	; (8004f10 <UART_SetConfig+0x2d4>)
 8004ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef4:	095b      	lsrs	r3, r3, #5
 8004ef6:	f003 0207 	and.w	r2, r3, #7
 8004efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4422      	add	r2, r4
 8004f02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f04:	e106      	b.n	8005114 <UART_SetConfig+0x4d8>
 8004f06:	bf00      	nop
 8004f08:	40011000 	.word	0x40011000
 8004f0c:	40011400 	.word	0x40011400
 8004f10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f26:	4642      	mov	r2, r8
 8004f28:	464b      	mov	r3, r9
 8004f2a:	1891      	adds	r1, r2, r2
 8004f2c:	6239      	str	r1, [r7, #32]
 8004f2e:	415b      	adcs	r3, r3
 8004f30:	627b      	str	r3, [r7, #36]	; 0x24
 8004f32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f36:	4641      	mov	r1, r8
 8004f38:	1854      	adds	r4, r2, r1
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	eb43 0501 	adc.w	r5, r3, r1
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	00eb      	lsls	r3, r5, #3
 8004f4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f4e:	00e2      	lsls	r2, r4, #3
 8004f50:	4614      	mov	r4, r2
 8004f52:	461d      	mov	r5, r3
 8004f54:	4643      	mov	r3, r8
 8004f56:	18e3      	adds	r3, r4, r3
 8004f58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f5c:	464b      	mov	r3, r9
 8004f5e:	eb45 0303 	adc.w	r3, r5, r3
 8004f62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f82:	4629      	mov	r1, r5
 8004f84:	008b      	lsls	r3, r1, #2
 8004f86:	4621      	mov	r1, r4
 8004f88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	008a      	lsls	r2, r1, #2
 8004f90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f94:	f7fb fe38 	bl	8000c08 <__aeabi_uldivmod>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4b60      	ldr	r3, [pc, #384]	; (8005120 <UART_SetConfig+0x4e4>)
 8004f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004fa2:	095b      	lsrs	r3, r3, #5
 8004fa4:	011c      	lsls	r4, r3, #4
 8004fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004faa:	2200      	movs	r2, #0
 8004fac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004fb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004fb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004fb8:	4642      	mov	r2, r8
 8004fba:	464b      	mov	r3, r9
 8004fbc:	1891      	adds	r1, r2, r2
 8004fbe:	61b9      	str	r1, [r7, #24]
 8004fc0:	415b      	adcs	r3, r3
 8004fc2:	61fb      	str	r3, [r7, #28]
 8004fc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fc8:	4641      	mov	r1, r8
 8004fca:	1851      	adds	r1, r2, r1
 8004fcc:	6139      	str	r1, [r7, #16]
 8004fce:	4649      	mov	r1, r9
 8004fd0:	414b      	adcs	r3, r1
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fe0:	4659      	mov	r1, fp
 8004fe2:	00cb      	lsls	r3, r1, #3
 8004fe4:	4651      	mov	r1, sl
 8004fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fea:	4651      	mov	r1, sl
 8004fec:	00ca      	lsls	r2, r1, #3
 8004fee:	4610      	mov	r0, r2
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	4642      	mov	r2, r8
 8004ff6:	189b      	adds	r3, r3, r2
 8004ff8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ffc:	464b      	mov	r3, r9
 8004ffe:	460a      	mov	r2, r1
 8005000:	eb42 0303 	adc.w	r3, r2, r3
 8005004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	67bb      	str	r3, [r7, #120]	; 0x78
 8005012:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005014:	f04f 0200 	mov.w	r2, #0
 8005018:	f04f 0300 	mov.w	r3, #0
 800501c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005020:	4649      	mov	r1, r9
 8005022:	008b      	lsls	r3, r1, #2
 8005024:	4641      	mov	r1, r8
 8005026:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800502a:	4641      	mov	r1, r8
 800502c:	008a      	lsls	r2, r1, #2
 800502e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005032:	f7fb fde9 	bl	8000c08 <__aeabi_uldivmod>
 8005036:	4602      	mov	r2, r0
 8005038:	460b      	mov	r3, r1
 800503a:	4611      	mov	r1, r2
 800503c:	4b38      	ldr	r3, [pc, #224]	; (8005120 <UART_SetConfig+0x4e4>)
 800503e:	fba3 2301 	umull	r2, r3, r3, r1
 8005042:	095b      	lsrs	r3, r3, #5
 8005044:	2264      	movs	r2, #100	; 0x64
 8005046:	fb02 f303 	mul.w	r3, r2, r3
 800504a:	1acb      	subs	r3, r1, r3
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	3332      	adds	r3, #50	; 0x32
 8005050:	4a33      	ldr	r2, [pc, #204]	; (8005120 <UART_SetConfig+0x4e4>)
 8005052:	fba2 2303 	umull	r2, r3, r2, r3
 8005056:	095b      	lsrs	r3, r3, #5
 8005058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800505c:	441c      	add	r4, r3
 800505e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005062:	2200      	movs	r2, #0
 8005064:	673b      	str	r3, [r7, #112]	; 0x70
 8005066:	677a      	str	r2, [r7, #116]	; 0x74
 8005068:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800506c:	4642      	mov	r2, r8
 800506e:	464b      	mov	r3, r9
 8005070:	1891      	adds	r1, r2, r2
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	415b      	adcs	r3, r3
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800507c:	4641      	mov	r1, r8
 800507e:	1851      	adds	r1, r2, r1
 8005080:	6039      	str	r1, [r7, #0]
 8005082:	4649      	mov	r1, r9
 8005084:	414b      	adcs	r3, r1
 8005086:	607b      	str	r3, [r7, #4]
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005094:	4659      	mov	r1, fp
 8005096:	00cb      	lsls	r3, r1, #3
 8005098:	4651      	mov	r1, sl
 800509a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800509e:	4651      	mov	r1, sl
 80050a0:	00ca      	lsls	r2, r1, #3
 80050a2:	4610      	mov	r0, r2
 80050a4:	4619      	mov	r1, r3
 80050a6:	4603      	mov	r3, r0
 80050a8:	4642      	mov	r2, r8
 80050aa:	189b      	adds	r3, r3, r2
 80050ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80050ae:	464b      	mov	r3, r9
 80050b0:	460a      	mov	r2, r1
 80050b2:	eb42 0303 	adc.w	r3, r2, r3
 80050b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	663b      	str	r3, [r7, #96]	; 0x60
 80050c2:	667a      	str	r2, [r7, #100]	; 0x64
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80050d0:	4649      	mov	r1, r9
 80050d2:	008b      	lsls	r3, r1, #2
 80050d4:	4641      	mov	r1, r8
 80050d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050da:	4641      	mov	r1, r8
 80050dc:	008a      	lsls	r2, r1, #2
 80050de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050e2:	f7fb fd91 	bl	8000c08 <__aeabi_uldivmod>
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	4b0d      	ldr	r3, [pc, #52]	; (8005120 <UART_SetConfig+0x4e4>)
 80050ec:	fba3 1302 	umull	r1, r3, r3, r2
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	2164      	movs	r1, #100	; 0x64
 80050f4:	fb01 f303 	mul.w	r3, r1, r3
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	011b      	lsls	r3, r3, #4
 80050fc:	3332      	adds	r3, #50	; 0x32
 80050fe:	4a08      	ldr	r2, [pc, #32]	; (8005120 <UART_SetConfig+0x4e4>)
 8005100:	fba2 2303 	umull	r2, r3, r2, r3
 8005104:	095b      	lsrs	r3, r3, #5
 8005106:	f003 020f 	and.w	r2, r3, #15
 800510a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4422      	add	r2, r4
 8005112:	609a      	str	r2, [r3, #8]
}
 8005114:	bf00      	nop
 8005116:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800511a:	46bd      	mov	sp, r7
 800511c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005120:	51eb851f 	.word	0x51eb851f

08005124 <atoi>:
 8005124:	220a      	movs	r2, #10
 8005126:	2100      	movs	r1, #0
 8005128:	f000 b93e 	b.w	80053a8 <strtol>

0800512c <malloc>:
 800512c:	4b02      	ldr	r3, [pc, #8]	; (8005138 <malloc+0xc>)
 800512e:	4601      	mov	r1, r0
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	f000 b82b 	b.w	800518c <_malloc_r>
 8005136:	bf00      	nop
 8005138:	20000070 	.word	0x20000070

0800513c <free>:
 800513c:	4b02      	ldr	r3, [pc, #8]	; (8005148 <free+0xc>)
 800513e:	4601      	mov	r1, r0
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	f000 bb4d 	b.w	80057e0 <_free_r>
 8005146:	bf00      	nop
 8005148:	20000070 	.word	0x20000070

0800514c <sbrk_aligned>:
 800514c:	b570      	push	{r4, r5, r6, lr}
 800514e:	4e0e      	ldr	r6, [pc, #56]	; (8005188 <sbrk_aligned+0x3c>)
 8005150:	460c      	mov	r4, r1
 8005152:	6831      	ldr	r1, [r6, #0]
 8005154:	4605      	mov	r5, r0
 8005156:	b911      	cbnz	r1, 800515e <sbrk_aligned+0x12>
 8005158:	f000 face 	bl	80056f8 <_sbrk_r>
 800515c:	6030      	str	r0, [r6, #0]
 800515e:	4621      	mov	r1, r4
 8005160:	4628      	mov	r0, r5
 8005162:	f000 fac9 	bl	80056f8 <_sbrk_r>
 8005166:	1c43      	adds	r3, r0, #1
 8005168:	d00a      	beq.n	8005180 <sbrk_aligned+0x34>
 800516a:	1cc4      	adds	r4, r0, #3
 800516c:	f024 0403 	bic.w	r4, r4, #3
 8005170:	42a0      	cmp	r0, r4
 8005172:	d007      	beq.n	8005184 <sbrk_aligned+0x38>
 8005174:	1a21      	subs	r1, r4, r0
 8005176:	4628      	mov	r0, r5
 8005178:	f000 fabe 	bl	80056f8 <_sbrk_r>
 800517c:	3001      	adds	r0, #1
 800517e:	d101      	bne.n	8005184 <sbrk_aligned+0x38>
 8005180:	f04f 34ff 	mov.w	r4, #4294967295
 8005184:	4620      	mov	r0, r4
 8005186:	bd70      	pop	{r4, r5, r6, pc}
 8005188:	2000022c 	.word	0x2000022c

0800518c <_malloc_r>:
 800518c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005190:	1ccd      	adds	r5, r1, #3
 8005192:	f025 0503 	bic.w	r5, r5, #3
 8005196:	3508      	adds	r5, #8
 8005198:	2d0c      	cmp	r5, #12
 800519a:	bf38      	it	cc
 800519c:	250c      	movcc	r5, #12
 800519e:	2d00      	cmp	r5, #0
 80051a0:	4607      	mov	r7, r0
 80051a2:	db01      	blt.n	80051a8 <_malloc_r+0x1c>
 80051a4:	42a9      	cmp	r1, r5
 80051a6:	d905      	bls.n	80051b4 <_malloc_r+0x28>
 80051a8:	230c      	movs	r3, #12
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	2600      	movs	r6, #0
 80051ae:	4630      	mov	r0, r6
 80051b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005288 <_malloc_r+0xfc>
 80051b8:	f000 f868 	bl	800528c <__malloc_lock>
 80051bc:	f8d8 3000 	ldr.w	r3, [r8]
 80051c0:	461c      	mov	r4, r3
 80051c2:	bb5c      	cbnz	r4, 800521c <_malloc_r+0x90>
 80051c4:	4629      	mov	r1, r5
 80051c6:	4638      	mov	r0, r7
 80051c8:	f7ff ffc0 	bl	800514c <sbrk_aligned>
 80051cc:	1c43      	adds	r3, r0, #1
 80051ce:	4604      	mov	r4, r0
 80051d0:	d155      	bne.n	800527e <_malloc_r+0xf2>
 80051d2:	f8d8 4000 	ldr.w	r4, [r8]
 80051d6:	4626      	mov	r6, r4
 80051d8:	2e00      	cmp	r6, #0
 80051da:	d145      	bne.n	8005268 <_malloc_r+0xdc>
 80051dc:	2c00      	cmp	r4, #0
 80051de:	d048      	beq.n	8005272 <_malloc_r+0xe6>
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	4631      	mov	r1, r6
 80051e4:	4638      	mov	r0, r7
 80051e6:	eb04 0903 	add.w	r9, r4, r3
 80051ea:	f000 fa85 	bl	80056f8 <_sbrk_r>
 80051ee:	4581      	cmp	r9, r0
 80051f0:	d13f      	bne.n	8005272 <_malloc_r+0xe6>
 80051f2:	6821      	ldr	r1, [r4, #0]
 80051f4:	1a6d      	subs	r5, r5, r1
 80051f6:	4629      	mov	r1, r5
 80051f8:	4638      	mov	r0, r7
 80051fa:	f7ff ffa7 	bl	800514c <sbrk_aligned>
 80051fe:	3001      	adds	r0, #1
 8005200:	d037      	beq.n	8005272 <_malloc_r+0xe6>
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	442b      	add	r3, r5
 8005206:	6023      	str	r3, [r4, #0]
 8005208:	f8d8 3000 	ldr.w	r3, [r8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d038      	beq.n	8005282 <_malloc_r+0xf6>
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	42a2      	cmp	r2, r4
 8005214:	d12b      	bne.n	800526e <_malloc_r+0xe2>
 8005216:	2200      	movs	r2, #0
 8005218:	605a      	str	r2, [r3, #4]
 800521a:	e00f      	b.n	800523c <_malloc_r+0xb0>
 800521c:	6822      	ldr	r2, [r4, #0]
 800521e:	1b52      	subs	r2, r2, r5
 8005220:	d41f      	bmi.n	8005262 <_malloc_r+0xd6>
 8005222:	2a0b      	cmp	r2, #11
 8005224:	d917      	bls.n	8005256 <_malloc_r+0xca>
 8005226:	1961      	adds	r1, r4, r5
 8005228:	42a3      	cmp	r3, r4
 800522a:	6025      	str	r5, [r4, #0]
 800522c:	bf18      	it	ne
 800522e:	6059      	strne	r1, [r3, #4]
 8005230:	6863      	ldr	r3, [r4, #4]
 8005232:	bf08      	it	eq
 8005234:	f8c8 1000 	streq.w	r1, [r8]
 8005238:	5162      	str	r2, [r4, r5]
 800523a:	604b      	str	r3, [r1, #4]
 800523c:	4638      	mov	r0, r7
 800523e:	f104 060b 	add.w	r6, r4, #11
 8005242:	f000 f829 	bl	8005298 <__malloc_unlock>
 8005246:	f026 0607 	bic.w	r6, r6, #7
 800524a:	1d23      	adds	r3, r4, #4
 800524c:	1af2      	subs	r2, r6, r3
 800524e:	d0ae      	beq.n	80051ae <_malloc_r+0x22>
 8005250:	1b9b      	subs	r3, r3, r6
 8005252:	50a3      	str	r3, [r4, r2]
 8005254:	e7ab      	b.n	80051ae <_malloc_r+0x22>
 8005256:	42a3      	cmp	r3, r4
 8005258:	6862      	ldr	r2, [r4, #4]
 800525a:	d1dd      	bne.n	8005218 <_malloc_r+0x8c>
 800525c:	f8c8 2000 	str.w	r2, [r8]
 8005260:	e7ec      	b.n	800523c <_malloc_r+0xb0>
 8005262:	4623      	mov	r3, r4
 8005264:	6864      	ldr	r4, [r4, #4]
 8005266:	e7ac      	b.n	80051c2 <_malloc_r+0x36>
 8005268:	4634      	mov	r4, r6
 800526a:	6876      	ldr	r6, [r6, #4]
 800526c:	e7b4      	b.n	80051d8 <_malloc_r+0x4c>
 800526e:	4613      	mov	r3, r2
 8005270:	e7cc      	b.n	800520c <_malloc_r+0x80>
 8005272:	230c      	movs	r3, #12
 8005274:	603b      	str	r3, [r7, #0]
 8005276:	4638      	mov	r0, r7
 8005278:	f000 f80e 	bl	8005298 <__malloc_unlock>
 800527c:	e797      	b.n	80051ae <_malloc_r+0x22>
 800527e:	6025      	str	r5, [r4, #0]
 8005280:	e7dc      	b.n	800523c <_malloc_r+0xb0>
 8005282:	605b      	str	r3, [r3, #4]
 8005284:	deff      	udf	#255	; 0xff
 8005286:	bf00      	nop
 8005288:	20000228 	.word	0x20000228

0800528c <__malloc_lock>:
 800528c:	4801      	ldr	r0, [pc, #4]	; (8005294 <__malloc_lock+0x8>)
 800528e:	f000 ba7f 	b.w	8005790 <__retarget_lock_acquire_recursive>
 8005292:	bf00      	nop
 8005294:	20000370 	.word	0x20000370

08005298 <__malloc_unlock>:
 8005298:	4801      	ldr	r0, [pc, #4]	; (80052a0 <__malloc_unlock+0x8>)
 800529a:	f000 ba7a 	b.w	8005792 <__retarget_lock_release_recursive>
 800529e:	bf00      	nop
 80052a0:	20000370 	.word	0x20000370

080052a4 <_strtol_l.constprop.0>:
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052aa:	d001      	beq.n	80052b0 <_strtol_l.constprop.0+0xc>
 80052ac:	2b24      	cmp	r3, #36	; 0x24
 80052ae:	d906      	bls.n	80052be <_strtol_l.constprop.0+0x1a>
 80052b0:	f000 fa44 	bl	800573c <__errno>
 80052b4:	2316      	movs	r3, #22
 80052b6:	6003      	str	r3, [r0, #0]
 80052b8:	2000      	movs	r0, #0
 80052ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80053a4 <_strtol_l.constprop.0+0x100>
 80052c2:	460d      	mov	r5, r1
 80052c4:	462e      	mov	r6, r5
 80052c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80052ca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80052ce:	f017 0708 	ands.w	r7, r7, #8
 80052d2:	d1f7      	bne.n	80052c4 <_strtol_l.constprop.0+0x20>
 80052d4:	2c2d      	cmp	r4, #45	; 0x2d
 80052d6:	d132      	bne.n	800533e <_strtol_l.constprop.0+0x9a>
 80052d8:	782c      	ldrb	r4, [r5, #0]
 80052da:	2701      	movs	r7, #1
 80052dc:	1cb5      	adds	r5, r6, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d05b      	beq.n	800539a <_strtol_l.constprop.0+0xf6>
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d109      	bne.n	80052fa <_strtol_l.constprop.0+0x56>
 80052e6:	2c30      	cmp	r4, #48	; 0x30
 80052e8:	d107      	bne.n	80052fa <_strtol_l.constprop.0+0x56>
 80052ea:	782c      	ldrb	r4, [r5, #0]
 80052ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80052f0:	2c58      	cmp	r4, #88	; 0x58
 80052f2:	d14d      	bne.n	8005390 <_strtol_l.constprop.0+0xec>
 80052f4:	786c      	ldrb	r4, [r5, #1]
 80052f6:	2310      	movs	r3, #16
 80052f8:	3502      	adds	r5, #2
 80052fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80052fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8005302:	f04f 0e00 	mov.w	lr, #0
 8005306:	fbb8 f9f3 	udiv	r9, r8, r3
 800530a:	4676      	mov	r6, lr
 800530c:	fb03 8a19 	mls	sl, r3, r9, r8
 8005310:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005314:	f1bc 0f09 	cmp.w	ip, #9
 8005318:	d816      	bhi.n	8005348 <_strtol_l.constprop.0+0xa4>
 800531a:	4664      	mov	r4, ip
 800531c:	42a3      	cmp	r3, r4
 800531e:	dd24      	ble.n	800536a <_strtol_l.constprop.0+0xc6>
 8005320:	f1be 3fff 	cmp.w	lr, #4294967295
 8005324:	d008      	beq.n	8005338 <_strtol_l.constprop.0+0x94>
 8005326:	45b1      	cmp	r9, r6
 8005328:	d31c      	bcc.n	8005364 <_strtol_l.constprop.0+0xc0>
 800532a:	d101      	bne.n	8005330 <_strtol_l.constprop.0+0x8c>
 800532c:	45a2      	cmp	sl, r4
 800532e:	db19      	blt.n	8005364 <_strtol_l.constprop.0+0xc0>
 8005330:	fb06 4603 	mla	r6, r6, r3, r4
 8005334:	f04f 0e01 	mov.w	lr, #1
 8005338:	f815 4b01 	ldrb.w	r4, [r5], #1
 800533c:	e7e8      	b.n	8005310 <_strtol_l.constprop.0+0x6c>
 800533e:	2c2b      	cmp	r4, #43	; 0x2b
 8005340:	bf04      	itt	eq
 8005342:	782c      	ldrbeq	r4, [r5, #0]
 8005344:	1cb5      	addeq	r5, r6, #2
 8005346:	e7ca      	b.n	80052de <_strtol_l.constprop.0+0x3a>
 8005348:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800534c:	f1bc 0f19 	cmp.w	ip, #25
 8005350:	d801      	bhi.n	8005356 <_strtol_l.constprop.0+0xb2>
 8005352:	3c37      	subs	r4, #55	; 0x37
 8005354:	e7e2      	b.n	800531c <_strtol_l.constprop.0+0x78>
 8005356:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800535a:	f1bc 0f19 	cmp.w	ip, #25
 800535e:	d804      	bhi.n	800536a <_strtol_l.constprop.0+0xc6>
 8005360:	3c57      	subs	r4, #87	; 0x57
 8005362:	e7db      	b.n	800531c <_strtol_l.constprop.0+0x78>
 8005364:	f04f 3eff 	mov.w	lr, #4294967295
 8005368:	e7e6      	b.n	8005338 <_strtol_l.constprop.0+0x94>
 800536a:	f1be 3fff 	cmp.w	lr, #4294967295
 800536e:	d105      	bne.n	800537c <_strtol_l.constprop.0+0xd8>
 8005370:	2322      	movs	r3, #34	; 0x22
 8005372:	6003      	str	r3, [r0, #0]
 8005374:	4646      	mov	r6, r8
 8005376:	b942      	cbnz	r2, 800538a <_strtol_l.constprop.0+0xe6>
 8005378:	4630      	mov	r0, r6
 800537a:	e79e      	b.n	80052ba <_strtol_l.constprop.0+0x16>
 800537c:	b107      	cbz	r7, 8005380 <_strtol_l.constprop.0+0xdc>
 800537e:	4276      	negs	r6, r6
 8005380:	2a00      	cmp	r2, #0
 8005382:	d0f9      	beq.n	8005378 <_strtol_l.constprop.0+0xd4>
 8005384:	f1be 0f00 	cmp.w	lr, #0
 8005388:	d000      	beq.n	800538c <_strtol_l.constprop.0+0xe8>
 800538a:	1e69      	subs	r1, r5, #1
 800538c:	6011      	str	r1, [r2, #0]
 800538e:	e7f3      	b.n	8005378 <_strtol_l.constprop.0+0xd4>
 8005390:	2430      	movs	r4, #48	; 0x30
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1b1      	bne.n	80052fa <_strtol_l.constprop.0+0x56>
 8005396:	2308      	movs	r3, #8
 8005398:	e7af      	b.n	80052fa <_strtol_l.constprop.0+0x56>
 800539a:	2c30      	cmp	r4, #48	; 0x30
 800539c:	d0a5      	beq.n	80052ea <_strtol_l.constprop.0+0x46>
 800539e:	230a      	movs	r3, #10
 80053a0:	e7ab      	b.n	80052fa <_strtol_l.constprop.0+0x56>
 80053a2:	bf00      	nop
 80053a4:	0800711d 	.word	0x0800711d

080053a8 <strtol>:
 80053a8:	4613      	mov	r3, r2
 80053aa:	460a      	mov	r2, r1
 80053ac:	4601      	mov	r1, r0
 80053ae:	4802      	ldr	r0, [pc, #8]	; (80053b8 <strtol+0x10>)
 80053b0:	6800      	ldr	r0, [r0, #0]
 80053b2:	f7ff bf77 	b.w	80052a4 <_strtol_l.constprop.0>
 80053b6:	bf00      	nop
 80053b8:	20000070 	.word	0x20000070

080053bc <std>:
 80053bc:	2300      	movs	r3, #0
 80053be:	b510      	push	{r4, lr}
 80053c0:	4604      	mov	r4, r0
 80053c2:	e9c0 3300 	strd	r3, r3, [r0]
 80053c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053ca:	6083      	str	r3, [r0, #8]
 80053cc:	8181      	strh	r1, [r0, #12]
 80053ce:	6643      	str	r3, [r0, #100]	; 0x64
 80053d0:	81c2      	strh	r2, [r0, #14]
 80053d2:	6183      	str	r3, [r0, #24]
 80053d4:	4619      	mov	r1, r3
 80053d6:	2208      	movs	r2, #8
 80053d8:	305c      	adds	r0, #92	; 0x5c
 80053da:	f000 f8e2 	bl	80055a2 <memset>
 80053de:	4b05      	ldr	r3, [pc, #20]	; (80053f4 <std+0x38>)
 80053e0:	6263      	str	r3, [r4, #36]	; 0x24
 80053e2:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <std+0x3c>)
 80053e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80053e6:	4b05      	ldr	r3, [pc, #20]	; (80053fc <std+0x40>)
 80053e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053ea:	4b05      	ldr	r3, [pc, #20]	; (8005400 <std+0x44>)
 80053ec:	6224      	str	r4, [r4, #32]
 80053ee:	6323      	str	r3, [r4, #48]	; 0x30
 80053f0:	bd10      	pop	{r4, pc}
 80053f2:	bf00      	nop
 80053f4:	0800551d 	.word	0x0800551d
 80053f8:	0800553f 	.word	0x0800553f
 80053fc:	08005577 	.word	0x08005577
 8005400:	0800559b 	.word	0x0800559b

08005404 <stdio_exit_handler>:
 8005404:	4a02      	ldr	r2, [pc, #8]	; (8005410 <stdio_exit_handler+0xc>)
 8005406:	4903      	ldr	r1, [pc, #12]	; (8005414 <stdio_exit_handler+0x10>)
 8005408:	4803      	ldr	r0, [pc, #12]	; (8005418 <stdio_exit_handler+0x14>)
 800540a:	f000 b869 	b.w	80054e0 <_fwalk_sglue>
 800540e:	bf00      	nop
 8005410:	20000018 	.word	0x20000018
 8005414:	08005985 	.word	0x08005985
 8005418:	20000024 	.word	0x20000024

0800541c <cleanup_stdio>:
 800541c:	6841      	ldr	r1, [r0, #4]
 800541e:	4b0c      	ldr	r3, [pc, #48]	; (8005450 <cleanup_stdio+0x34>)
 8005420:	4299      	cmp	r1, r3
 8005422:	b510      	push	{r4, lr}
 8005424:	4604      	mov	r4, r0
 8005426:	d001      	beq.n	800542c <cleanup_stdio+0x10>
 8005428:	f000 faac 	bl	8005984 <_fflush_r>
 800542c:	68a1      	ldr	r1, [r4, #8]
 800542e:	4b09      	ldr	r3, [pc, #36]	; (8005454 <cleanup_stdio+0x38>)
 8005430:	4299      	cmp	r1, r3
 8005432:	d002      	beq.n	800543a <cleanup_stdio+0x1e>
 8005434:	4620      	mov	r0, r4
 8005436:	f000 faa5 	bl	8005984 <_fflush_r>
 800543a:	68e1      	ldr	r1, [r4, #12]
 800543c:	4b06      	ldr	r3, [pc, #24]	; (8005458 <cleanup_stdio+0x3c>)
 800543e:	4299      	cmp	r1, r3
 8005440:	d004      	beq.n	800544c <cleanup_stdio+0x30>
 8005442:	4620      	mov	r0, r4
 8005444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005448:	f000 ba9c 	b.w	8005984 <_fflush_r>
 800544c:	bd10      	pop	{r4, pc}
 800544e:	bf00      	nop
 8005450:	20000230 	.word	0x20000230
 8005454:	20000298 	.word	0x20000298
 8005458:	20000300 	.word	0x20000300

0800545c <global_stdio_init.part.0>:
 800545c:	b510      	push	{r4, lr}
 800545e:	4b0b      	ldr	r3, [pc, #44]	; (800548c <global_stdio_init.part.0+0x30>)
 8005460:	4c0b      	ldr	r4, [pc, #44]	; (8005490 <global_stdio_init.part.0+0x34>)
 8005462:	4a0c      	ldr	r2, [pc, #48]	; (8005494 <global_stdio_init.part.0+0x38>)
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	4620      	mov	r0, r4
 8005468:	2200      	movs	r2, #0
 800546a:	2104      	movs	r1, #4
 800546c:	f7ff ffa6 	bl	80053bc <std>
 8005470:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005474:	2201      	movs	r2, #1
 8005476:	2109      	movs	r1, #9
 8005478:	f7ff ffa0 	bl	80053bc <std>
 800547c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005480:	2202      	movs	r2, #2
 8005482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005486:	2112      	movs	r1, #18
 8005488:	f7ff bf98 	b.w	80053bc <std>
 800548c:	20000368 	.word	0x20000368
 8005490:	20000230 	.word	0x20000230
 8005494:	08005405 	.word	0x08005405

08005498 <__sfp_lock_acquire>:
 8005498:	4801      	ldr	r0, [pc, #4]	; (80054a0 <__sfp_lock_acquire+0x8>)
 800549a:	f000 b979 	b.w	8005790 <__retarget_lock_acquire_recursive>
 800549e:	bf00      	nop
 80054a0:	20000371 	.word	0x20000371

080054a4 <__sfp_lock_release>:
 80054a4:	4801      	ldr	r0, [pc, #4]	; (80054ac <__sfp_lock_release+0x8>)
 80054a6:	f000 b974 	b.w	8005792 <__retarget_lock_release_recursive>
 80054aa:	bf00      	nop
 80054ac:	20000371 	.word	0x20000371

080054b0 <__sinit>:
 80054b0:	b510      	push	{r4, lr}
 80054b2:	4604      	mov	r4, r0
 80054b4:	f7ff fff0 	bl	8005498 <__sfp_lock_acquire>
 80054b8:	6a23      	ldr	r3, [r4, #32]
 80054ba:	b11b      	cbz	r3, 80054c4 <__sinit+0x14>
 80054bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054c0:	f7ff bff0 	b.w	80054a4 <__sfp_lock_release>
 80054c4:	4b04      	ldr	r3, [pc, #16]	; (80054d8 <__sinit+0x28>)
 80054c6:	6223      	str	r3, [r4, #32]
 80054c8:	4b04      	ldr	r3, [pc, #16]	; (80054dc <__sinit+0x2c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1f5      	bne.n	80054bc <__sinit+0xc>
 80054d0:	f7ff ffc4 	bl	800545c <global_stdio_init.part.0>
 80054d4:	e7f2      	b.n	80054bc <__sinit+0xc>
 80054d6:	bf00      	nop
 80054d8:	0800541d 	.word	0x0800541d
 80054dc:	20000368 	.word	0x20000368

080054e0 <_fwalk_sglue>:
 80054e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054e4:	4607      	mov	r7, r0
 80054e6:	4688      	mov	r8, r1
 80054e8:	4614      	mov	r4, r2
 80054ea:	2600      	movs	r6, #0
 80054ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054f0:	f1b9 0901 	subs.w	r9, r9, #1
 80054f4:	d505      	bpl.n	8005502 <_fwalk_sglue+0x22>
 80054f6:	6824      	ldr	r4, [r4, #0]
 80054f8:	2c00      	cmp	r4, #0
 80054fa:	d1f7      	bne.n	80054ec <_fwalk_sglue+0xc>
 80054fc:	4630      	mov	r0, r6
 80054fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005502:	89ab      	ldrh	r3, [r5, #12]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d907      	bls.n	8005518 <_fwalk_sglue+0x38>
 8005508:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800550c:	3301      	adds	r3, #1
 800550e:	d003      	beq.n	8005518 <_fwalk_sglue+0x38>
 8005510:	4629      	mov	r1, r5
 8005512:	4638      	mov	r0, r7
 8005514:	47c0      	blx	r8
 8005516:	4306      	orrs	r6, r0
 8005518:	3568      	adds	r5, #104	; 0x68
 800551a:	e7e9      	b.n	80054f0 <_fwalk_sglue+0x10>

0800551c <__sread>:
 800551c:	b510      	push	{r4, lr}
 800551e:	460c      	mov	r4, r1
 8005520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005524:	f000 f8d6 	bl	80056d4 <_read_r>
 8005528:	2800      	cmp	r0, #0
 800552a:	bfab      	itete	ge
 800552c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800552e:	89a3      	ldrhlt	r3, [r4, #12]
 8005530:	181b      	addge	r3, r3, r0
 8005532:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005536:	bfac      	ite	ge
 8005538:	6563      	strge	r3, [r4, #84]	; 0x54
 800553a:	81a3      	strhlt	r3, [r4, #12]
 800553c:	bd10      	pop	{r4, pc}

0800553e <__swrite>:
 800553e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005542:	461f      	mov	r7, r3
 8005544:	898b      	ldrh	r3, [r1, #12]
 8005546:	05db      	lsls	r3, r3, #23
 8005548:	4605      	mov	r5, r0
 800554a:	460c      	mov	r4, r1
 800554c:	4616      	mov	r6, r2
 800554e:	d505      	bpl.n	800555c <__swrite+0x1e>
 8005550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005554:	2302      	movs	r3, #2
 8005556:	2200      	movs	r2, #0
 8005558:	f000 f8aa 	bl	80056b0 <_lseek_r>
 800555c:	89a3      	ldrh	r3, [r4, #12]
 800555e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005566:	81a3      	strh	r3, [r4, #12]
 8005568:	4632      	mov	r2, r6
 800556a:	463b      	mov	r3, r7
 800556c:	4628      	mov	r0, r5
 800556e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005572:	f000 b8d1 	b.w	8005718 <_write_r>

08005576 <__sseek>:
 8005576:	b510      	push	{r4, lr}
 8005578:	460c      	mov	r4, r1
 800557a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800557e:	f000 f897 	bl	80056b0 <_lseek_r>
 8005582:	1c43      	adds	r3, r0, #1
 8005584:	89a3      	ldrh	r3, [r4, #12]
 8005586:	bf15      	itete	ne
 8005588:	6560      	strne	r0, [r4, #84]	; 0x54
 800558a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800558e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005592:	81a3      	strheq	r3, [r4, #12]
 8005594:	bf18      	it	ne
 8005596:	81a3      	strhne	r3, [r4, #12]
 8005598:	bd10      	pop	{r4, pc}

0800559a <__sclose>:
 800559a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800559e:	f000 b877 	b.w	8005690 <_close_r>

080055a2 <memset>:
 80055a2:	4402      	add	r2, r0
 80055a4:	4603      	mov	r3, r0
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d100      	bne.n	80055ac <memset+0xa>
 80055aa:	4770      	bx	lr
 80055ac:	f803 1b01 	strb.w	r1, [r3], #1
 80055b0:	e7f9      	b.n	80055a6 <memset+0x4>

080055b2 <strncmp>:
 80055b2:	b510      	push	{r4, lr}
 80055b4:	b16a      	cbz	r2, 80055d2 <strncmp+0x20>
 80055b6:	3901      	subs	r1, #1
 80055b8:	1884      	adds	r4, r0, r2
 80055ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055be:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d103      	bne.n	80055ce <strncmp+0x1c>
 80055c6:	42a0      	cmp	r0, r4
 80055c8:	d001      	beq.n	80055ce <strncmp+0x1c>
 80055ca:	2a00      	cmp	r2, #0
 80055cc:	d1f5      	bne.n	80055ba <strncmp+0x8>
 80055ce:	1ad0      	subs	r0, r2, r3
 80055d0:	bd10      	pop	{r4, pc}
 80055d2:	4610      	mov	r0, r2
 80055d4:	e7fc      	b.n	80055d0 <strncmp+0x1e>
	...

080055d8 <strtok>:
 80055d8:	4b16      	ldr	r3, [pc, #88]	; (8005634 <strtok+0x5c>)
 80055da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055dc:	681e      	ldr	r6, [r3, #0]
 80055de:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80055e0:	4605      	mov	r5, r0
 80055e2:	b9fc      	cbnz	r4, 8005624 <strtok+0x4c>
 80055e4:	2050      	movs	r0, #80	; 0x50
 80055e6:	9101      	str	r1, [sp, #4]
 80055e8:	f7ff fda0 	bl	800512c <malloc>
 80055ec:	9901      	ldr	r1, [sp, #4]
 80055ee:	6470      	str	r0, [r6, #68]	; 0x44
 80055f0:	4602      	mov	r2, r0
 80055f2:	b920      	cbnz	r0, 80055fe <strtok+0x26>
 80055f4:	4b10      	ldr	r3, [pc, #64]	; (8005638 <strtok+0x60>)
 80055f6:	4811      	ldr	r0, [pc, #68]	; (800563c <strtok+0x64>)
 80055f8:	215b      	movs	r1, #91	; 0x5b
 80055fa:	f000 f8d3 	bl	80057a4 <__assert_func>
 80055fe:	e9c0 4400 	strd	r4, r4, [r0]
 8005602:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005606:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800560a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800560e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005612:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005616:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800561a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800561e:	6184      	str	r4, [r0, #24]
 8005620:	7704      	strb	r4, [r0, #28]
 8005622:	6244      	str	r4, [r0, #36]	; 0x24
 8005624:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8005626:	2301      	movs	r3, #1
 8005628:	4628      	mov	r0, r5
 800562a:	b002      	add	sp, #8
 800562c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005630:	f000 b806 	b.w	8005640 <__strtok_r>
 8005634:	20000070 	.word	0x20000070
 8005638:	0800721d 	.word	0x0800721d
 800563c:	08007234 	.word	0x08007234

08005640 <__strtok_r>:
 8005640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005642:	b908      	cbnz	r0, 8005648 <__strtok_r+0x8>
 8005644:	6810      	ldr	r0, [r2, #0]
 8005646:	b188      	cbz	r0, 800566c <__strtok_r+0x2c>
 8005648:	4604      	mov	r4, r0
 800564a:	4620      	mov	r0, r4
 800564c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005650:	460f      	mov	r7, r1
 8005652:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005656:	b91e      	cbnz	r6, 8005660 <__strtok_r+0x20>
 8005658:	b965      	cbnz	r5, 8005674 <__strtok_r+0x34>
 800565a:	6015      	str	r5, [r2, #0]
 800565c:	4628      	mov	r0, r5
 800565e:	e005      	b.n	800566c <__strtok_r+0x2c>
 8005660:	42b5      	cmp	r5, r6
 8005662:	d1f6      	bne.n	8005652 <__strtok_r+0x12>
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1f0      	bne.n	800564a <__strtok_r+0xa>
 8005668:	6014      	str	r4, [r2, #0]
 800566a:	7003      	strb	r3, [r0, #0]
 800566c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800566e:	461c      	mov	r4, r3
 8005670:	e00c      	b.n	800568c <__strtok_r+0x4c>
 8005672:	b915      	cbnz	r5, 800567a <__strtok_r+0x3a>
 8005674:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005678:	460e      	mov	r6, r1
 800567a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800567e:	42ab      	cmp	r3, r5
 8005680:	d1f7      	bne.n	8005672 <__strtok_r+0x32>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0f3      	beq.n	800566e <__strtok_r+0x2e>
 8005686:	2300      	movs	r3, #0
 8005688:	f804 3c01 	strb.w	r3, [r4, #-1]
 800568c:	6014      	str	r4, [r2, #0]
 800568e:	e7ed      	b.n	800566c <__strtok_r+0x2c>

08005690 <_close_r>:
 8005690:	b538      	push	{r3, r4, r5, lr}
 8005692:	4d06      	ldr	r5, [pc, #24]	; (80056ac <_close_r+0x1c>)
 8005694:	2300      	movs	r3, #0
 8005696:	4604      	mov	r4, r0
 8005698:	4608      	mov	r0, r1
 800569a:	602b      	str	r3, [r5, #0]
 800569c:	f7fc fd7b 	bl	8002196 <_close>
 80056a0:	1c43      	adds	r3, r0, #1
 80056a2:	d102      	bne.n	80056aa <_close_r+0x1a>
 80056a4:	682b      	ldr	r3, [r5, #0]
 80056a6:	b103      	cbz	r3, 80056aa <_close_r+0x1a>
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	bd38      	pop	{r3, r4, r5, pc}
 80056ac:	2000036c 	.word	0x2000036c

080056b0 <_lseek_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	4d07      	ldr	r5, [pc, #28]	; (80056d0 <_lseek_r+0x20>)
 80056b4:	4604      	mov	r4, r0
 80056b6:	4608      	mov	r0, r1
 80056b8:	4611      	mov	r1, r2
 80056ba:	2200      	movs	r2, #0
 80056bc:	602a      	str	r2, [r5, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	f7fc fd90 	bl	80021e4 <_lseek>
 80056c4:	1c43      	adds	r3, r0, #1
 80056c6:	d102      	bne.n	80056ce <_lseek_r+0x1e>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	b103      	cbz	r3, 80056ce <_lseek_r+0x1e>
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	bd38      	pop	{r3, r4, r5, pc}
 80056d0:	2000036c 	.word	0x2000036c

080056d4 <_read_r>:
 80056d4:	b538      	push	{r3, r4, r5, lr}
 80056d6:	4d07      	ldr	r5, [pc, #28]	; (80056f4 <_read_r+0x20>)
 80056d8:	4604      	mov	r4, r0
 80056da:	4608      	mov	r0, r1
 80056dc:	4611      	mov	r1, r2
 80056de:	2200      	movs	r2, #0
 80056e0:	602a      	str	r2, [r5, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	f7fc fd1e 	bl	8002124 <_read>
 80056e8:	1c43      	adds	r3, r0, #1
 80056ea:	d102      	bne.n	80056f2 <_read_r+0x1e>
 80056ec:	682b      	ldr	r3, [r5, #0]
 80056ee:	b103      	cbz	r3, 80056f2 <_read_r+0x1e>
 80056f0:	6023      	str	r3, [r4, #0]
 80056f2:	bd38      	pop	{r3, r4, r5, pc}
 80056f4:	2000036c 	.word	0x2000036c

080056f8 <_sbrk_r>:
 80056f8:	b538      	push	{r3, r4, r5, lr}
 80056fa:	4d06      	ldr	r5, [pc, #24]	; (8005714 <_sbrk_r+0x1c>)
 80056fc:	2300      	movs	r3, #0
 80056fe:	4604      	mov	r4, r0
 8005700:	4608      	mov	r0, r1
 8005702:	602b      	str	r3, [r5, #0]
 8005704:	f7fc fd7c 	bl	8002200 <_sbrk>
 8005708:	1c43      	adds	r3, r0, #1
 800570a:	d102      	bne.n	8005712 <_sbrk_r+0x1a>
 800570c:	682b      	ldr	r3, [r5, #0]
 800570e:	b103      	cbz	r3, 8005712 <_sbrk_r+0x1a>
 8005710:	6023      	str	r3, [r4, #0]
 8005712:	bd38      	pop	{r3, r4, r5, pc}
 8005714:	2000036c 	.word	0x2000036c

08005718 <_write_r>:
 8005718:	b538      	push	{r3, r4, r5, lr}
 800571a:	4d07      	ldr	r5, [pc, #28]	; (8005738 <_write_r+0x20>)
 800571c:	4604      	mov	r4, r0
 800571e:	4608      	mov	r0, r1
 8005720:	4611      	mov	r1, r2
 8005722:	2200      	movs	r2, #0
 8005724:	602a      	str	r2, [r5, #0]
 8005726:	461a      	mov	r2, r3
 8005728:	f7fc fd19 	bl	800215e <_write>
 800572c:	1c43      	adds	r3, r0, #1
 800572e:	d102      	bne.n	8005736 <_write_r+0x1e>
 8005730:	682b      	ldr	r3, [r5, #0]
 8005732:	b103      	cbz	r3, 8005736 <_write_r+0x1e>
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	bd38      	pop	{r3, r4, r5, pc}
 8005738:	2000036c 	.word	0x2000036c

0800573c <__errno>:
 800573c:	4b01      	ldr	r3, [pc, #4]	; (8005744 <__errno+0x8>)
 800573e:	6818      	ldr	r0, [r3, #0]
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	20000070 	.word	0x20000070

08005748 <__libc_init_array>:
 8005748:	b570      	push	{r4, r5, r6, lr}
 800574a:	4d0d      	ldr	r5, [pc, #52]	; (8005780 <__libc_init_array+0x38>)
 800574c:	4c0d      	ldr	r4, [pc, #52]	; (8005784 <__libc_init_array+0x3c>)
 800574e:	1b64      	subs	r4, r4, r5
 8005750:	10a4      	asrs	r4, r4, #2
 8005752:	2600      	movs	r6, #0
 8005754:	42a6      	cmp	r6, r4
 8005756:	d109      	bne.n	800576c <__libc_init_array+0x24>
 8005758:	4d0b      	ldr	r5, [pc, #44]	; (8005788 <__libc_init_array+0x40>)
 800575a:	4c0c      	ldr	r4, [pc, #48]	; (800578c <__libc_init_array+0x44>)
 800575c:	f001 fcbc 	bl	80070d8 <_init>
 8005760:	1b64      	subs	r4, r4, r5
 8005762:	10a4      	asrs	r4, r4, #2
 8005764:	2600      	movs	r6, #0
 8005766:	42a6      	cmp	r6, r4
 8005768:	d105      	bne.n	8005776 <__libc_init_array+0x2e>
 800576a:	bd70      	pop	{r4, r5, r6, pc}
 800576c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005770:	4798      	blx	r3
 8005772:	3601      	adds	r6, #1
 8005774:	e7ee      	b.n	8005754 <__libc_init_array+0xc>
 8005776:	f855 3b04 	ldr.w	r3, [r5], #4
 800577a:	4798      	blx	r3
 800577c:	3601      	adds	r6, #1
 800577e:	e7f2      	b.n	8005766 <__libc_init_array+0x1e>
 8005780:	08007338 	.word	0x08007338
 8005784:	08007338 	.word	0x08007338
 8005788:	08007338 	.word	0x08007338
 800578c:	0800733c 	.word	0x0800733c

08005790 <__retarget_lock_acquire_recursive>:
 8005790:	4770      	bx	lr

08005792 <__retarget_lock_release_recursive>:
 8005792:	4770      	bx	lr

08005794 <strcpy>:
 8005794:	4603      	mov	r3, r0
 8005796:	f811 2b01 	ldrb.w	r2, [r1], #1
 800579a:	f803 2b01 	strb.w	r2, [r3], #1
 800579e:	2a00      	cmp	r2, #0
 80057a0:	d1f9      	bne.n	8005796 <strcpy+0x2>
 80057a2:	4770      	bx	lr

080057a4 <__assert_func>:
 80057a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057a6:	4614      	mov	r4, r2
 80057a8:	461a      	mov	r2, r3
 80057aa:	4b09      	ldr	r3, [pc, #36]	; (80057d0 <__assert_func+0x2c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4605      	mov	r5, r0
 80057b0:	68d8      	ldr	r0, [r3, #12]
 80057b2:	b14c      	cbz	r4, 80057c8 <__assert_func+0x24>
 80057b4:	4b07      	ldr	r3, [pc, #28]	; (80057d4 <__assert_func+0x30>)
 80057b6:	9100      	str	r1, [sp, #0]
 80057b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057bc:	4906      	ldr	r1, [pc, #24]	; (80057d8 <__assert_func+0x34>)
 80057be:	462b      	mov	r3, r5
 80057c0:	f000 f908 	bl	80059d4 <fiprintf>
 80057c4:	f000 f918 	bl	80059f8 <abort>
 80057c8:	4b04      	ldr	r3, [pc, #16]	; (80057dc <__assert_func+0x38>)
 80057ca:	461c      	mov	r4, r3
 80057cc:	e7f3      	b.n	80057b6 <__assert_func+0x12>
 80057ce:	bf00      	nop
 80057d0:	20000070 	.word	0x20000070
 80057d4:	0800728e 	.word	0x0800728e
 80057d8:	0800729b 	.word	0x0800729b
 80057dc:	080072c9 	.word	0x080072c9

080057e0 <_free_r>:
 80057e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057e2:	2900      	cmp	r1, #0
 80057e4:	d044      	beq.n	8005870 <_free_r+0x90>
 80057e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ea:	9001      	str	r0, [sp, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f1a1 0404 	sub.w	r4, r1, #4
 80057f2:	bfb8      	it	lt
 80057f4:	18e4      	addlt	r4, r4, r3
 80057f6:	f7ff fd49 	bl	800528c <__malloc_lock>
 80057fa:	4a1e      	ldr	r2, [pc, #120]	; (8005874 <_free_r+0x94>)
 80057fc:	9801      	ldr	r0, [sp, #4]
 80057fe:	6813      	ldr	r3, [r2, #0]
 8005800:	b933      	cbnz	r3, 8005810 <_free_r+0x30>
 8005802:	6063      	str	r3, [r4, #4]
 8005804:	6014      	str	r4, [r2, #0]
 8005806:	b003      	add	sp, #12
 8005808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800580c:	f7ff bd44 	b.w	8005298 <__malloc_unlock>
 8005810:	42a3      	cmp	r3, r4
 8005812:	d908      	bls.n	8005826 <_free_r+0x46>
 8005814:	6825      	ldr	r5, [r4, #0]
 8005816:	1961      	adds	r1, r4, r5
 8005818:	428b      	cmp	r3, r1
 800581a:	bf01      	itttt	eq
 800581c:	6819      	ldreq	r1, [r3, #0]
 800581e:	685b      	ldreq	r3, [r3, #4]
 8005820:	1949      	addeq	r1, r1, r5
 8005822:	6021      	streq	r1, [r4, #0]
 8005824:	e7ed      	b.n	8005802 <_free_r+0x22>
 8005826:	461a      	mov	r2, r3
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	b10b      	cbz	r3, 8005830 <_free_r+0x50>
 800582c:	42a3      	cmp	r3, r4
 800582e:	d9fa      	bls.n	8005826 <_free_r+0x46>
 8005830:	6811      	ldr	r1, [r2, #0]
 8005832:	1855      	adds	r5, r2, r1
 8005834:	42a5      	cmp	r5, r4
 8005836:	d10b      	bne.n	8005850 <_free_r+0x70>
 8005838:	6824      	ldr	r4, [r4, #0]
 800583a:	4421      	add	r1, r4
 800583c:	1854      	adds	r4, r2, r1
 800583e:	42a3      	cmp	r3, r4
 8005840:	6011      	str	r1, [r2, #0]
 8005842:	d1e0      	bne.n	8005806 <_free_r+0x26>
 8005844:	681c      	ldr	r4, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	6053      	str	r3, [r2, #4]
 800584a:	440c      	add	r4, r1
 800584c:	6014      	str	r4, [r2, #0]
 800584e:	e7da      	b.n	8005806 <_free_r+0x26>
 8005850:	d902      	bls.n	8005858 <_free_r+0x78>
 8005852:	230c      	movs	r3, #12
 8005854:	6003      	str	r3, [r0, #0]
 8005856:	e7d6      	b.n	8005806 <_free_r+0x26>
 8005858:	6825      	ldr	r5, [r4, #0]
 800585a:	1961      	adds	r1, r4, r5
 800585c:	428b      	cmp	r3, r1
 800585e:	bf04      	itt	eq
 8005860:	6819      	ldreq	r1, [r3, #0]
 8005862:	685b      	ldreq	r3, [r3, #4]
 8005864:	6063      	str	r3, [r4, #4]
 8005866:	bf04      	itt	eq
 8005868:	1949      	addeq	r1, r1, r5
 800586a:	6021      	streq	r1, [r4, #0]
 800586c:	6054      	str	r4, [r2, #4]
 800586e:	e7ca      	b.n	8005806 <_free_r+0x26>
 8005870:	b003      	add	sp, #12
 8005872:	bd30      	pop	{r4, r5, pc}
 8005874:	20000228 	.word	0x20000228

08005878 <__sflush_r>:
 8005878:	898a      	ldrh	r2, [r1, #12]
 800587a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800587e:	4605      	mov	r5, r0
 8005880:	0710      	lsls	r0, r2, #28
 8005882:	460c      	mov	r4, r1
 8005884:	d458      	bmi.n	8005938 <__sflush_r+0xc0>
 8005886:	684b      	ldr	r3, [r1, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	dc05      	bgt.n	8005898 <__sflush_r+0x20>
 800588c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800588e:	2b00      	cmp	r3, #0
 8005890:	dc02      	bgt.n	8005898 <__sflush_r+0x20>
 8005892:	2000      	movs	r0, #0
 8005894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800589a:	2e00      	cmp	r6, #0
 800589c:	d0f9      	beq.n	8005892 <__sflush_r+0x1a>
 800589e:	2300      	movs	r3, #0
 80058a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058a4:	682f      	ldr	r7, [r5, #0]
 80058a6:	6a21      	ldr	r1, [r4, #32]
 80058a8:	602b      	str	r3, [r5, #0]
 80058aa:	d032      	beq.n	8005912 <__sflush_r+0x9a>
 80058ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058ae:	89a3      	ldrh	r3, [r4, #12]
 80058b0:	075a      	lsls	r2, r3, #29
 80058b2:	d505      	bpl.n	80058c0 <__sflush_r+0x48>
 80058b4:	6863      	ldr	r3, [r4, #4]
 80058b6:	1ac0      	subs	r0, r0, r3
 80058b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058ba:	b10b      	cbz	r3, 80058c0 <__sflush_r+0x48>
 80058bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058be:	1ac0      	subs	r0, r0, r3
 80058c0:	2300      	movs	r3, #0
 80058c2:	4602      	mov	r2, r0
 80058c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058c6:	6a21      	ldr	r1, [r4, #32]
 80058c8:	4628      	mov	r0, r5
 80058ca:	47b0      	blx	r6
 80058cc:	1c43      	adds	r3, r0, #1
 80058ce:	89a3      	ldrh	r3, [r4, #12]
 80058d0:	d106      	bne.n	80058e0 <__sflush_r+0x68>
 80058d2:	6829      	ldr	r1, [r5, #0]
 80058d4:	291d      	cmp	r1, #29
 80058d6:	d82b      	bhi.n	8005930 <__sflush_r+0xb8>
 80058d8:	4a29      	ldr	r2, [pc, #164]	; (8005980 <__sflush_r+0x108>)
 80058da:	410a      	asrs	r2, r1
 80058dc:	07d6      	lsls	r6, r2, #31
 80058de:	d427      	bmi.n	8005930 <__sflush_r+0xb8>
 80058e0:	2200      	movs	r2, #0
 80058e2:	6062      	str	r2, [r4, #4]
 80058e4:	04d9      	lsls	r1, r3, #19
 80058e6:	6922      	ldr	r2, [r4, #16]
 80058e8:	6022      	str	r2, [r4, #0]
 80058ea:	d504      	bpl.n	80058f6 <__sflush_r+0x7e>
 80058ec:	1c42      	adds	r2, r0, #1
 80058ee:	d101      	bne.n	80058f4 <__sflush_r+0x7c>
 80058f0:	682b      	ldr	r3, [r5, #0]
 80058f2:	b903      	cbnz	r3, 80058f6 <__sflush_r+0x7e>
 80058f4:	6560      	str	r0, [r4, #84]	; 0x54
 80058f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058f8:	602f      	str	r7, [r5, #0]
 80058fa:	2900      	cmp	r1, #0
 80058fc:	d0c9      	beq.n	8005892 <__sflush_r+0x1a>
 80058fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005902:	4299      	cmp	r1, r3
 8005904:	d002      	beq.n	800590c <__sflush_r+0x94>
 8005906:	4628      	mov	r0, r5
 8005908:	f7ff ff6a 	bl	80057e0 <_free_r>
 800590c:	2000      	movs	r0, #0
 800590e:	6360      	str	r0, [r4, #52]	; 0x34
 8005910:	e7c0      	b.n	8005894 <__sflush_r+0x1c>
 8005912:	2301      	movs	r3, #1
 8005914:	4628      	mov	r0, r5
 8005916:	47b0      	blx	r6
 8005918:	1c41      	adds	r1, r0, #1
 800591a:	d1c8      	bne.n	80058ae <__sflush_r+0x36>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0c5      	beq.n	80058ae <__sflush_r+0x36>
 8005922:	2b1d      	cmp	r3, #29
 8005924:	d001      	beq.n	800592a <__sflush_r+0xb2>
 8005926:	2b16      	cmp	r3, #22
 8005928:	d101      	bne.n	800592e <__sflush_r+0xb6>
 800592a:	602f      	str	r7, [r5, #0]
 800592c:	e7b1      	b.n	8005892 <__sflush_r+0x1a>
 800592e:	89a3      	ldrh	r3, [r4, #12]
 8005930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005934:	81a3      	strh	r3, [r4, #12]
 8005936:	e7ad      	b.n	8005894 <__sflush_r+0x1c>
 8005938:	690f      	ldr	r7, [r1, #16]
 800593a:	2f00      	cmp	r7, #0
 800593c:	d0a9      	beq.n	8005892 <__sflush_r+0x1a>
 800593e:	0793      	lsls	r3, r2, #30
 8005940:	680e      	ldr	r6, [r1, #0]
 8005942:	bf08      	it	eq
 8005944:	694b      	ldreq	r3, [r1, #20]
 8005946:	600f      	str	r7, [r1, #0]
 8005948:	bf18      	it	ne
 800594a:	2300      	movne	r3, #0
 800594c:	eba6 0807 	sub.w	r8, r6, r7
 8005950:	608b      	str	r3, [r1, #8]
 8005952:	f1b8 0f00 	cmp.w	r8, #0
 8005956:	dd9c      	ble.n	8005892 <__sflush_r+0x1a>
 8005958:	6a21      	ldr	r1, [r4, #32]
 800595a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800595c:	4643      	mov	r3, r8
 800595e:	463a      	mov	r2, r7
 8005960:	4628      	mov	r0, r5
 8005962:	47b0      	blx	r6
 8005964:	2800      	cmp	r0, #0
 8005966:	dc06      	bgt.n	8005976 <__sflush_r+0xfe>
 8005968:	89a3      	ldrh	r3, [r4, #12]
 800596a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800596e:	81a3      	strh	r3, [r4, #12]
 8005970:	f04f 30ff 	mov.w	r0, #4294967295
 8005974:	e78e      	b.n	8005894 <__sflush_r+0x1c>
 8005976:	4407      	add	r7, r0
 8005978:	eba8 0800 	sub.w	r8, r8, r0
 800597c:	e7e9      	b.n	8005952 <__sflush_r+0xda>
 800597e:	bf00      	nop
 8005980:	dfbffffe 	.word	0xdfbffffe

08005984 <_fflush_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	690b      	ldr	r3, [r1, #16]
 8005988:	4605      	mov	r5, r0
 800598a:	460c      	mov	r4, r1
 800598c:	b913      	cbnz	r3, 8005994 <_fflush_r+0x10>
 800598e:	2500      	movs	r5, #0
 8005990:	4628      	mov	r0, r5
 8005992:	bd38      	pop	{r3, r4, r5, pc}
 8005994:	b118      	cbz	r0, 800599e <_fflush_r+0x1a>
 8005996:	6a03      	ldr	r3, [r0, #32]
 8005998:	b90b      	cbnz	r3, 800599e <_fflush_r+0x1a>
 800599a:	f7ff fd89 	bl	80054b0 <__sinit>
 800599e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f3      	beq.n	800598e <_fflush_r+0xa>
 80059a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059a8:	07d0      	lsls	r0, r2, #31
 80059aa:	d404      	bmi.n	80059b6 <_fflush_r+0x32>
 80059ac:	0599      	lsls	r1, r3, #22
 80059ae:	d402      	bmi.n	80059b6 <_fflush_r+0x32>
 80059b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059b2:	f7ff feed 	bl	8005790 <__retarget_lock_acquire_recursive>
 80059b6:	4628      	mov	r0, r5
 80059b8:	4621      	mov	r1, r4
 80059ba:	f7ff ff5d 	bl	8005878 <__sflush_r>
 80059be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059c0:	07da      	lsls	r2, r3, #31
 80059c2:	4605      	mov	r5, r0
 80059c4:	d4e4      	bmi.n	8005990 <_fflush_r+0xc>
 80059c6:	89a3      	ldrh	r3, [r4, #12]
 80059c8:	059b      	lsls	r3, r3, #22
 80059ca:	d4e1      	bmi.n	8005990 <_fflush_r+0xc>
 80059cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059ce:	f7ff fee0 	bl	8005792 <__retarget_lock_release_recursive>
 80059d2:	e7dd      	b.n	8005990 <_fflush_r+0xc>

080059d4 <fiprintf>:
 80059d4:	b40e      	push	{r1, r2, r3}
 80059d6:	b503      	push	{r0, r1, lr}
 80059d8:	4601      	mov	r1, r0
 80059da:	ab03      	add	r3, sp, #12
 80059dc:	4805      	ldr	r0, [pc, #20]	; (80059f4 <fiprintf+0x20>)
 80059de:	f853 2b04 	ldr.w	r2, [r3], #4
 80059e2:	6800      	ldr	r0, [r0, #0]
 80059e4:	9301      	str	r3, [sp, #4]
 80059e6:	f000 f837 	bl	8005a58 <_vfiprintf_r>
 80059ea:	b002      	add	sp, #8
 80059ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80059f0:	b003      	add	sp, #12
 80059f2:	4770      	bx	lr
 80059f4:	20000070 	.word	0x20000070

080059f8 <abort>:
 80059f8:	b508      	push	{r3, lr}
 80059fa:	2006      	movs	r0, #6
 80059fc:	f000 fb94 	bl	8006128 <raise>
 8005a00:	2001      	movs	r0, #1
 8005a02:	f7fc fb85 	bl	8002110 <_exit>

08005a06 <__sfputc_r>:
 8005a06:	6893      	ldr	r3, [r2, #8]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	b410      	push	{r4}
 8005a0e:	6093      	str	r3, [r2, #8]
 8005a10:	da08      	bge.n	8005a24 <__sfputc_r+0x1e>
 8005a12:	6994      	ldr	r4, [r2, #24]
 8005a14:	42a3      	cmp	r3, r4
 8005a16:	db01      	blt.n	8005a1c <__sfputc_r+0x16>
 8005a18:	290a      	cmp	r1, #10
 8005a1a:	d103      	bne.n	8005a24 <__sfputc_r+0x1e>
 8005a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a20:	f000 bac4 	b.w	8005fac <__swbuf_r>
 8005a24:	6813      	ldr	r3, [r2, #0]
 8005a26:	1c58      	adds	r0, r3, #1
 8005a28:	6010      	str	r0, [r2, #0]
 8005a2a:	7019      	strb	r1, [r3, #0]
 8005a2c:	4608      	mov	r0, r1
 8005a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <__sfputs_r>:
 8005a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a36:	4606      	mov	r6, r0
 8005a38:	460f      	mov	r7, r1
 8005a3a:	4614      	mov	r4, r2
 8005a3c:	18d5      	adds	r5, r2, r3
 8005a3e:	42ac      	cmp	r4, r5
 8005a40:	d101      	bne.n	8005a46 <__sfputs_r+0x12>
 8005a42:	2000      	movs	r0, #0
 8005a44:	e007      	b.n	8005a56 <__sfputs_r+0x22>
 8005a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a4a:	463a      	mov	r2, r7
 8005a4c:	4630      	mov	r0, r6
 8005a4e:	f7ff ffda 	bl	8005a06 <__sfputc_r>
 8005a52:	1c43      	adds	r3, r0, #1
 8005a54:	d1f3      	bne.n	8005a3e <__sfputs_r+0xa>
 8005a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a58 <_vfiprintf_r>:
 8005a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a5c:	460d      	mov	r5, r1
 8005a5e:	b09d      	sub	sp, #116	; 0x74
 8005a60:	4614      	mov	r4, r2
 8005a62:	4698      	mov	r8, r3
 8005a64:	4606      	mov	r6, r0
 8005a66:	b118      	cbz	r0, 8005a70 <_vfiprintf_r+0x18>
 8005a68:	6a03      	ldr	r3, [r0, #32]
 8005a6a:	b90b      	cbnz	r3, 8005a70 <_vfiprintf_r+0x18>
 8005a6c:	f7ff fd20 	bl	80054b0 <__sinit>
 8005a70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a72:	07d9      	lsls	r1, r3, #31
 8005a74:	d405      	bmi.n	8005a82 <_vfiprintf_r+0x2a>
 8005a76:	89ab      	ldrh	r3, [r5, #12]
 8005a78:	059a      	lsls	r2, r3, #22
 8005a7a:	d402      	bmi.n	8005a82 <_vfiprintf_r+0x2a>
 8005a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a7e:	f7ff fe87 	bl	8005790 <__retarget_lock_acquire_recursive>
 8005a82:	89ab      	ldrh	r3, [r5, #12]
 8005a84:	071b      	lsls	r3, r3, #28
 8005a86:	d501      	bpl.n	8005a8c <_vfiprintf_r+0x34>
 8005a88:	692b      	ldr	r3, [r5, #16]
 8005a8a:	b99b      	cbnz	r3, 8005ab4 <_vfiprintf_r+0x5c>
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	4630      	mov	r0, r6
 8005a90:	f000 faca 	bl	8006028 <__swsetup_r>
 8005a94:	b170      	cbz	r0, 8005ab4 <_vfiprintf_r+0x5c>
 8005a96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a98:	07dc      	lsls	r4, r3, #31
 8005a9a:	d504      	bpl.n	8005aa6 <_vfiprintf_r+0x4e>
 8005a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa0:	b01d      	add	sp, #116	; 0x74
 8005aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa6:	89ab      	ldrh	r3, [r5, #12]
 8005aa8:	0598      	lsls	r0, r3, #22
 8005aaa:	d4f7      	bmi.n	8005a9c <_vfiprintf_r+0x44>
 8005aac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005aae:	f7ff fe70 	bl	8005792 <__retarget_lock_release_recursive>
 8005ab2:	e7f3      	b.n	8005a9c <_vfiprintf_r+0x44>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ab8:	2320      	movs	r3, #32
 8005aba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005abe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ac2:	2330      	movs	r3, #48	; 0x30
 8005ac4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005c78 <_vfiprintf_r+0x220>
 8005ac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005acc:	f04f 0901 	mov.w	r9, #1
 8005ad0:	4623      	mov	r3, r4
 8005ad2:	469a      	mov	sl, r3
 8005ad4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ad8:	b10a      	cbz	r2, 8005ade <_vfiprintf_r+0x86>
 8005ada:	2a25      	cmp	r2, #37	; 0x25
 8005adc:	d1f9      	bne.n	8005ad2 <_vfiprintf_r+0x7a>
 8005ade:	ebba 0b04 	subs.w	fp, sl, r4
 8005ae2:	d00b      	beq.n	8005afc <_vfiprintf_r+0xa4>
 8005ae4:	465b      	mov	r3, fp
 8005ae6:	4622      	mov	r2, r4
 8005ae8:	4629      	mov	r1, r5
 8005aea:	4630      	mov	r0, r6
 8005aec:	f7ff ffa2 	bl	8005a34 <__sfputs_r>
 8005af0:	3001      	adds	r0, #1
 8005af2:	f000 80a9 	beq.w	8005c48 <_vfiprintf_r+0x1f0>
 8005af6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005af8:	445a      	add	r2, fp
 8005afa:	9209      	str	r2, [sp, #36]	; 0x24
 8005afc:	f89a 3000 	ldrb.w	r3, [sl]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 80a1 	beq.w	8005c48 <_vfiprintf_r+0x1f0>
 8005b06:	2300      	movs	r3, #0
 8005b08:	f04f 32ff 	mov.w	r2, #4294967295
 8005b0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b10:	f10a 0a01 	add.w	sl, sl, #1
 8005b14:	9304      	str	r3, [sp, #16]
 8005b16:	9307      	str	r3, [sp, #28]
 8005b18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b1c:	931a      	str	r3, [sp, #104]	; 0x68
 8005b1e:	4654      	mov	r4, sl
 8005b20:	2205      	movs	r2, #5
 8005b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b26:	4854      	ldr	r0, [pc, #336]	; (8005c78 <_vfiprintf_r+0x220>)
 8005b28:	f7fa fb62 	bl	80001f0 <memchr>
 8005b2c:	9a04      	ldr	r2, [sp, #16]
 8005b2e:	b9d8      	cbnz	r0, 8005b68 <_vfiprintf_r+0x110>
 8005b30:	06d1      	lsls	r1, r2, #27
 8005b32:	bf44      	itt	mi
 8005b34:	2320      	movmi	r3, #32
 8005b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b3a:	0713      	lsls	r3, r2, #28
 8005b3c:	bf44      	itt	mi
 8005b3e:	232b      	movmi	r3, #43	; 0x2b
 8005b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b44:	f89a 3000 	ldrb.w	r3, [sl]
 8005b48:	2b2a      	cmp	r3, #42	; 0x2a
 8005b4a:	d015      	beq.n	8005b78 <_vfiprintf_r+0x120>
 8005b4c:	9a07      	ldr	r2, [sp, #28]
 8005b4e:	4654      	mov	r4, sl
 8005b50:	2000      	movs	r0, #0
 8005b52:	f04f 0c0a 	mov.w	ip, #10
 8005b56:	4621      	mov	r1, r4
 8005b58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b5c:	3b30      	subs	r3, #48	; 0x30
 8005b5e:	2b09      	cmp	r3, #9
 8005b60:	d94d      	bls.n	8005bfe <_vfiprintf_r+0x1a6>
 8005b62:	b1b0      	cbz	r0, 8005b92 <_vfiprintf_r+0x13a>
 8005b64:	9207      	str	r2, [sp, #28]
 8005b66:	e014      	b.n	8005b92 <_vfiprintf_r+0x13a>
 8005b68:	eba0 0308 	sub.w	r3, r0, r8
 8005b6c:	fa09 f303 	lsl.w	r3, r9, r3
 8005b70:	4313      	orrs	r3, r2
 8005b72:	9304      	str	r3, [sp, #16]
 8005b74:	46a2      	mov	sl, r4
 8005b76:	e7d2      	b.n	8005b1e <_vfiprintf_r+0xc6>
 8005b78:	9b03      	ldr	r3, [sp, #12]
 8005b7a:	1d19      	adds	r1, r3, #4
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	9103      	str	r1, [sp, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bfbb      	ittet	lt
 8005b84:	425b      	neglt	r3, r3
 8005b86:	f042 0202 	orrlt.w	r2, r2, #2
 8005b8a:	9307      	strge	r3, [sp, #28]
 8005b8c:	9307      	strlt	r3, [sp, #28]
 8005b8e:	bfb8      	it	lt
 8005b90:	9204      	strlt	r2, [sp, #16]
 8005b92:	7823      	ldrb	r3, [r4, #0]
 8005b94:	2b2e      	cmp	r3, #46	; 0x2e
 8005b96:	d10c      	bne.n	8005bb2 <_vfiprintf_r+0x15a>
 8005b98:	7863      	ldrb	r3, [r4, #1]
 8005b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b9c:	d134      	bne.n	8005c08 <_vfiprintf_r+0x1b0>
 8005b9e:	9b03      	ldr	r3, [sp, #12]
 8005ba0:	1d1a      	adds	r2, r3, #4
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	9203      	str	r2, [sp, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	bfb8      	it	lt
 8005baa:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bae:	3402      	adds	r4, #2
 8005bb0:	9305      	str	r3, [sp, #20]
 8005bb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005c88 <_vfiprintf_r+0x230>
 8005bb6:	7821      	ldrb	r1, [r4, #0]
 8005bb8:	2203      	movs	r2, #3
 8005bba:	4650      	mov	r0, sl
 8005bbc:	f7fa fb18 	bl	80001f0 <memchr>
 8005bc0:	b138      	cbz	r0, 8005bd2 <_vfiprintf_r+0x17a>
 8005bc2:	9b04      	ldr	r3, [sp, #16]
 8005bc4:	eba0 000a 	sub.w	r0, r0, sl
 8005bc8:	2240      	movs	r2, #64	; 0x40
 8005bca:	4082      	lsls	r2, r0
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	3401      	adds	r4, #1
 8005bd0:	9304      	str	r3, [sp, #16]
 8005bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bd6:	4829      	ldr	r0, [pc, #164]	; (8005c7c <_vfiprintf_r+0x224>)
 8005bd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bdc:	2206      	movs	r2, #6
 8005bde:	f7fa fb07 	bl	80001f0 <memchr>
 8005be2:	2800      	cmp	r0, #0
 8005be4:	d03f      	beq.n	8005c66 <_vfiprintf_r+0x20e>
 8005be6:	4b26      	ldr	r3, [pc, #152]	; (8005c80 <_vfiprintf_r+0x228>)
 8005be8:	bb1b      	cbnz	r3, 8005c32 <_vfiprintf_r+0x1da>
 8005bea:	9b03      	ldr	r3, [sp, #12]
 8005bec:	3307      	adds	r3, #7
 8005bee:	f023 0307 	bic.w	r3, r3, #7
 8005bf2:	3308      	adds	r3, #8
 8005bf4:	9303      	str	r3, [sp, #12]
 8005bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf8:	443b      	add	r3, r7
 8005bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8005bfc:	e768      	b.n	8005ad0 <_vfiprintf_r+0x78>
 8005bfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c02:	460c      	mov	r4, r1
 8005c04:	2001      	movs	r0, #1
 8005c06:	e7a6      	b.n	8005b56 <_vfiprintf_r+0xfe>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	3401      	adds	r4, #1
 8005c0c:	9305      	str	r3, [sp, #20]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	f04f 0c0a 	mov.w	ip, #10
 8005c14:	4620      	mov	r0, r4
 8005c16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c1a:	3a30      	subs	r2, #48	; 0x30
 8005c1c:	2a09      	cmp	r2, #9
 8005c1e:	d903      	bls.n	8005c28 <_vfiprintf_r+0x1d0>
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0c6      	beq.n	8005bb2 <_vfiprintf_r+0x15a>
 8005c24:	9105      	str	r1, [sp, #20]
 8005c26:	e7c4      	b.n	8005bb2 <_vfiprintf_r+0x15a>
 8005c28:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e7f0      	b.n	8005c14 <_vfiprintf_r+0x1bc>
 8005c32:	ab03      	add	r3, sp, #12
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	462a      	mov	r2, r5
 8005c38:	4b12      	ldr	r3, [pc, #72]	; (8005c84 <_vfiprintf_r+0x22c>)
 8005c3a:	a904      	add	r1, sp, #16
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f3af 8000 	nop.w
 8005c42:	4607      	mov	r7, r0
 8005c44:	1c78      	adds	r0, r7, #1
 8005c46:	d1d6      	bne.n	8005bf6 <_vfiprintf_r+0x19e>
 8005c48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c4a:	07d9      	lsls	r1, r3, #31
 8005c4c:	d405      	bmi.n	8005c5a <_vfiprintf_r+0x202>
 8005c4e:	89ab      	ldrh	r3, [r5, #12]
 8005c50:	059a      	lsls	r2, r3, #22
 8005c52:	d402      	bmi.n	8005c5a <_vfiprintf_r+0x202>
 8005c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c56:	f7ff fd9c 	bl	8005792 <__retarget_lock_release_recursive>
 8005c5a:	89ab      	ldrh	r3, [r5, #12]
 8005c5c:	065b      	lsls	r3, r3, #25
 8005c5e:	f53f af1d 	bmi.w	8005a9c <_vfiprintf_r+0x44>
 8005c62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c64:	e71c      	b.n	8005aa0 <_vfiprintf_r+0x48>
 8005c66:	ab03      	add	r3, sp, #12
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	462a      	mov	r2, r5
 8005c6c:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <_vfiprintf_r+0x22c>)
 8005c6e:	a904      	add	r1, sp, #16
 8005c70:	4630      	mov	r0, r6
 8005c72:	f000 f879 	bl	8005d68 <_printf_i>
 8005c76:	e7e4      	b.n	8005c42 <_vfiprintf_r+0x1ea>
 8005c78:	080072ca 	.word	0x080072ca
 8005c7c:	080072d4 	.word	0x080072d4
 8005c80:	00000000 	.word	0x00000000
 8005c84:	08005a35 	.word	0x08005a35
 8005c88:	080072d0 	.word	0x080072d0

08005c8c <_printf_common>:
 8005c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c90:	4616      	mov	r6, r2
 8005c92:	4699      	mov	r9, r3
 8005c94:	688a      	ldr	r2, [r1, #8]
 8005c96:	690b      	ldr	r3, [r1, #16]
 8005c98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	bfb8      	it	lt
 8005ca0:	4613      	movlt	r3, r2
 8005ca2:	6033      	str	r3, [r6, #0]
 8005ca4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ca8:	4607      	mov	r7, r0
 8005caa:	460c      	mov	r4, r1
 8005cac:	b10a      	cbz	r2, 8005cb2 <_printf_common+0x26>
 8005cae:	3301      	adds	r3, #1
 8005cb0:	6033      	str	r3, [r6, #0]
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	0699      	lsls	r1, r3, #26
 8005cb6:	bf42      	ittt	mi
 8005cb8:	6833      	ldrmi	r3, [r6, #0]
 8005cba:	3302      	addmi	r3, #2
 8005cbc:	6033      	strmi	r3, [r6, #0]
 8005cbe:	6825      	ldr	r5, [r4, #0]
 8005cc0:	f015 0506 	ands.w	r5, r5, #6
 8005cc4:	d106      	bne.n	8005cd4 <_printf_common+0x48>
 8005cc6:	f104 0a19 	add.w	sl, r4, #25
 8005cca:	68e3      	ldr	r3, [r4, #12]
 8005ccc:	6832      	ldr	r2, [r6, #0]
 8005cce:	1a9b      	subs	r3, r3, r2
 8005cd0:	42ab      	cmp	r3, r5
 8005cd2:	dc26      	bgt.n	8005d22 <_printf_common+0x96>
 8005cd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cd8:	1e13      	subs	r3, r2, #0
 8005cda:	6822      	ldr	r2, [r4, #0]
 8005cdc:	bf18      	it	ne
 8005cde:	2301      	movne	r3, #1
 8005ce0:	0692      	lsls	r2, r2, #26
 8005ce2:	d42b      	bmi.n	8005d3c <_printf_common+0xb0>
 8005ce4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ce8:	4649      	mov	r1, r9
 8005cea:	4638      	mov	r0, r7
 8005cec:	47c0      	blx	r8
 8005cee:	3001      	adds	r0, #1
 8005cf0:	d01e      	beq.n	8005d30 <_printf_common+0xa4>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	6922      	ldr	r2, [r4, #16]
 8005cf6:	f003 0306 	and.w	r3, r3, #6
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	bf02      	ittt	eq
 8005cfe:	68e5      	ldreq	r5, [r4, #12]
 8005d00:	6833      	ldreq	r3, [r6, #0]
 8005d02:	1aed      	subeq	r5, r5, r3
 8005d04:	68a3      	ldr	r3, [r4, #8]
 8005d06:	bf0c      	ite	eq
 8005d08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d0c:	2500      	movne	r5, #0
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	bfc4      	itt	gt
 8005d12:	1a9b      	subgt	r3, r3, r2
 8005d14:	18ed      	addgt	r5, r5, r3
 8005d16:	2600      	movs	r6, #0
 8005d18:	341a      	adds	r4, #26
 8005d1a:	42b5      	cmp	r5, r6
 8005d1c:	d11a      	bne.n	8005d54 <_printf_common+0xc8>
 8005d1e:	2000      	movs	r0, #0
 8005d20:	e008      	b.n	8005d34 <_printf_common+0xa8>
 8005d22:	2301      	movs	r3, #1
 8005d24:	4652      	mov	r2, sl
 8005d26:	4649      	mov	r1, r9
 8005d28:	4638      	mov	r0, r7
 8005d2a:	47c0      	blx	r8
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	d103      	bne.n	8005d38 <_printf_common+0xac>
 8005d30:	f04f 30ff 	mov.w	r0, #4294967295
 8005d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d38:	3501      	adds	r5, #1
 8005d3a:	e7c6      	b.n	8005cca <_printf_common+0x3e>
 8005d3c:	18e1      	adds	r1, r4, r3
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	2030      	movs	r0, #48	; 0x30
 8005d42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d46:	4422      	add	r2, r4
 8005d48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d50:	3302      	adds	r3, #2
 8005d52:	e7c7      	b.n	8005ce4 <_printf_common+0x58>
 8005d54:	2301      	movs	r3, #1
 8005d56:	4622      	mov	r2, r4
 8005d58:	4649      	mov	r1, r9
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	47c0      	blx	r8
 8005d5e:	3001      	adds	r0, #1
 8005d60:	d0e6      	beq.n	8005d30 <_printf_common+0xa4>
 8005d62:	3601      	adds	r6, #1
 8005d64:	e7d9      	b.n	8005d1a <_printf_common+0x8e>
	...

08005d68 <_printf_i>:
 8005d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d6c:	7e0f      	ldrb	r7, [r1, #24]
 8005d6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d70:	2f78      	cmp	r7, #120	; 0x78
 8005d72:	4691      	mov	r9, r2
 8005d74:	4680      	mov	r8, r0
 8005d76:	460c      	mov	r4, r1
 8005d78:	469a      	mov	sl, r3
 8005d7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d7e:	d807      	bhi.n	8005d90 <_printf_i+0x28>
 8005d80:	2f62      	cmp	r7, #98	; 0x62
 8005d82:	d80a      	bhi.n	8005d9a <_printf_i+0x32>
 8005d84:	2f00      	cmp	r7, #0
 8005d86:	f000 80d4 	beq.w	8005f32 <_printf_i+0x1ca>
 8005d8a:	2f58      	cmp	r7, #88	; 0x58
 8005d8c:	f000 80c0 	beq.w	8005f10 <_printf_i+0x1a8>
 8005d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d98:	e03a      	b.n	8005e10 <_printf_i+0xa8>
 8005d9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d9e:	2b15      	cmp	r3, #21
 8005da0:	d8f6      	bhi.n	8005d90 <_printf_i+0x28>
 8005da2:	a101      	add	r1, pc, #4	; (adr r1, 8005da8 <_printf_i+0x40>)
 8005da4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005da8:	08005e01 	.word	0x08005e01
 8005dac:	08005e15 	.word	0x08005e15
 8005db0:	08005d91 	.word	0x08005d91
 8005db4:	08005d91 	.word	0x08005d91
 8005db8:	08005d91 	.word	0x08005d91
 8005dbc:	08005d91 	.word	0x08005d91
 8005dc0:	08005e15 	.word	0x08005e15
 8005dc4:	08005d91 	.word	0x08005d91
 8005dc8:	08005d91 	.word	0x08005d91
 8005dcc:	08005d91 	.word	0x08005d91
 8005dd0:	08005d91 	.word	0x08005d91
 8005dd4:	08005f19 	.word	0x08005f19
 8005dd8:	08005e41 	.word	0x08005e41
 8005ddc:	08005ed3 	.word	0x08005ed3
 8005de0:	08005d91 	.word	0x08005d91
 8005de4:	08005d91 	.word	0x08005d91
 8005de8:	08005f3b 	.word	0x08005f3b
 8005dec:	08005d91 	.word	0x08005d91
 8005df0:	08005e41 	.word	0x08005e41
 8005df4:	08005d91 	.word	0x08005d91
 8005df8:	08005d91 	.word	0x08005d91
 8005dfc:	08005edb 	.word	0x08005edb
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	1d1a      	adds	r2, r3, #4
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	602a      	str	r2, [r5, #0]
 8005e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e10:	2301      	movs	r3, #1
 8005e12:	e09f      	b.n	8005f54 <_printf_i+0x1ec>
 8005e14:	6820      	ldr	r0, [r4, #0]
 8005e16:	682b      	ldr	r3, [r5, #0]
 8005e18:	0607      	lsls	r7, r0, #24
 8005e1a:	f103 0104 	add.w	r1, r3, #4
 8005e1e:	6029      	str	r1, [r5, #0]
 8005e20:	d501      	bpl.n	8005e26 <_printf_i+0xbe>
 8005e22:	681e      	ldr	r6, [r3, #0]
 8005e24:	e003      	b.n	8005e2e <_printf_i+0xc6>
 8005e26:	0646      	lsls	r6, r0, #25
 8005e28:	d5fb      	bpl.n	8005e22 <_printf_i+0xba>
 8005e2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005e2e:	2e00      	cmp	r6, #0
 8005e30:	da03      	bge.n	8005e3a <_printf_i+0xd2>
 8005e32:	232d      	movs	r3, #45	; 0x2d
 8005e34:	4276      	negs	r6, r6
 8005e36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e3a:	485a      	ldr	r0, [pc, #360]	; (8005fa4 <_printf_i+0x23c>)
 8005e3c:	230a      	movs	r3, #10
 8005e3e:	e012      	b.n	8005e66 <_printf_i+0xfe>
 8005e40:	682b      	ldr	r3, [r5, #0]
 8005e42:	6820      	ldr	r0, [r4, #0]
 8005e44:	1d19      	adds	r1, r3, #4
 8005e46:	6029      	str	r1, [r5, #0]
 8005e48:	0605      	lsls	r5, r0, #24
 8005e4a:	d501      	bpl.n	8005e50 <_printf_i+0xe8>
 8005e4c:	681e      	ldr	r6, [r3, #0]
 8005e4e:	e002      	b.n	8005e56 <_printf_i+0xee>
 8005e50:	0641      	lsls	r1, r0, #25
 8005e52:	d5fb      	bpl.n	8005e4c <_printf_i+0xe4>
 8005e54:	881e      	ldrh	r6, [r3, #0]
 8005e56:	4853      	ldr	r0, [pc, #332]	; (8005fa4 <_printf_i+0x23c>)
 8005e58:	2f6f      	cmp	r7, #111	; 0x6f
 8005e5a:	bf0c      	ite	eq
 8005e5c:	2308      	moveq	r3, #8
 8005e5e:	230a      	movne	r3, #10
 8005e60:	2100      	movs	r1, #0
 8005e62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e66:	6865      	ldr	r5, [r4, #4]
 8005e68:	60a5      	str	r5, [r4, #8]
 8005e6a:	2d00      	cmp	r5, #0
 8005e6c:	bfa2      	ittt	ge
 8005e6e:	6821      	ldrge	r1, [r4, #0]
 8005e70:	f021 0104 	bicge.w	r1, r1, #4
 8005e74:	6021      	strge	r1, [r4, #0]
 8005e76:	b90e      	cbnz	r6, 8005e7c <_printf_i+0x114>
 8005e78:	2d00      	cmp	r5, #0
 8005e7a:	d04b      	beq.n	8005f14 <_printf_i+0x1ac>
 8005e7c:	4615      	mov	r5, r2
 8005e7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e82:	fb03 6711 	mls	r7, r3, r1, r6
 8005e86:	5dc7      	ldrb	r7, [r0, r7]
 8005e88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e8c:	4637      	mov	r7, r6
 8005e8e:	42bb      	cmp	r3, r7
 8005e90:	460e      	mov	r6, r1
 8005e92:	d9f4      	bls.n	8005e7e <_printf_i+0x116>
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d10b      	bne.n	8005eb0 <_printf_i+0x148>
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	07de      	lsls	r6, r3, #31
 8005e9c:	d508      	bpl.n	8005eb0 <_printf_i+0x148>
 8005e9e:	6923      	ldr	r3, [r4, #16]
 8005ea0:	6861      	ldr	r1, [r4, #4]
 8005ea2:	4299      	cmp	r1, r3
 8005ea4:	bfde      	ittt	le
 8005ea6:	2330      	movle	r3, #48	; 0x30
 8005ea8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005eac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005eb0:	1b52      	subs	r2, r2, r5
 8005eb2:	6122      	str	r2, [r4, #16]
 8005eb4:	f8cd a000 	str.w	sl, [sp]
 8005eb8:	464b      	mov	r3, r9
 8005eba:	aa03      	add	r2, sp, #12
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	f7ff fee4 	bl	8005c8c <_printf_common>
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	d14a      	bne.n	8005f5e <_printf_i+0x1f6>
 8005ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ecc:	b004      	add	sp, #16
 8005ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	f043 0320 	orr.w	r3, r3, #32
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	4833      	ldr	r0, [pc, #204]	; (8005fa8 <_printf_i+0x240>)
 8005edc:	2778      	movs	r7, #120	; 0x78
 8005ede:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	6829      	ldr	r1, [r5, #0]
 8005ee6:	061f      	lsls	r7, r3, #24
 8005ee8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005eec:	d402      	bmi.n	8005ef4 <_printf_i+0x18c>
 8005eee:	065f      	lsls	r7, r3, #25
 8005ef0:	bf48      	it	mi
 8005ef2:	b2b6      	uxthmi	r6, r6
 8005ef4:	07df      	lsls	r7, r3, #31
 8005ef6:	bf48      	it	mi
 8005ef8:	f043 0320 	orrmi.w	r3, r3, #32
 8005efc:	6029      	str	r1, [r5, #0]
 8005efe:	bf48      	it	mi
 8005f00:	6023      	strmi	r3, [r4, #0]
 8005f02:	b91e      	cbnz	r6, 8005f0c <_printf_i+0x1a4>
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	f023 0320 	bic.w	r3, r3, #32
 8005f0a:	6023      	str	r3, [r4, #0]
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	e7a7      	b.n	8005e60 <_printf_i+0xf8>
 8005f10:	4824      	ldr	r0, [pc, #144]	; (8005fa4 <_printf_i+0x23c>)
 8005f12:	e7e4      	b.n	8005ede <_printf_i+0x176>
 8005f14:	4615      	mov	r5, r2
 8005f16:	e7bd      	b.n	8005e94 <_printf_i+0x12c>
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	6826      	ldr	r6, [r4, #0]
 8005f1c:	6961      	ldr	r1, [r4, #20]
 8005f1e:	1d18      	adds	r0, r3, #4
 8005f20:	6028      	str	r0, [r5, #0]
 8005f22:	0635      	lsls	r5, r6, #24
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	d501      	bpl.n	8005f2c <_printf_i+0x1c4>
 8005f28:	6019      	str	r1, [r3, #0]
 8005f2a:	e002      	b.n	8005f32 <_printf_i+0x1ca>
 8005f2c:	0670      	lsls	r0, r6, #25
 8005f2e:	d5fb      	bpl.n	8005f28 <_printf_i+0x1c0>
 8005f30:	8019      	strh	r1, [r3, #0]
 8005f32:	2300      	movs	r3, #0
 8005f34:	6123      	str	r3, [r4, #16]
 8005f36:	4615      	mov	r5, r2
 8005f38:	e7bc      	b.n	8005eb4 <_printf_i+0x14c>
 8005f3a:	682b      	ldr	r3, [r5, #0]
 8005f3c:	1d1a      	adds	r2, r3, #4
 8005f3e:	602a      	str	r2, [r5, #0]
 8005f40:	681d      	ldr	r5, [r3, #0]
 8005f42:	6862      	ldr	r2, [r4, #4]
 8005f44:	2100      	movs	r1, #0
 8005f46:	4628      	mov	r0, r5
 8005f48:	f7fa f952 	bl	80001f0 <memchr>
 8005f4c:	b108      	cbz	r0, 8005f52 <_printf_i+0x1ea>
 8005f4e:	1b40      	subs	r0, r0, r5
 8005f50:	6060      	str	r0, [r4, #4]
 8005f52:	6863      	ldr	r3, [r4, #4]
 8005f54:	6123      	str	r3, [r4, #16]
 8005f56:	2300      	movs	r3, #0
 8005f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f5c:	e7aa      	b.n	8005eb4 <_printf_i+0x14c>
 8005f5e:	6923      	ldr	r3, [r4, #16]
 8005f60:	462a      	mov	r2, r5
 8005f62:	4649      	mov	r1, r9
 8005f64:	4640      	mov	r0, r8
 8005f66:	47d0      	blx	sl
 8005f68:	3001      	adds	r0, #1
 8005f6a:	d0ad      	beq.n	8005ec8 <_printf_i+0x160>
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	079b      	lsls	r3, r3, #30
 8005f70:	d413      	bmi.n	8005f9a <_printf_i+0x232>
 8005f72:	68e0      	ldr	r0, [r4, #12]
 8005f74:	9b03      	ldr	r3, [sp, #12]
 8005f76:	4298      	cmp	r0, r3
 8005f78:	bfb8      	it	lt
 8005f7a:	4618      	movlt	r0, r3
 8005f7c:	e7a6      	b.n	8005ecc <_printf_i+0x164>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	4632      	mov	r2, r6
 8005f82:	4649      	mov	r1, r9
 8005f84:	4640      	mov	r0, r8
 8005f86:	47d0      	blx	sl
 8005f88:	3001      	adds	r0, #1
 8005f8a:	d09d      	beq.n	8005ec8 <_printf_i+0x160>
 8005f8c:	3501      	adds	r5, #1
 8005f8e:	68e3      	ldr	r3, [r4, #12]
 8005f90:	9903      	ldr	r1, [sp, #12]
 8005f92:	1a5b      	subs	r3, r3, r1
 8005f94:	42ab      	cmp	r3, r5
 8005f96:	dcf2      	bgt.n	8005f7e <_printf_i+0x216>
 8005f98:	e7eb      	b.n	8005f72 <_printf_i+0x20a>
 8005f9a:	2500      	movs	r5, #0
 8005f9c:	f104 0619 	add.w	r6, r4, #25
 8005fa0:	e7f5      	b.n	8005f8e <_printf_i+0x226>
 8005fa2:	bf00      	nop
 8005fa4:	080072db 	.word	0x080072db
 8005fa8:	080072ec 	.word	0x080072ec

08005fac <__swbuf_r>:
 8005fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fae:	460e      	mov	r6, r1
 8005fb0:	4614      	mov	r4, r2
 8005fb2:	4605      	mov	r5, r0
 8005fb4:	b118      	cbz	r0, 8005fbe <__swbuf_r+0x12>
 8005fb6:	6a03      	ldr	r3, [r0, #32]
 8005fb8:	b90b      	cbnz	r3, 8005fbe <__swbuf_r+0x12>
 8005fba:	f7ff fa79 	bl	80054b0 <__sinit>
 8005fbe:	69a3      	ldr	r3, [r4, #24]
 8005fc0:	60a3      	str	r3, [r4, #8]
 8005fc2:	89a3      	ldrh	r3, [r4, #12]
 8005fc4:	071a      	lsls	r2, r3, #28
 8005fc6:	d525      	bpl.n	8006014 <__swbuf_r+0x68>
 8005fc8:	6923      	ldr	r3, [r4, #16]
 8005fca:	b31b      	cbz	r3, 8006014 <__swbuf_r+0x68>
 8005fcc:	6823      	ldr	r3, [r4, #0]
 8005fce:	6922      	ldr	r2, [r4, #16]
 8005fd0:	1a98      	subs	r0, r3, r2
 8005fd2:	6963      	ldr	r3, [r4, #20]
 8005fd4:	b2f6      	uxtb	r6, r6
 8005fd6:	4283      	cmp	r3, r0
 8005fd8:	4637      	mov	r7, r6
 8005fda:	dc04      	bgt.n	8005fe6 <__swbuf_r+0x3a>
 8005fdc:	4621      	mov	r1, r4
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f7ff fcd0 	bl	8005984 <_fflush_r>
 8005fe4:	b9e0      	cbnz	r0, 8006020 <__swbuf_r+0x74>
 8005fe6:	68a3      	ldr	r3, [r4, #8]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	60a3      	str	r3, [r4, #8]
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	6022      	str	r2, [r4, #0]
 8005ff2:	701e      	strb	r6, [r3, #0]
 8005ff4:	6962      	ldr	r2, [r4, #20]
 8005ff6:	1c43      	adds	r3, r0, #1
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d004      	beq.n	8006006 <__swbuf_r+0x5a>
 8005ffc:	89a3      	ldrh	r3, [r4, #12]
 8005ffe:	07db      	lsls	r3, r3, #31
 8006000:	d506      	bpl.n	8006010 <__swbuf_r+0x64>
 8006002:	2e0a      	cmp	r6, #10
 8006004:	d104      	bne.n	8006010 <__swbuf_r+0x64>
 8006006:	4621      	mov	r1, r4
 8006008:	4628      	mov	r0, r5
 800600a:	f7ff fcbb 	bl	8005984 <_fflush_r>
 800600e:	b938      	cbnz	r0, 8006020 <__swbuf_r+0x74>
 8006010:	4638      	mov	r0, r7
 8006012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006014:	4621      	mov	r1, r4
 8006016:	4628      	mov	r0, r5
 8006018:	f000 f806 	bl	8006028 <__swsetup_r>
 800601c:	2800      	cmp	r0, #0
 800601e:	d0d5      	beq.n	8005fcc <__swbuf_r+0x20>
 8006020:	f04f 37ff 	mov.w	r7, #4294967295
 8006024:	e7f4      	b.n	8006010 <__swbuf_r+0x64>
	...

08006028 <__swsetup_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4b2a      	ldr	r3, [pc, #168]	; (80060d4 <__swsetup_r+0xac>)
 800602c:	4605      	mov	r5, r0
 800602e:	6818      	ldr	r0, [r3, #0]
 8006030:	460c      	mov	r4, r1
 8006032:	b118      	cbz	r0, 800603c <__swsetup_r+0x14>
 8006034:	6a03      	ldr	r3, [r0, #32]
 8006036:	b90b      	cbnz	r3, 800603c <__swsetup_r+0x14>
 8006038:	f7ff fa3a 	bl	80054b0 <__sinit>
 800603c:	89a3      	ldrh	r3, [r4, #12]
 800603e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006042:	0718      	lsls	r0, r3, #28
 8006044:	d422      	bmi.n	800608c <__swsetup_r+0x64>
 8006046:	06d9      	lsls	r1, r3, #27
 8006048:	d407      	bmi.n	800605a <__swsetup_r+0x32>
 800604a:	2309      	movs	r3, #9
 800604c:	602b      	str	r3, [r5, #0]
 800604e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006052:	81a3      	strh	r3, [r4, #12]
 8006054:	f04f 30ff 	mov.w	r0, #4294967295
 8006058:	e034      	b.n	80060c4 <__swsetup_r+0x9c>
 800605a:	0758      	lsls	r0, r3, #29
 800605c:	d512      	bpl.n	8006084 <__swsetup_r+0x5c>
 800605e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006060:	b141      	cbz	r1, 8006074 <__swsetup_r+0x4c>
 8006062:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006066:	4299      	cmp	r1, r3
 8006068:	d002      	beq.n	8006070 <__swsetup_r+0x48>
 800606a:	4628      	mov	r0, r5
 800606c:	f7ff fbb8 	bl	80057e0 <_free_r>
 8006070:	2300      	movs	r3, #0
 8006072:	6363      	str	r3, [r4, #52]	; 0x34
 8006074:	89a3      	ldrh	r3, [r4, #12]
 8006076:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800607a:	81a3      	strh	r3, [r4, #12]
 800607c:	2300      	movs	r3, #0
 800607e:	6063      	str	r3, [r4, #4]
 8006080:	6923      	ldr	r3, [r4, #16]
 8006082:	6023      	str	r3, [r4, #0]
 8006084:	89a3      	ldrh	r3, [r4, #12]
 8006086:	f043 0308 	orr.w	r3, r3, #8
 800608a:	81a3      	strh	r3, [r4, #12]
 800608c:	6923      	ldr	r3, [r4, #16]
 800608e:	b94b      	cbnz	r3, 80060a4 <__swsetup_r+0x7c>
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800609a:	d003      	beq.n	80060a4 <__swsetup_r+0x7c>
 800609c:	4621      	mov	r1, r4
 800609e:	4628      	mov	r0, r5
 80060a0:	f000 f884 	bl	80061ac <__smakebuf_r>
 80060a4:	89a0      	ldrh	r0, [r4, #12]
 80060a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060aa:	f010 0301 	ands.w	r3, r0, #1
 80060ae:	d00a      	beq.n	80060c6 <__swsetup_r+0x9e>
 80060b0:	2300      	movs	r3, #0
 80060b2:	60a3      	str	r3, [r4, #8]
 80060b4:	6963      	ldr	r3, [r4, #20]
 80060b6:	425b      	negs	r3, r3
 80060b8:	61a3      	str	r3, [r4, #24]
 80060ba:	6923      	ldr	r3, [r4, #16]
 80060bc:	b943      	cbnz	r3, 80060d0 <__swsetup_r+0xa8>
 80060be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80060c2:	d1c4      	bne.n	800604e <__swsetup_r+0x26>
 80060c4:	bd38      	pop	{r3, r4, r5, pc}
 80060c6:	0781      	lsls	r1, r0, #30
 80060c8:	bf58      	it	pl
 80060ca:	6963      	ldrpl	r3, [r4, #20]
 80060cc:	60a3      	str	r3, [r4, #8]
 80060ce:	e7f4      	b.n	80060ba <__swsetup_r+0x92>
 80060d0:	2000      	movs	r0, #0
 80060d2:	e7f7      	b.n	80060c4 <__swsetup_r+0x9c>
 80060d4:	20000070 	.word	0x20000070

080060d8 <_raise_r>:
 80060d8:	291f      	cmp	r1, #31
 80060da:	b538      	push	{r3, r4, r5, lr}
 80060dc:	4604      	mov	r4, r0
 80060de:	460d      	mov	r5, r1
 80060e0:	d904      	bls.n	80060ec <_raise_r+0x14>
 80060e2:	2316      	movs	r3, #22
 80060e4:	6003      	str	r3, [r0, #0]
 80060e6:	f04f 30ff 	mov.w	r0, #4294967295
 80060ea:	bd38      	pop	{r3, r4, r5, pc}
 80060ec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80060ee:	b112      	cbz	r2, 80060f6 <_raise_r+0x1e>
 80060f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060f4:	b94b      	cbnz	r3, 800610a <_raise_r+0x32>
 80060f6:	4620      	mov	r0, r4
 80060f8:	f000 f830 	bl	800615c <_getpid_r>
 80060fc:	462a      	mov	r2, r5
 80060fe:	4601      	mov	r1, r0
 8006100:	4620      	mov	r0, r4
 8006102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006106:	f000 b817 	b.w	8006138 <_kill_r>
 800610a:	2b01      	cmp	r3, #1
 800610c:	d00a      	beq.n	8006124 <_raise_r+0x4c>
 800610e:	1c59      	adds	r1, r3, #1
 8006110:	d103      	bne.n	800611a <_raise_r+0x42>
 8006112:	2316      	movs	r3, #22
 8006114:	6003      	str	r3, [r0, #0]
 8006116:	2001      	movs	r0, #1
 8006118:	e7e7      	b.n	80060ea <_raise_r+0x12>
 800611a:	2400      	movs	r4, #0
 800611c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006120:	4628      	mov	r0, r5
 8006122:	4798      	blx	r3
 8006124:	2000      	movs	r0, #0
 8006126:	e7e0      	b.n	80060ea <_raise_r+0x12>

08006128 <raise>:
 8006128:	4b02      	ldr	r3, [pc, #8]	; (8006134 <raise+0xc>)
 800612a:	4601      	mov	r1, r0
 800612c:	6818      	ldr	r0, [r3, #0]
 800612e:	f7ff bfd3 	b.w	80060d8 <_raise_r>
 8006132:	bf00      	nop
 8006134:	20000070 	.word	0x20000070

08006138 <_kill_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	4d07      	ldr	r5, [pc, #28]	; (8006158 <_kill_r+0x20>)
 800613c:	2300      	movs	r3, #0
 800613e:	4604      	mov	r4, r0
 8006140:	4608      	mov	r0, r1
 8006142:	4611      	mov	r1, r2
 8006144:	602b      	str	r3, [r5, #0]
 8006146:	f7fb ffd3 	bl	80020f0 <_kill>
 800614a:	1c43      	adds	r3, r0, #1
 800614c:	d102      	bne.n	8006154 <_kill_r+0x1c>
 800614e:	682b      	ldr	r3, [r5, #0]
 8006150:	b103      	cbz	r3, 8006154 <_kill_r+0x1c>
 8006152:	6023      	str	r3, [r4, #0]
 8006154:	bd38      	pop	{r3, r4, r5, pc}
 8006156:	bf00      	nop
 8006158:	2000036c 	.word	0x2000036c

0800615c <_getpid_r>:
 800615c:	f7fb bfc0 	b.w	80020e0 <_getpid>

08006160 <__swhatbuf_r>:
 8006160:	b570      	push	{r4, r5, r6, lr}
 8006162:	460c      	mov	r4, r1
 8006164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006168:	2900      	cmp	r1, #0
 800616a:	b096      	sub	sp, #88	; 0x58
 800616c:	4615      	mov	r5, r2
 800616e:	461e      	mov	r6, r3
 8006170:	da0d      	bge.n	800618e <__swhatbuf_r+0x2e>
 8006172:	89a3      	ldrh	r3, [r4, #12]
 8006174:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006178:	f04f 0100 	mov.w	r1, #0
 800617c:	bf0c      	ite	eq
 800617e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006182:	2340      	movne	r3, #64	; 0x40
 8006184:	2000      	movs	r0, #0
 8006186:	6031      	str	r1, [r6, #0]
 8006188:	602b      	str	r3, [r5, #0]
 800618a:	b016      	add	sp, #88	; 0x58
 800618c:	bd70      	pop	{r4, r5, r6, pc}
 800618e:	466a      	mov	r2, sp
 8006190:	f000 f848 	bl	8006224 <_fstat_r>
 8006194:	2800      	cmp	r0, #0
 8006196:	dbec      	blt.n	8006172 <__swhatbuf_r+0x12>
 8006198:	9901      	ldr	r1, [sp, #4]
 800619a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800619e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80061a2:	4259      	negs	r1, r3
 80061a4:	4159      	adcs	r1, r3
 80061a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061aa:	e7eb      	b.n	8006184 <__swhatbuf_r+0x24>

080061ac <__smakebuf_r>:
 80061ac:	898b      	ldrh	r3, [r1, #12]
 80061ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061b0:	079d      	lsls	r5, r3, #30
 80061b2:	4606      	mov	r6, r0
 80061b4:	460c      	mov	r4, r1
 80061b6:	d507      	bpl.n	80061c8 <__smakebuf_r+0x1c>
 80061b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80061bc:	6023      	str	r3, [r4, #0]
 80061be:	6123      	str	r3, [r4, #16]
 80061c0:	2301      	movs	r3, #1
 80061c2:	6163      	str	r3, [r4, #20]
 80061c4:	b002      	add	sp, #8
 80061c6:	bd70      	pop	{r4, r5, r6, pc}
 80061c8:	ab01      	add	r3, sp, #4
 80061ca:	466a      	mov	r2, sp
 80061cc:	f7ff ffc8 	bl	8006160 <__swhatbuf_r>
 80061d0:	9900      	ldr	r1, [sp, #0]
 80061d2:	4605      	mov	r5, r0
 80061d4:	4630      	mov	r0, r6
 80061d6:	f7fe ffd9 	bl	800518c <_malloc_r>
 80061da:	b948      	cbnz	r0, 80061f0 <__smakebuf_r+0x44>
 80061dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061e0:	059a      	lsls	r2, r3, #22
 80061e2:	d4ef      	bmi.n	80061c4 <__smakebuf_r+0x18>
 80061e4:	f023 0303 	bic.w	r3, r3, #3
 80061e8:	f043 0302 	orr.w	r3, r3, #2
 80061ec:	81a3      	strh	r3, [r4, #12]
 80061ee:	e7e3      	b.n	80061b8 <__smakebuf_r+0xc>
 80061f0:	89a3      	ldrh	r3, [r4, #12]
 80061f2:	6020      	str	r0, [r4, #0]
 80061f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f8:	81a3      	strh	r3, [r4, #12]
 80061fa:	9b00      	ldr	r3, [sp, #0]
 80061fc:	6163      	str	r3, [r4, #20]
 80061fe:	9b01      	ldr	r3, [sp, #4]
 8006200:	6120      	str	r0, [r4, #16]
 8006202:	b15b      	cbz	r3, 800621c <__smakebuf_r+0x70>
 8006204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006208:	4630      	mov	r0, r6
 800620a:	f000 f81d 	bl	8006248 <_isatty_r>
 800620e:	b128      	cbz	r0, 800621c <__smakebuf_r+0x70>
 8006210:	89a3      	ldrh	r3, [r4, #12]
 8006212:	f023 0303 	bic.w	r3, r3, #3
 8006216:	f043 0301 	orr.w	r3, r3, #1
 800621a:	81a3      	strh	r3, [r4, #12]
 800621c:	89a3      	ldrh	r3, [r4, #12]
 800621e:	431d      	orrs	r5, r3
 8006220:	81a5      	strh	r5, [r4, #12]
 8006222:	e7cf      	b.n	80061c4 <__smakebuf_r+0x18>

08006224 <_fstat_r>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	4d07      	ldr	r5, [pc, #28]	; (8006244 <_fstat_r+0x20>)
 8006228:	2300      	movs	r3, #0
 800622a:	4604      	mov	r4, r0
 800622c:	4608      	mov	r0, r1
 800622e:	4611      	mov	r1, r2
 8006230:	602b      	str	r3, [r5, #0]
 8006232:	f7fb ffbc 	bl	80021ae <_fstat>
 8006236:	1c43      	adds	r3, r0, #1
 8006238:	d102      	bne.n	8006240 <_fstat_r+0x1c>
 800623a:	682b      	ldr	r3, [r5, #0]
 800623c:	b103      	cbz	r3, 8006240 <_fstat_r+0x1c>
 800623e:	6023      	str	r3, [r4, #0]
 8006240:	bd38      	pop	{r3, r4, r5, pc}
 8006242:	bf00      	nop
 8006244:	2000036c 	.word	0x2000036c

08006248 <_isatty_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4d06      	ldr	r5, [pc, #24]	; (8006264 <_isatty_r+0x1c>)
 800624c:	2300      	movs	r3, #0
 800624e:	4604      	mov	r4, r0
 8006250:	4608      	mov	r0, r1
 8006252:	602b      	str	r3, [r5, #0]
 8006254:	f7fb ffbb 	bl	80021ce <_isatty>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d102      	bne.n	8006262 <_isatty_r+0x1a>
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	b103      	cbz	r3, 8006262 <_isatty_r+0x1a>
 8006260:	6023      	str	r3, [r4, #0]
 8006262:	bd38      	pop	{r3, r4, r5, pc}
 8006264:	2000036c 	.word	0x2000036c

08006268 <pow>:
 8006268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626a:	ed2d 8b02 	vpush	{d8}
 800626e:	eeb0 8a40 	vmov.f32	s16, s0
 8006272:	eef0 8a60 	vmov.f32	s17, s1
 8006276:	ec55 4b11 	vmov	r4, r5, d1
 800627a:	f000 f871 	bl	8006360 <__ieee754_pow>
 800627e:	4622      	mov	r2, r4
 8006280:	462b      	mov	r3, r5
 8006282:	4620      	mov	r0, r4
 8006284:	4629      	mov	r1, r5
 8006286:	ec57 6b10 	vmov	r6, r7, d0
 800628a:	f7fa fc57 	bl	8000b3c <__aeabi_dcmpun>
 800628e:	2800      	cmp	r0, #0
 8006290:	d13b      	bne.n	800630a <pow+0xa2>
 8006292:	ec51 0b18 	vmov	r0, r1, d8
 8006296:	2200      	movs	r2, #0
 8006298:	2300      	movs	r3, #0
 800629a:	f7fa fc1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800629e:	b1b8      	cbz	r0, 80062d0 <pow+0x68>
 80062a0:	2200      	movs	r2, #0
 80062a2:	2300      	movs	r3, #0
 80062a4:	4620      	mov	r0, r4
 80062a6:	4629      	mov	r1, r5
 80062a8:	f7fa fc16 	bl	8000ad8 <__aeabi_dcmpeq>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	d146      	bne.n	800633e <pow+0xd6>
 80062b0:	ec45 4b10 	vmov	d0, r4, r5
 80062b4:	f000 f848 	bl	8006348 <finite>
 80062b8:	b338      	cbz	r0, 800630a <pow+0xa2>
 80062ba:	2200      	movs	r2, #0
 80062bc:	2300      	movs	r3, #0
 80062be:	4620      	mov	r0, r4
 80062c0:	4629      	mov	r1, r5
 80062c2:	f7fa fc13 	bl	8000aec <__aeabi_dcmplt>
 80062c6:	b300      	cbz	r0, 800630a <pow+0xa2>
 80062c8:	f7ff fa38 	bl	800573c <__errno>
 80062cc:	2322      	movs	r3, #34	; 0x22
 80062ce:	e01b      	b.n	8006308 <pow+0xa0>
 80062d0:	ec47 6b10 	vmov	d0, r6, r7
 80062d4:	f000 f838 	bl	8006348 <finite>
 80062d8:	b9e0      	cbnz	r0, 8006314 <pow+0xac>
 80062da:	eeb0 0a48 	vmov.f32	s0, s16
 80062de:	eef0 0a68 	vmov.f32	s1, s17
 80062e2:	f000 f831 	bl	8006348 <finite>
 80062e6:	b1a8      	cbz	r0, 8006314 <pow+0xac>
 80062e8:	ec45 4b10 	vmov	d0, r4, r5
 80062ec:	f000 f82c 	bl	8006348 <finite>
 80062f0:	b180      	cbz	r0, 8006314 <pow+0xac>
 80062f2:	4632      	mov	r2, r6
 80062f4:	463b      	mov	r3, r7
 80062f6:	4630      	mov	r0, r6
 80062f8:	4639      	mov	r1, r7
 80062fa:	f7fa fc1f 	bl	8000b3c <__aeabi_dcmpun>
 80062fe:	2800      	cmp	r0, #0
 8006300:	d0e2      	beq.n	80062c8 <pow+0x60>
 8006302:	f7ff fa1b 	bl	800573c <__errno>
 8006306:	2321      	movs	r3, #33	; 0x21
 8006308:	6003      	str	r3, [r0, #0]
 800630a:	ecbd 8b02 	vpop	{d8}
 800630e:	ec47 6b10 	vmov	d0, r6, r7
 8006312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006314:	2200      	movs	r2, #0
 8006316:	2300      	movs	r3, #0
 8006318:	4630      	mov	r0, r6
 800631a:	4639      	mov	r1, r7
 800631c:	f7fa fbdc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006320:	2800      	cmp	r0, #0
 8006322:	d0f2      	beq.n	800630a <pow+0xa2>
 8006324:	eeb0 0a48 	vmov.f32	s0, s16
 8006328:	eef0 0a68 	vmov.f32	s1, s17
 800632c:	f000 f80c 	bl	8006348 <finite>
 8006330:	2800      	cmp	r0, #0
 8006332:	d0ea      	beq.n	800630a <pow+0xa2>
 8006334:	ec45 4b10 	vmov	d0, r4, r5
 8006338:	f000 f806 	bl	8006348 <finite>
 800633c:	e7c3      	b.n	80062c6 <pow+0x5e>
 800633e:	4f01      	ldr	r7, [pc, #4]	; (8006344 <pow+0xdc>)
 8006340:	2600      	movs	r6, #0
 8006342:	e7e2      	b.n	800630a <pow+0xa2>
 8006344:	3ff00000 	.word	0x3ff00000

08006348 <finite>:
 8006348:	b082      	sub	sp, #8
 800634a:	ed8d 0b00 	vstr	d0, [sp]
 800634e:	9801      	ldr	r0, [sp, #4]
 8006350:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006354:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006358:	0fc0      	lsrs	r0, r0, #31
 800635a:	b002      	add	sp, #8
 800635c:	4770      	bx	lr
	...

08006360 <__ieee754_pow>:
 8006360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006364:	ed2d 8b06 	vpush	{d8-d10}
 8006368:	b089      	sub	sp, #36	; 0x24
 800636a:	ed8d 1b00 	vstr	d1, [sp]
 800636e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006372:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006376:	ea58 0102 	orrs.w	r1, r8, r2
 800637a:	ec57 6b10 	vmov	r6, r7, d0
 800637e:	d115      	bne.n	80063ac <__ieee754_pow+0x4c>
 8006380:	19b3      	adds	r3, r6, r6
 8006382:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8006386:	4152      	adcs	r2, r2
 8006388:	4299      	cmp	r1, r3
 800638a:	4b89      	ldr	r3, [pc, #548]	; (80065b0 <__ieee754_pow+0x250>)
 800638c:	4193      	sbcs	r3, r2
 800638e:	f080 84d1 	bcs.w	8006d34 <__ieee754_pow+0x9d4>
 8006392:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006396:	4630      	mov	r0, r6
 8006398:	4639      	mov	r1, r7
 800639a:	f7f9 ff7f 	bl	800029c <__adddf3>
 800639e:	ec41 0b10 	vmov	d0, r0, r1
 80063a2:	b009      	add	sp, #36	; 0x24
 80063a4:	ecbd 8b06 	vpop	{d8-d10}
 80063a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ac:	4b81      	ldr	r3, [pc, #516]	; (80065b4 <__ieee754_pow+0x254>)
 80063ae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80063b2:	429c      	cmp	r4, r3
 80063b4:	ee10 aa10 	vmov	sl, s0
 80063b8:	463d      	mov	r5, r7
 80063ba:	dc06      	bgt.n	80063ca <__ieee754_pow+0x6a>
 80063bc:	d101      	bne.n	80063c2 <__ieee754_pow+0x62>
 80063be:	2e00      	cmp	r6, #0
 80063c0:	d1e7      	bne.n	8006392 <__ieee754_pow+0x32>
 80063c2:	4598      	cmp	r8, r3
 80063c4:	dc01      	bgt.n	80063ca <__ieee754_pow+0x6a>
 80063c6:	d10f      	bne.n	80063e8 <__ieee754_pow+0x88>
 80063c8:	b172      	cbz	r2, 80063e8 <__ieee754_pow+0x88>
 80063ca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80063ce:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80063d2:	ea55 050a 	orrs.w	r5, r5, sl
 80063d6:	d1dc      	bne.n	8006392 <__ieee754_pow+0x32>
 80063d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80063dc:	18db      	adds	r3, r3, r3
 80063de:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80063e2:	4152      	adcs	r2, r2
 80063e4:	429d      	cmp	r5, r3
 80063e6:	e7d0      	b.n	800638a <__ieee754_pow+0x2a>
 80063e8:	2d00      	cmp	r5, #0
 80063ea:	da3b      	bge.n	8006464 <__ieee754_pow+0x104>
 80063ec:	4b72      	ldr	r3, [pc, #456]	; (80065b8 <__ieee754_pow+0x258>)
 80063ee:	4598      	cmp	r8, r3
 80063f0:	dc51      	bgt.n	8006496 <__ieee754_pow+0x136>
 80063f2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80063f6:	4598      	cmp	r8, r3
 80063f8:	f340 84ab 	ble.w	8006d52 <__ieee754_pow+0x9f2>
 80063fc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006400:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006404:	2b14      	cmp	r3, #20
 8006406:	dd0f      	ble.n	8006428 <__ieee754_pow+0xc8>
 8006408:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800640c:	fa22 f103 	lsr.w	r1, r2, r3
 8006410:	fa01 f303 	lsl.w	r3, r1, r3
 8006414:	4293      	cmp	r3, r2
 8006416:	f040 849c 	bne.w	8006d52 <__ieee754_pow+0x9f2>
 800641a:	f001 0101 	and.w	r1, r1, #1
 800641e:	f1c1 0302 	rsb	r3, r1, #2
 8006422:	9304      	str	r3, [sp, #16]
 8006424:	b182      	cbz	r2, 8006448 <__ieee754_pow+0xe8>
 8006426:	e05f      	b.n	80064e8 <__ieee754_pow+0x188>
 8006428:	2a00      	cmp	r2, #0
 800642a:	d15b      	bne.n	80064e4 <__ieee754_pow+0x184>
 800642c:	f1c3 0314 	rsb	r3, r3, #20
 8006430:	fa48 f103 	asr.w	r1, r8, r3
 8006434:	fa01 f303 	lsl.w	r3, r1, r3
 8006438:	4543      	cmp	r3, r8
 800643a:	f040 8487 	bne.w	8006d4c <__ieee754_pow+0x9ec>
 800643e:	f001 0101 	and.w	r1, r1, #1
 8006442:	f1c1 0302 	rsb	r3, r1, #2
 8006446:	9304      	str	r3, [sp, #16]
 8006448:	4b5c      	ldr	r3, [pc, #368]	; (80065bc <__ieee754_pow+0x25c>)
 800644a:	4598      	cmp	r8, r3
 800644c:	d132      	bne.n	80064b4 <__ieee754_pow+0x154>
 800644e:	f1b9 0f00 	cmp.w	r9, #0
 8006452:	f280 8477 	bge.w	8006d44 <__ieee754_pow+0x9e4>
 8006456:	4959      	ldr	r1, [pc, #356]	; (80065bc <__ieee754_pow+0x25c>)
 8006458:	4632      	mov	r2, r6
 800645a:	463b      	mov	r3, r7
 800645c:	2000      	movs	r0, #0
 800645e:	f7fa f9fd 	bl	800085c <__aeabi_ddiv>
 8006462:	e79c      	b.n	800639e <__ieee754_pow+0x3e>
 8006464:	2300      	movs	r3, #0
 8006466:	9304      	str	r3, [sp, #16]
 8006468:	2a00      	cmp	r2, #0
 800646a:	d13d      	bne.n	80064e8 <__ieee754_pow+0x188>
 800646c:	4b51      	ldr	r3, [pc, #324]	; (80065b4 <__ieee754_pow+0x254>)
 800646e:	4598      	cmp	r8, r3
 8006470:	d1ea      	bne.n	8006448 <__ieee754_pow+0xe8>
 8006472:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006476:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800647a:	ea53 030a 	orrs.w	r3, r3, sl
 800647e:	f000 8459 	beq.w	8006d34 <__ieee754_pow+0x9d4>
 8006482:	4b4f      	ldr	r3, [pc, #316]	; (80065c0 <__ieee754_pow+0x260>)
 8006484:	429c      	cmp	r4, r3
 8006486:	dd08      	ble.n	800649a <__ieee754_pow+0x13a>
 8006488:	f1b9 0f00 	cmp.w	r9, #0
 800648c:	f2c0 8456 	blt.w	8006d3c <__ieee754_pow+0x9dc>
 8006490:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006494:	e783      	b.n	800639e <__ieee754_pow+0x3e>
 8006496:	2302      	movs	r3, #2
 8006498:	e7e5      	b.n	8006466 <__ieee754_pow+0x106>
 800649a:	f1b9 0f00 	cmp.w	r9, #0
 800649e:	f04f 0000 	mov.w	r0, #0
 80064a2:	f04f 0100 	mov.w	r1, #0
 80064a6:	f6bf af7a 	bge.w	800639e <__ieee754_pow+0x3e>
 80064aa:	e9dd 0300 	ldrd	r0, r3, [sp]
 80064ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80064b2:	e774      	b.n	800639e <__ieee754_pow+0x3e>
 80064b4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80064b8:	d106      	bne.n	80064c8 <__ieee754_pow+0x168>
 80064ba:	4632      	mov	r2, r6
 80064bc:	463b      	mov	r3, r7
 80064be:	4630      	mov	r0, r6
 80064c0:	4639      	mov	r1, r7
 80064c2:	f7fa f8a1 	bl	8000608 <__aeabi_dmul>
 80064c6:	e76a      	b.n	800639e <__ieee754_pow+0x3e>
 80064c8:	4b3e      	ldr	r3, [pc, #248]	; (80065c4 <__ieee754_pow+0x264>)
 80064ca:	4599      	cmp	r9, r3
 80064cc:	d10c      	bne.n	80064e8 <__ieee754_pow+0x188>
 80064ce:	2d00      	cmp	r5, #0
 80064d0:	db0a      	blt.n	80064e8 <__ieee754_pow+0x188>
 80064d2:	ec47 6b10 	vmov	d0, r6, r7
 80064d6:	b009      	add	sp, #36	; 0x24
 80064d8:	ecbd 8b06 	vpop	{d8-d10}
 80064dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e0:	f000 bd20 	b.w	8006f24 <__ieee754_sqrt>
 80064e4:	2300      	movs	r3, #0
 80064e6:	9304      	str	r3, [sp, #16]
 80064e8:	ec47 6b10 	vmov	d0, r6, r7
 80064ec:	f000 fc62 	bl	8006db4 <fabs>
 80064f0:	ec51 0b10 	vmov	r0, r1, d0
 80064f4:	f1ba 0f00 	cmp.w	sl, #0
 80064f8:	d129      	bne.n	800654e <__ieee754_pow+0x1ee>
 80064fa:	b124      	cbz	r4, 8006506 <__ieee754_pow+0x1a6>
 80064fc:	4b2f      	ldr	r3, [pc, #188]	; (80065bc <__ieee754_pow+0x25c>)
 80064fe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006502:	429a      	cmp	r2, r3
 8006504:	d123      	bne.n	800654e <__ieee754_pow+0x1ee>
 8006506:	f1b9 0f00 	cmp.w	r9, #0
 800650a:	da05      	bge.n	8006518 <__ieee754_pow+0x1b8>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	2000      	movs	r0, #0
 8006512:	492a      	ldr	r1, [pc, #168]	; (80065bc <__ieee754_pow+0x25c>)
 8006514:	f7fa f9a2 	bl	800085c <__aeabi_ddiv>
 8006518:	2d00      	cmp	r5, #0
 800651a:	f6bf af40 	bge.w	800639e <__ieee754_pow+0x3e>
 800651e:	9b04      	ldr	r3, [sp, #16]
 8006520:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006524:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006528:	431c      	orrs	r4, r3
 800652a:	d108      	bne.n	800653e <__ieee754_pow+0x1de>
 800652c:	4602      	mov	r2, r0
 800652e:	460b      	mov	r3, r1
 8006530:	4610      	mov	r0, r2
 8006532:	4619      	mov	r1, r3
 8006534:	f7f9 feb0 	bl	8000298 <__aeabi_dsub>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	e78f      	b.n	800645e <__ieee754_pow+0xfe>
 800653e:	9b04      	ldr	r3, [sp, #16]
 8006540:	2b01      	cmp	r3, #1
 8006542:	f47f af2c 	bne.w	800639e <__ieee754_pow+0x3e>
 8006546:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800654a:	4619      	mov	r1, r3
 800654c:	e727      	b.n	800639e <__ieee754_pow+0x3e>
 800654e:	0feb      	lsrs	r3, r5, #31
 8006550:	3b01      	subs	r3, #1
 8006552:	9306      	str	r3, [sp, #24]
 8006554:	9a06      	ldr	r2, [sp, #24]
 8006556:	9b04      	ldr	r3, [sp, #16]
 8006558:	4313      	orrs	r3, r2
 800655a:	d102      	bne.n	8006562 <__ieee754_pow+0x202>
 800655c:	4632      	mov	r2, r6
 800655e:	463b      	mov	r3, r7
 8006560:	e7e6      	b.n	8006530 <__ieee754_pow+0x1d0>
 8006562:	4b19      	ldr	r3, [pc, #100]	; (80065c8 <__ieee754_pow+0x268>)
 8006564:	4598      	cmp	r8, r3
 8006566:	f340 80fb 	ble.w	8006760 <__ieee754_pow+0x400>
 800656a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800656e:	4598      	cmp	r8, r3
 8006570:	4b13      	ldr	r3, [pc, #76]	; (80065c0 <__ieee754_pow+0x260>)
 8006572:	dd0c      	ble.n	800658e <__ieee754_pow+0x22e>
 8006574:	429c      	cmp	r4, r3
 8006576:	dc0f      	bgt.n	8006598 <__ieee754_pow+0x238>
 8006578:	f1b9 0f00 	cmp.w	r9, #0
 800657c:	da0f      	bge.n	800659e <__ieee754_pow+0x23e>
 800657e:	2000      	movs	r0, #0
 8006580:	b009      	add	sp, #36	; 0x24
 8006582:	ecbd 8b06 	vpop	{d8-d10}
 8006586:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800658a:	f000 bcc2 	b.w	8006f12 <__math_oflow>
 800658e:	429c      	cmp	r4, r3
 8006590:	dbf2      	blt.n	8006578 <__ieee754_pow+0x218>
 8006592:	4b0a      	ldr	r3, [pc, #40]	; (80065bc <__ieee754_pow+0x25c>)
 8006594:	429c      	cmp	r4, r3
 8006596:	dd19      	ble.n	80065cc <__ieee754_pow+0x26c>
 8006598:	f1b9 0f00 	cmp.w	r9, #0
 800659c:	dcef      	bgt.n	800657e <__ieee754_pow+0x21e>
 800659e:	2000      	movs	r0, #0
 80065a0:	b009      	add	sp, #36	; 0x24
 80065a2:	ecbd 8b06 	vpop	{d8-d10}
 80065a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065aa:	f000 bca9 	b.w	8006f00 <__math_uflow>
 80065ae:	bf00      	nop
 80065b0:	fff00000 	.word	0xfff00000
 80065b4:	7ff00000 	.word	0x7ff00000
 80065b8:	433fffff 	.word	0x433fffff
 80065bc:	3ff00000 	.word	0x3ff00000
 80065c0:	3fefffff 	.word	0x3fefffff
 80065c4:	3fe00000 	.word	0x3fe00000
 80065c8:	41e00000 	.word	0x41e00000
 80065cc:	4b60      	ldr	r3, [pc, #384]	; (8006750 <__ieee754_pow+0x3f0>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	f7f9 fe62 	bl	8000298 <__aeabi_dsub>
 80065d4:	a354      	add	r3, pc, #336	; (adr r3, 8006728 <__ieee754_pow+0x3c8>)
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	4604      	mov	r4, r0
 80065dc:	460d      	mov	r5, r1
 80065de:	f7fa f813 	bl	8000608 <__aeabi_dmul>
 80065e2:	a353      	add	r3, pc, #332	; (adr r3, 8006730 <__ieee754_pow+0x3d0>)
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	4606      	mov	r6, r0
 80065ea:	460f      	mov	r7, r1
 80065ec:	4620      	mov	r0, r4
 80065ee:	4629      	mov	r1, r5
 80065f0:	f7fa f80a 	bl	8000608 <__aeabi_dmul>
 80065f4:	4b57      	ldr	r3, [pc, #348]	; (8006754 <__ieee754_pow+0x3f4>)
 80065f6:	4682      	mov	sl, r0
 80065f8:	468b      	mov	fp, r1
 80065fa:	2200      	movs	r2, #0
 80065fc:	4620      	mov	r0, r4
 80065fe:	4629      	mov	r1, r5
 8006600:	f7fa f802 	bl	8000608 <__aeabi_dmul>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	a14b      	add	r1, pc, #300	; (adr r1, 8006738 <__ieee754_pow+0x3d8>)
 800660a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800660e:	f7f9 fe43 	bl	8000298 <__aeabi_dsub>
 8006612:	4622      	mov	r2, r4
 8006614:	462b      	mov	r3, r5
 8006616:	f7f9 fff7 	bl	8000608 <__aeabi_dmul>
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	2000      	movs	r0, #0
 8006620:	494d      	ldr	r1, [pc, #308]	; (8006758 <__ieee754_pow+0x3f8>)
 8006622:	f7f9 fe39 	bl	8000298 <__aeabi_dsub>
 8006626:	4622      	mov	r2, r4
 8006628:	4680      	mov	r8, r0
 800662a:	4689      	mov	r9, r1
 800662c:	462b      	mov	r3, r5
 800662e:	4620      	mov	r0, r4
 8006630:	4629      	mov	r1, r5
 8006632:	f7f9 ffe9 	bl	8000608 <__aeabi_dmul>
 8006636:	4602      	mov	r2, r0
 8006638:	460b      	mov	r3, r1
 800663a:	4640      	mov	r0, r8
 800663c:	4649      	mov	r1, r9
 800663e:	f7f9 ffe3 	bl	8000608 <__aeabi_dmul>
 8006642:	a33f      	add	r3, pc, #252	; (adr r3, 8006740 <__ieee754_pow+0x3e0>)
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	f7f9 ffde 	bl	8000608 <__aeabi_dmul>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4650      	mov	r0, sl
 8006652:	4659      	mov	r1, fp
 8006654:	f7f9 fe20 	bl	8000298 <__aeabi_dsub>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4680      	mov	r8, r0
 800665e:	4689      	mov	r9, r1
 8006660:	4630      	mov	r0, r6
 8006662:	4639      	mov	r1, r7
 8006664:	f7f9 fe1a 	bl	800029c <__adddf3>
 8006668:	2000      	movs	r0, #0
 800666a:	4632      	mov	r2, r6
 800666c:	463b      	mov	r3, r7
 800666e:	4604      	mov	r4, r0
 8006670:	460d      	mov	r5, r1
 8006672:	f7f9 fe11 	bl	8000298 <__aeabi_dsub>
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
 800667a:	4640      	mov	r0, r8
 800667c:	4649      	mov	r1, r9
 800667e:	f7f9 fe0b 	bl	8000298 <__aeabi_dsub>
 8006682:	9b04      	ldr	r3, [sp, #16]
 8006684:	9a06      	ldr	r2, [sp, #24]
 8006686:	3b01      	subs	r3, #1
 8006688:	4313      	orrs	r3, r2
 800668a:	4682      	mov	sl, r0
 800668c:	468b      	mov	fp, r1
 800668e:	f040 81e7 	bne.w	8006a60 <__ieee754_pow+0x700>
 8006692:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006748 <__ieee754_pow+0x3e8>
 8006696:	eeb0 8a47 	vmov.f32	s16, s14
 800669a:	eef0 8a67 	vmov.f32	s17, s15
 800669e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80066a2:	2600      	movs	r6, #0
 80066a4:	4632      	mov	r2, r6
 80066a6:	463b      	mov	r3, r7
 80066a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066ac:	f7f9 fdf4 	bl	8000298 <__aeabi_dsub>
 80066b0:	4622      	mov	r2, r4
 80066b2:	462b      	mov	r3, r5
 80066b4:	f7f9 ffa8 	bl	8000608 <__aeabi_dmul>
 80066b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066bc:	4680      	mov	r8, r0
 80066be:	4689      	mov	r9, r1
 80066c0:	4650      	mov	r0, sl
 80066c2:	4659      	mov	r1, fp
 80066c4:	f7f9 ffa0 	bl	8000608 <__aeabi_dmul>
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	4640      	mov	r0, r8
 80066ce:	4649      	mov	r1, r9
 80066d0:	f7f9 fde4 	bl	800029c <__adddf3>
 80066d4:	4632      	mov	r2, r6
 80066d6:	463b      	mov	r3, r7
 80066d8:	4680      	mov	r8, r0
 80066da:	4689      	mov	r9, r1
 80066dc:	4620      	mov	r0, r4
 80066de:	4629      	mov	r1, r5
 80066e0:	f7f9 ff92 	bl	8000608 <__aeabi_dmul>
 80066e4:	460b      	mov	r3, r1
 80066e6:	4604      	mov	r4, r0
 80066e8:	460d      	mov	r5, r1
 80066ea:	4602      	mov	r2, r0
 80066ec:	4649      	mov	r1, r9
 80066ee:	4640      	mov	r0, r8
 80066f0:	f7f9 fdd4 	bl	800029c <__adddf3>
 80066f4:	4b19      	ldr	r3, [pc, #100]	; (800675c <__ieee754_pow+0x3fc>)
 80066f6:	4299      	cmp	r1, r3
 80066f8:	ec45 4b19 	vmov	d9, r4, r5
 80066fc:	4606      	mov	r6, r0
 80066fe:	460f      	mov	r7, r1
 8006700:	468b      	mov	fp, r1
 8006702:	f340 82f0 	ble.w	8006ce6 <__ieee754_pow+0x986>
 8006706:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800670a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800670e:	4303      	orrs	r3, r0
 8006710:	f000 81e4 	beq.w	8006adc <__ieee754_pow+0x77c>
 8006714:	ec51 0b18 	vmov	r0, r1, d8
 8006718:	2200      	movs	r2, #0
 800671a:	2300      	movs	r3, #0
 800671c:	f7fa f9e6 	bl	8000aec <__aeabi_dcmplt>
 8006720:	3800      	subs	r0, #0
 8006722:	bf18      	it	ne
 8006724:	2001      	movne	r0, #1
 8006726:	e72b      	b.n	8006580 <__ieee754_pow+0x220>
 8006728:	60000000 	.word	0x60000000
 800672c:	3ff71547 	.word	0x3ff71547
 8006730:	f85ddf44 	.word	0xf85ddf44
 8006734:	3e54ae0b 	.word	0x3e54ae0b
 8006738:	55555555 	.word	0x55555555
 800673c:	3fd55555 	.word	0x3fd55555
 8006740:	652b82fe 	.word	0x652b82fe
 8006744:	3ff71547 	.word	0x3ff71547
 8006748:	00000000 	.word	0x00000000
 800674c:	bff00000 	.word	0xbff00000
 8006750:	3ff00000 	.word	0x3ff00000
 8006754:	3fd00000 	.word	0x3fd00000
 8006758:	3fe00000 	.word	0x3fe00000
 800675c:	408fffff 	.word	0x408fffff
 8006760:	4bd5      	ldr	r3, [pc, #852]	; (8006ab8 <__ieee754_pow+0x758>)
 8006762:	402b      	ands	r3, r5
 8006764:	2200      	movs	r2, #0
 8006766:	b92b      	cbnz	r3, 8006774 <__ieee754_pow+0x414>
 8006768:	4bd4      	ldr	r3, [pc, #848]	; (8006abc <__ieee754_pow+0x75c>)
 800676a:	f7f9 ff4d 	bl	8000608 <__aeabi_dmul>
 800676e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006772:	460c      	mov	r4, r1
 8006774:	1523      	asrs	r3, r4, #20
 8006776:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800677a:	4413      	add	r3, r2
 800677c:	9305      	str	r3, [sp, #20]
 800677e:	4bd0      	ldr	r3, [pc, #832]	; (8006ac0 <__ieee754_pow+0x760>)
 8006780:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006784:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006788:	429c      	cmp	r4, r3
 800678a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800678e:	dd08      	ble.n	80067a2 <__ieee754_pow+0x442>
 8006790:	4bcc      	ldr	r3, [pc, #816]	; (8006ac4 <__ieee754_pow+0x764>)
 8006792:	429c      	cmp	r4, r3
 8006794:	f340 8162 	ble.w	8006a5c <__ieee754_pow+0x6fc>
 8006798:	9b05      	ldr	r3, [sp, #20]
 800679a:	3301      	adds	r3, #1
 800679c:	9305      	str	r3, [sp, #20]
 800679e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80067a2:	2400      	movs	r4, #0
 80067a4:	00e3      	lsls	r3, r4, #3
 80067a6:	9307      	str	r3, [sp, #28]
 80067a8:	4bc7      	ldr	r3, [pc, #796]	; (8006ac8 <__ieee754_pow+0x768>)
 80067aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80067ae:	ed93 7b00 	vldr	d7, [r3]
 80067b2:	4629      	mov	r1, r5
 80067b4:	ec53 2b17 	vmov	r2, r3, d7
 80067b8:	eeb0 9a47 	vmov.f32	s18, s14
 80067bc:	eef0 9a67 	vmov.f32	s19, s15
 80067c0:	4682      	mov	sl, r0
 80067c2:	f7f9 fd69 	bl	8000298 <__aeabi_dsub>
 80067c6:	4652      	mov	r2, sl
 80067c8:	4606      	mov	r6, r0
 80067ca:	460f      	mov	r7, r1
 80067cc:	462b      	mov	r3, r5
 80067ce:	ec51 0b19 	vmov	r0, r1, d9
 80067d2:	f7f9 fd63 	bl	800029c <__adddf3>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	2000      	movs	r0, #0
 80067dc:	49bb      	ldr	r1, [pc, #748]	; (8006acc <__ieee754_pow+0x76c>)
 80067de:	f7fa f83d 	bl	800085c <__aeabi_ddiv>
 80067e2:	ec41 0b1a 	vmov	d10, r0, r1
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	4630      	mov	r0, r6
 80067ec:	4639      	mov	r1, r7
 80067ee:	f7f9 ff0b 	bl	8000608 <__aeabi_dmul>
 80067f2:	2300      	movs	r3, #0
 80067f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067f8:	9302      	str	r3, [sp, #8]
 80067fa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80067fe:	46ab      	mov	fp, r5
 8006800:	106d      	asrs	r5, r5, #1
 8006802:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006806:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800680a:	ec41 0b18 	vmov	d8, r0, r1
 800680e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006812:	2200      	movs	r2, #0
 8006814:	4640      	mov	r0, r8
 8006816:	4649      	mov	r1, r9
 8006818:	4614      	mov	r4, r2
 800681a:	461d      	mov	r5, r3
 800681c:	f7f9 fef4 	bl	8000608 <__aeabi_dmul>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	4630      	mov	r0, r6
 8006826:	4639      	mov	r1, r7
 8006828:	f7f9 fd36 	bl	8000298 <__aeabi_dsub>
 800682c:	ec53 2b19 	vmov	r2, r3, d9
 8006830:	4606      	mov	r6, r0
 8006832:	460f      	mov	r7, r1
 8006834:	4620      	mov	r0, r4
 8006836:	4629      	mov	r1, r5
 8006838:	f7f9 fd2e 	bl	8000298 <__aeabi_dsub>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	4650      	mov	r0, sl
 8006842:	4659      	mov	r1, fp
 8006844:	f7f9 fd28 	bl	8000298 <__aeabi_dsub>
 8006848:	4642      	mov	r2, r8
 800684a:	464b      	mov	r3, r9
 800684c:	f7f9 fedc 	bl	8000608 <__aeabi_dmul>
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	4630      	mov	r0, r6
 8006856:	4639      	mov	r1, r7
 8006858:	f7f9 fd1e 	bl	8000298 <__aeabi_dsub>
 800685c:	ec53 2b1a 	vmov	r2, r3, d10
 8006860:	f7f9 fed2 	bl	8000608 <__aeabi_dmul>
 8006864:	ec53 2b18 	vmov	r2, r3, d8
 8006868:	ec41 0b19 	vmov	d9, r0, r1
 800686c:	ec51 0b18 	vmov	r0, r1, d8
 8006870:	f7f9 feca 	bl	8000608 <__aeabi_dmul>
 8006874:	a37c      	add	r3, pc, #496	; (adr r3, 8006a68 <__ieee754_pow+0x708>)
 8006876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687a:	4604      	mov	r4, r0
 800687c:	460d      	mov	r5, r1
 800687e:	f7f9 fec3 	bl	8000608 <__aeabi_dmul>
 8006882:	a37b      	add	r3, pc, #492	; (adr r3, 8006a70 <__ieee754_pow+0x710>)
 8006884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006888:	f7f9 fd08 	bl	800029c <__adddf3>
 800688c:	4622      	mov	r2, r4
 800688e:	462b      	mov	r3, r5
 8006890:	f7f9 feba 	bl	8000608 <__aeabi_dmul>
 8006894:	a378      	add	r3, pc, #480	; (adr r3, 8006a78 <__ieee754_pow+0x718>)
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	f7f9 fcff 	bl	800029c <__adddf3>
 800689e:	4622      	mov	r2, r4
 80068a0:	462b      	mov	r3, r5
 80068a2:	f7f9 feb1 	bl	8000608 <__aeabi_dmul>
 80068a6:	a376      	add	r3, pc, #472	; (adr r3, 8006a80 <__ieee754_pow+0x720>)
 80068a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ac:	f7f9 fcf6 	bl	800029c <__adddf3>
 80068b0:	4622      	mov	r2, r4
 80068b2:	462b      	mov	r3, r5
 80068b4:	f7f9 fea8 	bl	8000608 <__aeabi_dmul>
 80068b8:	a373      	add	r3, pc, #460	; (adr r3, 8006a88 <__ieee754_pow+0x728>)
 80068ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068be:	f7f9 fced 	bl	800029c <__adddf3>
 80068c2:	4622      	mov	r2, r4
 80068c4:	462b      	mov	r3, r5
 80068c6:	f7f9 fe9f 	bl	8000608 <__aeabi_dmul>
 80068ca:	a371      	add	r3, pc, #452	; (adr r3, 8006a90 <__ieee754_pow+0x730>)
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	f7f9 fce4 	bl	800029c <__adddf3>
 80068d4:	4622      	mov	r2, r4
 80068d6:	4606      	mov	r6, r0
 80068d8:	460f      	mov	r7, r1
 80068da:	462b      	mov	r3, r5
 80068dc:	4620      	mov	r0, r4
 80068de:	4629      	mov	r1, r5
 80068e0:	f7f9 fe92 	bl	8000608 <__aeabi_dmul>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	4630      	mov	r0, r6
 80068ea:	4639      	mov	r1, r7
 80068ec:	f7f9 fe8c 	bl	8000608 <__aeabi_dmul>
 80068f0:	4642      	mov	r2, r8
 80068f2:	4604      	mov	r4, r0
 80068f4:	460d      	mov	r5, r1
 80068f6:	464b      	mov	r3, r9
 80068f8:	ec51 0b18 	vmov	r0, r1, d8
 80068fc:	f7f9 fcce 	bl	800029c <__adddf3>
 8006900:	ec53 2b19 	vmov	r2, r3, d9
 8006904:	f7f9 fe80 	bl	8000608 <__aeabi_dmul>
 8006908:	4622      	mov	r2, r4
 800690a:	462b      	mov	r3, r5
 800690c:	f7f9 fcc6 	bl	800029c <__adddf3>
 8006910:	4642      	mov	r2, r8
 8006912:	4682      	mov	sl, r0
 8006914:	468b      	mov	fp, r1
 8006916:	464b      	mov	r3, r9
 8006918:	4640      	mov	r0, r8
 800691a:	4649      	mov	r1, r9
 800691c:	f7f9 fe74 	bl	8000608 <__aeabi_dmul>
 8006920:	4b6b      	ldr	r3, [pc, #428]	; (8006ad0 <__ieee754_pow+0x770>)
 8006922:	2200      	movs	r2, #0
 8006924:	4606      	mov	r6, r0
 8006926:	460f      	mov	r7, r1
 8006928:	f7f9 fcb8 	bl	800029c <__adddf3>
 800692c:	4652      	mov	r2, sl
 800692e:	465b      	mov	r3, fp
 8006930:	f7f9 fcb4 	bl	800029c <__adddf3>
 8006934:	2000      	movs	r0, #0
 8006936:	4604      	mov	r4, r0
 8006938:	460d      	mov	r5, r1
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	4640      	mov	r0, r8
 8006940:	4649      	mov	r1, r9
 8006942:	f7f9 fe61 	bl	8000608 <__aeabi_dmul>
 8006946:	4b62      	ldr	r3, [pc, #392]	; (8006ad0 <__ieee754_pow+0x770>)
 8006948:	4680      	mov	r8, r0
 800694a:	4689      	mov	r9, r1
 800694c:	2200      	movs	r2, #0
 800694e:	4620      	mov	r0, r4
 8006950:	4629      	mov	r1, r5
 8006952:	f7f9 fca1 	bl	8000298 <__aeabi_dsub>
 8006956:	4632      	mov	r2, r6
 8006958:	463b      	mov	r3, r7
 800695a:	f7f9 fc9d 	bl	8000298 <__aeabi_dsub>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	4650      	mov	r0, sl
 8006964:	4659      	mov	r1, fp
 8006966:	f7f9 fc97 	bl	8000298 <__aeabi_dsub>
 800696a:	ec53 2b18 	vmov	r2, r3, d8
 800696e:	f7f9 fe4b 	bl	8000608 <__aeabi_dmul>
 8006972:	4622      	mov	r2, r4
 8006974:	4606      	mov	r6, r0
 8006976:	460f      	mov	r7, r1
 8006978:	462b      	mov	r3, r5
 800697a:	ec51 0b19 	vmov	r0, r1, d9
 800697e:	f7f9 fe43 	bl	8000608 <__aeabi_dmul>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	4630      	mov	r0, r6
 8006988:	4639      	mov	r1, r7
 800698a:	f7f9 fc87 	bl	800029c <__adddf3>
 800698e:	4606      	mov	r6, r0
 8006990:	460f      	mov	r7, r1
 8006992:	4602      	mov	r2, r0
 8006994:	460b      	mov	r3, r1
 8006996:	4640      	mov	r0, r8
 8006998:	4649      	mov	r1, r9
 800699a:	f7f9 fc7f 	bl	800029c <__adddf3>
 800699e:	a33e      	add	r3, pc, #248	; (adr r3, 8006a98 <__ieee754_pow+0x738>)
 80069a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a4:	2000      	movs	r0, #0
 80069a6:	4604      	mov	r4, r0
 80069a8:	460d      	mov	r5, r1
 80069aa:	f7f9 fe2d 	bl	8000608 <__aeabi_dmul>
 80069ae:	4642      	mov	r2, r8
 80069b0:	ec41 0b18 	vmov	d8, r0, r1
 80069b4:	464b      	mov	r3, r9
 80069b6:	4620      	mov	r0, r4
 80069b8:	4629      	mov	r1, r5
 80069ba:	f7f9 fc6d 	bl	8000298 <__aeabi_dsub>
 80069be:	4602      	mov	r2, r0
 80069c0:	460b      	mov	r3, r1
 80069c2:	4630      	mov	r0, r6
 80069c4:	4639      	mov	r1, r7
 80069c6:	f7f9 fc67 	bl	8000298 <__aeabi_dsub>
 80069ca:	a335      	add	r3, pc, #212	; (adr r3, 8006aa0 <__ieee754_pow+0x740>)
 80069cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d0:	f7f9 fe1a 	bl	8000608 <__aeabi_dmul>
 80069d4:	a334      	add	r3, pc, #208	; (adr r3, 8006aa8 <__ieee754_pow+0x748>)
 80069d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069da:	4606      	mov	r6, r0
 80069dc:	460f      	mov	r7, r1
 80069de:	4620      	mov	r0, r4
 80069e0:	4629      	mov	r1, r5
 80069e2:	f7f9 fe11 	bl	8000608 <__aeabi_dmul>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	4630      	mov	r0, r6
 80069ec:	4639      	mov	r1, r7
 80069ee:	f7f9 fc55 	bl	800029c <__adddf3>
 80069f2:	9a07      	ldr	r2, [sp, #28]
 80069f4:	4b37      	ldr	r3, [pc, #220]	; (8006ad4 <__ieee754_pow+0x774>)
 80069f6:	4413      	add	r3, r2
 80069f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fc:	f7f9 fc4e 	bl	800029c <__adddf3>
 8006a00:	4682      	mov	sl, r0
 8006a02:	9805      	ldr	r0, [sp, #20]
 8006a04:	468b      	mov	fp, r1
 8006a06:	f7f9 fd95 	bl	8000534 <__aeabi_i2d>
 8006a0a:	9a07      	ldr	r2, [sp, #28]
 8006a0c:	4b32      	ldr	r3, [pc, #200]	; (8006ad8 <__ieee754_pow+0x778>)
 8006a0e:	4413      	add	r3, r2
 8006a10:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a14:	4606      	mov	r6, r0
 8006a16:	460f      	mov	r7, r1
 8006a18:	4652      	mov	r2, sl
 8006a1a:	465b      	mov	r3, fp
 8006a1c:	ec51 0b18 	vmov	r0, r1, d8
 8006a20:	f7f9 fc3c 	bl	800029c <__adddf3>
 8006a24:	4642      	mov	r2, r8
 8006a26:	464b      	mov	r3, r9
 8006a28:	f7f9 fc38 	bl	800029c <__adddf3>
 8006a2c:	4632      	mov	r2, r6
 8006a2e:	463b      	mov	r3, r7
 8006a30:	f7f9 fc34 	bl	800029c <__adddf3>
 8006a34:	2000      	movs	r0, #0
 8006a36:	4632      	mov	r2, r6
 8006a38:	463b      	mov	r3, r7
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	460d      	mov	r5, r1
 8006a3e:	f7f9 fc2b 	bl	8000298 <__aeabi_dsub>
 8006a42:	4642      	mov	r2, r8
 8006a44:	464b      	mov	r3, r9
 8006a46:	f7f9 fc27 	bl	8000298 <__aeabi_dsub>
 8006a4a:	ec53 2b18 	vmov	r2, r3, d8
 8006a4e:	f7f9 fc23 	bl	8000298 <__aeabi_dsub>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4650      	mov	r0, sl
 8006a58:	4659      	mov	r1, fp
 8006a5a:	e610      	b.n	800667e <__ieee754_pow+0x31e>
 8006a5c:	2401      	movs	r4, #1
 8006a5e:	e6a1      	b.n	80067a4 <__ieee754_pow+0x444>
 8006a60:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006ab0 <__ieee754_pow+0x750>
 8006a64:	e617      	b.n	8006696 <__ieee754_pow+0x336>
 8006a66:	bf00      	nop
 8006a68:	4a454eef 	.word	0x4a454eef
 8006a6c:	3fca7e28 	.word	0x3fca7e28
 8006a70:	93c9db65 	.word	0x93c9db65
 8006a74:	3fcd864a 	.word	0x3fcd864a
 8006a78:	a91d4101 	.word	0xa91d4101
 8006a7c:	3fd17460 	.word	0x3fd17460
 8006a80:	518f264d 	.word	0x518f264d
 8006a84:	3fd55555 	.word	0x3fd55555
 8006a88:	db6fabff 	.word	0xdb6fabff
 8006a8c:	3fdb6db6 	.word	0x3fdb6db6
 8006a90:	33333303 	.word	0x33333303
 8006a94:	3fe33333 	.word	0x3fe33333
 8006a98:	e0000000 	.word	0xe0000000
 8006a9c:	3feec709 	.word	0x3feec709
 8006aa0:	dc3a03fd 	.word	0xdc3a03fd
 8006aa4:	3feec709 	.word	0x3feec709
 8006aa8:	145b01f5 	.word	0x145b01f5
 8006aac:	be3e2fe0 	.word	0xbe3e2fe0
 8006ab0:	00000000 	.word	0x00000000
 8006ab4:	3ff00000 	.word	0x3ff00000
 8006ab8:	7ff00000 	.word	0x7ff00000
 8006abc:	43400000 	.word	0x43400000
 8006ac0:	0003988e 	.word	0x0003988e
 8006ac4:	000bb679 	.word	0x000bb679
 8006ac8:	08007300 	.word	0x08007300
 8006acc:	3ff00000 	.word	0x3ff00000
 8006ad0:	40080000 	.word	0x40080000
 8006ad4:	08007320 	.word	0x08007320
 8006ad8:	08007310 	.word	0x08007310
 8006adc:	a3b3      	add	r3, pc, #716	; (adr r3, 8006dac <__ieee754_pow+0xa4c>)
 8006ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae2:	4640      	mov	r0, r8
 8006ae4:	4649      	mov	r1, r9
 8006ae6:	f7f9 fbd9 	bl	800029c <__adddf3>
 8006aea:	4622      	mov	r2, r4
 8006aec:	ec41 0b1a 	vmov	d10, r0, r1
 8006af0:	462b      	mov	r3, r5
 8006af2:	4630      	mov	r0, r6
 8006af4:	4639      	mov	r1, r7
 8006af6:	f7f9 fbcf 	bl	8000298 <__aeabi_dsub>
 8006afa:	4602      	mov	r2, r0
 8006afc:	460b      	mov	r3, r1
 8006afe:	ec51 0b1a 	vmov	r0, r1, d10
 8006b02:	f7fa f811 	bl	8000b28 <__aeabi_dcmpgt>
 8006b06:	2800      	cmp	r0, #0
 8006b08:	f47f ae04 	bne.w	8006714 <__ieee754_pow+0x3b4>
 8006b0c:	4aa2      	ldr	r2, [pc, #648]	; (8006d98 <__ieee754_pow+0xa38>)
 8006b0e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006b12:	4293      	cmp	r3, r2
 8006b14:	f340 8107 	ble.w	8006d26 <__ieee754_pow+0x9c6>
 8006b18:	151b      	asrs	r3, r3, #20
 8006b1a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006b1e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006b22:	fa4a fa03 	asr.w	sl, sl, r3
 8006b26:	44da      	add	sl, fp
 8006b28:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006b2c:	489b      	ldr	r0, [pc, #620]	; (8006d9c <__ieee754_pow+0xa3c>)
 8006b2e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006b32:	4108      	asrs	r0, r1
 8006b34:	ea00 030a 	and.w	r3, r0, sl
 8006b38:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006b3c:	f1c1 0114 	rsb	r1, r1, #20
 8006b40:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006b44:	fa4a fa01 	asr.w	sl, sl, r1
 8006b48:	f1bb 0f00 	cmp.w	fp, #0
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	4620      	mov	r0, r4
 8006b52:	4629      	mov	r1, r5
 8006b54:	bfb8      	it	lt
 8006b56:	f1ca 0a00 	rsblt	sl, sl, #0
 8006b5a:	f7f9 fb9d 	bl	8000298 <__aeabi_dsub>
 8006b5e:	ec41 0b19 	vmov	d9, r0, r1
 8006b62:	4642      	mov	r2, r8
 8006b64:	464b      	mov	r3, r9
 8006b66:	ec51 0b19 	vmov	r0, r1, d9
 8006b6a:	f7f9 fb97 	bl	800029c <__adddf3>
 8006b6e:	a37a      	add	r3, pc, #488	; (adr r3, 8006d58 <__ieee754_pow+0x9f8>)
 8006b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b74:	2000      	movs	r0, #0
 8006b76:	4604      	mov	r4, r0
 8006b78:	460d      	mov	r5, r1
 8006b7a:	f7f9 fd45 	bl	8000608 <__aeabi_dmul>
 8006b7e:	ec53 2b19 	vmov	r2, r3, d9
 8006b82:	4606      	mov	r6, r0
 8006b84:	460f      	mov	r7, r1
 8006b86:	4620      	mov	r0, r4
 8006b88:	4629      	mov	r1, r5
 8006b8a:	f7f9 fb85 	bl	8000298 <__aeabi_dsub>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4640      	mov	r0, r8
 8006b94:	4649      	mov	r1, r9
 8006b96:	f7f9 fb7f 	bl	8000298 <__aeabi_dsub>
 8006b9a:	a371      	add	r3, pc, #452	; (adr r3, 8006d60 <__ieee754_pow+0xa00>)
 8006b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba0:	f7f9 fd32 	bl	8000608 <__aeabi_dmul>
 8006ba4:	a370      	add	r3, pc, #448	; (adr r3, 8006d68 <__ieee754_pow+0xa08>)
 8006ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006baa:	4680      	mov	r8, r0
 8006bac:	4689      	mov	r9, r1
 8006bae:	4620      	mov	r0, r4
 8006bb0:	4629      	mov	r1, r5
 8006bb2:	f7f9 fd29 	bl	8000608 <__aeabi_dmul>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4640      	mov	r0, r8
 8006bbc:	4649      	mov	r1, r9
 8006bbe:	f7f9 fb6d 	bl	800029c <__adddf3>
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	460d      	mov	r5, r1
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4630      	mov	r0, r6
 8006bcc:	4639      	mov	r1, r7
 8006bce:	f7f9 fb65 	bl	800029c <__adddf3>
 8006bd2:	4632      	mov	r2, r6
 8006bd4:	463b      	mov	r3, r7
 8006bd6:	4680      	mov	r8, r0
 8006bd8:	4689      	mov	r9, r1
 8006bda:	f7f9 fb5d 	bl	8000298 <__aeabi_dsub>
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	4620      	mov	r0, r4
 8006be4:	4629      	mov	r1, r5
 8006be6:	f7f9 fb57 	bl	8000298 <__aeabi_dsub>
 8006bea:	4642      	mov	r2, r8
 8006bec:	4606      	mov	r6, r0
 8006bee:	460f      	mov	r7, r1
 8006bf0:	464b      	mov	r3, r9
 8006bf2:	4640      	mov	r0, r8
 8006bf4:	4649      	mov	r1, r9
 8006bf6:	f7f9 fd07 	bl	8000608 <__aeabi_dmul>
 8006bfa:	a35d      	add	r3, pc, #372	; (adr r3, 8006d70 <__ieee754_pow+0xa10>)
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	4604      	mov	r4, r0
 8006c02:	460d      	mov	r5, r1
 8006c04:	f7f9 fd00 	bl	8000608 <__aeabi_dmul>
 8006c08:	a35b      	add	r3, pc, #364	; (adr r3, 8006d78 <__ieee754_pow+0xa18>)
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	f7f9 fb43 	bl	8000298 <__aeabi_dsub>
 8006c12:	4622      	mov	r2, r4
 8006c14:	462b      	mov	r3, r5
 8006c16:	f7f9 fcf7 	bl	8000608 <__aeabi_dmul>
 8006c1a:	a359      	add	r3, pc, #356	; (adr r3, 8006d80 <__ieee754_pow+0xa20>)
 8006c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c20:	f7f9 fb3c 	bl	800029c <__adddf3>
 8006c24:	4622      	mov	r2, r4
 8006c26:	462b      	mov	r3, r5
 8006c28:	f7f9 fcee 	bl	8000608 <__aeabi_dmul>
 8006c2c:	a356      	add	r3, pc, #344	; (adr r3, 8006d88 <__ieee754_pow+0xa28>)
 8006c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c32:	f7f9 fb31 	bl	8000298 <__aeabi_dsub>
 8006c36:	4622      	mov	r2, r4
 8006c38:	462b      	mov	r3, r5
 8006c3a:	f7f9 fce5 	bl	8000608 <__aeabi_dmul>
 8006c3e:	a354      	add	r3, pc, #336	; (adr r3, 8006d90 <__ieee754_pow+0xa30>)
 8006c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c44:	f7f9 fb2a 	bl	800029c <__adddf3>
 8006c48:	4622      	mov	r2, r4
 8006c4a:	462b      	mov	r3, r5
 8006c4c:	f7f9 fcdc 	bl	8000608 <__aeabi_dmul>
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	4640      	mov	r0, r8
 8006c56:	4649      	mov	r1, r9
 8006c58:	f7f9 fb1e 	bl	8000298 <__aeabi_dsub>
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	460d      	mov	r5, r1
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4640      	mov	r0, r8
 8006c66:	4649      	mov	r1, r9
 8006c68:	f7f9 fcce 	bl	8000608 <__aeabi_dmul>
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	ec41 0b19 	vmov	d9, r0, r1
 8006c72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c76:	4620      	mov	r0, r4
 8006c78:	4629      	mov	r1, r5
 8006c7a:	f7f9 fb0d 	bl	8000298 <__aeabi_dsub>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	ec51 0b19 	vmov	r0, r1, d9
 8006c86:	f7f9 fde9 	bl	800085c <__aeabi_ddiv>
 8006c8a:	4632      	mov	r2, r6
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	460d      	mov	r5, r1
 8006c90:	463b      	mov	r3, r7
 8006c92:	4640      	mov	r0, r8
 8006c94:	4649      	mov	r1, r9
 8006c96:	f7f9 fcb7 	bl	8000608 <__aeabi_dmul>
 8006c9a:	4632      	mov	r2, r6
 8006c9c:	463b      	mov	r3, r7
 8006c9e:	f7f9 fafd 	bl	800029c <__adddf3>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	4629      	mov	r1, r5
 8006caa:	f7f9 faf5 	bl	8000298 <__aeabi_dsub>
 8006cae:	4642      	mov	r2, r8
 8006cb0:	464b      	mov	r3, r9
 8006cb2:	f7f9 faf1 	bl	8000298 <__aeabi_dsub>
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	4602      	mov	r2, r0
 8006cba:	4939      	ldr	r1, [pc, #228]	; (8006da0 <__ieee754_pow+0xa40>)
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	f7f9 faeb 	bl	8000298 <__aeabi_dsub>
 8006cc2:	ec41 0b10 	vmov	d0, r0, r1
 8006cc6:	ee10 3a90 	vmov	r3, s1
 8006cca:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cd2:	da2b      	bge.n	8006d2c <__ieee754_pow+0x9cc>
 8006cd4:	4650      	mov	r0, sl
 8006cd6:	f000 f877 	bl	8006dc8 <scalbn>
 8006cda:	ec51 0b10 	vmov	r0, r1, d0
 8006cde:	ec53 2b18 	vmov	r2, r3, d8
 8006ce2:	f7ff bbee 	b.w	80064c2 <__ieee754_pow+0x162>
 8006ce6:	4b2f      	ldr	r3, [pc, #188]	; (8006da4 <__ieee754_pow+0xa44>)
 8006ce8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006cec:	429e      	cmp	r6, r3
 8006cee:	f77f af0d 	ble.w	8006b0c <__ieee754_pow+0x7ac>
 8006cf2:	4b2d      	ldr	r3, [pc, #180]	; (8006da8 <__ieee754_pow+0xa48>)
 8006cf4:	440b      	add	r3, r1
 8006cf6:	4303      	orrs	r3, r0
 8006cf8:	d009      	beq.n	8006d0e <__ieee754_pow+0x9ae>
 8006cfa:	ec51 0b18 	vmov	r0, r1, d8
 8006cfe:	2200      	movs	r2, #0
 8006d00:	2300      	movs	r3, #0
 8006d02:	f7f9 fef3 	bl	8000aec <__aeabi_dcmplt>
 8006d06:	3800      	subs	r0, #0
 8006d08:	bf18      	it	ne
 8006d0a:	2001      	movne	r0, #1
 8006d0c:	e448      	b.n	80065a0 <__ieee754_pow+0x240>
 8006d0e:	4622      	mov	r2, r4
 8006d10:	462b      	mov	r3, r5
 8006d12:	f7f9 fac1 	bl	8000298 <__aeabi_dsub>
 8006d16:	4642      	mov	r2, r8
 8006d18:	464b      	mov	r3, r9
 8006d1a:	f7f9 fefb 	bl	8000b14 <__aeabi_dcmpge>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	f43f aef4 	beq.w	8006b0c <__ieee754_pow+0x7ac>
 8006d24:	e7e9      	b.n	8006cfa <__ieee754_pow+0x99a>
 8006d26:	f04f 0a00 	mov.w	sl, #0
 8006d2a:	e71a      	b.n	8006b62 <__ieee754_pow+0x802>
 8006d2c:	ec51 0b10 	vmov	r0, r1, d0
 8006d30:	4619      	mov	r1, r3
 8006d32:	e7d4      	b.n	8006cde <__ieee754_pow+0x97e>
 8006d34:	491a      	ldr	r1, [pc, #104]	; (8006da0 <__ieee754_pow+0xa40>)
 8006d36:	2000      	movs	r0, #0
 8006d38:	f7ff bb31 	b.w	800639e <__ieee754_pow+0x3e>
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	2100      	movs	r1, #0
 8006d40:	f7ff bb2d 	b.w	800639e <__ieee754_pow+0x3e>
 8006d44:	4630      	mov	r0, r6
 8006d46:	4639      	mov	r1, r7
 8006d48:	f7ff bb29 	b.w	800639e <__ieee754_pow+0x3e>
 8006d4c:	9204      	str	r2, [sp, #16]
 8006d4e:	f7ff bb7b 	b.w	8006448 <__ieee754_pow+0xe8>
 8006d52:	2300      	movs	r3, #0
 8006d54:	f7ff bb65 	b.w	8006422 <__ieee754_pow+0xc2>
 8006d58:	00000000 	.word	0x00000000
 8006d5c:	3fe62e43 	.word	0x3fe62e43
 8006d60:	fefa39ef 	.word	0xfefa39ef
 8006d64:	3fe62e42 	.word	0x3fe62e42
 8006d68:	0ca86c39 	.word	0x0ca86c39
 8006d6c:	be205c61 	.word	0xbe205c61
 8006d70:	72bea4d0 	.word	0x72bea4d0
 8006d74:	3e663769 	.word	0x3e663769
 8006d78:	c5d26bf1 	.word	0xc5d26bf1
 8006d7c:	3ebbbd41 	.word	0x3ebbbd41
 8006d80:	af25de2c 	.word	0xaf25de2c
 8006d84:	3f11566a 	.word	0x3f11566a
 8006d88:	16bebd93 	.word	0x16bebd93
 8006d8c:	3f66c16c 	.word	0x3f66c16c
 8006d90:	5555553e 	.word	0x5555553e
 8006d94:	3fc55555 	.word	0x3fc55555
 8006d98:	3fe00000 	.word	0x3fe00000
 8006d9c:	fff00000 	.word	0xfff00000
 8006da0:	3ff00000 	.word	0x3ff00000
 8006da4:	4090cbff 	.word	0x4090cbff
 8006da8:	3f6f3400 	.word	0x3f6f3400
 8006dac:	652b82fe 	.word	0x652b82fe
 8006db0:	3c971547 	.word	0x3c971547

08006db4 <fabs>:
 8006db4:	ec51 0b10 	vmov	r0, r1, d0
 8006db8:	ee10 2a10 	vmov	r2, s0
 8006dbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006dc0:	ec43 2b10 	vmov	d0, r2, r3
 8006dc4:	4770      	bx	lr
	...

08006dc8 <scalbn>:
 8006dc8:	b570      	push	{r4, r5, r6, lr}
 8006dca:	ec55 4b10 	vmov	r4, r5, d0
 8006dce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006dd2:	4606      	mov	r6, r0
 8006dd4:	462b      	mov	r3, r5
 8006dd6:	b999      	cbnz	r1, 8006e00 <scalbn+0x38>
 8006dd8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006ddc:	4323      	orrs	r3, r4
 8006dde:	d03f      	beq.n	8006e60 <scalbn+0x98>
 8006de0:	4b35      	ldr	r3, [pc, #212]	; (8006eb8 <scalbn+0xf0>)
 8006de2:	4629      	mov	r1, r5
 8006de4:	ee10 0a10 	vmov	r0, s0
 8006de8:	2200      	movs	r2, #0
 8006dea:	f7f9 fc0d 	bl	8000608 <__aeabi_dmul>
 8006dee:	4b33      	ldr	r3, [pc, #204]	; (8006ebc <scalbn+0xf4>)
 8006df0:	429e      	cmp	r6, r3
 8006df2:	4604      	mov	r4, r0
 8006df4:	460d      	mov	r5, r1
 8006df6:	da10      	bge.n	8006e1a <scalbn+0x52>
 8006df8:	a327      	add	r3, pc, #156	; (adr r3, 8006e98 <scalbn+0xd0>)
 8006dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfe:	e01f      	b.n	8006e40 <scalbn+0x78>
 8006e00:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006e04:	4291      	cmp	r1, r2
 8006e06:	d10c      	bne.n	8006e22 <scalbn+0x5a>
 8006e08:	ee10 2a10 	vmov	r2, s0
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	4629      	mov	r1, r5
 8006e10:	f7f9 fa44 	bl	800029c <__adddf3>
 8006e14:	4604      	mov	r4, r0
 8006e16:	460d      	mov	r5, r1
 8006e18:	e022      	b.n	8006e60 <scalbn+0x98>
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006e20:	3936      	subs	r1, #54	; 0x36
 8006e22:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006e26:	4296      	cmp	r6, r2
 8006e28:	dd0d      	ble.n	8006e46 <scalbn+0x7e>
 8006e2a:	2d00      	cmp	r5, #0
 8006e2c:	a11c      	add	r1, pc, #112	; (adr r1, 8006ea0 <scalbn+0xd8>)
 8006e2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e32:	da02      	bge.n	8006e3a <scalbn+0x72>
 8006e34:	a11c      	add	r1, pc, #112	; (adr r1, 8006ea8 <scalbn+0xe0>)
 8006e36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e3a:	a319      	add	r3, pc, #100	; (adr r3, 8006ea0 <scalbn+0xd8>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	f7f9 fbe2 	bl	8000608 <__aeabi_dmul>
 8006e44:	e7e6      	b.n	8006e14 <scalbn+0x4c>
 8006e46:	1872      	adds	r2, r6, r1
 8006e48:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006e4c:	428a      	cmp	r2, r1
 8006e4e:	dcec      	bgt.n	8006e2a <scalbn+0x62>
 8006e50:	2a00      	cmp	r2, #0
 8006e52:	dd08      	ble.n	8006e66 <scalbn+0x9e>
 8006e54:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006e58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006e60:	ec45 4b10 	vmov	d0, r4, r5
 8006e64:	bd70      	pop	{r4, r5, r6, pc}
 8006e66:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006e6a:	da08      	bge.n	8006e7e <scalbn+0xb6>
 8006e6c:	2d00      	cmp	r5, #0
 8006e6e:	a10a      	add	r1, pc, #40	; (adr r1, 8006e98 <scalbn+0xd0>)
 8006e70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e74:	dac0      	bge.n	8006df8 <scalbn+0x30>
 8006e76:	a10e      	add	r1, pc, #56	; (adr r1, 8006eb0 <scalbn+0xe8>)
 8006e78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e7c:	e7bc      	b.n	8006df8 <scalbn+0x30>
 8006e7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006e82:	3236      	adds	r2, #54	; 0x36
 8006e84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	4b0c      	ldr	r3, [pc, #48]	; (8006ec0 <scalbn+0xf8>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	e7d5      	b.n	8006e40 <scalbn+0x78>
 8006e94:	f3af 8000 	nop.w
 8006e98:	c2f8f359 	.word	0xc2f8f359
 8006e9c:	01a56e1f 	.word	0x01a56e1f
 8006ea0:	8800759c 	.word	0x8800759c
 8006ea4:	7e37e43c 	.word	0x7e37e43c
 8006ea8:	8800759c 	.word	0x8800759c
 8006eac:	fe37e43c 	.word	0xfe37e43c
 8006eb0:	c2f8f359 	.word	0xc2f8f359
 8006eb4:	81a56e1f 	.word	0x81a56e1f
 8006eb8:	43500000 	.word	0x43500000
 8006ebc:	ffff3cb0 	.word	0xffff3cb0
 8006ec0:	3c900000 	.word	0x3c900000

08006ec4 <with_errno>:
 8006ec4:	b570      	push	{r4, r5, r6, lr}
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	460d      	mov	r5, r1
 8006eca:	4616      	mov	r6, r2
 8006ecc:	f7fe fc36 	bl	800573c <__errno>
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	6006      	str	r6, [r0, #0]
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}

08006ed8 <xflow>:
 8006ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006eda:	4614      	mov	r4, r2
 8006edc:	461d      	mov	r5, r3
 8006ede:	b108      	cbz	r0, 8006ee4 <xflow+0xc>
 8006ee0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006ee4:	e9cd 2300 	strd	r2, r3, [sp]
 8006ee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006eec:	4620      	mov	r0, r4
 8006eee:	4629      	mov	r1, r5
 8006ef0:	f7f9 fb8a 	bl	8000608 <__aeabi_dmul>
 8006ef4:	2222      	movs	r2, #34	; 0x22
 8006ef6:	b003      	add	sp, #12
 8006ef8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006efc:	f7ff bfe2 	b.w	8006ec4 <with_errno>

08006f00 <__math_uflow>:
 8006f00:	b508      	push	{r3, lr}
 8006f02:	2200      	movs	r2, #0
 8006f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f08:	f7ff ffe6 	bl	8006ed8 <xflow>
 8006f0c:	ec41 0b10 	vmov	d0, r0, r1
 8006f10:	bd08      	pop	{r3, pc}

08006f12 <__math_oflow>:
 8006f12:	b508      	push	{r3, lr}
 8006f14:	2200      	movs	r2, #0
 8006f16:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006f1a:	f7ff ffdd 	bl	8006ed8 <xflow>
 8006f1e:	ec41 0b10 	vmov	d0, r0, r1
 8006f22:	bd08      	pop	{r3, pc}

08006f24 <__ieee754_sqrt>:
 8006f24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f28:	ec55 4b10 	vmov	r4, r5, d0
 8006f2c:	4e67      	ldr	r6, [pc, #412]	; (80070cc <__ieee754_sqrt+0x1a8>)
 8006f2e:	43ae      	bics	r6, r5
 8006f30:	ee10 0a10 	vmov	r0, s0
 8006f34:	ee10 2a10 	vmov	r2, s0
 8006f38:	4629      	mov	r1, r5
 8006f3a:	462b      	mov	r3, r5
 8006f3c:	d10d      	bne.n	8006f5a <__ieee754_sqrt+0x36>
 8006f3e:	f7f9 fb63 	bl	8000608 <__aeabi_dmul>
 8006f42:	4602      	mov	r2, r0
 8006f44:	460b      	mov	r3, r1
 8006f46:	4620      	mov	r0, r4
 8006f48:	4629      	mov	r1, r5
 8006f4a:	f7f9 f9a7 	bl	800029c <__adddf3>
 8006f4e:	4604      	mov	r4, r0
 8006f50:	460d      	mov	r5, r1
 8006f52:	ec45 4b10 	vmov	d0, r4, r5
 8006f56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f5a:	2d00      	cmp	r5, #0
 8006f5c:	dc0b      	bgt.n	8006f76 <__ieee754_sqrt+0x52>
 8006f5e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006f62:	4326      	orrs	r6, r4
 8006f64:	d0f5      	beq.n	8006f52 <__ieee754_sqrt+0x2e>
 8006f66:	b135      	cbz	r5, 8006f76 <__ieee754_sqrt+0x52>
 8006f68:	f7f9 f996 	bl	8000298 <__aeabi_dsub>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	f7f9 fc74 	bl	800085c <__aeabi_ddiv>
 8006f74:	e7eb      	b.n	8006f4e <__ieee754_sqrt+0x2a>
 8006f76:	1509      	asrs	r1, r1, #20
 8006f78:	f000 808d 	beq.w	8007096 <__ieee754_sqrt+0x172>
 8006f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f80:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8006f84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f88:	07c9      	lsls	r1, r1, #31
 8006f8a:	bf5c      	itt	pl
 8006f8c:	005b      	lslpl	r3, r3, #1
 8006f8e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8006f92:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006f96:	bf58      	it	pl
 8006f98:	0052      	lslpl	r2, r2, #1
 8006f9a:	2500      	movs	r5, #0
 8006f9c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006fa0:	1076      	asrs	r6, r6, #1
 8006fa2:	0052      	lsls	r2, r2, #1
 8006fa4:	f04f 0e16 	mov.w	lr, #22
 8006fa8:	46ac      	mov	ip, r5
 8006faa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fae:	eb0c 0001 	add.w	r0, ip, r1
 8006fb2:	4298      	cmp	r0, r3
 8006fb4:	bfde      	ittt	le
 8006fb6:	1a1b      	suble	r3, r3, r0
 8006fb8:	eb00 0c01 	addle.w	ip, r0, r1
 8006fbc:	186d      	addle	r5, r5, r1
 8006fbe:	005b      	lsls	r3, r3, #1
 8006fc0:	f1be 0e01 	subs.w	lr, lr, #1
 8006fc4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006fc8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006fcc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006fd0:	d1ed      	bne.n	8006fae <__ieee754_sqrt+0x8a>
 8006fd2:	4674      	mov	r4, lr
 8006fd4:	2720      	movs	r7, #32
 8006fd6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006fda:	4563      	cmp	r3, ip
 8006fdc:	eb01 000e 	add.w	r0, r1, lr
 8006fe0:	dc02      	bgt.n	8006fe8 <__ieee754_sqrt+0xc4>
 8006fe2:	d113      	bne.n	800700c <__ieee754_sqrt+0xe8>
 8006fe4:	4290      	cmp	r0, r2
 8006fe6:	d811      	bhi.n	800700c <__ieee754_sqrt+0xe8>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	eb00 0e01 	add.w	lr, r0, r1
 8006fee:	da57      	bge.n	80070a0 <__ieee754_sqrt+0x17c>
 8006ff0:	f1be 0f00 	cmp.w	lr, #0
 8006ff4:	db54      	blt.n	80070a0 <__ieee754_sqrt+0x17c>
 8006ff6:	f10c 0801 	add.w	r8, ip, #1
 8006ffa:	eba3 030c 	sub.w	r3, r3, ip
 8006ffe:	4290      	cmp	r0, r2
 8007000:	bf88      	it	hi
 8007002:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007006:	1a12      	subs	r2, r2, r0
 8007008:	440c      	add	r4, r1
 800700a:	46c4      	mov	ip, r8
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	3f01      	subs	r7, #1
 8007010:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007014:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007018:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800701c:	d1dd      	bne.n	8006fda <__ieee754_sqrt+0xb6>
 800701e:	4313      	orrs	r3, r2
 8007020:	d01b      	beq.n	800705a <__ieee754_sqrt+0x136>
 8007022:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80070d0 <__ieee754_sqrt+0x1ac>
 8007026:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80070d4 <__ieee754_sqrt+0x1b0>
 800702a:	e9da 0100 	ldrd	r0, r1, [sl]
 800702e:	e9db 2300 	ldrd	r2, r3, [fp]
 8007032:	f7f9 f931 	bl	8000298 <__aeabi_dsub>
 8007036:	e9da 8900 	ldrd	r8, r9, [sl]
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	4640      	mov	r0, r8
 8007040:	4649      	mov	r1, r9
 8007042:	f7f9 fd5d 	bl	8000b00 <__aeabi_dcmple>
 8007046:	b140      	cbz	r0, 800705a <__ieee754_sqrt+0x136>
 8007048:	f1b4 3fff 	cmp.w	r4, #4294967295
 800704c:	e9da 0100 	ldrd	r0, r1, [sl]
 8007050:	e9db 2300 	ldrd	r2, r3, [fp]
 8007054:	d126      	bne.n	80070a4 <__ieee754_sqrt+0x180>
 8007056:	3501      	adds	r5, #1
 8007058:	463c      	mov	r4, r7
 800705a:	106a      	asrs	r2, r5, #1
 800705c:	0863      	lsrs	r3, r4, #1
 800705e:	07e9      	lsls	r1, r5, #31
 8007060:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007064:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007068:	bf48      	it	mi
 800706a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800706e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8007072:	461c      	mov	r4, r3
 8007074:	e76d      	b.n	8006f52 <__ieee754_sqrt+0x2e>
 8007076:	0ad3      	lsrs	r3, r2, #11
 8007078:	3815      	subs	r0, #21
 800707a:	0552      	lsls	r2, r2, #21
 800707c:	2b00      	cmp	r3, #0
 800707e:	d0fa      	beq.n	8007076 <__ieee754_sqrt+0x152>
 8007080:	02dc      	lsls	r4, r3, #11
 8007082:	d50a      	bpl.n	800709a <__ieee754_sqrt+0x176>
 8007084:	f1c1 0420 	rsb	r4, r1, #32
 8007088:	fa22 f404 	lsr.w	r4, r2, r4
 800708c:	1e4d      	subs	r5, r1, #1
 800708e:	408a      	lsls	r2, r1
 8007090:	4323      	orrs	r3, r4
 8007092:	1b41      	subs	r1, r0, r5
 8007094:	e772      	b.n	8006f7c <__ieee754_sqrt+0x58>
 8007096:	4608      	mov	r0, r1
 8007098:	e7f0      	b.n	800707c <__ieee754_sqrt+0x158>
 800709a:	005b      	lsls	r3, r3, #1
 800709c:	3101      	adds	r1, #1
 800709e:	e7ef      	b.n	8007080 <__ieee754_sqrt+0x15c>
 80070a0:	46e0      	mov	r8, ip
 80070a2:	e7aa      	b.n	8006ffa <__ieee754_sqrt+0xd6>
 80070a4:	f7f9 f8fa 	bl	800029c <__adddf3>
 80070a8:	e9da 8900 	ldrd	r8, r9, [sl]
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4640      	mov	r0, r8
 80070b2:	4649      	mov	r1, r9
 80070b4:	f7f9 fd1a 	bl	8000aec <__aeabi_dcmplt>
 80070b8:	b120      	cbz	r0, 80070c4 <__ieee754_sqrt+0x1a0>
 80070ba:	1ca0      	adds	r0, r4, #2
 80070bc:	bf08      	it	eq
 80070be:	3501      	addeq	r5, #1
 80070c0:	3402      	adds	r4, #2
 80070c2:	e7ca      	b.n	800705a <__ieee754_sqrt+0x136>
 80070c4:	3401      	adds	r4, #1
 80070c6:	f024 0401 	bic.w	r4, r4, #1
 80070ca:	e7c6      	b.n	800705a <__ieee754_sqrt+0x136>
 80070cc:	7ff00000 	.word	0x7ff00000
 80070d0:	20000078 	.word	0x20000078
 80070d4:	20000080 	.word	0x20000080

080070d8 <_init>:
 80070d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070da:	bf00      	nop
 80070dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070de:	bc08      	pop	{r3}
 80070e0:	469e      	mov	lr, r3
 80070e2:	4770      	bx	lr

080070e4 <_fini>:
 80070e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e6:	bf00      	nop
 80070e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ea:	bc08      	pop	{r3}
 80070ec:	469e      	mov	lr, r3
 80070ee:	4770      	bx	lr
