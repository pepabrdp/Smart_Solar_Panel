
MCU_Pins.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013b8  08010288  08010288  00020288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011640  08011640  00031450  2**0
                  CONTENTS
  4 .ARM          00000008  08011640  08011640  00021640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011648  08011648  00031450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011648  08011648  00021648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801164c  0801164c  0002164c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001450  20000000  08011650  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20001450  08012aa0  00031450  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000173c  08012aa0  0003173c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031450  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00031480  2**0
                  CONTENTS, READONLY
 13 .debug_info   000135ea  00000000  00000000  000314c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024d0  00000000  00000000  00044aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001318  00000000  00000000  00046f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f31  00000000  00000000  00048298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018f52  00000000  00000000  000491c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015945  00000000  00000000  0006211b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fb51  00000000  00000000  00077a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006cd8  00000000  00000000  001175b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0011e28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20001450 	.word	0x20001450
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801026c 	.word	0x0801026c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20001454 	.word	0x20001454
 80001dc:	0801026c 	.word	0x0801026c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	0000      	movs	r0, r0
	...

08000f58 <getDayinDecimals>:
    double c;
};


double getDayinDecimals(int day, double hour, double min, double sec)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b090      	sub	sp, #64	; 0x40
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	61f8      	str	r0, [r7, #28]
 8000f60:	ed87 0b04 	vstr	d0, [r7, #16]
 8000f64:	ed87 1b02 	vstr	d1, [r7, #8]
 8000f68:	ed87 2b00 	vstr	d2, [r7]
    double hour_in_decimal = hour / 24;
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	4b23      	ldr	r3, [pc, #140]	; (8001000 <getDayinDecimals+0xa8>)
 8000f72:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f76:	f7ff fc71 	bl	800085c <__aeabi_ddiv>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double min_in_decimal = min / (60 * 24);
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <getDayinDecimals+0xac>)
 8000f88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f8c:	f7ff fc66 	bl	800085c <__aeabi_ddiv>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double sec_in_decimal = sec / (60 * 60 * 24);
 8000f98:	a317      	add	r3, pc, #92	; (adr r3, 8000ff8 <getDayinDecimals+0xa0>)
 8000f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fa2:	f7ff fc5b 	bl	800085c <__aeabi_ddiv>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double day_in_decimal = day + hour_in_decimal + min_in_decimal + sec_in_decimal;
 8000fae:	69f8      	ldr	r0, [r7, #28]
 8000fb0:	f7ff fac0 	bl	8000534 <__aeabi_i2d>
 8000fb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000fb8:	f7ff f970 	bl	800029c <__adddf3>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000fc8:	f7ff f968 	bl	800029c <__adddf3>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000fd4:	f7ff f962 	bl	800029c <__adddf3>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	e9c7 2308 	strd	r2, r3, [r7, #32]

    return day_in_decimal;
 8000fe0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000fe4:	ec43 2b17 	vmov	d7, r2, r3
}
 8000fe8:	eeb0 0a47 	vmov.f32	s0, s14
 8000fec:	eef0 0a67 	vmov.f32	s1, s15
 8000ff0:	3740      	adds	r7, #64	; 0x40
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40f51800 	.word	0x40f51800
 8001000:	40380000 	.word	0x40380000
 8001004:	40968000 	.word	0x40968000

08001008 <getJulianDay>:

double getJulianDay(int year, int month, double day, double zone)
{
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6178      	str	r0, [r7, #20]
 8001010:	6139      	str	r1, [r7, #16]
 8001012:	ed87 0b02 	vstr	d0, [r7, #8]
 8001016:	ed87 1b00 	vstr	d1, [r7]
    if (month == 1 || month == 2)
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d002      	beq.n	8001026 <getJulianDay+0x1e>
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d105      	bne.n	8001032 <getJulianDay+0x2a>
    {
        month += 12;
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	330c      	adds	r3, #12
 800102a:	613b      	str	r3, [r7, #16]
        year -= 1;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	3b01      	subs	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
    }

    int a = (int)(year / 100);
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	4a40      	ldr	r2, [pc, #256]	; (8001138 <getJulianDay+0x130>)
 8001036:	fb82 1203 	smull	r1, r2, r2, r3
 800103a:	1152      	asrs	r2, r2, #5
 800103c:	17db      	asrs	r3, r3, #31
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
    int b = 2 - a + (int)(a / 4);
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	f1c3 0202 	rsb	r2, r3, #2
 8001048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104a:	2b00      	cmp	r3, #0
 800104c:	da00      	bge.n	8001050 <getJulianDay+0x48>
 800104e:	3303      	adds	r3, #3
 8001050:	109b      	asrs	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	623b      	str	r3, [r7, #32]

    double julianDay = (int)(365.25 * (year + 4716)) + (int)(30.6001 * (month + 1)) + day - (zone / 24) + b - 1524.5;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 800105c:	330c      	adds	r3, #12
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fa68 	bl	8000534 <__aeabi_i2d>
 8001064:	a32e      	add	r3, pc, #184	; (adr r3, 8001120 <getJulianDay+0x118>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	f7ff facd 	bl	8000608 <__aeabi_dmul>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	f7ff fd77 	bl	8000b68 <__aeabi_d2iz>
 800107a:	4604      	mov	r4, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	3301      	adds	r3, #1
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa57 	bl	8000534 <__aeabi_i2d>
 8001086:	a328      	add	r3, pc, #160	; (adr r3, 8001128 <getJulianDay+0x120>)
 8001088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108c:	f7ff fabc 	bl	8000608 <__aeabi_dmul>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4610      	mov	r0, r2
 8001096:	4619      	mov	r1, r3
 8001098:	f7ff fd66 	bl	8000b68 <__aeabi_d2iz>
 800109c:	4603      	mov	r3, r0
 800109e:	4423      	add	r3, r4
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fa47 	bl	8000534 <__aeabi_i2d>
 80010a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010aa:	f7ff f8f7 	bl	800029c <__adddf3>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4614      	mov	r4, r2
 80010b4:	461d      	mov	r5, r3
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	4b20      	ldr	r3, [pc, #128]	; (800113c <getJulianDay+0x134>)
 80010bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010c0:	f7ff fbcc 	bl	800085c <__aeabi_ddiv>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4620      	mov	r0, r4
 80010ca:	4629      	mov	r1, r5
 80010cc:	f7ff f8e4 	bl	8000298 <__aeabi_dsub>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4614      	mov	r4, r2
 80010d6:	461d      	mov	r5, r3
 80010d8:	6a38      	ldr	r0, [r7, #32]
 80010da:	f7ff fa2b 	bl	8000534 <__aeabi_i2d>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4620      	mov	r0, r4
 80010e4:	4629      	mov	r1, r5
 80010e6:	f7ff f8d9 	bl	800029c <__adddf3>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	a30f      	add	r3, pc, #60	; (adr r3, 8001130 <getJulianDay+0x128>)
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	f7ff f8ce 	bl	8000298 <__aeabi_dsub>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return julianDay;
 8001104:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001108:	ec43 2b17 	vmov	d7, r2, r3
}
 800110c:	eeb0 0a47 	vmov.f32	s0, s14
 8001110:	eef0 0a67 	vmov.f32	s1, s15
 8001114:	3728      	adds	r7, #40	; 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bdb0      	pop	{r4, r5, r7, pc}
 800111a:	bf00      	nop
 800111c:	f3af 8000 	nop.w
 8001120:	00000000 	.word	0x00000000
 8001124:	4076d400 	.word	0x4076d400
 8001128:	27525461 	.word	0x27525461
 800112c:	403e99a0 	.word	0x403e99a0
 8001130:	00000000 	.word	0x00000000
 8001134:	4097d200 	.word	0x4097d200
 8001138:	51eb851f 	.word	0x51eb851f
 800113c:	40380000 	.word	0x40380000

08001140 <getJulianEphemerisDay>:

double getJulianEphemerisDay(double julianDay)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	ed87 0b00 	vstr	d0, [r7]
    double julianEphemerisDay = julianDay + (69 / 86400);
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001156:	f7ff f8a1 	bl	800029c <__adddf3>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return julianEphemerisDay;
 8001162:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001166:	ec43 2b17 	vmov	d7, r2, r3
}
 800116a:	eeb0 0a47 	vmov.f32	s0, s14
 800116e:	eef0 0a67 	vmov.f32	s1, s15
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <getJulianCentury>:

double getJulianCentury(double julianDay)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	ed87 0b00 	vstr	d0, [r7]
    double julianCentury = (julianDay - 2451545) / 36525;
 8001182:	a30f      	add	r3, pc, #60	; (adr r3, 80011c0 <getJulianCentury+0x48>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	e9d7 0100 	ldrd	r0, r1, [r7]
 800118c:	f7ff f884 	bl	8000298 <__aeabi_dsub>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	a30b      	add	r3, pc, #44	; (adr r3, 80011c8 <getJulianCentury+0x50>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	f7ff fb5d 	bl	800085c <__aeabi_ddiv>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return julianCentury;
 80011aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011ae:	ec43 2b17 	vmov	d7, r2, r3
}
 80011b2:	eeb0 0a47 	vmov.f32	s0, s14
 80011b6:	eef0 0a67 	vmov.f32	s1, s15
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	80000000 	.word	0x80000000
 80011c4:	4142b42c 	.word	0x4142b42c
 80011c8:	00000000 	.word	0x00000000
 80011cc:	40e1d5a0 	.word	0x40e1d5a0

080011d0 <getJulianEphemerisCentury>:

double getJulianEphemerisCentury(double julianEphemerisDay)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	ed87 0b00 	vstr	d0, [r7]
    double julianEphemerisCentury = (julianEphemerisDay - 2451545) / 36525;
 80011da:	a30f      	add	r3, pc, #60	; (adr r3, 8001218 <getJulianEphemerisCentury+0x48>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011e4:	f7ff f858 	bl	8000298 <__aeabi_dsub>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	a30b      	add	r3, pc, #44	; (adr r3, 8001220 <getJulianEphemerisCentury+0x50>)
 80011f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f6:	f7ff fb31 	bl	800085c <__aeabi_ddiv>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return julianEphemerisCentury;
 8001202:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001206:	ec43 2b17 	vmov	d7, r2, r3
}
 800120a:	eeb0 0a47 	vmov.f32	s0, s14
 800120e:	eef0 0a67 	vmov.f32	s1, s15
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	80000000 	.word	0x80000000
 800121c:	4142b42c 	.word	0x4142b42c
 8001220:	00000000 	.word	0x00000000
 8001224:	40e1d5a0 	.word	0x40e1d5a0

08001228 <getJulianEphemerisMillenium>:

double getJulianEphemerisMillenium(double julianEphemerisCentury)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	ed87 0b00 	vstr	d0, [r7]
    double julianEphemerisMillenium = julianEphemerisCentury / 10;
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <getJulianEphemerisMillenium+0x38>)
 8001238:	e9d7 0100 	ldrd	r0, r1, [r7]
 800123c:	f7ff fb0e 	bl	800085c <__aeabi_ddiv>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return julianEphemerisMillenium;
 8001248:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800124c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001250:	eeb0 0a47 	vmov.f32	s0, s14
 8001254:	eef0 0a67 	vmov.f32	s1, s15
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40240000 	.word	0x40240000

08001264 <initL0>:


struct L0 *initL0()
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
        {30, 0.44, 83996.85},
        {30, 2.74, 1349.87},
        {25, 3.16, 4690.48}
    };

    return data;
 8001268:	4b02      	ldr	r3, [pc, #8]	; (8001274 <initL0+0x10>)
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	20000020 	.word	0x20000020

08001278 <initL1>:

struct L1 *initL1()
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
        {8, 5.3, 2352.87},
        {6, 2.65, 9437.76},
        {6, 4.67, 4690.48}
    };

    return data;
 800127c:	4b02      	ldr	r3, [pc, #8]	; (8001288 <initL1+0x10>)
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	20000620 	.word	0x20000620

0800128c <initL2>:


struct L2 *initL2()
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
        {3, 2.28, 553.57},
        {2, 4.38, 5223.69},
        {2, 3.75, 0.98}
    };

    return data;
 8001290:	4b02      	ldr	r3, [pc, #8]	; (800129c <initL2+0x10>)
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	20000950 	.word	0x20000950

080012a0 <initL3>:

struct L3 *initL3()
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
        {1, 4.72, 3.52},
        {1, 5.3, 18849.23},
        {1, 5.97, 242.73}
    };

    return data;
 80012a4:	4b02      	ldr	r3, [pc, #8]	; (80012b0 <initL3+0x10>)
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	20000b30 	.word	0x20000b30

080012b4 <initL4>:

struct L4 *initL4()
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
        {114, 3.142, 0},
        {8, 4.13, 6283.08},
        {1, 3.84, 12566.15}
    };

    return data;
 80012b8:	4b02      	ldr	r3, [pc, #8]	; (80012c4 <initL4+0x10>)
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	20000bd8 	.word	0x20000bd8

080012c8 <initL5>:

struct L5 *initL5()
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
    static struct L5 data[1] = {
        {1, 3.14, 0}
    };

    return data;
 80012cc:	4b02      	ldr	r3, [pc, #8]	; (80012d8 <initL5+0x10>)
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	20000c20 	.word	0x20000c20

080012dc <getL0>:

double getL0(struct L0 *data, double julianEphemerisMillenium)
{
 80012dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012e0:	b088      	sub	sp, #32
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	60f8      	str	r0, [r7, #12]
 80012e6:	ed87 0b00 	vstr	d0, [r7]
    double L0 = 0;
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 64; i++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	e048      	b.n	800138e <getL0+0xb2>
    {
        L0 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	4613      	mov	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	461a      	mov	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f910 	bl	8000534 <__aeabi_i2d>
 8001314:	4680      	mov	r8, r0
 8001316:	4689      	mov	r9, r1
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	4613      	mov	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4413      	add	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	461a      	mov	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	461a      	mov	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4413      	add	r3, r2
 800133c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001344:	f7ff f960 	bl	8000608 <__aeabi_dmul>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4620      	mov	r0, r4
 800134e:	4629      	mov	r1, r5
 8001350:	f7fe ffa4 	bl	800029c <__adddf3>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	ec43 2b17 	vmov	d7, r2, r3
 800135c:	eeb0 0a47 	vmov.f32	s0, s14
 8001360:	eef0 0a67 	vmov.f32	s1, s15
 8001364:	f00c fb88 	bl	800da78 <cos>
 8001368:	ec53 2b10 	vmov	r2, r3, d0
 800136c:	4640      	mov	r0, r8
 800136e:	4649      	mov	r1, r9
 8001370:	f7ff f94a 	bl	8000608 <__aeabi_dmul>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800137c:	f7fe ff8e 	bl	800029c <__adddf3>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 64; i++)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	3301      	adds	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2b3f      	cmp	r3, #63	; 0x3f
 8001392:	ddb3      	ble.n	80012fc <getL0+0x20>
    }
    return L0;
 8001394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001398:	ec43 2b17 	vmov	d7, r2, r3
}
 800139c:	eeb0 0a47 	vmov.f32	s0, s14
 80013a0:	eef0 0a67 	vmov.f32	s1, s15
 80013a4:	3720      	adds	r7, #32
 80013a6:	46bd      	mov	sp, r7
 80013a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080013ac <getL1>:

double getL1(struct L1 *data, double julianEphemerisMillenium)
{
 80013ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013b0:	b088      	sub	sp, #32
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	ed87 0b00 	vstr	d0, [r7]
    double L1 = 0;
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 34; i++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e048      	b.n	800145e <getL1+0xb2>
    {
        L1 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	461a      	mov	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f8a8 	bl	8000534 <__aeabi_i2d>
 80013e4:	4680      	mov	r8, r0
 80013e6:	4689      	mov	r9, r1
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	461a      	mov	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	4613      	mov	r3, r2
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	4413      	add	r3, r2
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	461a      	mov	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001410:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001414:	f7ff f8f8 	bl	8000608 <__aeabi_dmul>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4620      	mov	r0, r4
 800141e:	4629      	mov	r1, r5
 8001420:	f7fe ff3c 	bl	800029c <__adddf3>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	ec43 2b17 	vmov	d7, r2, r3
 800142c:	eeb0 0a47 	vmov.f32	s0, s14
 8001430:	eef0 0a67 	vmov.f32	s1, s15
 8001434:	f00c fb20 	bl	800da78 <cos>
 8001438:	ec53 2b10 	vmov	r2, r3, d0
 800143c:	4640      	mov	r0, r8
 800143e:	4649      	mov	r1, r9
 8001440:	f7ff f8e2 	bl	8000608 <__aeabi_dmul>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800144c:	f7fe ff26 	bl	800029c <__adddf3>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 34; i++)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	3301      	adds	r3, #1
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	2b21      	cmp	r3, #33	; 0x21
 8001462:	ddb3      	ble.n	80013cc <getL1+0x20>
    }
    return L1;
 8001464:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001468:	ec43 2b17 	vmov	d7, r2, r3
}
 800146c:	eeb0 0a47 	vmov.f32	s0, s14
 8001470:	eef0 0a67 	vmov.f32	s1, s15
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800147c <getL2>:

double getL2(struct L2 *data, double julianEphemerisMillenium)
{
 800147c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001480:	b088      	sub	sp, #32
 8001482:	af00      	add	r7, sp, #0
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	ed87 0b00 	vstr	d0, [r7]
    double L2 = 0;
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	f04f 0300 	mov.w	r3, #0
 8001492:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 20; i++)
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e048      	b.n	800152e <getL2+0xb2>
    {
        L2 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	461a      	mov	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f840 	bl	8000534 <__aeabi_i2d>
 80014b4:	4680      	mov	r8, r0
 80014b6:	4689      	mov	r9, r1
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	4613      	mov	r3, r2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4413      	add	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	461a      	mov	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4413      	add	r3, r2
 80014c8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	4613      	mov	r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	461a      	mov	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80014e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014e4:	f7ff f890 	bl	8000608 <__aeabi_dmul>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4620      	mov	r0, r4
 80014ee:	4629      	mov	r1, r5
 80014f0:	f7fe fed4 	bl	800029c <__adddf3>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	ec43 2b17 	vmov	d7, r2, r3
 80014fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001500:	eef0 0a67 	vmov.f32	s1, s15
 8001504:	f00c fab8 	bl	800da78 <cos>
 8001508:	ec53 2b10 	vmov	r2, r3, d0
 800150c:	4640      	mov	r0, r8
 800150e:	4649      	mov	r1, r9
 8001510:	f7ff f87a 	bl	8000608 <__aeabi_dmul>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800151c:	f7fe febe 	bl	800029c <__adddf3>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 20; i++)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	3301      	adds	r3, #1
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2b13      	cmp	r3, #19
 8001532:	ddb3      	ble.n	800149c <getL2+0x20>
    }
    return L2;
 8001534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001538:	ec43 2b17 	vmov	d7, r2, r3
}
 800153c:	eeb0 0a47 	vmov.f32	s0, s14
 8001540:	eef0 0a67 	vmov.f32	s1, s15
 8001544:	3720      	adds	r7, #32
 8001546:	46bd      	mov	sp, r7
 8001548:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800154c <getL3>:

double getL3(struct L3 *data, double julianEphemerisMillenium)
{
 800154c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001550:	b088      	sub	sp, #32
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	ed87 0b00 	vstr	d0, [r7]
    double L3 = 0;
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 7; i++)
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	e048      	b.n	80015fe <getL3+0xb2>
    {
        L3 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	461a      	mov	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4413      	add	r3, r2
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ffd8 	bl	8000534 <__aeabi_i2d>
 8001584:	4680      	mov	r8, r0
 8001586:	4689      	mov	r9, r1
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	4613      	mov	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4413      	add	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	461a      	mov	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	461a      	mov	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4413      	add	r3, r2
 80015ac:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80015b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015b4:	f7ff f828 	bl	8000608 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4620      	mov	r0, r4
 80015be:	4629      	mov	r1, r5
 80015c0:	f7fe fe6c 	bl	800029c <__adddf3>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	ec43 2b17 	vmov	d7, r2, r3
 80015cc:	eeb0 0a47 	vmov.f32	s0, s14
 80015d0:	eef0 0a67 	vmov.f32	s1, s15
 80015d4:	f00c fa50 	bl	800da78 <cos>
 80015d8:	ec53 2b10 	vmov	r2, r3, d0
 80015dc:	4640      	mov	r0, r8
 80015de:	4649      	mov	r1, r9
 80015e0:	f7ff f812 	bl	8000608 <__aeabi_dmul>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015ec:	f7fe fe56 	bl	800029c <__adddf3>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 7; i++)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3301      	adds	r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2b06      	cmp	r3, #6
 8001602:	ddb3      	ble.n	800156c <getL3+0x20>
    }
    return L3;
 8001604:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001608:	ec43 2b17 	vmov	d7, r2, r3
}
 800160c:	eeb0 0a47 	vmov.f32	s0, s14
 8001610:	eef0 0a67 	vmov.f32	s1, s15
 8001614:	3720      	adds	r7, #32
 8001616:	46bd      	mov	sp, r7
 8001618:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800161c <getL4>:

double getL4(struct L4 *data, double julianEphemerisMillenium)
{
 800161c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001620:	b088      	sub	sp, #32
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	ed87 0b00 	vstr	d0, [r7]
    double L4 = 0;
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	f04f 0300 	mov.w	r3, #0
 8001632:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 3; i++)
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e048      	b.n	80016ce <getL4+0xb2>
    {
        L4 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	461a      	mov	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff70 	bl	8000534 <__aeabi_i2d>
 8001654:	4680      	mov	r8, r0
 8001656:	4689      	mov	r9, r1
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	4613      	mov	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	461a      	mov	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4413      	add	r3, r2
 800167c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001684:	f7fe ffc0 	bl	8000608 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7fe fe04 	bl	800029c <__adddf3>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	ec43 2b17 	vmov	d7, r2, r3
 800169c:	eeb0 0a47 	vmov.f32	s0, s14
 80016a0:	eef0 0a67 	vmov.f32	s1, s15
 80016a4:	f00c f9e8 	bl	800da78 <cos>
 80016a8:	ec53 2b10 	vmov	r2, r3, d0
 80016ac:	4640      	mov	r0, r8
 80016ae:	4649      	mov	r1, r9
 80016b0:	f7fe ffaa 	bl	8000608 <__aeabi_dmul>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016bc:	f7fe fdee 	bl	800029c <__adddf3>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 3; i++)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3301      	adds	r3, #1
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	ddb3      	ble.n	800163c <getL4+0x20>
    }
    return L4;
 80016d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016d8:	ec43 2b17 	vmov	d7, r2, r3
}
 80016dc:	eeb0 0a47 	vmov.f32	s0, s14
 80016e0:	eef0 0a67 	vmov.f32	s1, s15
 80016e4:	3720      	adds	r7, #32
 80016e6:	46bd      	mov	sp, r7
 80016e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080016ec <getL5>:

double getL5(struct L5 *data, double julianEphemerisMillenium)
{
 80016ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016f0:	b088      	sub	sp, #32
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	ed87 0b00 	vstr	d0, [r7]
    double L5 = 0;
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 1; i++)
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	e048      	b.n	800179e <getL5+0xb2>
    {
        L5 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	461a      	mov	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4413      	add	r3, r2
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe ff08 	bl	8000534 <__aeabi_i2d>
 8001724:	4680      	mov	r8, r0
 8001726:	4689      	mov	r9, r1
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	461a      	mov	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	461a      	mov	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001754:	f7fe ff58 	bl	8000608 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4620      	mov	r0, r4
 800175e:	4629      	mov	r1, r5
 8001760:	f7fe fd9c 	bl	800029c <__adddf3>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	ec43 2b17 	vmov	d7, r2, r3
 800176c:	eeb0 0a47 	vmov.f32	s0, s14
 8001770:	eef0 0a67 	vmov.f32	s1, s15
 8001774:	f00c f980 	bl	800da78 <cos>
 8001778:	ec53 2b10 	vmov	r2, r3, d0
 800177c:	4640      	mov	r0, r8
 800177e:	4649      	mov	r1, r9
 8001780:	f7fe ff42 	bl	8000608 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800178c:	f7fe fd86 	bl	800029c <__adddf3>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 1; i++)
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	3301      	adds	r3, #1
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	ddb3      	ble.n	800170c <getL5+0x20>
    }
    return L5;
 80017a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017a8:	ec43 2b17 	vmov	d7, r2, r3
}
 80017ac:	eeb0 0a47 	vmov.f32	s0, s14
 80017b0:	eef0 0a67 	vmov.f32	s1, s15
 80017b4:	3720      	adds	r7, #32
 80017b6:	46bd      	mov	sp, r7
 80017b8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017bc:	0000      	movs	r0, r0
	...

080017c0 <getHeliocentricLongitude>:

double getHeliocentricLongitude(double L0, double L1, double L2, double L3, double L4, double L5, double JME)
{
 80017c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017c4:	b092      	sub	sp, #72	; 0x48
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 80017cc:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 80017d0:	ed87 2b08 	vstr	d2, [r7, #32]
 80017d4:	ed87 3b06 	vstr	d3, [r7, #24]
 80017d8:	ed87 4b04 	vstr	d4, [r7, #16]
 80017dc:	ed87 5b02 	vstr	d5, [r7, #8]
 80017e0:	ed87 6b00 	vstr	d6, [r7]
    double heliocentric_longitude = (L0 + (L1 * JME) + (L2 * pow(JME, 2)) + (L3 * pow(JME, 3)) + (L4 * pow(JME, 4)) + (L5 * pow(JME, 5))) / pow(10, 8);
 80017e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017ec:	f7fe ff0c 	bl	8000608 <__aeabi_dmul>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017fc:	f7fe fd4e 	bl	800029c <__adddf3>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4690      	mov	r8, r2
 8001806:	4699      	mov	r9, r3
 8001808:	ed9f 1b65 	vldr	d1, [pc, #404]	; 80019a0 <getHeliocentricLongitude+0x1e0>
 800180c:	ed97 0b00 	vldr	d0, [r7]
 8001810:	f00b ff20 	bl	800d654 <pow>
 8001814:	ec51 0b10 	vmov	r0, r1, d0
 8001818:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800181c:	f7fe fef4 	bl	8000608 <__aeabi_dmul>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4640      	mov	r0, r8
 8001826:	4649      	mov	r1, r9
 8001828:	f7fe fd38 	bl	800029c <__adddf3>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4690      	mov	r8, r2
 8001832:	4699      	mov	r9, r3
 8001834:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 80019a8 <getHeliocentricLongitude+0x1e8>
 8001838:	ed97 0b00 	vldr	d0, [r7]
 800183c:	f00b ff0a 	bl	800d654 <pow>
 8001840:	ec51 0b10 	vmov	r0, r1, d0
 8001844:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001848:	f7fe fede 	bl	8000608 <__aeabi_dmul>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4640      	mov	r0, r8
 8001852:	4649      	mov	r1, r9
 8001854:	f7fe fd22 	bl	800029c <__adddf3>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4690      	mov	r8, r2
 800185e:	4699      	mov	r9, r3
 8001860:	ed9f 1b53 	vldr	d1, [pc, #332]	; 80019b0 <getHeliocentricLongitude+0x1f0>
 8001864:	ed97 0b00 	vldr	d0, [r7]
 8001868:	f00b fef4 	bl	800d654 <pow>
 800186c:	ec51 0b10 	vmov	r0, r1, d0
 8001870:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001874:	f7fe fec8 	bl	8000608 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4640      	mov	r0, r8
 800187e:	4649      	mov	r1, r9
 8001880:	f7fe fd0c 	bl	800029c <__adddf3>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4690      	mov	r8, r2
 800188a:	4699      	mov	r9, r3
 800188c:	ed9f 1b4a 	vldr	d1, [pc, #296]	; 80019b8 <getHeliocentricLongitude+0x1f8>
 8001890:	ed97 0b00 	vldr	d0, [r7]
 8001894:	f00b fede 	bl	800d654 <pow>
 8001898:	ec51 0b10 	vmov	r0, r1, d0
 800189c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018a0:	f7fe feb2 	bl	8000608 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4640      	mov	r0, r8
 80018aa:	4649      	mov	r1, r9
 80018ac:	f7fe fcf6 	bl	800029c <__adddf3>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	a345      	add	r3, pc, #276	; (adr r3, 80019d0 <getHeliocentricLongitude+0x210>)
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	f7fe ffcd 	bl	800085c <__aeabi_ddiv>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    heliocentric_longitude = (heliocentric_longitude * 180) / M_PI;
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	4b3e      	ldr	r3, [pc, #248]	; (80019c8 <getHeliocentricLongitude+0x208>)
 80018d0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80018d4:	f7fe fe98 	bl	8000608 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4610      	mov	r0, r2
 80018de:	4619      	mov	r1, r3
 80018e0:	a337      	add	r3, pc, #220	; (adr r3, 80019c0 <getHeliocentricLongitude+0x200>)
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	f7fe ffb9 	bl	800085c <__aeabi_ddiv>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    heliocentric_longitude = heliocentric_longitude / 360;
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	4b35      	ldr	r3, [pc, #212]	; (80019cc <getHeliocentricLongitude+0x20c>)
 80018f8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80018fc:	f7fe ffae 	bl	800085c <__aeabi_ddiv>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    double fraction = fabs(heliocentric_longitude - floor(fabs(heliocentric_longitude)));
 8001908:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800190a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800190c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001910:	ec45 4b10 	vmov	d0, r4, r5
 8001914:	f00c f9b0 	bl	800dc78 <floor>
 8001918:	ec53 2b10 	vmov	r2, r3, d0
 800191c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001920:	f7fe fcba 	bl	8000298 <__aeabi_dsub>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4611      	mov	r1, r2
 800192a:	63b9      	str	r1, [r7, #56]	; 0x38
 800192c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001930:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (heliocentric_longitude > 0)
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800193e:	f7ff f8f3 	bl	8000b28 <__aeabi_dcmpgt>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00b      	beq.n	8001960 <getHeliocentricLongitude+0x1a0>
    {
        heliocentric_longitude = 360 * fraction;
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <getHeliocentricLongitude+0x20c>)
 800194e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001952:	f7fe fe59 	bl	8000608 <__aeabi_dmul>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800195e:	e011      	b.n	8001984 <getHeliocentricLongitude+0x1c4>
    }
    else
    {
        heliocentric_longitude = 360 - (360 * fraction);
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <getHeliocentricLongitude+0x20c>)
 8001966:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800196a:	f7fe fe4d 	bl	8000608 <__aeabi_dmul>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	f04f 0000 	mov.w	r0, #0
 8001976:	4915      	ldr	r1, [pc, #84]	; (80019cc <getHeliocentricLongitude+0x20c>)
 8001978:	f7fe fc8e 	bl	8000298 <__aeabi_dsub>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }

    return heliocentric_longitude;
 8001984:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001988:	ec43 2b17 	vmov	d7, r2, r3
}
 800198c:	eeb0 0a47 	vmov.f32	s0, s14
 8001990:	eef0 0a67 	vmov.f32	s1, s15
 8001994:	3748      	adds	r7, #72	; 0x48
 8001996:	46bd      	mov	sp, r7
 8001998:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800199c:	f3af 8000 	nop.w
 80019a0:	00000000 	.word	0x00000000
 80019a4:	40000000 	.word	0x40000000
 80019a8:	00000000 	.word	0x00000000
 80019ac:	40080000 	.word	0x40080000
 80019b0:	00000000 	.word	0x00000000
 80019b4:	40100000 	.word	0x40100000
 80019b8:	00000000 	.word	0x00000000
 80019bc:	40140000 	.word	0x40140000
 80019c0:	54442d18 	.word	0x54442d18
 80019c4:	400921fb 	.word	0x400921fb
 80019c8:	40668000 	.word	0x40668000
 80019cc:	40768000 	.word	0x40768000
 80019d0:	00000000 	.word	0x00000000
 80019d4:	4197d784 	.word	0x4197d784

080019d8 <initB0>:

struct B0 *initB0()
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
        {80, 3.88, 5223.69},
        {44, 3.7, 2352.87},
        {32, 4, 1577.34}
    };

    return data;
 80019dc:	4b02      	ldr	r3, [pc, #8]	; (80019e8 <initB0+0x10>)
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	20000c38 	.word	0x20000c38

080019ec <initB1>:

struct B1 *initB1()
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
    static struct B1 data[2] = {
        {9, 3.9, 5507.55},
        {6, 1.73, 5223.69}
    };

    return data;
 80019f0:	4b02      	ldr	r3, [pc, #8]	; (80019fc <initB1+0x10>)
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	20000cb0 	.word	0x20000cb0

08001a00 <getB0>:

double getB0(struct B0 *data, double julianEphemerisMillenium)
{
 8001a00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a04:	b088      	sub	sp, #32
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	ed87 0b00 	vstr	d0, [r7]
    double B0 = 0;
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 5; i++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	e048      	b.n	8001ab2 <getB0+0xb2>
    {
        B0 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	4613      	mov	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd7e 	bl	8000534 <__aeabi_i2d>
 8001a38:	4680      	mov	r8, r0
 8001a3a:	4689      	mov	r9, r1
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	461a      	mov	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a68:	f7fe fdce 	bl	8000608 <__aeabi_dmul>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4620      	mov	r0, r4
 8001a72:	4629      	mov	r1, r5
 8001a74:	f7fe fc12 	bl	800029c <__adddf3>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	ec43 2b17 	vmov	d7, r2, r3
 8001a80:	eeb0 0a47 	vmov.f32	s0, s14
 8001a84:	eef0 0a67 	vmov.f32	s1, s15
 8001a88:	f00b fff6 	bl	800da78 <cos>
 8001a8c:	ec53 2b10 	vmov	r2, r3, d0
 8001a90:	4640      	mov	r0, r8
 8001a92:	4649      	mov	r1, r9
 8001a94:	f7fe fdb8 	bl	8000608 <__aeabi_dmul>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001aa0:	f7fe fbfc 	bl	800029c <__adddf3>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 5; i++)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	ddb3      	ble.n	8001a20 <getB0+0x20>
    }
    return B0;
 8001ab8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001abc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ac0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ac4:	eef0 0a67 	vmov.f32	s1, s15
 8001ac8:	3720      	adds	r7, #32
 8001aca:	46bd      	mov	sp, r7
 8001acc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001ad0 <getB1>:

double getB1(struct B1 *data, double julianEphemerisMillenium)
{
 8001ad0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ad4:	b088      	sub	sp, #32
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	ed87 0b00 	vstr	d0, [r7]
    double B1 = 0;
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 2; i++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	e048      	b.n	8001b82 <getB1+0xb2>
    {
        B1 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	4613      	mov	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	461a      	mov	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fd16 	bl	8000534 <__aeabi_i2d>
 8001b08:	4680      	mov	r8, r0
 8001b0a:	4689      	mov	r9, r1
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	461a      	mov	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	4613      	mov	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4413      	add	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b38:	f7fe fd66 	bl	8000608 <__aeabi_dmul>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4620      	mov	r0, r4
 8001b42:	4629      	mov	r1, r5
 8001b44:	f7fe fbaa 	bl	800029c <__adddf3>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	ec43 2b17 	vmov	d7, r2, r3
 8001b50:	eeb0 0a47 	vmov.f32	s0, s14
 8001b54:	eef0 0a67 	vmov.f32	s1, s15
 8001b58:	f00b ff8e 	bl	800da78 <cos>
 8001b5c:	ec53 2b10 	vmov	r2, r3, d0
 8001b60:	4640      	mov	r0, r8
 8001b62:	4649      	mov	r1, r9
 8001b64:	f7fe fd50 	bl	8000608 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b70:	f7fe fb94 	bl	800029c <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 2; i++)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	ddb3      	ble.n	8001af0 <getB1+0x20>
    }
    return B1;
 8001b88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b8c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b90:	eeb0 0a47 	vmov.f32	s0, s14
 8001b94:	eef0 0a67 	vmov.f32	s1, s15
 8001b98:	3720      	adds	r7, #32
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001ba0 <getHeliocentricLatitude>:

double getHeliocentricLatitude(double B0, double B1, double JME)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	ed87 0b04 	vstr	d0, [r7, #16]
 8001baa:	ed87 1b02 	vstr	d1, [r7, #8]
 8001bae:	ed87 2b00 	vstr	d2, [r7]
    double heliocentric_latitude = (B0 + (B1 * JME)) / pow(10, 8);
 8001bb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bba:	f7fe fd25 	bl	8000608 <__aeabi_dmul>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bca:	f7fe fb67 	bl	800029c <__adddf3>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	a317      	add	r3, pc, #92	; (adr r3, 8001c34 <getHeliocentricLatitude+0x94>)
 8001bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bdc:	f7fe fe3e 	bl	800085c <__aeabi_ddiv>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    heliocentric_latitude = (heliocentric_latitude * 180) / M_PI;
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <getHeliocentricLatitude+0x90>)
 8001bee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bf2:	f7fe fd09 	bl	8000608 <__aeabi_dmul>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	a30a      	add	r3, pc, #40	; (adr r3, 8001c28 <getHeliocentricLatitude+0x88>)
 8001c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c04:	f7fe fe2a 	bl	800085c <__aeabi_ddiv>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return heliocentric_latitude;
 8001c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c14:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c18:	eeb0 0a47 	vmov.f32	s0, s14
 8001c1c:	eef0 0a67 	vmov.f32	s1, s15
 8001c20:	3720      	adds	r7, #32
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	54442d18 	.word	0x54442d18
 8001c2c:	400921fb 	.word	0x400921fb
 8001c30:	40668000 	.word	0x40668000
 8001c34:	00000000 	.word	0x00000000
 8001c38:	4197d784 	.word	0x4197d784

08001c3c <initR0>:


struct R0 *initR0()
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
        {28, 1.21, 6286.6},
        {28, 1.9, 6279.55},
        {26, 4.59, 10447.39}
    };

    return data;
 8001c40:	4b02      	ldr	r3, [pc, #8]	; (8001c4c <initR0+0x10>)
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	20000ce0 	.word	0x20000ce0

08001c50 <initR1>:


struct R1 *initR1()
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
        {10, 5.91, 10977.08},
        {9, 1.42, 6275.96},
        {9, 0.27, 5486.78}
    };

    return data;
 8001c54:	4b02      	ldr	r3, [pc, #8]	; (8001c60 <initR1+0x10>)
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	200010a0 	.word	0x200010a0

08001c64 <initR2>:

struct R2 *initR2()
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
        {9, 3.63, 77713.77},
        {6, 1.87, 5573.14},
        {3, 5.47, 18849.23}
    };

    return data;
 8001c68:	4b02      	ldr	r3, [pc, #8]	; (8001c74 <initR2+0x10>)
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	20001190 	.word	0x20001190

08001c78 <initR3>:


struct R3 *initR3()
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
    static struct R3 data[2] = {
        {145, 4.273, 6283.076},
        {7, 3.92, 12566.15}
    };

    return data;
 8001c7c:	4b02      	ldr	r3, [pc, #8]	; (8001c88 <initR3+0x10>)
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	20001220 	.word	0x20001220

08001c8c <initR4>:

struct R4 *initR4()
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
    static struct R4 data[1] = {
        {4, 2.56, 6283.08}
    };

    return data;
 8001c90:	4b02      	ldr	r3, [pc, #8]	; (8001c9c <initR4+0x10>)
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	20001250 	.word	0x20001250

08001ca0 <getR0>:

double getR0(struct R0 *data, double julianEphemerisMillenium)
{
 8001ca0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ca4:	b088      	sub	sp, #32
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	ed87 0b00 	vstr	d0, [r7]
    double R0 = 0;
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 40; i++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	e048      	b.n	8001d52 <getR0+0xb2>
    {
        R0 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fc2e 	bl	8000534 <__aeabi_i2d>
 8001cd8:	4680      	mov	r8, r0
 8001cda:	4689      	mov	r9, r1
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4413      	add	r3, r2
 8001cec:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d08:	f7fe fc7e 	bl	8000608 <__aeabi_dmul>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4620      	mov	r0, r4
 8001d12:	4629      	mov	r1, r5
 8001d14:	f7fe fac2 	bl	800029c <__adddf3>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	ec43 2b17 	vmov	d7, r2, r3
 8001d20:	eeb0 0a47 	vmov.f32	s0, s14
 8001d24:	eef0 0a67 	vmov.f32	s1, s15
 8001d28:	f00b fea6 	bl	800da78 <cos>
 8001d2c:	ec53 2b10 	vmov	r2, r3, d0
 8001d30:	4640      	mov	r0, r8
 8001d32:	4649      	mov	r1, r9
 8001d34:	f7fe fc68 	bl	8000608 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d40:	f7fe faac 	bl	800029c <__adddf3>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 40; i++)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2b27      	cmp	r3, #39	; 0x27
 8001d56:	ddb3      	ble.n	8001cc0 <getR0+0x20>
    }
    return R0;
 8001d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d5c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d60:	eeb0 0a47 	vmov.f32	s0, s14
 8001d64:	eef0 0a67 	vmov.f32	s1, s15
 8001d68:	3720      	adds	r7, #32
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001d70 <getR1>:

double getR1(struct R1 *data, double julianEphemerisMillenium)
{
 8001d70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d74:	b088      	sub	sp, #32
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	60f8      	str	r0, [r7, #12]
 8001d7a:	ed87 0b00 	vstr	d0, [r7]
    double R1 = 0;
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 10; i++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	e048      	b.n	8001e22 <getR1+0xb2>
    {
        R1 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	4613      	mov	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fbc6 	bl	8000534 <__aeabi_i2d>
 8001da8:	4680      	mov	r8, r0
 8001daa:	4689      	mov	r9, r1
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	4613      	mov	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	461a      	mov	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4413      	add	r3, r2
 8001dbc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dd8:	f7fe fc16 	bl	8000608 <__aeabi_dmul>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4620      	mov	r0, r4
 8001de2:	4629      	mov	r1, r5
 8001de4:	f7fe fa5a 	bl	800029c <__adddf3>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	ec43 2b17 	vmov	d7, r2, r3
 8001df0:	eeb0 0a47 	vmov.f32	s0, s14
 8001df4:	eef0 0a67 	vmov.f32	s1, s15
 8001df8:	f00b fe3e 	bl	800da78 <cos>
 8001dfc:	ec53 2b10 	vmov	r2, r3, d0
 8001e00:	4640      	mov	r0, r8
 8001e02:	4649      	mov	r1, r9
 8001e04:	f7fe fc00 	bl	8000608 <__aeabi_dmul>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e10:	f7fe fa44 	bl	800029c <__adddf3>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 10; i++)
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2b09      	cmp	r3, #9
 8001e26:	ddb3      	ble.n	8001d90 <getR1+0x20>
    }
    return R1;
 8001e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e2c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e30:	eeb0 0a47 	vmov.f32	s0, s14
 8001e34:	eef0 0a67 	vmov.f32	s1, s15
 8001e38:	3720      	adds	r7, #32
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001e40 <getR2>:

double getR2(struct R2 *data, double julianEphemerisMillenium)
{
 8001e40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e44:	b088      	sub	sp, #32
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	ed87 0b00 	vstr	d0, [r7]
    double R2 = 0;
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 6; i++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	e048      	b.n	8001ef2 <getR2+0xb2>
    {
        R2 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4413      	add	r3, r2
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fb5e 	bl	8000534 <__aeabi_i2d>
 8001e78:	4680      	mov	r8, r0
 8001e7a:	4689      	mov	r9, r1
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	461a      	mov	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	4613      	mov	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4413      	add	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ea8:	f7fe fbae 	bl	8000608 <__aeabi_dmul>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	4629      	mov	r1, r5
 8001eb4:	f7fe f9f2 	bl	800029c <__adddf3>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	ec43 2b17 	vmov	d7, r2, r3
 8001ec0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ec4:	eef0 0a67 	vmov.f32	s1, s15
 8001ec8:	f00b fdd6 	bl	800da78 <cos>
 8001ecc:	ec53 2b10 	vmov	r2, r3, d0
 8001ed0:	4640      	mov	r0, r8
 8001ed2:	4649      	mov	r1, r9
 8001ed4:	f7fe fb98 	bl	8000608 <__aeabi_dmul>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ee0:	f7fe f9dc 	bl	800029c <__adddf3>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 6; i++)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	ddb3      	ble.n	8001e60 <getR2+0x20>
    }
    return R2;
 8001ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001efc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f00:	eeb0 0a47 	vmov.f32	s0, s14
 8001f04:	eef0 0a67 	vmov.f32	s1, s15
 8001f08:	3720      	adds	r7, #32
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001f10 <getR3>:

double getR3(struct R3 *data, double julianEphemerisMillenium)
{
 8001f10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f14:	b088      	sub	sp, #32
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	ed87 0b00 	vstr	d0, [r7]
    double R3 = 0;
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 2; i++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	e048      	b.n	8001fc2 <getR3+0xb2>
    {
        R3 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4413      	add	r3, r2
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe faf6 	bl	8000534 <__aeabi_i2d>
 8001f48:	4680      	mov	r8, r0
 8001f4a:	4689      	mov	r9, r1
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	4413      	add	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	461a      	mov	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4413      	add	r3, r2
 8001f70:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f78:	f7fe fb46 	bl	8000608 <__aeabi_dmul>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4620      	mov	r0, r4
 8001f82:	4629      	mov	r1, r5
 8001f84:	f7fe f98a 	bl	800029c <__adddf3>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	ec43 2b17 	vmov	d7, r2, r3
 8001f90:	eeb0 0a47 	vmov.f32	s0, s14
 8001f94:	eef0 0a67 	vmov.f32	s1, s15
 8001f98:	f00b fd6e 	bl	800da78 <cos>
 8001f9c:	ec53 2b10 	vmov	r2, r3, d0
 8001fa0:	4640      	mov	r0, r8
 8001fa2:	4649      	mov	r1, r9
 8001fa4:	f7fe fb30 	bl	8000608 <__aeabi_dmul>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001fb0:	f7fe f974 	bl	800029c <__adddf3>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 2; i++)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	ddb3      	ble.n	8001f30 <getR3+0x20>
    }
    return R3;
 8001fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fcc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001fd0:	eeb0 0a47 	vmov.f32	s0, s14
 8001fd4:	eef0 0a67 	vmov.f32	s1, s15
 8001fd8:	3720      	adds	r7, #32
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001fe0 <getR4>:

double getR4(struct R4 *data, double julianEphemerisMillenium)
{
 8001fe0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fe4:	b088      	sub	sp, #32
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	ed87 0b00 	vstr	d0, [r7]
    double R4 = 0;
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 1; i++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	e048      	b.n	8002092 <getR4+0xb2>
    {
        R4 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	461a      	mov	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4413      	add	r3, r2
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fa8e 	bl	8000534 <__aeabi_i2d>
 8002018:	4680      	mov	r8, r0
 800201a:	4689      	mov	r9, r1
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	4613      	mov	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4413      	add	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	461a      	mov	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4413      	add	r3, r2
 800202c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	461a      	mov	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4413      	add	r3, r2
 8002040:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002044:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002048:	f7fe fade 	bl	8000608 <__aeabi_dmul>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4620      	mov	r0, r4
 8002052:	4629      	mov	r1, r5
 8002054:	f7fe f922 	bl	800029c <__adddf3>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	ec43 2b17 	vmov	d7, r2, r3
 8002060:	eeb0 0a47 	vmov.f32	s0, s14
 8002064:	eef0 0a67 	vmov.f32	s1, s15
 8002068:	f00b fd06 	bl	800da78 <cos>
 800206c:	ec53 2b10 	vmov	r2, r3, d0
 8002070:	4640      	mov	r0, r8
 8002072:	4649      	mov	r1, r9
 8002074:	f7fe fac8 	bl	8000608 <__aeabi_dmul>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002080:	f7fe f90c 	bl	800029c <__adddf3>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 1; i++)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	3301      	adds	r3, #1
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b00      	cmp	r3, #0
 8002096:	ddb3      	ble.n	8002000 <getR4+0x20>
    }
    return R4;
 8002098:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800209c:	ec43 2b17 	vmov	d7, r2, r3
}
 80020a0:	eeb0 0a47 	vmov.f32	s0, s14
 80020a4:	eef0 0a67 	vmov.f32	s1, s15
 80020a8:	3720      	adds	r7, #32
 80020aa:	46bd      	mov	sp, r7
 80020ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080020b0 <getEarthRadiusVector>:

double getEarthRadiusVector(double R0, double R1, double R2, double R3, double R4, double JME)
{
 80020b0:	b5b0      	push	{r4, r5, r7, lr}
 80020b2:	b08e      	sub	sp, #56	; 0x38
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80020ba:	ed87 1b08 	vstr	d1, [r7, #32]
 80020be:	ed87 2b06 	vstr	d2, [r7, #24]
 80020c2:	ed87 3b04 	vstr	d3, [r7, #16]
 80020c6:	ed87 4b02 	vstr	d4, [r7, #8]
 80020ca:	ed87 5b00 	vstr	d5, [r7]
    double earth_radiusVector = (R0 + (R1 * JME) + (R2 * pow(JME, 2)) + (R3 * pow(JME, 3)) + (R4 * pow(JME, 4))) / pow(10, 8);
 80020ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020d6:	f7fe fa97 	bl	8000608 <__aeabi_dmul>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4610      	mov	r0, r2
 80020e0:	4619      	mov	r1, r3
 80020e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020e6:	f7fe f8d9 	bl	800029c <__adddf3>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4614      	mov	r4, r2
 80020f0:	461d      	mov	r5, r3
 80020f2:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 80021a0 <getEarthRadiusVector+0xf0>
 80020f6:	ed97 0b00 	vldr	d0, [r7]
 80020fa:	f00b faab 	bl	800d654 <pow>
 80020fe:	ec51 0b10 	vmov	r0, r1, d0
 8002102:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002106:	f7fe fa7f 	bl	8000608 <__aeabi_dmul>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4620      	mov	r0, r4
 8002110:	4629      	mov	r1, r5
 8002112:	f7fe f8c3 	bl	800029c <__adddf3>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4614      	mov	r4, r2
 800211c:	461d      	mov	r5, r3
 800211e:	ed9f 1b22 	vldr	d1, [pc, #136]	; 80021a8 <getEarthRadiusVector+0xf8>
 8002122:	ed97 0b00 	vldr	d0, [r7]
 8002126:	f00b fa95 	bl	800d654 <pow>
 800212a:	ec51 0b10 	vmov	r0, r1, d0
 800212e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002132:	f7fe fa69 	bl	8000608 <__aeabi_dmul>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4620      	mov	r0, r4
 800213c:	4629      	mov	r1, r5
 800213e:	f7fe f8ad 	bl	800029c <__adddf3>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4614      	mov	r4, r2
 8002148:	461d      	mov	r5, r3
 800214a:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80021b0 <getEarthRadiusVector+0x100>
 800214e:	ed97 0b00 	vldr	d0, [r7]
 8002152:	f00b fa7f 	bl	800d654 <pow>
 8002156:	ec51 0b10 	vmov	r0, r1, d0
 800215a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800215e:	f7fe fa53 	bl	8000608 <__aeabi_dmul>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4620      	mov	r0, r4
 8002168:	4629      	mov	r1, r5
 800216a:	f7fe f897 	bl	800029c <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	a310      	add	r3, pc, #64	; (adr r3, 80021b8 <getEarthRadiusVector+0x108>)
 8002178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217c:	f7fe fb6e 	bl	800085c <__aeabi_ddiv>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    return earth_radiusVector;
 8002188:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800218c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002190:	eeb0 0a47 	vmov.f32	s0, s14
 8002194:	eef0 0a67 	vmov.f32	s1, s15
 8002198:	3738      	adds	r7, #56	; 0x38
 800219a:	46bd      	mov	sp, r7
 800219c:	bdb0      	pop	{r4, r5, r7, pc}
 800219e:	bf00      	nop
 80021a0:	00000000 	.word	0x00000000
 80021a4:	40000000 	.word	0x40000000
 80021a8:	00000000 	.word	0x00000000
 80021ac:	40080000 	.word	0x40080000
 80021b0:	00000000 	.word	0x00000000
 80021b4:	40100000 	.word	0x40100000
 80021b8:	00000000 	.word	0x00000000
 80021bc:	4197d784 	.word	0x4197d784

080021c0 <getGeocentricLongitude>:

double getGeocentricLongitude(double heliocentric_longitude)
{
 80021c0:	b5b0      	push	{r4, r5, r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	ed87 0b00 	vstr	d0, [r7]
    double geocentric_longitude = heliocentric_longitude + 180;
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	4b2e      	ldr	r3, [pc, #184]	; (8002288 <getGeocentricLongitude+0xc8>)
 80021d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021d4:	f7fe f862 	bl	800029c <__adddf3>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    geocentric_longitude = geocentric_longitude / 360;
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	4b29      	ldr	r3, [pc, #164]	; (800228c <getGeocentricLongitude+0xcc>)
 80021e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021ea:	f7fe fb37 	bl	800085c <__aeabi_ddiv>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	e9c7 2304 	strd	r2, r3, [r7, #16]

    double fraction = fabs(geocentric_longitude - floor(fabs(geocentric_longitude)));
 80021f6:	693c      	ldr	r4, [r7, #16]
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80021fe:	ec45 4b10 	vmov	d0, r4, r5
 8002202:	f00b fd39 	bl	800dc78 <floor>
 8002206:	ec53 2b10 	vmov	r2, r3, d0
 800220a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800220e:	f7fe f843 	bl	8000298 <__aeabi_dsub>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4611      	mov	r1, r2
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800221e:	60fb      	str	r3, [r7, #12]

    if (geocentric_longitude > 0)
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	f04f 0300 	mov.w	r3, #0
 8002228:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800222c:	f7fe fc7c 	bl	8000b28 <__aeabi_dcmpgt>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00b      	beq.n	800224e <getGeocentricLongitude+0x8e>
    {
        geocentric_longitude = 360 * fraction;
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	4b14      	ldr	r3, [pc, #80]	; (800228c <getGeocentricLongitude+0xcc>)
 800223c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002240:	f7fe f9e2 	bl	8000608 <__aeabi_dmul>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800224c:	e011      	b.n	8002272 <getGeocentricLongitude+0xb2>
    }
    else
    {
        geocentric_longitude = 360 - (360 * fraction);
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	4b0e      	ldr	r3, [pc, #56]	; (800228c <getGeocentricLongitude+0xcc>)
 8002254:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002258:	f7fe f9d6 	bl	8000608 <__aeabi_dmul>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	f04f 0000 	mov.w	r0, #0
 8002264:	4909      	ldr	r1, [pc, #36]	; (800228c <getGeocentricLongitude+0xcc>)
 8002266:	f7fe f817 	bl	8000298 <__aeabi_dsub>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    }

    return geocentric_longitude;
 8002272:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002276:	ec43 2b17 	vmov	d7, r2, r3
}
 800227a:	eeb0 0a47 	vmov.f32	s0, s14
 800227e:	eef0 0a67 	vmov.f32	s1, s15
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bdb0      	pop	{r4, r5, r7, pc}
 8002288:	40668000 	.word	0x40668000
 800228c:	40768000 	.word	0x40768000

08002290 <getMeanElongation_MoonFromSun>:

double getMeanElongation_MoonFromSun(double julianEphemerisCentury)
{
 8002290:	b5b0      	push	{r4, r5, r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	ed87 0b00 	vstr	d0, [r7]
    double mean_elongation = 297.85036 + (445267.111480 * julianEphemerisCentury) - (0.0019142 * pow(julianEphemerisCentury, 2)) +
 800229a:	a32b      	add	r3, pc, #172	; (adr r3, 8002348 <getMeanElongation_MoonFromSun+0xb8>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022a4:	f7fe f9b0 	bl	8000608 <__aeabi_dmul>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4610      	mov	r0, r2
 80022ae:	4619      	mov	r1, r3
 80022b0:	a327      	add	r3, pc, #156	; (adr r3, 8002350 <getMeanElongation_MoonFromSun+0xc0>)
 80022b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b6:	f7fd fff1 	bl	800029c <__adddf3>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4614      	mov	r4, r2
 80022c0:	461d      	mov	r5, r3
 80022c2:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8002338 <getMeanElongation_MoonFromSun+0xa8>
 80022c6:	ed97 0b00 	vldr	d0, [r7]
 80022ca:	f00b f9c3 	bl	800d654 <pow>
 80022ce:	ec51 0b10 	vmov	r0, r1, d0
 80022d2:	a321      	add	r3, pc, #132	; (adr r3, 8002358 <getMeanElongation_MoonFromSun+0xc8>)
 80022d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d8:	f7fe f996 	bl	8000608 <__aeabi_dmul>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4620      	mov	r0, r4
 80022e2:	4629      	mov	r1, r5
 80022e4:	f7fd ffd8 	bl	8000298 <__aeabi_dsub>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4614      	mov	r4, r2
 80022ee:	461d      	mov	r5, r3
    (pow(julianEphemerisCentury, 3) / 189474);
 80022f0:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8002340 <getMeanElongation_MoonFromSun+0xb0>
 80022f4:	ed97 0b00 	vldr	d0, [r7]
 80022f8:	f00b f9ac 	bl	800d654 <pow>
 80022fc:	ec51 0b10 	vmov	r0, r1, d0
 8002300:	a317      	add	r3, pc, #92	; (adr r3, 8002360 <getMeanElongation_MoonFromSun+0xd0>)
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fe faa9 	bl	800085c <__aeabi_ddiv>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
    double mean_elongation = 297.85036 + (445267.111480 * julianEphemerisCentury) - (0.0019142 * pow(julianEphemerisCentury, 2)) +
 800230e:	4620      	mov	r0, r4
 8002310:	4629      	mov	r1, r5
 8002312:	f7fd ffc3 	bl	800029c <__adddf3>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return mean_elongation;
 800231e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002322:	ec43 2b17 	vmov	d7, r2, r3
}
 8002326:	eeb0 0a47 	vmov.f32	s0, s14
 800232a:	eef0 0a67 	vmov.f32	s1, s15
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bdb0      	pop	{r4, r5, r7, pc}
 8002334:	f3af 8000 	nop.w
 8002338:	00000000 	.word	0x00000000
 800233c:	40000000 	.word	0x40000000
 8002340:	00000000 	.word	0x00000000
 8002344:	40080000 	.word	0x40080000
 8002348:	7227d029 	.word	0x7227d029
 800234c:	411b2d4c 	.word	0x411b2d4c
 8002350:	13165d3a 	.word	0x13165d3a
 8002354:	40729d9b 	.word	0x40729d9b
 8002358:	9978e26a 	.word	0x9978e26a
 800235c:	3f5f5cbc 	.word	0x3f5f5cbc
 8002360:	00000000 	.word	0x00000000
 8002364:	41072110 	.word	0x41072110

08002368 <getMeanAnomalySun>:

double getMeanAnomalySun(double julianEphemerisCentury)
{
 8002368:	b5b0      	push	{r4, r5, r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	ed87 0b00 	vstr	d0, [r7]
    double mean_anomaly = 357.52772 + (35999.050340 * julianEphemerisCentury) - (0.0001603 * pow(julianEphemerisCentury, 2)) -
 8002372:	a32b      	add	r3, pc, #172	; (adr r3, 8002420 <getMeanAnomalySun+0xb8>)
 8002374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002378:	e9d7 0100 	ldrd	r0, r1, [r7]
 800237c:	f7fe f944 	bl	8000608 <__aeabi_dmul>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4610      	mov	r0, r2
 8002386:	4619      	mov	r1, r3
 8002388:	a327      	add	r3, pc, #156	; (adr r3, 8002428 <getMeanAnomalySun+0xc0>)
 800238a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238e:	f7fd ff85 	bl	800029c <__adddf3>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4614      	mov	r4, r2
 8002398:	461d      	mov	r5, r3
 800239a:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8002410 <getMeanAnomalySun+0xa8>
 800239e:	ed97 0b00 	vldr	d0, [r7]
 80023a2:	f00b f957 	bl	800d654 <pow>
 80023a6:	ec51 0b10 	vmov	r0, r1, d0
 80023aa:	a321      	add	r3, pc, #132	; (adr r3, 8002430 <getMeanAnomalySun+0xc8>)
 80023ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b0:	f7fe f92a 	bl	8000608 <__aeabi_dmul>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4620      	mov	r0, r4
 80023ba:	4629      	mov	r1, r5
 80023bc:	f7fd ff6c 	bl	8000298 <__aeabi_dsub>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4614      	mov	r4, r2
 80023c6:	461d      	mov	r5, r3
    (pow(julianEphemerisCentury, 3) / 300000);
 80023c8:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8002418 <getMeanAnomalySun+0xb0>
 80023cc:	ed97 0b00 	vldr	d0, [r7]
 80023d0:	f00b f940 	bl	800d654 <pow>
 80023d4:	ec51 0b10 	vmov	r0, r1, d0
 80023d8:	a317      	add	r3, pc, #92	; (adr r3, 8002438 <getMeanAnomalySun+0xd0>)
 80023da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023de:	f7fe fa3d 	bl	800085c <__aeabi_ddiv>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
    double mean_anomaly = 357.52772 + (35999.050340 * julianEphemerisCentury) - (0.0001603 * pow(julianEphemerisCentury, 2)) -
 80023e6:	4620      	mov	r0, r4
 80023e8:	4629      	mov	r1, r5
 80023ea:	f7fd ff55 	bl	8000298 <__aeabi_dsub>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return mean_anomaly;
 80023f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023fa:	ec43 2b17 	vmov	d7, r2, r3
}
 80023fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002402:	eef0 0a67 	vmov.f32	s1, s15
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bdb0      	pop	{r4, r5, r7, pc}
 800240c:	f3af 8000 	nop.w
 8002410:	00000000 	.word	0x00000000
 8002414:	40000000 	.word	0x40000000
 8002418:	00000000 	.word	0x00000000
 800241c:	40080000 	.word	0x40080000
 8002420:	9c62a1b6 	.word	0x9c62a1b6
 8002424:	40e193e1 	.word	0x40e193e1
 8002428:	8a86d71f 	.word	0x8a86d71f
 800242c:	40765871 	.word	0x40765871
 8002430:	83dd6fb2 	.word	0x83dd6fb2
 8002434:	3f2502c6 	.word	0x3f2502c6
 8002438:	00000000 	.word	0x00000000
 800243c:	41124f80 	.word	0x41124f80

08002440 <getMeanAnomalyMoon>:

double getMeanAnomalyMoon(double julianEphemerisCentury)
{
 8002440:	b5b0      	push	{r4, r5, r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	ed87 0b00 	vstr	d0, [r7]
    double mean_anomaly = 134.96298 + (477198.867398 * julianEphemerisCentury) + (0.0086972 * pow(julianEphemerisCentury, 2)) +
 800244a:	a32b      	add	r3, pc, #172	; (adr r3, 80024f8 <getMeanAnomalyMoon+0xb8>)
 800244c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002450:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002454:	f7fe f8d8 	bl	8000608 <__aeabi_dmul>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	a327      	add	r3, pc, #156	; (adr r3, 8002500 <getMeanAnomalyMoon+0xc0>)
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	f7fd ff19 	bl	800029c <__adddf3>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4614      	mov	r4, r2
 8002470:	461d      	mov	r5, r3
 8002472:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 80024e8 <getMeanAnomalyMoon+0xa8>
 8002476:	ed97 0b00 	vldr	d0, [r7]
 800247a:	f00b f8eb 	bl	800d654 <pow>
 800247e:	ec51 0b10 	vmov	r0, r1, d0
 8002482:	a321      	add	r3, pc, #132	; (adr r3, 8002508 <getMeanAnomalyMoon+0xc8>)
 8002484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002488:	f7fe f8be 	bl	8000608 <__aeabi_dmul>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4620      	mov	r0, r4
 8002492:	4629      	mov	r1, r5
 8002494:	f7fd ff02 	bl	800029c <__adddf3>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4614      	mov	r4, r2
 800249e:	461d      	mov	r5, r3
    (pow(julianEphemerisCentury, 3) / 56250);
 80024a0:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80024f0 <getMeanAnomalyMoon+0xb0>
 80024a4:	ed97 0b00 	vldr	d0, [r7]
 80024a8:	f00b f8d4 	bl	800d654 <pow>
 80024ac:	ec51 0b10 	vmov	r0, r1, d0
 80024b0:	a317      	add	r3, pc, #92	; (adr r3, 8002510 <getMeanAnomalyMoon+0xd0>)
 80024b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b6:	f7fe f9d1 	bl	800085c <__aeabi_ddiv>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
    double mean_anomaly = 134.96298 + (477198.867398 * julianEphemerisCentury) + (0.0086972 * pow(julianEphemerisCentury, 2)) +
 80024be:	4620      	mov	r0, r4
 80024c0:	4629      	mov	r1, r5
 80024c2:	f7fd feeb 	bl	800029c <__adddf3>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return mean_anomaly;
 80024ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80024d6:	eeb0 0a47 	vmov.f32	s0, s14
 80024da:	eef0 0a67 	vmov.f32	s1, s15
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bdb0      	pop	{r4, r5, r7, pc}
 80024e4:	f3af 8000 	nop.w
 80024e8:	00000000 	.word	0x00000000
 80024ec:	40000000 	.word	0x40000000
 80024f0:	00000000 	.word	0x00000000
 80024f4:	40080000 	.word	0x40080000
 80024f8:	78372e6a 	.word	0x78372e6a
 80024fc:	411d203b 	.word	0x411d203b
 8002500:	bb6ed677 	.word	0xbb6ed677
 8002504:	4060ded0 	.word	0x4060ded0
 8002508:	6c88bf57 	.word	0x6c88bf57
 800250c:	3f81cfd6 	.word	0x3f81cfd6
 8002510:	00000000 	.word	0x00000000
 8002514:	40eb7740 	.word	0x40eb7740

08002518 <getMoonLatitudeArgument>:

double getMoonLatitudeArgument(double julianEphemerisCentury)
{
 8002518:	b5b0      	push	{r4, r5, r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	ed87 0b00 	vstr	d0, [r7]
    double moon_latitude_argument = 93.27191 + (483202.017538 * julianEphemerisCentury) + (0.0036825 * pow(julianEphemerisCentury, 2)) +
 8002522:	a32b      	add	r3, pc, #172	; (adr r3, 80025d0 <getMoonLatitudeArgument+0xb8>)
 8002524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002528:	e9d7 0100 	ldrd	r0, r1, [r7]
 800252c:	f7fe f86c 	bl	8000608 <__aeabi_dmul>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	a327      	add	r3, pc, #156	; (adr r3, 80025d8 <getMoonLatitudeArgument+0xc0>)
 800253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253e:	f7fd fead 	bl	800029c <__adddf3>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4614      	mov	r4, r2
 8002548:	461d      	mov	r5, r3
 800254a:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 80025c0 <getMoonLatitudeArgument+0xa8>
 800254e:	ed97 0b00 	vldr	d0, [r7]
 8002552:	f00b f87f 	bl	800d654 <pow>
 8002556:	ec51 0b10 	vmov	r0, r1, d0
 800255a:	a321      	add	r3, pc, #132	; (adr r3, 80025e0 <getMoonLatitudeArgument+0xc8>)
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	f7fe f852 	bl	8000608 <__aeabi_dmul>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4620      	mov	r0, r4
 800256a:	4629      	mov	r1, r5
 800256c:	f7fd fe96 	bl	800029c <__adddf3>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4614      	mov	r4, r2
 8002576:	461d      	mov	r5, r3
    (pow(julianEphemerisCentury, 3) / 327270);
 8002578:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80025c8 <getMoonLatitudeArgument+0xb0>
 800257c:	ed97 0b00 	vldr	d0, [r7]
 8002580:	f00b f868 	bl	800d654 <pow>
 8002584:	ec51 0b10 	vmov	r0, r1, d0
 8002588:	a317      	add	r3, pc, #92	; (adr r3, 80025e8 <getMoonLatitudeArgument+0xd0>)
 800258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258e:	f7fe f965 	bl	800085c <__aeabi_ddiv>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
    double moon_latitude_argument = 93.27191 + (483202.017538 * julianEphemerisCentury) + (0.0036825 * pow(julianEphemerisCentury, 2)) +
 8002596:	4620      	mov	r0, r4
 8002598:	4629      	mov	r1, r5
 800259a:	f7fd fe7f 	bl	800029c <__adddf3>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return moon_latitude_argument;
 80025a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025aa:	ec43 2b17 	vmov	d7, r2, r3
}
 80025ae:	eeb0 0a47 	vmov.f32	s0, s14
 80025b2:	eef0 0a67 	vmov.f32	s1, s15
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bdb0      	pop	{r4, r5, r7, pc}
 80025bc:	f3af 8000 	nop.w
 80025c0:	00000000 	.word	0x00000000
 80025c4:	40000000 	.word	0x40000000
 80025c8:	00000000 	.word	0x00000000
 80025cc:	40080000 	.word	0x40080000
 80025d0:	11f57b42 	.word	0x11f57b42
 80025d4:	411d7e08 	.word	0x411d7e08
 80025d8:	f9335d25 	.word	0xf9335d25
 80025dc:	40575166 	.word	0x40575166
 80025e0:	22291fb4 	.word	0x22291fb4
 80025e4:	3f6e2ac3 	.word	0x3f6e2ac3
 80025e8:	00000000 	.word	0x00000000
 80025ec:	4113f998 	.word	0x4113f998

080025f0 <getMoonAscendingNode>:

double getMoonAscendingNode(double julianEphemerisCentury)
{
 80025f0:	b5b0      	push	{r4, r5, r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	ed87 0b00 	vstr	d0, [r7]
    double moon_ascending_node = 125.04452 - (1934.136261 * julianEphemerisCentury) + (0.0020708 * pow(julianEphemerisCentury, 2)) +
 80025fa:	a329      	add	r3, pc, #164	; (adr r3, 80026a0 <getMoonAscendingNode+0xb0>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002604:	f7fe f800 	bl	8000608 <__aeabi_dmul>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	a126      	add	r1, pc, #152	; (adr r1, 80026a8 <getMoonAscendingNode+0xb8>)
 800260e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002612:	f7fd fe41 	bl	8000298 <__aeabi_dsub>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4614      	mov	r4, r2
 800261c:	461d      	mov	r5, r3
 800261e:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8002690 <getMoonAscendingNode+0xa0>
 8002622:	ed97 0b00 	vldr	d0, [r7]
 8002626:	f00b f815 	bl	800d654 <pow>
 800262a:	ec51 0b10 	vmov	r0, r1, d0
 800262e:	a320      	add	r3, pc, #128	; (adr r3, 80026b0 <getMoonAscendingNode+0xc0>)
 8002630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002634:	f7fd ffe8 	bl	8000608 <__aeabi_dmul>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4620      	mov	r0, r4
 800263e:	4629      	mov	r1, r5
 8002640:	f7fd fe2c 	bl	800029c <__adddf3>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4614      	mov	r4, r2
 800264a:	461d      	mov	r5, r3
    (pow(julianEphemerisCentury, 3) / 450000);
 800264c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8002698 <getMoonAscendingNode+0xa8>
 8002650:	ed97 0b00 	vldr	d0, [r7]
 8002654:	f00a fffe 	bl	800d654 <pow>
 8002658:	ec51 0b10 	vmov	r0, r1, d0
 800265c:	a316      	add	r3, pc, #88	; (adr r3, 80026b8 <getMoonAscendingNode+0xc8>)
 800265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002662:	f7fe f8fb 	bl	800085c <__aeabi_ddiv>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
    double moon_ascending_node = 125.04452 - (1934.136261 * julianEphemerisCentury) + (0.0020708 * pow(julianEphemerisCentury, 2)) +
 800266a:	4620      	mov	r0, r4
 800266c:	4629      	mov	r1, r5
 800266e:	f7fd fe15 	bl	800029c <__adddf3>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return moon_ascending_node;
 800267a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800267e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002682:	eeb0 0a47 	vmov.f32	s0, s14
 8002686:	eef0 0a67 	vmov.f32	s1, s15
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bdb0      	pop	{r4, r5, r7, pc}
 8002690:	00000000 	.word	0x00000000
 8002694:	40000000 	.word	0x40000000
 8002698:	00000000 	.word	0x00000000
 800269c:	40080000 	.word	0x40080000
 80026a0:	8800eae2 	.word	0x8800eae2
 80026a4:	409e388b 	.word	0x409e388b
 80026a8:	6a6a0126 	.word	0x6a6a0126
 80026ac:	405f42d9 	.word	0x405f42d9
 80026b0:	48d98da5 	.word	0x48d98da5
 80026b4:	3f60f6c8 	.word	0x3f60f6c8
 80026b8:	00000000 	.word	0x00000000
 80026bc:	411b7740 	.word	0x411b7740

080026c0 <getNutation>:

double *getNutation(const int Y[63][5], const double abcd[63][4], double JCE, double x0, double x1, double x2, double x3, double x4)
{
 80026c0:	b5b0      	push	{r4, r5, r7, lr}
 80026c2:	b096      	sub	sp, #88	; 0x58
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6378      	str	r0, [r7, #52]	; 0x34
 80026c8:	6339      	str	r1, [r7, #48]	; 0x30
 80026ca:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80026ce:	ed87 1b08 	vstr	d1, [r7, #32]
 80026d2:	ed87 2b06 	vstr	d2, [r7, #24]
 80026d6:	ed87 3b04 	vstr	d3, [r7, #16]
 80026da:	ed87 4b02 	vstr	d4, [r7, #8]
 80026de:	ed87 5b00 	vstr	d5, [r7]
    double phi = 0;
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    double eps = 0;
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    for (int i = 0; i < 63; i++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	647b      	str	r3, [r7, #68]	; 0x44
 80026fe:	e0e5      	b.n	80028cc <getNutation+0x20c>
    {
        double xySum = x0*Y[i][0] + x1*Y[i][1] + x2*Y[i][2] + x3*Y[i][3] + x4*Y[i][4];
 8002700:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	461a      	mov	r2, r3
 800270c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270e:	4413      	add	r3, r2
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fd ff0e 	bl	8000534 <__aeabi_i2d>
 8002718:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800271c:	f7fd ff74 	bl	8000608 <__aeabi_dmul>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4614      	mov	r4, r2
 8002726:	461d      	mov	r5, r3
 8002728:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	461a      	mov	r2, r3
 8002734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002736:	4413      	add	r3, r2
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4618      	mov	r0, r3
 800273c:	f7fd fefa 	bl	8000534 <__aeabi_i2d>
 8002740:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002744:	f7fd ff60 	bl	8000608 <__aeabi_dmul>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4620      	mov	r0, r4
 800274e:	4629      	mov	r1, r5
 8002750:	f7fd fda4 	bl	800029c <__adddf3>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4614      	mov	r4, r2
 800275a:	461d      	mov	r5, r3
 800275c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	461a      	mov	r2, r3
 8002768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276a:	4413      	add	r3, r2
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fee0 	bl	8000534 <__aeabi_i2d>
 8002774:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002778:	f7fd ff46 	bl	8000608 <__aeabi_dmul>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4620      	mov	r0, r4
 8002782:	4629      	mov	r1, r5
 8002784:	f7fd fd8a 	bl	800029c <__adddf3>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4614      	mov	r4, r2
 800278e:	461d      	mov	r5, r3
 8002790:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	461a      	mov	r2, r3
 800279c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279e:	4413      	add	r3, r2
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fd fec6 	bl	8000534 <__aeabi_i2d>
 80027a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027ac:	f7fd ff2c 	bl	8000608 <__aeabi_dmul>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4620      	mov	r0, r4
 80027b6:	4629      	mov	r1, r5
 80027b8:	f7fd fd70 	bl	800029c <__adddf3>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4614      	mov	r4, r2
 80027c2:	461d      	mov	r5, r3
 80027c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	461a      	mov	r2, r3
 80027d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d2:	4413      	add	r3, r2
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fd feac 	bl	8000534 <__aeabi_i2d>
 80027dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027e0:	f7fd ff12 	bl	8000608 <__aeabi_dmul>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4620      	mov	r0, r4
 80027ea:	4629      	mov	r1, r5
 80027ec:	f7fd fd56 	bl	800029c <__adddf3>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        xySum = (M_PI/180.0) * xySum;
 80027f8:	a34d      	add	r3, pc, #308	; (adr r3, 8002930 <getNutation+0x270>)
 80027fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002802:	f7fd ff01 	bl	8000608 <__aeabi_dmul>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        phi += (abcd[i][0] + (abcd[i][1] * JCE)) * sin(xySum);
 800280e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002810:	015b      	lsls	r3, r3, #5
 8002812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002814:	4413      	add	r3, r2
 8002816:	e9d3 4500 	ldrd	r4, r5, [r3]
 800281a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800281c:	015b      	lsls	r3, r3, #5
 800281e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002820:	4413      	add	r3, r2
 8002822:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002826:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800282a:	f7fd feed 	bl	8000608 <__aeabi_dmul>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4620      	mov	r0, r4
 8002834:	4629      	mov	r1, r5
 8002836:	f7fd fd31 	bl	800029c <__adddf3>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4614      	mov	r4, r2
 8002840:	461d      	mov	r5, r3
 8002842:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002846:	f00b f977 	bl	800db38 <sin>
 800284a:	ec53 2b10 	vmov	r2, r3, d0
 800284e:	4620      	mov	r0, r4
 8002850:	4629      	mov	r1, r5
 8002852:	f7fd fed9 	bl	8000608 <__aeabi_dmul>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800285e:	f7fd fd1d 	bl	800029c <__adddf3>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        eps += (abcd[i][2] + (abcd[i][3] * JCE)) * cos(xySum);
 800286a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800286c:	015b      	lsls	r3, r3, #5
 800286e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002870:	4413      	add	r3, r2
 8002872:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002878:	015b      	lsls	r3, r3, #5
 800287a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800287c:	4413      	add	r3, r2
 800287e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002882:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002886:	f7fd febf 	bl	8000608 <__aeabi_dmul>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4620      	mov	r0, r4
 8002890:	4629      	mov	r1, r5
 8002892:	f7fd fd03 	bl	800029c <__adddf3>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4614      	mov	r4, r2
 800289c:	461d      	mov	r5, r3
 800289e:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80028a2:	f00b f8e9 	bl	800da78 <cos>
 80028a6:	ec53 2b10 	vmov	r2, r3, d0
 80028aa:	4620      	mov	r0, r4
 80028ac:	4629      	mov	r1, r5
 80028ae:	f7fd feab 	bl	8000608 <__aeabi_dmul>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80028ba:	f7fd fcef 	bl	800029c <__adddf3>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    for (int i = 0; i < 63; i++)
 80028c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c8:	3301      	adds	r3, #1
 80028ca:	647b      	str	r3, [r7, #68]	; 0x44
 80028cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ce:	2b3e      	cmp	r3, #62	; 0x3e
 80028d0:	f77f af16 	ble.w	8002700 <getNutation+0x40>
    }
    phi = phi / 36000000;
 80028d4:	a318      	add	r3, pc, #96	; (adr r3, 8002938 <getNutation+0x278>)
 80028d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80028de:	f7fd ffbd 	bl	800085c <__aeabi_ddiv>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    eps = eps / 36000000;
 80028ea:	a313      	add	r3, pc, #76	; (adr r3, 8002938 <getNutation+0x278>)
 80028ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80028f4:	f7fd ffb2 	bl	800085c <__aeabi_ddiv>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    double *nutation = malloc(2 * sizeof(double));
 8002900:	2010      	movs	r0, #16
 8002902:	f007 fef5 	bl	800a6f0 <malloc>
 8002906:	4603      	mov	r3, r0
 8002908:	643b      	str	r3, [r7, #64]	; 0x40
    nutation[0] = phi;
 800290a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800290c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002910:	e9c1 2300 	strd	r2, r3, [r1]
    nutation[1] = eps;
 8002914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002916:	f103 0108 	add.w	r1, r3, #8
 800291a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800291e:	e9c1 2300 	strd	r2, r3, [r1]

    return nutation;
 8002922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8002924:	4618      	mov	r0, r3
 8002926:	3758      	adds	r7, #88	; 0x58
 8002928:	46bd      	mov	sp, r7
 800292a:	bdb0      	pop	{r4, r5, r7, pc}
 800292c:	f3af 8000 	nop.w
 8002930:	a2529d39 	.word	0xa2529d39
 8002934:	3f91df46 	.word	0x3f91df46
 8002938:	00000000 	.word	0x00000000
 800293c:	41812a88 	.word	0x41812a88

08002940 <getMeanObliquity>:

double getMeanObliquity(double U)
{
 8002940:	b5b0      	push	{r4, r5, r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	ed87 0b00 	vstr	d0, [r7]
    double E = 84381.448 - (4680.93 * U) - (1.55 * pow(U, 2)) + (1999.25 * pow(U, 3)) - (51.38 * pow(U, 4)) - (249.67 * pow(U, 5)) -
 800294a:	a389      	add	r3, pc, #548	; (adr r3, 8002b70 <getMeanObliquity+0x230>)
 800294c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002950:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002954:	f7fd fe58 	bl	8000608 <__aeabi_dmul>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	a186      	add	r1, pc, #536	; (adr r1, 8002b78 <getMeanObliquity+0x238>)
 800295e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002962:	f7fd fc99 	bl	8000298 <__aeabi_dsub>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4614      	mov	r4, r2
 800296c:	461d      	mov	r5, r3
 800296e:	ed9f 1b6e 	vldr	d1, [pc, #440]	; 8002b28 <getMeanObliquity+0x1e8>
 8002972:	ed97 0b00 	vldr	d0, [r7]
 8002976:	f00a fe6d 	bl	800d654 <pow>
 800297a:	ec51 0b10 	vmov	r0, r1, d0
 800297e:	a380      	add	r3, pc, #512	; (adr r3, 8002b80 <getMeanObliquity+0x240>)
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	f7fd fe40 	bl	8000608 <__aeabi_dmul>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4620      	mov	r0, r4
 800298e:	4629      	mov	r1, r5
 8002990:	f7fd fc82 	bl	8000298 <__aeabi_dsub>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4614      	mov	r4, r2
 800299a:	461d      	mov	r5, r3
 800299c:	ed9f 1b64 	vldr	d1, [pc, #400]	; 8002b30 <getMeanObliquity+0x1f0>
 80029a0:	ed97 0b00 	vldr	d0, [r7]
 80029a4:	f00a fe56 	bl	800d654 <pow>
 80029a8:	ec51 0b10 	vmov	r0, r1, d0
 80029ac:	a376      	add	r3, pc, #472	; (adr r3, 8002b88 <getMeanObliquity+0x248>)
 80029ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b2:	f7fd fe29 	bl	8000608 <__aeabi_dmul>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4620      	mov	r0, r4
 80029bc:	4629      	mov	r1, r5
 80029be:	f7fd fc6d 	bl	800029c <__adddf3>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4614      	mov	r4, r2
 80029c8:	461d      	mov	r5, r3
 80029ca:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 8002b38 <getMeanObliquity+0x1f8>
 80029ce:	ed97 0b00 	vldr	d0, [r7]
 80029d2:	f00a fe3f 	bl	800d654 <pow>
 80029d6:	ec51 0b10 	vmov	r0, r1, d0
 80029da:	a36d      	add	r3, pc, #436	; (adr r3, 8002b90 <getMeanObliquity+0x250>)
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	f7fd fe12 	bl	8000608 <__aeabi_dmul>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4620      	mov	r0, r4
 80029ea:	4629      	mov	r1, r5
 80029ec:	f7fd fc54 	bl	8000298 <__aeabi_dsub>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4614      	mov	r4, r2
 80029f6:	461d      	mov	r5, r3
 80029f8:	ed9f 1b51 	vldr	d1, [pc, #324]	; 8002b40 <getMeanObliquity+0x200>
 80029fc:	ed97 0b00 	vldr	d0, [r7]
 8002a00:	f00a fe28 	bl	800d654 <pow>
 8002a04:	ec51 0b10 	vmov	r0, r1, d0
 8002a08:	a363      	add	r3, pc, #396	; (adr r3, 8002b98 <getMeanObliquity+0x258>)
 8002a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0e:	f7fd fdfb 	bl	8000608 <__aeabi_dmul>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4620      	mov	r0, r4
 8002a18:	4629      	mov	r1, r5
 8002a1a:	f7fd fc3d 	bl	8000298 <__aeabi_dsub>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4614      	mov	r4, r2
 8002a24:	461d      	mov	r5, r3
    (39.05 * pow(U, 6)) + (7.12 * pow(U, 7)) + (27.87 * pow(U, 8)) + (5.79 * pow(U, 9)) + (2.45 * pow(U, 10));
 8002a26:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8002b48 <getMeanObliquity+0x208>
 8002a2a:	ed97 0b00 	vldr	d0, [r7]
 8002a2e:	f00a fe11 	bl	800d654 <pow>
 8002a32:	ec51 0b10 	vmov	r0, r1, d0
 8002a36:	a35a      	add	r3, pc, #360	; (adr r3, 8002ba0 <getMeanObliquity+0x260>)
 8002a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3c:	f7fd fde4 	bl	8000608 <__aeabi_dmul>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
    double E = 84381.448 - (4680.93 * U) - (1.55 * pow(U, 2)) + (1999.25 * pow(U, 3)) - (51.38 * pow(U, 4)) - (249.67 * pow(U, 5)) -
 8002a44:	4620      	mov	r0, r4
 8002a46:	4629      	mov	r1, r5
 8002a48:	f7fd fc26 	bl	8000298 <__aeabi_dsub>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4614      	mov	r4, r2
 8002a52:	461d      	mov	r5, r3
    (39.05 * pow(U, 6)) + (7.12 * pow(U, 7)) + (27.87 * pow(U, 8)) + (5.79 * pow(U, 9)) + (2.45 * pow(U, 10));
 8002a54:	ed9f 1b3e 	vldr	d1, [pc, #248]	; 8002b50 <getMeanObliquity+0x210>
 8002a58:	ed97 0b00 	vldr	d0, [r7]
 8002a5c:	f00a fdfa 	bl	800d654 <pow>
 8002a60:	ec51 0b10 	vmov	r0, r1, d0
 8002a64:	a350      	add	r3, pc, #320	; (adr r3, 8002ba8 <getMeanObliquity+0x268>)
 8002a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6a:	f7fd fdcd 	bl	8000608 <__aeabi_dmul>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4620      	mov	r0, r4
 8002a74:	4629      	mov	r1, r5
 8002a76:	f7fd fc11 	bl	800029c <__adddf3>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4614      	mov	r4, r2
 8002a80:	461d      	mov	r5, r3
 8002a82:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8002b58 <getMeanObliquity+0x218>
 8002a86:	ed97 0b00 	vldr	d0, [r7]
 8002a8a:	f00a fde3 	bl	800d654 <pow>
 8002a8e:	ec51 0b10 	vmov	r0, r1, d0
 8002a92:	a347      	add	r3, pc, #284	; (adr r3, 8002bb0 <getMeanObliquity+0x270>)
 8002a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a98:	f7fd fdb6 	bl	8000608 <__aeabi_dmul>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	4629      	mov	r1, r5
 8002aa4:	f7fd fbfa 	bl	800029c <__adddf3>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4614      	mov	r4, r2
 8002aae:	461d      	mov	r5, r3
 8002ab0:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8002b60 <getMeanObliquity+0x220>
 8002ab4:	ed97 0b00 	vldr	d0, [r7]
 8002ab8:	f00a fdcc 	bl	800d654 <pow>
 8002abc:	ec51 0b10 	vmov	r0, r1, d0
 8002ac0:	a33d      	add	r3, pc, #244	; (adr r3, 8002bb8 <getMeanObliquity+0x278>)
 8002ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac6:	f7fd fd9f 	bl	8000608 <__aeabi_dmul>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4620      	mov	r0, r4
 8002ad0:	4629      	mov	r1, r5
 8002ad2:	f7fd fbe3 	bl	800029c <__adddf3>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4614      	mov	r4, r2
 8002adc:	461d      	mov	r5, r3
 8002ade:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8002b68 <getMeanObliquity+0x228>
 8002ae2:	ed97 0b00 	vldr	d0, [r7]
 8002ae6:	f00a fdb5 	bl	800d654 <pow>
 8002aea:	ec51 0b10 	vmov	r0, r1, d0
 8002aee:	a334      	add	r3, pc, #208	; (adr r3, 8002bc0 <getMeanObliquity+0x280>)
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	f7fd fd88 	bl	8000608 <__aeabi_dmul>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
    double E = 84381.448 - (4680.93 * U) - (1.55 * pow(U, 2)) + (1999.25 * pow(U, 3)) - (51.38 * pow(U, 4)) - (249.67 * pow(U, 5)) -
 8002afc:	4620      	mov	r0, r4
 8002afe:	4629      	mov	r1, r5
 8002b00:	f7fd fbcc 	bl	800029c <__adddf3>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return E;
 8002b0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b10:	ec43 2b17 	vmov	d7, r2, r3
}
 8002b14:	eeb0 0a47 	vmov.f32	s0, s14
 8002b18:	eef0 0a67 	vmov.f32	s1, s15
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bdb0      	pop	{r4, r5, r7, pc}
 8002b22:	bf00      	nop
 8002b24:	f3af 8000 	nop.w
 8002b28:	00000000 	.word	0x00000000
 8002b2c:	40000000 	.word	0x40000000
 8002b30:	00000000 	.word	0x00000000
 8002b34:	40080000 	.word	0x40080000
 8002b38:	00000000 	.word	0x00000000
 8002b3c:	40100000 	.word	0x40100000
 8002b40:	00000000 	.word	0x00000000
 8002b44:	40140000 	.word	0x40140000
 8002b48:	00000000 	.word	0x00000000
 8002b4c:	40180000 	.word	0x40180000
 8002b50:	00000000 	.word	0x00000000
 8002b54:	401c0000 	.word	0x401c0000
 8002b58:	00000000 	.word	0x00000000
 8002b5c:	40200000 	.word	0x40200000
 8002b60:	00000000 	.word	0x00000000
 8002b64:	40220000 	.word	0x40220000
 8002b68:	00000000 	.word	0x00000000
 8002b6c:	40240000 	.word	0x40240000
 8002b70:	147ae148 	.word	0x147ae148
 8002b74:	40b248ee 	.word	0x40b248ee
 8002b78:	2b020c4a 	.word	0x2b020c4a
 8002b7c:	40f499d7 	.word	0x40f499d7
 8002b80:	cccccccd 	.word	0xcccccccd
 8002b84:	3ff8cccc 	.word	0x3ff8cccc
 8002b88:	00000000 	.word	0x00000000
 8002b8c:	409f3d00 	.word	0x409f3d00
 8002b90:	d70a3d71 	.word	0xd70a3d71
 8002b94:	4049b0a3 	.word	0x4049b0a3
 8002b98:	a3d70a3d 	.word	0xa3d70a3d
 8002b9c:	406f3570 	.word	0x406f3570
 8002ba0:	66666666 	.word	0x66666666
 8002ba4:	40438666 	.word	0x40438666
 8002ba8:	47ae147b 	.word	0x47ae147b
 8002bac:	401c7ae1 	.word	0x401c7ae1
 8002bb0:	51eb851f 	.word	0x51eb851f
 8002bb4:	403bdeb8 	.word	0x403bdeb8
 8002bb8:	c28f5c29 	.word	0xc28f5c29
 8002bbc:	401728f5 	.word	0x401728f5
 8002bc0:	9999999a 	.word	0x9999999a
 8002bc4:	40039999 	.word	0x40039999

08002bc8 <getApparentSiderealTime>:

double getApparentSiderealTime(double JD, double JC, double phi, double eps)
{
 8002bc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bcc:	b08e      	sub	sp, #56	; 0x38
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	ed87 0b06 	vstr	d0, [r7, #24]
 8002bd4:	ed87 1b04 	vstr	d1, [r7, #16]
 8002bd8:	ed87 2b02 	vstr	d2, [r7, #8]
 8002bdc:	ed87 3b00 	vstr	d3, [r7]
    double mean_siderealTime = 280.46061837 + (360.98564736629 * (JD - 2451545)) + (0.000387933 * pow(JC, 2)) - (pow(JC, 3) / 38710000);
 8002be0:	a366      	add	r3, pc, #408	; (adr r3, 8002d7c <getApparentSiderealTime+0x1b4>)
 8002be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002bea:	f7fd fb55 	bl	8000298 <__aeabi_dsub>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	a363      	add	r3, pc, #396	; (adr r3, 8002d84 <getApparentSiderealTime+0x1bc>)
 8002bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfc:	f7fd fd04 	bl	8000608 <__aeabi_dmul>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4610      	mov	r0, r2
 8002c06:	4619      	mov	r1, r3
 8002c08:	a360      	add	r3, pc, #384	; (adr r3, 8002d8c <getApparentSiderealTime+0x1c4>)
 8002c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0e:	f7fd fb45 	bl	800029c <__adddf3>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4690      	mov	r8, r2
 8002c18:	4699      	mov	r9, r3
 8002c1a:	ed9f 1b51 	vldr	d1, [pc, #324]	; 8002d60 <getApparentSiderealTime+0x198>
 8002c1e:	ed97 0b04 	vldr	d0, [r7, #16]
 8002c22:	f00a fd17 	bl	800d654 <pow>
 8002c26:	ec51 0b10 	vmov	r0, r1, d0
 8002c2a:	a35a      	add	r3, pc, #360	; (adr r3, 8002d94 <getApparentSiderealTime+0x1cc>)
 8002c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c30:	f7fd fcea 	bl	8000608 <__aeabi_dmul>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4640      	mov	r0, r8
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	f7fd fb2e 	bl	800029c <__adddf3>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4690      	mov	r8, r2
 8002c46:	4699      	mov	r9, r3
 8002c48:	ed9f 1b47 	vldr	d1, [pc, #284]	; 8002d68 <getApparentSiderealTime+0x1a0>
 8002c4c:	ed97 0b04 	vldr	d0, [r7, #16]
 8002c50:	f00a fd00 	bl	800d654 <pow>
 8002c54:	ec51 0b10 	vmov	r0, r1, d0
 8002c58:	a350      	add	r3, pc, #320	; (adr r3, 8002d9c <getApparentSiderealTime+0x1d4>)
 8002c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5e:	f7fd fdfd 	bl	800085c <__aeabi_ddiv>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4640      	mov	r0, r8
 8002c68:	4649      	mov	r1, r9
 8002c6a:	f7fd fb15 	bl	8000298 <__aeabi_dsub>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    mean_siderealTime = mean_siderealTime / 360;
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	4b3f      	ldr	r3, [pc, #252]	; (8002d78 <getApparentSiderealTime+0x1b0>)
 8002c7c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002c80:	f7fd fdec 	bl	800085c <__aeabi_ddiv>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double fraction = fabs(mean_siderealTime - floor(fabs(mean_siderealTime)));
 8002c8c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8002c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c90:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002c94:	ec45 4b10 	vmov	d0, r4, r5
 8002c98:	f00a ffee 	bl	800dc78 <floor>
 8002c9c:	ec53 2b10 	vmov	r2, r3, d0
 8002ca0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002ca4:	f7fd faf8 	bl	8000298 <__aeabi_dsub>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4611      	mov	r1, r2
 8002cae:	62b9      	str	r1, [r7, #40]	; 0x28
 8002cb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (mean_siderealTime > 0)
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002cc2:	f7fd ff31 	bl	8000b28 <__aeabi_dcmpgt>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00b      	beq.n	8002ce4 <getApparentSiderealTime+0x11c>
    {
        mean_siderealTime = 360 * fraction;
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	4b29      	ldr	r3, [pc, #164]	; (8002d78 <getApparentSiderealTime+0x1b0>)
 8002cd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cd6:	f7fd fc97 	bl	8000608 <__aeabi_dmul>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8002ce2:	e011      	b.n	8002d08 <getApparentSiderealTime+0x140>
    }
    else
    {
        mean_siderealTime = 360 - (360 * fraction);
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	4b23      	ldr	r3, [pc, #140]	; (8002d78 <getApparentSiderealTime+0x1b0>)
 8002cea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cee:	f7fd fc8b 	bl	8000608 <__aeabi_dmul>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	f04f 0000 	mov.w	r0, #0
 8002cfa:	491f      	ldr	r1, [pc, #124]	; (8002d78 <getApparentSiderealTime+0x1b0>)
 8002cfc:	f7fd facc 	bl	8000298 <__aeabi_dsub>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    }

    eps = (M_PI / 180.0) * eps;
 8002d08:	a319      	add	r3, pc, #100	; (adr r3, 8002d70 <getApparentSiderealTime+0x1a8>)
 8002d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d12:	f7fd fc79 	bl	8000608 <__aeabi_dmul>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	e9c7 2300 	strd	r2, r3, [r7]
    double apparent_siderealTime = mean_siderealTime + (phi * cos(eps));
 8002d1e:	ed97 0b00 	vldr	d0, [r7]
 8002d22:	f00a fea9 	bl	800da78 <cos>
 8002d26:	ec51 0b10 	vmov	r0, r1, d0
 8002d2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d2e:	f7fd fc6b 	bl	8000608 <__aeabi_dmul>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002d3a:	f7fd faaf 	bl	800029c <__adddf3>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	e9c7 2308 	strd	r2, r3, [r7, #32]

    return apparent_siderealTime;
 8002d46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d4a:	ec43 2b17 	vmov	d7, r2, r3
}
 8002d4e:	eeb0 0a47 	vmov.f32	s0, s14
 8002d52:	eef0 0a67 	vmov.f32	s1, s15
 8002d56:	3738      	adds	r7, #56	; 0x38
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d5e:	bf00      	nop
 8002d60:	00000000 	.word	0x00000000
 8002d64:	40000000 	.word	0x40000000
 8002d68:	00000000 	.word	0x00000000
 8002d6c:	40080000 	.word	0x40080000
 8002d70:	a2529d39 	.word	0xa2529d39
 8002d74:	3f91df46 	.word	0x3f91df46
 8002d78:	40768000 	.word	0x40768000
 8002d7c:	80000000 	.word	0x80000000
 8002d80:	4142b42c 	.word	0x4142b42c
 8002d84:	362c39aa 	.word	0x362c39aa
 8002d88:	40768fc5 	.word	0x40768fc5
 8002d8c:	b15e3164 	.word	0xb15e3164
 8002d90:	4071875e 	.word	0x4071875e
 8002d94:	8c4c4b7f 	.word	0x8c4c4b7f
 8002d98:	3f396c6f 	.word	0x3f396c6f
 8002d9c:	80000000 	.word	0x80000000
 8002da0:	41827557 	.word	0x41827557
 8002da4:	00000000 	.word	0x00000000

08002da8 <getSunRightAscension>:

double getSunRightAscension(double lambda, double eps, double beta)
{
 8002da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dac:	ed2d 8b02 	vpush	{d8}
 8002db0:	b08a      	sub	sp, #40	; 0x28
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	ed87 0b04 	vstr	d0, [r7, #16]
 8002db8:	ed87 1b02 	vstr	d1, [r7, #8]
 8002dbc:	ed87 2b00 	vstr	d2, [r7]
    lambda = (M_PI / 180.0) * lambda;
 8002dc0:	a36b      	add	r3, pc, #428	; (adr r3, 8002f70 <getSunRightAscension+0x1c8>)
 8002dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002dca:	f7fd fc1d 	bl	8000608 <__aeabi_dmul>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    eps = (M_PI / 180.0) * eps;
 8002dd6:	a366      	add	r3, pc, #408	; (adr r3, 8002f70 <getSunRightAscension+0x1c8>)
 8002dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ddc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002de0:	f7fd fc12 	bl	8000608 <__aeabi_dmul>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    beta = (M_PI / 180.0) * beta;
 8002dec:	a360      	add	r3, pc, #384	; (adr r3, 8002f70 <getSunRightAscension+0x1c8>)
 8002dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002df6:	f7fd fc07 	bl	8000608 <__aeabi_dmul>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	e9c7 2300 	strd	r2, r3, [r7]

    double alpha = atan2((sin(lambda)*cos(eps)) - (tan(beta)*sin(eps)), cos(lambda));
 8002e02:	ed97 0b04 	vldr	d0, [r7, #16]
 8002e06:	f00a fe97 	bl	800db38 <sin>
 8002e0a:	ec59 8b10 	vmov	r8, r9, d0
 8002e0e:	ed97 0b02 	vldr	d0, [r7, #8]
 8002e12:	f00a fe31 	bl	800da78 <cos>
 8002e16:	ec53 2b10 	vmov	r2, r3, d0
 8002e1a:	4640      	mov	r0, r8
 8002e1c:	4649      	mov	r1, r9
 8002e1e:	f7fd fbf3 	bl	8000608 <__aeabi_dmul>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4690      	mov	r8, r2
 8002e28:	4699      	mov	r9, r3
 8002e2a:	ed97 0b00 	vldr	d0, [r7]
 8002e2e:	f00a fedb 	bl	800dbe8 <tan>
 8002e32:	ec5b ab10 	vmov	sl, fp, d0
 8002e36:	ed97 0b02 	vldr	d0, [r7, #8]
 8002e3a:	f00a fe7d 	bl	800db38 <sin>
 8002e3e:	ec53 2b10 	vmov	r2, r3, d0
 8002e42:	4650      	mov	r0, sl
 8002e44:	4659      	mov	r1, fp
 8002e46:	f7fd fbdf 	bl	8000608 <__aeabi_dmul>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4640      	mov	r0, r8
 8002e50:	4649      	mov	r1, r9
 8002e52:	f7fd fa21 	bl	8000298 <__aeabi_dsub>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	ec43 2b18 	vmov	d8, r2, r3
 8002e5e:	ed97 0b04 	vldr	d0, [r7, #16]
 8002e62:	f00a fe09 	bl	800da78 <cos>
 8002e66:	eeb0 7a40 	vmov.f32	s14, s0
 8002e6a:	eef0 7a60 	vmov.f32	s15, s1
 8002e6e:	eeb0 1a47 	vmov.f32	s2, s14
 8002e72:	eef0 1a67 	vmov.f32	s3, s15
 8002e76:	eeb0 0a48 	vmov.f32	s0, s16
 8002e7a:	eef0 0a68 	vmov.f32	s1, s17
 8002e7e:	f00a fbe7 	bl	800d650 <atan2>
 8002e82:	ed87 0b08 	vstr	d0, [r7, #32]
    alpha = (alpha * 180) / M_PI;
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	4b37      	ldr	r3, [pc, #220]	; (8002f68 <getSunRightAscension+0x1c0>)
 8002e8c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e90:	f7fd fbba 	bl	8000608 <__aeabi_dmul>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4610      	mov	r0, r2
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	a330      	add	r3, pc, #192	; (adr r3, 8002f60 <getSunRightAscension+0x1b8>)
 8002e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea2:	f7fd fcdb 	bl	800085c <__aeabi_ddiv>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	e9c7 2308 	strd	r2, r3, [r7, #32]

    alpha = alpha / 360;
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	4b2e      	ldr	r3, [pc, #184]	; (8002f6c <getSunRightAscension+0x1c4>)
 8002eb4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002eb8:	f7fd fcd0 	bl	800085c <__aeabi_ddiv>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double fraction = fabs(alpha - floor(fabs(alpha)));
 8002ec4:	6a3c      	ldr	r4, [r7, #32]
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002ecc:	ec45 4b10 	vmov	d0, r4, r5
 8002ed0:	f00a fed2 	bl	800dc78 <floor>
 8002ed4:	ec53 2b10 	vmov	r2, r3, d0
 8002ed8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002edc:	f7fd f9dc 	bl	8000298 <__aeabi_dsub>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	61b9      	str	r1, [r7, #24]
 8002ee8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002eec:	61fb      	str	r3, [r7, #28]
    if (alpha > 0)
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002efa:	f7fd fe15 	bl	8000b28 <__aeabi_dcmpgt>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00b      	beq.n	8002f1c <getSunRightAscension+0x174>
    {
        alpha = 360 * fraction;
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	4b18      	ldr	r3, [pc, #96]	; (8002f6c <getSunRightAscension+0x1c4>)
 8002f0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f0e:	f7fd fb7b 	bl	8000608 <__aeabi_dmul>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002f1a:	e011      	b.n	8002f40 <getSunRightAscension+0x198>
    }
    else
    {
        alpha = 360 - (360 * fraction);
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <getSunRightAscension+0x1c4>)
 8002f22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f26:	f7fd fb6f 	bl	8000608 <__aeabi_dmul>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	f04f 0000 	mov.w	r0, #0
 8002f32:	490e      	ldr	r1, [pc, #56]	; (8002f6c <getSunRightAscension+0x1c4>)
 8002f34:	f7fd f9b0 	bl	8000298 <__aeabi_dsub>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }

    return alpha;
 8002f40:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f44:	ec43 2b17 	vmov	d7, r2, r3
}
 8002f48:	eeb0 0a47 	vmov.f32	s0, s14
 8002f4c:	eef0 0a67 	vmov.f32	s1, s15
 8002f50:	3728      	adds	r7, #40	; 0x28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	ecbd 8b02 	vpop	{d8}
 8002f58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f5c:	f3af 8000 	nop.w
 8002f60:	54442d18 	.word	0x54442d18
 8002f64:	400921fb 	.word	0x400921fb
 8002f68:	40668000 	.word	0x40668000
 8002f6c:	40768000 	.word	0x40768000
 8002f70:	a2529d39 	.word	0xa2529d39
 8002f74:	3f91df46 	.word	0x3f91df46

08002f78 <getSunDeclination>:


double getSunDeclination(double lambda, double eps, double beta)
{
 8002f78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f7c:	b088      	sub	sp, #32
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	ed87 0b04 	vstr	d0, [r7, #16]
 8002f84:	ed87 1b02 	vstr	d1, [r7, #8]
 8002f88:	ed87 2b00 	vstr	d2, [r7]
    lambda = (M_PI / 180.0) * lambda;
 8002f8c:	a345      	add	r3, pc, #276	; (adr r3, 80030a4 <getSunDeclination+0x12c>)
 8002f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f96:	f7fd fb37 	bl	8000608 <__aeabi_dmul>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    eps = (M_PI / 180.0) * eps;
 8002fa2:	a340      	add	r3, pc, #256	; (adr r3, 80030a4 <getSunDeclination+0x12c>)
 8002fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fac:	f7fd fb2c 	bl	8000608 <__aeabi_dmul>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    beta = (M_PI / 180.0) * beta;
 8002fb8:	a33a      	add	r3, pc, #232	; (adr r3, 80030a4 <getSunDeclination+0x12c>)
 8002fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fc2:	f7fd fb21 	bl	8000608 <__aeabi_dmul>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	e9c7 2300 	strd	r2, r3, [r7]

    double delta = asin((sin(beta)*cos(eps)) + (cos(beta)*sin(eps)*sin(lambda)));
 8002fce:	ed97 0b00 	vldr	d0, [r7]
 8002fd2:	f00a fdb1 	bl	800db38 <sin>
 8002fd6:	ec55 4b10 	vmov	r4, r5, d0
 8002fda:	ed97 0b02 	vldr	d0, [r7, #8]
 8002fde:	f00a fd4b 	bl	800da78 <cos>
 8002fe2:	ec53 2b10 	vmov	r2, r3, d0
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	4629      	mov	r1, r5
 8002fea:	f7fd fb0d 	bl	8000608 <__aeabi_dmul>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4614      	mov	r4, r2
 8002ff4:	461d      	mov	r5, r3
 8002ff6:	ed97 0b00 	vldr	d0, [r7]
 8002ffa:	f00a fd3d 	bl	800da78 <cos>
 8002ffe:	ec59 8b10 	vmov	r8, r9, d0
 8003002:	ed97 0b02 	vldr	d0, [r7, #8]
 8003006:	f00a fd97 	bl	800db38 <sin>
 800300a:	ec53 2b10 	vmov	r2, r3, d0
 800300e:	4640      	mov	r0, r8
 8003010:	4649      	mov	r1, r9
 8003012:	f7fd faf9 	bl	8000608 <__aeabi_dmul>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4690      	mov	r8, r2
 800301c:	4699      	mov	r9, r3
 800301e:	ed97 0b04 	vldr	d0, [r7, #16]
 8003022:	f00a fd89 	bl	800db38 <sin>
 8003026:	ec53 2b10 	vmov	r2, r3, d0
 800302a:	4640      	mov	r0, r8
 800302c:	4649      	mov	r1, r9
 800302e:	f7fd faeb 	bl	8000608 <__aeabi_dmul>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4620      	mov	r0, r4
 8003038:	4629      	mov	r1, r5
 800303a:	f7fd f92f 	bl	800029c <__adddf3>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	ec43 2b17 	vmov	d7, r2, r3
 8003046:	eeb0 0a47 	vmov.f32	s0, s14
 800304a:	eef0 0a67 	vmov.f32	s1, s15
 800304e:	f00a facb 	bl	800d5e8 <asin>
 8003052:	ed87 0b06 	vstr	d0, [r7, #24]
    delta = (delta * 180) / M_PI;
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <getSunDeclination+0x128>)
 800305c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003060:	f7fd fad2 	bl	8000608 <__aeabi_dmul>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4610      	mov	r0, r2
 800306a:	4619      	mov	r1, r3
 800306c:	a30a      	add	r3, pc, #40	; (adr r3, 8003098 <getSunDeclination+0x120>)
 800306e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003072:	f7fd fbf3 	bl	800085c <__aeabi_ddiv>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return delta;
 800307e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003082:	ec43 2b17 	vmov	d7, r2, r3
}
 8003086:	eeb0 0a47 	vmov.f32	s0, s14
 800308a:	eef0 0a67 	vmov.f32	s1, s15
 800308e:	3720      	adds	r7, #32
 8003090:	46bd      	mov	sp, r7
 8003092:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003096:	bf00      	nop
 8003098:	54442d18 	.word	0x54442d18
 800309c:	400921fb 	.word	0x400921fb
 80030a0:	40668000 	.word	0x40668000
 80030a4:	a2529d39 	.word	0xa2529d39
 80030a8:	3f91df46 	.word	0x3f91df46

080030ac <getObserverLocalHourAngle>:

double getObserverLocalHourAngle(double v, double sigma, double alpha)
{
 80030ac:	b5b0      	push	{r4, r5, r7, lr}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	ed87 0b04 	vstr	d0, [r7, #16]
 80030b6:	ed87 1b02 	vstr	d1, [r7, #8]
 80030ba:	ed87 2b00 	vstr	d2, [r7]
    double H = v + sigma - alpha;
 80030be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030c6:	f7fd f8e9 	bl	800029c <__adddf3>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4610      	mov	r0, r2
 80030d0:	4619      	mov	r1, r3
 80030d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030d6:	f7fd f8df 	bl	8000298 <__aeabi_dsub>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	e9c7 2308 	strd	r2, r3, [r7, #32]
    H = H / 360;
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	4b29      	ldr	r3, [pc, #164]	; (800318c <getObserverLocalHourAngle+0xe0>)
 80030e8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80030ec:	f7fd fbb6 	bl	800085c <__aeabi_ddiv>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double fraction = fabs(H - floor(fabs(H)));
 80030f8:	6a3c      	ldr	r4, [r7, #32]
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003100:	ec45 4b10 	vmov	d0, r4, r5
 8003104:	f00a fdb8 	bl	800dc78 <floor>
 8003108:	ec53 2b10 	vmov	r2, r3, d0
 800310c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003110:	f7fd f8c2 	bl	8000298 <__aeabi_dsub>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4611      	mov	r1, r2
 800311a:	61b9      	str	r1, [r7, #24]
 800311c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003120:	61fb      	str	r3, [r7, #28]
    if (H > 0)
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800312e:	f7fd fcfb 	bl	8000b28 <__aeabi_dcmpgt>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00b      	beq.n	8003150 <getObserverLocalHourAngle+0xa4>
    {
        H = 360 * fraction;
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	4b13      	ldr	r3, [pc, #76]	; (800318c <getObserverLocalHourAngle+0xe0>)
 800313e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003142:	f7fd fa61 	bl	8000608 <__aeabi_dmul>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800314e:	e011      	b.n	8003174 <getObserverLocalHourAngle+0xc8>
    }
    else
    {
        H = 360 - (360 * fraction);
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	4b0d      	ldr	r3, [pc, #52]	; (800318c <getObserverLocalHourAngle+0xe0>)
 8003156:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800315a:	f7fd fa55 	bl	8000608 <__aeabi_dmul>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	f04f 0000 	mov.w	r0, #0
 8003166:	4909      	ldr	r1, [pc, #36]	; (800318c <getObserverLocalHourAngle+0xe0>)
 8003168:	f7fd f896 	bl	8000298 <__aeabi_dsub>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }

    return H;
 8003174:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003178:	ec43 2b17 	vmov	d7, r2, r3
}
 800317c:	eeb0 0a47 	vmov.f32	s0, s14
 8003180:	eef0 0a67 	vmov.f32	s1, s15
 8003184:	3728      	adds	r7, #40	; 0x28
 8003186:	46bd      	mov	sp, r7
 8003188:	bdb0      	pop	{r4, r5, r7, pc}
 800318a:	bf00      	nop
 800318c:	40768000 	.word	0x40768000

08003190 <getEquatorialHorizontalParallax>:

double getEquatorialHorizontalParallax(double R)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	ed87 0b00 	vstr	d0, [r7]
    double parallax = 8.794 / (3600 * R);
 800319a:	a30f      	add	r3, pc, #60	; (adr r3, 80031d8 <getEquatorialHorizontalParallax+0x48>)
 800319c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031a4:	f7fd fa30 	bl	8000608 <__aeabi_dmul>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	a10c      	add	r1, pc, #48	; (adr r1, 80031e0 <getEquatorialHorizontalParallax+0x50>)
 80031ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031b2:	f7fd fb53 	bl	800085c <__aeabi_ddiv>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return parallax;
 80031be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80031c6:	eeb0 0a47 	vmov.f32	s0, s14
 80031ca:	eef0 0a67 	vmov.f32	s1, s15
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	f3af 8000 	nop.w
 80031d8:	00000000 	.word	0x00000000
 80031dc:	40ac2000 	.word	0x40ac2000
 80031e0:	2b020c4a 	.word	0x2b020c4a
 80031e4:	40219687 	.word	0x40219687

080031e8 <helper_getU>:

double helper_getU(double latitude)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	ed87 0b00 	vstr	d0, [r7]
    double u = atan(0.99664719 * tan(latitude));
 80031f2:	ed97 0b00 	vldr	d0, [r7]
 80031f6:	f00a fcf7 	bl	800dbe8 <tan>
 80031fa:	ec51 0b10 	vmov	r0, r1, d0
 80031fe:	a30e      	add	r3, pc, #56	; (adr r3, 8003238 <helper_getU+0x50>)
 8003200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003204:	f7fd fa00 	bl	8000608 <__aeabi_dmul>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	ec43 2b17 	vmov	d7, r2, r3
 8003210:	eeb0 0a47 	vmov.f32	s0, s14
 8003214:	eef0 0a67 	vmov.f32	s1, s15
 8003218:	f00a fa8e 	bl	800d738 <atan>
 800321c:	ed87 0b02 	vstr	d0, [r7, #8]

    return u;
 8003220:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003224:	ec43 2b17 	vmov	d7, r2, r3
}
 8003228:	eeb0 0a47 	vmov.f32	s0, s14
 800322c:	eef0 0a67 	vmov.f32	s1, s15
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	a5d668d8 	.word	0xa5d668d8
 800323c:	3fefe488 	.word	0x3fefe488

08003240 <helper_getX>:

double helper_getX(double u, double E, double latitude)
{
 8003240:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003244:	b088      	sub	sp, #32
 8003246:	af00      	add	r7, sp, #0
 8003248:	ed87 0b04 	vstr	d0, [r7, #16]
 800324c:	ed87 1b02 	vstr	d1, [r7, #8]
 8003250:	ed87 2b00 	vstr	d2, [r7]
    u = (M_PI / 180) * u;
 8003254:	a324      	add	r3, pc, #144	; (adr r3, 80032e8 <helper_getX+0xa8>)
 8003256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800325e:	f7fd f9d3 	bl	8000608 <__aeabi_dmul>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	e9c7 2304 	strd	r2, r3, [r7, #16]
    latitude = (M_PI /  180) * latitude;
 800326a:	a31f      	add	r3, pc, #124	; (adr r3, 80032e8 <helper_getX+0xa8>)
 800326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003270:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003274:	f7fd f9c8 	bl	8000608 <__aeabi_dmul>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	e9c7 2300 	strd	r2, r3, [r7]

    double x = cos(u) + (E / 6378140)*cos(latitude);
 8003280:	ed97 0b04 	vldr	d0, [r7, #16]
 8003284:	f00a fbf8 	bl	800da78 <cos>
 8003288:	ec59 8b10 	vmov	r8, r9, d0
 800328c:	a318      	add	r3, pc, #96	; (adr r3, 80032f0 <helper_getX+0xb0>)
 800328e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003292:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003296:	f7fd fae1 	bl	800085c <__aeabi_ddiv>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4614      	mov	r4, r2
 80032a0:	461d      	mov	r5, r3
 80032a2:	ed97 0b00 	vldr	d0, [r7]
 80032a6:	f00a fbe7 	bl	800da78 <cos>
 80032aa:	ec53 2b10 	vmov	r2, r3, d0
 80032ae:	4620      	mov	r0, r4
 80032b0:	4629      	mov	r1, r5
 80032b2:	f7fd f9a9 	bl	8000608 <__aeabi_dmul>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	4640      	mov	r0, r8
 80032bc:	4649      	mov	r1, r9
 80032be:	f7fc ffed 	bl	800029c <__adddf3>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return x;
 80032ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032ce:	ec43 2b17 	vmov	d7, r2, r3
}
 80032d2:	eeb0 0a47 	vmov.f32	s0, s14
 80032d6:	eef0 0a67 	vmov.f32	s1, s15
 80032da:	3720      	adds	r7, #32
 80032dc:	46bd      	mov	sp, r7
 80032de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032e2:	bf00      	nop
 80032e4:	f3af 8000 	nop.w
 80032e8:	a2529d39 	.word	0xa2529d39
 80032ec:	3f91df46 	.word	0x3f91df46
 80032f0:	00000000 	.word	0x00000000
 80032f4:	415854a7 	.word	0x415854a7

080032f8 <helper_getY>:

double helper_getY(double u, double E, double latitude)
{
 80032f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032fc:	b088      	sub	sp, #32
 80032fe:	af00      	add	r7, sp, #0
 8003300:	ed87 0b04 	vstr	d0, [r7, #16]
 8003304:	ed87 1b02 	vstr	d1, [r7, #8]
 8003308:	ed87 2b00 	vstr	d2, [r7]
    u = (M_PI / 180) * u;
 800330c:	a328      	add	r3, pc, #160	; (adr r3, 80033b0 <helper_getY+0xb8>)
 800330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003312:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003316:	f7fd f977 	bl	8000608 <__aeabi_dmul>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    latitude = (M_PI /  180) * latitude;
 8003322:	a323      	add	r3, pc, #140	; (adr r3, 80033b0 <helper_getY+0xb8>)
 8003324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003328:	e9d7 0100 	ldrd	r0, r1, [r7]
 800332c:	f7fd f96c 	bl	8000608 <__aeabi_dmul>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	e9c7 2300 	strd	r2, r3, [r7]

    double y = 0.99664719*sin(u) + (E / 6378140)*sin(latitude);
 8003338:	ed97 0b04 	vldr	d0, [r7, #16]
 800333c:	f00a fbfc 	bl	800db38 <sin>
 8003340:	ec51 0b10 	vmov	r0, r1, d0
 8003344:	a31c      	add	r3, pc, #112	; (adr r3, 80033b8 <helper_getY+0xc0>)
 8003346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334a:	f7fd f95d 	bl	8000608 <__aeabi_dmul>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	4614      	mov	r4, r2
 8003354:	461d      	mov	r5, r3
 8003356:	a31a      	add	r3, pc, #104	; (adr r3, 80033c0 <helper_getY+0xc8>)
 8003358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003360:	f7fd fa7c 	bl	800085c <__aeabi_ddiv>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4690      	mov	r8, r2
 800336a:	4699      	mov	r9, r3
 800336c:	ed97 0b00 	vldr	d0, [r7]
 8003370:	f00a fbe2 	bl	800db38 <sin>
 8003374:	ec53 2b10 	vmov	r2, r3, d0
 8003378:	4640      	mov	r0, r8
 800337a:	4649      	mov	r1, r9
 800337c:	f7fd f944 	bl	8000608 <__aeabi_dmul>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4620      	mov	r0, r4
 8003386:	4629      	mov	r1, r5
 8003388:	f7fc ff88 	bl	800029c <__adddf3>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return y;
 8003394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003398:	ec43 2b17 	vmov	d7, r2, r3
}
 800339c:	eeb0 0a47 	vmov.f32	s0, s14
 80033a0:	eef0 0a67 	vmov.f32	s1, s15
 80033a4:	3720      	adds	r7, #32
 80033a6:	46bd      	mov	sp, r7
 80033a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033ac:	f3af 8000 	nop.w
 80033b0:	a2529d39 	.word	0xa2529d39
 80033b4:	3f91df46 	.word	0x3f91df46
 80033b8:	a5d668d8 	.word	0xa5d668d8
 80033bc:	3fefe488 	.word	0x3fefe488
 80033c0:	00000000 	.word	0x00000000
 80033c4:	415854a7 	.word	0x415854a7

080033c8 <getParallax_SunRightAscension>:

double getParallax_SunRightAscension(double x, double eqHorizontal_parallax, double H, double delta)
{
 80033c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033cc:	b08e      	sub	sp, #56	; 0x38
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	ed87 0b06 	vstr	d0, [r7, #24]
 80033d4:	ed87 1b04 	vstr	d1, [r7, #16]
 80033d8:	ed87 2b02 	vstr	d2, [r7, #8]
 80033dc:	ed87 3b00 	vstr	d3, [r7]
    x = (M_PI / 180) * x;
 80033e0:	a350      	add	r3, pc, #320	; (adr r3, 8003524 <getParallax_SunRightAscension+0x15c>)
 80033e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033ea:	f7fd f90d 	bl	8000608 <__aeabi_dmul>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    eqHorizontal_parallax = (M_PI / 180) * eqHorizontal_parallax;
 80033f6:	a34b      	add	r3, pc, #300	; (adr r3, 8003524 <getParallax_SunRightAscension+0x15c>)
 80033f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003400:	f7fd f902 	bl	8000608 <__aeabi_dmul>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	e9c7 2304 	strd	r2, r3, [r7, #16]
    H = (M_PI / 180) * H;
 800340c:	a345      	add	r3, pc, #276	; (adr r3, 8003524 <getParallax_SunRightAscension+0x15c>)
 800340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003412:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003416:	f7fd f8f7 	bl	8000608 <__aeabi_dmul>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    delta = (M_PI / 180) * delta;
 8003422:	a340      	add	r3, pc, #256	; (adr r3, 8003524 <getParallax_SunRightAscension+0x15c>)
 8003424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003428:	e9d7 0100 	ldrd	r0, r1, [r7]
 800342c:	f7fd f8ec 	bl	8000608 <__aeabi_dmul>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	e9c7 2300 	strd	r2, r3, [r7]

    double term1 = -x * sin(eqHorizontal_parallax) * sin(H);
 8003438:	69bc      	ldr	r4, [r7, #24]
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003440:	ed97 0b04 	vldr	d0, [r7, #16]
 8003444:	f00a fb78 	bl	800db38 <sin>
 8003448:	ec53 2b10 	vmov	r2, r3, d0
 800344c:	4620      	mov	r0, r4
 800344e:	4629      	mov	r1, r5
 8003450:	f7fd f8da 	bl	8000608 <__aeabi_dmul>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4614      	mov	r4, r2
 800345a:	461d      	mov	r5, r3
 800345c:	ed97 0b02 	vldr	d0, [r7, #8]
 8003460:	f00a fb6a 	bl	800db38 <sin>
 8003464:	ec53 2b10 	vmov	r2, r3, d0
 8003468:	4620      	mov	r0, r4
 800346a:	4629      	mov	r1, r5
 800346c:	f7fd f8cc 	bl	8000608 <__aeabi_dmul>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double term2 = cos(delta) - (x * sin(eqHorizontal_parallax) * cos(H));
 8003478:	ed97 0b00 	vldr	d0, [r7]
 800347c:	f00a fafc 	bl	800da78 <cos>
 8003480:	ec59 8b10 	vmov	r8, r9, d0
 8003484:	ed97 0b04 	vldr	d0, [r7, #16]
 8003488:	f00a fb56 	bl	800db38 <sin>
 800348c:	ec51 0b10 	vmov	r0, r1, d0
 8003490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003494:	f7fd f8b8 	bl	8000608 <__aeabi_dmul>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4614      	mov	r4, r2
 800349e:	461d      	mov	r5, r3
 80034a0:	ed97 0b02 	vldr	d0, [r7, #8]
 80034a4:	f00a fae8 	bl	800da78 <cos>
 80034a8:	ec53 2b10 	vmov	r2, r3, d0
 80034ac:	4620      	mov	r0, r4
 80034ae:	4629      	mov	r1, r5
 80034b0:	f7fd f8aa 	bl	8000608 <__aeabi_dmul>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4640      	mov	r0, r8
 80034ba:	4649      	mov	r1, r9
 80034bc:	f7fc feec 	bl	8000298 <__aeabi_dsub>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double parallax = atan2(term1, term2);
 80034c8:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 80034cc:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80034d0:	f00a f8be 	bl	800d650 <atan2>
 80034d4:	ed87 0b08 	vstr	d0, [r7, #32]
    parallax = (parallax * 180) / M_PI;
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	4b10      	ldr	r3, [pc, #64]	; (8003520 <getParallax_SunRightAscension+0x158>)
 80034de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80034e2:	f7fd f891 	bl	8000608 <__aeabi_dmul>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4610      	mov	r0, r2
 80034ec:	4619      	mov	r1, r3
 80034ee:	a30a      	add	r3, pc, #40	; (adr r3, 8003518 <getParallax_SunRightAscension+0x150>)
 80034f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f4:	f7fd f9b2 	bl	800085c <__aeabi_ddiv>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	e9c7 2308 	strd	r2, r3, [r7, #32]

    return parallax;
 8003500:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003504:	ec43 2b17 	vmov	d7, r2, r3
}
 8003508:	eeb0 0a47 	vmov.f32	s0, s14
 800350c:	eef0 0a67 	vmov.f32	s1, s15
 8003510:	3738      	adds	r7, #56	; 0x38
 8003512:	46bd      	mov	sp, r7
 8003514:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003518:	54442d18 	.word	0x54442d18
 800351c:	400921fb 	.word	0x400921fb
 8003520:	40668000 	.word	0x40668000
 8003524:	a2529d39 	.word	0xa2529d39
 8003528:	3f91df46 	.word	0x3f91df46

0800352c <getTopocentricSunRightAscension>:

double getTopocentricSunRightAscension(double alpha, double parallax)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	ed87 0b02 	vstr	d0, [r7, #8]
 8003536:	ed87 1b00 	vstr	d1, [r7]
    double alpha_dash = alpha + parallax;
 800353a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800353e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003542:	f7fc feab 	bl	800029c <__adddf3>
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return alpha_dash;
 800354e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003552:	ec43 2b17 	vmov	d7, r2, r3
}
 8003556:	eeb0 0a47 	vmov.f32	s0, s14
 800355a:	eef0 0a67 	vmov.f32	s1, s15
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	0000      	movs	r0, r0
	...

08003568 <getTopocentricSunDeclination>:

double getTopocentricSunDeclination(double delta, double y, double x, double eqHorizontal_parallax, double delta_alpha, double H)
{
 8003568:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800356c:	b092      	sub	sp, #72	; 0x48
 800356e:	af00      	add	r7, sp, #0
 8003570:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8003574:	ed87 1b08 	vstr	d1, [r7, #32]
 8003578:	ed87 2b06 	vstr	d2, [r7, #24]
 800357c:	ed87 3b04 	vstr	d3, [r7, #16]
 8003580:	ed87 4b02 	vstr	d4, [r7, #8]
 8003584:	ed87 5b00 	vstr	d5, [r7]
    x = (M_PI / 180) * x;
 8003588:	a360      	add	r3, pc, #384	; (adr r3, 800370c <getTopocentricSunDeclination+0x1a4>)
 800358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003592:	f7fd f839 	bl	8000608 <__aeabi_dmul>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    y = (M_PI / 180) * y;
 800359e:	a35b      	add	r3, pc, #364	; (adr r3, 800370c <getTopocentricSunDeclination+0x1a4>)
 80035a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80035a8:	f7fd f82e 	bl	8000608 <__aeabi_dmul>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    eqHorizontal_parallax = (M_PI / 180) * eqHorizontal_parallax;
 80035b4:	a355      	add	r3, pc, #340	; (adr r3, 800370c <getTopocentricSunDeclination+0x1a4>)
 80035b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035be:	f7fd f823 	bl	8000608 <__aeabi_dmul>
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    H = (M_PI / 180) * H;
 80035ca:	a350      	add	r3, pc, #320	; (adr r3, 800370c <getTopocentricSunDeclination+0x1a4>)
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035d4:	f7fd f818 	bl	8000608 <__aeabi_dmul>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	e9c7 2300 	strd	r2, r3, [r7]
    delta = (M_PI / 180) * delta;
 80035e0:	a34a      	add	r3, pc, #296	; (adr r3, 800370c <getTopocentricSunDeclination+0x1a4>)
 80035e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035ea:	f7fd f80d 	bl	8000608 <__aeabi_dmul>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    delta_alpha = (M_PI / 180) * delta_alpha;
 80035f6:	a345      	add	r3, pc, #276	; (adr r3, 800370c <getTopocentricSunDeclination+0x1a4>)
 80035f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003600:	f7fd f802 	bl	8000608 <__aeabi_dmul>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	e9c7 2302 	strd	r2, r3, [r7, #8]

    double term1 = (sin(delta) - (y*sin(eqHorizontal_parallax))) * cos(delta_alpha);
 800360c:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8003610:	f00a fa92 	bl	800db38 <sin>
 8003614:	ec55 4b10 	vmov	r4, r5, d0
 8003618:	ed97 0b04 	vldr	d0, [r7, #16]
 800361c:	f00a fa8c 	bl	800db38 <sin>
 8003620:	ec51 0b10 	vmov	r0, r1, d0
 8003624:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003628:	f7fc ffee 	bl	8000608 <__aeabi_dmul>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4620      	mov	r0, r4
 8003632:	4629      	mov	r1, r5
 8003634:	f7fc fe30 	bl	8000298 <__aeabi_dsub>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4614      	mov	r4, r2
 800363e:	461d      	mov	r5, r3
 8003640:	ed97 0b02 	vldr	d0, [r7, #8]
 8003644:	f00a fa18 	bl	800da78 <cos>
 8003648:	ec53 2b10 	vmov	r2, r3, d0
 800364c:	4620      	mov	r0, r4
 800364e:	4629      	mov	r1, r5
 8003650:	f7fc ffda 	bl	8000608 <__aeabi_dmul>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double term2 = cos(delta) - (x * sin(eqHorizontal_parallax) * cos(H));
 800365c:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8003660:	f00a fa0a 	bl	800da78 <cos>
 8003664:	ec59 8b10 	vmov	r8, r9, d0
 8003668:	ed97 0b04 	vldr	d0, [r7, #16]
 800366c:	f00a fa64 	bl	800db38 <sin>
 8003670:	ec51 0b10 	vmov	r0, r1, d0
 8003674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003678:	f7fc ffc6 	bl	8000608 <__aeabi_dmul>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4614      	mov	r4, r2
 8003682:	461d      	mov	r5, r3
 8003684:	ed97 0b00 	vldr	d0, [r7]
 8003688:	f00a f9f6 	bl	800da78 <cos>
 800368c:	ec53 2b10 	vmov	r2, r3, d0
 8003690:	4620      	mov	r0, r4
 8003692:	4629      	mov	r1, r5
 8003694:	f7fc ffb8 	bl	8000608 <__aeabi_dmul>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4640      	mov	r0, r8
 800369e:	4649      	mov	r1, r9
 80036a0:	f7fc fdfa 	bl	8000298 <__aeabi_dsub>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

    double delta_dash = atan2(term1, term2);
 80036ac:	ed97 1b0e 	vldr	d1, [r7, #56]	; 0x38
 80036b0:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80036b4:	f009 ffcc 	bl	800d650 <atan2>
 80036b8:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
    delta_dash = (delta_dash * 180) / M_PI;
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	4b11      	ldr	r3, [pc, #68]	; (8003708 <getTopocentricSunDeclination+0x1a0>)
 80036c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80036c6:	f7fc ff9f 	bl	8000608 <__aeabi_dmul>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4610      	mov	r0, r2
 80036d0:	4619      	mov	r1, r3
 80036d2:	a30b      	add	r3, pc, #44	; (adr r3, 8003700 <getTopocentricSunDeclination+0x198>)
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	f7fd f8c0 	bl	800085c <__aeabi_ddiv>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    return delta_dash;
 80036e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80036e8:	ec43 2b17 	vmov	d7, r2, r3
}
 80036ec:	eeb0 0a47 	vmov.f32	s0, s14
 80036f0:	eef0 0a67 	vmov.f32	s1, s15
 80036f4:	3748      	adds	r7, #72	; 0x48
 80036f6:	46bd      	mov	sp, r7
 80036f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036fc:	f3af 8000 	nop.w
 8003700:	54442d18 	.word	0x54442d18
 8003704:	400921fb 	.word	0x400921fb
 8003708:	40668000 	.word	0x40668000
 800370c:	a2529d39 	.word	0xa2529d39
 8003710:	3f91df46 	.word	0x3f91df46

08003714 <getTopocentricLocalHourAngle>:

double getTopocentricLocalHourAngle(double H, double alpha_delta)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	ed87 0b02 	vstr	d0, [r7, #8]
 800371e:	ed87 1b00 	vstr	d1, [r7]
    double H_dash = H - alpha_delta;
 8003722:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003726:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800372a:	f7fc fdb5 	bl	8000298 <__aeabi_dsub>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return H_dash;
 8003736:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800373a:	ec43 2b17 	vmov	d7, r2, r3
}
 800373e:	eeb0 0a47 	vmov.f32	s0, s14
 8003742:	eef0 0a67 	vmov.f32	s1, s15
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	0000      	movs	r0, r0
	...

08003750 <getIncompleteElevationAngle>:

double getIncompleteElevationAngle(double latitude, double delta_dash, double H_dash)
{
 8003750:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003754:	b088      	sub	sp, #32
 8003756:	af00      	add	r7, sp, #0
 8003758:	ed87 0b04 	vstr	d0, [r7, #16]
 800375c:	ed87 1b02 	vstr	d1, [r7, #8]
 8003760:	ed87 2b00 	vstr	d2, [r7]
    latitude = (M_PI / 180) * latitude;
 8003764:	a345      	add	r3, pc, #276	; (adr r3, 800387c <getIncompleteElevationAngle+0x12c>)
 8003766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800376e:	f7fc ff4b 	bl	8000608 <__aeabi_dmul>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	e9c7 2304 	strd	r2, r3, [r7, #16]
    delta_dash = (M_PI / 180) * delta_dash;
 800377a:	a340      	add	r3, pc, #256	; (adr r3, 800387c <getIncompleteElevationAngle+0x12c>)
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003784:	f7fc ff40 	bl	8000608 <__aeabi_dmul>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    H_dash = (M_PI / 180) * H_dash;
 8003790:	a33a      	add	r3, pc, #232	; (adr r3, 800387c <getIncompleteElevationAngle+0x12c>)
 8003792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003796:	e9d7 0100 	ldrd	r0, r1, [r7]
 800379a:	f7fc ff35 	bl	8000608 <__aeabi_dmul>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	e9c7 2300 	strd	r2, r3, [r7]

    double e0 = asin((sin(latitude)*sin(delta_dash)) + (cos(latitude)*cos(delta_dash)*cos(H_dash)));
 80037a6:	ed97 0b04 	vldr	d0, [r7, #16]
 80037aa:	f00a f9c5 	bl	800db38 <sin>
 80037ae:	ec55 4b10 	vmov	r4, r5, d0
 80037b2:	ed97 0b02 	vldr	d0, [r7, #8]
 80037b6:	f00a f9bf 	bl	800db38 <sin>
 80037ba:	ec53 2b10 	vmov	r2, r3, d0
 80037be:	4620      	mov	r0, r4
 80037c0:	4629      	mov	r1, r5
 80037c2:	f7fc ff21 	bl	8000608 <__aeabi_dmul>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4614      	mov	r4, r2
 80037cc:	461d      	mov	r5, r3
 80037ce:	ed97 0b04 	vldr	d0, [r7, #16]
 80037d2:	f00a f951 	bl	800da78 <cos>
 80037d6:	ec59 8b10 	vmov	r8, r9, d0
 80037da:	ed97 0b02 	vldr	d0, [r7, #8]
 80037de:	f00a f94b 	bl	800da78 <cos>
 80037e2:	ec53 2b10 	vmov	r2, r3, d0
 80037e6:	4640      	mov	r0, r8
 80037e8:	4649      	mov	r1, r9
 80037ea:	f7fc ff0d 	bl	8000608 <__aeabi_dmul>
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	4690      	mov	r8, r2
 80037f4:	4699      	mov	r9, r3
 80037f6:	ed97 0b00 	vldr	d0, [r7]
 80037fa:	f00a f93d 	bl	800da78 <cos>
 80037fe:	ec53 2b10 	vmov	r2, r3, d0
 8003802:	4640      	mov	r0, r8
 8003804:	4649      	mov	r1, r9
 8003806:	f7fc feff 	bl	8000608 <__aeabi_dmul>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4620      	mov	r0, r4
 8003810:	4629      	mov	r1, r5
 8003812:	f7fc fd43 	bl	800029c <__adddf3>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	ec43 2b17 	vmov	d7, r2, r3
 800381e:	eeb0 0a47 	vmov.f32	s0, s14
 8003822:	eef0 0a67 	vmov.f32	s1, s15
 8003826:	f009 fedf 	bl	800d5e8 <asin>
 800382a:	ed87 0b06 	vstr	d0, [r7, #24]
    e0 = (e0 * 180) / M_PI;
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	4b11      	ldr	r3, [pc, #68]	; (8003878 <getIncompleteElevationAngle+0x128>)
 8003834:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003838:	f7fc fee6 	bl	8000608 <__aeabi_dmul>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4610      	mov	r0, r2
 8003842:	4619      	mov	r1, r3
 8003844:	a30a      	add	r3, pc, #40	; (adr r3, 8003870 <getIncompleteElevationAngle+0x120>)
 8003846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384a:	f7fd f807 	bl	800085c <__aeabi_ddiv>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return e0;
 8003856:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800385a:	ec43 2b17 	vmov	d7, r2, r3
}
 800385e:	eeb0 0a47 	vmov.f32	s0, s14
 8003862:	eef0 0a67 	vmov.f32	s1, s15
 8003866:	3720      	adds	r7, #32
 8003868:	46bd      	mov	sp, r7
 800386a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800386e:	bf00      	nop
 8003870:	54442d18 	.word	0x54442d18
 8003874:	400921fb 	.word	0x400921fb
 8003878:	40668000 	.word	0x40668000
 800387c:	a2529d39 	.word	0xa2529d39
 8003880:	3f91df46 	.word	0x3f91df46
 8003884:	00000000 	.word	0x00000000

08003888 <getAtmosphericRefractionCorrection>:

double getAtmosphericRefractionCorrection(double P, double T, double e0)
{
 8003888:	b5b0      	push	{r4, r5, r7, lr}
 800388a:	b08a      	sub	sp, #40	; 0x28
 800388c:	af00      	add	r7, sp, #0
 800388e:	ed87 0b04 	vstr	d0, [r7, #16]
 8003892:	ed87 1b02 	vstr	d1, [r7, #8]
 8003896:	ed87 2b00 	vstr	d2, [r7]
    double temp = (M_PI / 180) * (e0 + (10.3 / (e0 + 5.11)));
 800389a:	a34c      	add	r3, pc, #304	; (adr r3, 80039cc <getAtmosphericRefractionCorrection+0x144>)
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038a4:	f7fc fcfa 	bl	800029c <__adddf3>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	a149      	add	r1, pc, #292	; (adr r1, 80039d4 <getAtmosphericRefractionCorrection+0x14c>)
 80038ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038b2:	f7fc ffd3 	bl	800085c <__aeabi_ddiv>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4610      	mov	r0, r2
 80038bc:	4619      	mov	r1, r3
 80038be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038c2:	f7fc fceb 	bl	800029c <__adddf3>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4610      	mov	r0, r2
 80038cc:	4619      	mov	r1, r3
 80038ce:	a343      	add	r3, pc, #268	; (adr r3, 80039dc <getAtmosphericRefractionCorrection+0x154>)
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	f7fc fe98 	bl	8000608 <__aeabi_dmul>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // double temp = e0 + (10.3 / (e0 + 5.11));
    temp = tan(temp);
 80038e0:	ed97 0b08 	vldr	d0, [r7, #32]
 80038e4:	f00a f980 	bl	800dbe8 <tan>
 80038e8:	ed87 0b08 	vstr	d0, [r7, #32]
    temp = (temp * 180) / M_PI;
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	4b33      	ldr	r3, [pc, #204]	; (80039c0 <getAtmosphericRefractionCorrection+0x138>)
 80038f2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80038f6:	f7fc fe87 	bl	8000608 <__aeabi_dmul>
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4610      	mov	r0, r2
 8003900:	4619      	mov	r1, r3
 8003902:	a327      	add	r3, pc, #156	; (adr r3, 80039a0 <getAtmosphericRefractionCorrection+0x118>)
 8003904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003908:	f7fc ffa8 	bl	800085c <__aeabi_ddiv>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	e9c7 2308 	strd	r2, r3, [r7, #32]

    double delta_e = (P / 1010) * (283 / (273 + T)) * (1.02 / (60 * temp));
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	4b2a      	ldr	r3, [pc, #168]	; (80039c4 <getAtmosphericRefractionCorrection+0x13c>)
 800391a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800391e:	f7fc ff9d 	bl	800085c <__aeabi_ddiv>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4614      	mov	r4, r2
 8003928:	461d      	mov	r5, r3
 800392a:	a31f      	add	r3, pc, #124	; (adr r3, 80039a8 <getAtmosphericRefractionCorrection+0x120>)
 800392c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003930:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003934:	f7fc fcb2 	bl	800029c <__adddf3>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	a11c      	add	r1, pc, #112	; (adr r1, 80039b0 <getAtmosphericRefractionCorrection+0x128>)
 800393e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003942:	f7fc ff8b 	bl	800085c <__aeabi_ddiv>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4620      	mov	r0, r4
 800394c:	4629      	mov	r1, r5
 800394e:	f7fc fe5b 	bl	8000608 <__aeabi_dmul>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4614      	mov	r4, r2
 8003958:	461d      	mov	r5, r3
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <getAtmosphericRefractionCorrection+0x140>)
 8003960:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003964:	f7fc fe50 	bl	8000608 <__aeabi_dmul>
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	a112      	add	r1, pc, #72	; (adr r1, 80039b8 <getAtmosphericRefractionCorrection+0x130>)
 800396e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003972:	f7fc ff73 	bl	800085c <__aeabi_ddiv>
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	4620      	mov	r0, r4
 800397c:	4629      	mov	r1, r5
 800397e:	f7fc fe43 	bl	8000608 <__aeabi_dmul>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return delta_e;
 800398a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800398e:	ec43 2b17 	vmov	d7, r2, r3
}
 8003992:	eeb0 0a47 	vmov.f32	s0, s14
 8003996:	eef0 0a67 	vmov.f32	s1, s15
 800399a:	3728      	adds	r7, #40	; 0x28
 800399c:	46bd      	mov	sp, r7
 800399e:	bdb0      	pop	{r4, r5, r7, pc}
 80039a0:	54442d18 	.word	0x54442d18
 80039a4:	400921fb 	.word	0x400921fb
 80039a8:	00000000 	.word	0x00000000
 80039ac:	40711000 	.word	0x40711000
 80039b0:	00000000 	.word	0x00000000
 80039b4:	4071b000 	.word	0x4071b000
 80039b8:	851eb852 	.word	0x851eb852
 80039bc:	3ff051eb 	.word	0x3ff051eb
 80039c0:	40668000 	.word	0x40668000
 80039c4:	408f9000 	.word	0x408f9000
 80039c8:	404e0000 	.word	0x404e0000
 80039cc:	d70a3d71 	.word	0xd70a3d71
 80039d0:	401470a3 	.word	0x401470a3
 80039d4:	9999999a 	.word	0x9999999a
 80039d8:	40249999 	.word	0x40249999
 80039dc:	a2529d39 	.word	0xa2529d39
 80039e0:	3f91df46 	.word	0x3f91df46

080039e4 <getTopocentricElevationAngle>:

double getTopocentricElevationAngle(double e0, double delta_e)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	ed87 0b02 	vstr	d0, [r7, #8]
 80039ee:	ed87 1b00 	vstr	d1, [r7]
    double e = e0 + delta_e;
 80039f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039fa:	f7fc fc4f 	bl	800029c <__adddf3>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return e;
 8003a06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a0a:	ec43 2b17 	vmov	d7, r2, r3
}
 8003a0e:	eeb0 0a47 	vmov.f32	s0, s14
 8003a12:	eef0 0a67 	vmov.f32	s1, s15
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <getTopocentricZenithAngle>:

double getTopocentricZenithAngle(double e)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	ed87 0b00 	vstr	d0, [r7]
    double theta = 90 - e;
 8003a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a2a:	f04f 0000 	mov.w	r0, #0
 8003a2e:	4909      	ldr	r1, [pc, #36]	; (8003a54 <getTopocentricZenithAngle+0x38>)
 8003a30:	f7fc fc32 	bl	8000298 <__aeabi_dsub>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return theta;
 8003a3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a40:	ec43 2b17 	vmov	d7, r2, r3
}
 8003a44:	eeb0 0a47 	vmov.f32	s0, s14
 8003a48:	eef0 0a67 	vmov.f32	s1, s15
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40568000 	.word	0x40568000

08003a58 <getTopocentricAzimuthAngle>:

double getTopocentricAzimuthAngle(double H_dash, double latitude, double delta_dash)
{
 8003a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a5c:	b08e      	sub	sp, #56	; 0x38
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	ed87 0b06 	vstr	d0, [r7, #24]
 8003a64:	ed87 1b04 	vstr	d1, [r7, #16]
 8003a68:	ed87 2b02 	vstr	d2, [r7, #8]
    H_dash = (M_PI / 180) * H_dash;
 8003a6c:	a394      	add	r3, pc, #592	; (adr r3, 8003cc0 <getTopocentricAzimuthAngle+0x268>)
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003a76:	f7fc fdc7 	bl	8000608 <__aeabi_dmul>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    latitude = (M_PI / 180) * latitude;
 8003a82:	a38f      	add	r3, pc, #572	; (adr r3, 8003cc0 <getTopocentricAzimuthAngle+0x268>)
 8003a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a8c:	f7fc fdbc 	bl	8000608 <__aeabi_dmul>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    delta_dash = (M_PI / 180) * delta_dash;
 8003a98:	a389      	add	r3, pc, #548	; (adr r3, 8003cc0 <getTopocentricAzimuthAngle+0x268>)
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003aa2:	f7fc fdb1 	bl	8000608 <__aeabi_dmul>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	e9c7 2302 	strd	r2, r3, [r7, #8]

    double temp = (cos(H_dash) * sin(latitude)) - (tan(delta_dash) * cos(latitude));
 8003aae:	ed97 0b06 	vldr	d0, [r7, #24]
 8003ab2:	f009 ffe1 	bl	800da78 <cos>
 8003ab6:	ec59 8b10 	vmov	r8, r9, d0
 8003aba:	ed97 0b04 	vldr	d0, [r7, #16]
 8003abe:	f00a f83b 	bl	800db38 <sin>
 8003ac2:	ec53 2b10 	vmov	r2, r3, d0
 8003ac6:	4640      	mov	r0, r8
 8003ac8:	4649      	mov	r1, r9
 8003aca:	f7fc fd9d 	bl	8000608 <__aeabi_dmul>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4690      	mov	r8, r2
 8003ad4:	4699      	mov	r9, r3
 8003ad6:	ed97 0b02 	vldr	d0, [r7, #8]
 8003ada:	f00a f885 	bl	800dbe8 <tan>
 8003ade:	ec5b ab10 	vmov	sl, fp, d0
 8003ae2:	ed97 0b04 	vldr	d0, [r7, #16]
 8003ae6:	f009 ffc7 	bl	800da78 <cos>
 8003aea:	ec53 2b10 	vmov	r2, r3, d0
 8003aee:	4650      	mov	r0, sl
 8003af0:	4659      	mov	r1, fp
 8003af2:	f7fc fd89 	bl	8000608 <__aeabi_dmul>
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	4640      	mov	r0, r8
 8003afc:	4649      	mov	r1, r9
 8003afe:	f7fc fbcb 	bl	8000298 <__aeabi_dsub>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double azimuth = atan2(sin(H_dash), temp);
 8003b0a:	ed97 0b06 	vldr	d0, [r7, #24]
 8003b0e:	f00a f813 	bl	800db38 <sin>
 8003b12:	eeb0 7a40 	vmov.f32	s14, s0
 8003b16:	eef0 7a60 	vmov.f32	s15, s1
 8003b1a:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8003b1e:	eeb0 0a47 	vmov.f32	s0, s14
 8003b22:	eef0 0a67 	vmov.f32	s1, s15
 8003b26:	f009 fd93 	bl	800d650 <atan2>
 8003b2a:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
    azimuth = (azimuth * 180) / M_PI;
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	4b61      	ldr	r3, [pc, #388]	; (8003cb8 <getTopocentricAzimuthAngle+0x260>)
 8003b34:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003b38:	f7fc fd66 	bl	8000608 <__aeabi_dmul>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4610      	mov	r0, r2
 8003b42:	4619      	mov	r1, r3
 8003b44:	a35a      	add	r3, pc, #360	; (adr r3, 8003cb0 <getTopocentricAzimuthAngle+0x258>)
 8003b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4a:	f7fc fe87 	bl	800085c <__aeabi_ddiv>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    azimuth = azimuth / 360;
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	4b58      	ldr	r3, [pc, #352]	; (8003cbc <getTopocentricAzimuthAngle+0x264>)
 8003b5c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003b60:	f7fc fe7c 	bl	800085c <__aeabi_ddiv>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double fraction = fabs(azimuth - floor(fabs(azimuth)));
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6e:	603b      	str	r3, [r7, #0]
 8003b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b76:	607b      	str	r3, [r7, #4]
 8003b78:	ed97 0b00 	vldr	d0, [r7]
 8003b7c:	f00a f87c 	bl	800dc78 <floor>
 8003b80:	ec53 2b10 	vmov	r2, r3, d0
 8003b84:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003b88:	f7fc fb86 	bl	8000298 <__aeabi_dsub>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4611      	mov	r1, r2
 8003b92:	6239      	str	r1, [r7, #32]
 8003b94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
    if (azimuth > 0)
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003ba6:	f7fc ffbf 	bl	8000b28 <__aeabi_dcmpgt>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00b      	beq.n	8003bc8 <getTopocentricAzimuthAngle+0x170>
    {
        azimuth = 360 * fraction;
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	4b41      	ldr	r3, [pc, #260]	; (8003cbc <getTopocentricAzimuthAngle+0x264>)
 8003bb6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003bba:	f7fc fd25 	bl	8000608 <__aeabi_dmul>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8003bc6:	e011      	b.n	8003bec <getTopocentricAzimuthAngle+0x194>
    }
    else
    {
        azimuth = 360 - (360 * fraction);
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	4b3b      	ldr	r3, [pc, #236]	; (8003cbc <getTopocentricAzimuthAngle+0x264>)
 8003bce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003bd2:	f7fc fd19 	bl	8000608 <__aeabi_dmul>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	f04f 0000 	mov.w	r0, #0
 8003bde:	4937      	ldr	r1, [pc, #220]	; (8003cbc <getTopocentricAzimuthAngle+0x264>)
 8003be0:	f7fc fb5a 	bl	8000298 <__aeabi_dsub>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    }

    azimuth = azimuth + 180;
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	4b31      	ldr	r3, [pc, #196]	; (8003cb8 <getTopocentricAzimuthAngle+0x260>)
 8003bf2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003bf6:	f7fc fb51 	bl	800029c <__adddf3>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    azimuth = azimuth / 360;
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	4b2d      	ldr	r3, [pc, #180]	; (8003cbc <getTopocentricAzimuthAngle+0x264>)
 8003c08:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003c0c:	f7fc fe26 	bl	800085c <__aeabi_ddiv>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    fraction = fabs(azimuth - floor(fabs(azimuth)));
 8003c18:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8003c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003c20:	ec45 4b10 	vmov	d0, r4, r5
 8003c24:	f00a f828 	bl	800dc78 <floor>
 8003c28:	ec53 2b10 	vmov	r2, r3, d0
 8003c2c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003c30:	f7fc fb32 	bl	8000298 <__aeabi_dsub>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4611      	mov	r1, r2
 8003c3a:	6239      	str	r1, [r7, #32]
 8003c3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
    if (azimuth > 0)
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003c4e:	f7fc ff6b 	bl	8000b28 <__aeabi_dcmpgt>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00b      	beq.n	8003c70 <getTopocentricAzimuthAngle+0x218>
    {
        azimuth = 360 * fraction;
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	4b17      	ldr	r3, [pc, #92]	; (8003cbc <getTopocentricAzimuthAngle+0x264>)
 8003c5e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003c62:	f7fc fcd1 	bl	8000608 <__aeabi_dmul>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8003c6e:	e011      	b.n	8003c94 <getTopocentricAzimuthAngle+0x23c>
    }
    else
    {
        azimuth = 360 - (360 * fraction);
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	4b11      	ldr	r3, [pc, #68]	; (8003cbc <getTopocentricAzimuthAngle+0x264>)
 8003c76:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003c7a:	f7fc fcc5 	bl	8000608 <__aeabi_dmul>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	f04f 0000 	mov.w	r0, #0
 8003c86:	490d      	ldr	r1, [pc, #52]	; (8003cbc <getTopocentricAzimuthAngle+0x264>)
 8003c88:	f7fc fb06 	bl	8000298 <__aeabi_dsub>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    }

    return azimuth;
 8003c94:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c98:	ec43 2b17 	vmov	d7, r2, r3
}
 8003c9c:	eeb0 0a47 	vmov.f32	s0, s14
 8003ca0:	eef0 0a67 	vmov.f32	s1, s15
 8003ca4:	3738      	adds	r7, #56	; 0x38
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cac:	f3af 8000 	nop.w
 8003cb0:	54442d18 	.word	0x54442d18
 8003cb4:	400921fb 	.word	0x400921fb
 8003cb8:	40668000 	.word	0x40668000
 8003cbc:	40768000 	.word	0x40768000
 8003cc0:	a2529d39 	.word	0xa2529d39
 8003cc4:	3f91df46 	.word	0x3f91df46

08003cc8 <caller>:
        return 0;
    }
}

double *caller(int day, int year, int month, float hour, float min, float sec, float zone, float latitude, float longitude)
{
 8003cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ccc:	f6ad 6df4 	subw	sp, sp, #3828	; 0xef4
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003cd6:	f6a3 63cc 	subw	r3, r3, #3788	; 0xecc
 8003cda:	6018      	str	r0, [r3, #0]
 8003cdc:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003ce0:	f5a3 636d 	sub.w	r3, r3, #3792	; 0xed0
 8003ce4:	6019      	str	r1, [r3, #0]
 8003ce6:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003cea:	f6a3 63d4 	subw	r3, r3, #3796	; 0xed4
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003cf4:	f6a3 63d8 	subw	r3, r3, #3800	; 0xed8
 8003cf8:	ed83 0a00 	vstr	s0, [r3]
 8003cfc:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003d00:	f6a3 63dc 	subw	r3, r3, #3804	; 0xedc
 8003d04:	edc3 0a00 	vstr	s1, [r3]
 8003d08:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003d0c:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8003d10:	ed83 1a00 	vstr	s2, [r3]
 8003d14:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003d18:	f6a3 63e4 	subw	r3, r3, #3812	; 0xee4
 8003d1c:	edc3 1a00 	vstr	s3, [r3]
 8003d20:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003d24:	f6a3 63e8 	subw	r3, r3, #3816	; 0xee8
 8003d28:	ed83 2a00 	vstr	s4, [r3]
 8003d2c:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003d30:	f6a3 63ec 	subw	r3, r3, #3820	; 0xeec
 8003d34:	edc3 2a00 	vstr	s5, [r3]
    double elevation = 1655;
 8003d38:	f20f 4304 	addw	r3, pc, #1028	; 0x404
 8003d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d40:	f607 61e8 	addw	r1, r7, #3816	; 0xee8
 8003d44:	e9c1 2300 	strd	r2, r3, [r1]

    double pressure = 841.1604;
 8003d48:	a3ff      	add	r3, pc, #1020	; (adr r3, 8004148 <caller+0x480>)
 8003d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4e:	f507 616e 	add.w	r1, r7, #3808	; 0xee0
 8003d52:	e9c1 2300 	strd	r2, r3, [r1]
    double temperature = 15;
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	4bf7      	ldr	r3, [pc, #988]	; (8004138 <caller+0x470>)
 8003d5c:	f607 61d8 	addw	r1, r7, #3800	; 0xed8
 8003d60:	e9c1 2300 	strd	r2, r3, [r1]

    double day_in_decimal = getDayinDecimals(day, hour, min, sec);
 8003d64:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003d68:	f6a3 63d8 	subw	r3, r3, #3800	; 0xed8
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	f7fc fbf3 	bl	8000558 <__aeabi_f2d>
 8003d72:	4680      	mov	r8, r0
 8003d74:	4689      	mov	r9, r1
 8003d76:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003d7a:	f6a3 63dc 	subw	r3, r3, #3804	; 0xedc
 8003d7e:	6818      	ldr	r0, [r3, #0]
 8003d80:	f7fc fbea 	bl	8000558 <__aeabi_f2d>
 8003d84:	4682      	mov	sl, r0
 8003d86:	468b      	mov	fp, r1
 8003d88:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003d8c:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	f7fc fbe1 	bl	8000558 <__aeabi_f2d>
 8003d96:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003d9a:	f6a3 63cc 	subw	r3, r3, #3788	; 0xecc
 8003d9e:	ec41 0b12 	vmov	d2, r0, r1
 8003da2:	ec4b ab11 	vmov	d1, sl, fp
 8003da6:	ec49 8b10 	vmov	d0, r8, r9
 8003daa:	6818      	ldr	r0, [r3, #0]
 8003dac:	f7fd f8d4 	bl	8000f58 <getDayinDecimals>
 8003db0:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 8003db4:	ed83 0b00 	vstr	d0, [r3]
    double julianDay = getJulianDay(year, month, day_in_decimal, zone);
 8003db8:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003dbc:	f6a3 63e4 	subw	r3, r3, #3812	; 0xee4
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	f7fc fbc9 	bl	8000558 <__aeabi_f2d>
 8003dc6:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003dca:	f6a3 62d4 	subw	r2, r3, #3796	; 0xed4
 8003dce:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003dd2:	f5a3 636d 	sub.w	r3, r3, #3792	; 0xed0
 8003dd6:	ec41 0b11 	vmov	d1, r0, r1
 8003dda:	f507 616d 	add.w	r1, r7, #3792	; 0xed0
 8003dde:	ed91 0b00 	vldr	d0, [r1]
 8003de2:	6811      	ldr	r1, [r2, #0]
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	f7fd f90f 	bl	8001008 <getJulianDay>
 8003dea:	f607 63c8 	addw	r3, r7, #3784	; 0xec8
 8003dee:	ed83 0b00 	vstr	d0, [r3]

    // printf("Julian Day = %lf\n", julianDay);

    double julianEphemerisDay = getJulianEphemerisDay(julianDay);
 8003df2:	f607 63c8 	addw	r3, r7, #3784	; 0xec8
 8003df6:	ed93 0b00 	vldr	d0, [r3]
 8003dfa:	f7fd f9a1 	bl	8001140 <getJulianEphemerisDay>
 8003dfe:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 8003e02:	ed83 0b00 	vstr	d0, [r3]

    double julianCentury = getJulianCentury(julianDay);
 8003e06:	f607 63c8 	addw	r3, r7, #3784	; 0xec8
 8003e0a:	ed93 0b00 	vldr	d0, [r3]
 8003e0e:	f7fd f9b3 	bl	8001178 <getJulianCentury>
 8003e12:	f607 63b8 	addw	r3, r7, #3768	; 0xeb8
 8003e16:	ed83 0b00 	vstr	d0, [r3]

    double julianEphemerisCentury = getJulianEphemerisCentury(julianEphemerisDay);
 8003e1a:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 8003e1e:	ed93 0b00 	vldr	d0, [r3]
 8003e22:	f7fd f9d5 	bl	80011d0 <getJulianEphemerisCentury>
 8003e26:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8003e2a:	ed83 0b00 	vstr	d0, [r3]

    double julianEphemerisMillenium = getJulianEphemerisMillenium(julianEphemerisCentury);
 8003e2e:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8003e32:	ed93 0b00 	vldr	d0, [r3]
 8003e36:	f7fd f9f7 	bl	8001228 <getJulianEphemerisMillenium>
 8003e3a:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003e3e:	ed83 0b00 	vstr	d0, [r3]
    /*
    printf("Julian Ephemeris Century = %lf\n", julianEphemerisCentury);
    printf("Julian Ephemeris Millenium = %lf\n", julianEphemerisMillenium);
    */

    struct L0 *dataL0 = initL0();
 8003e42:	f7fd fa0f 	bl	8001264 <initL0>
 8003e46:	f8c7 0ea4 	str.w	r0, [r7, #3748]	; 0xea4
    struct L1 *dataL1 = initL1();
 8003e4a:	f7fd fa15 	bl	8001278 <initL1>
 8003e4e:	f8c7 0ea0 	str.w	r0, [r7, #3744]	; 0xea0
    struct L2 *dataL2 = initL2();
 8003e52:	f7fd fa1b 	bl	800128c <initL2>
 8003e56:	f8c7 0e9c 	str.w	r0, [r7, #3740]	; 0xe9c
    struct L3 *dataL3 = initL3();
 8003e5a:	f7fd fa21 	bl	80012a0 <initL3>
 8003e5e:	f8c7 0e98 	str.w	r0, [r7, #3736]	; 0xe98
    struct L4 *dataL4 = initL4();
 8003e62:	f7fd fa27 	bl	80012b4 <initL4>
 8003e66:	f8c7 0e94 	str.w	r0, [r7, #3732]	; 0xe94
    struct L5 *dataL5 = initL5();
 8003e6a:	f7fd fa2d 	bl	80012c8 <initL5>
 8003e6e:	f8c7 0e90 	str.w	r0, [r7, #3728]	; 0xe90

    double L0 = getL0(dataL0, julianEphemerisMillenium);
 8003e72:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003e76:	ed93 0b00 	vldr	d0, [r3]
 8003e7a:	f8d7 0ea4 	ldr.w	r0, [r7, #3748]	; 0xea4
 8003e7e:	f7fd fa2d 	bl	80012dc <getL0>
 8003e82:	f607 6388 	addw	r3, r7, #3720	; 0xe88
 8003e86:	ed83 0b00 	vstr	d0, [r3]
    double L1 = getL1(dataL1, julianEphemerisMillenium);
 8003e8a:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003e8e:	ed93 0b00 	vldr	d0, [r3]
 8003e92:	f8d7 0ea0 	ldr.w	r0, [r7, #3744]	; 0xea0
 8003e96:	f7fd fa89 	bl	80013ac <getL1>
 8003e9a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8003e9e:	ed83 0b00 	vstr	d0, [r3]
    double L2 = getL2(dataL2, julianEphemerisMillenium);
 8003ea2:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003ea6:	ed93 0b00 	vldr	d0, [r3]
 8003eaa:	f8d7 0e9c 	ldr.w	r0, [r7, #3740]	; 0xe9c
 8003eae:	f7fd fae5 	bl	800147c <getL2>
 8003eb2:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003eb6:	ed83 0b00 	vstr	d0, [r3]
    double L3 = getL3(dataL3, julianEphemerisMillenium);
 8003eba:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003ebe:	ed93 0b00 	vldr	d0, [r3]
 8003ec2:	f8d7 0e98 	ldr.w	r0, [r7, #3736]	; 0xe98
 8003ec6:	f7fd fb41 	bl	800154c <getL3>
 8003eca:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 8003ece:	ed83 0b00 	vstr	d0, [r3]
    double L4 = getL4(dataL4, julianEphemerisMillenium);
 8003ed2:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003ed6:	ed93 0b00 	vldr	d0, [r3]
 8003eda:	f8d7 0e94 	ldr.w	r0, [r7, #3732]	; 0xe94
 8003ede:	f7fd fb9d 	bl	800161c <getL4>
 8003ee2:	f607 6368 	addw	r3, r7, #3688	; 0xe68
 8003ee6:	ed83 0b00 	vstr	d0, [r3]
    double L5 = getL5(dataL5, julianEphemerisMillenium);
 8003eea:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003eee:	ed93 0b00 	vldr	d0, [r3]
 8003ef2:	f8d7 0e90 	ldr.w	r0, [r7, #3728]	; 0xe90
 8003ef6:	f7fd fbf9 	bl	80016ec <getL5>
 8003efa:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003efe:	ed83 0b00 	vstr	d0, [r3]

    double heliocentric_longitude = getHeliocentricLongitude(L0, L1, L2, L3, L4, L5, julianEphemerisMillenium);
 8003f02:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003f06:	ed93 6b00 	vldr	d6, [r3]
 8003f0a:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003f0e:	ed93 5b00 	vldr	d5, [r3]
 8003f12:	f607 6368 	addw	r3, r7, #3688	; 0xe68
 8003f16:	ed93 4b00 	vldr	d4, [r3]
 8003f1a:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 8003f1e:	ed93 3b00 	vldr	d3, [r3]
 8003f22:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003f26:	ed93 2b00 	vldr	d2, [r3]
 8003f2a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8003f2e:	ed93 1b00 	vldr	d1, [r3]
 8003f32:	f607 6388 	addw	r3, r7, #3720	; 0xe88
 8003f36:	ed93 0b00 	vldr	d0, [r3]
 8003f3a:	f7fd fc41 	bl	80017c0 <getHeliocentricLongitude>
 8003f3e:	f607 6358 	addw	r3, r7, #3672	; 0xe58
 8003f42:	ed83 0b00 	vstr	d0, [r3]

    // printf("Heliocentric Longitude = %lf\n", heliocentric_longitude);

    struct B0 *dataB0 = initB0();
 8003f46:	f7fd fd47 	bl	80019d8 <initB0>
 8003f4a:	f8c7 0e54 	str.w	r0, [r7, #3668]	; 0xe54
    struct B1 *dataB1 = initB1();
 8003f4e:	f7fd fd4d 	bl	80019ec <initB1>
 8003f52:	f8c7 0e50 	str.w	r0, [r7, #3664]	; 0xe50

    double B0 = getB0(dataB0, julianEphemerisMillenium);
 8003f56:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003f5a:	ed93 0b00 	vldr	d0, [r3]
 8003f5e:	f8d7 0e54 	ldr.w	r0, [r7, #3668]	; 0xe54
 8003f62:	f7fd fd4d 	bl	8001a00 <getB0>
 8003f66:	f607 6348 	addw	r3, r7, #3656	; 0xe48
 8003f6a:	ed83 0b00 	vstr	d0, [r3]
    double B1 = getB1(dataB1, julianEphemerisMillenium);
 8003f6e:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003f72:	ed93 0b00 	vldr	d0, [r3]
 8003f76:	f8d7 0e50 	ldr.w	r0, [r7, #3664]	; 0xe50
 8003f7a:	f7fd fda9 	bl	8001ad0 <getB1>
 8003f7e:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 8003f82:	ed83 0b00 	vstr	d0, [r3]

    double heliocentric_latitude = getHeliocentricLatitude(B0, B1, julianEphemerisMillenium);
 8003f86:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003f8a:	ed93 2b00 	vldr	d2, [r3]
 8003f8e:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 8003f92:	ed93 1b00 	vldr	d1, [r3]
 8003f96:	f607 6348 	addw	r3, r7, #3656	; 0xe48
 8003f9a:	ed93 0b00 	vldr	d0, [r3]
 8003f9e:	f7fd fdff 	bl	8001ba0 <getHeliocentricLatitude>
 8003fa2:	f607 6338 	addw	r3, r7, #3640	; 0xe38
 8003fa6:	ed83 0b00 	vstr	d0, [r3]

    // printf("Heliocentric Latitude = %lf\n", heliocentric_latitude);

    struct R0 *dataR0 = initR0();
 8003faa:	f7fd fe47 	bl	8001c3c <initR0>
 8003fae:	f8c7 0e34 	str.w	r0, [r7, #3636]	; 0xe34
    struct R1 *dataR1 = initR1();
 8003fb2:	f7fd fe4d 	bl	8001c50 <initR1>
 8003fb6:	f8c7 0e30 	str.w	r0, [r7, #3632]	; 0xe30
    struct R2 *dataR2 = initR2();
 8003fba:	f7fd fe53 	bl	8001c64 <initR2>
 8003fbe:	f8c7 0e2c 	str.w	r0, [r7, #3628]	; 0xe2c
    struct R3 *dataR3 = initR3();
 8003fc2:	f7fd fe59 	bl	8001c78 <initR3>
 8003fc6:	f8c7 0e28 	str.w	r0, [r7, #3624]	; 0xe28
    struct R4 *dataR4 = initR4();
 8003fca:	f7fd fe5f 	bl	8001c8c <initR4>
 8003fce:	f8c7 0e24 	str.w	r0, [r7, #3620]	; 0xe24

    double R0 = getR0(dataR0, julianEphemerisMillenium);
 8003fd2:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003fd6:	ed93 0b00 	vldr	d0, [r3]
 8003fda:	f8d7 0e34 	ldr.w	r0, [r7, #3636]	; 0xe34
 8003fde:	f7fd fe5f 	bl	8001ca0 <getR0>
 8003fe2:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 8003fe6:	ed83 0b00 	vstr	d0, [r3]
    double R1 = getR1(dataR1, julianEphemerisMillenium);
 8003fea:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003fee:	ed93 0b00 	vldr	d0, [r3]
 8003ff2:	f8d7 0e30 	ldr.w	r0, [r7, #3632]	; 0xe30
 8003ff6:	f7fd febb 	bl	8001d70 <getR1>
 8003ffa:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8003ffe:	ed83 0b00 	vstr	d0, [r3]
    double R2 = getR2(dataR2, julianEphemerisMillenium);
 8004002:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8004006:	ed93 0b00 	vldr	d0, [r3]
 800400a:	f8d7 0e2c 	ldr.w	r0, [r7, #3628]	; 0xe2c
 800400e:	f7fd ff17 	bl	8001e40 <getR2>
 8004012:	f607 6308 	addw	r3, r7, #3592	; 0xe08
 8004016:	ed83 0b00 	vstr	d0, [r3]
    double R3 = getR3(dataR3, julianEphemerisMillenium);
 800401a:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 800401e:	ed93 0b00 	vldr	d0, [r3]
 8004022:	f8d7 0e28 	ldr.w	r0, [r7, #3624]	; 0xe28
 8004026:	f7fd ff73 	bl	8001f10 <getR3>
 800402a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800402e:	ed83 0b00 	vstr	d0, [r3]
    double R4 = getR4(dataR4, julianEphemerisMillenium);
 8004032:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8004036:	ed93 0b00 	vldr	d0, [r3]
 800403a:	f8d7 0e24 	ldr.w	r0, [r7, #3620]	; 0xe24
 800403e:	f7fd ffcf 	bl	8001fe0 <getR4>
 8004042:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8004046:	ed83 0b00 	vstr	d0, [r3]

    double earth_radiusVector = getEarthRadiusVector(R0, R1, R2, R3, R4, julianEphemerisMillenium);
 800404a:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800404e:	461e      	mov	r6, r3
 8004050:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8004054:	ed93 5b00 	vldr	d5, [r3]
 8004058:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800405c:	ed93 4b00 	vldr	d4, [r3]
 8004060:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8004064:	ed93 3b00 	vldr	d3, [r3]
 8004068:	f607 6308 	addw	r3, r7, #3592	; 0xe08
 800406c:	ed93 2b00 	vldr	d2, [r3]
 8004070:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8004074:	ed93 1b00 	vldr	d1, [r3]
 8004078:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 800407c:	ed93 0b00 	vldr	d0, [r3]
 8004080:	f7fe f816 	bl	80020b0 <getEarthRadiusVector>
 8004084:	ed86 0b00 	vstr	d0, [r6]

    // printf("Earth Radius Vector = %lf\n", earth_radiusVector);

    double geocentric_longitude = getGeocentricLongitude(heliocentric_longitude);
 8004088:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800408c:	461e      	mov	r6, r3
 800408e:	f607 6358 	addw	r3, r7, #3672	; 0xe58
 8004092:	ed93 0b00 	vldr	d0, [r3]
 8004096:	f7fe f893 	bl	80021c0 <getGeocentricLongitude>
 800409a:	ed06 0b02 	vstr	d0, [r6, #-8]
    double geocentric_latitude = -1 * heliocentric_latitude;
 800409e:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 80040a2:	461a      	mov	r2, r3
 80040a4:	f8d7 4e38 	ldr.w	r4, [r7, #3640]	; 0xe38
 80040a8:	f8d7 3e3c 	ldr.w	r3, [r7, #3644]	; 0xe3c
 80040ac:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80040b0:	e9c2 4500 	strd	r4, r5, [r2]
    /*
    printf("Geocentric Longitude = %lf\n", geocentric_longitude);
    printf("Geocentric Latitude = %lf\n", geocentric_latitude);
    */

    double x0 = getMeanElongation_MoonFromSun(julianEphemerisCentury);
 80040b4:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 80040b8:	461c      	mov	r4, r3
 80040ba:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 80040be:	ed93 0b00 	vldr	d0, [r3]
 80040c2:	f7fe f8e5 	bl	8002290 <getMeanElongation_MoonFromSun>
 80040c6:	ed04 0b02 	vstr	d0, [r4, #-8]
    double x1 = getMeanAnomalySun(julianEphemerisCentury);
 80040ca:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 80040ce:	461c      	mov	r4, r3
 80040d0:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 80040d4:	ed93 0b00 	vldr	d0, [r3]
 80040d8:	f7fe f946 	bl	8002368 <getMeanAnomalySun>
 80040dc:	ed84 0b00 	vstr	d0, [r4]
    double x2 = getMeanAnomalyMoon(julianEphemerisCentury);
 80040e0:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 80040e4:	461c      	mov	r4, r3
 80040e6:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 80040ea:	ed93 0b00 	vldr	d0, [r3]
 80040ee:	f7fe f9a7 	bl	8002440 <getMeanAnomalyMoon>
 80040f2:	ed04 0b02 	vstr	d0, [r4, #-8]
    double x3 = getMoonLatitudeArgument(julianEphemerisCentury);
 80040f6:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 80040fa:	461c      	mov	r4, r3
 80040fc:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8004100:	ed93 0b00 	vldr	d0, [r3]
 8004104:	f7fe fa08 	bl	8002518 <getMoonLatitudeArgument>
 8004108:	ed84 0b00 	vstr	d0, [r4]
    double x4 = getMoonAscendingNode(julianEphemerisCentury);
 800410c:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 8004110:	461c      	mov	r4, r3
 8004112:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8004116:	ed93 0b00 	vldr	d0, [r3]
 800411a:	f7fe fa69 	bl	80025f0 <getMoonAscendingNode>
 800411e:	ed04 0b02 	vstr	d0, [r4, #-8]

    const int Y[63][5] = {
 8004122:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8004126:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 800412a:	4a04      	ldr	r2, [pc, #16]	; (800413c <caller+0x474>)
 800412c:	4618      	mov	r0, r3
 800412e:	4611      	mov	r1, r2
 8004130:	f240 43ec 	movw	r3, #1260	; 0x4ec
 8004134:	e00c      	b.n	8004150 <caller+0x488>
 8004136:	bf00      	nop
 8004138:	402e0000 	.word	0x402e0000
 800413c:	08010288 	.word	0x08010288
 8004140:	00000000 	.word	0x00000000
 8004144:	4099dc00 	.word	0x4099dc00
 8004148:	7fcb923a 	.word	0x7fcb923a
 800414c:	408a4948 	.word	0x408a4948
 8004150:	461a      	mov	r2, r3
 8004152:	f007 fa93 	bl	800b67c <memcpy>
    {2,-1,-1,2,2},
    {0,0,3,2,2},
    {2,-1,0,2,2},
    };

    const double abcd[63][4]={
 8004156:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800415a:	f6a3 63c8 	subw	r3, r3, #3784	; 0xec8
 800415e:	4ae8      	ldr	r2, [pc, #928]	; (8004500 <caller+0x838>)
 8004160:	4618      	mov	r0, r3
 8004162:	4611      	mov	r1, r2
 8004164:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004168:	461a      	mov	r2, r3
 800416a:	f007 fa87 	bl	800b67c <memcpy>
    {-3,0,0,0},
    {-3,0,0,0},
    {-3,0,0,0},
    };

    double *nutation = malloc(2 * sizeof(double));
 800416e:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8004172:	f5a3 749e 	sub.w	r4, r3, #316	; 0x13c
 8004176:	2010      	movs	r0, #16
 8004178:	f006 faba 	bl	800a6f0 <malloc>
 800417c:	4603      	mov	r3, r0
 800417e:	6023      	str	r3, [r4, #0]
    nutation = getNutation(Y, abcd, julianEphemerisCentury, x0, x1, x2, x3, x4);
 8004180:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8004184:	f5a3 749e 	sub.w	r4, r3, #316	; 0x13c
 8004188:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800418c:	469c      	mov	ip, r3
 800418e:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 8004192:	461e      	mov	r6, r3
 8004194:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 8004198:	461d      	mov	r5, r3
 800419a:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 800419e:	4618      	mov	r0, r3
 80041a0:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 80041a4:	4619      	mov	r1, r3
 80041a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041aa:	f607 0308 	addw	r3, r7, #2056	; 0x808
 80041ae:	ed1c 5b02 	vldr	d5, [ip, #-8]
 80041b2:	ed96 4b00 	vldr	d4, [r6]
 80041b6:	ed15 3b02 	vldr	d3, [r5, #-8]
 80041ba:	ed90 2b00 	vldr	d2, [r0]
 80041be:	ed11 1b02 	vldr	d1, [r1, #-8]
 80041c2:	f507 616b 	add.w	r1, r7, #3760	; 0xeb0
 80041c6:	ed91 0b00 	vldr	d0, [r1]
 80041ca:	4611      	mov	r1, r2
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fe fa77 	bl	80026c0 <getNutation>
 80041d2:	6020      	str	r0, [r4, #0]
    double nutation_longitude = nutation[0];
 80041d4:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 80041d8:	4619      	mov	r1, r3
 80041da:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 80041de:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	e941 2302 	strd	r2, r3, [r1, #-8]
    double nutation_obliquity = nutation[1];
 80041ec:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 80041f0:	4619      	mov	r1, r3
 80041f2:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 80041f6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004200:	e9c1 2300 	strd	r2, r3, [r1]
    /*
    printf("Nutation Longitude = %lf\n", nutation_longitude);
    printf("Nutation Obliquity = %lf\n", nutation_obliquity);
    */

    double mean_obliquity = getMeanObliquity(julianEphemerisMillenium / 10);
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	4bbe      	ldr	r3, [pc, #760]	; (8004504 <caller+0x83c>)
 800420a:	f607 61a8 	addw	r1, r7, #3752	; 0xea8
 800420e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004212:	f7fc fb23 	bl	800085c <__aeabi_ddiv>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	ec43 2b17 	vmov	d7, r2, r3
 800421e:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 8004222:	461c      	mov	r4, r3
 8004224:	eeb0 0a47 	vmov.f32	s0, s14
 8004228:	eef0 0a67 	vmov.f32	s1, s15
 800422c:	f7fe fb88 	bl	8002940 <getMeanObliquity>
 8004230:	ed04 0b02 	vstr	d0, [r4, #-8]
    double true_obliquity = (mean_obliquity / 3600) + nutation_obliquity;
 8004234:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 8004238:	4619      	mov	r1, r3
 800423a:	a3ad      	add	r3, pc, #692	; (adr r3, 80044f0 <caller+0x828>)
 800423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004240:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8004244:	f7fc fb0a 	bl	800085c <__aeabi_ddiv>
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	f507 6159 	add.w	r1, r7, #3472	; 0xd90
 8004250:	460c      	mov	r4, r1
 8004252:	f507 615a 	add.w	r1, r7, #3488	; 0xda0
 8004256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800425a:	f7fc f81f 	bl	800029c <__adddf3>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	e9c4 2300 	strd	r2, r3, [r4]

    // printf("True Obliquity = %lf\n", true_obliquity);

    double aberration_correction = 20.4898 / (3600 * earth_radiusVector);
 8004266:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800426a:	4619      	mov	r1, r3
 800426c:	a3a0      	add	r3, pc, #640	; (adr r3, 80044f0 <caller+0x828>)
 800426e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004272:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004276:	f7fc f9c7 	bl	8000608 <__aeabi_dmul>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	f507 6159 	add.w	r1, r7, #3472	; 0xd90
 8004282:	460c      	mov	r4, r1
 8004284:	a19c      	add	r1, pc, #624	; (adr r1, 80044f8 <caller+0x830>)
 8004286:	e9d1 0100 	ldrd	r0, r1, [r1]
 800428a:	f7fc fae7 	bl	800085c <__aeabi_ddiv>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	e944 2302 	strd	r2, r3, [r4, #-8]
    double apparent_sun_longitude = geocentric_longitude + nutation_longitude + aberration_correction;
 8004296:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800429a:	4619      	mov	r1, r3
 800429c:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 80042a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80042a4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80042a8:	f7fb fff8 	bl	800029c <__adddf3>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	f507 6158 	add.w	r1, r7, #3456	; 0xd80
 80042b4:	460c      	mov	r4, r1
 80042b6:	f507 6159 	add.w	r1, r7, #3472	; 0xd90
 80042ba:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80042be:	f7fb ffed 	bl	800029c <__adddf3>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	e9c4 2300 	strd	r2, r3, [r4]

    // printf("Apparent Sun Longitude = %lf\n", apparent_sun_longitude);

    double apparent_siderealTime = getApparentSiderealTime(julianDay, julianCentury, nutation_longitude, true_obliquity);
 80042ca:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 80042ce:	461c      	mov	r4, r3
 80042d0:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 80042d4:	461a      	mov	r2, r3
 80042d6:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 80042da:	ed92 3b00 	vldr	d3, [r2]
 80042de:	ed13 2b02 	vldr	d2, [r3, #-8]
 80042e2:	f607 63b8 	addw	r3, r7, #3768	; 0xeb8
 80042e6:	ed93 1b00 	vldr	d1, [r3]
 80042ea:	f607 63c8 	addw	r3, r7, #3784	; 0xec8
 80042ee:	ed93 0b00 	vldr	d0, [r3]
 80042f2:	f7fe fc69 	bl	8002bc8 <getApparentSiderealTime>
 80042f6:	ed04 0b02 	vstr	d0, [r4, #-8]
    double sun_right_ascension = getSunRightAscension(apparent_sun_longitude, true_obliquity, geocentric_latitude);
 80042fa:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 80042fe:	461c      	mov	r4, r3
 8004300:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 8004304:	4619      	mov	r1, r3
 8004306:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800430a:	461a      	mov	r2, r3
 800430c:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 8004310:	ed91 2b00 	vldr	d2, [r1]
 8004314:	ed92 1b00 	vldr	d1, [r2]
 8004318:	ed93 0b00 	vldr	d0, [r3]
 800431c:	f7fe fd44 	bl	8002da8 <getSunRightAscension>
 8004320:	ed84 0b00 	vstr	d0, [r4]
    double sun_declination = getSunDeclination(apparent_sun_longitude, true_obliquity, geocentric_latitude);
 8004324:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 8004328:	461c      	mov	r4, r3
 800432a:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 800432e:	4619      	mov	r1, r3
 8004330:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 8004334:	461a      	mov	r2, r3
 8004336:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800433a:	ed91 2b00 	vldr	d2, [r1]
 800433e:	ed92 1b00 	vldr	d1, [r2]
 8004342:	ed93 0b00 	vldr	d0, [r3]
 8004346:	f7fe fe17 	bl	8002f78 <getSunDeclination>
 800434a:	ed04 0b02 	vstr	d0, [r4, #-8]
    /*
    printf("Geocentric Sun Right Ascension = %lf\n", sun_right_ascension);
    printf("Geocentric Sun Declination = %lf\n", sun_declination);
    */

    double observer_localHour_angle = getObserverLocalHourAngle(apparent_siderealTime, longitude, sun_right_ascension);
 800434e:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8004352:	f6a3 63ec 	subw	r3, r3, #3820	; 0xeec
 8004356:	6818      	ldr	r0, [r3, #0]
 8004358:	f7fc f8fe 	bl	8000558 <__aeabi_f2d>
 800435c:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 8004360:	461c      	mov	r4, r3
 8004362:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 8004366:	461a      	mov	r2, r3
 8004368:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800436c:	ed92 2b00 	vldr	d2, [r2]
 8004370:	ec41 0b11 	vmov	d1, r0, r1
 8004374:	ed13 0b02 	vldr	d0, [r3, #-8]
 8004378:	f7fe fe98 	bl	80030ac <getObserverLocalHourAngle>
 800437c:	ed84 0b00 	vstr	d0, [r4]

    // printf("Observer Local Hour Angle = %lf\n", observer_localHour_angle);

    double equatorial_horizontal_parallax = getEquatorialHorizontalParallax(earth_radiusVector);
 8004380:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 8004384:	461c      	mov	r4, r3
 8004386:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800438a:	ed93 0b00 	vldr	d0, [r3]
 800438e:	f7fe feff 	bl	8003190 <getEquatorialHorizontalParallax>
 8004392:	ed04 0b02 	vstr	d0, [r4, #-8]
    double u = helper_getU(latitude);
 8004396:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800439a:	f6a3 63e8 	subw	r3, r3, #3816	; 0xee8
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	f7fc f8da 	bl	8000558 <__aeabi_f2d>
 80043a4:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 80043a8:	461c      	mov	r4, r3
 80043aa:	ec41 0b10 	vmov	d0, r0, r1
 80043ae:	f7fe ff1b 	bl	80031e8 <helper_getU>
 80043b2:	ed84 0b00 	vstr	d0, [r4]
    double x = helper_getX(u, elevation, latitude);
 80043b6:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 80043ba:	f6a3 63e8 	subw	r3, r3, #3816	; 0xee8
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	f7fc f8ca 	bl	8000558 <__aeabi_f2d>
 80043c4:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 80043c8:	461c      	mov	r4, r3
 80043ca:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 80043ce:	ec41 0b12 	vmov	d2, r0, r1
 80043d2:	f607 62e8 	addw	r2, r7, #3816	; 0xee8
 80043d6:	ed92 1b00 	vldr	d1, [r2]
 80043da:	ed93 0b00 	vldr	d0, [r3]
 80043de:	f7fe ff2f 	bl	8003240 <helper_getX>
 80043e2:	ed04 0b02 	vstr	d0, [r4, #-8]
    double y = helper_getY(u, elevation, latitude);
 80043e6:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 80043ea:	f6a3 63e8 	subw	r3, r3, #3816	; 0xee8
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	f7fc f8b2 	bl	8000558 <__aeabi_f2d>
 80043f4:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 80043f8:	461c      	mov	r4, r3
 80043fa:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 80043fe:	ec41 0b12 	vmov	d2, r0, r1
 8004402:	f607 62e8 	addw	r2, r7, #3816	; 0xee8
 8004406:	ed92 1b00 	vldr	d1, [r2]
 800440a:	ed93 0b00 	vldr	d0, [r3]
 800440e:	f7fe ff73 	bl	80032f8 <helper_getY>
 8004412:	ed84 0b00 	vstr	d0, [r4]
    double parallax_sunright_ascension = getParallax_SunRightAscension(x, equatorial_horizontal_parallax, observer_localHour_angle, sun_declination);
 8004416:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800441a:	461c      	mov	r4, r3
 800441c:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 8004420:	4618      	mov	r0, r3
 8004422:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 8004426:	4619      	mov	r1, r3
 8004428:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800442c:	461a      	mov	r2, r3
 800442e:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8004432:	ed10 3b02 	vldr	d3, [r0, #-8]
 8004436:	ed91 2b00 	vldr	d2, [r1]
 800443a:	ed12 1b02 	vldr	d1, [r2, #-8]
 800443e:	ed13 0b02 	vldr	d0, [r3, #-8]
 8004442:	f7fe ffc1 	bl	80033c8 <getParallax_SunRightAscension>
 8004446:	ed04 0b02 	vstr	d0, [r4, #-8]
    double topocentric_sunright_ascension = getTopocentricSunRightAscension(sun_right_ascension, parallax_sunright_ascension);
 800444a:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800444e:	461c      	mov	r4, r3
 8004450:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 8004454:	461a      	mov	r2, r3
 8004456:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800445a:	ed12 1b02 	vldr	d1, [r2, #-8]
 800445e:	ed93 0b00 	vldr	d0, [r3]
 8004462:	f7ff f863 	bl	800352c <getTopocentricSunRightAscension>
 8004466:	ed84 0b00 	vstr	d0, [r4]
    double topcentric_sun_declination = getTopocentricSunDeclination(sun_declination, y, x, equatorial_horizontal_parallax, parallax_sunright_ascension, observer_localHour_angle);
 800446a:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800446e:	461c      	mov	r4, r3
 8004470:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 8004474:	461e      	mov	r6, r3
 8004476:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800447a:	461d      	mov	r5, r3
 800447c:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 8004480:	4618      	mov	r0, r3
 8004482:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8004486:	4619      	mov	r1, r3
 8004488:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800448c:	461a      	mov	r2, r3
 800448e:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 8004492:	ed96 5b00 	vldr	d5, [r6]
 8004496:	ed15 4b02 	vldr	d4, [r5, #-8]
 800449a:	ed10 3b02 	vldr	d3, [r0, #-8]
 800449e:	ed11 2b02 	vldr	d2, [r1, #-8]
 80044a2:	ed92 1b00 	vldr	d1, [r2]
 80044a6:	ed13 0b02 	vldr	d0, [r3, #-8]
 80044aa:	f7ff f85d 	bl	8003568 <getTopocentricSunDeclination>
 80044ae:	ed04 0b02 	vstr	d0, [r4, #-8]
    double topocentric_local_hour_angle = getTopocentricLocalHourAngle(observer_localHour_angle, parallax_sunright_ascension);
 80044b2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80044b6:	461c      	mov	r4, r3
 80044b8:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 80044bc:	461a      	mov	r2, r3
 80044be:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 80044c2:	ed12 1b02 	vldr	d1, [r2, #-8]
 80044c6:	ed93 0b00 	vldr	d0, [r3]
 80044ca:	f7ff f923 	bl	8003714 <getTopocentricLocalHourAngle>
 80044ce:	ed84 0b00 	vstr	d0, [r4]
    printf("Topocentric Sun Right Ascension = %lf\n", topocentric_sunright_ascension);
    printf("Topocentric Sun Declination = %lf\n", topcentric_sun_declination);
    printf("Topocentric Local Hour Angle = %lf\n", topocentric_local_hour_angle);
    */

    double e0 = getIncompleteElevationAngle(latitude, topcentric_sun_declination, topocentric_local_hour_angle);
 80044d2:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 80044d6:	f6a3 63e8 	subw	r3, r3, #3816	; 0xee8
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	f7fc f83c 	bl	8000558 <__aeabi_f2d>
 80044e0:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80044e4:	461c      	mov	r4, r3
 80044e6:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80044ea:	461a      	mov	r2, r3
 80044ec:	e00c      	b.n	8004508 <caller+0x840>
 80044ee:	bf00      	nop
 80044f0:	00000000 	.word	0x00000000
 80044f4:	40ac2000 	.word	0x40ac2000
 80044f8:	886594af 	.word	0x886594af
 80044fc:	40347d63 	.word	0x40347d63
 8004500:	08010778 	.word	0x08010778
 8004504:	40240000 	.word	0x40240000
 8004508:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800450c:	ed92 2b00 	vldr	d2, [r2]
 8004510:	ed13 1b02 	vldr	d1, [r3, #-8]
 8004514:	ec41 0b10 	vmov	d0, r0, r1
 8004518:	f7ff f91a 	bl	8003750 <getIncompleteElevationAngle>
 800451c:	ed04 0b02 	vstr	d0, [r4, #-8]
    double delta_e = getAtmosphericRefractionCorrection(pressure, temperature, e0);
 8004520:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8004524:	461c      	mov	r4, r3
 8004526:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800452a:	ed13 2b02 	vldr	d2, [r3, #-8]
 800452e:	f607 63d8 	addw	r3, r7, #3800	; 0xed8
 8004532:	ed93 1b00 	vldr	d1, [r3]
 8004536:	f507 636e 	add.w	r3, r7, #3808	; 0xee0
 800453a:	ed93 0b00 	vldr	d0, [r3]
 800453e:	f7ff f9a3 	bl	8003888 <getAtmosphericRefractionCorrection>
 8004542:	ed84 0b00 	vstr	d0, [r4]
    double topocentric_elevation_angle = getTopocentricElevationAngle(e0, delta_e);
 8004546:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800454a:	461c      	mov	r4, r3
 800454c:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8004550:	461a      	mov	r2, r3
 8004552:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8004556:	ed92 1b00 	vldr	d1, [r2]
 800455a:	ed13 0b02 	vldr	d0, [r3, #-8]
 800455e:	f7ff fa41 	bl	80039e4 <getTopocentricElevationAngle>
 8004562:	ed04 0b02 	vstr	d0, [r4, #-8]
    double topocentric_zenith_angle = getTopocentricZenithAngle(topocentric_elevation_angle);
 8004566:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 800456a:	461c      	mov	r4, r3
 800456c:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8004570:	ed13 0b02 	vldr	d0, [r3, #-8]
 8004574:	f7ff fa52 	bl	8003a1c <getTopocentricZenithAngle>
 8004578:	ed84 0b00 	vstr	d0, [r4]

    // printf("Topocentric Zenith Angle = %lf\n", topocentric_zenith_angle);

    double topocentric_azimuth_angle = getTopocentricAzimuthAngle(topocentric_local_hour_angle, latitude, topcentric_sun_declination);
 800457c:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8004580:	f6a3 63e8 	subw	r3, r3, #3816	; 0xee8
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	f7fb ffe7 	bl	8000558 <__aeabi_f2d>
 800458a:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 800458e:	461c      	mov	r4, r3
 8004590:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8004594:	461a      	mov	r2, r3
 8004596:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800459a:	ed12 2b02 	vldr	d2, [r2, #-8]
 800459e:	ec41 0b11 	vmov	d1, r0, r1
 80045a2:	ed93 0b00 	vldr	d0, [r3]
 80045a6:	f7ff fa57 	bl	8003a58 <getTopocentricAzimuthAngle>
 80045aa:	ed04 0b02 	vstr	d0, [r4, #-8]

    // printf("Topocentric Azimuth Angle = %lf\n", topocentric_azimuth_angle);

    double *angles = malloc(2 * sizeof(double));
 80045ae:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 80045b2:	f5a3 74fe 	sub.w	r4, r3, #508	; 0x1fc
 80045b6:	2010      	movs	r0, #16
 80045b8:	f006 f89a 	bl	800a6f0 <malloc>
 80045bc:	4603      	mov	r3, r0
 80045be:	6023      	str	r3, [r4, #0]
    angles[0] = topocentric_zenith_angle;
 80045c0:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 80045c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045c8:	6819      	ldr	r1, [r3, #0]
 80045ca:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 80045ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d2:	e9c1 2300 	strd	r2, r3, [r1]
    angles[1] = topocentric_azimuth_angle;
 80045d6:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 80045da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f103 0108 	add.w	r1, r3, #8
 80045e4:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 80045e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80045ec:	e9c1 2300 	strd	r2, r3, [r1]

    return angles;
 80045f0:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 80045f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045f8:	681b      	ldr	r3, [r3, #0]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	f607 67f4 	addw	r7, r7, #3828	; 0xef4
 8004600:	46bd      	mov	sp, r7
 8004602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004606:	bf00      	nop

08004608 <main>:
float stepAngle = 1.8;
int gearRatio = 40;
///////////////////////////////////

int main(void)
{
 8004608:	b590      	push	{r4, r7, lr}
 800460a:	b09f      	sub	sp, #124	; 0x7c
 800460c:	af02      	add	r7, sp, #8
	HAL_Init();
 800460e:	f002 fa77 	bl	8006b00 <HAL_Init>

	SystemClock_Config();
 8004612:	f001 fd65 	bl	80060e0 <SystemClock_Config>

	MX_GPIO_Init();
 8004616:	f001 fef3 	bl	8006400 <MX_GPIO_Init>
	MX_ADC1_Init();
 800461a:	f001 fdc9 	bl	80061b0 <MX_ADC1_Init>
	MX_I2C1_Init();
 800461e:	f001 fe19 	bl	8006254 <MX_I2C1_Init>
	MX_I2C3_Init();
 8004622:	f001 fe45 	bl	80062b0 <MX_I2C3_Init>
	MX_TIM1_Init();
 8004626:	f001 fe71 	bl	800630c <MX_TIM1_Init>
	MX_USART1_UART_Init();
 800462a:	f001 febf 	bl	80063ac <MX_USART1_UART_Init>


	///////////////////////////////////////////////////////////////
	//GPS
	int lat = -1;
 800462e:	f04f 33ff 	mov.w	r3, #4294967295
 8004632:	623b      	str	r3, [r7, #32]
	int longi = -1;
 8004634:	f04f 33ff 	mov.w	r3, #4294967295
 8004638:	61fb      	str	r3, [r7, #28]
	int date = -1;
 800463a:	f04f 33ff 	mov.w	r3, #4294967295
 800463e:	61bb      	str	r3, [r7, #24]
	char longiDir = 'x';
 8004640:	2378      	movs	r3, #120	; 0x78
 8004642:	75fb      	strb	r3, [r7, #23]
	char latDir = 'x';
 8004644:	2378      	movs	r3, #120	; 0x78
 8004646:	75bb      	strb	r3, [r7, #22]
	int time = -1;
 8004648:	f04f 33ff 	mov.w	r3, #4294967295
 800464c:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < 100; i++) {
 800464e:	2300      	movs	r3, #0
 8004650:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004652:	e013      	b.n	800467c <main+0x74>
	 getGpsData(&lat, &longi, &time, &date, &longiDir, &latDir);
 8004654:	f107 0418 	add.w	r4, r7, #24
 8004658:	f107 0210 	add.w	r2, r7, #16
 800465c:	f107 011c 	add.w	r1, r7, #28
 8004660:	f107 0020 	add.w	r0, r7, #32
 8004664:	f107 0316 	add.w	r3, r7, #22
 8004668:	9301      	str	r3, [sp, #4]
 800466a:	f107 0317 	add.w	r3, r7, #23
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	4623      	mov	r3, r4
 8004672:	f000 feff 	bl	8005474 <getGpsData>
	for (int i = 0; i < 100; i++) {
 8004676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004678:	3301      	adds	r3, #1
 800467a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800467c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800467e:	2b63      	cmp	r3, #99	; 0x63
 8004680:	dde8      	ble.n	8004654 <main+0x4c>
	}
	lat /= 100;
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	4ac1      	ldr	r2, [pc, #772]	; (800498c <main+0x384>)
 8004686:	fb82 1203 	smull	r1, r2, r2, r3
 800468a:	1152      	asrs	r2, r2, #5
 800468c:	17db      	asrs	r3, r3, #31
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	623b      	str	r3, [r7, #32]
	longi /= 100;
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	4abd      	ldr	r2, [pc, #756]	; (800498c <main+0x384>)
 8004696:	fb82 1203 	smull	r1, r2, r2, r3
 800469a:	1152      	asrs	r2, r2, #5
 800469c:	17db      	asrs	r3, r3, #31
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	61fb      	str	r3, [r7, #28]

	//////////////////////////////////////////////////////////////
	//LIGHT SENSOR
	setupLightSensor(lightAddressGND);
 80046a2:	4bbb      	ldr	r3, [pc, #748]	; (8004990 <main+0x388>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fdd2 	bl	8005250 <setupLightSensor>
	setupLightSensor(lightAddressVDD);
 80046ac:	4bb9      	ldr	r3, [pc, #740]	; (8004994 <main+0x38c>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fdcd 	bl	8005250 <setupLightSensor>
	setupLightSensor(lightAddressSDA);
 80046b6:	4bb8      	ldr	r3, [pc, #736]	; (8004998 <main+0x390>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fdc8 	bl	8005250 <setupLightSensor>
	setupLightSensor(lightAddressSCL);
 80046c0:	4bb6      	ldr	r3, [pc, #728]	; (800499c <main+0x394>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fdc3 	bl	8005250 <setupLightSensor>

	//////////////////////////////////////////////////////////////
	//SOLAR PANEL VOLTAGE
	float solarPanelVoltage = 0;
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	657b      	str	r3, [r7, #84]	; 0x54

	//////////////////////////////////////////////////////////////
	//MOTOR CONTROL
	HAL_TIM_Base_Start(&htim1);
 80046d0:	48b3      	ldr	r0, [pc, #716]	; (80049a0 <main+0x398>)
 80046d2:	f004 fe07 	bl	80092e4 <HAL_TIM_Base_Start>
	///////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////
	//If no valid data -> gamer Mode On

	if (lat == '-1' || longi == '-1' || time == '-1' || date == '-1' ||
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	f642 5231 	movw	r2, #11569	; 0x2d31
 80046dc:	4293      	cmp	r3, r2
 80046de:	d014      	beq.n	800470a <main+0x102>
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	f642 5231 	movw	r2, #11569	; 0x2d31
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00f      	beq.n	800470a <main+0x102>
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f642 5231 	movw	r2, #11569	; 0x2d31
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00a      	beq.n	800470a <main+0x102>
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	f642 5231 	movw	r2, #11569	; 0x2d31
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d005      	beq.n	800470a <main+0x102>
	    longiDir == 'x' || latDir == 'x') {
 80046fe:	7dfb      	ldrb	r3, [r7, #23]
	if (lat == '-1' || longi == '-1' || time == '-1' || date == '-1' ||
 8004700:	2b78      	cmp	r3, #120	; 0x78
 8004702:	d002      	beq.n	800470a <main+0x102>
	    longiDir == 'x' || latDir == 'x') {
 8004704:	7dbb      	ldrb	r3, [r7, #22]
 8004706:	2b78      	cmp	r3, #120	; 0x78
 8004708:	d101      	bne.n	800470e <main+0x106>
		lightFollowOnlyMode();
 800470a:	f000 fb41 	bl	8004d90 <lightFollowOnlyMode>

	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	//MAGNETOMETER
	float xCal, yCal, zCal;
	xCal = 0;
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]
	yCal = 0;
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	60bb      	str	r3, [r7, #8]
	zCal = 0;
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	607b      	str	r3, [r7, #4]
	setupMag();
 8004720:	f001 fa0c 	bl	8005b3c <setupMag>
	hardIronCal(&xCal, &yCal, &zCal);
 8004724:	1d3a      	adds	r2, r7, #4
 8004726:	f107 0108 	add.w	r1, r7, #8
 800472a:	f107 030c 	add.w	r3, r7, #12
 800472e:	4618      	mov	r0, r3
 8004730:	f001 fb36 	bl	8005da0 <hardIronCal>

//	//Direction Angle
	float direction = magnetometerData(xCal, yCal, zCal);
 8004734:	edd7 7a03 	vldr	s15, [r7, #12]
 8004738:	ed97 7a02 	vldr	s14, [r7, #8]
 800473c:	edd7 6a01 	vldr	s13, [r7, #4]
 8004740:	eeb0 1a66 	vmov.f32	s2, s13
 8004744:	eef0 0a47 	vmov.f32	s1, s14
 8004748:	eeb0 0a67 	vmov.f32	s0, s15
 800474c:	f001 f99e 	bl	8005a8c <magnetometerData>
 8004750:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50

	//Finding Azimuth and Zenith Angles for initialization
	float sec = time % 100;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	4a8d      	ldr	r2, [pc, #564]	; (800498c <main+0x384>)
 8004758:	fb82 1203 	smull	r1, r2, r2, r3
 800475c:	1151      	asrs	r1, r2, #5
 800475e:	17da      	asrs	r2, r3, #31
 8004760:	1a8a      	subs	r2, r1, r2
 8004762:	2164      	movs	r1, #100	; 0x64
 8004764:	fb01 f202 	mul.w	r2, r1, r2
 8004768:	1a9a      	subs	r2, r3, r2
 800476a:	ee07 2a90 	vmov	s15, r2
 800476e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004772:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	time /= 100;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4a84      	ldr	r2, [pc, #528]	; (800498c <main+0x384>)
 800477a:	fb82 1203 	smull	r1, r2, r2, r3
 800477e:	1152      	asrs	r2, r2, #5
 8004780:	17db      	asrs	r3, r3, #31
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	613b      	str	r3, [r7, #16]
	float min = time % 100;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	4a80      	ldr	r2, [pc, #512]	; (800498c <main+0x384>)
 800478a:	fb82 1203 	smull	r1, r2, r2, r3
 800478e:	1151      	asrs	r1, r2, #5
 8004790:	17da      	asrs	r2, r3, #31
 8004792:	1a8a      	subs	r2, r1, r2
 8004794:	2164      	movs	r1, #100	; 0x64
 8004796:	fb01 f202 	mul.w	r2, r1, r2
 800479a:	1a9a      	subs	r2, r3, r2
 800479c:	ee07 2a90 	vmov	s15, r2
 80047a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047a4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	time /= 100;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4a78      	ldr	r2, [pc, #480]	; (800498c <main+0x384>)
 80047ac:	fb82 1203 	smull	r1, r2, r2, r3
 80047b0:	1152      	asrs	r2, r2, #5
 80047b2:	17db      	asrs	r3, r3, #31
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	613b      	str	r3, [r7, #16]
    float hour = (time % 100) + 5;
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4b74      	ldr	r3, [pc, #464]	; (800498c <main+0x384>)
 80047bc:	fb83 1302 	smull	r1, r3, r3, r2
 80047c0:	1159      	asrs	r1, r3, #5
 80047c2:	17d3      	asrs	r3, r2, #31
 80047c4:	1acb      	subs	r3, r1, r3
 80047c6:	2164      	movs	r1, #100	; 0x64
 80047c8:	fb01 f303 	mul.w	r3, r1, r3
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	3305      	adds	r3, #5
 80047d0:	ee07 3a90 	vmov	s15, r3
 80047d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047d8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

    float year = (date % 100) + 2000;
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4b6b      	ldr	r3, [pc, #428]	; (800498c <main+0x384>)
 80047e0:	fb83 1302 	smull	r1, r3, r3, r2
 80047e4:	1159      	asrs	r1, r3, #5
 80047e6:	17d3      	asrs	r3, r2, #31
 80047e8:	1acb      	subs	r3, r1, r3
 80047ea:	2164      	movs	r1, #100	; 0x64
 80047ec:	fb01 f303 	mul.w	r3, r1, r3
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80047f6:	ee07 3a90 	vmov	s15, r3
 80047fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047fe:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    date /= 100;
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	4a61      	ldr	r2, [pc, #388]	; (800498c <main+0x384>)
 8004806:	fb82 1203 	smull	r1, r2, r2, r3
 800480a:	1152      	asrs	r2, r2, #5
 800480c:	17db      	asrs	r3, r3, #31
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	61bb      	str	r3, [r7, #24]
    float month = date % 100;
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	4a5d      	ldr	r2, [pc, #372]	; (800498c <main+0x384>)
 8004816:	fb82 1203 	smull	r1, r2, r2, r3
 800481a:	1151      	asrs	r1, r2, #5
 800481c:	17da      	asrs	r2, r3, #31
 800481e:	1a8a      	subs	r2, r1, r2
 8004820:	2164      	movs	r1, #100	; 0x64
 8004822:	fb01 f202 	mul.w	r2, r1, r2
 8004826:	1a9a      	subs	r2, r3, r2
 8004828:	ee07 2a90 	vmov	s15, r2
 800482c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004830:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    date /= 100;
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	4a55      	ldr	r2, [pc, #340]	; (800498c <main+0x384>)
 8004838:	fb82 1203 	smull	r1, r2, r2, r3
 800483c:	1152      	asrs	r2, r2, #5
 800483e:	17db      	asrs	r3, r3, #31
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	61bb      	str	r3, [r7, #24]
    float day = date % 100;
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	4a51      	ldr	r2, [pc, #324]	; (800498c <main+0x384>)
 8004848:	fb82 1203 	smull	r1, r2, r2, r3
 800484c:	1151      	asrs	r1, r2, #5
 800484e:	17da      	asrs	r2, r3, #31
 8004850:	1a8a      	subs	r2, r1, r2
 8004852:	2164      	movs	r1, #100	; 0x64
 8004854:	fb01 f202 	mul.w	r2, r1, r2
 8004858:	1a9a      	subs	r2, r3, r2
 800485a:	ee07 2a90 	vmov	s15, r2
 800485e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004862:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

    if (longiDir == 'W') {
 8004866:	7dfb      	ldrb	r3, [r7, #23]
 8004868:	2b57      	cmp	r3, #87	; 0x57
 800486a:	d102      	bne.n	8004872 <main+0x26a>
    	longi *= -1;
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	425b      	negs	r3, r3
 8004870:	61fb      	str	r3, [r7, #28]
    }
    if (latDir == 'S') {
 8004872:	7dbb      	ldrb	r3, [r7, #22]
 8004874:	2b53      	cmp	r3, #83	; 0x53
 8004876:	d102      	bne.n	800487e <main+0x276>
    	lat *= -1;
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	425b      	negs	r3, r3
 800487c:	623b      	str	r3, [r7, #32]
    }

	double *angles = caller(day, year, month, hour, min, sec, 0, lat, longi);
 800487e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004882:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8004886:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800488a:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 800488e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004892:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	ee07 3a90 	vmov	s15, r3
 800489c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	ee07 3a10 	vmov	s14, r3
 80048a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80048aa:	eef0 2a47 	vmov.f32	s5, s14
 80048ae:	eeb0 2a67 	vmov.f32	s4, s15
 80048b2:	eddf 1a3c 	vldr	s3, [pc, #240]	; 80049a4 <main+0x39c>
 80048b6:	ed97 1a13 	vldr	s2, [r7, #76]	; 0x4c
 80048ba:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 80048be:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 80048c2:	ee15 2a90 	vmov	r2, s11
 80048c6:	ee16 1a10 	vmov	r1, s12
 80048ca:	ee16 0a90 	vmov	r0, s13
 80048ce:	f7ff f9fb 	bl	8003cc8 <caller>
 80048d2:	6378      	str	r0, [r7, #52]	; 0x34
	int zenithAngle = ((int)angles[0]) % 90;
 80048d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048da:	4610      	mov	r0, r2
 80048dc:	4619      	mov	r1, r3
 80048de:	f7fc f943 	bl	8000b68 <__aeabi_d2iz>
 80048e2:	4603      	mov	r3, r0
 80048e4:	4a30      	ldr	r2, [pc, #192]	; (80049a8 <main+0x3a0>)
 80048e6:	fb82 1203 	smull	r1, r2, r2, r3
 80048ea:	441a      	add	r2, r3
 80048ec:	1191      	asrs	r1, r2, #6
 80048ee:	17da      	asrs	r2, r3, #31
 80048f0:	1a8a      	subs	r2, r1, r2
 80048f2:	215a      	movs	r1, #90	; 0x5a
 80048f4:	fb01 f202 	mul.w	r2, r1, r2
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	633b      	str	r3, [r7, #48]	; 0x30
	int azimuthAngle = ((int) angles[1]) % 180;
 80048fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fe:	3308      	adds	r3, #8
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	4610      	mov	r0, r2
 8004906:	4619      	mov	r1, r3
 8004908:	f7fc f92e 	bl	8000b68 <__aeabi_d2iz>
 800490c:	4603      	mov	r3, r0
 800490e:	4a26      	ldr	r2, [pc, #152]	; (80049a8 <main+0x3a0>)
 8004910:	fb82 1203 	smull	r1, r2, r2, r3
 8004914:	441a      	add	r2, r3
 8004916:	11d1      	asrs	r1, r2, #7
 8004918:	17da      	asrs	r2, r3, #31
 800491a:	1a8a      	subs	r2, r1, r2
 800491c:	21b4      	movs	r1, #180	; 0xb4
 800491e:	fb01 f202 	mul.w	r2, r1, r2
 8004922:	1a9b      	subs	r3, r3, r2
 8004924:	62fb      	str	r3, [r7, #44]	; 0x2c

	solarPanelVoltage = getSolarPanelVoltage();
 8004926:	f000 fd4b 	bl	80053c0 <getSolarPanelVoltage>
 800492a:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
	bluetoothSend(solarPanelVoltage, direction, lat, longi);
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	ee07 3a90 	vmov	s15, r3
 8004934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	ee07 3a10 	vmov	s14, r3
 800493e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004942:	eef0 1a47 	vmov.f32	s3, s14
 8004946:	eeb0 1a67 	vmov.f32	s2, s15
 800494a:	edd7 0a14 	vldr	s1, [r7, #80]	; 0x50
 800494e:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8004952:	f000 fad5 	bl	8004f00 <bluetoothSend>

	//Rotate to match azimuth angle

	int rotationSusanAngle = azimuthAngle - direction;
 8004956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004958:	ee07 3a90 	vmov	s15, r3
 800495c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004960:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800496c:	ee17 3a90 	vmov	r3, s15
 8004970:	66bb      	str	r3, [r7, #104]	; 0x68
	setupMotorSusan();
 8004972:	f000 fc45 	bl	8005200 <setupMotorSusan>
	if (rotationSusanAngle < 0) {
 8004976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004978:	2b00      	cmp	r3, #0
 800497a:	da17      	bge.n	80049ac <main+0x3a4>
		setCounterClockwiseSusan();
 800497c:	f000 fc06 	bl	800518c <setCounterClockwiseSusan>
		rotationSusanAngle += 360;
 8004980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004982:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004986:	66bb      	str	r3, [r7, #104]	; 0x68
 8004988:	e012      	b.n	80049b0 <main+0x3a8>
 800498a:	bf00      	nop
 800498c:	51eb851f 	.word	0x51eb851f
 8004990:	2000000a 	.word	0x2000000a
 8004994:	2000000b 	.word	0x2000000b
 8004998:	2000000c 	.word	0x2000000c
 800499c:	2000000d 	.word	0x2000000d
 80049a0:	2000155c 	.word	0x2000155c
 80049a4:	00000000 	.word	0x00000000
 80049a8:	b60b60b7 	.word	0xb60b60b7
	}
	else {
		setClockwiseSusan();
 80049ac:	f000 fbd6 	bl	800515c <setClockwiseSusan>
	}
	rotateMotorSusan(rotationSusanAngle * gearRatio);
 80049b0:	4bbe      	ldr	r3, [pc, #760]	; (8004cac <main+0x6a4>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049b6:	fb02 f303 	mul.w	r3, r2, r3
 80049ba:	ee07 3a90 	vmov	s15, r3
 80049be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049c2:	eeb0 0a67 	vmov.f32	s0, s15
 80049c6:	f000 fb81 	bl	80050cc <rotateMotorSusan>
	turnOffMotorSusan();
 80049ca:	f000 fc35 	bl	8005238 <turnOffMotorSusan>

	//Have always the same initial state
	float currentPosition = 90;
 80049ce:	4bb8      	ldr	r3, [pc, #736]	; (8004cb0 <main+0x6a8>)
 80049d0:	667b      	str	r3, [r7, #100]	; 0x64
	float rotationRodAngle  = currentPosition - zenithAngle;
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	ee07 3a90 	vmov	s15, r3
 80049d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049dc:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80049e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049e4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	currentPosition = rotationRodAngle;
 80049e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ea:	667b      	str	r3, [r7, #100]	; 0x64
	setupMotorRod();
 80049ec:	f000 fbf4 	bl	80051d8 <setupMotorRod>
	setClockwiseRod();
 80049f0:	f000 fba8 	bl	8005144 <setClockwiseRod>
	rotateMotorRod(rotationRodAngle * gearRatio); //multiply by t10 due to gear ratio
 80049f4:	4bad      	ldr	r3, [pc, #692]	; (8004cac <main+0x6a4>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	ee07 3a90 	vmov	s15, r3
 80049fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a00:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a08:	eeb0 0a67 	vmov.f32	s0, s15
 8004a0c:	f000 fb20 	bl	8005050 <rotateMotorRod>
	turnOffMotorRod();
 8004a10:	f000 fc06 	bl	8005220 <turnOffMotorRod>

	int counter = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	663b      	str	r3, [r7, #96]	; 0x60
	while (1)
	{
		//Adjust every 5 minutes
		if ((HAL_GetTick() - counter) > 300000) {
 8004a18:	f002 f8d8 	bl	8006bcc <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	4aa4      	ldr	r2, [pc, #656]	; (8004cb4 <main+0x6ac>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d9f7      	bls.n	8004a18 <main+0x410>
			for (int i = 0; i < 50; i++) {
 8004a28:	2300      	movs	r3, #0
 8004a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a2c:	e013      	b.n	8004a56 <main+0x44e>
			 getGpsData(&lat, &longi, &time, &date, &longiDir, &latDir);
 8004a2e:	f107 0418 	add.w	r4, r7, #24
 8004a32:	f107 0210 	add.w	r2, r7, #16
 8004a36:	f107 011c 	add.w	r1, r7, #28
 8004a3a:	f107 0020 	add.w	r0, r7, #32
 8004a3e:	f107 0316 	add.w	r3, r7, #22
 8004a42:	9301      	str	r3, [sp, #4]
 8004a44:	f107 0317 	add.w	r3, r7, #23
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	4623      	mov	r3, r4
 8004a4c:	f000 fd12 	bl	8005474 <getGpsData>
			for (int i = 0; i < 50; i++) {
 8004a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a52:	3301      	adds	r3, #1
 8004a54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a58:	2b31      	cmp	r3, #49	; 0x31
 8004a5a:	dde8      	ble.n	8004a2e <main+0x426>
			}
			lat /= 100;
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	4a96      	ldr	r2, [pc, #600]	; (8004cb8 <main+0x6b0>)
 8004a60:	fb82 1203 	smull	r1, r2, r2, r3
 8004a64:	1152      	asrs	r2, r2, #5
 8004a66:	17db      	asrs	r3, r3, #31
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	623b      	str	r3, [r7, #32]
			longi /= 100;
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	4a92      	ldr	r2, [pc, #584]	; (8004cb8 <main+0x6b0>)
 8004a70:	fb82 1203 	smull	r1, r2, r2, r3
 8004a74:	1152      	asrs	r2, r2, #5
 8004a76:	17db      	asrs	r3, r3, #31
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	61fb      	str	r3, [r7, #28]

			if (longiDir == 'W') {
 8004a7c:	7dfb      	ldrb	r3, [r7, #23]
 8004a7e:	2b57      	cmp	r3, #87	; 0x57
 8004a80:	d102      	bne.n	8004a88 <main+0x480>
				longi *= -1;
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	425b      	negs	r3, r3
 8004a86:	61fb      	str	r3, [r7, #28]
			}
			if (latDir == 'S') {
 8004a88:	7dbb      	ldrb	r3, [r7, #22]
 8004a8a:	2b53      	cmp	r3, #83	; 0x53
 8004a8c:	d102      	bne.n	8004a94 <main+0x48c>
				lat *= -1;
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	425b      	negs	r3, r3
 8004a92:	623b      	str	r3, [r7, #32]
			}

			direction = magnetometerData(xCal, yCal, zCal);
 8004a94:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a98:	ed97 7a02 	vldr	s14, [r7, #8]
 8004a9c:	edd7 6a01 	vldr	s13, [r7, #4]
 8004aa0:	eeb0 1a66 	vmov.f32	s2, s13
 8004aa4:	eef0 0a47 	vmov.f32	s1, s14
 8004aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8004aac:	f000 ffee 	bl	8005a8c <magnetometerData>
 8004ab0:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
			sec = time % 100;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	4a80      	ldr	r2, [pc, #512]	; (8004cb8 <main+0x6b0>)
 8004ab8:	fb82 1203 	smull	r1, r2, r2, r3
 8004abc:	1151      	asrs	r1, r2, #5
 8004abe:	17da      	asrs	r2, r3, #31
 8004ac0:	1a8a      	subs	r2, r1, r2
 8004ac2:	2164      	movs	r1, #100	; 0x64
 8004ac4:	fb01 f202 	mul.w	r2, r1, r2
 8004ac8:	1a9a      	subs	r2, r3, r2
 8004aca:	ee07 2a90 	vmov	s15, r2
 8004ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ad2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
			time /= 100;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	4a77      	ldr	r2, [pc, #476]	; (8004cb8 <main+0x6b0>)
 8004ada:	fb82 1203 	smull	r1, r2, r2, r3
 8004ade:	1152      	asrs	r2, r2, #5
 8004ae0:	17db      	asrs	r3, r3, #31
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	613b      	str	r3, [r7, #16]
			min = time % 100;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	4a73      	ldr	r2, [pc, #460]	; (8004cb8 <main+0x6b0>)
 8004aea:	fb82 1203 	smull	r1, r2, r2, r3
 8004aee:	1151      	asrs	r1, r2, #5
 8004af0:	17da      	asrs	r2, r3, #31
 8004af2:	1a8a      	subs	r2, r1, r2
 8004af4:	2164      	movs	r1, #100	; 0x64
 8004af6:	fb01 f202 	mul.w	r2, r1, r2
 8004afa:	1a9a      	subs	r2, r3, r2
 8004afc:	ee07 2a90 	vmov	s15, r2
 8004b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b04:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			time /= 100;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4a6b      	ldr	r2, [pc, #428]	; (8004cb8 <main+0x6b0>)
 8004b0c:	fb82 1203 	smull	r1, r2, r2, r3
 8004b10:	1152      	asrs	r2, r2, #5
 8004b12:	17db      	asrs	r3, r3, #31
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	613b      	str	r3, [r7, #16]
			hour = time % 100;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	4a67      	ldr	r2, [pc, #412]	; (8004cb8 <main+0x6b0>)
 8004b1c:	fb82 1203 	smull	r1, r2, r2, r3
 8004b20:	1151      	asrs	r1, r2, #5
 8004b22:	17da      	asrs	r2, r3, #31
 8004b24:	1a8a      	subs	r2, r1, r2
 8004b26:	2164      	movs	r1, #100	; 0x64
 8004b28:	fb01 f202 	mul.w	r2, r1, r2
 8004b2c:	1a9a      	subs	r2, r3, r2
 8004b2e:	ee07 2a90 	vmov	s15, r2
 8004b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b36:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

			year = (date % 100) + 2000;
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	4b5e      	ldr	r3, [pc, #376]	; (8004cb8 <main+0x6b0>)
 8004b3e:	fb83 1302 	smull	r1, r3, r3, r2
 8004b42:	1159      	asrs	r1, r3, #5
 8004b44:	17d3      	asrs	r3, r2, #31
 8004b46:	1acb      	subs	r3, r1, r3
 8004b48:	2164      	movs	r1, #100	; 0x64
 8004b4a:	fb01 f303 	mul.w	r3, r1, r3
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004b54:	ee07 3a90 	vmov	s15, r3
 8004b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b5c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
			date /= 100;
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	4a55      	ldr	r2, [pc, #340]	; (8004cb8 <main+0x6b0>)
 8004b64:	fb82 1203 	smull	r1, r2, r2, r3
 8004b68:	1152      	asrs	r2, r2, #5
 8004b6a:	17db      	asrs	r3, r3, #31
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	61bb      	str	r3, [r7, #24]
			month = date % 100;
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	4a51      	ldr	r2, [pc, #324]	; (8004cb8 <main+0x6b0>)
 8004b74:	fb82 1203 	smull	r1, r2, r2, r3
 8004b78:	1151      	asrs	r1, r2, #5
 8004b7a:	17da      	asrs	r2, r3, #31
 8004b7c:	1a8a      	subs	r2, r1, r2
 8004b7e:	2164      	movs	r1, #100	; 0x64
 8004b80:	fb01 f202 	mul.w	r2, r1, r2
 8004b84:	1a9a      	subs	r2, r3, r2
 8004b86:	ee07 2a90 	vmov	s15, r2
 8004b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b8e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			date /= 100;
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	4a48      	ldr	r2, [pc, #288]	; (8004cb8 <main+0x6b0>)
 8004b96:	fb82 1203 	smull	r1, r2, r2, r3
 8004b9a:	1152      	asrs	r2, r2, #5
 8004b9c:	17db      	asrs	r3, r3, #31
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	61bb      	str	r3, [r7, #24]
			day = date % 100;
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	4a44      	ldr	r2, [pc, #272]	; (8004cb8 <main+0x6b0>)
 8004ba6:	fb82 1203 	smull	r1, r2, r2, r3
 8004baa:	1151      	asrs	r1, r2, #5
 8004bac:	17da      	asrs	r2, r3, #31
 8004bae:	1a8a      	subs	r2, r1, r2
 8004bb0:	2164      	movs	r1, #100	; 0x64
 8004bb2:	fb01 f202 	mul.w	r2, r1, r2
 8004bb6:	1a9a      	subs	r2, r3, r2
 8004bb8:	ee07 2a90 	vmov	s15, r2
 8004bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bc0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

			angles = caller(day, year, month, hour, min, sec, 0, lat, longi);
 8004bc4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004bc8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8004bcc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004bd0:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8004bd4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004bd8:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	ee07 3a90 	vmov	s15, r3
 8004be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	ee07 3a10 	vmov	s14, r3
 8004bec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004bf0:	eef0 2a47 	vmov.f32	s5, s14
 8004bf4:	eeb0 2a67 	vmov.f32	s4, s15
 8004bf8:	eddf 1a30 	vldr	s3, [pc, #192]	; 8004cbc <main+0x6b4>
 8004bfc:	ed97 1a13 	vldr	s2, [r7, #76]	; 0x4c
 8004c00:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 8004c04:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8004c08:	ee15 2a90 	vmov	r2, s11
 8004c0c:	ee16 1a10 	vmov	r1, s12
 8004c10:	ee16 0a90 	vmov	r0, s13
 8004c14:	f7ff f858 	bl	8003cc8 <caller>
 8004c18:	6378      	str	r0, [r7, #52]	; 0x34
			zenithAngle = ((int) angles[0]) % 90;
 8004c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	4610      	mov	r0, r2
 8004c22:	4619      	mov	r1, r3
 8004c24:	f7fb ffa0 	bl	8000b68 <__aeabi_d2iz>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	4a25      	ldr	r2, [pc, #148]	; (8004cc0 <main+0x6b8>)
 8004c2c:	fb82 1203 	smull	r1, r2, r2, r3
 8004c30:	441a      	add	r2, r3
 8004c32:	1191      	asrs	r1, r2, #6
 8004c34:	17da      	asrs	r2, r3, #31
 8004c36:	1a8a      	subs	r2, r1, r2
 8004c38:	215a      	movs	r1, #90	; 0x5a
 8004c3a:	fb01 f202 	mul.w	r2, r1, r2
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	633b      	str	r3, [r7, #48]	; 0x30
			azimuthAngle = ((int) angles[1]) % 180;
 8004c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c44:	3308      	adds	r3, #8
 8004c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	f7fb ff8b 	bl	8000b68 <__aeabi_d2iz>
 8004c52:	4603      	mov	r3, r0
 8004c54:	4a1a      	ldr	r2, [pc, #104]	; (8004cc0 <main+0x6b8>)
 8004c56:	fb82 1203 	smull	r1, r2, r2, r3
 8004c5a:	441a      	add	r2, r3
 8004c5c:	11d1      	asrs	r1, r2, #7
 8004c5e:	17da      	asrs	r2, r3, #31
 8004c60:	1a8a      	subs	r2, r1, r2
 8004c62:	21b4      	movs	r1, #180	; 0xb4
 8004c64:	fb01 f202 	mul.w	r2, r1, r2
 8004c68:	1a9b      	subs	r3, r3, r2
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c

			//Rotate to match azimuth angle
			setupMotorSusan();
 8004c6c:	f000 fac8 	bl	8005200 <setupMotorSusan>
			float rotationSusanAngle = azimuthAngle - direction;
 8004c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c72:	ee07 3a90 	vmov	s15, r3
 8004c76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c7a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004c7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c82:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
			if (rotationSusanAngle < 0) {
 8004c86:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004c8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c92:	d519      	bpl.n	8004cc8 <main+0x6c0>
				setCounterClockwiseSusan();
 8004c94:	f000 fa7a 	bl	800518c <setCounterClockwiseSusan>
				rotationSusanAngle += 360;
 8004c98:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004c9c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004cc4 <main+0x6bc>
 8004ca0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ca4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8004ca8:	e010      	b.n	8004ccc <main+0x6c4>
 8004caa:	bf00      	nop
 8004cac:	20000018 	.word	0x20000018
 8004cb0:	42b40000 	.word	0x42b40000
 8004cb4:	000493e0 	.word	0x000493e0
 8004cb8:	51eb851f 	.word	0x51eb851f
 8004cbc:	00000000 	.word	0x00000000
 8004cc0:	b60b60b7 	.word	0xb60b60b7
 8004cc4:	43b40000 	.word	0x43b40000
			}
			else {
				setClockwiseSusan();
 8004cc8:	f000 fa48 	bl	800515c <setClockwiseSusan>
			}
			rotateMotorSusan(rotationSusanAngle * gearRatio);
 8004ccc:	4b2f      	ldr	r3, [pc, #188]	; (8004d8c <main+0x784>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	ee07 3a90 	vmov	s15, r3
 8004cd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cd8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ce4:	f000 f9f2 	bl	80050cc <rotateMotorSusan>
			turnOffMotorSusan();
 8004ce8:	f000 faa6 	bl	8005238 <turnOffMotorSusan>

			//Have always the same initial state
			float desiredAngle = 90 - zenithAngle;
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cfa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			rotationRodAngle  = currentPosition - desiredAngle;
 8004cfe:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8004d02:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004d06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d0a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			setupMotorRod();
 8004d0e:	f000 fa63 	bl	80051d8 <setupMotorRod>
			if (currentPosition < desiredAngle) {
 8004d12:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8004d16:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004d1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d22:	d502      	bpl.n	8004d2a <main+0x722>
				setClockwiseRod();
 8004d24:	f000 fa0e 	bl	8005144 <setClockwiseRod>
 8004d28:	e001      	b.n	8004d2e <main+0x726>
			}
			else {
				setCounterClockwiseRod();
 8004d2a:	f000 fa23 	bl	8005174 <setCounterClockwiseRod>
			}
			rotateMotorRod(rotationRodAngle * gearRatio); //multiply by t10 due to gear ratio
 8004d2e:	4b17      	ldr	r3, [pc, #92]	; (8004d8c <main+0x784>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d3a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d42:	eeb0 0a67 	vmov.f32	s0, s15
 8004d46:	f000 f983 	bl	8005050 <rotateMotorRod>
			turnOffMotorRod();
 8004d4a:	f000 fa69 	bl	8005220 <turnOffMotorRod>
			currentPosition = desiredAngle;
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	667b      	str	r3, [r7, #100]	; 0x64

			counter = HAL_GetTick();
 8004d52:	f001 ff3b 	bl	8006bcc <HAL_GetTick>
 8004d56:	4603      	mov	r3, r0
 8004d58:	663b      	str	r3, [r7, #96]	; 0x60

			solarPanelVoltage = getSolarPanelVoltage();
 8004d5a:	f000 fb31 	bl	80053c0 <getSolarPanelVoltage>
 8004d5e:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
			bluetoothSend(solarPanelVoltage, direction, lat, longi);
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	ee07 3a90 	vmov	s15, r3
 8004d68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	ee07 3a10 	vmov	s14, r3
 8004d72:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004d76:	eef0 1a47 	vmov.f32	s3, s14
 8004d7a:	eeb0 1a67 	vmov.f32	s2, s15
 8004d7e:	edd7 0a14 	vldr	s1, [r7, #80]	; 0x50
 8004d82:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8004d86:	f000 f8bb 	bl	8004f00 <bluetoothSend>
		if ((HAL_GetTick() - counter) > 300000) {
 8004d8a:	e645      	b.n	8004a18 <main+0x410>
 8004d8c:	20000018 	.word	0x20000018

08004d90 <lightFollowOnlyMode>:
		}
	}
}

void lightFollowOnlyMode() {
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
	//Later on, if everything's based on interrupts, we deactivate all interrupts
	int motorCounter = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
	while (1) {
		if ((HAL_GetTick() - motorCounter) > 500) {
 8004d9a:	f001 ff17 	bl	8006bcc <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004da8:	f240 808f 	bls.w	8004eca <lightFollowOnlyMode+0x13a>
			HAL_GPIO_WritePin(SMART_PANEL_LED_PORT, SMART_PANEL_LED_PIN, GPIO_PIN_SET);
 8004dac:	2201      	movs	r2, #1
 8004dae:	2180      	movs	r1, #128	; 0x80
 8004db0:	484c      	ldr	r0, [pc, #304]	; (8004ee4 <lightFollowOnlyMode+0x154>)
 8004db2:	f002 fe31 	bl	8007a18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEBUG_LED_PORT, DEBUG_LED_PIN, GPIO_PIN_RESET);
 8004db6:	2200      	movs	r2, #0
 8004db8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004dbc:	4849      	ldr	r0, [pc, #292]	; (8004ee4 <lightFollowOnlyMode+0x154>)
 8004dbe:	f002 fe2b 	bl	8007a18 <HAL_GPIO_WritePin>

			float lightDataVDD = getLightData(lightAddressVDD);
 8004dc2:	4b49      	ldr	r3, [pc, #292]	; (8004ee8 <lightFollowOnlyMode+0x158>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fa6e 	bl	80052a8 <getLightData>
 8004dcc:	ed87 0a04 	vstr	s0, [r7, #16]
			float lightDataGND = getLightData(lightAddressGND);
 8004dd0:	4b46      	ldr	r3, [pc, #280]	; (8004eec <lightFollowOnlyMode+0x15c>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fa67 	bl	80052a8 <getLightData>
 8004dda:	ed87 0a03 	vstr	s0, [r7, #12]
			float lightDataSDA = getLightData(lightAddressSDA);
 8004dde:	4b44      	ldr	r3, [pc, #272]	; (8004ef0 <lightFollowOnlyMode+0x160>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fa60 	bl	80052a8 <getLightData>
 8004de8:	ed87 0a02 	vstr	s0, [r7, #8]
			float lightDataSCL = getLightData(lightAddressSCL);
 8004dec:	4b41      	ldr	r3, [pc, #260]	; (8004ef4 <lightFollowOnlyMode+0x164>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 fa59 	bl	80052a8 <getLightData>
 8004df6:	ed87 0a01 	vstr	s0, [r7, #4]

			setupMotorRod();
 8004dfa:	f000 f9ed 	bl	80051d8 <setupMotorRod>

			if ((lightDataSDA - lightDataSCL)  > 60) {
 8004dfe:	ed97 7a02 	vldr	s14, [r7, #8]
 8004e02:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e0a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004ef8 <lightFollowOnlyMode+0x168>
 8004e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e16:	dd06      	ble.n	8004e26 <lightFollowOnlyMode+0x96>
				setCounterClockwiseRod(); //up
 8004e18:	f000 f9ac 	bl	8005174 <setCounterClockwiseRod>
				rotateMotorRod(361);
 8004e1c:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8004efc <lightFollowOnlyMode+0x16c>
 8004e20:	f000 f916 	bl	8005050 <rotateMotorRod>
 8004e24:	e012      	b.n	8004e4c <lightFollowOnlyMode+0xbc>
			}
			else if ((lightDataSCL - lightDataSDA) > 60) {
 8004e26:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e32:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8004ef8 <lightFollowOnlyMode+0x168>
 8004e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e3e:	dd05      	ble.n	8004e4c <lightFollowOnlyMode+0xbc>
				setClockwiseRod(); //down
 8004e40:	f000 f980 	bl	8005144 <setClockwiseRod>
				rotateMotorRod(361);
 8004e44:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8004efc <lightFollowOnlyMode+0x16c>
 8004e48:	f000 f902 	bl	8005050 <rotateMotorRod>
			}

			turnOffMotorRod();
 8004e4c:	f000 f9e8 	bl	8005220 <turnOffMotorRod>


			//Figuring our rotational movement
			setupMotorSusan();
 8004e50:	f000 f9d6 	bl	8005200 <setupMotorSusan>

			if ((lightDataVDD - lightDataGND)  > 60) {
 8004e54:	ed97 7a04 	vldr	s14, [r7, #16]
 8004e58:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e60:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004ef8 <lightFollowOnlyMode+0x168>
 8004e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e6c:	dd06      	ble.n	8004e7c <lightFollowOnlyMode+0xec>
				setCounterClockwiseSusan();
 8004e6e:	f000 f98d 	bl	800518c <setCounterClockwiseSusan>
				rotateMotorSusan(361);
 8004e72:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8004efc <lightFollowOnlyMode+0x16c>
 8004e76:	f000 f929 	bl	80050cc <rotateMotorSusan>
 8004e7a:	e012      	b.n	8004ea2 <lightFollowOnlyMode+0x112>
			}
			else if ((lightDataGND - lightDataVDD) > 60) {
 8004e7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e80:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e88:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004ef8 <lightFollowOnlyMode+0x168>
 8004e8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e94:	dd05      	ble.n	8004ea2 <lightFollowOnlyMode+0x112>
				setClockwiseSusan();
 8004e96:	f000 f961 	bl	800515c <setClockwiseSusan>
				rotateMotorSusan(361);
 8004e9a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8004efc <lightFollowOnlyMode+0x16c>
 8004e9e:	f000 f915 	bl	80050cc <rotateMotorSusan>
			}

			turnOffMotorSusan();
 8004ea2:	f000 f9c9 	bl	8005238 <turnOffMotorSusan>



//			Voltage measurement and sending
			float solarPanelVoltage = getSolarPanelVoltage();
 8004ea6:	f000 fa8b 	bl	80053c0 <getSolarPanelVoltage>
 8004eaa:	ed87 0a00 	vstr	s0, [r7]
			bluetoothSend(solarPanelVoltage, -1, -1, -1);
 8004eae:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8004eb2:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8004eb6:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004eba:	ed97 0a00 	vldr	s0, [r7]
 8004ebe:	f000 f81f 	bl	8004f00 <bluetoothSend>


			motorCounter = HAL_GetTick();
 8004ec2:	f001 fe83 	bl	8006bcc <HAL_GetTick>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	617b      	str	r3, [r7, #20]
		}

		HAL_GPIO_WritePin(SMART_PANEL_LED_PORT, SMART_PANEL_LED_PIN, GPIO_PIN_RESET);
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2180      	movs	r1, #128	; 0x80
 8004ece:	4805      	ldr	r0, [pc, #20]	; (8004ee4 <lightFollowOnlyMode+0x154>)
 8004ed0:	f002 fda2 	bl	8007a18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DEBUG_LED_PORT, DEBUG_LED_PIN, GPIO_PIN_SET);
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004eda:	4802      	ldr	r0, [pc, #8]	; (8004ee4 <lightFollowOnlyMode+0x154>)
 8004edc:	f002 fd9c 	bl	8007a18 <HAL_GPIO_WritePin>
		if ((HAL_GetTick() - motorCounter) > 500) {
 8004ee0:	e75b      	b.n	8004d9a <lightFollowOnlyMode+0xa>
 8004ee2:	bf00      	nop
 8004ee4:	40020800 	.word	0x40020800
 8004ee8:	2000000b 	.word	0x2000000b
 8004eec:	2000000a 	.word	0x2000000a
 8004ef0:	2000000c 	.word	0x2000000c
 8004ef4:	2000000d 	.word	0x2000000d
 8004ef8:	42700000 	.word	0x42700000
 8004efc:	43b48000 	.word	0x43b48000

08004f00 <bluetoothSend>:

	}
}

void bluetoothSend(float voltageMeasured, float direction, float lat, float longi) {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b092      	sub	sp, #72	; 0x48
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	ed87 0a03 	vstr	s0, [r7, #12]
 8004f0a:	edc7 0a02 	vstr	s1, [r7, #8]
 8004f0e:	ed87 1a01 	vstr	s2, [r7, #4]
 8004f12:	edc7 1a00 	vstr	s3, [r7]
	if (direction == -1 || lat == -1 || longi == -1) {
 8004f16:	edd7 7a02 	vldr	s15, [r7, #8]
 8004f1a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004f1e:	eef4 7a47 	vcmp.f32	s15, s14
 8004f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f26:	d011      	beq.n	8004f4c <bluetoothSend+0x4c>
 8004f28:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f2c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004f30:	eef4 7a47 	vcmp.f32	s15, s14
 8004f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f38:	d008      	beq.n	8004f4c <bluetoothSend+0x4c>
 8004f3a:	edd7 7a00 	vldr	s15, [r7]
 8004f3e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004f42:	eef4 7a47 	vcmp.f32	s15, s14
 8004f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4a:	d111      	bne.n	8004f70 <bluetoothSend+0x70>
		char msg[26];

		sprintf((char*)msg,"Voltage measured: %.4f\r\n", voltageMeasured);
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f7fb fb03 	bl	8000558 <__aeabi_f2d>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8004f5a:	4936      	ldr	r1, [pc, #216]	; (8005034 <bluetoothSend+0x134>)
 8004f5c:	f006 fa26 	bl	800b3ac <siprintf>

		HAL_UART_Transmit_IT(&huart1,msg, sizeof(msg));
 8004f60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f64:	221a      	movs	r2, #26
 8004f66:	4619      	mov	r1, r3
 8004f68:	4833      	ldr	r0, [pc, #204]	; (8005038 <bluetoothSend+0x138>)
 8004f6a:	f004 fcb2 	bl	80098d2 <HAL_UART_Transmit_IT>
	if (direction == -1 || lat == -1 || longi == -1) {
 8004f6e:	e05c      	b.n	800502a <bluetoothSend+0x12a>
	}
	else {
		char msg[26];

		sprintf((char*)msg,"Voltage measured: %.2f\r\n", voltageMeasured);
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f7fb faf1 	bl	8000558 <__aeabi_f2d>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	f107 0010 	add.w	r0, r7, #16
 8004f7e:	492f      	ldr	r1, [pc, #188]	; (800503c <bluetoothSend+0x13c>)
 8004f80:	f006 fa14 	bl	800b3ac <siprintf>
		HAL_UART_Transmit_IT(&huart1,msg, sizeof(msg));
 8004f84:	f107 0310 	add.w	r3, r7, #16
 8004f88:	221a      	movs	r2, #26
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	482a      	ldr	r0, [pc, #168]	; (8005038 <bluetoothSend+0x138>)
 8004f8e:	f004 fca0 	bl	80098d2 <HAL_UART_Transmit_IT>
		microDelay(stepDelay);
 8004f92:	4b2b      	ldr	r3, [pc, #172]	; (8005040 <bluetoothSend+0x140>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 f903 	bl	80051a4 <microDelay>

		sprintf((char*)msg,"Direction: %.2f\r\n", direction);
 8004f9e:	68b8      	ldr	r0, [r7, #8]
 8004fa0:	f7fb fada 	bl	8000558 <__aeabi_f2d>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	f107 0010 	add.w	r0, r7, #16
 8004fac:	4925      	ldr	r1, [pc, #148]	; (8005044 <bluetoothSend+0x144>)
 8004fae:	f006 f9fd 	bl	800b3ac <siprintf>
		HAL_UART_Transmit_IT(&huart1,msg, sizeof(msg));
 8004fb2:	f107 0310 	add.w	r3, r7, #16
 8004fb6:	221a      	movs	r2, #26
 8004fb8:	4619      	mov	r1, r3
 8004fba:	481f      	ldr	r0, [pc, #124]	; (8005038 <bluetoothSend+0x138>)
 8004fbc:	f004 fc89 	bl	80098d2 <HAL_UART_Transmit_IT>
		microDelay(stepDelay);
 8004fc0:	4b1f      	ldr	r3, [pc, #124]	; (8005040 <bluetoothSend+0x140>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 f8ec 	bl	80051a4 <microDelay>

		sprintf((char*)msg,"Latitude: %.2f\r\n", lat);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7fb fac3 	bl	8000558 <__aeabi_f2d>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	f107 0010 	add.w	r0, r7, #16
 8004fda:	491b      	ldr	r1, [pc, #108]	; (8005048 <bluetoothSend+0x148>)
 8004fdc:	f006 f9e6 	bl	800b3ac <siprintf>
		HAL_UART_Transmit_IT(&huart1,msg, sizeof(msg));
 8004fe0:	f107 0310 	add.w	r3, r7, #16
 8004fe4:	221a      	movs	r2, #26
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4813      	ldr	r0, [pc, #76]	; (8005038 <bluetoothSend+0x138>)
 8004fea:	f004 fc72 	bl	80098d2 <HAL_UART_Transmit_IT>
		microDelay(stepDelay);
 8004fee:	4b14      	ldr	r3, [pc, #80]	; (8005040 <bluetoothSend+0x140>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 f8d5 	bl	80051a4 <microDelay>

		sprintf((char*)msg,"Longitude: %.2f\r\n", longi);
 8004ffa:	6838      	ldr	r0, [r7, #0]
 8004ffc:	f7fb faac 	bl	8000558 <__aeabi_f2d>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	f107 0010 	add.w	r0, r7, #16
 8005008:	4910      	ldr	r1, [pc, #64]	; (800504c <bluetoothSend+0x14c>)
 800500a:	f006 f9cf 	bl	800b3ac <siprintf>
		HAL_UART_Transmit_IT(&huart1,msg, sizeof(msg));
 800500e:	f107 0310 	add.w	r3, r7, #16
 8005012:	221a      	movs	r2, #26
 8005014:	4619      	mov	r1, r3
 8005016:	4808      	ldr	r0, [pc, #32]	; (8005038 <bluetoothSend+0x138>)
 8005018:	f004 fc5b 	bl	80098d2 <HAL_UART_Transmit_IT>
		microDelay(stepDelay);
 800501c:	4b08      	ldr	r3, [pc, #32]	; (8005040 <bluetoothSend+0x140>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	b29b      	uxth	r3, r3
 8005022:	4618      	mov	r0, r3
 8005024:	f000 f8be 	bl	80051a4 <microDelay>

	}
}
 8005028:	bf00      	nop
 800502a:	bf00      	nop
 800502c:	3748      	adds	r7, #72	; 0x48
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	08010f58 	.word	0x08010f58
 8005038:	200015a4 	.word	0x200015a4
 800503c:	08010f74 	.word	0x08010f74
 8005040:	20000010 	.word	0x20000010
 8005044:	08010f90 	.word	0x08010f90
 8005048:	08010fa4 	.word	0x08010fa4
 800504c:	08010fb8 	.word	0x08010fb8

08005050 <rotateMotorRod>:

///////////////////////////////////////////////////////////////
//MOTOR CONTROL
void rotateMotorRod(float angle) {
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	ed87 0a01 	vstr	s0, [r7, #4]

	int steps = (angle / stepAngle);
 800505a:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <rotateMotorRod+0x70>)
 800505c:	ed93 7a00 	vldr	s14, [r3]
 8005060:	edd7 6a01 	vldr	s13, [r7, #4]
 8005064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800506c:	ee17 3a90 	vmov	r3, s15
 8005070:	60bb      	str	r3, [r7, #8]

	for(int x=0; x < steps; x++)
 8005072:	2300      	movs	r3, #0
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	e01a      	b.n	80050ae <rotateMotorRod+0x5e>
	{
		HAL_GPIO_WritePin(ROD_STEP_PORT, ROD_STEP_PIN, GPIO_PIN_SET);
 8005078:	2201      	movs	r2, #1
 800507a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800507e:	4811      	ldr	r0, [pc, #68]	; (80050c4 <rotateMotorRod+0x74>)
 8005080:	f002 fcca 	bl	8007a18 <HAL_GPIO_WritePin>
		microDelay(stepDelay);
 8005084:	4b10      	ldr	r3, [pc, #64]	; (80050c8 <rotateMotorRod+0x78>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	b29b      	uxth	r3, r3
 800508a:	4618      	mov	r0, r3
 800508c:	f000 f88a 	bl	80051a4 <microDelay>
		HAL_GPIO_WritePin(ROD_STEP_PORT, ROD_STEP_PIN, GPIO_PIN_RESET);
 8005090:	2200      	movs	r2, #0
 8005092:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005096:	480b      	ldr	r0, [pc, #44]	; (80050c4 <rotateMotorRod+0x74>)
 8005098:	f002 fcbe 	bl	8007a18 <HAL_GPIO_WritePin>
		microDelay(stepDelay);
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <rotateMotorRod+0x78>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 f87e 	bl	80051a4 <microDelay>
	for(int x=0; x < steps; x++)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	3301      	adds	r3, #1
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	dbe0      	blt.n	8005078 <rotateMotorRod+0x28>
	}
}
 80050b6:	bf00      	nop
 80050b8:	bf00      	nop
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	20000014 	.word	0x20000014
 80050c4:	40020800 	.word	0x40020800
 80050c8:	20000010 	.word	0x20000010

080050cc <rotateMotorSusan>:

void rotateMotorSusan(float angle) {
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	ed87 0a01 	vstr	s0, [r7, #4]

	int steps = (angle / stepAngle);
 80050d6:	4b18      	ldr	r3, [pc, #96]	; (8005138 <rotateMotorSusan+0x6c>)
 80050d8:	ed93 7a00 	vldr	s14, [r3]
 80050dc:	edd7 6a01 	vldr	s13, [r7, #4]
 80050e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050e8:	ee17 3a90 	vmov	r3, s15
 80050ec:	60bb      	str	r3, [r7, #8]

	for(int x=0; x < steps; x++)
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	e018      	b.n	8005126 <rotateMotorSusan+0x5a>
	{
		HAL_GPIO_WritePin(SUSAN_STEP_PORT, SUSAN_STEP_PIN, GPIO_PIN_SET);
 80050f4:	2201      	movs	r2, #1
 80050f6:	2120      	movs	r1, #32
 80050f8:	4810      	ldr	r0, [pc, #64]	; (800513c <rotateMotorSusan+0x70>)
 80050fa:	f002 fc8d 	bl	8007a18 <HAL_GPIO_WritePin>
		microDelay(stepDelay);
 80050fe:	4b10      	ldr	r3, [pc, #64]	; (8005140 <rotateMotorSusan+0x74>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	b29b      	uxth	r3, r3
 8005104:	4618      	mov	r0, r3
 8005106:	f000 f84d 	bl	80051a4 <microDelay>
		HAL_GPIO_WritePin(SUSAN_STEP_PORT, SUSAN_STEP_PIN, GPIO_PIN_RESET);
 800510a:	2200      	movs	r2, #0
 800510c:	2120      	movs	r1, #32
 800510e:	480b      	ldr	r0, [pc, #44]	; (800513c <rotateMotorSusan+0x70>)
 8005110:	f002 fc82 	bl	8007a18 <HAL_GPIO_WritePin>
		microDelay(stepDelay);
 8005114:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <rotateMotorSusan+0x74>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	b29b      	uxth	r3, r3
 800511a:	4618      	mov	r0, r3
 800511c:	f000 f842 	bl	80051a4 <microDelay>
	for(int x=0; x < steps; x++)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3301      	adds	r3, #1
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	429a      	cmp	r2, r3
 800512c:	dbe2      	blt.n	80050f4 <rotateMotorSusan+0x28>
	}
}
 800512e:	bf00      	nop
 8005130:	bf00      	nop
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	20000014 	.word	0x20000014
 800513c:	40020400 	.word	0x40020400
 8005140:	20000010 	.word	0x20000010

08005144 <setClockwiseRod>:

void setClockwiseRod() {
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ROD_DIR_PORT, ROD_DIR_PIN, GPIO_PIN_SET);
 8005148:	2201      	movs	r2, #1
 800514a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800514e:	4802      	ldr	r0, [pc, #8]	; (8005158 <setClockwiseRod+0x14>)
 8005150:	f002 fc62 	bl	8007a18 <HAL_GPIO_WritePin>
}
 8005154:	bf00      	nop
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40020800 	.word	0x40020800

0800515c <setClockwiseSusan>:

void setClockwiseSusan() {
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SUSAN_DIR_PORT, SUSAN_DIR_PIN, GPIO_PIN_SET);
 8005160:	2201      	movs	r2, #1
 8005162:	2140      	movs	r1, #64	; 0x40
 8005164:	4802      	ldr	r0, [pc, #8]	; (8005170 <setClockwiseSusan+0x14>)
 8005166:	f002 fc57 	bl	8007a18 <HAL_GPIO_WritePin>
}
 800516a:	bf00      	nop
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40020400 	.word	0x40020400

08005174 <setCounterClockwiseRod>:

void setCounterClockwiseRod() {
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ROD_DIR_PORT, ROD_DIR_PIN, GPIO_PIN_RESET);
 8005178:	2200      	movs	r2, #0
 800517a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800517e:	4802      	ldr	r0, [pc, #8]	; (8005188 <setCounterClockwiseRod+0x14>)
 8005180:	f002 fc4a 	bl	8007a18 <HAL_GPIO_WritePin>
}
 8005184:	bf00      	nop
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40020800 	.word	0x40020800

0800518c <setCounterClockwiseSusan>:

void setCounterClockwiseSusan() {
 800518c:	b580      	push	{r7, lr}
 800518e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SUSAN_DIR_PORT, SUSAN_DIR_PIN, GPIO_PIN_RESET);
 8005190:	2200      	movs	r2, #0
 8005192:	2140      	movs	r1, #64	; 0x40
 8005194:	4802      	ldr	r0, [pc, #8]	; (80051a0 <setCounterClockwiseSusan+0x14>)
 8005196:	f002 fc3f 	bl	8007a18 <HAL_GPIO_WritePin>
}
 800519a:	bf00      	nop
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	40020400 	.word	0x40020400

080051a4 <microDelay>:

void microDelay (uint16_t delay)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	4603      	mov	r3, r0
 80051ac:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 80051ae:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <microDelay+0x30>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2200      	movs	r2, #0
 80051b4:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 80051b6:	bf00      	nop
 80051b8:	4b06      	ldr	r3, [pc, #24]	; (80051d4 <microDelay+0x30>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051be:	88fb      	ldrh	r3, [r7, #6]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d3f9      	bcc.n	80051b8 <microDelay+0x14>
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	2000155c 	.word	0x2000155c

080051d8 <setupMotorRod>:

void setupMotorRod() {
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ROD_SLEEP_PORT, ROD_SLEEP_PIN, GPIO_PIN_SET);
 80051dc:	2201      	movs	r2, #1
 80051de:	2104      	movs	r1, #4
 80051e0:	4805      	ldr	r0, [pc, #20]	; (80051f8 <setupMotorRod+0x20>)
 80051e2:	f002 fc19 	bl	8007a18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROD_ENABLE_PORT, ROD_ENABLE_PIN, GPIO_PIN_RESET);
 80051e6:	2200      	movs	r2, #0
 80051e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051ec:	4803      	ldr	r0, [pc, #12]	; (80051fc <setupMotorRod+0x24>)
 80051ee:	f002 fc13 	bl	8007a18 <HAL_GPIO_WritePin>
}
 80051f2:	bf00      	nop
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40020c00 	.word	0x40020c00
 80051fc:	40020800 	.word	0x40020800

08005200 <setupMotorSusan>:

void setupMotorSusan() {
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SUSAN_SLEEP_PORT, SUSAN_SLEEP_PIN, GPIO_PIN_SET);
 8005204:	2201      	movs	r2, #1
 8005206:	2180      	movs	r1, #128	; 0x80
 8005208:	4804      	ldr	r0, [pc, #16]	; (800521c <setupMotorSusan+0x1c>)
 800520a:	f002 fc05 	bl	8007a18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SUSAN_ENABLE_PORT, SUSAN_ENABLE_PIN, GPIO_PIN_RESET);
 800520e:	2200      	movs	r2, #0
 8005210:	2110      	movs	r1, #16
 8005212:	4802      	ldr	r0, [pc, #8]	; (800521c <setupMotorSusan+0x1c>)
 8005214:	f002 fc00 	bl	8007a18 <HAL_GPIO_WritePin>
}
 8005218:	bf00      	nop
 800521a:	bd80      	pop	{r7, pc}
 800521c:	40020400 	.word	0x40020400

08005220 <turnOffMotorRod>:

void turnOffMotorRod() {
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ROD_SLEEP_PORT, ROD_SLEEP_PIN, GPIO_PIN_RESET);
 8005224:	2200      	movs	r2, #0
 8005226:	2104      	movs	r1, #4
 8005228:	4802      	ldr	r0, [pc, #8]	; (8005234 <turnOffMotorRod+0x14>)
 800522a:	f002 fbf5 	bl	8007a18 <HAL_GPIO_WritePin>
}
 800522e:	bf00      	nop
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40020c00 	.word	0x40020c00

08005238 <turnOffMotorSusan>:

void turnOffMotorSusan() {
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SUSAN_SLEEP_PORT, SUSAN_SLEEP_PIN, GPIO_PIN_RESET);
 800523c:	2200      	movs	r2, #0
 800523e:	2180      	movs	r1, #128	; 0x80
 8005240:	4802      	ldr	r0, [pc, #8]	; (800524c <turnOffMotorSusan+0x14>)
 8005242:	f002 fbe9 	bl	8007a18 <HAL_GPIO_WritePin>
}
 8005246:	bf00      	nop
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	40020400 	.word	0x40020400

08005250 <setupLightSensor>:
///////////////////////////////////////////////////////////////////

void setupLightSensor(uint8_t lightAddress) {
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af02      	add	r7, sp, #8
 8005256:	4603      	mov	r3, r0
 8005258:	71fb      	strb	r3, [r7, #7]
	uint8_t data_send[3] = {0};
 800525a:	4b10      	ldr	r3, [pc, #64]	; (800529c <setupLightSensor+0x4c>)
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	81bb      	strh	r3, [r7, #12]
 8005260:	2300      	movs	r3, #0
 8005262:	73bb      	strb	r3, [r7, #14]
	data_send[0] = 0x0A;
 8005264:	230a      	movs	r3, #10
 8005266:	733b      	strb	r3, [r7, #12]
	data_send[1] = 0x32;
 8005268:	2332      	movs	r3, #50	; 0x32
 800526a:	737b      	strb	r3, [r7, #13]
	data_send[2] = 0xF8;
 800526c:	23f8      	movs	r3, #248	; 0xf8
 800526e:	73bb      	strb	r3, [r7, #14]
	while (HAL_I2C_Master_Transmit(&hi2c3, (lightAddress << 1), data_send, 3, 20) != HAL_OK){}
 8005270:	bf00      	nop
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	b29b      	uxth	r3, r3
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	b299      	uxth	r1, r3
 800527a:	f107 020c 	add.w	r2, r7, #12
 800527e:	2314      	movs	r3, #20
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	2303      	movs	r3, #3
 8005284:	4806      	ldr	r0, [pc, #24]	; (80052a0 <setupLightSensor+0x50>)
 8005286:	f002 fd25 	bl	8007cd4 <HAL_I2C_Master_Transmit>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1f0      	bne.n	8005272 <setupLightSensor+0x22>
}
 8005290:	bf00      	nop
 8005292:	bf00      	nop
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	08010fcc 	.word	0x08010fcc
 80052a0:	20001508 	.word	0x20001508
 80052a4:	00000000 	.word	0x00000000

080052a8 <getLightData>:

float getLightData(uint8_t lightAddress) {
 80052a8:	b5b0      	push	{r4, r5, r7, lr}
 80052aa:	b08a      	sub	sp, #40	; 0x28
 80052ac:	af02      	add	r7, sp, #8
 80052ae:	4603      	mov	r3, r0
 80052b0:	71fb      	strb	r3, [r7, #7]
	uint8_t data_send[4] = {0};
 80052b2:	2300      	movs	r3, #0
 80052b4:	613b      	str	r3, [r7, #16]
	uint8_t data_in [2] = {0};
 80052b6:	2300      	movs	r3, #0
 80052b8:	81bb      	strh	r3, [r7, #12]
	uint16_t exp;
	uint16_t man;
	uint16_t alldata;
	float ans = 0;
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	61fb      	str	r3, [r7, #28]

	data_send[0] = 0x00;
 80052c0:	2300      	movs	r3, #0
 80052c2:	743b      	strb	r3, [r7, #16]
	while (HAL_I2C_GetState(&hi2c3) != HAL_I2C_STATE_READY){}
 80052c4:	bf00      	nop
 80052c6:	483c      	ldr	r0, [pc, #240]	; (80053b8 <getLightData+0x110>)
 80052c8:	f003 f828 	bl	800831c <HAL_I2C_GetState>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b20      	cmp	r3, #32
 80052d0:	d1f9      	bne.n	80052c6 <getLightData+0x1e>
	while (HAL_I2C_Master_Transmit(&hi2c3, (lightAddress << 1), data_send, 1, 20) != HAL_OK){}
 80052d2:	bf00      	nop
 80052d4:	79fb      	ldrb	r3, [r7, #7]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	b299      	uxth	r1, r3
 80052dc:	f107 0210 	add.w	r2, r7, #16
 80052e0:	2314      	movs	r3, #20
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	2301      	movs	r3, #1
 80052e6:	4834      	ldr	r0, [pc, #208]	; (80053b8 <getLightData+0x110>)
 80052e8:	f002 fcf4 	bl	8007cd4 <HAL_I2C_Master_Transmit>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f0      	bne.n	80052d4 <getLightData+0x2c>
	while (HAL_I2C_GetState(&hi2c3) != HAL_I2C_STATE_READY){}
 80052f2:	bf00      	nop
 80052f4:	4830      	ldr	r0, [pc, #192]	; (80053b8 <getLightData+0x110>)
 80052f6:	f003 f811 	bl	800831c <HAL_I2C_GetState>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	d1f9      	bne.n	80052f4 <getLightData+0x4c>
	while (HAL_I2C_Master_Receive(&hi2c3, (lightAddress << 1 | 1), data_in, 2, HAL_MAX_DELAY)){}
 8005300:	bf00      	nop
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	b21b      	sxth	r3, r3
 8005308:	f043 0301 	orr.w	r3, r3, #1
 800530c:	b21b      	sxth	r3, r3
 800530e:	b299      	uxth	r1, r3
 8005310:	f107 020c 	add.w	r2, r7, #12
 8005314:	f04f 33ff 	mov.w	r3, #4294967295
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	2302      	movs	r3, #2
 800531c:	4826      	ldr	r0, [pc, #152]	; (80053b8 <getLightData+0x110>)
 800531e:	f002 fdd7 	bl	8007ed0 <HAL_I2C_Master_Receive>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1ec      	bne.n	8005302 <getLightData+0x5a>

	alldata = data_in[0];
 8005328:	7b3b      	ldrb	r3, [r7, #12]
 800532a:	837b      	strh	r3, [r7, #26]
	alldata = (alldata << 8) | data_in[1];
 800532c:	8b7b      	ldrh	r3, [r7, #26]
 800532e:	021b      	lsls	r3, r3, #8
 8005330:	b21a      	sxth	r2, r3
 8005332:	7b7b      	ldrb	r3, [r7, #13]
 8005334:	b21b      	sxth	r3, r3
 8005336:	4313      	orrs	r3, r2
 8005338:	b21b      	sxth	r3, r3
 800533a:	837b      	strh	r3, [r7, #26]
	man = alldata & 0x0FFF;
 800533c:	8b7b      	ldrh	r3, [r7, #26]
 800533e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005342:	833b      	strh	r3, [r7, #24]
	exp = (alldata & 0xF000) >> 12;
 8005344:	8b7b      	ldrh	r3, [r7, #26]
 8005346:	0b1b      	lsrs	r3, r3, #12
 8005348:	82fb      	strh	r3, [r7, #22]

	ans = man * (0.01 * pow(2,exp));
 800534a:	8b3b      	ldrh	r3, [r7, #24]
 800534c:	4618      	mov	r0, r3
 800534e:	f7fb f8f1 	bl	8000534 <__aeabi_i2d>
 8005352:	4604      	mov	r4, r0
 8005354:	460d      	mov	r5, r1
 8005356:	8afb      	ldrh	r3, [r7, #22]
 8005358:	4618      	mov	r0, r3
 800535a:	f7fb f8db 	bl	8000514 <__aeabi_ui2d>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	ec43 2b11 	vmov	d1, r2, r3
 8005366:	ed9f 0b10 	vldr	d0, [pc, #64]	; 80053a8 <getLightData+0x100>
 800536a:	f008 f973 	bl	800d654 <pow>
 800536e:	ec51 0b10 	vmov	r0, r1, d0
 8005372:	a30f      	add	r3, pc, #60	; (adr r3, 80053b0 <getLightData+0x108>)
 8005374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005378:	f7fb f946 	bl	8000608 <__aeabi_dmul>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4620      	mov	r0, r4
 8005382:	4629      	mov	r1, r5
 8005384:	f7fb f940 	bl	8000608 <__aeabi_dmul>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4610      	mov	r0, r2
 800538e:	4619      	mov	r1, r3
 8005390:	f7fb fc12 	bl	8000bb8 <__aeabi_d2f>
 8005394:	4603      	mov	r3, r0
 8005396:	61fb      	str	r3, [r7, #28]

	return ans;
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	ee07 3a90 	vmov	s15, r3
}
 800539e:	eeb0 0a67 	vmov.f32	s0, s15
 80053a2:	3720      	adds	r7, #32
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bdb0      	pop	{r4, r5, r7, pc}
 80053a8:	00000000 	.word	0x00000000
 80053ac:	40000000 	.word	0x40000000
 80053b0:	47ae147b 	.word	0x47ae147b
 80053b4:	3f847ae1 	.word	0x3f847ae1
 80053b8:	20001508 	.word	0x20001508
 80053bc:	00000000 	.word	0x00000000

080053c0 <getSolarPanelVoltage>:


float getSolarPanelVoltage() {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
	unsigned int analogValue = 0;
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]

	HAL_ADC_Start(&hadc1);
 80053ca:	4827      	ldr	r0, [pc, #156]	; (8005468 <getSolarPanelVoltage+0xa8>)
 80053cc:	f001 fc4e 	bl	8006c6c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 300) == HAL_OK) {
 80053d0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80053d4:	4824      	ldr	r0, [pc, #144]	; (8005468 <getSolarPanelVoltage+0xa8>)
 80053d6:	f001 fd30 	bl	8006e3a <HAL_ADC_PollForConversion>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d103      	bne.n	80053e8 <getSolarPanelVoltage+0x28>
		analogValue = HAL_ADC_GetValue(&hadc1);
 80053e0:	4821      	ldr	r0, [pc, #132]	; (8005468 <getSolarPanelVoltage+0xa8>)
 80053e2:	f001 fdb5 	bl	8006f50 <HAL_ADC_GetValue>
 80053e6:	6178      	str	r0, [r7, #20]
	}

	HAL_ADC_Stop(&hadc1);
 80053e8:	481f      	ldr	r0, [pc, #124]	; (8005468 <getSolarPanelVoltage+0xa8>)
 80053ea:	f001 fcf3 	bl	8006dd4 <HAL_ADC_Stop>

	//Value obtained from voltage divider
	int voltageDividerLargeRes = 13;
 80053ee:	230d      	movs	r3, #13
 80053f0:	613b      	str	r3, [r7, #16]
	float voltageDividerSmallRes = 3;
 80053f2:	4b1e      	ldr	r3, [pc, #120]	; (800546c <getSolarPanelVoltage+0xac>)
 80053f4:	60fb      	str	r3, [r7, #12]
	float measuredVoltage = (analogValue * 3.3 /  4096);
 80053f6:	6978      	ldr	r0, [r7, #20]
 80053f8:	f7fb f88c 	bl	8000514 <__aeabi_ui2d>
 80053fc:	a318      	add	r3, pc, #96	; (adr r3, 8005460 <getSolarPanelVoltage+0xa0>)
 80053fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005402:	f7fb f901 	bl	8000608 <__aeabi_dmul>
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	4610      	mov	r0, r2
 800540c:	4619      	mov	r1, r3
 800540e:	f04f 0200 	mov.w	r2, #0
 8005412:	4b17      	ldr	r3, [pc, #92]	; (8005470 <getSolarPanelVoltage+0xb0>)
 8005414:	f7fb fa22 	bl	800085c <__aeabi_ddiv>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4610      	mov	r0, r2
 800541e:	4619      	mov	r1, r3
 8005420:	f7fb fbca 	bl	8000bb8 <__aeabi_d2f>
 8005424:	4603      	mov	r3, r0
 8005426:	60bb      	str	r3, [r7, #8]
	float solarPanelVoltage = (measuredVoltage * (voltageDividerLargeRes + voltageDividerSmallRes) / voltageDividerSmallRes);
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005432:	edd7 7a03 	vldr	s15, [r7, #12]
 8005436:	ee37 7a27 	vadd.f32	s14, s14, s15
 800543a:	edd7 7a02 	vldr	s15, [r7, #8]
 800543e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005442:	ed97 7a03 	vldr	s14, [r7, #12]
 8005446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800544a:	edc7 7a01 	vstr	s15, [r7, #4]

	return solarPanelVoltage;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	ee07 3a90 	vmov	s15, r3
}
 8005454:	eeb0 0a67 	vmov.f32	s0, s15
 8005458:	3718      	adds	r7, #24
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	66666666 	.word	0x66666666
 8005464:	400a6666 	.word	0x400a6666
 8005468:	2000146c 	.word	0x2000146c
 800546c:	40400000 	.word	0x40400000
 8005470:	40b00000 	.word	0x40b00000

08005474 <getGpsData>:

void getGpsData(int* lat, int* longi, int* time, int* date, char* longDir, char* latDir) {
 8005474:	b5b0      	push	{r4, r5, r7, lr}
 8005476:	b0b8      	sub	sp, #224	; 0xe0
 8005478:	af02      	add	r7, sp, #8
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	603b      	str	r3, [r7, #0]
	uint8_t gpsDataTx [10] = {0}; //Data to send to GPS module
 8005482:	2300      	movs	r3, #0
 8005484:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005488:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	809a      	strh	r2, [r3, #4]
	uint8_t gpsDataReady [2] = {0}; //Data to check if gps module ready
 8005492:	2300      	movs	r3, #0
 8005494:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	uint8_t gpsDataRx1 [32] = {0}; //Buffer 1
 8005498:	2300      	movs	r3, #0
 800549a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800549e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	605a      	str	r2, [r3, #4]
 80054a8:	609a      	str	r2, [r3, #8]
 80054aa:	60da      	str	r2, [r3, #12]
 80054ac:	611a      	str	r2, [r3, #16]
 80054ae:	615a      	str	r2, [r3, #20]
 80054b0:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx2 [32] = {0}; //Buffer 2
 80054b2:	2300      	movs	r3, #0
 80054b4:	667b      	str	r3, [r7, #100]	; 0x64
 80054b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	605a      	str	r2, [r3, #4]
 80054c0:	609a      	str	r2, [r3, #8]
 80054c2:	60da      	str	r2, [r3, #12]
 80054c4:	611a      	str	r2, [r3, #16]
 80054c6:	615a      	str	r2, [r3, #20]
 80054c8:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx3 [32] = {0}; //Buffer 3
 80054ca:	2300      	movs	r3, #0
 80054cc:	647b      	str	r3, [r7, #68]	; 0x44
 80054ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	605a      	str	r2, [r3, #4]
 80054d8:	609a      	str	r2, [r3, #8]
 80054da:	60da      	str	r2, [r3, #12]
 80054dc:	611a      	str	r2, [r3, #16]
 80054de:	615a      	str	r2, [r3, #20]
 80054e0:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx4 [4] = {0}; //Buffer 4
 80054e2:	2300      	movs	r3, #0
 80054e4:	643b      	str	r3, [r7, #64]	; 0x40

	//////////////////////////////////////////////////////////////////////////////////////////
	//INITIALIZATION
	gpsDataTx[0] = 0xB5;
 80054e6:	23b5      	movs	r3, #181	; 0xb5
 80054e8:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	gpsDataTx[1] = 0x62;
 80054ec:	2362      	movs	r3, #98	; 0x62
 80054ee:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
	gpsDataTx[2] = 0xF0;
 80054f2:	23f0      	movs	r3, #240	; 0xf0
 80054f4:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
	gpsDataTx[3] = 0x04;
 80054f8:	2304      	movs	r3, #4
 80054fa:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80054fe:	bf00      	nop
 8005500:	480e      	ldr	r0, [pc, #56]	; (800553c <getGpsData+0xc8>)
 8005502:	f002 ff0b 	bl	800831c <HAL_I2C_GetState>
 8005506:	4603      	mov	r3, r0
 8005508:	2b20      	cmp	r3, #32
 800550a:	d1f9      	bne.n	8005500 <getGpsData+0x8c>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 4, 20) != HAL_OK){}
 800550c:	bf00      	nop
 800550e:	4b0c      	ldr	r3, [pc, #48]	; (8005540 <getGpsData+0xcc>)
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	b299      	uxth	r1, r3
 8005516:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800551a:	2314      	movs	r3, #20
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	2304      	movs	r3, #4
 8005520:	4806      	ldr	r0, [pc, #24]	; (800553c <getGpsData+0xc8>)
 8005522:	f002 fbd7 	bl	8007cd4 <HAL_I2C_Master_Transmit>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1f0      	bne.n	800550e <getGpsData+0x9a>

//		/////////////////////////////////////////////////////////////////////////////////////////
//
//		//WAITING FOR DATA READY
	gpsDataReady[0] = 0;
 800552c:	2300      	movs	r3, #0
 800552e:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
	gpsDataReady[1] = 0;
 8005532:	2300      	movs	r3, #0
 8005534:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
	while ((gpsDataReady[0] == 0) && (gpsDataReady[1] == 0)) //We leave as soon as read something non zero
 8005538:	e02b      	b.n	8005592 <getGpsData+0x11e>
 800553a:	bf00      	nop
 800553c:	200014b4 	.word	0x200014b4
 8005540:	20000008 	.word	0x20000008
	{
		gpsDataTx[0] = 0xFD;
 8005544:	23fd      	movs	r3, #253	; 0xfd
 8005546:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
		HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, HAL_MAX_DELAY);
 800554a:	4bb5      	ldr	r3, [pc, #724]	; (8005820 <getGpsData+0x3ac>)
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	b299      	uxth	r1, r3
 8005552:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005556:	f04f 33ff 	mov.w	r3, #4294967295
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	2301      	movs	r3, #1
 800555e:	48b1      	ldr	r0, [pc, #708]	; (8005824 <getGpsData+0x3b0>)
 8005560:	f002 fbb8 	bl	8007cd4 <HAL_I2C_Master_Transmit>
		gpsDataReady[0] = 0;
 8005564:	2300      	movs	r3, #0
 8005566:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
		gpsDataReady[1] = 0;
 800556a:	2300      	movs	r3, #0
 800556c:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
		HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataReady, 2, HAL_MAX_DELAY);
 8005570:	4bab      	ldr	r3, [pc, #684]	; (8005820 <getGpsData+0x3ac>)
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	b21b      	sxth	r3, r3
 8005578:	f043 0301 	orr.w	r3, r3, #1
 800557c:	b21b      	sxth	r3, r3
 800557e:	b299      	uxth	r1, r3
 8005580:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005584:	f04f 33ff 	mov.w	r3, #4294967295
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	2302      	movs	r3, #2
 800558c:	48a5      	ldr	r0, [pc, #660]	; (8005824 <getGpsData+0x3b0>)
 800558e:	f002 fc9f 	bl	8007ed0 <HAL_I2C_Master_Receive>
	while ((gpsDataReady[0] == 0) && (gpsDataReady[1] == 0)) //We leave as soon as read something non zero
 8005592:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8005596:	2b00      	cmp	r3, #0
 8005598:	d103      	bne.n	80055a2 <getGpsData+0x12e>
 800559a:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0d0      	beq.n	8005544 <getGpsData+0xd0>
	}


//		//Buffer 1
	gpsDataTx[0] = 0xFF;
 80055a2:	23ff      	movs	r3, #255	; 0xff
 80055a4:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80055a8:	bf00      	nop
 80055aa:	489e      	ldr	r0, [pc, #632]	; (8005824 <getGpsData+0x3b0>)
 80055ac:	f002 feb6 	bl	800831c <HAL_I2C_GetState>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b20      	cmp	r3, #32
 80055b4:	d1f9      	bne.n	80055aa <getGpsData+0x136>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 80055b6:	bf00      	nop
 80055b8:	4b99      	ldr	r3, [pc, #612]	; (8005820 <getGpsData+0x3ac>)
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	b299      	uxth	r1, r3
 80055c0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80055c4:	2314      	movs	r3, #20
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	2301      	movs	r3, #1
 80055ca:	4896      	ldr	r0, [pc, #600]	; (8005824 <getGpsData+0x3b0>)
 80055cc:	f002 fb82 	bl	8007cd4 <HAL_I2C_Master_Transmit>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1f0      	bne.n	80055b8 <getGpsData+0x144>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80055d6:	bf00      	nop
 80055d8:	4892      	ldr	r0, [pc, #584]	; (8005824 <getGpsData+0x3b0>)
 80055da:	f002 fe9f 	bl	800831c <HAL_I2C_GetState>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d1f9      	bne.n	80055d8 <getGpsData+0x164>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx1, 32, HAL_MAX_DELAY)){}
 80055e4:	bf00      	nop
 80055e6:	4b8e      	ldr	r3, [pc, #568]	; (8005820 <getGpsData+0x3ac>)
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	b21b      	sxth	r3, r3
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	b21b      	sxth	r3, r3
 80055f4:	b299      	uxth	r1, r3
 80055f6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80055fa:	f04f 33ff 	mov.w	r3, #4294967295
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	2320      	movs	r3, #32
 8005602:	4888      	ldr	r0, [pc, #544]	; (8005824 <getGpsData+0x3b0>)
 8005604:	f002 fc64 	bl	8007ed0 <HAL_I2C_Master_Receive>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1eb      	bne.n	80055e6 <getGpsData+0x172>
//
//		//Buffer 2
	gpsDataTx[0] = 0xFF;
 800560e:	23ff      	movs	r3, #255	; 0xff
 8005610:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8005614:	bf00      	nop
 8005616:	4883      	ldr	r0, [pc, #524]	; (8005824 <getGpsData+0x3b0>)
 8005618:	f002 fe80 	bl	800831c <HAL_I2C_GetState>
 800561c:	4603      	mov	r3, r0
 800561e:	2b20      	cmp	r3, #32
 8005620:	d1f9      	bne.n	8005616 <getGpsData+0x1a2>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 8005622:	bf00      	nop
 8005624:	4b7e      	ldr	r3, [pc, #504]	; (8005820 <getGpsData+0x3ac>)
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	b299      	uxth	r1, r3
 800562c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005630:	2314      	movs	r3, #20
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	2301      	movs	r3, #1
 8005636:	487b      	ldr	r0, [pc, #492]	; (8005824 <getGpsData+0x3b0>)
 8005638:	f002 fb4c 	bl	8007cd4 <HAL_I2C_Master_Transmit>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f0      	bne.n	8005624 <getGpsData+0x1b0>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8005642:	bf00      	nop
 8005644:	4877      	ldr	r0, [pc, #476]	; (8005824 <getGpsData+0x3b0>)
 8005646:	f002 fe69 	bl	800831c <HAL_I2C_GetState>
 800564a:	4603      	mov	r3, r0
 800564c:	2b20      	cmp	r3, #32
 800564e:	d1f9      	bne.n	8005644 <getGpsData+0x1d0>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx2, 32, HAL_MAX_DELAY)){}
 8005650:	bf00      	nop
 8005652:	4b73      	ldr	r3, [pc, #460]	; (8005820 <getGpsData+0x3ac>)
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	b21b      	sxth	r3, r3
 800565a:	f043 0301 	orr.w	r3, r3, #1
 800565e:	b21b      	sxth	r3, r3
 8005660:	b299      	uxth	r1, r3
 8005662:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005666:	f04f 33ff 	mov.w	r3, #4294967295
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	2320      	movs	r3, #32
 800566e:	486d      	ldr	r0, [pc, #436]	; (8005824 <getGpsData+0x3b0>)
 8005670:	f002 fc2e 	bl	8007ed0 <HAL_I2C_Master_Receive>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1eb      	bne.n	8005652 <getGpsData+0x1de>
//
//		//Buffer 3
	gpsDataTx[0] = 0xFF;
 800567a:	23ff      	movs	r3, #255	; 0xff
 800567c:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8005680:	bf00      	nop
 8005682:	4868      	ldr	r0, [pc, #416]	; (8005824 <getGpsData+0x3b0>)
 8005684:	f002 fe4a 	bl	800831c <HAL_I2C_GetState>
 8005688:	4603      	mov	r3, r0
 800568a:	2b20      	cmp	r3, #32
 800568c:	d1f9      	bne.n	8005682 <getGpsData+0x20e>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 800568e:	bf00      	nop
 8005690:	4b63      	ldr	r3, [pc, #396]	; (8005820 <getGpsData+0x3ac>)
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	b299      	uxth	r1, r3
 8005698:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800569c:	2314      	movs	r3, #20
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	2301      	movs	r3, #1
 80056a2:	4860      	ldr	r0, [pc, #384]	; (8005824 <getGpsData+0x3b0>)
 80056a4:	f002 fb16 	bl	8007cd4 <HAL_I2C_Master_Transmit>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1f0      	bne.n	8005690 <getGpsData+0x21c>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80056ae:	bf00      	nop
 80056b0:	485c      	ldr	r0, [pc, #368]	; (8005824 <getGpsData+0x3b0>)
 80056b2:	f002 fe33 	bl	800831c <HAL_I2C_GetState>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b20      	cmp	r3, #32
 80056ba:	d1f9      	bne.n	80056b0 <getGpsData+0x23c>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx3, 32, HAL_MAX_DELAY)){}
 80056bc:	bf00      	nop
 80056be:	4b58      	ldr	r3, [pc, #352]	; (8005820 <getGpsData+0x3ac>)
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	b21b      	sxth	r3, r3
 80056c6:	f043 0301 	orr.w	r3, r3, #1
 80056ca:	b21b      	sxth	r3, r3
 80056cc:	b299      	uxth	r1, r3
 80056ce:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80056d2:	f04f 33ff 	mov.w	r3, #4294967295
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	2320      	movs	r3, #32
 80056da:	4852      	ldr	r0, [pc, #328]	; (8005824 <getGpsData+0x3b0>)
 80056dc:	f002 fbf8 	bl	8007ed0 <HAL_I2C_Master_Receive>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1eb      	bne.n	80056be <getGpsData+0x24a>

	//Buffer 4
	gpsDataTx[0] = 0xFF;
 80056e6:	23ff      	movs	r3, #255	; 0xff
 80056e8:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80056ec:	bf00      	nop
 80056ee:	484d      	ldr	r0, [pc, #308]	; (8005824 <getGpsData+0x3b0>)
 80056f0:	f002 fe14 	bl	800831c <HAL_I2C_GetState>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b20      	cmp	r3, #32
 80056f8:	d1f9      	bne.n	80056ee <getGpsData+0x27a>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 80056fa:	bf00      	nop
 80056fc:	4b48      	ldr	r3, [pc, #288]	; (8005820 <getGpsData+0x3ac>)
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	b299      	uxth	r1, r3
 8005704:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005708:	2314      	movs	r3, #20
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	2301      	movs	r3, #1
 800570e:	4845      	ldr	r0, [pc, #276]	; (8005824 <getGpsData+0x3b0>)
 8005710:	f002 fae0 	bl	8007cd4 <HAL_I2C_Master_Transmit>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1f0      	bne.n	80056fc <getGpsData+0x288>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800571a:	bf00      	nop
 800571c:	4841      	ldr	r0, [pc, #260]	; (8005824 <getGpsData+0x3b0>)
 800571e:	f002 fdfd 	bl	800831c <HAL_I2C_GetState>
 8005722:	4603      	mov	r3, r0
 8005724:	2b20      	cmp	r3, #32
 8005726:	d1f9      	bne.n	800571c <getGpsData+0x2a8>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx4, 4, HAL_MAX_DELAY)){}
 8005728:	bf00      	nop
 800572a:	4b3d      	ldr	r3, [pc, #244]	; (8005820 <getGpsData+0x3ac>)
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	b21b      	sxth	r3, r3
 8005732:	f043 0301 	orr.w	r3, r3, #1
 8005736:	b21b      	sxth	r3, r3
 8005738:	b299      	uxth	r1, r3
 800573a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800573e:	f04f 33ff 	mov.w	r3, #4294967295
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	2304      	movs	r3, #4
 8005746:	4837      	ldr	r0, [pc, #220]	; (8005824 <getGpsData+0x3b0>)
 8005748:	f002 fbc2 	bl	8007ed0 <HAL_I2C_Master_Receive>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1eb      	bne.n	800572a <getGpsData+0x2b6>


	//Create concaterated buffer
	 size_t totalSize = sizeof(gpsDataRx1) + sizeof(gpsDataRx2) + sizeof(gpsDataRx3) + sizeof(gpsDataRx4);
 8005752:	2364      	movs	r3, #100	; 0x64
 8005754:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	// Allocate memory for the concatenated array
	uint8_t *concatenatedArray = (uint8_t *)malloc(totalSize);
 8005758:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800575c:	f004 ffc8 	bl	800a6f0 <malloc>
 8005760:	4603      	mov	r3, r0
 8005762:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	// Copy the contents of each array into the concatenated array
	size_t offset = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx1, sizeof(gpsDataRx1));
 800576c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005770:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005774:	4413      	add	r3, r2
 8005776:	461d      	mov	r5, r3
 8005778:	f107 0484 	add.w	r4, r7, #132	; 0x84
 800577c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800577e:	6028      	str	r0, [r5, #0]
 8005780:	6069      	str	r1, [r5, #4]
 8005782:	60aa      	str	r2, [r5, #8]
 8005784:	60eb      	str	r3, [r5, #12]
 8005786:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005788:	6128      	str	r0, [r5, #16]
 800578a:	6169      	str	r1, [r5, #20]
 800578c:	61aa      	str	r2, [r5, #24]
 800578e:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx1);
 8005790:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005794:	3320      	adds	r3, #32
 8005796:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx2, sizeof(gpsDataRx2));
 800579a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800579e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057a2:	4413      	add	r3, r2
 80057a4:	461d      	mov	r5, r3
 80057a6:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80057aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057ac:	6028      	str	r0, [r5, #0]
 80057ae:	6069      	str	r1, [r5, #4]
 80057b0:	60aa      	str	r2, [r5, #8]
 80057b2:	60eb      	str	r3, [r5, #12]
 80057b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057b6:	6128      	str	r0, [r5, #16]
 80057b8:	6169      	str	r1, [r5, #20]
 80057ba:	61aa      	str	r2, [r5, #24]
 80057bc:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx2);
 80057be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057c2:	3320      	adds	r3, #32
 80057c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx3, sizeof(gpsDataRx3));
 80057c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057d0:	4413      	add	r3, r2
 80057d2:	461d      	mov	r5, r3
 80057d4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80057d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057da:	6028      	str	r0, [r5, #0]
 80057dc:	6069      	str	r1, [r5, #4]
 80057de:	60aa      	str	r2, [r5, #8]
 80057e0:	60eb      	str	r3, [r5, #12]
 80057e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057e4:	6128      	str	r0, [r5, #16]
 80057e6:	6169      	str	r1, [r5, #20]
 80057e8:	61aa      	str	r2, [r5, #24]
 80057ea:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx3);
 80057ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057f0:	3320      	adds	r3, #32
 80057f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx4, sizeof(gpsDataRx4));
 80057f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057fe:	4413      	add	r3, r2
 8005800:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005802:	601a      	str	r2, [r3, #0]


	//String comparisons
	const char* GNRMC = "NRMC,";
 8005804:	4b08      	ldr	r3, [pc, #32]	; (8005828 <getGpsData+0x3b4>)
 8005806:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	const char* minus1 = "-1";
 800580a:	4b08      	ldr	r3, [pc, #32]	; (800582c <getGpsData+0x3b8>)
 800580c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	const char* comma = ",";
 8005810:	4b07      	ldr	r3, [pc, #28]	; (8005830 <getGpsData+0x3bc>)
 8005812:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	char* gpsDataList[12];

	for (int i = 0; i < 12; i++) {
 8005816:	2300      	movs	r3, #0
 8005818:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800581c:	e017      	b.n	800584e <getGpsData+0x3da>
 800581e:	bf00      	nop
 8005820:	20000008 	.word	0x20000008
 8005824:	200014b4 	.word	0x200014b4
 8005828:	08010fd0 	.word	0x08010fd0
 800582c:	08010fd8 	.word	0x08010fd8
 8005830:	08010fdc 	.word	0x08010fdc
	    gpsDataList[i] = "-1";
 8005834:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	33d8      	adds	r3, #216	; 0xd8
 800583c:	443b      	add	r3, r7
 800583e:	4a91      	ldr	r2, [pc, #580]	; (8005a84 <getGpsData+0x610>)
 8005840:	f843 2cc8 	str.w	r2, [r3, #-200]
	for (int i = 0; i < 12; i++) {
 8005844:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005848:	3301      	adds	r3, #1
 800584a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800584e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005852:	2b0b      	cmp	r3, #11
 8005854:	ddee      	ble.n	8005834 <getGpsData+0x3c0>
	}

	//Parsing the data and updating our values

	if (strncmp(concatenatedArray, GNRMC, strlen(GNRMC)) == 0) {
 8005856:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800585a:	f7fa fd11 	bl	8000280 <strlen>
 800585e:	4603      	mov	r3, r0
 8005860:	461a      	mov	r2, r3
 8005862:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8005866:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800586a:	f005 fe0a 	bl	800b482 <strncmp>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d122      	bne.n	80058ba <getGpsData+0x446>
		char* individualGpsData = strtok(concatenatedArray, ","); // Initialize strtok with the buffer
 8005874:	4984      	ldr	r1, [pc, #528]	; (8005a88 <getGpsData+0x614>)
 8005876:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800587a:	f005 fe15 	bl	800b4a8 <strtok>
 800587e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		int index = 0;
 8005882:	2300      	movs	r3, #0
 8005884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

		while (individualGpsData != NULL) {
 8005888:	e013      	b.n	80058b2 <getGpsData+0x43e>
			gpsDataList[index] = individualGpsData; // Store the token in an array
 800588a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	33d8      	adds	r3, #216	; 0xd8
 8005892:	443b      	add	r3, r7
 8005894:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005898:	f843 2cc8 	str.w	r2, [r3, #-200]
			individualGpsData = strtok(NULL, ","); // Get the next token
 800589c:	497a      	ldr	r1, [pc, #488]	; (8005a88 <getGpsData+0x614>)
 800589e:	2000      	movs	r0, #0
 80058a0:	f005 fe02 	bl	800b4a8 <strtok>
 80058a4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
			index++;
 80058a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058ac:	3301      	adds	r3, #1
 80058ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		while (individualGpsData != NULL) {
 80058b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1e7      	bne.n	800588a <getGpsData+0x416>
		}
	}

	//if the value is different from both -1 and ,, we update our time
	if ((strncmp(gpsDataList[1], minus1, strlen(minus1)) != 0) &&
 80058ba:	697c      	ldr	r4, [r7, #20]
 80058bc:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80058c0:	f7fa fcde 	bl	8000280 <strlen>
 80058c4:	4603      	mov	r3, r0
 80058c6:	461a      	mov	r2, r3
 80058c8:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80058cc:	4620      	mov	r0, r4
 80058ce:	f005 fdd8 	bl	800b482 <strncmp>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d015      	beq.n	8005904 <getGpsData+0x490>
	   (strncmp(gpsDataList[1], comma, strlen(comma)) != 0)) {
 80058d8:	697c      	ldr	r4, [r7, #20]
 80058da:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80058de:	f7fa fccf 	bl	8000280 <strlen>
 80058e2:	4603      	mov	r3, r0
 80058e4:	461a      	mov	r2, r3
 80058e6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80058ea:	4620      	mov	r0, r4
 80058ec:	f005 fdc9 	bl	800b482 <strncmp>
 80058f0:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[1], minus1, strlen(minus1)) != 0) &&
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d006      	beq.n	8005904 <getGpsData+0x490>
		*time = atoi(gpsDataList[1]);
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f004 fef5 	bl	800a6e8 <atoi>
 80058fe:	4602      	mov	r2, r0
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	601a      	str	r2, [r3, #0]
	}

	if ((strncmp(gpsDataList[3], minus1, strlen(minus1)) != 0) &&
 8005904:	69fc      	ldr	r4, [r7, #28]
 8005906:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800590a:	f7fa fcb9 	bl	8000280 <strlen>
 800590e:	4603      	mov	r3, r0
 8005910:	461a      	mov	r2, r3
 8005912:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005916:	4620      	mov	r0, r4
 8005918:	f005 fdb3 	bl	800b482 <strncmp>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d015      	beq.n	800594e <getGpsData+0x4da>
	   (strncmp(gpsDataList[3], comma, strlen(comma)) != 0)) {
 8005922:	69fc      	ldr	r4, [r7, #28]
 8005924:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8005928:	f7fa fcaa 	bl	8000280 <strlen>
 800592c:	4603      	mov	r3, r0
 800592e:	461a      	mov	r2, r3
 8005930:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8005934:	4620      	mov	r0, r4
 8005936:	f005 fda4 	bl	800b482 <strncmp>
 800593a:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[3], minus1, strlen(minus1)) != 0) &&
 800593c:	2b00      	cmp	r3, #0
 800593e:	d006      	beq.n	800594e <getGpsData+0x4da>
		*lat = atoi(gpsDataList[3]);
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	4618      	mov	r0, r3
 8005944:	f004 fed0 	bl	800a6e8 <atoi>
 8005948:	4602      	mov	r2, r0
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	601a      	str	r2, [r3, #0]
	}

	if ((strncmp(gpsDataList[4], minus1, strlen(minus1)) != 0) &&
 800594e:	6a3c      	ldr	r4, [r7, #32]
 8005950:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8005954:	f7fa fc94 	bl	8000280 <strlen>
 8005958:	4603      	mov	r3, r0
 800595a:	461a      	mov	r2, r3
 800595c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005960:	4620      	mov	r0, r4
 8005962:	f005 fd8e 	bl	800b482 <strncmp>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d014      	beq.n	8005996 <getGpsData+0x522>
	   (strncmp(gpsDataList[4], comma, strlen(comma)) != 0)) {
 800596c:	6a3c      	ldr	r4, [r7, #32]
 800596e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8005972:	f7fa fc85 	bl	8000280 <strlen>
 8005976:	4603      	mov	r3, r0
 8005978:	461a      	mov	r2, r3
 800597a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800597e:	4620      	mov	r0, r4
 8005980:	f005 fd7f 	bl	800b482 <strncmp>
 8005984:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[4], minus1, strlen(minus1)) != 0) &&
 8005986:	2b00      	cmp	r3, #0
 8005988:	d005      	beq.n	8005996 <getGpsData+0x522>
		strcpy(latDir, gpsDataList[4]);
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	4619      	mov	r1, r3
 800598e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8005992:	f005 fe6b 	bl	800b66c <strcpy>
	}

	if ((strncmp(gpsDataList[5], minus1, strlen(minus1)) != 0) &&
 8005996:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005998:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800599c:	f7fa fc70 	bl	8000280 <strlen>
 80059a0:	4603      	mov	r3, r0
 80059a2:	461a      	mov	r2, r3
 80059a4:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80059a8:	4620      	mov	r0, r4
 80059aa:	f005 fd6a 	bl	800b482 <strncmp>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d015      	beq.n	80059e0 <getGpsData+0x56c>
	   (strncmp(gpsDataList[5], comma, strlen(comma)) != 0)) {
 80059b4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80059b6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80059ba:	f7fa fc61 	bl	8000280 <strlen>
 80059be:	4603      	mov	r3, r0
 80059c0:	461a      	mov	r2, r3
 80059c2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80059c6:	4620      	mov	r0, r4
 80059c8:	f005 fd5b 	bl	800b482 <strncmp>
 80059cc:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[5], minus1, strlen(minus1)) != 0) &&
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d006      	beq.n	80059e0 <getGpsData+0x56c>
		*longi = atoi(gpsDataList[5]);
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	4618      	mov	r0, r3
 80059d6:	f004 fe87 	bl	800a6e8 <atoi>
 80059da:	4602      	mov	r2, r0
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	601a      	str	r2, [r3, #0]
	}

	if ((strncmp(gpsDataList[6], minus1, strlen(minus1)) != 0) &&
 80059e0:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80059e2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80059e6:	f7fa fc4b 	bl	8000280 <strlen>
 80059ea:	4603      	mov	r3, r0
 80059ec:	461a      	mov	r2, r3
 80059ee:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80059f2:	4620      	mov	r0, r4
 80059f4:	f005 fd45 	bl	800b482 <strncmp>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d014      	beq.n	8005a28 <getGpsData+0x5b4>
	   (strncmp(gpsDataList[6], comma, strlen(comma)) != 0)) {
 80059fe:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8005a00:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8005a04:	f7fa fc3c 	bl	8000280 <strlen>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8005a10:	4620      	mov	r0, r4
 8005a12:	f005 fd36 	bl	800b482 <strncmp>
 8005a16:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[6], minus1, strlen(minus1)) != 0) &&
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d005      	beq.n	8005a28 <getGpsData+0x5b4>
		strcpy(longDir, gpsDataList[6]);
 8005a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1e:	4619      	mov	r1, r3
 8005a20:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8005a24:	f005 fe22 	bl	800b66c <strcpy>
	}

	if ((strncmp(gpsDataList[8], minus1, strlen(minus1)) != 0) &&
 8005a28:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8005a2a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8005a2e:	f7fa fc27 	bl	8000280 <strlen>
 8005a32:	4603      	mov	r3, r0
 8005a34:	461a      	mov	r2, r3
 8005a36:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f005 fd21 	bl	800b482 <strncmp>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d015      	beq.n	8005a72 <getGpsData+0x5fe>
	   (strncmp(gpsDataList[8], comma, strlen(comma)) != 0)) {
 8005a46:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8005a48:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8005a4c:	f7fa fc18 	bl	8000280 <strlen>
 8005a50:	4603      	mov	r3, r0
 8005a52:	461a      	mov	r2, r3
 8005a54:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f005 fd12 	bl	800b482 <strncmp>
 8005a5e:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[8], minus1, strlen(minus1)) != 0) &&
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d006      	beq.n	8005a72 <getGpsData+0x5fe>
		*date = atoi(gpsDataList[8]);
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	4618      	mov	r0, r3
 8005a68:	f004 fe3e 	bl	800a6e8 <atoi>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	601a      	str	r2, [r3, #0]
	}

	free(concatenatedArray);
 8005a72:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8005a76:	f004 fe43 	bl	800a700 <free>
}
 8005a7a:	bf00      	nop
 8005a7c:	37d8      	adds	r7, #216	; 0xd8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bdb0      	pop	{r4, r5, r7, pc}
 8005a82:	bf00      	nop
 8005a84:	08010fd8 	.word	0x08010fd8
 8005a88:	08010fdc 	.word	0x08010fdc

08005a8c <magnetometerData>:

float magnetometerData(float xCal,float yCal,float zCal) {
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08c      	sub	sp, #48	; 0x30
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	ed87 0a03 	vstr	s0, [r7, #12]
 8005a96:	edc7 0a02 	vstr	s1, [r7, #8]
 8005a9a:	ed87 1a01 	vstr	s2, [r7, #4]
	int16_t magnetometerVal [3] = {0};
 8005a9e:	f107 0314 	add.w	r3, r7, #20
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	809a      	strh	r2, [r3, #4]

	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &dataRegister, 1, 20) != HAL_OK){} //send data register address
 8005aa8:	bf00      	nop
 8005aaa:	4b21      	ldr	r3, [pc, #132]	; (8005b30 <magnetometerData+0xa4>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	b299      	uxth	r1, r3
 8005ab4:	2314      	movs	r3, #20
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	2301      	movs	r3, #1
 8005aba:	4a1e      	ldr	r2, [pc, #120]	; (8005b34 <magnetometerData+0xa8>)
 8005abc:	481e      	ldr	r0, [pc, #120]	; (8005b38 <magnetometerData+0xac>)
 8005abe:	f002 f909 	bl	8007cd4 <HAL_I2C_Master_Transmit>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1f0      	bne.n	8005aaa <magnetometerData+0x1e>
	while (HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), magnetometerVal, 6, HAL_MAX_DELAY)){}
 8005ac8:	bf00      	nop
 8005aca:	4b19      	ldr	r3, [pc, #100]	; (8005b30 <magnetometerData+0xa4>)
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	b21b      	sxth	r3, r3
 8005ad2:	f043 0301 	orr.w	r3, r3, #1
 8005ad6:	b21b      	sxth	r3, r3
 8005ad8:	b299      	uxth	r1, r3
 8005ada:	f107 0214 	add.w	r2, r7, #20
 8005ade:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	2306      	movs	r3, #6
 8005ae6:	4814      	ldr	r0, [pc, #80]	; (8005b38 <magnetometerData+0xac>)
 8005ae8:	f002 f9f2 	bl	8007ed0 <HAL_I2C_Master_Receive>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1eb      	bne.n	8005aca <magnetometerData+0x3e>

	int16_t xMag = magnetometerVal[0];
 8005af2:	8abb      	ldrh	r3, [r7, #20]
 8005af4:	84fb      	strh	r3, [r7, #38]	; 0x26

	int16_t yMag = magnetometerVal[1];
 8005af6:	8afb      	ldrh	r3, [r7, #22]
 8005af8:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t zMag = magnetometerVal[2];
 8005afa:	8b3b      	ldrh	r3, [r7, #24]
 8005afc:	847b      	strh	r3, [r7, #34]	; 0x22

	float direction = getDirectionAngle(xMag, yMag, zMag, xCal, yCal, zCal);
 8005afe:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8005b02:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	; 0x24
 8005b06:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8005b0a:	ed97 1a01 	vldr	s2, [r7, #4]
 8005b0e:	edd7 0a02 	vldr	s1, [r7, #8]
 8005b12:	ed97 0a03 	vldr	s0, [r7, #12]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 fa4a 	bl	8005fb0 <getDirectionAngle>
 8005b1c:	ed87 0a07 	vstr	s0, [r7, #28]

	return direction;
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	ee07 3a90 	vmov	s15, r3
}
 8005b26:	eeb0 0a67 	vmov.f32	s0, s15
 8005b2a:	3728      	adds	r7, #40	; 0x28
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	20000000 	.word	0x20000000
 8005b34:	20000001 	.word	0x20000001
 8005b38:	200014b4 	.word	0x200014b4

08005b3c <setupMag>:


void setupMag() {
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af02      	add	r7, sp, #8
//
//	//Values to send
//	uint8_t initRegA = 0x0C;
//	uint8_t disRegA = 0x0E;
//	uint8_t initRegC = 0x10;
	uint8_t magSetupRX = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	71fb      	strb	r3, [r7, #7]

	uint8_t magSetupTX [2] = {0};
 8005b46:	2300      	movs	r3, #0
 8005b48:	80bb      	strh	r3, [r7, #4]

	//1
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegC, 1, HAL_MAX_DELAY) != HAL_OK){} //send address pointer
 8005b4a:	bf00      	nop
 8005b4c:	4b8d      	ldr	r3, [pc, #564]	; (8005d84 <setupMag+0x248>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	005b      	lsls	r3, r3, #1
 8005b54:	b299      	uxth	r1, r3
 8005b56:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	4a8a      	ldr	r2, [pc, #552]	; (8005d88 <setupMag+0x24c>)
 8005b60:	488a      	ldr	r0, [pc, #552]	; (8005d8c <setupMag+0x250>)
 8005b62:	f002 f8b7 	bl	8007cd4 <HAL_I2C_Master_Transmit>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1ef      	bne.n	8005b4c <setupMag+0x10>

	//2
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8005b6c:	4b85      	ldr	r3, [pc, #532]	; (8005d84 <setupMag+0x248>)
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	b21b      	sxth	r3, r3
 8005b74:	f043 0301 	orr.w	r3, r3, #1
 8005b78:	b21b      	sxth	r3, r3
 8005b7a:	b299      	uxth	r1, r3
 8005b7c:	1dfa      	adds	r2, r7, #7
 8005b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	2301      	movs	r3, #1
 8005b86:	4881      	ldr	r0, [pc, #516]	; (8005d8c <setupMag+0x250>)
 8005b88:	f002 f9a2 	bl	8007ed0 <HAL_I2C_Master_Receive>


	//3
	magSetupTX[0] = cfgRegC;
 8005b8c:	4b7e      	ldr	r3, [pc, #504]	; (8005d88 <setupMag+0x24c>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = initRegC;
 8005b92:	4b7f      	ldr	r3, [pc, #508]	; (8005d90 <setupMag+0x254>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 8005b98:	bf00      	nop
 8005b9a:	4b7a      	ldr	r3, [pc, #488]	; (8005d84 <setupMag+0x248>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	b299      	uxth	r1, r3
 8005ba4:	1d3a      	adds	r2, r7, #4
 8005ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	2302      	movs	r3, #2
 8005bae:	4877      	ldr	r0, [pc, #476]	; (8005d8c <setupMag+0x250>)
 8005bb0:	f002 f890 	bl	8007cd4 <HAL_I2C_Master_Transmit>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1ef      	bne.n	8005b9a <setupMag+0x5e>

	//4
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegA, 1, HAL_MAX_DELAY) != HAL_OK){}
 8005bba:	bf00      	nop
 8005bbc:	4b71      	ldr	r3, [pc, #452]	; (8005d84 <setupMag+0x248>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	b299      	uxth	r1, r3
 8005bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	2301      	movs	r3, #1
 8005bce:	4a71      	ldr	r2, [pc, #452]	; (8005d94 <setupMag+0x258>)
 8005bd0:	486e      	ldr	r0, [pc, #440]	; (8005d8c <setupMag+0x250>)
 8005bd2:	f002 f87f 	bl	8007cd4 <HAL_I2C_Master_Transmit>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1ef      	bne.n	8005bbc <setupMag+0x80>

	//5
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8005bdc:	4b69      	ldr	r3, [pc, #420]	; (8005d84 <setupMag+0x248>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	b21b      	sxth	r3, r3
 8005be4:	f043 0301 	orr.w	r3, r3, #1
 8005be8:	b21b      	sxth	r3, r3
 8005bea:	b299      	uxth	r1, r3
 8005bec:	1dfa      	adds	r2, r7, #7
 8005bee:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	4865      	ldr	r0, [pc, #404]	; (8005d8c <setupMag+0x250>)
 8005bf8:	f002 f96a 	bl	8007ed0 <HAL_I2C_Master_Receive>

	//6
	magSetupTX[0] = cfgRegA;
 8005bfc:	4b65      	ldr	r3, [pc, #404]	; (8005d94 <setupMag+0x258>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = disRegA;
 8005c02:	4b65      	ldr	r3, [pc, #404]	; (8005d98 <setupMag+0x25c>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 8005c08:	bf00      	nop
 8005c0a:	4b5e      	ldr	r3, [pc, #376]	; (8005d84 <setupMag+0x248>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	b299      	uxth	r1, r3
 8005c14:	1d3a      	adds	r2, r7, #4
 8005c16:	f04f 33ff 	mov.w	r3, #4294967295
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	485b      	ldr	r0, [pc, #364]	; (8005d8c <setupMag+0x250>)
 8005c20:	f002 f858 	bl	8007cd4 <HAL_I2C_Master_Transmit>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1ef      	bne.n	8005c0a <setupMag+0xce>

	//7
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegA, 1, HAL_MAX_DELAY) != HAL_OK){}
 8005c2a:	bf00      	nop
 8005c2c:	4b55      	ldr	r3, [pc, #340]	; (8005d84 <setupMag+0x248>)
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	b299      	uxth	r1, r3
 8005c36:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	4a55      	ldr	r2, [pc, #340]	; (8005d94 <setupMag+0x258>)
 8005c40:	4852      	ldr	r0, [pc, #328]	; (8005d8c <setupMag+0x250>)
 8005c42:	f002 f847 	bl	8007cd4 <HAL_I2C_Master_Transmit>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1ef      	bne.n	8005c2c <setupMag+0xf0>

	//8
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8005c4c:	4b4d      	ldr	r3, [pc, #308]	; (8005d84 <setupMag+0x248>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	b21b      	sxth	r3, r3
 8005c54:	f043 0301 	orr.w	r3, r3, #1
 8005c58:	b21b      	sxth	r3, r3
 8005c5a:	b299      	uxth	r1, r3
 8005c5c:	1dfa      	adds	r2, r7, #7
 8005c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	2301      	movs	r3, #1
 8005c66:	4849      	ldr	r0, [pc, #292]	; (8005d8c <setupMag+0x250>)
 8005c68:	f002 f932 	bl	8007ed0 <HAL_I2C_Master_Receive>

	//9
	magSetupTX[0] = cfgRegA;
 8005c6c:	4b49      	ldr	r3, [pc, #292]	; (8005d94 <setupMag+0x258>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = disRegA;
 8005c72:	4b49      	ldr	r3, [pc, #292]	; (8005d98 <setupMag+0x25c>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 8005c78:	bf00      	nop
 8005c7a:	4b42      	ldr	r3, [pc, #264]	; (8005d84 <setupMag+0x248>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	b299      	uxth	r1, r3
 8005c84:	1d3a      	adds	r2, r7, #4
 8005c86:	f04f 33ff 	mov.w	r3, #4294967295
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	483f      	ldr	r0, [pc, #252]	; (8005d8c <setupMag+0x250>)
 8005c90:	f002 f820 	bl	8007cd4 <HAL_I2C_Master_Transmit>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1ef      	bne.n	8005c7a <setupMag+0x13e>

	//10
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegC, 1, HAL_MAX_DELAY) != HAL_OK){}
 8005c9a:	bf00      	nop
 8005c9c:	4b39      	ldr	r3, [pc, #228]	; (8005d84 <setupMag+0x248>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	b299      	uxth	r1, r3
 8005ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	2301      	movs	r3, #1
 8005cae:	4a36      	ldr	r2, [pc, #216]	; (8005d88 <setupMag+0x24c>)
 8005cb0:	4836      	ldr	r0, [pc, #216]	; (8005d8c <setupMag+0x250>)
 8005cb2:	f002 f80f 	bl	8007cd4 <HAL_I2C_Master_Transmit>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1ef      	bne.n	8005c9c <setupMag+0x160>

	//11
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8005cbc:	4b31      	ldr	r3, [pc, #196]	; (8005d84 <setupMag+0x248>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	b21b      	sxth	r3, r3
 8005cc4:	f043 0301 	orr.w	r3, r3, #1
 8005cc8:	b21b      	sxth	r3, r3
 8005cca:	b299      	uxth	r1, r3
 8005ccc:	1dfa      	adds	r2, r7, #7
 8005cce:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	482d      	ldr	r0, [pc, #180]	; (8005d8c <setupMag+0x250>)
 8005cd8:	f002 f8fa 	bl	8007ed0 <HAL_I2C_Master_Receive>


	//12
	magSetupTX[0] = cfgRegC;
 8005cdc:	4b2a      	ldr	r3, [pc, #168]	; (8005d88 <setupMag+0x24c>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = initRegC;
 8005ce2:	4b2b      	ldr	r3, [pc, #172]	; (8005d90 <setupMag+0x254>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 8005ce8:	bf00      	nop
 8005cea:	4b26      	ldr	r3, [pc, #152]	; (8005d84 <setupMag+0x248>)
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	b299      	uxth	r1, r3
 8005cf4:	1d3a      	adds	r2, r7, #4
 8005cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	4823      	ldr	r0, [pc, #140]	; (8005d8c <setupMag+0x250>)
 8005d00:	f001 ffe8 	bl	8007cd4 <HAL_I2C_Master_Transmit>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1ef      	bne.n	8005cea <setupMag+0x1ae>

	//13
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegA, 2, HAL_MAX_DELAY) != HAL_OK){}
 8005d0a:	bf00      	nop
 8005d0c:	4b1d      	ldr	r3, [pc, #116]	; (8005d84 <setupMag+0x248>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	b299      	uxth	r1, r3
 8005d16:	f04f 33ff 	mov.w	r3, #4294967295
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	4a1d      	ldr	r2, [pc, #116]	; (8005d94 <setupMag+0x258>)
 8005d20:	481a      	ldr	r0, [pc, #104]	; (8005d8c <setupMag+0x250>)
 8005d22:	f001 ffd7 	bl	8007cd4 <HAL_I2C_Master_Transmit>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1ef      	bne.n	8005d0c <setupMag+0x1d0>

	//14
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8005d2c:	4b15      	ldr	r3, [pc, #84]	; (8005d84 <setupMag+0x248>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	005b      	lsls	r3, r3, #1
 8005d32:	b21b      	sxth	r3, r3
 8005d34:	f043 0301 	orr.w	r3, r3, #1
 8005d38:	b21b      	sxth	r3, r3
 8005d3a:	b299      	uxth	r1, r3
 8005d3c:	1dfa      	adds	r2, r7, #7
 8005d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	2301      	movs	r3, #1
 8005d46:	4811      	ldr	r0, [pc, #68]	; (8005d8c <setupMag+0x250>)
 8005d48:	f002 f8c2 	bl	8007ed0 <HAL_I2C_Master_Receive>


	//15
	magSetupTX[0] = cfgRegA;
 8005d4c:	4b11      	ldr	r3, [pc, #68]	; (8005d94 <setupMag+0x258>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = initRegA;
 8005d52:	4b12      	ldr	r3, [pc, #72]	; (8005d9c <setupMag+0x260>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 8005d58:	bf00      	nop
 8005d5a:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <setupMag+0x248>)
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	b299      	uxth	r1, r3
 8005d64:	1d3a      	adds	r2, r7, #4
 8005d66:	f04f 33ff 	mov.w	r3, #4294967295
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	4807      	ldr	r0, [pc, #28]	; (8005d8c <setupMag+0x250>)
 8005d70:	f001 ffb0 	bl	8007cd4 <HAL_I2C_Master_Transmit>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1ef      	bne.n	8005d5a <setupMag+0x21e>
}
 8005d7a:	bf00      	nop
 8005d7c:	bf00      	nop
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	20000000 	.word	0x20000000
 8005d88:	20000003 	.word	0x20000003
 8005d8c:	200014b4 	.word	0x200014b4
 8005d90:	20000006 	.word	0x20000006
 8005d94:	20000002 	.word	0x20000002
 8005d98:	20000005 	.word	0x20000005
 8005d9c:	20000004 	.word	0x20000004

08005da0 <hardIronCal>:

void hardIronCal(float* xCal, float* yCal, float* zCal) {
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b08e      	sub	sp, #56	; 0x38
 8005da4:	af02      	add	r7, sp, #8
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
  int16_t magnetometerVal [3] = {0};
 8005dac:	f107 0314 	add.w	r3, r7, #20
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	809a      	strh	r2, [r3, #4]

  while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &dataRegister, 1, 20) != HAL_OK){} //send data register address
 8005db6:	bf00      	nop
 8005db8:	4b78      	ldr	r3, [pc, #480]	; (8005f9c <hardIronCal+0x1fc>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	b299      	uxth	r1, r3
 8005dc2:	2314      	movs	r3, #20
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	4a75      	ldr	r2, [pc, #468]	; (8005fa0 <hardIronCal+0x200>)
 8005dca:	4876      	ldr	r0, [pc, #472]	; (8005fa4 <hardIronCal+0x204>)
 8005dcc:	f001 ff82 	bl	8007cd4 <HAL_I2C_Master_Transmit>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1f0      	bne.n	8005db8 <hardIronCal+0x18>
  while (HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), magnetometerVal, 6, HAL_MAX_DELAY)){}
 8005dd6:	bf00      	nop
 8005dd8:	4b70      	ldr	r3, [pc, #448]	; (8005f9c <hardIronCal+0x1fc>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	b21b      	sxth	r3, r3
 8005de0:	f043 0301 	orr.w	r3, r3, #1
 8005de4:	b21b      	sxth	r3, r3
 8005de6:	b299      	uxth	r1, r3
 8005de8:	f107 0214 	add.w	r2, r7, #20
 8005dec:	f04f 33ff 	mov.w	r3, #4294967295
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	2306      	movs	r3, #6
 8005df4:	486b      	ldr	r0, [pc, #428]	; (8005fa4 <hardIronCal+0x204>)
 8005df6:	f002 f86b 	bl	8007ed0 <HAL_I2C_Master_Receive>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1eb      	bne.n	8005dd8 <hardIronCal+0x38>

  int16_t xMax = magnetometerVal[0];
 8005e00:	8abb      	ldrh	r3, [r7, #20]
 8005e02:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int16_t xMin = magnetometerVal[0];
 8005e04:	8abb      	ldrh	r3, [r7, #20]
 8005e06:	85bb      	strh	r3, [r7, #44]	; 0x2c

  int16_t yMax = magnetometerVal[1];
 8005e08:	8afb      	ldrh	r3, [r7, #22]
 8005e0a:	857b      	strh	r3, [r7, #42]	; 0x2a
  int16_t yMin = magnetometerVal[1];
 8005e0c:	8afb      	ldrh	r3, [r7, #22]
 8005e0e:	853b      	strh	r3, [r7, #40]	; 0x28

  int16_t zMax = magnetometerVal[2];
 8005e10:	8b3b      	ldrh	r3, [r7, #24]
 8005e12:	84fb      	strh	r3, [r7, #38]	; 0x26
  int16_t zMin = magnetometerVal[2];
 8005e14:	8b3b      	ldrh	r3, [r7, #24]
 8005e16:	84bb      	strh	r3, [r7, #36]	; 0x24

  int i = 0;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	623b      	str	r3, [r7, #32]
  int motorCounter = 0;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	61fb      	str	r3, [r7, #28]
  while (i != 54) {
 8005e20:	e087      	b.n	8005f32 <hardIronCal+0x192>

		while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &dataRegister, 1, 20) != HAL_OK){} //send data register address
 8005e22:	bf00      	nop
 8005e24:	4b5d      	ldr	r3, [pc, #372]	; (8005f9c <hardIronCal+0x1fc>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	b299      	uxth	r1, r3
 8005e2e:	2314      	movs	r3, #20
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	2301      	movs	r3, #1
 8005e34:	4a5a      	ldr	r2, [pc, #360]	; (8005fa0 <hardIronCal+0x200>)
 8005e36:	485b      	ldr	r0, [pc, #364]	; (8005fa4 <hardIronCal+0x204>)
 8005e38:	f001 ff4c 	bl	8007cd4 <HAL_I2C_Master_Transmit>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1f0      	bne.n	8005e24 <hardIronCal+0x84>
		while (HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), magnetometerVal, 6, HAL_MAX_DELAY)){}
 8005e42:	bf00      	nop
 8005e44:	4b55      	ldr	r3, [pc, #340]	; (8005f9c <hardIronCal+0x1fc>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	b21b      	sxth	r3, r3
 8005e4c:	f043 0301 	orr.w	r3, r3, #1
 8005e50:	b21b      	sxth	r3, r3
 8005e52:	b299      	uxth	r1, r3
 8005e54:	f107 0214 	add.w	r2, r7, #20
 8005e58:	f04f 33ff 	mov.w	r3, #4294967295
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	2306      	movs	r3, #6
 8005e60:	4850      	ldr	r0, [pc, #320]	; (8005fa4 <hardIronCal+0x204>)
 8005e62:	f002 f835 	bl	8007ed0 <HAL_I2C_Master_Receive>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1eb      	bne.n	8005e44 <hardIronCal+0xa4>

		//Updating xMax and xMin
		if (magnetometerVal[0] > xMax) {
 8005e6c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005e70:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8005e74:	429a      	cmp	r2, r3
 8005e76:	da02      	bge.n	8005e7e <hardIronCal+0xde>
		  xMax = magnetometerVal[0];
 8005e78:	8abb      	ldrh	r3, [r7, #20]
 8005e7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005e7c:	e007      	b.n	8005e8e <hardIronCal+0xee>
		}

		else if (magnetometerVal[0] < xMin) {
 8005e7e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005e82:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8005e86:	429a      	cmp	r2, r3
 8005e88:	dd01      	ble.n	8005e8e <hardIronCal+0xee>
		  xMin = magnetometerVal[0];
 8005e8a:	8abb      	ldrh	r3, [r7, #20]
 8005e8c:	85bb      	strh	r3, [r7, #44]	; 0x2c
		}

		//Updating yMax and yMin
		if (magnetometerVal[1] > yMax) {
 8005e8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005e92:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8005e96:	429a      	cmp	r2, r3
 8005e98:	da02      	bge.n	8005ea0 <hardIronCal+0x100>
		  yMax = magnetometerVal[1];
 8005e9a:	8afb      	ldrh	r3, [r7, #22]
 8005e9c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005e9e:	e007      	b.n	8005eb0 <hardIronCal+0x110>
		}

		else if (magnetometerVal[1] < yMin) {
 8005ea0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005ea4:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	dd01      	ble.n	8005eb0 <hardIronCal+0x110>
		  yMin = magnetometerVal[1];
 8005eac:	8afb      	ldrh	r3, [r7, #22]
 8005eae:	853b      	strh	r3, [r7, #40]	; 0x28
		}

		//Updating zMax and zMin
		if (magnetometerVal[2] > zMax) {
 8005eb0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005eb4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	da02      	bge.n	8005ec2 <hardIronCal+0x122>
		  zMax = magnetometerVal[2];
 8005ebc:	8b3b      	ldrh	r3, [r7, #24]
 8005ebe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005ec0:	e007      	b.n	8005ed2 <hardIronCal+0x132>
		}

		else if (magnetometerVal[2] < zMin) {
 8005ec2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005ec6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	dd01      	ble.n	8005ed2 <hardIronCal+0x132>
		  zMin = magnetometerVal[2];
 8005ece:	8b3b      	ldrh	r3, [r7, #24]
 8005ed0:	84bb      	strh	r3, [r7, #36]	; 0x24
		}

		if ((HAL_GetTick() - motorCounter) > 1000) {
 8005ed2:	f000 fe7b 	bl	8006bcc <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ee0:	d927      	bls.n	8005f32 <hardIronCal+0x192>
			setupMotorSusan();
 8005ee2:	f7ff f98d 	bl	8005200 <setupMotorSusan>
			if (i < 16) {
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	2b0f      	cmp	r3, #15
 8005eea:	dc06      	bgt.n	8005efa <hardIronCal+0x15a>
				setClockwiseSusan();
 8005eec:	f7ff f936 	bl	800515c <setClockwiseSusan>
				rotateMotorSusan(361);
 8005ef0:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8005fa8 <hardIronCal+0x208>
 8005ef4:	f7ff f8ea 	bl	80050cc <rotateMotorSusan>
 8005ef8:	e012      	b.n	8005f20 <hardIronCal+0x180>
			}
			else if ( i >= 16 && i < 43){
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	2b0f      	cmp	r3, #15
 8005efe:	dd09      	ble.n	8005f14 <hardIronCal+0x174>
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	2b2a      	cmp	r3, #42	; 0x2a
 8005f04:	dc06      	bgt.n	8005f14 <hardIronCal+0x174>
				setCounterClockwiseSusan();
 8005f06:	f7ff f941 	bl	800518c <setCounterClockwiseSusan>
				rotateMotorSusan(361);
 8005f0a:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8005fa8 <hardIronCal+0x208>
 8005f0e:	f7ff f8dd 	bl	80050cc <rotateMotorSusan>
 8005f12:	e005      	b.n	8005f20 <hardIronCal+0x180>
			}
			else {
				setClockwiseSusan();
 8005f14:	f7ff f922 	bl	800515c <setClockwiseSusan>
				rotateMotorSusan(361);
 8005f18:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8005fa8 <hardIronCal+0x208>
 8005f1c:	f7ff f8d6 	bl	80050cc <rotateMotorSusan>
			}
			turnOffMotorSusan();
 8005f20:	f7ff f98a 	bl	8005238 <turnOffMotorSusan>

			i++;
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	3301      	adds	r3, #1
 8005f28:	623b      	str	r3, [r7, #32]
			motorCounter = HAL_GetTick();
 8005f2a:	f000 fe4f 	bl	8006bcc <HAL_GetTick>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	61fb      	str	r3, [r7, #28]
  while (i != 54) {
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	2b36      	cmp	r3, #54	; 0x36
 8005f36:	f47f af74 	bne.w	8005e22 <hardIronCal+0x82>
		}
	}

  //finding the calibration values

  *xCal = (xMax + xMin) / 2;
 8005f3a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8005f3e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005f42:	4413      	add	r3, r2
 8005f44:	0fda      	lsrs	r2, r3, #31
 8005f46:	4413      	add	r3, r2
 8005f48:	105b      	asrs	r3, r3, #1
 8005f4a:	ee07 3a90 	vmov	s15, r3
 8005f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	edc3 7a00 	vstr	s15, [r3]
  *yCal = (yMax + yMin) / 2;
 8005f58:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8005f5c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8005f60:	4413      	add	r3, r2
 8005f62:	0fda      	lsrs	r2, r3, #31
 8005f64:	4413      	add	r3, r2
 8005f66:	105b      	asrs	r3, r3, #1
 8005f68:	ee07 3a90 	vmov	s15, r3
 8005f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	edc3 7a00 	vstr	s15, [r3]
  *zCal = (zMax + zMin) / 2;
 8005f76:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8005f7a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005f7e:	4413      	add	r3, r2
 8005f80:	0fda      	lsrs	r2, r3, #31
 8005f82:	4413      	add	r3, r2
 8005f84:	105b      	asrs	r3, r3, #1
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	edc3 7a00 	vstr	s15, [r3]
}
 8005f94:	bf00      	nop
 8005f96:	3730      	adds	r7, #48	; 0x30
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	20000000 	.word	0x20000000
 8005fa0:	20000001 	.word	0x20000001
 8005fa4:	200014b4 	.word	0x200014b4
 8005fa8:	43b48000 	.word	0x43b48000
 8005fac:	00000000 	.word	0x00000000

08005fb0 <getDirectionAngle>:

float getDirectionAngle(int16_t xMag, int16_t yMag, int16_t zMag, float xCal, float yCal, float zCal){
 8005fb0:	b5b0      	push	{r4, r5, r7, lr}
 8005fb2:	b088      	sub	sp, #32
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	ed87 0a03 	vstr	s0, [r7, #12]
 8005fbc:	edc7 0a02 	vstr	s1, [r7, #8]
 8005fc0:	ed87 1a01 	vstr	s2, [r7, #4]
 8005fc4:	82fb      	strh	r3, [r7, #22]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	82bb      	strh	r3, [r7, #20]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	827b      	strh	r3, [r7, #18]
  xMag -= xCal;
 8005fce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8005fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fe2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fe6:	ee17 3a90 	vmov	r3, s15
 8005fea:	82fb      	strh	r3, [r7, #22]
  yMag -= yCal;
 8005fec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005ff0:	ee07 3a90 	vmov	s15, r3
 8005ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ff8:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006004:	ee17 3a90 	vmov	r3, s15
 8006008:	82bb      	strh	r3, [r7, #20]
  zMag -= zCal;
 800600a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800600e:	ee07 3a90 	vmov	s15, r3
 8006012:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006016:	edd7 7a01 	vldr	s15, [r7, #4]
 800601a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800601e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006022:	ee17 3a90 	vmov	r3, s15
 8006026:	827b      	strh	r3, [r7, #18]

  float D = atan2(xMag, yMag) * (180 / M_PI);
 8006028:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800602c:	4618      	mov	r0, r3
 800602e:	f7fa fa81 	bl	8000534 <__aeabi_i2d>
 8006032:	4604      	mov	r4, r0
 8006034:	460d      	mov	r5, r1
 8006036:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800603a:	4618      	mov	r0, r3
 800603c:	f7fa fa7a 	bl	8000534 <__aeabi_i2d>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	ec43 2b11 	vmov	d1, r2, r3
 8006048:	ec45 4b10 	vmov	d0, r4, r5
 800604c:	f007 fb00 	bl	800d650 <atan2>
 8006050:	ec51 0b10 	vmov	r0, r1, d0
 8006054:	a320      	add	r3, pc, #128	; (adr r3, 80060d8 <getDirectionAngle+0x128>)
 8006056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605a:	f7fa fad5 	bl	8000608 <__aeabi_dmul>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4610      	mov	r0, r2
 8006064:	4619      	mov	r1, r3
 8006066:	f7fa fda7 	bl	8000bb8 <__aeabi_d2f>
 800606a:	4603      	mov	r3, r0
 800606c:	61fb      	str	r3, [r7, #28]
  D -= 55;
 800606e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006072:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80060d0 <getDirectionAngle+0x120>
 8006076:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800607a:	edc7 7a07 	vstr	s15, [r7, #28]
  if (D > 360) {
 800607e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006082:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80060d4 <getDirectionAngle+0x124>
 8006086:	eef4 7ac7 	vcmpe.f32	s15, s14
 800608a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800608e:	dd08      	ble.n	80060a2 <getDirectionAngle+0xf2>
    D -= 360;
 8006090:	edd7 7a07 	vldr	s15, [r7, #28]
 8006094:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80060d4 <getDirectionAngle+0x124>
 8006098:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800609c:	edc7 7a07 	vstr	s15, [r7, #28]
 80060a0:	e00e      	b.n	80060c0 <getDirectionAngle+0x110>
  }
  else if (D < 0){
 80060a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80060a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ae:	d507      	bpl.n	80060c0 <getDirectionAngle+0x110>
    D += 360;
 80060b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80060b4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80060d4 <getDirectionAngle+0x124>
 80060b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060bc:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  return D;
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	ee07 3a90 	vmov	s15, r3
}
 80060c6:	eeb0 0a67 	vmov.f32	s0, s15
 80060ca:	3720      	adds	r7, #32
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bdb0      	pop	{r4, r5, r7, pc}
 80060d0:	425c0000 	.word	0x425c0000
 80060d4:	43b40000 	.word	0x43b40000
 80060d8:	1a63c1f8 	.word	0x1a63c1f8
 80060dc:	404ca5dc 	.word	0x404ca5dc

080060e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b094      	sub	sp, #80	; 0x50
 80060e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80060e6:	f107 0320 	add.w	r3, r7, #32
 80060ea:	2230      	movs	r2, #48	; 0x30
 80060ec:	2100      	movs	r1, #0
 80060ee:	4618      	mov	r0, r3
 80060f0:	f005 f9bf 	bl	800b472 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80060f4:	f107 030c 	add.w	r3, r7, #12
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	605a      	str	r2, [r3, #4]
 80060fe:	609a      	str	r2, [r3, #8]
 8006100:	60da      	str	r2, [r3, #12]
 8006102:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006104:	2300      	movs	r3, #0
 8006106:	60bb      	str	r3, [r7, #8]
 8006108:	4b27      	ldr	r3, [pc, #156]	; (80061a8 <SystemClock_Config+0xc8>)
 800610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610c:	4a26      	ldr	r2, [pc, #152]	; (80061a8 <SystemClock_Config+0xc8>)
 800610e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006112:	6413      	str	r3, [r2, #64]	; 0x40
 8006114:	4b24      	ldr	r3, [pc, #144]	; (80061a8 <SystemClock_Config+0xc8>)
 8006116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800611c:	60bb      	str	r3, [r7, #8]
 800611e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006120:	2300      	movs	r3, #0
 8006122:	607b      	str	r3, [r7, #4]
 8006124:	4b21      	ldr	r3, [pc, #132]	; (80061ac <SystemClock_Config+0xcc>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a20      	ldr	r2, [pc, #128]	; (80061ac <SystemClock_Config+0xcc>)
 800612a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	4b1e      	ldr	r3, [pc, #120]	; (80061ac <SystemClock_Config+0xcc>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006138:	607b      	str	r3, [r7, #4]
 800613a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800613c:	2302      	movs	r3, #2
 800613e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006140:	2301      	movs	r3, #1
 8006142:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006144:	2310      	movs	r3, #16
 8006146:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006148:	2302      	movs	r3, #2
 800614a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800614c:	2300      	movs	r3, #0
 800614e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006150:	2308      	movs	r3, #8
 8006152:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8006154:	2348      	movs	r3, #72	; 0x48
 8006156:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006158:	2302      	movs	r3, #2
 800615a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800615c:	2304      	movs	r3, #4
 800615e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006160:	f107 0320 	add.w	r3, r7, #32
 8006164:	4618      	mov	r0, r3
 8006166:	f002 fc15 	bl	8008994 <HAL_RCC_OscConfig>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006170:	f000 f9f6 	bl	8006560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006174:	230f      	movs	r3, #15
 8006176:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006178:	2302      	movs	r3, #2
 800617a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800617c:	2300      	movs	r3, #0
 800617e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006184:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006186:	2300      	movs	r3, #0
 8006188:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800618a:	f107 030c 	add.w	r3, r7, #12
 800618e:	2102      	movs	r1, #2
 8006190:	4618      	mov	r0, r3
 8006192:	f002 fe77 	bl	8008e84 <HAL_RCC_ClockConfig>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800619c:	f000 f9e0 	bl	8006560 <Error_Handler>
  }
}
 80061a0:	bf00      	nop
 80061a2:	3750      	adds	r7, #80	; 0x50
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40023800 	.word	0x40023800
 80061ac:	40007000 	.word	0x40007000

080061b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80061b6:	463b      	mov	r3, r7
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]
 80061bc:	605a      	str	r2, [r3, #4]
 80061be:	609a      	str	r2, [r3, #8]
 80061c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80061c2:	4b21      	ldr	r3, [pc, #132]	; (8006248 <MX_ADC1_Init+0x98>)
 80061c4:	4a21      	ldr	r2, [pc, #132]	; (800624c <MX_ADC1_Init+0x9c>)
 80061c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80061c8:	4b1f      	ldr	r3, [pc, #124]	; (8006248 <MX_ADC1_Init+0x98>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80061ce:	4b1e      	ldr	r3, [pc, #120]	; (8006248 <MX_ADC1_Init+0x98>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80061d4:	4b1c      	ldr	r3, [pc, #112]	; (8006248 <MX_ADC1_Init+0x98>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80061da:	4b1b      	ldr	r3, [pc, #108]	; (8006248 <MX_ADC1_Init+0x98>)
 80061dc:	2200      	movs	r2, #0
 80061de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80061e0:	4b19      	ldr	r3, [pc, #100]	; (8006248 <MX_ADC1_Init+0x98>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80061e8:	4b17      	ldr	r3, [pc, #92]	; (8006248 <MX_ADC1_Init+0x98>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80061ee:	4b16      	ldr	r3, [pc, #88]	; (8006248 <MX_ADC1_Init+0x98>)
 80061f0:	4a17      	ldr	r2, [pc, #92]	; (8006250 <MX_ADC1_Init+0xa0>)
 80061f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80061f4:	4b14      	ldr	r3, [pc, #80]	; (8006248 <MX_ADC1_Init+0x98>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80061fa:	4b13      	ldr	r3, [pc, #76]	; (8006248 <MX_ADC1_Init+0x98>)
 80061fc:	2201      	movs	r2, #1
 80061fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006200:	4b11      	ldr	r3, [pc, #68]	; (8006248 <MX_ADC1_Init+0x98>)
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006208:	4b0f      	ldr	r3, [pc, #60]	; (8006248 <MX_ADC1_Init+0x98>)
 800620a:	2201      	movs	r2, #1
 800620c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800620e:	480e      	ldr	r0, [pc, #56]	; (8006248 <MX_ADC1_Init+0x98>)
 8006210:	f000 fce8 	bl	8006be4 <HAL_ADC_Init>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800621a:	f000 f9a1 	bl	8006560 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800621e:	2300      	movs	r3, #0
 8006220:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006222:	2301      	movs	r3, #1
 8006224:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006226:	2300      	movs	r3, #0
 8006228:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800622a:	463b      	mov	r3, r7
 800622c:	4619      	mov	r1, r3
 800622e:	4806      	ldr	r0, [pc, #24]	; (8006248 <MX_ADC1_Init+0x98>)
 8006230:	f000 fe9c 	bl	8006f6c <HAL_ADC_ConfigChannel>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800623a:	f000 f991 	bl	8006560 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800623e:	bf00      	nop
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	2000146c 	.word	0x2000146c
 800624c:	40012000 	.word	0x40012000
 8006250:	0f000001 	.word	0x0f000001

08006254 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006258:	4b12      	ldr	r3, [pc, #72]	; (80062a4 <MX_I2C1_Init+0x50>)
 800625a:	4a13      	ldr	r2, [pc, #76]	; (80062a8 <MX_I2C1_Init+0x54>)
 800625c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800625e:	4b11      	ldr	r3, [pc, #68]	; (80062a4 <MX_I2C1_Init+0x50>)
 8006260:	4a12      	ldr	r2, [pc, #72]	; (80062ac <MX_I2C1_Init+0x58>)
 8006262:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006264:	4b0f      	ldr	r3, [pc, #60]	; (80062a4 <MX_I2C1_Init+0x50>)
 8006266:	2200      	movs	r2, #0
 8006268:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800626a:	4b0e      	ldr	r3, [pc, #56]	; (80062a4 <MX_I2C1_Init+0x50>)
 800626c:	2200      	movs	r2, #0
 800626e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006270:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <MX_I2C1_Init+0x50>)
 8006272:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006276:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006278:	4b0a      	ldr	r3, [pc, #40]	; (80062a4 <MX_I2C1_Init+0x50>)
 800627a:	2200      	movs	r2, #0
 800627c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800627e:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <MX_I2C1_Init+0x50>)
 8006280:	2200      	movs	r2, #0
 8006282:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006284:	4b07      	ldr	r3, [pc, #28]	; (80062a4 <MX_I2C1_Init+0x50>)
 8006286:	2200      	movs	r2, #0
 8006288:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800628a:	4b06      	ldr	r3, [pc, #24]	; (80062a4 <MX_I2C1_Init+0x50>)
 800628c:	2200      	movs	r2, #0
 800628e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006290:	4804      	ldr	r0, [pc, #16]	; (80062a4 <MX_I2C1_Init+0x50>)
 8006292:	f001 fbdb 	bl	8007a4c <HAL_I2C_Init>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800629c:	f000 f960 	bl	8006560 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80062a0:	bf00      	nop
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	200014b4 	.word	0x200014b4
 80062a8:	40005400 	.word	0x40005400
 80062ac:	000186a0 	.word	0x000186a0

080062b0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80062b4:	4b12      	ldr	r3, [pc, #72]	; (8006300 <MX_I2C3_Init+0x50>)
 80062b6:	4a13      	ldr	r2, [pc, #76]	; (8006304 <MX_I2C3_Init+0x54>)
 80062b8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80062ba:	4b11      	ldr	r3, [pc, #68]	; (8006300 <MX_I2C3_Init+0x50>)
 80062bc:	4a12      	ldr	r2, [pc, #72]	; (8006308 <MX_I2C3_Init+0x58>)
 80062be:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80062c0:	4b0f      	ldr	r3, [pc, #60]	; (8006300 <MX_I2C3_Init+0x50>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80062c6:	4b0e      	ldr	r3, [pc, #56]	; (8006300 <MX_I2C3_Init+0x50>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80062cc:	4b0c      	ldr	r3, [pc, #48]	; (8006300 <MX_I2C3_Init+0x50>)
 80062ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80062d2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80062d4:	4b0a      	ldr	r3, [pc, #40]	; (8006300 <MX_I2C3_Init+0x50>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80062da:	4b09      	ldr	r3, [pc, #36]	; (8006300 <MX_I2C3_Init+0x50>)
 80062dc:	2200      	movs	r2, #0
 80062de:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80062e0:	4b07      	ldr	r3, [pc, #28]	; (8006300 <MX_I2C3_Init+0x50>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80062e6:	4b06      	ldr	r3, [pc, #24]	; (8006300 <MX_I2C3_Init+0x50>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80062ec:	4804      	ldr	r0, [pc, #16]	; (8006300 <MX_I2C3_Init+0x50>)
 80062ee:	f001 fbad 	bl	8007a4c <HAL_I2C_Init>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80062f8:	f000 f932 	bl	8006560 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80062fc:	bf00      	nop
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	20001508 	.word	0x20001508
 8006304:	40005c00 	.word	0x40005c00
 8006308:	000186a0 	.word	0x000186a0

0800630c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006312:	f107 0308 	add.w	r3, r7, #8
 8006316:	2200      	movs	r2, #0
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	605a      	str	r2, [r3, #4]
 800631c:	609a      	str	r2, [r3, #8]
 800631e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006320:	463b      	mov	r3, r7
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006328:	4b1e      	ldr	r3, [pc, #120]	; (80063a4 <MX_TIM1_Init+0x98>)
 800632a:	4a1f      	ldr	r2, [pc, #124]	; (80063a8 <MX_TIM1_Init+0x9c>)
 800632c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800632e:	4b1d      	ldr	r3, [pc, #116]	; (80063a4 <MX_TIM1_Init+0x98>)
 8006330:	2247      	movs	r2, #71	; 0x47
 8006332:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006334:	4b1b      	ldr	r3, [pc, #108]	; (80063a4 <MX_TIM1_Init+0x98>)
 8006336:	2200      	movs	r2, #0
 8006338:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800633a:	4b1a      	ldr	r3, [pc, #104]	; (80063a4 <MX_TIM1_Init+0x98>)
 800633c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006340:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006342:	4b18      	ldr	r3, [pc, #96]	; (80063a4 <MX_TIM1_Init+0x98>)
 8006344:	2200      	movs	r2, #0
 8006346:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006348:	4b16      	ldr	r3, [pc, #88]	; (80063a4 <MX_TIM1_Init+0x98>)
 800634a:	2200      	movs	r2, #0
 800634c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800634e:	4b15      	ldr	r3, [pc, #84]	; (80063a4 <MX_TIM1_Init+0x98>)
 8006350:	2200      	movs	r2, #0
 8006352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006354:	4813      	ldr	r0, [pc, #76]	; (80063a4 <MX_TIM1_Init+0x98>)
 8006356:	f002 ff75 	bl	8009244 <HAL_TIM_Base_Init>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8006360:	f000 f8fe 	bl	8006560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006368:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800636a:	f107 0308 	add.w	r3, r7, #8
 800636e:	4619      	mov	r1, r3
 8006370:	480c      	ldr	r0, [pc, #48]	; (80063a4 <MX_TIM1_Init+0x98>)
 8006372:	f003 f811 	bl	8009398 <HAL_TIM_ConfigClockSource>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800637c:	f000 f8f0 	bl	8006560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006380:	2300      	movs	r3, #0
 8006382:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006384:	2300      	movs	r3, #0
 8006386:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006388:	463b      	mov	r3, r7
 800638a:	4619      	mov	r1, r3
 800638c:	4805      	ldr	r0, [pc, #20]	; (80063a4 <MX_TIM1_Init+0x98>)
 800638e:	f003 f9e5 	bl	800975c <HAL_TIMEx_MasterConfigSynchronization>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d001      	beq.n	800639c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8006398:	f000 f8e2 	bl	8006560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800639c:	bf00      	nop
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	2000155c 	.word	0x2000155c
 80063a8:	40010000 	.word	0x40010000

080063ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80063b0:	4b11      	ldr	r3, [pc, #68]	; (80063f8 <MX_USART1_UART_Init+0x4c>)
 80063b2:	4a12      	ldr	r2, [pc, #72]	; (80063fc <MX_USART1_UART_Init+0x50>)
 80063b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80063b6:	4b10      	ldr	r3, [pc, #64]	; (80063f8 <MX_USART1_UART_Init+0x4c>)
 80063b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80063bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80063be:	4b0e      	ldr	r3, [pc, #56]	; (80063f8 <MX_USART1_UART_Init+0x4c>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80063c4:	4b0c      	ldr	r3, [pc, #48]	; (80063f8 <MX_USART1_UART_Init+0x4c>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80063ca:	4b0b      	ldr	r3, [pc, #44]	; (80063f8 <MX_USART1_UART_Init+0x4c>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80063d0:	4b09      	ldr	r3, [pc, #36]	; (80063f8 <MX_USART1_UART_Init+0x4c>)
 80063d2:	220c      	movs	r2, #12
 80063d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80063d6:	4b08      	ldr	r3, [pc, #32]	; (80063f8 <MX_USART1_UART_Init+0x4c>)
 80063d8:	2200      	movs	r2, #0
 80063da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80063dc:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <MX_USART1_UART_Init+0x4c>)
 80063de:	2200      	movs	r2, #0
 80063e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80063e2:	4805      	ldr	r0, [pc, #20]	; (80063f8 <MX_USART1_UART_Init+0x4c>)
 80063e4:	f003 fa28 	bl	8009838 <HAL_UART_Init>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80063ee:	f000 f8b7 	bl	8006560 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80063f2:	bf00      	nop
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	200015a4 	.word	0x200015a4
 80063fc:	40011000 	.word	0x40011000

08006400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08a      	sub	sp, #40	; 0x28
 8006404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006406:	f107 0314 	add.w	r3, r7, #20
 800640a:	2200      	movs	r2, #0
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	605a      	str	r2, [r3, #4]
 8006410:	609a      	str	r2, [r3, #8]
 8006412:	60da      	str	r2, [r3, #12]
 8006414:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006416:	2300      	movs	r3, #0
 8006418:	613b      	str	r3, [r7, #16]
 800641a:	4b4c      	ldr	r3, [pc, #304]	; (800654c <MX_GPIO_Init+0x14c>)
 800641c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641e:	4a4b      	ldr	r2, [pc, #300]	; (800654c <MX_GPIO_Init+0x14c>)
 8006420:	f043 0304 	orr.w	r3, r3, #4
 8006424:	6313      	str	r3, [r2, #48]	; 0x30
 8006426:	4b49      	ldr	r3, [pc, #292]	; (800654c <MX_GPIO_Init+0x14c>)
 8006428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642a:	f003 0304 	and.w	r3, r3, #4
 800642e:	613b      	str	r3, [r7, #16]
 8006430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	4b45      	ldr	r3, [pc, #276]	; (800654c <MX_GPIO_Init+0x14c>)
 8006438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643a:	4a44      	ldr	r2, [pc, #272]	; (800654c <MX_GPIO_Init+0x14c>)
 800643c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006440:	6313      	str	r3, [r2, #48]	; 0x30
 8006442:	4b42      	ldr	r3, [pc, #264]	; (800654c <MX_GPIO_Init+0x14c>)
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800644e:	2300      	movs	r3, #0
 8006450:	60bb      	str	r3, [r7, #8]
 8006452:	4b3e      	ldr	r3, [pc, #248]	; (800654c <MX_GPIO_Init+0x14c>)
 8006454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006456:	4a3d      	ldr	r2, [pc, #244]	; (800654c <MX_GPIO_Init+0x14c>)
 8006458:	f043 0301 	orr.w	r3, r3, #1
 800645c:	6313      	str	r3, [r2, #48]	; 0x30
 800645e:	4b3b      	ldr	r3, [pc, #236]	; (800654c <MX_GPIO_Init+0x14c>)
 8006460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	60bb      	str	r3, [r7, #8]
 8006468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800646a:	2300      	movs	r3, #0
 800646c:	607b      	str	r3, [r7, #4]
 800646e:	4b37      	ldr	r3, [pc, #220]	; (800654c <MX_GPIO_Init+0x14c>)
 8006470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006472:	4a36      	ldr	r2, [pc, #216]	; (800654c <MX_GPIO_Init+0x14c>)
 8006474:	f043 0302 	orr.w	r3, r3, #2
 8006478:	6313      	str	r3, [r2, #48]	; 0x30
 800647a:	4b34      	ldr	r3, [pc, #208]	; (800654c <MX_GPIO_Init+0x14c>)
 800647c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	607b      	str	r3, [r7, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006486:	2300      	movs	r3, #0
 8006488:	603b      	str	r3, [r7, #0]
 800648a:	4b30      	ldr	r3, [pc, #192]	; (800654c <MX_GPIO_Init+0x14c>)
 800648c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648e:	4a2f      	ldr	r2, [pc, #188]	; (800654c <MX_GPIO_Init+0x14c>)
 8006490:	f043 0308 	orr.w	r3, r3, #8
 8006494:	6313      	str	r3, [r2, #48]	; 0x30
 8006496:	4b2d      	ldr	r3, [pc, #180]	; (800654c <MX_GPIO_Init+0x14c>)
 8006498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	603b      	str	r3, [r7, #0]
 80064a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Extra_PC0_Pin|Extra_PC1_Pin|Extra_PC4_Pin|Solar_Panel_Voltage_LED_Pin
 80064a2:	2200      	movs	r2, #0
 80064a4:	f641 5193 	movw	r1, #7571	; 0x1d93
 80064a8:	4829      	ldr	r0, [pc, #164]	; (8006550 <MX_GPIO_Init+0x150>)
 80064aa:	f001 fab5 	bl	8007a18 <HAL_GPIO_WritePin>
                          |Debug_LED_Pin|Step_Rod_Logic_Pin|Direction_Rod_Logic_Pin|Enable_Rod_Logic_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Extra_PA1_Pin|Extra_PA2_Pin|Extra_PA3_Pin|Extra_PA4_Pin, GPIO_PIN_RESET);
 80064ae:	2200      	movs	r2, #0
 80064b0:	211e      	movs	r1, #30
 80064b2:	4828      	ldr	r0, [pc, #160]	; (8006554 <MX_GPIO_Init+0x154>)
 80064b4:	f001 fab0 	bl	8007a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Extra_PB12_Pin|Extra_PB13_Pin|Extra_PB14_Pin|Extra_PB15_Pin
 80064b8:	2200      	movs	r2, #0
 80064ba:	f24f 01f8 	movw	r1, #61688	; 0xf0f8
 80064be:	4826      	ldr	r0, [pc, #152]	; (8006558 <MX_GPIO_Init+0x158>)
 80064c0:	f001 faaa 	bl	8007a18 <HAL_GPIO_WritePin>
                          |Extra_PB3_Pin|Enable_Susan_Logic_Pin|Step_Susan_Logic_Pin|Direction_Susan_Logic_Pin
                          |nSleep_Susan_Logic_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSleep_Rod_Logic_GPIO_Port, nSleep_Rod_Logic_Pin, GPIO_PIN_RESET);
 80064c4:	2200      	movs	r2, #0
 80064c6:	2104      	movs	r1, #4
 80064c8:	4824      	ldr	r0, [pc, #144]	; (800655c <MX_GPIO_Init+0x15c>)
 80064ca:	f001 faa5 	bl	8007a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Extra_PC0_Pin Extra_PC1_Pin Extra_PC4_Pin Solar_Panel_Voltage_LED_Pin
                           Debug_LED_Pin Step_Rod_Logic_Pin Direction_Rod_Logic_Pin Enable_Rod_Logic_Pin */
  GPIO_InitStruct.Pin = Extra_PC0_Pin|Extra_PC1_Pin|Extra_PC4_Pin|Solar_Panel_Voltage_LED_Pin
 80064ce:	f641 5393 	movw	r3, #7571	; 0x1d93
 80064d2:	617b      	str	r3, [r7, #20]
                          |Debug_LED_Pin|Step_Rod_Logic_Pin|Direction_Rod_Logic_Pin|Enable_Rod_Logic_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064d4:	2301      	movs	r3, #1
 80064d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064d8:	2300      	movs	r3, #0
 80064da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064dc:	2300      	movs	r3, #0
 80064de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064e0:	f107 0314 	add.w	r3, r7, #20
 80064e4:	4619      	mov	r1, r3
 80064e6:	481a      	ldr	r0, [pc, #104]	; (8006550 <MX_GPIO_Init+0x150>)
 80064e8:	f001 f912 	bl	8007710 <HAL_GPIO_Init>

  /*Configure GPIO pins : Extra_PA1_Pin Extra_PA2_Pin Extra_PA3_Pin Extra_PA4_Pin */
  GPIO_InitStruct.Pin = Extra_PA1_Pin|Extra_PA2_Pin|Extra_PA3_Pin|Extra_PA4_Pin;
 80064ec:	231e      	movs	r3, #30
 80064ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064f0:	2301      	movs	r3, #1
 80064f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064f4:	2300      	movs	r3, #0
 80064f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064f8:	2300      	movs	r3, #0
 80064fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064fc:	f107 0314 	add.w	r3, r7, #20
 8006500:	4619      	mov	r1, r3
 8006502:	4814      	ldr	r0, [pc, #80]	; (8006554 <MX_GPIO_Init+0x154>)
 8006504:	f001 f904 	bl	8007710 <HAL_GPIO_Init>

  /*Configure GPIO pins : Extra_PB12_Pin Extra_PB13_Pin Extra_PB14_Pin Extra_PB15_Pin
                           Extra_PB3_Pin Enable_Susan_Logic_Pin Step_Susan_Logic_Pin Direction_Susan_Logic_Pin
                           nSleep_Susan_Logic_Pin */
  GPIO_InitStruct.Pin = Extra_PB12_Pin|Extra_PB13_Pin|Extra_PB14_Pin|Extra_PB15_Pin
 8006508:	f24f 03f8 	movw	r3, #61688	; 0xf0f8
 800650c:	617b      	str	r3, [r7, #20]
                          |Extra_PB3_Pin|Enable_Susan_Logic_Pin|Step_Susan_Logic_Pin|Direction_Susan_Logic_Pin
                          |nSleep_Susan_Logic_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800650e:	2301      	movs	r3, #1
 8006510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006512:	2300      	movs	r3, #0
 8006514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006516:	2300      	movs	r3, #0
 8006518:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800651a:	f107 0314 	add.w	r3, r7, #20
 800651e:	4619      	mov	r1, r3
 8006520:	480d      	ldr	r0, [pc, #52]	; (8006558 <MX_GPIO_Init+0x158>)
 8006522:	f001 f8f5 	bl	8007710 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSleep_Rod_Logic_Pin */
  GPIO_InitStruct.Pin = nSleep_Rod_Logic_Pin;
 8006526:	2304      	movs	r3, #4
 8006528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800652a:	2301      	movs	r3, #1
 800652c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800652e:	2300      	movs	r3, #0
 8006530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006532:	2300      	movs	r3, #0
 8006534:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nSleep_Rod_Logic_GPIO_Port, &GPIO_InitStruct);
 8006536:	f107 0314 	add.w	r3, r7, #20
 800653a:	4619      	mov	r1, r3
 800653c:	4807      	ldr	r0, [pc, #28]	; (800655c <MX_GPIO_Init+0x15c>)
 800653e:	f001 f8e7 	bl	8007710 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006542:	bf00      	nop
 8006544:	3728      	adds	r7, #40	; 0x28
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	40023800 	.word	0x40023800
 8006550:	40020800 	.word	0x40020800
 8006554:	40020000 	.word	0x40020000
 8006558:	40020400 	.word	0x40020400
 800655c:	40020c00 	.word	0x40020c00

08006560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006564:	b672      	cpsid	i
}
 8006566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006568:	e7fe      	b.n	8006568 <Error_Handler+0x8>
	...

0800656c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006572:	2300      	movs	r3, #0
 8006574:	607b      	str	r3, [r7, #4]
 8006576:	4b10      	ldr	r3, [pc, #64]	; (80065b8 <HAL_MspInit+0x4c>)
 8006578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657a:	4a0f      	ldr	r2, [pc, #60]	; (80065b8 <HAL_MspInit+0x4c>)
 800657c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006580:	6453      	str	r3, [r2, #68]	; 0x44
 8006582:	4b0d      	ldr	r3, [pc, #52]	; (80065b8 <HAL_MspInit+0x4c>)
 8006584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800658a:	607b      	str	r3, [r7, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800658e:	2300      	movs	r3, #0
 8006590:	603b      	str	r3, [r7, #0]
 8006592:	4b09      	ldr	r3, [pc, #36]	; (80065b8 <HAL_MspInit+0x4c>)
 8006594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006596:	4a08      	ldr	r2, [pc, #32]	; (80065b8 <HAL_MspInit+0x4c>)
 8006598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800659c:	6413      	str	r3, [r2, #64]	; 0x40
 800659e:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <HAL_MspInit+0x4c>)
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065a6:	603b      	str	r3, [r7, #0]
 80065a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80065aa:	bf00      	nop
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	40023800 	.word	0x40023800

080065bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b08a      	sub	sp, #40	; 0x28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065c4:	f107 0314 	add.w	r3, r7, #20
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	605a      	str	r2, [r3, #4]
 80065ce:	609a      	str	r2, [r3, #8]
 80065d0:	60da      	str	r2, [r3, #12]
 80065d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a17      	ldr	r2, [pc, #92]	; (8006638 <HAL_ADC_MspInit+0x7c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d127      	bne.n	800662e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80065de:	2300      	movs	r3, #0
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	4b16      	ldr	r3, [pc, #88]	; (800663c <HAL_ADC_MspInit+0x80>)
 80065e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e6:	4a15      	ldr	r2, [pc, #84]	; (800663c <HAL_ADC_MspInit+0x80>)
 80065e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ec:	6453      	str	r3, [r2, #68]	; 0x44
 80065ee:	4b13      	ldr	r3, [pc, #76]	; (800663c <HAL_ADC_MspInit+0x80>)
 80065f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f6:	613b      	str	r3, [r7, #16]
 80065f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]
 80065fe:	4b0f      	ldr	r3, [pc, #60]	; (800663c <HAL_ADC_MspInit+0x80>)
 8006600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006602:	4a0e      	ldr	r2, [pc, #56]	; (800663c <HAL_ADC_MspInit+0x80>)
 8006604:	f043 0301 	orr.w	r3, r3, #1
 8006608:	6313      	str	r3, [r2, #48]	; 0x30
 800660a:	4b0c      	ldr	r3, [pc, #48]	; (800663c <HAL_ADC_MspInit+0x80>)
 800660c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Voltage_Divider_Pin;
 8006616:	2301      	movs	r3, #1
 8006618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800661a:	2303      	movs	r3, #3
 800661c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800661e:	2300      	movs	r3, #0
 8006620:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Voltage_Divider_GPIO_Port, &GPIO_InitStruct);
 8006622:	f107 0314 	add.w	r3, r7, #20
 8006626:	4619      	mov	r1, r3
 8006628:	4805      	ldr	r0, [pc, #20]	; (8006640 <HAL_ADC_MspInit+0x84>)
 800662a:	f001 f871 	bl	8007710 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800662e:	bf00      	nop
 8006630:	3728      	adds	r7, #40	; 0x28
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	40012000 	.word	0x40012000
 800663c:	40023800 	.word	0x40023800
 8006640:	40020000 	.word	0x40020000

08006644 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08c      	sub	sp, #48	; 0x30
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800664c:	f107 031c 	add.w	r3, r7, #28
 8006650:	2200      	movs	r2, #0
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	605a      	str	r2, [r3, #4]
 8006656:	609a      	str	r2, [r3, #8]
 8006658:	60da      	str	r2, [r3, #12]
 800665a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a42      	ldr	r2, [pc, #264]	; (800676c <HAL_I2C_MspInit+0x128>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d12d      	bne.n	80066c2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006666:	2300      	movs	r3, #0
 8006668:	61bb      	str	r3, [r7, #24]
 800666a:	4b41      	ldr	r3, [pc, #260]	; (8006770 <HAL_I2C_MspInit+0x12c>)
 800666c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666e:	4a40      	ldr	r2, [pc, #256]	; (8006770 <HAL_I2C_MspInit+0x12c>)
 8006670:	f043 0302 	orr.w	r3, r3, #2
 8006674:	6313      	str	r3, [r2, #48]	; 0x30
 8006676:	4b3e      	ldr	r3, [pc, #248]	; (8006770 <HAL_I2C_MspInit+0x12c>)
 8006678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	61bb      	str	r3, [r7, #24]
 8006680:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPS_and_MAG_I2C_SCL_Pin|GPS_and_MAG_I2C_SDA_Pin;
 8006682:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006688:	2312      	movs	r3, #18
 800668a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800668c:	2300      	movs	r3, #0
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006690:	2303      	movs	r3, #3
 8006692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006694:	2304      	movs	r3, #4
 8006696:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006698:	f107 031c 	add.w	r3, r7, #28
 800669c:	4619      	mov	r1, r3
 800669e:	4835      	ldr	r0, [pc, #212]	; (8006774 <HAL_I2C_MspInit+0x130>)
 80066a0:	f001 f836 	bl	8007710 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80066a4:	2300      	movs	r3, #0
 80066a6:	617b      	str	r3, [r7, #20]
 80066a8:	4b31      	ldr	r3, [pc, #196]	; (8006770 <HAL_I2C_MspInit+0x12c>)
 80066aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ac:	4a30      	ldr	r2, [pc, #192]	; (8006770 <HAL_I2C_MspInit+0x12c>)
 80066ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066b2:	6413      	str	r3, [r2, #64]	; 0x40
 80066b4:	4b2e      	ldr	r3, [pc, #184]	; (8006770 <HAL_I2C_MspInit+0x12c>)
 80066b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066bc:	617b      	str	r3, [r7, #20]
 80066be:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80066c0:	e050      	b.n	8006764 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a2c      	ldr	r2, [pc, #176]	; (8006778 <HAL_I2C_MspInit+0x134>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d14b      	bne.n	8006764 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066cc:	2300      	movs	r3, #0
 80066ce:	613b      	str	r3, [r7, #16]
 80066d0:	4b27      	ldr	r3, [pc, #156]	; (8006770 <HAL_I2C_MspInit+0x12c>)
 80066d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d4:	4a26      	ldr	r2, [pc, #152]	; (8006770 <HAL_I2C_MspInit+0x12c>)
 80066d6:	f043 0304 	orr.w	r3, r3, #4
 80066da:	6313      	str	r3, [r2, #48]	; 0x30
 80066dc:	4b24      	ldr	r3, [pc, #144]	; (8006770 <HAL_I2C_MspInit+0x12c>)
 80066de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e0:	f003 0304 	and.w	r3, r3, #4
 80066e4:	613b      	str	r3, [r7, #16]
 80066e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066e8:	2300      	movs	r3, #0
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	4b20      	ldr	r3, [pc, #128]	; (8006770 <HAL_I2C_MspInit+0x12c>)
 80066ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f0:	4a1f      	ldr	r2, [pc, #124]	; (8006770 <HAL_I2C_MspInit+0x12c>)
 80066f2:	f043 0301 	orr.w	r3, r3, #1
 80066f6:	6313      	str	r3, [r2, #48]	; 0x30
 80066f8:	4b1d      	ldr	r3, [pc, #116]	; (8006770 <HAL_I2C_MspInit+0x12c>)
 80066fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	60fb      	str	r3, [r7, #12]
 8006702:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C_Light_SDA_Pin;
 8006704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800670a:	2312      	movs	r3, #18
 800670c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800670e:	2300      	movs	r3, #0
 8006710:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006712:	2303      	movs	r3, #3
 8006714:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006716:	2304      	movs	r3, #4
 8006718:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C_Light_SDA_GPIO_Port, &GPIO_InitStruct);
 800671a:	f107 031c 	add.w	r3, r7, #28
 800671e:	4619      	mov	r1, r3
 8006720:	4816      	ldr	r0, [pc, #88]	; (800677c <HAL_I2C_MspInit+0x138>)
 8006722:	f000 fff5 	bl	8007710 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C_Light_SCL_Pin;
 8006726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800672a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800672c:	2312      	movs	r3, #18
 800672e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006730:	2300      	movs	r3, #0
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006734:	2303      	movs	r3, #3
 8006736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006738:	2304      	movs	r3, #4
 800673a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C_Light_SCL_GPIO_Port, &GPIO_InitStruct);
 800673c:	f107 031c 	add.w	r3, r7, #28
 8006740:	4619      	mov	r1, r3
 8006742:	480f      	ldr	r0, [pc, #60]	; (8006780 <HAL_I2C_MspInit+0x13c>)
 8006744:	f000 ffe4 	bl	8007710 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006748:	2300      	movs	r3, #0
 800674a:	60bb      	str	r3, [r7, #8]
 800674c:	4b08      	ldr	r3, [pc, #32]	; (8006770 <HAL_I2C_MspInit+0x12c>)
 800674e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006750:	4a07      	ldr	r2, [pc, #28]	; (8006770 <HAL_I2C_MspInit+0x12c>)
 8006752:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006756:	6413      	str	r3, [r2, #64]	; 0x40
 8006758:	4b05      	ldr	r3, [pc, #20]	; (8006770 <HAL_I2C_MspInit+0x12c>)
 800675a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006760:	60bb      	str	r3, [r7, #8]
 8006762:	68bb      	ldr	r3, [r7, #8]
}
 8006764:	bf00      	nop
 8006766:	3730      	adds	r7, #48	; 0x30
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	40005400 	.word	0x40005400
 8006770:	40023800 	.word	0x40023800
 8006774:	40020400 	.word	0x40020400
 8006778:	40005c00 	.word	0x40005c00
 800677c:	40020800 	.word	0x40020800
 8006780:	40020000 	.word	0x40020000

08006784 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a15      	ldr	r2, [pc, #84]	; (80067e8 <HAL_TIM_Base_MspInit+0x64>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d10e      	bne.n	80067b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006796:	2300      	movs	r3, #0
 8006798:	60fb      	str	r3, [r7, #12]
 800679a:	4b14      	ldr	r3, [pc, #80]	; (80067ec <HAL_TIM_Base_MspInit+0x68>)
 800679c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679e:	4a13      	ldr	r2, [pc, #76]	; (80067ec <HAL_TIM_Base_MspInit+0x68>)
 80067a0:	f043 0301 	orr.w	r3, r3, #1
 80067a4:	6453      	str	r3, [r2, #68]	; 0x44
 80067a6:	4b11      	ldr	r3, [pc, #68]	; (80067ec <HAL_TIM_Base_MspInit+0x68>)
 80067a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	60fb      	str	r3, [r7, #12]
 80067b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80067b2:	e012      	b.n	80067da <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a0d      	ldr	r2, [pc, #52]	; (80067f0 <HAL_TIM_Base_MspInit+0x6c>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d10d      	bne.n	80067da <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80067be:	2300      	movs	r3, #0
 80067c0:	60bb      	str	r3, [r7, #8]
 80067c2:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <HAL_TIM_Base_MspInit+0x68>)
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	4a09      	ldr	r2, [pc, #36]	; (80067ec <HAL_TIM_Base_MspInit+0x68>)
 80067c8:	f043 0308 	orr.w	r3, r3, #8
 80067cc:	6413      	str	r3, [r2, #64]	; 0x40
 80067ce:	4b07      	ldr	r3, [pc, #28]	; (80067ec <HAL_TIM_Base_MspInit+0x68>)
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	f003 0308 	and.w	r3, r3, #8
 80067d6:	60bb      	str	r3, [r7, #8]
 80067d8:	68bb      	ldr	r3, [r7, #8]
}
 80067da:	bf00      	nop
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40010000 	.word	0x40010000
 80067ec:	40023800 	.word	0x40023800
 80067f0:	40000c00 	.word	0x40000c00

080067f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b08a      	sub	sp, #40	; 0x28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067fc:	f107 0314 	add.w	r3, r7, #20
 8006800:	2200      	movs	r2, #0
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	605a      	str	r2, [r3, #4]
 8006806:	609a      	str	r2, [r3, #8]
 8006808:	60da      	str	r2, [r3, #12]
 800680a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a1d      	ldr	r2, [pc, #116]	; (8006888 <HAL_UART_MspInit+0x94>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d134      	bne.n	8006880 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006816:	2300      	movs	r3, #0
 8006818:	613b      	str	r3, [r7, #16]
 800681a:	4b1c      	ldr	r3, [pc, #112]	; (800688c <HAL_UART_MspInit+0x98>)
 800681c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681e:	4a1b      	ldr	r2, [pc, #108]	; (800688c <HAL_UART_MspInit+0x98>)
 8006820:	f043 0310 	orr.w	r3, r3, #16
 8006824:	6453      	str	r3, [r2, #68]	; 0x44
 8006826:	4b19      	ldr	r3, [pc, #100]	; (800688c <HAL_UART_MspInit+0x98>)
 8006828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682a:	f003 0310 	and.w	r3, r3, #16
 800682e:	613b      	str	r3, [r7, #16]
 8006830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006832:	2300      	movs	r3, #0
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	4b15      	ldr	r3, [pc, #84]	; (800688c <HAL_UART_MspInit+0x98>)
 8006838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683a:	4a14      	ldr	r2, [pc, #80]	; (800688c <HAL_UART_MspInit+0x98>)
 800683c:	f043 0301 	orr.w	r3, r3, #1
 8006840:	6313      	str	r3, [r2, #48]	; 0x30
 8006842:	4b12      	ldr	r3, [pc, #72]	; (800688c <HAL_UART_MspInit+0x98>)
 8006844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_RX_Pin|Bluetooth_TX_Pin;
 800684e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006854:	2302      	movs	r3, #2
 8006856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006858:	2300      	movs	r3, #0
 800685a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800685c:	2303      	movs	r3, #3
 800685e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006860:	2307      	movs	r3, #7
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006864:	f107 0314 	add.w	r3, r7, #20
 8006868:	4619      	mov	r1, r3
 800686a:	4809      	ldr	r0, [pc, #36]	; (8006890 <HAL_UART_MspInit+0x9c>)
 800686c:	f000 ff50 	bl	8007710 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006870:	2200      	movs	r2, #0
 8006872:	2100      	movs	r1, #0
 8006874:	2025      	movs	r0, #37	; 0x25
 8006876:	f000 fe82 	bl	800757e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800687a:	2025      	movs	r0, #37	; 0x25
 800687c:	f000 fe9b 	bl	80075b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006880:	bf00      	nop
 8006882:	3728      	adds	r7, #40	; 0x28
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	40011000 	.word	0x40011000
 800688c:	40023800 	.word	0x40023800
 8006890:	40020000 	.word	0x40020000

08006894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006898:	e7fe      	b.n	8006898 <NMI_Handler+0x4>

0800689a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800689a:	b480      	push	{r7}
 800689c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800689e:	e7fe      	b.n	800689e <HardFault_Handler+0x4>

080068a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80068a4:	e7fe      	b.n	80068a4 <MemManage_Handler+0x4>

080068a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80068a6:	b480      	push	{r7}
 80068a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80068aa:	e7fe      	b.n	80068aa <BusFault_Handler+0x4>

080068ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80068b0:	e7fe      	b.n	80068b0 <UsageFault_Handler+0x4>

080068b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80068b2:	b480      	push	{r7}
 80068b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80068b6:	bf00      	nop
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80068c0:	b480      	push	{r7}
 80068c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80068c4:	bf00      	nop
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80068ce:	b480      	push	{r7}
 80068d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80068d2:	bf00      	nop
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80068e0:	f000 f960 	bl	8006ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80068e4:	bf00      	nop
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80068ec:	4802      	ldr	r0, [pc, #8]	; (80068f8 <USART1_IRQHandler+0x10>)
 80068ee:	f003 f835 	bl	800995c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80068f2:	bf00      	nop
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	200015a4 	.word	0x200015a4

080068fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
  return 1;
 8006900:	2301      	movs	r3, #1
}
 8006902:	4618      	mov	r0, r3
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <_kill>:

int _kill(int pid, int sig)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006916:	f004 fe7d 	bl	800b614 <__errno>
 800691a:	4603      	mov	r3, r0
 800691c:	2216      	movs	r2, #22
 800691e:	601a      	str	r2, [r3, #0]
  return -1;
 8006920:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006924:	4618      	mov	r0, r3
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <_exit>:

void _exit (int status)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006934:	f04f 31ff 	mov.w	r1, #4294967295
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f7ff ffe7 	bl	800690c <_kill>
  while (1) {}    /* Make sure we hang here */
 800693e:	e7fe      	b.n	800693e <_exit+0x12>

08006940 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800694c:	2300      	movs	r3, #0
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	e00a      	b.n	8006968 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006952:	f3af 8000 	nop.w
 8006956:	4601      	mov	r1, r0
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	60ba      	str	r2, [r7, #8]
 800695e:	b2ca      	uxtb	r2, r1
 8006960:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	3301      	adds	r3, #1
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	429a      	cmp	r2, r3
 800696e:	dbf0      	blt.n	8006952 <_read+0x12>
  }

  return len;
 8006970:	687b      	ldr	r3, [r7, #4]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3718      	adds	r7, #24
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b086      	sub	sp, #24
 800697e:	af00      	add	r7, sp, #0
 8006980:	60f8      	str	r0, [r7, #12]
 8006982:	60b9      	str	r1, [r7, #8]
 8006984:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006986:	2300      	movs	r3, #0
 8006988:	617b      	str	r3, [r7, #20]
 800698a:	e009      	b.n	80069a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	60ba      	str	r2, [r7, #8]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	4618      	mov	r0, r3
 8006996:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	3301      	adds	r3, #1
 800699e:	617b      	str	r3, [r7, #20]
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	dbf1      	blt.n	800698c <_write+0x12>
  }
  return len;
 80069a8:	687b      	ldr	r3, [r7, #4]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3718      	adds	r7, #24
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <_close>:

int _close(int file)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80069ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80069be:	4618      	mov	r0, r3
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b083      	sub	sp, #12
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80069da:	605a      	str	r2, [r3, #4]
  return 0;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <_isatty>:

int _isatty(int file)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b083      	sub	sp, #12
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80069f2:	2301      	movs	r3, #1
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
	...

08006a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006a24:	4a14      	ldr	r2, [pc, #80]	; (8006a78 <_sbrk+0x5c>)
 8006a26:	4b15      	ldr	r3, [pc, #84]	; (8006a7c <_sbrk+0x60>)
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006a30:	4b13      	ldr	r3, [pc, #76]	; (8006a80 <_sbrk+0x64>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d102      	bne.n	8006a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006a38:	4b11      	ldr	r3, [pc, #68]	; (8006a80 <_sbrk+0x64>)
 8006a3a:	4a12      	ldr	r2, [pc, #72]	; (8006a84 <_sbrk+0x68>)
 8006a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006a3e:	4b10      	ldr	r3, [pc, #64]	; (8006a80 <_sbrk+0x64>)
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4413      	add	r3, r2
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d207      	bcs.n	8006a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006a4c:	f004 fde2 	bl	800b614 <__errno>
 8006a50:	4603      	mov	r3, r0
 8006a52:	220c      	movs	r2, #12
 8006a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006a56:	f04f 33ff 	mov.w	r3, #4294967295
 8006a5a:	e009      	b.n	8006a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006a5c:	4b08      	ldr	r3, [pc, #32]	; (8006a80 <_sbrk+0x64>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006a62:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <_sbrk+0x64>)
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4413      	add	r3, r2
 8006a6a:	4a05      	ldr	r2, [pc, #20]	; (8006a80 <_sbrk+0x64>)
 8006a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3718      	adds	r7, #24
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	20020000 	.word	0x20020000
 8006a7c:	00000400 	.word	0x00000400
 8006a80:	200015e8 	.word	0x200015e8
 8006a84:	20001740 	.word	0x20001740

08006a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a8c:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <SystemInit+0x20>)
 8006a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a92:	4a05      	ldr	r2, [pc, #20]	; (8006aa8 <SystemInit+0x20>)
 8006a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006a9c:	bf00      	nop
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	e000ed00 	.word	0xe000ed00

08006aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ae4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006ab0:	480d      	ldr	r0, [pc, #52]	; (8006ae8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006ab2:	490e      	ldr	r1, [pc, #56]	; (8006aec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006ab4:	4a0e      	ldr	r2, [pc, #56]	; (8006af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006ab8:	e002      	b.n	8006ac0 <LoopCopyDataInit>

08006aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006abe:	3304      	adds	r3, #4

08006ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ac4:	d3f9      	bcc.n	8006aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006ac6:	4a0b      	ldr	r2, [pc, #44]	; (8006af4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006ac8:	4c0b      	ldr	r4, [pc, #44]	; (8006af8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006acc:	e001      	b.n	8006ad2 <LoopFillZerobss>

08006ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ad0:	3204      	adds	r2, #4

08006ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ad4:	d3fb      	bcc.n	8006ace <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006ad6:	f7ff ffd7 	bl	8006a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006ada:	f004 fda1 	bl	800b620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006ade:	f7fd fd93 	bl	8004608 <main>
  bx  lr    
 8006ae2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006ae4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006aec:	20001450 	.word	0x20001450
  ldr r2, =_sidata
 8006af0:	08011650 	.word	0x08011650
  ldr r2, =_sbss
 8006af4:	20001450 	.word	0x20001450
  ldr r4, =_ebss
 8006af8:	2000173c 	.word	0x2000173c

08006afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006afc:	e7fe      	b.n	8006afc <ADC_IRQHandler>
	...

08006b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006b04:	4b0e      	ldr	r3, [pc, #56]	; (8006b40 <HAL_Init+0x40>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a0d      	ldr	r2, [pc, #52]	; (8006b40 <HAL_Init+0x40>)
 8006b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006b10:	4b0b      	ldr	r3, [pc, #44]	; (8006b40 <HAL_Init+0x40>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a0a      	ldr	r2, [pc, #40]	; (8006b40 <HAL_Init+0x40>)
 8006b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006b1c:	4b08      	ldr	r3, [pc, #32]	; (8006b40 <HAL_Init+0x40>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a07      	ldr	r2, [pc, #28]	; (8006b40 <HAL_Init+0x40>)
 8006b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b28:	2003      	movs	r0, #3
 8006b2a:	f000 fd1d 	bl	8007568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006b2e:	200f      	movs	r0, #15
 8006b30:	f000 f808 	bl	8006b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006b34:	f7ff fd1a 	bl	800656c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	40023c00 	.word	0x40023c00

08006b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006b4c:	4b12      	ldr	r3, [pc, #72]	; (8006b98 <HAL_InitTick+0x54>)
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	4b12      	ldr	r3, [pc, #72]	; (8006b9c <HAL_InitTick+0x58>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	4619      	mov	r1, r3
 8006b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 fd35 	bl	80075d2 <HAL_SYSTICK_Config>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e00e      	b.n	8006b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b0f      	cmp	r3, #15
 8006b76:	d80a      	bhi.n	8006b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b78:	2200      	movs	r2, #0
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b80:	f000 fcfd 	bl	800757e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006b84:	4a06      	ldr	r2, [pc, #24]	; (8006ba0 <HAL_InitTick+0x5c>)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	e000      	b.n	8006b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	20001268 	.word	0x20001268
 8006b9c:	20001270 	.word	0x20001270
 8006ba0:	2000126c 	.word	0x2000126c

08006ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ba8:	4b06      	ldr	r3, [pc, #24]	; (8006bc4 <HAL_IncTick+0x20>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	461a      	mov	r2, r3
 8006bae:	4b06      	ldr	r3, [pc, #24]	; (8006bc8 <HAL_IncTick+0x24>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	4a04      	ldr	r2, [pc, #16]	; (8006bc8 <HAL_IncTick+0x24>)
 8006bb6:	6013      	str	r3, [r2, #0]
}
 8006bb8:	bf00      	nop
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	20001270 	.word	0x20001270
 8006bc8:	200015ec 	.word	0x200015ec

08006bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	af00      	add	r7, sp, #0
  return uwTick;
 8006bd0:	4b03      	ldr	r3, [pc, #12]	; (8006be0 <HAL_GetTick+0x14>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	200015ec 	.word	0x200015ec

08006be4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e033      	b.n	8006c62 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d109      	bne.n	8006c16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff fcda 	bl	80065bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	f003 0310 	and.w	r3, r3, #16
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d118      	bne.n	8006c54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006c2a:	f023 0302 	bic.w	r3, r3, #2
 8006c2e:	f043 0202 	orr.w	r2, r3, #2
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 faca 	bl	80071d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	f023 0303 	bic.w	r3, r3, #3
 8006c4a:	f043 0201 	orr.w	r2, r3, #1
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	641a      	str	r2, [r3, #64]	; 0x40
 8006c52:	e001      	b.n	8006c58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
	...

08006c6c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d101      	bne.n	8006c86 <HAL_ADC_Start+0x1a>
 8006c82:	2302      	movs	r3, #2
 8006c84:	e097      	b.n	8006db6 <HAL_ADC_Start+0x14a>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d018      	beq.n	8006cce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689a      	ldr	r2, [r3, #8]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0201 	orr.w	r2, r2, #1
 8006caa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006cac:	4b45      	ldr	r3, [pc, #276]	; (8006dc4 <HAL_ADC_Start+0x158>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a45      	ldr	r2, [pc, #276]	; (8006dc8 <HAL_ADC_Start+0x15c>)
 8006cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb6:	0c9a      	lsrs	r2, r3, #18
 8006cb8:	4613      	mov	r3, r2
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	4413      	add	r3, r2
 8006cbe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006cc0:	e002      	b.n	8006cc8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1f9      	bne.n	8006cc2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d15f      	bne.n	8006d9c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006ce4:	f023 0301 	bic.w	r3, r3, #1
 8006ce8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d007      	beq.n	8006d0e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006d06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d1a:	d106      	bne.n	8006d2a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d20:	f023 0206 	bic.w	r2, r3, #6
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	645a      	str	r2, [r3, #68]	; 0x44
 8006d28:	e002      	b.n	8006d30 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006d38:	4b24      	ldr	r3, [pc, #144]	; (8006dcc <HAL_ADC_Start+0x160>)
 8006d3a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006d44:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f003 031f 	and.w	r3, r3, #31
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10f      	bne.n	8006d72 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d129      	bne.n	8006db4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689a      	ldr	r2, [r3, #8]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006d6e:	609a      	str	r2, [r3, #8]
 8006d70:	e020      	b.n	8006db4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a16      	ldr	r2, [pc, #88]	; (8006dd0 <HAL_ADC_Start+0x164>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d11b      	bne.n	8006db4 <HAL_ADC_Start+0x148>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d114      	bne.n	8006db4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006d98:	609a      	str	r2, [r3, #8]
 8006d9a:	e00b      	b.n	8006db4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da0:	f043 0210 	orr.w	r2, r3, #16
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dac:	f043 0201 	orr.w	r2, r3, #1
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	20001268 	.word	0x20001268
 8006dc8:	431bde83 	.word	0x431bde83
 8006dcc:	40012300 	.word	0x40012300
 8006dd0:	40012000 	.word	0x40012000

08006dd4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d101      	bne.n	8006dea <HAL_ADC_Stop+0x16>
 8006de6:	2302      	movs	r3, #2
 8006de8:	e021      	b.n	8006e2e <HAL_ADC_Stop+0x5a>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f022 0201 	bic.w	r2, r2, #1
 8006e00:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d109      	bne.n	8006e24 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006e18:	f023 0301 	bic.w	r3, r3, #1
 8006e1c:	f043 0201 	orr.w	r2, r3, #1
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b084      	sub	sp, #16
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006e44:	2300      	movs	r3, #0
 8006e46:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e56:	d113      	bne.n	8006e80 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e66:	d10b      	bne.n	8006e80 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6c:	f043 0220 	orr.w	r2, r3, #32
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e063      	b.n	8006f48 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006e80:	f7ff fea4 	bl	8006bcc <HAL_GetTick>
 8006e84:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006e86:	e021      	b.n	8006ecc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8e:	d01d      	beq.n	8006ecc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d007      	beq.n	8006ea6 <HAL_ADC_PollForConversion+0x6c>
 8006e96:	f7ff fe99 	bl	8006bcc <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d212      	bcs.n	8006ecc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d00b      	beq.n	8006ecc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	f043 0204 	orr.w	r2, r3, #4
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e03d      	b.n	8006f48 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d1d6      	bne.n	8006e88 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f06f 0212 	mvn.w	r2, #18
 8006ee2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d123      	bne.n	8006f46 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d11f      	bne.n	8006f46 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d006      	beq.n	8006f22 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d111      	bne.n	8006f46 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d105      	bne.n	8006f46 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3e:	f043 0201 	orr.w	r2, r3, #1
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
	...

08006f6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006f76:	2300      	movs	r3, #0
 8006f78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <HAL_ADC_ConfigChannel+0x1c>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e113      	b.n	80071b0 <HAL_ADC_ConfigChannel+0x244>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b09      	cmp	r3, #9
 8006f96:	d925      	bls.n	8006fe4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68d9      	ldr	r1, [r3, #12]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	005b      	lsls	r3, r3, #1
 8006faa:	4413      	add	r3, r2
 8006fac:	3b1e      	subs	r3, #30
 8006fae:	2207      	movs	r2, #7
 8006fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb4:	43da      	mvns	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	400a      	ands	r2, r1
 8006fbc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68d9      	ldr	r1, [r3, #12]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	4618      	mov	r0, r3
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	4403      	add	r3, r0
 8006fd6:	3b1e      	subs	r3, #30
 8006fd8:	409a      	lsls	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	60da      	str	r2, [r3, #12]
 8006fe2:	e022      	b.n	800702a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6919      	ldr	r1, [r3, #16]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	005b      	lsls	r3, r3, #1
 8006ff6:	4413      	add	r3, r2
 8006ff8:	2207      	movs	r2, #7
 8006ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffe:	43da      	mvns	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	400a      	ands	r2, r1
 8007006:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6919      	ldr	r1, [r3, #16]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	689a      	ldr	r2, [r3, #8]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	b29b      	uxth	r3, r3
 8007018:	4618      	mov	r0, r3
 800701a:	4603      	mov	r3, r0
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	4403      	add	r3, r0
 8007020:	409a      	lsls	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	2b06      	cmp	r3, #6
 8007030:	d824      	bhi.n	800707c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	4613      	mov	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	3b05      	subs	r3, #5
 8007044:	221f      	movs	r2, #31
 8007046:	fa02 f303 	lsl.w	r3, r2, r3
 800704a:	43da      	mvns	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	400a      	ands	r2, r1
 8007052:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	b29b      	uxth	r3, r3
 8007060:	4618      	mov	r0, r3
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	4613      	mov	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	3b05      	subs	r3, #5
 800706e:	fa00 f203 	lsl.w	r2, r0, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	430a      	orrs	r2, r1
 8007078:	635a      	str	r2, [r3, #52]	; 0x34
 800707a:	e04c      	b.n	8007116 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	2b0c      	cmp	r3, #12
 8007082:	d824      	bhi.n	80070ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	4613      	mov	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	3b23      	subs	r3, #35	; 0x23
 8007096:	221f      	movs	r2, #31
 8007098:	fa02 f303 	lsl.w	r3, r2, r3
 800709c:	43da      	mvns	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	400a      	ands	r2, r1
 80070a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	4618      	mov	r0, r3
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	4613      	mov	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4413      	add	r3, r2
 80070be:	3b23      	subs	r3, #35	; 0x23
 80070c0:	fa00 f203 	lsl.w	r2, r0, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	430a      	orrs	r2, r1
 80070ca:	631a      	str	r2, [r3, #48]	; 0x30
 80070cc:	e023      	b.n	8007116 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	4613      	mov	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	3b41      	subs	r3, #65	; 0x41
 80070e0:	221f      	movs	r2, #31
 80070e2:	fa02 f303 	lsl.w	r3, r2, r3
 80070e6:	43da      	mvns	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	400a      	ands	r2, r1
 80070ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	4618      	mov	r0, r3
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	4613      	mov	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	3b41      	subs	r3, #65	; 0x41
 800710a:	fa00 f203 	lsl.w	r2, r0, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	430a      	orrs	r2, r1
 8007114:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007116:	4b29      	ldr	r3, [pc, #164]	; (80071bc <HAL_ADC_ConfigChannel+0x250>)
 8007118:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a28      	ldr	r2, [pc, #160]	; (80071c0 <HAL_ADC_ConfigChannel+0x254>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d10f      	bne.n	8007144 <HAL_ADC_ConfigChannel+0x1d8>
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b12      	cmp	r3, #18
 800712a:	d10b      	bne.n	8007144 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a1d      	ldr	r2, [pc, #116]	; (80071c0 <HAL_ADC_ConfigChannel+0x254>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d12b      	bne.n	80071a6 <HAL_ADC_ConfigChannel+0x23a>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a1c      	ldr	r2, [pc, #112]	; (80071c4 <HAL_ADC_ConfigChannel+0x258>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d003      	beq.n	8007160 <HAL_ADC_ConfigChannel+0x1f4>
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b11      	cmp	r3, #17
 800715e:	d122      	bne.n	80071a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a11      	ldr	r2, [pc, #68]	; (80071c4 <HAL_ADC_ConfigChannel+0x258>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d111      	bne.n	80071a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007182:	4b11      	ldr	r3, [pc, #68]	; (80071c8 <HAL_ADC_ConfigChannel+0x25c>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a11      	ldr	r2, [pc, #68]	; (80071cc <HAL_ADC_ConfigChannel+0x260>)
 8007188:	fba2 2303 	umull	r2, r3, r2, r3
 800718c:	0c9a      	lsrs	r2, r3, #18
 800718e:	4613      	mov	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	005b      	lsls	r3, r3, #1
 8007196:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007198:	e002      	b.n	80071a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	3b01      	subs	r3, #1
 800719e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1f9      	bne.n	800719a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	40012300 	.word	0x40012300
 80071c0:	40012000 	.word	0x40012000
 80071c4:	10000012 	.word	0x10000012
 80071c8:	20001268 	.word	0x20001268
 80071cc:	431bde83 	.word	0x431bde83

080071d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80071d8:	4b79      	ldr	r3, [pc, #484]	; (80073c0 <ADC_Init+0x1f0>)
 80071da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	431a      	orrs	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007204:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6859      	ldr	r1, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	021a      	lsls	r2, r3, #8
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007228:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6859      	ldr	r1, [r3, #4]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689a      	ldr	r2, [r3, #8]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800724a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6899      	ldr	r1, [r3, #8]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68da      	ldr	r2, [r3, #12]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007262:	4a58      	ldr	r2, [pc, #352]	; (80073c4 <ADC_Init+0x1f4>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d022      	beq.n	80072ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689a      	ldr	r2, [r3, #8]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007276:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6899      	ldr	r1, [r3, #8]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007298:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	6899      	ldr	r1, [r3, #8]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	609a      	str	r2, [r3, #8]
 80072ac:	e00f      	b.n	80072ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689a      	ldr	r2, [r3, #8]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80072bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	689a      	ldr	r2, [r3, #8]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80072cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f022 0202 	bic.w	r2, r2, #2
 80072dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	6899      	ldr	r1, [r3, #8]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	7e1b      	ldrb	r3, [r3, #24]
 80072e8:	005a      	lsls	r2, r3, #1
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d01b      	beq.n	8007334 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800730a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800731a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6859      	ldr	r1, [r3, #4]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007326:	3b01      	subs	r3, #1
 8007328:	035a      	lsls	r2, r3, #13
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	605a      	str	r2, [r3, #4]
 8007332:	e007      	b.n	8007344 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007342:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007352:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	3b01      	subs	r3, #1
 8007360:	051a      	lsls	r2, r3, #20
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	430a      	orrs	r2, r1
 8007368:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689a      	ldr	r2, [r3, #8]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007378:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6899      	ldr	r1, [r3, #8]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007386:	025a      	lsls	r2, r3, #9
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	430a      	orrs	r2, r1
 800738e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689a      	ldr	r2, [r3, #8]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800739e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6899      	ldr	r1, [r3, #8]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	029a      	lsls	r2, r3, #10
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	609a      	str	r2, [r3, #8]
}
 80073b4:	bf00      	nop
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	40012300 	.word	0x40012300
 80073c4:	0f000001 	.word	0x0f000001

080073c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f003 0307 	and.w	r3, r3, #7
 80073d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80073d8:	4b0c      	ldr	r3, [pc, #48]	; (800740c <__NVIC_SetPriorityGrouping+0x44>)
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80073e4:	4013      	ands	r3, r2
 80073e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80073f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80073f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80073fa:	4a04      	ldr	r2, [pc, #16]	; (800740c <__NVIC_SetPriorityGrouping+0x44>)
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	60d3      	str	r3, [r2, #12]
}
 8007400:	bf00      	nop
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	e000ed00 	.word	0xe000ed00

08007410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007410:	b480      	push	{r7}
 8007412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007414:	4b04      	ldr	r3, [pc, #16]	; (8007428 <__NVIC_GetPriorityGrouping+0x18>)
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	0a1b      	lsrs	r3, r3, #8
 800741a:	f003 0307 	and.w	r3, r3, #7
}
 800741e:	4618      	mov	r0, r3
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	e000ed00 	.word	0xe000ed00

0800742c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	4603      	mov	r3, r0
 8007434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800743a:	2b00      	cmp	r3, #0
 800743c:	db0b      	blt.n	8007456 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800743e:	79fb      	ldrb	r3, [r7, #7]
 8007440:	f003 021f 	and.w	r2, r3, #31
 8007444:	4907      	ldr	r1, [pc, #28]	; (8007464 <__NVIC_EnableIRQ+0x38>)
 8007446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800744a:	095b      	lsrs	r3, r3, #5
 800744c:	2001      	movs	r0, #1
 800744e:	fa00 f202 	lsl.w	r2, r0, r2
 8007452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007456:	bf00      	nop
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	e000e100 	.word	0xe000e100

08007468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	4603      	mov	r3, r0
 8007470:	6039      	str	r1, [r7, #0]
 8007472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007478:	2b00      	cmp	r3, #0
 800747a:	db0a      	blt.n	8007492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	b2da      	uxtb	r2, r3
 8007480:	490c      	ldr	r1, [pc, #48]	; (80074b4 <__NVIC_SetPriority+0x4c>)
 8007482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007486:	0112      	lsls	r2, r2, #4
 8007488:	b2d2      	uxtb	r2, r2
 800748a:	440b      	add	r3, r1
 800748c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007490:	e00a      	b.n	80074a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	b2da      	uxtb	r2, r3
 8007496:	4908      	ldr	r1, [pc, #32]	; (80074b8 <__NVIC_SetPriority+0x50>)
 8007498:	79fb      	ldrb	r3, [r7, #7]
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	3b04      	subs	r3, #4
 80074a0:	0112      	lsls	r2, r2, #4
 80074a2:	b2d2      	uxtb	r2, r2
 80074a4:	440b      	add	r3, r1
 80074a6:	761a      	strb	r2, [r3, #24]
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	e000e100 	.word	0xe000e100
 80074b8:	e000ed00 	.word	0xe000ed00

080074bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074bc:	b480      	push	{r7}
 80074be:	b089      	sub	sp, #36	; 0x24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f003 0307 	and.w	r3, r3, #7
 80074ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	f1c3 0307 	rsb	r3, r3, #7
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	bf28      	it	cs
 80074da:	2304      	movcs	r3, #4
 80074dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	3304      	adds	r3, #4
 80074e2:	2b06      	cmp	r3, #6
 80074e4:	d902      	bls.n	80074ec <NVIC_EncodePriority+0x30>
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	3b03      	subs	r3, #3
 80074ea:	e000      	b.n	80074ee <NVIC_EncodePriority+0x32>
 80074ec:	2300      	movs	r3, #0
 80074ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074f0:	f04f 32ff 	mov.w	r2, #4294967295
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	fa02 f303 	lsl.w	r3, r2, r3
 80074fa:	43da      	mvns	r2, r3
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	401a      	ands	r2, r3
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007504:	f04f 31ff 	mov.w	r1, #4294967295
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	fa01 f303 	lsl.w	r3, r1, r3
 800750e:	43d9      	mvns	r1, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007514:	4313      	orrs	r3, r2
         );
}
 8007516:	4618      	mov	r0, r3
 8007518:	3724      	adds	r7, #36	; 0x24
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
	...

08007524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	3b01      	subs	r3, #1
 8007530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007534:	d301      	bcc.n	800753a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007536:	2301      	movs	r3, #1
 8007538:	e00f      	b.n	800755a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800753a:	4a0a      	ldr	r2, [pc, #40]	; (8007564 <SysTick_Config+0x40>)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3b01      	subs	r3, #1
 8007540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007542:	210f      	movs	r1, #15
 8007544:	f04f 30ff 	mov.w	r0, #4294967295
 8007548:	f7ff ff8e 	bl	8007468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800754c:	4b05      	ldr	r3, [pc, #20]	; (8007564 <SysTick_Config+0x40>)
 800754e:	2200      	movs	r2, #0
 8007550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007552:	4b04      	ldr	r3, [pc, #16]	; (8007564 <SysTick_Config+0x40>)
 8007554:	2207      	movs	r2, #7
 8007556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	e000e010 	.word	0xe000e010

08007568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7ff ff29 	bl	80073c8 <__NVIC_SetPriorityGrouping>
}
 8007576:	bf00      	nop
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800757e:	b580      	push	{r7, lr}
 8007580:	b086      	sub	sp, #24
 8007582:	af00      	add	r7, sp, #0
 8007584:	4603      	mov	r3, r0
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	607a      	str	r2, [r7, #4]
 800758a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800758c:	2300      	movs	r3, #0
 800758e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007590:	f7ff ff3e 	bl	8007410 <__NVIC_GetPriorityGrouping>
 8007594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	68b9      	ldr	r1, [r7, #8]
 800759a:	6978      	ldr	r0, [r7, #20]
 800759c:	f7ff ff8e 	bl	80074bc <NVIC_EncodePriority>
 80075a0:	4602      	mov	r2, r0
 80075a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075a6:	4611      	mov	r1, r2
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7ff ff5d 	bl	8007468 <__NVIC_SetPriority>
}
 80075ae:	bf00      	nop
 80075b0:	3718      	adds	r7, #24
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b082      	sub	sp, #8
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	4603      	mov	r3, r0
 80075be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80075c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7ff ff31 	bl	800742c <__NVIC_EnableIRQ>
}
 80075ca:	bf00      	nop
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b082      	sub	sp, #8
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7ff ffa2 	bl	8007524 <SysTick_Config>
 80075e0:	4603      	mov	r3, r0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b084      	sub	sp, #16
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80075f8:	f7ff fae8 	bl	8006bcc <HAL_GetTick>
 80075fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b02      	cmp	r3, #2
 8007608:	d008      	beq.n	800761c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2280      	movs	r2, #128	; 0x80
 800760e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e052      	b.n	80076c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f022 0216 	bic.w	r2, r2, #22
 800762a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	695a      	ldr	r2, [r3, #20]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800763a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007640:	2b00      	cmp	r3, #0
 8007642:	d103      	bne.n	800764c <HAL_DMA_Abort+0x62>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007648:	2b00      	cmp	r3, #0
 800764a:	d007      	beq.n	800765c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 0208 	bic.w	r2, r2, #8
 800765a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 0201 	bic.w	r2, r2, #1
 800766a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800766c:	e013      	b.n	8007696 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800766e:	f7ff faad 	bl	8006bcc <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	2b05      	cmp	r3, #5
 800767a:	d90c      	bls.n	8007696 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2220      	movs	r2, #32
 8007680:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2203      	movs	r2, #3
 8007686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e015      	b.n	80076c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0301 	and.w	r3, r3, #1
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e4      	bne.n	800766e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a8:	223f      	movs	r2, #63	; 0x3f
 80076aa:	409a      	lsls	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d004      	beq.n	80076e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2280      	movs	r2, #128	; 0x80
 80076e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e00c      	b.n	8007702 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2205      	movs	r2, #5
 80076ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f022 0201 	bic.w	r2, r2, #1
 80076fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
	...

08007710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007710:	b480      	push	{r7}
 8007712:	b089      	sub	sp, #36	; 0x24
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800771a:	2300      	movs	r3, #0
 800771c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800771e:	2300      	movs	r3, #0
 8007720:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007722:	2300      	movs	r3, #0
 8007724:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007726:	2300      	movs	r3, #0
 8007728:	61fb      	str	r3, [r7, #28]
 800772a:	e159      	b.n	80079e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800772c:	2201      	movs	r2, #1
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	fa02 f303 	lsl.w	r3, r2, r3
 8007734:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	4013      	ands	r3, r2
 800773e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	429a      	cmp	r2, r3
 8007746:	f040 8148 	bne.w	80079da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	f003 0303 	and.w	r3, r3, #3
 8007752:	2b01      	cmp	r3, #1
 8007754:	d005      	beq.n	8007762 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800775e:	2b02      	cmp	r3, #2
 8007760:	d130      	bne.n	80077c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	005b      	lsls	r3, r3, #1
 800776c:	2203      	movs	r2, #3
 800776e:	fa02 f303 	lsl.w	r3, r2, r3
 8007772:	43db      	mvns	r3, r3
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	4013      	ands	r3, r2
 8007778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	fa02 f303 	lsl.w	r3, r2, r3
 8007786:	69ba      	ldr	r2, [r7, #24]
 8007788:	4313      	orrs	r3, r2
 800778a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	69ba      	ldr	r2, [r7, #24]
 8007790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007798:	2201      	movs	r2, #1
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	fa02 f303 	lsl.w	r3, r2, r3
 80077a0:	43db      	mvns	r3, r3
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	4013      	ands	r3, r2
 80077a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	091b      	lsrs	r3, r3, #4
 80077ae:	f003 0201 	and.w	r2, r3, #1
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	fa02 f303 	lsl.w	r3, r2, r3
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f003 0303 	and.w	r3, r3, #3
 80077cc:	2b03      	cmp	r3, #3
 80077ce:	d017      	beq.n	8007800 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	005b      	lsls	r3, r3, #1
 80077da:	2203      	movs	r2, #3
 80077dc:	fa02 f303 	lsl.w	r3, r2, r3
 80077e0:	43db      	mvns	r3, r3
 80077e2:	69ba      	ldr	r2, [r7, #24]
 80077e4:	4013      	ands	r3, r2
 80077e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	689a      	ldr	r2, [r3, #8]
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	fa02 f303 	lsl.w	r3, r2, r3
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f003 0303 	and.w	r3, r3, #3
 8007808:	2b02      	cmp	r3, #2
 800780a:	d123      	bne.n	8007854 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	08da      	lsrs	r2, r3, #3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	3208      	adds	r2, #8
 8007814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007818:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	f003 0307 	and.w	r3, r3, #7
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	220f      	movs	r2, #15
 8007824:	fa02 f303 	lsl.w	r3, r2, r3
 8007828:	43db      	mvns	r3, r3
 800782a:	69ba      	ldr	r2, [r7, #24]
 800782c:	4013      	ands	r3, r2
 800782e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	691a      	ldr	r2, [r3, #16]
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	fa02 f303 	lsl.w	r3, r2, r3
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	4313      	orrs	r3, r2
 8007844:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	08da      	lsrs	r2, r3, #3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	3208      	adds	r2, #8
 800784e:	69b9      	ldr	r1, [r7, #24]
 8007850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	005b      	lsls	r3, r3, #1
 800785e:	2203      	movs	r2, #3
 8007860:	fa02 f303 	lsl.w	r3, r2, r3
 8007864:	43db      	mvns	r3, r3
 8007866:	69ba      	ldr	r2, [r7, #24]
 8007868:	4013      	ands	r3, r2
 800786a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f003 0203 	and.w	r2, r3, #3
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	005b      	lsls	r3, r3, #1
 8007878:	fa02 f303 	lsl.w	r3, r2, r3
 800787c:	69ba      	ldr	r2, [r7, #24]
 800787e:	4313      	orrs	r3, r2
 8007880:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 80a2 	beq.w	80079da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007896:	2300      	movs	r3, #0
 8007898:	60fb      	str	r3, [r7, #12]
 800789a:	4b57      	ldr	r3, [pc, #348]	; (80079f8 <HAL_GPIO_Init+0x2e8>)
 800789c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800789e:	4a56      	ldr	r2, [pc, #344]	; (80079f8 <HAL_GPIO_Init+0x2e8>)
 80078a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078a4:	6453      	str	r3, [r2, #68]	; 0x44
 80078a6:	4b54      	ldr	r3, [pc, #336]	; (80079f8 <HAL_GPIO_Init+0x2e8>)
 80078a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078ae:	60fb      	str	r3, [r7, #12]
 80078b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80078b2:	4a52      	ldr	r2, [pc, #328]	; (80079fc <HAL_GPIO_Init+0x2ec>)
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	089b      	lsrs	r3, r3, #2
 80078b8:	3302      	adds	r3, #2
 80078ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	f003 0303 	and.w	r3, r3, #3
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	220f      	movs	r2, #15
 80078ca:	fa02 f303 	lsl.w	r3, r2, r3
 80078ce:	43db      	mvns	r3, r3
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	4013      	ands	r3, r2
 80078d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a49      	ldr	r2, [pc, #292]	; (8007a00 <HAL_GPIO_Init+0x2f0>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d019      	beq.n	8007912 <HAL_GPIO_Init+0x202>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a48      	ldr	r2, [pc, #288]	; (8007a04 <HAL_GPIO_Init+0x2f4>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d013      	beq.n	800790e <HAL_GPIO_Init+0x1fe>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a47      	ldr	r2, [pc, #284]	; (8007a08 <HAL_GPIO_Init+0x2f8>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d00d      	beq.n	800790a <HAL_GPIO_Init+0x1fa>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a46      	ldr	r2, [pc, #280]	; (8007a0c <HAL_GPIO_Init+0x2fc>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d007      	beq.n	8007906 <HAL_GPIO_Init+0x1f6>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a45      	ldr	r2, [pc, #276]	; (8007a10 <HAL_GPIO_Init+0x300>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d101      	bne.n	8007902 <HAL_GPIO_Init+0x1f2>
 80078fe:	2304      	movs	r3, #4
 8007900:	e008      	b.n	8007914 <HAL_GPIO_Init+0x204>
 8007902:	2307      	movs	r3, #7
 8007904:	e006      	b.n	8007914 <HAL_GPIO_Init+0x204>
 8007906:	2303      	movs	r3, #3
 8007908:	e004      	b.n	8007914 <HAL_GPIO_Init+0x204>
 800790a:	2302      	movs	r3, #2
 800790c:	e002      	b.n	8007914 <HAL_GPIO_Init+0x204>
 800790e:	2301      	movs	r3, #1
 8007910:	e000      	b.n	8007914 <HAL_GPIO_Init+0x204>
 8007912:	2300      	movs	r3, #0
 8007914:	69fa      	ldr	r2, [r7, #28]
 8007916:	f002 0203 	and.w	r2, r2, #3
 800791a:	0092      	lsls	r2, r2, #2
 800791c:	4093      	lsls	r3, r2
 800791e:	69ba      	ldr	r2, [r7, #24]
 8007920:	4313      	orrs	r3, r2
 8007922:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007924:	4935      	ldr	r1, [pc, #212]	; (80079fc <HAL_GPIO_Init+0x2ec>)
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	089b      	lsrs	r3, r3, #2
 800792a:	3302      	adds	r3, #2
 800792c:	69ba      	ldr	r2, [r7, #24]
 800792e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007932:	4b38      	ldr	r3, [pc, #224]	; (8007a14 <HAL_GPIO_Init+0x304>)
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	43db      	mvns	r3, r3
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	4013      	ands	r3, r2
 8007940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	4313      	orrs	r3, r2
 8007954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007956:	4a2f      	ldr	r2, [pc, #188]	; (8007a14 <HAL_GPIO_Init+0x304>)
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800795c:	4b2d      	ldr	r3, [pc, #180]	; (8007a14 <HAL_GPIO_Init+0x304>)
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	43db      	mvns	r3, r3
 8007966:	69ba      	ldr	r2, [r7, #24]
 8007968:	4013      	ands	r3, r2
 800796a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007978:	69ba      	ldr	r2, [r7, #24]
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	4313      	orrs	r3, r2
 800797e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007980:	4a24      	ldr	r2, [pc, #144]	; (8007a14 <HAL_GPIO_Init+0x304>)
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007986:	4b23      	ldr	r3, [pc, #140]	; (8007a14 <HAL_GPIO_Init+0x304>)
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	43db      	mvns	r3, r3
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	4013      	ands	r3, r2
 8007994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80079aa:	4a1a      	ldr	r2, [pc, #104]	; (8007a14 <HAL_GPIO_Init+0x304>)
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80079b0:	4b18      	ldr	r3, [pc, #96]	; (8007a14 <HAL_GPIO_Init+0x304>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	43db      	mvns	r3, r3
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	4013      	ands	r3, r2
 80079be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d003      	beq.n	80079d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80079d4:	4a0f      	ldr	r2, [pc, #60]	; (8007a14 <HAL_GPIO_Init+0x304>)
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	3301      	adds	r3, #1
 80079de:	61fb      	str	r3, [r7, #28]
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	2b0f      	cmp	r3, #15
 80079e4:	f67f aea2 	bls.w	800772c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80079e8:	bf00      	nop
 80079ea:	bf00      	nop
 80079ec:	3724      	adds	r7, #36	; 0x24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	40023800 	.word	0x40023800
 80079fc:	40013800 	.word	0x40013800
 8007a00:	40020000 	.word	0x40020000
 8007a04:	40020400 	.word	0x40020400
 8007a08:	40020800 	.word	0x40020800
 8007a0c:	40020c00 	.word	0x40020c00
 8007a10:	40021000 	.word	0x40021000
 8007a14:	40013c00 	.word	0x40013c00

08007a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	460b      	mov	r3, r1
 8007a22:	807b      	strh	r3, [r7, #2]
 8007a24:	4613      	mov	r3, r2
 8007a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007a28:	787b      	ldrb	r3, [r7, #1]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d003      	beq.n	8007a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a2e:	887a      	ldrh	r2, [r7, #2]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007a34:	e003      	b.n	8007a3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007a36:	887b      	ldrh	r3, [r7, #2]
 8007a38:	041a      	lsls	r2, r3, #16
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	619a      	str	r2, [r3, #24]
}
 8007a3e:	bf00      	nop
 8007a40:	370c      	adds	r7, #12
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
	...

08007a4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e12b      	b.n	8007cb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d106      	bne.n	8007a78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7fe fde6 	bl	8006644 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2224      	movs	r2, #36	; 0x24
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0201 	bic.w	r2, r2, #1
 8007a8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007aae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007ab0:	f001 fba0 	bl	80091f4 <HAL_RCC_GetPCLK1Freq>
 8007ab4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	4a81      	ldr	r2, [pc, #516]	; (8007cc0 <HAL_I2C_Init+0x274>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d807      	bhi.n	8007ad0 <HAL_I2C_Init+0x84>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4a80      	ldr	r2, [pc, #512]	; (8007cc4 <HAL_I2C_Init+0x278>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	bf94      	ite	ls
 8007ac8:	2301      	movls	r3, #1
 8007aca:	2300      	movhi	r3, #0
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	e006      	b.n	8007ade <HAL_I2C_Init+0x92>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	4a7d      	ldr	r2, [pc, #500]	; (8007cc8 <HAL_I2C_Init+0x27c>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	bf94      	ite	ls
 8007ad8:	2301      	movls	r3, #1
 8007ada:	2300      	movhi	r3, #0
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e0e7      	b.n	8007cb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4a78      	ldr	r2, [pc, #480]	; (8007ccc <HAL_I2C_Init+0x280>)
 8007aea:	fba2 2303 	umull	r2, r3, r2, r3
 8007aee:	0c9b      	lsrs	r3, r3, #18
 8007af0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6a1b      	ldr	r3, [r3, #32]
 8007b0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	4a6a      	ldr	r2, [pc, #424]	; (8007cc0 <HAL_I2C_Init+0x274>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d802      	bhi.n	8007b20 <HAL_I2C_Init+0xd4>
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	e009      	b.n	8007b34 <HAL_I2C_Init+0xe8>
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007b26:	fb02 f303 	mul.w	r3, r2, r3
 8007b2a:	4a69      	ldr	r2, [pc, #420]	; (8007cd0 <HAL_I2C_Init+0x284>)
 8007b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b30:	099b      	lsrs	r3, r3, #6
 8007b32:	3301      	adds	r3, #1
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	6812      	ldr	r2, [r2, #0]
 8007b38:	430b      	orrs	r3, r1
 8007b3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	69db      	ldr	r3, [r3, #28]
 8007b42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007b46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	495c      	ldr	r1, [pc, #368]	; (8007cc0 <HAL_I2C_Init+0x274>)
 8007b50:	428b      	cmp	r3, r1
 8007b52:	d819      	bhi.n	8007b88 <HAL_I2C_Init+0x13c>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	1e59      	subs	r1, r3, #1
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	005b      	lsls	r3, r3, #1
 8007b5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b62:	1c59      	adds	r1, r3, #1
 8007b64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007b68:	400b      	ands	r3, r1
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00a      	beq.n	8007b84 <HAL_I2C_Init+0x138>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	1e59      	subs	r1, r3, #1
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	005b      	lsls	r3, r3, #1
 8007b78:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b82:	e051      	b.n	8007c28 <HAL_I2C_Init+0x1dc>
 8007b84:	2304      	movs	r3, #4
 8007b86:	e04f      	b.n	8007c28 <HAL_I2C_Init+0x1dc>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d111      	bne.n	8007bb4 <HAL_I2C_Init+0x168>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	1e58      	subs	r0, r3, #1
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6859      	ldr	r1, [r3, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	005b      	lsls	r3, r3, #1
 8007b9c:	440b      	add	r3, r1
 8007b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	bf0c      	ite	eq
 8007bac:	2301      	moveq	r3, #1
 8007bae:	2300      	movne	r3, #0
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	e012      	b.n	8007bda <HAL_I2C_Init+0x18e>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	1e58      	subs	r0, r3, #1
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6859      	ldr	r1, [r3, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	440b      	add	r3, r1
 8007bc2:	0099      	lsls	r1, r3, #2
 8007bc4:	440b      	add	r3, r1
 8007bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007bca:	3301      	adds	r3, #1
 8007bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	bf0c      	ite	eq
 8007bd4:	2301      	moveq	r3, #1
 8007bd6:	2300      	movne	r3, #0
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d001      	beq.n	8007be2 <HAL_I2C_Init+0x196>
 8007bde:	2301      	movs	r3, #1
 8007be0:	e022      	b.n	8007c28 <HAL_I2C_Init+0x1dc>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10e      	bne.n	8007c08 <HAL_I2C_Init+0x1bc>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	1e58      	subs	r0, r3, #1
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6859      	ldr	r1, [r3, #4]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	440b      	add	r3, r1
 8007bf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c06:	e00f      	b.n	8007c28 <HAL_I2C_Init+0x1dc>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	1e58      	subs	r0, r3, #1
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6859      	ldr	r1, [r3, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	440b      	add	r3, r1
 8007c16:	0099      	lsls	r1, r3, #2
 8007c18:	440b      	add	r3, r1
 8007c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c1e:	3301      	adds	r3, #1
 8007c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c28:	6879      	ldr	r1, [r7, #4]
 8007c2a:	6809      	ldr	r1, [r1, #0]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	69da      	ldr	r2, [r3, #28]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	431a      	orrs	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	430a      	orrs	r2, r1
 8007c4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007c56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	6911      	ldr	r1, [r2, #16]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	68d2      	ldr	r2, [r2, #12]
 8007c62:	4311      	orrs	r1, r2
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	6812      	ldr	r2, [r2, #0]
 8007c68:	430b      	orrs	r3, r1
 8007c6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	695a      	ldr	r2, [r3, #20]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	430a      	orrs	r2, r1
 8007c86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f042 0201 	orr.w	r2, r2, #1
 8007c96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2220      	movs	r2, #32
 8007ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	000186a0 	.word	0x000186a0
 8007cc4:	001e847f 	.word	0x001e847f
 8007cc8:	003d08ff 	.word	0x003d08ff
 8007ccc:	431bde83 	.word	0x431bde83
 8007cd0:	10624dd3 	.word	0x10624dd3

08007cd4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b088      	sub	sp, #32
 8007cd8:	af02      	add	r7, sp, #8
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	607a      	str	r2, [r7, #4]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	817b      	strh	r3, [r7, #10]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ce8:	f7fe ff70 	bl	8006bcc <HAL_GetTick>
 8007cec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b20      	cmp	r3, #32
 8007cf8:	f040 80e0 	bne.w	8007ebc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	2319      	movs	r3, #25
 8007d02:	2201      	movs	r2, #1
 8007d04:	4970      	ldr	r1, [pc, #448]	; (8007ec8 <HAL_I2C_Master_Transmit+0x1f4>)
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f000 fc66 	bl	80085d8 <I2C_WaitOnFlagUntilTimeout>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d001      	beq.n	8007d16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007d12:	2302      	movs	r3, #2
 8007d14:	e0d3      	b.n	8007ebe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d101      	bne.n	8007d24 <HAL_I2C_Master_Transmit+0x50>
 8007d20:	2302      	movs	r3, #2
 8007d22:	e0cc      	b.n	8007ebe <HAL_I2C_Master_Transmit+0x1ea>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d007      	beq.n	8007d4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f042 0201 	orr.w	r2, r2, #1
 8007d48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2221      	movs	r2, #33	; 0x21
 8007d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2210      	movs	r2, #16
 8007d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	893a      	ldrh	r2, [r7, #8]
 8007d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	4a50      	ldr	r2, [pc, #320]	; (8007ecc <HAL_I2C_Master_Transmit+0x1f8>)
 8007d8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007d8c:	8979      	ldrh	r1, [r7, #10]
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	6a3a      	ldr	r2, [r7, #32]
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f000 fad0 	bl	8008338 <I2C_MasterRequestWrite>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e08d      	b.n	8007ebe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007da2:	2300      	movs	r3, #0
 8007da4:	613b      	str	r3, [r7, #16]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	695b      	ldr	r3, [r3, #20]
 8007dac:	613b      	str	r3, [r7, #16]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	613b      	str	r3, [r7, #16]
 8007db6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007db8:	e066      	b.n	8007e88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	6a39      	ldr	r1, [r7, #32]
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f000 fce0 	bl	8008784 <I2C_WaitOnTXEFlagUntilTimeout>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00d      	beq.n	8007de6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	d107      	bne.n	8007de2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007de0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e06b      	b.n	8007ebe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dea:	781a      	ldrb	r2, [r3, #0]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	3b01      	subs	r3, #1
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	f003 0304 	and.w	r3, r3, #4
 8007e20:	2b04      	cmp	r3, #4
 8007e22:	d11b      	bne.n	8007e5c <HAL_I2C_Master_Transmit+0x188>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d017      	beq.n	8007e5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e30:	781a      	ldrb	r2, [r3, #0]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3c:	1c5a      	adds	r2, r3, #1
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e54:	3b01      	subs	r3, #1
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	6a39      	ldr	r1, [r7, #32]
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f000 fcd0 	bl	8008806 <I2C_WaitOnBTFFlagUntilTimeout>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00d      	beq.n	8007e88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	d107      	bne.n	8007e84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e01a      	b.n	8007ebe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d194      	bne.n	8007dba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2220      	movs	r2, #32
 8007ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	e000      	b.n	8007ebe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007ebc:	2302      	movs	r3, #2
  }
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3718      	adds	r7, #24
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	00100002 	.word	0x00100002
 8007ecc:	ffff0000 	.word	0xffff0000

08007ed0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b08c      	sub	sp, #48	; 0x30
 8007ed4:	af02      	add	r7, sp, #8
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	607a      	str	r2, [r7, #4]
 8007eda:	461a      	mov	r2, r3
 8007edc:	460b      	mov	r3, r1
 8007ede:	817b      	strh	r3, [r7, #10]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ee4:	f7fe fe72 	bl	8006bcc <HAL_GetTick>
 8007ee8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b20      	cmp	r3, #32
 8007ef4:	f040 820b 	bne.w	800830e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	9300      	str	r3, [sp, #0]
 8007efc:	2319      	movs	r3, #25
 8007efe:	2201      	movs	r2, #1
 8007f00:	497c      	ldr	r1, [pc, #496]	; (80080f4 <HAL_I2C_Master_Receive+0x224>)
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f000 fb68 	bl	80085d8 <I2C_WaitOnFlagUntilTimeout>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007f0e:	2302      	movs	r3, #2
 8007f10:	e1fe      	b.n	8008310 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d101      	bne.n	8007f20 <HAL_I2C_Master_Receive+0x50>
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	e1f7      	b.n	8008310 <HAL_I2C_Master_Receive+0x440>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d007      	beq.n	8007f46 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f042 0201 	orr.w	r2, r2, #1
 8007f44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2222      	movs	r2, #34	; 0x22
 8007f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2210      	movs	r2, #16
 8007f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	893a      	ldrh	r2, [r7, #8]
 8007f76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	4a5c      	ldr	r2, [pc, #368]	; (80080f8 <HAL_I2C_Master_Receive+0x228>)
 8007f86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007f88:	8979      	ldrh	r1, [r7, #10]
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f000 fa54 	bl	800843c <I2C_MasterRequestRead>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e1b8      	b.n	8008310 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d113      	bne.n	8007fce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	623b      	str	r3, [r7, #32]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	695b      	ldr	r3, [r3, #20]
 8007fb0:	623b      	str	r3, [r7, #32]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	623b      	str	r3, [r7, #32]
 8007fba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fca:	601a      	str	r2, [r3, #0]
 8007fcc:	e18c      	b.n	80082e8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d11b      	bne.n	800800e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fe4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	61fb      	str	r3, [r7, #28]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	695b      	ldr	r3, [r3, #20]
 8007ff0:	61fb      	str	r3, [r7, #28]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	699b      	ldr	r3, [r3, #24]
 8007ff8:	61fb      	str	r3, [r7, #28]
 8007ffa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	e16c      	b.n	80082e8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008012:	2b02      	cmp	r3, #2
 8008014:	d11b      	bne.n	800804e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008024:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008034:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008036:	2300      	movs	r3, #0
 8008038:	61bb      	str	r3, [r7, #24]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	695b      	ldr	r3, [r3, #20]
 8008040:	61bb      	str	r3, [r7, #24]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	61bb      	str	r3, [r7, #24]
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	e14c      	b.n	80082e8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800805c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800805e:	2300      	movs	r3, #0
 8008060:	617b      	str	r3, [r7, #20]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	617b      	str	r3, [r7, #20]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	617b      	str	r3, [r7, #20]
 8008072:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008074:	e138      	b.n	80082e8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800807a:	2b03      	cmp	r3, #3
 800807c:	f200 80f1 	bhi.w	8008262 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008084:	2b01      	cmp	r3, #1
 8008086:	d123      	bne.n	80080d0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800808a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f000 fbfb 	bl	8008888 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e139      	b.n	8008310 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	691a      	ldr	r2, [r3, #16]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	b2d2      	uxtb	r2, r2
 80080a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080b8:	3b01      	subs	r3, #1
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	3b01      	subs	r3, #1
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80080ce:	e10b      	b.n	80082e8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d14e      	bne.n	8008176 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80080d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080de:	2200      	movs	r2, #0
 80080e0:	4906      	ldr	r1, [pc, #24]	; (80080fc <HAL_I2C_Master_Receive+0x22c>)
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 fa78 	bl	80085d8 <I2C_WaitOnFlagUntilTimeout>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d008      	beq.n	8008100 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e10e      	b.n	8008310 <HAL_I2C_Master_Receive+0x440>
 80080f2:	bf00      	nop
 80080f4:	00100002 	.word	0x00100002
 80080f8:	ffff0000 	.word	0xffff0000
 80080fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800810e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	691a      	ldr	r2, [r3, #16]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811a:	b2d2      	uxtb	r2, r2
 800811c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	1c5a      	adds	r2, r3, #1
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800812c:	3b01      	subs	r3, #1
 800812e:	b29a      	uxth	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008138:	b29b      	uxth	r3, r3
 800813a:	3b01      	subs	r3, #1
 800813c:	b29a      	uxth	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	691a      	ldr	r2, [r3, #16]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814c:	b2d2      	uxtb	r2, r2
 800814e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008154:	1c5a      	adds	r2, r3, #1
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800815e:	3b01      	subs	r3, #1
 8008160:	b29a      	uxth	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800816a:	b29b      	uxth	r3, r3
 800816c:	3b01      	subs	r3, #1
 800816e:	b29a      	uxth	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008174:	e0b8      	b.n	80082e8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	2200      	movs	r2, #0
 800817e:	4966      	ldr	r1, [pc, #408]	; (8008318 <HAL_I2C_Master_Receive+0x448>)
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f000 fa29 	bl	80085d8 <I2C_WaitOnFlagUntilTimeout>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e0bf      	b.n	8008310 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800819e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	691a      	ldr	r2, [r3, #16]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	b2d2      	uxtb	r2, r2
 80081ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081bc:	3b01      	subs	r3, #1
 80081be:	b29a      	uxth	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	3b01      	subs	r3, #1
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d8:	2200      	movs	r2, #0
 80081da:	494f      	ldr	r1, [pc, #316]	; (8008318 <HAL_I2C_Master_Receive+0x448>)
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f000 f9fb 	bl	80085d8 <I2C_WaitOnFlagUntilTimeout>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d001      	beq.n	80081ec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e091      	b.n	8008310 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	691a      	ldr	r2, [r3, #16]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	b2d2      	uxtb	r2, r2
 8008208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820e:	1c5a      	adds	r2, r3, #1
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008218:	3b01      	subs	r3, #1
 800821a:	b29a      	uxth	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008224:	b29b      	uxth	r3, r3
 8008226:	3b01      	subs	r3, #1
 8008228:	b29a      	uxth	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	691a      	ldr	r2, [r3, #16]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008238:	b2d2      	uxtb	r2, r2
 800823a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	1c5a      	adds	r2, r3, #1
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800824a:	3b01      	subs	r3, #1
 800824c:	b29a      	uxth	r2, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008256:	b29b      	uxth	r3, r3
 8008258:	3b01      	subs	r3, #1
 800825a:	b29a      	uxth	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008260:	e042      	b.n	80082e8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008264:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 fb0e 	bl	8008888 <I2C_WaitOnRXNEFlagUntilTimeout>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e04c      	b.n	8008310 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	691a      	ldr	r2, [r3, #16]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008280:	b2d2      	uxtb	r2, r2
 8008282:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	1c5a      	adds	r2, r3, #1
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008292:	3b01      	subs	r3, #1
 8008294:	b29a      	uxth	r2, r3
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800829e:	b29b      	uxth	r3, r3
 80082a0:	3b01      	subs	r3, #1
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	f003 0304 	and.w	r3, r3, #4
 80082b2:	2b04      	cmp	r3, #4
 80082b4:	d118      	bne.n	80082e8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	691a      	ldr	r2, [r3, #16]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	b2d2      	uxtb	r2, r2
 80082c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	1c5a      	adds	r2, r3, #1
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082d2:	3b01      	subs	r3, #1
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082de:	b29b      	uxth	r3, r3
 80082e0:	3b01      	subs	r3, #1
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f47f aec2 	bne.w	8008076 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2220      	movs	r2, #32
 80082f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	e000      	b.n	8008310 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800830e:	2302      	movs	r3, #2
  }
}
 8008310:	4618      	mov	r0, r3
 8008312:	3728      	adds	r7, #40	; 0x28
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	00010004 	.word	0x00010004

0800831c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800832a:	b2db      	uxtb	r3, r3
}
 800832c:	4618      	mov	r0, r3
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b088      	sub	sp, #32
 800833c:	af02      	add	r7, sp, #8
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	607a      	str	r2, [r7, #4]
 8008342:	603b      	str	r3, [r7, #0]
 8008344:	460b      	mov	r3, r1
 8008346:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	2b08      	cmp	r3, #8
 8008352:	d006      	beq.n	8008362 <I2C_MasterRequestWrite+0x2a>
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d003      	beq.n	8008362 <I2C_MasterRequestWrite+0x2a>
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008360:	d108      	bne.n	8008374 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008370:	601a      	str	r2, [r3, #0]
 8008372:	e00b      	b.n	800838c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008378:	2b12      	cmp	r3, #18
 800837a:	d107      	bne.n	800838c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800838a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f000 f91d 	bl	80085d8 <I2C_WaitOnFlagUntilTimeout>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00d      	beq.n	80083c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083b2:	d103      	bne.n	80083bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e035      	b.n	800842c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083c8:	d108      	bne.n	80083dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80083ca:	897b      	ldrh	r3, [r7, #10]
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	461a      	mov	r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80083d8:	611a      	str	r2, [r3, #16]
 80083da:	e01b      	b.n	8008414 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80083dc:	897b      	ldrh	r3, [r7, #10]
 80083de:	11db      	asrs	r3, r3, #7
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	f003 0306 	and.w	r3, r3, #6
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	f063 030f 	orn	r3, r3, #15
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	490e      	ldr	r1, [pc, #56]	; (8008434 <I2C_MasterRequestWrite+0xfc>)
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f000 f943 	bl	8008686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e010      	b.n	800842c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800840a:	897b      	ldrh	r3, [r7, #10]
 800840c:	b2da      	uxtb	r2, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	4907      	ldr	r1, [pc, #28]	; (8008438 <I2C_MasterRequestWrite+0x100>)
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f000 f933 	bl	8008686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d001      	beq.n	800842a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e000      	b.n	800842c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3718      	adds	r7, #24
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	00010008 	.word	0x00010008
 8008438:	00010002 	.word	0x00010002

0800843c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af02      	add	r7, sp, #8
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	607a      	str	r2, [r7, #4]
 8008446:	603b      	str	r3, [r7, #0]
 8008448:	460b      	mov	r3, r1
 800844a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008460:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	2b08      	cmp	r3, #8
 8008466:	d006      	beq.n	8008476 <I2C_MasterRequestRead+0x3a>
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d003      	beq.n	8008476 <I2C_MasterRequestRead+0x3a>
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008474:	d108      	bne.n	8008488 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	e00b      	b.n	80084a0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848c:	2b11      	cmp	r3, #17
 800848e:	d107      	bne.n	80084a0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800849e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f000 f893 	bl	80085d8 <I2C_WaitOnFlagUntilTimeout>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00d      	beq.n	80084d4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084c6:	d103      	bne.n	80084d0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e079      	b.n	80085c8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084dc:	d108      	bne.n	80084f0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80084de:	897b      	ldrh	r3, [r7, #10]
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	f043 0301 	orr.w	r3, r3, #1
 80084e6:	b2da      	uxtb	r2, r3
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	611a      	str	r2, [r3, #16]
 80084ee:	e05f      	b.n	80085b0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80084f0:	897b      	ldrh	r3, [r7, #10]
 80084f2:	11db      	asrs	r3, r3, #7
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	f003 0306 	and.w	r3, r3, #6
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	f063 030f 	orn	r3, r3, #15
 8008500:	b2da      	uxtb	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	4930      	ldr	r1, [pc, #192]	; (80085d0 <I2C_MasterRequestRead+0x194>)
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f000 f8b9 	bl	8008686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e054      	b.n	80085c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800851e:	897b      	ldrh	r3, [r7, #10]
 8008520:	b2da      	uxtb	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	4929      	ldr	r1, [pc, #164]	; (80085d4 <I2C_MasterRequestRead+0x198>)
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 f8a9 	bl	8008686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e044      	b.n	80085c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800853e:	2300      	movs	r3, #0
 8008540:	613b      	str	r3, [r7, #16]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	695b      	ldr	r3, [r3, #20]
 8008548:	613b      	str	r3, [r7, #16]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	613b      	str	r3, [r7, #16]
 8008552:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008562:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f000 f831 	bl	80085d8 <I2C_WaitOnFlagUntilTimeout>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00d      	beq.n	8008598 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800858a:	d103      	bne.n	8008594 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008592:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	e017      	b.n	80085c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008598:	897b      	ldrh	r3, [r7, #10]
 800859a:	11db      	asrs	r3, r3, #7
 800859c:	b2db      	uxtb	r3, r3
 800859e:	f003 0306 	and.w	r3, r3, #6
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	f063 030e 	orn	r3, r3, #14
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	4907      	ldr	r1, [pc, #28]	; (80085d4 <I2C_MasterRequestRead+0x198>)
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f000 f865 	bl	8008686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e000      	b.n	80085c8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3718      	adds	r7, #24
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	00010008 	.word	0x00010008
 80085d4:	00010002 	.word	0x00010002

080085d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	603b      	str	r3, [r7, #0]
 80085e4:	4613      	mov	r3, r2
 80085e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085e8:	e025      	b.n	8008636 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f0:	d021      	beq.n	8008636 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085f2:	f7fe faeb 	bl	8006bcc <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d302      	bcc.n	8008608 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d116      	bne.n	8008636 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2220      	movs	r2, #32
 8008612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008622:	f043 0220 	orr.w	r2, r3, #32
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e023      	b.n	800867e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	0c1b      	lsrs	r3, r3, #16
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b01      	cmp	r3, #1
 800863e:	d10d      	bne.n	800865c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	43da      	mvns	r2, r3
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	4013      	ands	r3, r2
 800864c:	b29b      	uxth	r3, r3
 800864e:	2b00      	cmp	r3, #0
 8008650:	bf0c      	ite	eq
 8008652:	2301      	moveq	r3, #1
 8008654:	2300      	movne	r3, #0
 8008656:	b2db      	uxtb	r3, r3
 8008658:	461a      	mov	r2, r3
 800865a:	e00c      	b.n	8008676 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	43da      	mvns	r2, r3
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	4013      	ands	r3, r2
 8008668:	b29b      	uxth	r3, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	bf0c      	ite	eq
 800866e:	2301      	moveq	r3, #1
 8008670:	2300      	movne	r3, #0
 8008672:	b2db      	uxtb	r3, r3
 8008674:	461a      	mov	r2, r3
 8008676:	79fb      	ldrb	r3, [r7, #7]
 8008678:	429a      	cmp	r2, r3
 800867a:	d0b6      	beq.n	80085ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b084      	sub	sp, #16
 800868a:	af00      	add	r7, sp, #0
 800868c:	60f8      	str	r0, [r7, #12]
 800868e:	60b9      	str	r1, [r7, #8]
 8008690:	607a      	str	r2, [r7, #4]
 8008692:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008694:	e051      	b.n	800873a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086a4:	d123      	bne.n	80086ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80086be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2220      	movs	r2, #32
 80086ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086da:	f043 0204 	orr.w	r2, r3, #4
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e046      	b.n	800877c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f4:	d021      	beq.n	800873a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086f6:	f7fe fa69 	bl	8006bcc <HAL_GetTick>
 80086fa:	4602      	mov	r2, r0
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	429a      	cmp	r2, r3
 8008704:	d302      	bcc.n	800870c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d116      	bne.n	800873a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2220      	movs	r2, #32
 8008716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008726:	f043 0220 	orr.w	r2, r3, #32
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e020      	b.n	800877c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	0c1b      	lsrs	r3, r3, #16
 800873e:	b2db      	uxtb	r3, r3
 8008740:	2b01      	cmp	r3, #1
 8008742:	d10c      	bne.n	800875e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	695b      	ldr	r3, [r3, #20]
 800874a:	43da      	mvns	r2, r3
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	4013      	ands	r3, r2
 8008750:	b29b      	uxth	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	bf14      	ite	ne
 8008756:	2301      	movne	r3, #1
 8008758:	2300      	moveq	r3, #0
 800875a:	b2db      	uxtb	r3, r3
 800875c:	e00b      	b.n	8008776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	43da      	mvns	r2, r3
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	4013      	ands	r3, r2
 800876a:	b29b      	uxth	r3, r3
 800876c:	2b00      	cmp	r3, #0
 800876e:	bf14      	ite	ne
 8008770:	2301      	movne	r3, #1
 8008772:	2300      	moveq	r3, #0
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2b00      	cmp	r3, #0
 8008778:	d18d      	bne.n	8008696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008790:	e02d      	b.n	80087ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f000 f8ce 	bl	8008934 <I2C_IsAcknowledgeFailed>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e02d      	b.n	80087fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a8:	d021      	beq.n	80087ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087aa:	f7fe fa0f 	bl	8006bcc <HAL_GetTick>
 80087ae:	4602      	mov	r2, r0
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d302      	bcc.n	80087c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d116      	bne.n	80087ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2220      	movs	r2, #32
 80087ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087da:	f043 0220 	orr.w	r2, r3, #32
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e007      	b.n	80087fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	695b      	ldr	r3, [r3, #20]
 80087f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087f8:	2b80      	cmp	r3, #128	; 0x80
 80087fa:	d1ca      	bne.n	8008792 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	60f8      	str	r0, [r7, #12]
 800880e:	60b9      	str	r1, [r7, #8]
 8008810:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008812:	e02d      	b.n	8008870 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f000 f88d 	bl	8008934 <I2C_IsAcknowledgeFailed>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e02d      	b.n	8008880 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882a:	d021      	beq.n	8008870 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800882c:	f7fe f9ce 	bl	8006bcc <HAL_GetTick>
 8008830:	4602      	mov	r2, r0
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	429a      	cmp	r2, r3
 800883a:	d302      	bcc.n	8008842 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d116      	bne.n	8008870 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2220      	movs	r2, #32
 800884c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885c:	f043 0220 	orr.w	r2, r3, #32
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e007      	b.n	8008880 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	f003 0304 	and.w	r3, r3, #4
 800887a:	2b04      	cmp	r3, #4
 800887c:	d1ca      	bne.n	8008814 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008894:	e042      	b.n	800891c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	695b      	ldr	r3, [r3, #20]
 800889c:	f003 0310 	and.w	r3, r3, #16
 80088a0:	2b10      	cmp	r3, #16
 80088a2:	d119      	bne.n	80088d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f06f 0210 	mvn.w	r2, #16
 80088ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2220      	movs	r2, #32
 80088b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e029      	b.n	800892c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088d8:	f7fe f978 	bl	8006bcc <HAL_GetTick>
 80088dc:	4602      	mov	r2, r0
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d302      	bcc.n	80088ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d116      	bne.n	800891c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2220      	movs	r2, #32
 80088f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008908:	f043 0220 	orr.w	r2, r3, #32
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e007      	b.n	800892c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	695b      	ldr	r3, [r3, #20]
 8008922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008926:	2b40      	cmp	r3, #64	; 0x40
 8008928:	d1b5      	bne.n	8008896 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	695b      	ldr	r3, [r3, #20]
 8008942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800894a:	d11b      	bne.n	8008984 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008954:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2220      	movs	r2, #32
 8008960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008970:	f043 0204 	orr.w	r2, r3, #4
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e000      	b.n	8008986 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
	...

08008994 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d101      	bne.n	80089a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e267      	b.n	8008e76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0301 	and.w	r3, r3, #1
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d075      	beq.n	8008a9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80089b2:	4b88      	ldr	r3, [pc, #544]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f003 030c 	and.w	r3, r3, #12
 80089ba:	2b04      	cmp	r3, #4
 80089bc:	d00c      	beq.n	80089d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80089be:	4b85      	ldr	r3, [pc, #532]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80089c6:	2b08      	cmp	r3, #8
 80089c8:	d112      	bne.n	80089f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80089ca:	4b82      	ldr	r3, [pc, #520]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089d6:	d10b      	bne.n	80089f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089d8:	4b7e      	ldr	r3, [pc, #504]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d05b      	beq.n	8008a9c <HAL_RCC_OscConfig+0x108>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d157      	bne.n	8008a9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e242      	b.n	8008e76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089f8:	d106      	bne.n	8008a08 <HAL_RCC_OscConfig+0x74>
 80089fa:	4b76      	ldr	r3, [pc, #472]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a75      	ldr	r2, [pc, #468]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 8008a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a04:	6013      	str	r3, [r2, #0]
 8008a06:	e01d      	b.n	8008a44 <HAL_RCC_OscConfig+0xb0>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a10:	d10c      	bne.n	8008a2c <HAL_RCC_OscConfig+0x98>
 8008a12:	4b70      	ldr	r3, [pc, #448]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a6f      	ldr	r2, [pc, #444]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 8008a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a1c:	6013      	str	r3, [r2, #0]
 8008a1e:	4b6d      	ldr	r3, [pc, #436]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a6c      	ldr	r2, [pc, #432]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 8008a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a28:	6013      	str	r3, [r2, #0]
 8008a2a:	e00b      	b.n	8008a44 <HAL_RCC_OscConfig+0xb0>
 8008a2c:	4b69      	ldr	r3, [pc, #420]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a68      	ldr	r2, [pc, #416]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 8008a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	4b66      	ldr	r3, [pc, #408]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a65      	ldr	r2, [pc, #404]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 8008a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d013      	beq.n	8008a74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a4c:	f7fe f8be 	bl	8006bcc <HAL_GetTick>
 8008a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a52:	e008      	b.n	8008a66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a54:	f7fe f8ba 	bl	8006bcc <HAL_GetTick>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	2b64      	cmp	r3, #100	; 0x64
 8008a60:	d901      	bls.n	8008a66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e207      	b.n	8008e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a66:	4b5b      	ldr	r3, [pc, #364]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d0f0      	beq.n	8008a54 <HAL_RCC_OscConfig+0xc0>
 8008a72:	e014      	b.n	8008a9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a74:	f7fe f8aa 	bl	8006bcc <HAL_GetTick>
 8008a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a7a:	e008      	b.n	8008a8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a7c:	f7fe f8a6 	bl	8006bcc <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	2b64      	cmp	r3, #100	; 0x64
 8008a88:	d901      	bls.n	8008a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e1f3      	b.n	8008e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a8e:	4b51      	ldr	r3, [pc, #324]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1f0      	bne.n	8008a7c <HAL_RCC_OscConfig+0xe8>
 8008a9a:	e000      	b.n	8008a9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0302 	and.w	r3, r3, #2
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d063      	beq.n	8008b72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008aaa:	4b4a      	ldr	r3, [pc, #296]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f003 030c 	and.w	r3, r3, #12
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00b      	beq.n	8008ace <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ab6:	4b47      	ldr	r3, [pc, #284]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008abe:	2b08      	cmp	r3, #8
 8008ac0:	d11c      	bne.n	8008afc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ac2:	4b44      	ldr	r3, [pc, #272]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d116      	bne.n	8008afc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ace:	4b41      	ldr	r3, [pc, #260]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0302 	and.w	r3, r3, #2
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d005      	beq.n	8008ae6 <HAL_RCC_OscConfig+0x152>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d001      	beq.n	8008ae6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e1c7      	b.n	8008e76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ae6:	4b3b      	ldr	r3, [pc, #236]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	00db      	lsls	r3, r3, #3
 8008af4:	4937      	ldr	r1, [pc, #220]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 8008af6:	4313      	orrs	r3, r2
 8008af8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008afa:	e03a      	b.n	8008b72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d020      	beq.n	8008b46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b04:	4b34      	ldr	r3, [pc, #208]	; (8008bd8 <HAL_RCC_OscConfig+0x244>)
 8008b06:	2201      	movs	r2, #1
 8008b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b0a:	f7fe f85f 	bl	8006bcc <HAL_GetTick>
 8008b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b10:	e008      	b.n	8008b24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b12:	f7fe f85b 	bl	8006bcc <HAL_GetTick>
 8008b16:	4602      	mov	r2, r0
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d901      	bls.n	8008b24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e1a8      	b.n	8008e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b24:	4b2b      	ldr	r3, [pc, #172]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0302 	and.w	r3, r3, #2
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d0f0      	beq.n	8008b12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b30:	4b28      	ldr	r3, [pc, #160]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	00db      	lsls	r3, r3, #3
 8008b3e:	4925      	ldr	r1, [pc, #148]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 8008b40:	4313      	orrs	r3, r2
 8008b42:	600b      	str	r3, [r1, #0]
 8008b44:	e015      	b.n	8008b72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b46:	4b24      	ldr	r3, [pc, #144]	; (8008bd8 <HAL_RCC_OscConfig+0x244>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b4c:	f7fe f83e 	bl	8006bcc <HAL_GetTick>
 8008b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b52:	e008      	b.n	8008b66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b54:	f7fe f83a 	bl	8006bcc <HAL_GetTick>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d901      	bls.n	8008b66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008b62:	2303      	movs	r3, #3
 8008b64:	e187      	b.n	8008e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b66:	4b1b      	ldr	r3, [pc, #108]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0302 	and.w	r3, r3, #2
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1f0      	bne.n	8008b54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0308 	and.w	r3, r3, #8
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d036      	beq.n	8008bec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d016      	beq.n	8008bb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b86:	4b15      	ldr	r3, [pc, #84]	; (8008bdc <HAL_RCC_OscConfig+0x248>)
 8008b88:	2201      	movs	r2, #1
 8008b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b8c:	f7fe f81e 	bl	8006bcc <HAL_GetTick>
 8008b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b92:	e008      	b.n	8008ba6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b94:	f7fe f81a 	bl	8006bcc <HAL_GetTick>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d901      	bls.n	8008ba6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e167      	b.n	8008e76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ba6:	4b0b      	ldr	r3, [pc, #44]	; (8008bd4 <HAL_RCC_OscConfig+0x240>)
 8008ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008baa:	f003 0302 	and.w	r3, r3, #2
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d0f0      	beq.n	8008b94 <HAL_RCC_OscConfig+0x200>
 8008bb2:	e01b      	b.n	8008bec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008bb4:	4b09      	ldr	r3, [pc, #36]	; (8008bdc <HAL_RCC_OscConfig+0x248>)
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008bba:	f7fe f807 	bl	8006bcc <HAL_GetTick>
 8008bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008bc0:	e00e      	b.n	8008be0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008bc2:	f7fe f803 	bl	8006bcc <HAL_GetTick>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	1ad3      	subs	r3, r2, r3
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d907      	bls.n	8008be0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e150      	b.n	8008e76 <HAL_RCC_OscConfig+0x4e2>
 8008bd4:	40023800 	.word	0x40023800
 8008bd8:	42470000 	.word	0x42470000
 8008bdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008be0:	4b88      	ldr	r3, [pc, #544]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008be4:	f003 0302 	and.w	r3, r3, #2
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1ea      	bne.n	8008bc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 0304 	and.w	r3, r3, #4
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 8097 	beq.w	8008d28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008bfe:	4b81      	ldr	r3, [pc, #516]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d10f      	bne.n	8008c2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	60bb      	str	r3, [r7, #8]
 8008c0e:	4b7d      	ldr	r3, [pc, #500]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c12:	4a7c      	ldr	r2, [pc, #496]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c18:	6413      	str	r3, [r2, #64]	; 0x40
 8008c1a:	4b7a      	ldr	r3, [pc, #488]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c22:	60bb      	str	r3, [r7, #8]
 8008c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c26:	2301      	movs	r3, #1
 8008c28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c2a:	4b77      	ldr	r3, [pc, #476]	; (8008e08 <HAL_RCC_OscConfig+0x474>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d118      	bne.n	8008c68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008c36:	4b74      	ldr	r3, [pc, #464]	; (8008e08 <HAL_RCC_OscConfig+0x474>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a73      	ldr	r2, [pc, #460]	; (8008e08 <HAL_RCC_OscConfig+0x474>)
 8008c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c42:	f7fd ffc3 	bl	8006bcc <HAL_GetTick>
 8008c46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c48:	e008      	b.n	8008c5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c4a:	f7fd ffbf 	bl	8006bcc <HAL_GetTick>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d901      	bls.n	8008c5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	e10c      	b.n	8008e76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c5c:	4b6a      	ldr	r3, [pc, #424]	; (8008e08 <HAL_RCC_OscConfig+0x474>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d0f0      	beq.n	8008c4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d106      	bne.n	8008c7e <HAL_RCC_OscConfig+0x2ea>
 8008c70:	4b64      	ldr	r3, [pc, #400]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c74:	4a63      	ldr	r2, [pc, #396]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008c76:	f043 0301 	orr.w	r3, r3, #1
 8008c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8008c7c:	e01c      	b.n	8008cb8 <HAL_RCC_OscConfig+0x324>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	2b05      	cmp	r3, #5
 8008c84:	d10c      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x30c>
 8008c86:	4b5f      	ldr	r3, [pc, #380]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8a:	4a5e      	ldr	r2, [pc, #376]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008c8c:	f043 0304 	orr.w	r3, r3, #4
 8008c90:	6713      	str	r3, [r2, #112]	; 0x70
 8008c92:	4b5c      	ldr	r3, [pc, #368]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c96:	4a5b      	ldr	r2, [pc, #364]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008c98:	f043 0301 	orr.w	r3, r3, #1
 8008c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8008c9e:	e00b      	b.n	8008cb8 <HAL_RCC_OscConfig+0x324>
 8008ca0:	4b58      	ldr	r3, [pc, #352]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca4:	4a57      	ldr	r2, [pc, #348]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008ca6:	f023 0301 	bic.w	r3, r3, #1
 8008caa:	6713      	str	r3, [r2, #112]	; 0x70
 8008cac:	4b55      	ldr	r3, [pc, #340]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb0:	4a54      	ldr	r2, [pc, #336]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008cb2:	f023 0304 	bic.w	r3, r3, #4
 8008cb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d015      	beq.n	8008cec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cc0:	f7fd ff84 	bl	8006bcc <HAL_GetTick>
 8008cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cc6:	e00a      	b.n	8008cde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cc8:	f7fd ff80 	bl	8006bcc <HAL_GetTick>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d901      	bls.n	8008cde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e0cb      	b.n	8008e76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cde:	4b49      	ldr	r3, [pc, #292]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce2:	f003 0302 	and.w	r3, r3, #2
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d0ee      	beq.n	8008cc8 <HAL_RCC_OscConfig+0x334>
 8008cea:	e014      	b.n	8008d16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008cec:	f7fd ff6e 	bl	8006bcc <HAL_GetTick>
 8008cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cf2:	e00a      	b.n	8008d0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cf4:	f7fd ff6a 	bl	8006bcc <HAL_GetTick>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d901      	bls.n	8008d0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e0b5      	b.n	8008e76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d0a:	4b3e      	ldr	r3, [pc, #248]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d0e:	f003 0302 	and.w	r3, r3, #2
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1ee      	bne.n	8008cf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008d16:	7dfb      	ldrb	r3, [r7, #23]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d105      	bne.n	8008d28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d1c:	4b39      	ldr	r3, [pc, #228]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d20:	4a38      	ldr	r2, [pc, #224]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 80a1 	beq.w	8008e74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d32:	4b34      	ldr	r3, [pc, #208]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f003 030c 	and.w	r3, r3, #12
 8008d3a:	2b08      	cmp	r3, #8
 8008d3c:	d05c      	beq.n	8008df8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d141      	bne.n	8008dca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d46:	4b31      	ldr	r3, [pc, #196]	; (8008e0c <HAL_RCC_OscConfig+0x478>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d4c:	f7fd ff3e 	bl	8006bcc <HAL_GetTick>
 8008d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d52:	e008      	b.n	8008d66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d54:	f7fd ff3a 	bl	8006bcc <HAL_GetTick>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d901      	bls.n	8008d66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e087      	b.n	8008e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d66:	4b27      	ldr	r3, [pc, #156]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1f0      	bne.n	8008d54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	69da      	ldr	r2, [r3, #28]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	431a      	orrs	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d80:	019b      	lsls	r3, r3, #6
 8008d82:	431a      	orrs	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d88:	085b      	lsrs	r3, r3, #1
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	041b      	lsls	r3, r3, #16
 8008d8e:	431a      	orrs	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d94:	061b      	lsls	r3, r3, #24
 8008d96:	491b      	ldr	r1, [pc, #108]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d9c:	4b1b      	ldr	r3, [pc, #108]	; (8008e0c <HAL_RCC_OscConfig+0x478>)
 8008d9e:	2201      	movs	r2, #1
 8008da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008da2:	f7fd ff13 	bl	8006bcc <HAL_GetTick>
 8008da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008da8:	e008      	b.n	8008dbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008daa:	f7fd ff0f 	bl	8006bcc <HAL_GetTick>
 8008dae:	4602      	mov	r2, r0
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d901      	bls.n	8008dbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008db8:	2303      	movs	r3, #3
 8008dba:	e05c      	b.n	8008e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008dbc:	4b11      	ldr	r3, [pc, #68]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d0f0      	beq.n	8008daa <HAL_RCC_OscConfig+0x416>
 8008dc8:	e054      	b.n	8008e74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dca:	4b10      	ldr	r3, [pc, #64]	; (8008e0c <HAL_RCC_OscConfig+0x478>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dd0:	f7fd fefc 	bl	8006bcc <HAL_GetTick>
 8008dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dd6:	e008      	b.n	8008dea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008dd8:	f7fd fef8 	bl	8006bcc <HAL_GetTick>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d901      	bls.n	8008dea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008de6:	2303      	movs	r3, #3
 8008de8:	e045      	b.n	8008e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dea:	4b06      	ldr	r3, [pc, #24]	; (8008e04 <HAL_RCC_OscConfig+0x470>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1f0      	bne.n	8008dd8 <HAL_RCC_OscConfig+0x444>
 8008df6:	e03d      	b.n	8008e74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d107      	bne.n	8008e10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e038      	b.n	8008e76 <HAL_RCC_OscConfig+0x4e2>
 8008e04:	40023800 	.word	0x40023800
 8008e08:	40007000 	.word	0x40007000
 8008e0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008e10:	4b1b      	ldr	r3, [pc, #108]	; (8008e80 <HAL_RCC_OscConfig+0x4ec>)
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	699b      	ldr	r3, [r3, #24]
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d028      	beq.n	8008e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d121      	bne.n	8008e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d11a      	bne.n	8008e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008e40:	4013      	ands	r3, r2
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008e46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d111      	bne.n	8008e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e56:	085b      	lsrs	r3, r3, #1
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d107      	bne.n	8008e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d001      	beq.n	8008e74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	e000      	b.n	8008e76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3718      	adds	r7, #24
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	40023800 	.word	0x40023800

08008e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d101      	bne.n	8008e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e0cc      	b.n	8009032 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e98:	4b68      	ldr	r3, [pc, #416]	; (800903c <HAL_RCC_ClockConfig+0x1b8>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 0307 	and.w	r3, r3, #7
 8008ea0:	683a      	ldr	r2, [r7, #0]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d90c      	bls.n	8008ec0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ea6:	4b65      	ldr	r3, [pc, #404]	; (800903c <HAL_RCC_ClockConfig+0x1b8>)
 8008ea8:	683a      	ldr	r2, [r7, #0]
 8008eaa:	b2d2      	uxtb	r2, r2
 8008eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eae:	4b63      	ldr	r3, [pc, #396]	; (800903c <HAL_RCC_ClockConfig+0x1b8>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 0307 	and.w	r3, r3, #7
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d001      	beq.n	8008ec0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e0b8      	b.n	8009032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 0302 	and.w	r3, r3, #2
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d020      	beq.n	8008f0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 0304 	and.w	r3, r3, #4
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d005      	beq.n	8008ee4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ed8:	4b59      	ldr	r3, [pc, #356]	; (8009040 <HAL_RCC_ClockConfig+0x1bc>)
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	4a58      	ldr	r2, [pc, #352]	; (8009040 <HAL_RCC_ClockConfig+0x1bc>)
 8008ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008ee2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 0308 	and.w	r3, r3, #8
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d005      	beq.n	8008efc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008ef0:	4b53      	ldr	r3, [pc, #332]	; (8009040 <HAL_RCC_ClockConfig+0x1bc>)
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	4a52      	ldr	r2, [pc, #328]	; (8009040 <HAL_RCC_ClockConfig+0x1bc>)
 8008ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008efa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008efc:	4b50      	ldr	r3, [pc, #320]	; (8009040 <HAL_RCC_ClockConfig+0x1bc>)
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	494d      	ldr	r1, [pc, #308]	; (8009040 <HAL_RCC_ClockConfig+0x1bc>)
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d044      	beq.n	8008fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d107      	bne.n	8008f32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f22:	4b47      	ldr	r3, [pc, #284]	; (8009040 <HAL_RCC_ClockConfig+0x1bc>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d119      	bne.n	8008f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e07f      	b.n	8009032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d003      	beq.n	8008f42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d107      	bne.n	8008f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f42:	4b3f      	ldr	r3, [pc, #252]	; (8009040 <HAL_RCC_ClockConfig+0x1bc>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d109      	bne.n	8008f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e06f      	b.n	8009032 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f52:	4b3b      	ldr	r3, [pc, #236]	; (8009040 <HAL_RCC_ClockConfig+0x1bc>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0302 	and.w	r3, r3, #2
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e067      	b.n	8009032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008f62:	4b37      	ldr	r3, [pc, #220]	; (8009040 <HAL_RCC_ClockConfig+0x1bc>)
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f023 0203 	bic.w	r2, r3, #3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	4934      	ldr	r1, [pc, #208]	; (8009040 <HAL_RCC_ClockConfig+0x1bc>)
 8008f70:	4313      	orrs	r3, r2
 8008f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008f74:	f7fd fe2a 	bl	8006bcc <HAL_GetTick>
 8008f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f7a:	e00a      	b.n	8008f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f7c:	f7fd fe26 	bl	8006bcc <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d901      	bls.n	8008f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e04f      	b.n	8009032 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f92:	4b2b      	ldr	r3, [pc, #172]	; (8009040 <HAL_RCC_ClockConfig+0x1bc>)
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	f003 020c 	and.w	r2, r3, #12
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d1eb      	bne.n	8008f7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008fa4:	4b25      	ldr	r3, [pc, #148]	; (800903c <HAL_RCC_ClockConfig+0x1b8>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 0307 	and.w	r3, r3, #7
 8008fac:	683a      	ldr	r2, [r7, #0]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d20c      	bcs.n	8008fcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fb2:	4b22      	ldr	r3, [pc, #136]	; (800903c <HAL_RCC_ClockConfig+0x1b8>)
 8008fb4:	683a      	ldr	r2, [r7, #0]
 8008fb6:	b2d2      	uxtb	r2, r2
 8008fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fba:	4b20      	ldr	r3, [pc, #128]	; (800903c <HAL_RCC_ClockConfig+0x1b8>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 0307 	and.w	r3, r3, #7
 8008fc2:	683a      	ldr	r2, [r7, #0]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d001      	beq.n	8008fcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e032      	b.n	8009032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 0304 	and.w	r3, r3, #4
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d008      	beq.n	8008fea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008fd8:	4b19      	ldr	r3, [pc, #100]	; (8009040 <HAL_RCC_ClockConfig+0x1bc>)
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	4916      	ldr	r1, [pc, #88]	; (8009040 <HAL_RCC_ClockConfig+0x1bc>)
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 0308 	and.w	r3, r3, #8
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d009      	beq.n	800900a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ff6:	4b12      	ldr	r3, [pc, #72]	; (8009040 <HAL_RCC_ClockConfig+0x1bc>)
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	00db      	lsls	r3, r3, #3
 8009004:	490e      	ldr	r1, [pc, #56]	; (8009040 <HAL_RCC_ClockConfig+0x1bc>)
 8009006:	4313      	orrs	r3, r2
 8009008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800900a:	f000 f821 	bl	8009050 <HAL_RCC_GetSysClockFreq>
 800900e:	4602      	mov	r2, r0
 8009010:	4b0b      	ldr	r3, [pc, #44]	; (8009040 <HAL_RCC_ClockConfig+0x1bc>)
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	091b      	lsrs	r3, r3, #4
 8009016:	f003 030f 	and.w	r3, r3, #15
 800901a:	490a      	ldr	r1, [pc, #40]	; (8009044 <HAL_RCC_ClockConfig+0x1c0>)
 800901c:	5ccb      	ldrb	r3, [r1, r3]
 800901e:	fa22 f303 	lsr.w	r3, r2, r3
 8009022:	4a09      	ldr	r2, [pc, #36]	; (8009048 <HAL_RCC_ClockConfig+0x1c4>)
 8009024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009026:	4b09      	ldr	r3, [pc, #36]	; (800904c <HAL_RCC_ClockConfig+0x1c8>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4618      	mov	r0, r3
 800902c:	f7fd fd8a 	bl	8006b44 <HAL_InitTick>

  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	40023c00 	.word	0x40023c00
 8009040:	40023800 	.word	0x40023800
 8009044:	08010fe0 	.word	0x08010fe0
 8009048:	20001268 	.word	0x20001268
 800904c:	2000126c 	.word	0x2000126c

08009050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009054:	b090      	sub	sp, #64	; 0x40
 8009056:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009058:	2300      	movs	r3, #0
 800905a:	637b      	str	r3, [r7, #52]	; 0x34
 800905c:	2300      	movs	r3, #0
 800905e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009060:	2300      	movs	r3, #0
 8009062:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8009064:	2300      	movs	r3, #0
 8009066:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009068:	4b59      	ldr	r3, [pc, #356]	; (80091d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	f003 030c 	and.w	r3, r3, #12
 8009070:	2b08      	cmp	r3, #8
 8009072:	d00d      	beq.n	8009090 <HAL_RCC_GetSysClockFreq+0x40>
 8009074:	2b08      	cmp	r3, #8
 8009076:	f200 80a1 	bhi.w	80091bc <HAL_RCC_GetSysClockFreq+0x16c>
 800907a:	2b00      	cmp	r3, #0
 800907c:	d002      	beq.n	8009084 <HAL_RCC_GetSysClockFreq+0x34>
 800907e:	2b04      	cmp	r3, #4
 8009080:	d003      	beq.n	800908a <HAL_RCC_GetSysClockFreq+0x3a>
 8009082:	e09b      	b.n	80091bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009084:	4b53      	ldr	r3, [pc, #332]	; (80091d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8009086:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8009088:	e09b      	b.n	80091c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800908a:	4b53      	ldr	r3, [pc, #332]	; (80091d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800908c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800908e:	e098      	b.n	80091c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009090:	4b4f      	ldr	r3, [pc, #316]	; (80091d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009098:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800909a:	4b4d      	ldr	r3, [pc, #308]	; (80091d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d028      	beq.n	80090f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80090a6:	4b4a      	ldr	r3, [pc, #296]	; (80091d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	099b      	lsrs	r3, r3, #6
 80090ac:	2200      	movs	r2, #0
 80090ae:	623b      	str	r3, [r7, #32]
 80090b0:	627a      	str	r2, [r7, #36]	; 0x24
 80090b2:	6a3b      	ldr	r3, [r7, #32]
 80090b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80090b8:	2100      	movs	r1, #0
 80090ba:	4b47      	ldr	r3, [pc, #284]	; (80091d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80090bc:	fb03 f201 	mul.w	r2, r3, r1
 80090c0:	2300      	movs	r3, #0
 80090c2:	fb00 f303 	mul.w	r3, r0, r3
 80090c6:	4413      	add	r3, r2
 80090c8:	4a43      	ldr	r2, [pc, #268]	; (80091d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80090ca:	fba0 1202 	umull	r1, r2, r0, r2
 80090ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090d0:	460a      	mov	r2, r1
 80090d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80090d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090d6:	4413      	add	r3, r2
 80090d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090dc:	2200      	movs	r2, #0
 80090de:	61bb      	str	r3, [r7, #24]
 80090e0:	61fa      	str	r2, [r7, #28]
 80090e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80090ea:	f7f7 fdb5 	bl	8000c58 <__aeabi_uldivmod>
 80090ee:	4602      	mov	r2, r0
 80090f0:	460b      	mov	r3, r1
 80090f2:	4613      	mov	r3, r2
 80090f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090f6:	e053      	b.n	80091a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80090f8:	4b35      	ldr	r3, [pc, #212]	; (80091d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	099b      	lsrs	r3, r3, #6
 80090fe:	2200      	movs	r2, #0
 8009100:	613b      	str	r3, [r7, #16]
 8009102:	617a      	str	r2, [r7, #20]
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800910a:	f04f 0b00 	mov.w	fp, #0
 800910e:	4652      	mov	r2, sl
 8009110:	465b      	mov	r3, fp
 8009112:	f04f 0000 	mov.w	r0, #0
 8009116:	f04f 0100 	mov.w	r1, #0
 800911a:	0159      	lsls	r1, r3, #5
 800911c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009120:	0150      	lsls	r0, r2, #5
 8009122:	4602      	mov	r2, r0
 8009124:	460b      	mov	r3, r1
 8009126:	ebb2 080a 	subs.w	r8, r2, sl
 800912a:	eb63 090b 	sbc.w	r9, r3, fp
 800912e:	f04f 0200 	mov.w	r2, #0
 8009132:	f04f 0300 	mov.w	r3, #0
 8009136:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800913a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800913e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009142:	ebb2 0408 	subs.w	r4, r2, r8
 8009146:	eb63 0509 	sbc.w	r5, r3, r9
 800914a:	f04f 0200 	mov.w	r2, #0
 800914e:	f04f 0300 	mov.w	r3, #0
 8009152:	00eb      	lsls	r3, r5, #3
 8009154:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009158:	00e2      	lsls	r2, r4, #3
 800915a:	4614      	mov	r4, r2
 800915c:	461d      	mov	r5, r3
 800915e:	eb14 030a 	adds.w	r3, r4, sl
 8009162:	603b      	str	r3, [r7, #0]
 8009164:	eb45 030b 	adc.w	r3, r5, fp
 8009168:	607b      	str	r3, [r7, #4]
 800916a:	f04f 0200 	mov.w	r2, #0
 800916e:	f04f 0300 	mov.w	r3, #0
 8009172:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009176:	4629      	mov	r1, r5
 8009178:	028b      	lsls	r3, r1, #10
 800917a:	4621      	mov	r1, r4
 800917c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009180:	4621      	mov	r1, r4
 8009182:	028a      	lsls	r2, r1, #10
 8009184:	4610      	mov	r0, r2
 8009186:	4619      	mov	r1, r3
 8009188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918a:	2200      	movs	r2, #0
 800918c:	60bb      	str	r3, [r7, #8]
 800918e:	60fa      	str	r2, [r7, #12]
 8009190:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009194:	f7f7 fd60 	bl	8000c58 <__aeabi_uldivmod>
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	4613      	mov	r3, r2
 800919e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80091a0:	4b0b      	ldr	r3, [pc, #44]	; (80091d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	0c1b      	lsrs	r3, r3, #16
 80091a6:	f003 0303 	and.w	r3, r3, #3
 80091aa:	3301      	adds	r3, #1
 80091ac:	005b      	lsls	r3, r3, #1
 80091ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80091b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80091b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80091ba:	e002      	b.n	80091c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80091bc:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80091be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80091c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80091c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3740      	adds	r7, #64	; 0x40
 80091c8:	46bd      	mov	sp, r7
 80091ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091ce:	bf00      	nop
 80091d0:	40023800 	.word	0x40023800
 80091d4:	00f42400 	.word	0x00f42400
 80091d8:	017d7840 	.word	0x017d7840

080091dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091dc:	b480      	push	{r7}
 80091de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091e0:	4b03      	ldr	r3, [pc, #12]	; (80091f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80091e2:	681b      	ldr	r3, [r3, #0]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop
 80091f0:	20001268 	.word	0x20001268

080091f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80091f8:	f7ff fff0 	bl	80091dc <HAL_RCC_GetHCLKFreq>
 80091fc:	4602      	mov	r2, r0
 80091fe:	4b05      	ldr	r3, [pc, #20]	; (8009214 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	0a9b      	lsrs	r3, r3, #10
 8009204:	f003 0307 	and.w	r3, r3, #7
 8009208:	4903      	ldr	r1, [pc, #12]	; (8009218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800920a:	5ccb      	ldrb	r3, [r1, r3]
 800920c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009210:	4618      	mov	r0, r3
 8009212:	bd80      	pop	{r7, pc}
 8009214:	40023800 	.word	0x40023800
 8009218:	08010ff0 	.word	0x08010ff0

0800921c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009220:	f7ff ffdc 	bl	80091dc <HAL_RCC_GetHCLKFreq>
 8009224:	4602      	mov	r2, r0
 8009226:	4b05      	ldr	r3, [pc, #20]	; (800923c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	0b5b      	lsrs	r3, r3, #13
 800922c:	f003 0307 	and.w	r3, r3, #7
 8009230:	4903      	ldr	r1, [pc, #12]	; (8009240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009232:	5ccb      	ldrb	r3, [r1, r3]
 8009234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009238:	4618      	mov	r0, r3
 800923a:	bd80      	pop	{r7, pc}
 800923c:	40023800 	.word	0x40023800
 8009240:	08010ff0 	.word	0x08010ff0

08009244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e041      	b.n	80092da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d106      	bne.n	8009270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7fd fa8a 	bl	8006784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2202      	movs	r2, #2
 8009274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	3304      	adds	r3, #4
 8009280:	4619      	mov	r1, r3
 8009282:	4610      	mov	r0, r2
 8009284:	f000 f950 	bl	8009528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
	...

080092e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b085      	sub	sp, #20
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d001      	beq.n	80092fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e03c      	b.n	8009376 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2202      	movs	r2, #2
 8009300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a1e      	ldr	r2, [pc, #120]	; (8009384 <HAL_TIM_Base_Start+0xa0>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d018      	beq.n	8009340 <HAL_TIM_Base_Start+0x5c>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009316:	d013      	beq.n	8009340 <HAL_TIM_Base_Start+0x5c>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a1a      	ldr	r2, [pc, #104]	; (8009388 <HAL_TIM_Base_Start+0xa4>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d00e      	beq.n	8009340 <HAL_TIM_Base_Start+0x5c>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a19      	ldr	r2, [pc, #100]	; (800938c <HAL_TIM_Base_Start+0xa8>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d009      	beq.n	8009340 <HAL_TIM_Base_Start+0x5c>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a17      	ldr	r2, [pc, #92]	; (8009390 <HAL_TIM_Base_Start+0xac>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d004      	beq.n	8009340 <HAL_TIM_Base_Start+0x5c>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a16      	ldr	r2, [pc, #88]	; (8009394 <HAL_TIM_Base_Start+0xb0>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d111      	bne.n	8009364 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	f003 0307 	and.w	r3, r3, #7
 800934a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2b06      	cmp	r3, #6
 8009350:	d010      	beq.n	8009374 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f042 0201 	orr.w	r2, r2, #1
 8009360:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009362:	e007      	b.n	8009374 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f042 0201 	orr.w	r2, r2, #1
 8009372:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3714      	adds	r7, #20
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	40010000 	.word	0x40010000
 8009388:	40000400 	.word	0x40000400
 800938c:	40000800 	.word	0x40000800
 8009390:	40000c00 	.word	0x40000c00
 8009394:	40014000 	.word	0x40014000

08009398 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093a2:	2300      	movs	r3, #0
 80093a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d101      	bne.n	80093b4 <HAL_TIM_ConfigClockSource+0x1c>
 80093b0:	2302      	movs	r3, #2
 80093b2:	e0b4      	b.n	800951e <HAL_TIM_ConfigClockSource+0x186>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2202      	movs	r2, #2
 80093c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80093d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093ec:	d03e      	beq.n	800946c <HAL_TIM_ConfigClockSource+0xd4>
 80093ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093f2:	f200 8087 	bhi.w	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 80093f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093fa:	f000 8086 	beq.w	800950a <HAL_TIM_ConfigClockSource+0x172>
 80093fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009402:	d87f      	bhi.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 8009404:	2b70      	cmp	r3, #112	; 0x70
 8009406:	d01a      	beq.n	800943e <HAL_TIM_ConfigClockSource+0xa6>
 8009408:	2b70      	cmp	r3, #112	; 0x70
 800940a:	d87b      	bhi.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 800940c:	2b60      	cmp	r3, #96	; 0x60
 800940e:	d050      	beq.n	80094b2 <HAL_TIM_ConfigClockSource+0x11a>
 8009410:	2b60      	cmp	r3, #96	; 0x60
 8009412:	d877      	bhi.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 8009414:	2b50      	cmp	r3, #80	; 0x50
 8009416:	d03c      	beq.n	8009492 <HAL_TIM_ConfigClockSource+0xfa>
 8009418:	2b50      	cmp	r3, #80	; 0x50
 800941a:	d873      	bhi.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 800941c:	2b40      	cmp	r3, #64	; 0x40
 800941e:	d058      	beq.n	80094d2 <HAL_TIM_ConfigClockSource+0x13a>
 8009420:	2b40      	cmp	r3, #64	; 0x40
 8009422:	d86f      	bhi.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 8009424:	2b30      	cmp	r3, #48	; 0x30
 8009426:	d064      	beq.n	80094f2 <HAL_TIM_ConfigClockSource+0x15a>
 8009428:	2b30      	cmp	r3, #48	; 0x30
 800942a:	d86b      	bhi.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 800942c:	2b20      	cmp	r3, #32
 800942e:	d060      	beq.n	80094f2 <HAL_TIM_ConfigClockSource+0x15a>
 8009430:	2b20      	cmp	r3, #32
 8009432:	d867      	bhi.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 8009434:	2b00      	cmp	r3, #0
 8009436:	d05c      	beq.n	80094f2 <HAL_TIM_ConfigClockSource+0x15a>
 8009438:	2b10      	cmp	r3, #16
 800943a:	d05a      	beq.n	80094f2 <HAL_TIM_ConfigClockSource+0x15a>
 800943c:	e062      	b.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6818      	ldr	r0, [r3, #0]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	6899      	ldr	r1, [r3, #8]
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	685a      	ldr	r2, [r3, #4]
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	f000 f965 	bl	800971c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009460:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	609a      	str	r2, [r3, #8]
      break;
 800946a:	e04f      	b.n	800950c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6818      	ldr	r0, [r3, #0]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	6899      	ldr	r1, [r3, #8]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	685a      	ldr	r2, [r3, #4]
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	f000 f94e 	bl	800971c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	689a      	ldr	r2, [r3, #8]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800948e:	609a      	str	r2, [r3, #8]
      break;
 8009490:	e03c      	b.n	800950c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6818      	ldr	r0, [r3, #0]
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	6859      	ldr	r1, [r3, #4]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	461a      	mov	r2, r3
 80094a0:	f000 f8c2 	bl	8009628 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2150      	movs	r1, #80	; 0x50
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 f91b 	bl	80096e6 <TIM_ITRx_SetConfig>
      break;
 80094b0:	e02c      	b.n	800950c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6818      	ldr	r0, [r3, #0]
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	6859      	ldr	r1, [r3, #4]
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	461a      	mov	r2, r3
 80094c0:	f000 f8e1 	bl	8009686 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2160      	movs	r1, #96	; 0x60
 80094ca:	4618      	mov	r0, r3
 80094cc:	f000 f90b 	bl	80096e6 <TIM_ITRx_SetConfig>
      break;
 80094d0:	e01c      	b.n	800950c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6818      	ldr	r0, [r3, #0]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	6859      	ldr	r1, [r3, #4]
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	461a      	mov	r2, r3
 80094e0:	f000 f8a2 	bl	8009628 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2140      	movs	r1, #64	; 0x40
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 f8fb 	bl	80096e6 <TIM_ITRx_SetConfig>
      break;
 80094f0:	e00c      	b.n	800950c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4619      	mov	r1, r3
 80094fc:	4610      	mov	r0, r2
 80094fe:	f000 f8f2 	bl	80096e6 <TIM_ITRx_SetConfig>
      break;
 8009502:	e003      	b.n	800950c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	73fb      	strb	r3, [r7, #15]
      break;
 8009508:	e000      	b.n	800950c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800950a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800951c:	7bfb      	ldrb	r3, [r7, #15]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
	...

08009528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a34      	ldr	r2, [pc, #208]	; (800960c <TIM_Base_SetConfig+0xe4>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d00f      	beq.n	8009560 <TIM_Base_SetConfig+0x38>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009546:	d00b      	beq.n	8009560 <TIM_Base_SetConfig+0x38>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a31      	ldr	r2, [pc, #196]	; (8009610 <TIM_Base_SetConfig+0xe8>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d007      	beq.n	8009560 <TIM_Base_SetConfig+0x38>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a30      	ldr	r2, [pc, #192]	; (8009614 <TIM_Base_SetConfig+0xec>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d003      	beq.n	8009560 <TIM_Base_SetConfig+0x38>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a2f      	ldr	r2, [pc, #188]	; (8009618 <TIM_Base_SetConfig+0xf0>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d108      	bne.n	8009572 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	4313      	orrs	r3, r2
 8009570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a25      	ldr	r2, [pc, #148]	; (800960c <TIM_Base_SetConfig+0xe4>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d01b      	beq.n	80095b2 <TIM_Base_SetConfig+0x8a>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009580:	d017      	beq.n	80095b2 <TIM_Base_SetConfig+0x8a>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a22      	ldr	r2, [pc, #136]	; (8009610 <TIM_Base_SetConfig+0xe8>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d013      	beq.n	80095b2 <TIM_Base_SetConfig+0x8a>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a21      	ldr	r2, [pc, #132]	; (8009614 <TIM_Base_SetConfig+0xec>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d00f      	beq.n	80095b2 <TIM_Base_SetConfig+0x8a>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a20      	ldr	r2, [pc, #128]	; (8009618 <TIM_Base_SetConfig+0xf0>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d00b      	beq.n	80095b2 <TIM_Base_SetConfig+0x8a>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a1f      	ldr	r2, [pc, #124]	; (800961c <TIM_Base_SetConfig+0xf4>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d007      	beq.n	80095b2 <TIM_Base_SetConfig+0x8a>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a1e      	ldr	r2, [pc, #120]	; (8009620 <TIM_Base_SetConfig+0xf8>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d003      	beq.n	80095b2 <TIM_Base_SetConfig+0x8a>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a1d      	ldr	r2, [pc, #116]	; (8009624 <TIM_Base_SetConfig+0xfc>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d108      	bne.n	80095c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	68fa      	ldr	r2, [r7, #12]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	695b      	ldr	r3, [r3, #20]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	689a      	ldr	r2, [r3, #8]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a08      	ldr	r2, [pc, #32]	; (800960c <TIM_Base_SetConfig+0xe4>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d103      	bne.n	80095f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	691a      	ldr	r2, [r3, #16]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	615a      	str	r2, [r3, #20]
}
 80095fe:	bf00      	nop
 8009600:	3714      	adds	r7, #20
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
 800960a:	bf00      	nop
 800960c:	40010000 	.word	0x40010000
 8009610:	40000400 	.word	0x40000400
 8009614:	40000800 	.word	0x40000800
 8009618:	40000c00 	.word	0x40000c00
 800961c:	40014000 	.word	0x40014000
 8009620:	40014400 	.word	0x40014400
 8009624:	40014800 	.word	0x40014800

08009628 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009628:	b480      	push	{r7}
 800962a:	b087      	sub	sp, #28
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6a1b      	ldr	r3, [r3, #32]
 8009638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6a1b      	ldr	r3, [r3, #32]
 800963e:	f023 0201 	bic.w	r2, r3, #1
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	699b      	ldr	r3, [r3, #24]
 800964a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	011b      	lsls	r3, r3, #4
 8009658:	693a      	ldr	r2, [r7, #16]
 800965a:	4313      	orrs	r3, r2
 800965c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	f023 030a 	bic.w	r3, r3, #10
 8009664:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	4313      	orrs	r3, r2
 800966c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	693a      	ldr	r2, [r7, #16]
 8009672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	697a      	ldr	r2, [r7, #20]
 8009678:	621a      	str	r2, [r3, #32]
}
 800967a:	bf00      	nop
 800967c:	371c      	adds	r7, #28
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr

08009686 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009686:	b480      	push	{r7}
 8009688:	b087      	sub	sp, #28
 800968a:	af00      	add	r7, sp, #0
 800968c:	60f8      	str	r0, [r7, #12]
 800968e:	60b9      	str	r1, [r7, #8]
 8009690:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	f023 0210 	bic.w	r2, r3, #16
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6a1b      	ldr	r3, [r3, #32]
 80096a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80096b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	031b      	lsls	r3, r3, #12
 80096b6:	697a      	ldr	r2, [r7, #20]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80096c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	011b      	lsls	r3, r3, #4
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	697a      	ldr	r2, [r7, #20]
 80096d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	621a      	str	r2, [r3, #32]
}
 80096da:	bf00      	nop
 80096dc:	371c      	adds	r7, #28
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b085      	sub	sp, #20
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	4313      	orrs	r3, r2
 8009704:	f043 0307 	orr.w	r3, r3, #7
 8009708:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	609a      	str	r2, [r3, #8]
}
 8009710:	bf00      	nop
 8009712:	3714      	adds	r7, #20
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800971c:	b480      	push	{r7}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	607a      	str	r2, [r7, #4]
 8009728:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009736:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	021a      	lsls	r2, r3, #8
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	431a      	orrs	r2, r3
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	4313      	orrs	r3, r2
 8009744:	697a      	ldr	r2, [r7, #20]
 8009746:	4313      	orrs	r3, r2
 8009748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	697a      	ldr	r2, [r7, #20]
 800974e:	609a      	str	r2, [r3, #8]
}
 8009750:	bf00      	nop
 8009752:	371c      	adds	r7, #28
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800976c:	2b01      	cmp	r3, #1
 800976e:	d101      	bne.n	8009774 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009770:	2302      	movs	r3, #2
 8009772:	e050      	b.n	8009816 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2202      	movs	r2, #2
 8009780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800979a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a1c      	ldr	r2, [pc, #112]	; (8009824 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d018      	beq.n	80097ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097c0:	d013      	beq.n	80097ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a18      	ldr	r2, [pc, #96]	; (8009828 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d00e      	beq.n	80097ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a16      	ldr	r2, [pc, #88]	; (800982c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d009      	beq.n	80097ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a15      	ldr	r2, [pc, #84]	; (8009830 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d004      	beq.n	80097ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a13      	ldr	r2, [pc, #76]	; (8009834 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d10c      	bne.n	8009804 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3714      	adds	r7, #20
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	40010000 	.word	0x40010000
 8009828:	40000400 	.word	0x40000400
 800982c:	40000800 	.word	0x40000800
 8009830:	40000c00 	.word	0x40000c00
 8009834:	40014000 	.word	0x40014000

08009838 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d101      	bne.n	800984a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e03f      	b.n	80098ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009850:	b2db      	uxtb	r3, r3
 8009852:	2b00      	cmp	r3, #0
 8009854:	d106      	bne.n	8009864 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7fc ffc8 	bl	80067f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2224      	movs	r2, #36	; 0x24
 8009868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68da      	ldr	r2, [r3, #12]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800987a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 fcbf 	bl	800a200 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	691a      	ldr	r2, [r3, #16]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009890:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	695a      	ldr	r2, [r3, #20]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80098a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68da      	ldr	r2, [r3, #12]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2220      	movs	r2, #32
 80098bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2220      	movs	r2, #32
 80098c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80098d2:	b480      	push	{r7}
 80098d4:	b085      	sub	sp, #20
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	60f8      	str	r0, [r7, #12]
 80098da:	60b9      	str	r1, [r7, #8]
 80098dc:	4613      	mov	r3, r2
 80098de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	2b20      	cmp	r3, #32
 80098ea:	d130      	bne.n	800994e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d002      	beq.n	80098f8 <HAL_UART_Transmit_IT+0x26>
 80098f2:	88fb      	ldrh	r3, [r7, #6]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d101      	bne.n	80098fc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	e029      	b.n	8009950 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009902:	2b01      	cmp	r3, #1
 8009904:	d101      	bne.n	800990a <HAL_UART_Transmit_IT+0x38>
 8009906:	2302      	movs	r3, #2
 8009908:	e022      	b.n	8009950 <HAL_UART_Transmit_IT+0x7e>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2201      	movs	r2, #1
 800990e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	88fa      	ldrh	r2, [r7, #6]
 800991c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	88fa      	ldrh	r2, [r7, #6]
 8009922:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2221      	movs	r2, #33	; 0x21
 800992e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	68da      	ldr	r2, [r3, #12]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009948:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800994a:	2300      	movs	r3, #0
 800994c:	e000      	b.n	8009950 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800994e:	2302      	movs	r3, #2
  }
}
 8009950:	4618      	mov	r0, r3
 8009952:	3714      	adds	r7, #20
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b0ba      	sub	sp, #232	; 0xe8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009982:	2300      	movs	r3, #0
 8009984:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009988:	2300      	movs	r3, #0
 800998a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800998e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009992:	f003 030f 	and.w	r3, r3, #15
 8009996:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800999a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d10f      	bne.n	80099c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80099a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099a6:	f003 0320 	and.w	r3, r3, #32
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d009      	beq.n	80099c2 <HAL_UART_IRQHandler+0x66>
 80099ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099b2:	f003 0320 	and.w	r3, r3, #32
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d003      	beq.n	80099c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 fb65 	bl	800a08a <UART_Receive_IT>
      return;
 80099c0:	e256      	b.n	8009e70 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80099c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f000 80de 	beq.w	8009b88 <HAL_UART_IRQHandler+0x22c>
 80099cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099d0:	f003 0301 	and.w	r3, r3, #1
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d106      	bne.n	80099e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80099d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f000 80d1 	beq.w	8009b88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80099e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ea:	f003 0301 	and.w	r3, r3, #1
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00b      	beq.n	8009a0a <HAL_UART_IRQHandler+0xae>
 80099f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d005      	beq.n	8009a0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a02:	f043 0201 	orr.w	r2, r3, #1
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a0e:	f003 0304 	and.w	r3, r3, #4
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00b      	beq.n	8009a2e <HAL_UART_IRQHandler+0xd2>
 8009a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a1a:	f003 0301 	and.w	r3, r3, #1
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d005      	beq.n	8009a2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a26:	f043 0202 	orr.w	r2, r3, #2
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a32:	f003 0302 	and.w	r3, r3, #2
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00b      	beq.n	8009a52 <HAL_UART_IRQHandler+0xf6>
 8009a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a3e:	f003 0301 	and.w	r3, r3, #1
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d005      	beq.n	8009a52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4a:	f043 0204 	orr.w	r2, r3, #4
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a56:	f003 0308 	and.w	r3, r3, #8
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d011      	beq.n	8009a82 <HAL_UART_IRQHandler+0x126>
 8009a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a62:	f003 0320 	and.w	r3, r3, #32
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d105      	bne.n	8009a76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a6e:	f003 0301 	and.w	r3, r3, #1
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d005      	beq.n	8009a82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7a:	f043 0208 	orr.w	r2, r3, #8
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f000 81ed 	beq.w	8009e66 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a90:	f003 0320 	and.w	r3, r3, #32
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d008      	beq.n	8009aaa <HAL_UART_IRQHandler+0x14e>
 8009a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a9c:	f003 0320 	and.w	r3, r3, #32
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d002      	beq.n	8009aaa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 faf0 	bl	800a08a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	695b      	ldr	r3, [r3, #20]
 8009ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ab4:	2b40      	cmp	r3, #64	; 0x40
 8009ab6:	bf0c      	ite	eq
 8009ab8:	2301      	moveq	r3, #1
 8009aba:	2300      	movne	r3, #0
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac6:	f003 0308 	and.w	r3, r3, #8
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d103      	bne.n	8009ad6 <HAL_UART_IRQHandler+0x17a>
 8009ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d04f      	beq.n	8009b76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 f9f8 	bl	8009ecc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	695b      	ldr	r3, [r3, #20]
 8009ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae6:	2b40      	cmp	r3, #64	; 0x40
 8009ae8:	d141      	bne.n	8009b6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	3314      	adds	r3, #20
 8009af0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009af8:	e853 3f00 	ldrex	r3, [r3]
 8009afc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	3314      	adds	r3, #20
 8009b12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009b16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009b22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009b26:	e841 2300 	strex	r3, r2, [r1]
 8009b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1d9      	bne.n	8009aea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d013      	beq.n	8009b66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b42:	4a7d      	ldr	r2, [pc, #500]	; (8009d38 <HAL_UART_IRQHandler+0x3dc>)
 8009b44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7fd fdbd 	bl	80076ca <HAL_DMA_Abort_IT>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d016      	beq.n	8009b84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009b60:	4610      	mov	r0, r2
 8009b62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b64:	e00e      	b.n	8009b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 f99a 	bl	8009ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b6c:	e00a      	b.n	8009b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f996 	bl	8009ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b74:	e006      	b.n	8009b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f992 	bl	8009ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009b82:	e170      	b.n	8009e66 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b84:	bf00      	nop
    return;
 8009b86:	e16e      	b.n	8009e66 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	f040 814a 	bne.w	8009e26 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b96:	f003 0310 	and.w	r3, r3, #16
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f000 8143 	beq.w	8009e26 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ba4:	f003 0310 	and.w	r3, r3, #16
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f000 813c 	beq.w	8009e26 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009bae:	2300      	movs	r3, #0
 8009bb0:	60bb      	str	r3, [r7, #8]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	60bb      	str	r3, [r7, #8]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	60bb      	str	r3, [r7, #8]
 8009bc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	695b      	ldr	r3, [r3, #20]
 8009bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bce:	2b40      	cmp	r3, #64	; 0x40
 8009bd0:	f040 80b4 	bne.w	8009d3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009be0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f000 8140 	beq.w	8009e6a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	f080 8139 	bcs.w	8009e6a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009bfe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c04:	69db      	ldr	r3, [r3, #28]
 8009c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c0a:	f000 8088 	beq.w	8009d1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	330c      	adds	r3, #12
 8009c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c1c:	e853 3f00 	ldrex	r3, [r3]
 8009c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009c24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	330c      	adds	r3, #12
 8009c36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009c3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009c3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009c46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009c4a:	e841 2300 	strex	r3, r2, [r1]
 8009c4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1d9      	bne.n	8009c0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	3314      	adds	r3, #20
 8009c60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c64:	e853 3f00 	ldrex	r3, [r3]
 8009c68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009c6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c6c:	f023 0301 	bic.w	r3, r3, #1
 8009c70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	3314      	adds	r3, #20
 8009c7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009c7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009c82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009c86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009c8a:	e841 2300 	strex	r3, r2, [r1]
 8009c8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1e1      	bne.n	8009c5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	3314      	adds	r3, #20
 8009c9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ca0:	e853 3f00 	ldrex	r3, [r3]
 8009ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	3314      	adds	r3, #20
 8009cb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009cba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009cbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009cc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009cc2:	e841 2300 	strex	r3, r2, [r1]
 8009cc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1e3      	bne.n	8009c96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2220      	movs	r2, #32
 8009cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	330c      	adds	r3, #12
 8009ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ce6:	e853 3f00 	ldrex	r3, [r3]
 8009cea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cee:	f023 0310 	bic.w	r3, r3, #16
 8009cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	330c      	adds	r3, #12
 8009cfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009d00:	65ba      	str	r2, [r7, #88]	; 0x58
 8009d02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d08:	e841 2300 	strex	r3, r2, [r1]
 8009d0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1e3      	bne.n	8009cdc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7fd fc66 	bl	80075ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 f8c0 	bl	8009eb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009d34:	e099      	b.n	8009e6a <HAL_UART_IRQHandler+0x50e>
 8009d36:	bf00      	nop
 8009d38:	08009f93 	.word	0x08009f93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f000 808b 	beq.w	8009e6e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009d58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f000 8086 	beq.w	8009e6e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	330c      	adds	r3, #12
 8009d68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6c:	e853 3f00 	ldrex	r3, [r3]
 8009d70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	330c      	adds	r3, #12
 8009d82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009d86:	647a      	str	r2, [r7, #68]	; 0x44
 8009d88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d8e:	e841 2300 	strex	r3, r2, [r1]
 8009d92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d1e3      	bne.n	8009d62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	3314      	adds	r3, #20
 8009da0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da4:	e853 3f00 	ldrex	r3, [r3]
 8009da8:	623b      	str	r3, [r7, #32]
   return(result);
 8009daa:	6a3b      	ldr	r3, [r7, #32]
 8009dac:	f023 0301 	bic.w	r3, r3, #1
 8009db0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	3314      	adds	r3, #20
 8009dba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009dbe:	633a      	str	r2, [r7, #48]	; 0x30
 8009dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dc6:	e841 2300 	strex	r3, r2, [r1]
 8009dca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1e3      	bne.n	8009d9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2220      	movs	r2, #32
 8009dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	330c      	adds	r3, #12
 8009de6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	e853 3f00 	ldrex	r3, [r3]
 8009dee:	60fb      	str	r3, [r7, #12]
   return(result);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f023 0310 	bic.w	r3, r3, #16
 8009df6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	330c      	adds	r3, #12
 8009e00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009e04:	61fa      	str	r2, [r7, #28]
 8009e06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e08:	69b9      	ldr	r1, [r7, #24]
 8009e0a:	69fa      	ldr	r2, [r7, #28]
 8009e0c:	e841 2300 	strex	r3, r2, [r1]
 8009e10:	617b      	str	r3, [r7, #20]
   return(result);
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d1e3      	bne.n	8009de0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f848 	bl	8009eb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009e24:	e023      	b.n	8009e6e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d009      	beq.n	8009e46 <HAL_UART_IRQHandler+0x4ea>
 8009e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d003      	beq.n	8009e46 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f8bb 	bl	8009fba <UART_Transmit_IT>
    return;
 8009e44:	e014      	b.n	8009e70 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00e      	beq.n	8009e70 <HAL_UART_IRQHandler+0x514>
 8009e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d008      	beq.n	8009e70 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f8fb 	bl	800a05a <UART_EndTransmit_IT>
    return;
 8009e64:	e004      	b.n	8009e70 <HAL_UART_IRQHandler+0x514>
    return;
 8009e66:	bf00      	nop
 8009e68:	e002      	b.n	8009e70 <HAL_UART_IRQHandler+0x514>
      return;
 8009e6a:	bf00      	nop
 8009e6c:	e000      	b.n	8009e70 <HAL_UART_IRQHandler+0x514>
      return;
 8009e6e:	bf00      	nop
  }
}
 8009e70:	37e8      	adds	r7, #232	; 0xe8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop

08009e78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009ea8:	bf00      	nop
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b095      	sub	sp, #84	; 0x54
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	330c      	adds	r3, #12
 8009eda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ede:	e853 3f00 	ldrex	r3, [r3]
 8009ee2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	330c      	adds	r3, #12
 8009ef2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ef4:	643a      	str	r2, [r7, #64]	; 0x40
 8009ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009efa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009efc:	e841 2300 	strex	r3, r2, [r1]
 8009f00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d1e5      	bne.n	8009ed4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	3314      	adds	r3, #20
 8009f0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f10:	6a3b      	ldr	r3, [r7, #32]
 8009f12:	e853 3f00 	ldrex	r3, [r3]
 8009f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	f023 0301 	bic.w	r3, r3, #1
 8009f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3314      	adds	r3, #20
 8009f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f30:	e841 2300 	strex	r3, r2, [r1]
 8009f34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1e5      	bne.n	8009f08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d119      	bne.n	8009f78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	330c      	adds	r3, #12
 8009f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	e853 3f00 	ldrex	r3, [r3]
 8009f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	f023 0310 	bic.w	r3, r3, #16
 8009f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	330c      	adds	r3, #12
 8009f62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f64:	61ba      	str	r2, [r7, #24]
 8009f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f68:	6979      	ldr	r1, [r7, #20]
 8009f6a:	69ba      	ldr	r2, [r7, #24]
 8009f6c:	e841 2300 	strex	r3, r2, [r1]
 8009f70:	613b      	str	r3, [r7, #16]
   return(result);
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d1e5      	bne.n	8009f44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2220      	movs	r2, #32
 8009f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009f86:	bf00      	nop
 8009f88:	3754      	adds	r7, #84	; 0x54
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr

08009f92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b084      	sub	sp, #16
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f7ff ff77 	bl	8009ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fb2:	bf00      	nop
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009fba:	b480      	push	{r7}
 8009fbc:	b085      	sub	sp, #20
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	2b21      	cmp	r3, #33	; 0x21
 8009fcc:	d13e      	bne.n	800a04c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fd6:	d114      	bne.n	800a002 <UART_Transmit_IT+0x48>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d110      	bne.n	800a002 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a1b      	ldr	r3, [r3, #32]
 8009fe4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	881b      	ldrh	r3, [r3, #0]
 8009fea:	461a      	mov	r2, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ff4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6a1b      	ldr	r3, [r3, #32]
 8009ffa:	1c9a      	adds	r2, r3, #2
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	621a      	str	r2, [r3, #32]
 800a000:	e008      	b.n	800a014 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	1c59      	adds	r1, r3, #1
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	6211      	str	r1, [r2, #32]
 800a00c:	781a      	ldrb	r2, [r3, #0]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a018:	b29b      	uxth	r3, r3
 800a01a:	3b01      	subs	r3, #1
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	4619      	mov	r1, r3
 800a022:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10f      	bne.n	800a048 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	68da      	ldr	r2, [r3, #12]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a036:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	68da      	ldr	r2, [r3, #12]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a046:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a048:	2300      	movs	r3, #0
 800a04a:	e000      	b.n	800a04e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a04c:	2302      	movs	r3, #2
  }
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr

0800a05a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b082      	sub	sp, #8
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68da      	ldr	r2, [r3, #12]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a070:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2220      	movs	r2, #32
 800a076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7ff fefc 	bl	8009e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b08c      	sub	sp, #48	; 0x30
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	2b22      	cmp	r3, #34	; 0x22
 800a09c:	f040 80ab 	bne.w	800a1f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0a8:	d117      	bne.n	800a0da <UART_Receive_IT+0x50>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d113      	bne.n	800a0da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0c8:	b29a      	uxth	r2, r3
 800a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d2:	1c9a      	adds	r2, r3, #2
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	629a      	str	r2, [r3, #40]	; 0x28
 800a0d8:	e026      	b.n	800a128 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0ec:	d007      	beq.n	800a0fe <UART_Receive_IT+0x74>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10a      	bne.n	800a10c <UART_Receive_IT+0x82>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d106      	bne.n	800a10c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	b2da      	uxtb	r2, r3
 800a106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a108:	701a      	strb	r2, [r3, #0]
 800a10a:	e008      	b.n	800a11e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	b2db      	uxtb	r3, r3
 800a114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a118:	b2da      	uxtb	r2, r3
 800a11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a122:	1c5a      	adds	r2, r3, #1
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	3b01      	subs	r3, #1
 800a130:	b29b      	uxth	r3, r3
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	4619      	mov	r1, r3
 800a136:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d15a      	bne.n	800a1f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	68da      	ldr	r2, [r3, #12]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f022 0220 	bic.w	r2, r2, #32
 800a14a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68da      	ldr	r2, [r3, #12]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a15a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	695a      	ldr	r2, [r3, #20]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f022 0201 	bic.w	r2, r2, #1
 800a16a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2220      	movs	r2, #32
 800a170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d135      	bne.n	800a1e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	330c      	adds	r3, #12
 800a188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	e853 3f00 	ldrex	r3, [r3]
 800a190:	613b      	str	r3, [r7, #16]
   return(result);
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	f023 0310 	bic.w	r3, r3, #16
 800a198:	627b      	str	r3, [r7, #36]	; 0x24
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	330c      	adds	r3, #12
 800a1a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1a2:	623a      	str	r2, [r7, #32]
 800a1a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a6:	69f9      	ldr	r1, [r7, #28]
 800a1a8:	6a3a      	ldr	r2, [r7, #32]
 800a1aa:	e841 2300 	strex	r3, r2, [r1]
 800a1ae:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1e5      	bne.n	800a182 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 0310 	and.w	r3, r3, #16
 800a1c0:	2b10      	cmp	r3, #16
 800a1c2:	d10a      	bne.n	800a1da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	60fb      	str	r3, [r7, #12]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	60fb      	str	r3, [r7, #12]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	60fb      	str	r3, [r7, #12]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a1de:	4619      	mov	r1, r3
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f7ff fe67 	bl	8009eb4 <HAL_UARTEx_RxEventCallback>
 800a1e6:	e002      	b.n	800a1ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f7ff fe4f 	bl	8009e8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	e002      	b.n	800a1f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	e000      	b.n	800a1f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a1f6:	2302      	movs	r3, #2
  }
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3730      	adds	r7, #48	; 0x30
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a204:	b0c0      	sub	sp, #256	; 0x100
 800a206:	af00      	add	r7, sp, #0
 800a208:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a20c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a21c:	68d9      	ldr	r1, [r3, #12]
 800a21e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	ea40 0301 	orr.w	r3, r0, r1
 800a228:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a22a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a22e:	689a      	ldr	r2, [r3, #8]
 800a230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	431a      	orrs	r2, r3
 800a238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a23c:	695b      	ldr	r3, [r3, #20]
 800a23e:	431a      	orrs	r2, r3
 800a240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a244:	69db      	ldr	r3, [r3, #28]
 800a246:	4313      	orrs	r3, r2
 800a248:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a24c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a258:	f021 010c 	bic.w	r1, r1, #12
 800a25c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a266:	430b      	orrs	r3, r1
 800a268:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a26a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	695b      	ldr	r3, [r3, #20]
 800a272:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a27a:	6999      	ldr	r1, [r3, #24]
 800a27c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	ea40 0301 	orr.w	r3, r0, r1
 800a286:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	4b8f      	ldr	r3, [pc, #572]	; (800a4cc <UART_SetConfig+0x2cc>)
 800a290:	429a      	cmp	r2, r3
 800a292:	d005      	beq.n	800a2a0 <UART_SetConfig+0xa0>
 800a294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	4b8d      	ldr	r3, [pc, #564]	; (800a4d0 <UART_SetConfig+0x2d0>)
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d104      	bne.n	800a2aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a2a0:	f7fe ffbc 	bl	800921c <HAL_RCC_GetPCLK2Freq>
 800a2a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a2a8:	e003      	b.n	800a2b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a2aa:	f7fe ffa3 	bl	80091f4 <HAL_RCC_GetPCLK1Freq>
 800a2ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2b6:	69db      	ldr	r3, [r3, #28]
 800a2b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2bc:	f040 810c 	bne.w	800a4d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a2c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a2ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a2ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a2d2:	4622      	mov	r2, r4
 800a2d4:	462b      	mov	r3, r5
 800a2d6:	1891      	adds	r1, r2, r2
 800a2d8:	65b9      	str	r1, [r7, #88]	; 0x58
 800a2da:	415b      	adcs	r3, r3
 800a2dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	eb12 0801 	adds.w	r8, r2, r1
 800a2e8:	4629      	mov	r1, r5
 800a2ea:	eb43 0901 	adc.w	r9, r3, r1
 800a2ee:	f04f 0200 	mov.w	r2, #0
 800a2f2:	f04f 0300 	mov.w	r3, #0
 800a2f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a2fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a2fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a302:	4690      	mov	r8, r2
 800a304:	4699      	mov	r9, r3
 800a306:	4623      	mov	r3, r4
 800a308:	eb18 0303 	adds.w	r3, r8, r3
 800a30c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a310:	462b      	mov	r3, r5
 800a312:	eb49 0303 	adc.w	r3, r9, r3
 800a316:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a31a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a326:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a32a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a32e:	460b      	mov	r3, r1
 800a330:	18db      	adds	r3, r3, r3
 800a332:	653b      	str	r3, [r7, #80]	; 0x50
 800a334:	4613      	mov	r3, r2
 800a336:	eb42 0303 	adc.w	r3, r2, r3
 800a33a:	657b      	str	r3, [r7, #84]	; 0x54
 800a33c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a340:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a344:	f7f6 fc88 	bl	8000c58 <__aeabi_uldivmod>
 800a348:	4602      	mov	r2, r0
 800a34a:	460b      	mov	r3, r1
 800a34c:	4b61      	ldr	r3, [pc, #388]	; (800a4d4 <UART_SetConfig+0x2d4>)
 800a34e:	fba3 2302 	umull	r2, r3, r3, r2
 800a352:	095b      	lsrs	r3, r3, #5
 800a354:	011c      	lsls	r4, r3, #4
 800a356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a35a:	2200      	movs	r2, #0
 800a35c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a360:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a364:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a368:	4642      	mov	r2, r8
 800a36a:	464b      	mov	r3, r9
 800a36c:	1891      	adds	r1, r2, r2
 800a36e:	64b9      	str	r1, [r7, #72]	; 0x48
 800a370:	415b      	adcs	r3, r3
 800a372:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a374:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a378:	4641      	mov	r1, r8
 800a37a:	eb12 0a01 	adds.w	sl, r2, r1
 800a37e:	4649      	mov	r1, r9
 800a380:	eb43 0b01 	adc.w	fp, r3, r1
 800a384:	f04f 0200 	mov.w	r2, #0
 800a388:	f04f 0300 	mov.w	r3, #0
 800a38c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a390:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a394:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a398:	4692      	mov	sl, r2
 800a39a:	469b      	mov	fp, r3
 800a39c:	4643      	mov	r3, r8
 800a39e:	eb1a 0303 	adds.w	r3, sl, r3
 800a3a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a3a6:	464b      	mov	r3, r9
 800a3a8:	eb4b 0303 	adc.w	r3, fp, r3
 800a3ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a3b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a3bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a3c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	18db      	adds	r3, r3, r3
 800a3c8:	643b      	str	r3, [r7, #64]	; 0x40
 800a3ca:	4613      	mov	r3, r2
 800a3cc:	eb42 0303 	adc.w	r3, r2, r3
 800a3d0:	647b      	str	r3, [r7, #68]	; 0x44
 800a3d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a3d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a3da:	f7f6 fc3d 	bl	8000c58 <__aeabi_uldivmod>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	4611      	mov	r1, r2
 800a3e4:	4b3b      	ldr	r3, [pc, #236]	; (800a4d4 <UART_SetConfig+0x2d4>)
 800a3e6:	fba3 2301 	umull	r2, r3, r3, r1
 800a3ea:	095b      	lsrs	r3, r3, #5
 800a3ec:	2264      	movs	r2, #100	; 0x64
 800a3ee:	fb02 f303 	mul.w	r3, r2, r3
 800a3f2:	1acb      	subs	r3, r1, r3
 800a3f4:	00db      	lsls	r3, r3, #3
 800a3f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a3fa:	4b36      	ldr	r3, [pc, #216]	; (800a4d4 <UART_SetConfig+0x2d4>)
 800a3fc:	fba3 2302 	umull	r2, r3, r3, r2
 800a400:	095b      	lsrs	r3, r3, #5
 800a402:	005b      	lsls	r3, r3, #1
 800a404:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a408:	441c      	add	r4, r3
 800a40a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a40e:	2200      	movs	r2, #0
 800a410:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a414:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a418:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a41c:	4642      	mov	r2, r8
 800a41e:	464b      	mov	r3, r9
 800a420:	1891      	adds	r1, r2, r2
 800a422:	63b9      	str	r1, [r7, #56]	; 0x38
 800a424:	415b      	adcs	r3, r3
 800a426:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a428:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a42c:	4641      	mov	r1, r8
 800a42e:	1851      	adds	r1, r2, r1
 800a430:	6339      	str	r1, [r7, #48]	; 0x30
 800a432:	4649      	mov	r1, r9
 800a434:	414b      	adcs	r3, r1
 800a436:	637b      	str	r3, [r7, #52]	; 0x34
 800a438:	f04f 0200 	mov.w	r2, #0
 800a43c:	f04f 0300 	mov.w	r3, #0
 800a440:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a444:	4659      	mov	r1, fp
 800a446:	00cb      	lsls	r3, r1, #3
 800a448:	4651      	mov	r1, sl
 800a44a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a44e:	4651      	mov	r1, sl
 800a450:	00ca      	lsls	r2, r1, #3
 800a452:	4610      	mov	r0, r2
 800a454:	4619      	mov	r1, r3
 800a456:	4603      	mov	r3, r0
 800a458:	4642      	mov	r2, r8
 800a45a:	189b      	adds	r3, r3, r2
 800a45c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a460:	464b      	mov	r3, r9
 800a462:	460a      	mov	r2, r1
 800a464:	eb42 0303 	adc.w	r3, r2, r3
 800a468:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a46c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a478:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a47c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a480:	460b      	mov	r3, r1
 800a482:	18db      	adds	r3, r3, r3
 800a484:	62bb      	str	r3, [r7, #40]	; 0x28
 800a486:	4613      	mov	r3, r2
 800a488:	eb42 0303 	adc.w	r3, r2, r3
 800a48c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a48e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a492:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a496:	f7f6 fbdf 	bl	8000c58 <__aeabi_uldivmod>
 800a49a:	4602      	mov	r2, r0
 800a49c:	460b      	mov	r3, r1
 800a49e:	4b0d      	ldr	r3, [pc, #52]	; (800a4d4 <UART_SetConfig+0x2d4>)
 800a4a0:	fba3 1302 	umull	r1, r3, r3, r2
 800a4a4:	095b      	lsrs	r3, r3, #5
 800a4a6:	2164      	movs	r1, #100	; 0x64
 800a4a8:	fb01 f303 	mul.w	r3, r1, r3
 800a4ac:	1ad3      	subs	r3, r2, r3
 800a4ae:	00db      	lsls	r3, r3, #3
 800a4b0:	3332      	adds	r3, #50	; 0x32
 800a4b2:	4a08      	ldr	r2, [pc, #32]	; (800a4d4 <UART_SetConfig+0x2d4>)
 800a4b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a4b8:	095b      	lsrs	r3, r3, #5
 800a4ba:	f003 0207 	and.w	r2, r3, #7
 800a4be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4422      	add	r2, r4
 800a4c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a4c8:	e106      	b.n	800a6d8 <UART_SetConfig+0x4d8>
 800a4ca:	bf00      	nop
 800a4cc:	40011000 	.word	0x40011000
 800a4d0:	40011400 	.word	0x40011400
 800a4d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a4d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a4e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a4e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a4ea:	4642      	mov	r2, r8
 800a4ec:	464b      	mov	r3, r9
 800a4ee:	1891      	adds	r1, r2, r2
 800a4f0:	6239      	str	r1, [r7, #32]
 800a4f2:	415b      	adcs	r3, r3
 800a4f4:	627b      	str	r3, [r7, #36]	; 0x24
 800a4f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a4fa:	4641      	mov	r1, r8
 800a4fc:	1854      	adds	r4, r2, r1
 800a4fe:	4649      	mov	r1, r9
 800a500:	eb43 0501 	adc.w	r5, r3, r1
 800a504:	f04f 0200 	mov.w	r2, #0
 800a508:	f04f 0300 	mov.w	r3, #0
 800a50c:	00eb      	lsls	r3, r5, #3
 800a50e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a512:	00e2      	lsls	r2, r4, #3
 800a514:	4614      	mov	r4, r2
 800a516:	461d      	mov	r5, r3
 800a518:	4643      	mov	r3, r8
 800a51a:	18e3      	adds	r3, r4, r3
 800a51c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a520:	464b      	mov	r3, r9
 800a522:	eb45 0303 	adc.w	r3, r5, r3
 800a526:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a52a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a536:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a53a:	f04f 0200 	mov.w	r2, #0
 800a53e:	f04f 0300 	mov.w	r3, #0
 800a542:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a546:	4629      	mov	r1, r5
 800a548:	008b      	lsls	r3, r1, #2
 800a54a:	4621      	mov	r1, r4
 800a54c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a550:	4621      	mov	r1, r4
 800a552:	008a      	lsls	r2, r1, #2
 800a554:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a558:	f7f6 fb7e 	bl	8000c58 <__aeabi_uldivmod>
 800a55c:	4602      	mov	r2, r0
 800a55e:	460b      	mov	r3, r1
 800a560:	4b60      	ldr	r3, [pc, #384]	; (800a6e4 <UART_SetConfig+0x4e4>)
 800a562:	fba3 2302 	umull	r2, r3, r3, r2
 800a566:	095b      	lsrs	r3, r3, #5
 800a568:	011c      	lsls	r4, r3, #4
 800a56a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a56e:	2200      	movs	r2, #0
 800a570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a574:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a578:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a57c:	4642      	mov	r2, r8
 800a57e:	464b      	mov	r3, r9
 800a580:	1891      	adds	r1, r2, r2
 800a582:	61b9      	str	r1, [r7, #24]
 800a584:	415b      	adcs	r3, r3
 800a586:	61fb      	str	r3, [r7, #28]
 800a588:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a58c:	4641      	mov	r1, r8
 800a58e:	1851      	adds	r1, r2, r1
 800a590:	6139      	str	r1, [r7, #16]
 800a592:	4649      	mov	r1, r9
 800a594:	414b      	adcs	r3, r1
 800a596:	617b      	str	r3, [r7, #20]
 800a598:	f04f 0200 	mov.w	r2, #0
 800a59c:	f04f 0300 	mov.w	r3, #0
 800a5a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a5a4:	4659      	mov	r1, fp
 800a5a6:	00cb      	lsls	r3, r1, #3
 800a5a8:	4651      	mov	r1, sl
 800a5aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a5ae:	4651      	mov	r1, sl
 800a5b0:	00ca      	lsls	r2, r1, #3
 800a5b2:	4610      	mov	r0, r2
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	4642      	mov	r2, r8
 800a5ba:	189b      	adds	r3, r3, r2
 800a5bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a5c0:	464b      	mov	r3, r9
 800a5c2:	460a      	mov	r2, r1
 800a5c4:	eb42 0303 	adc.w	r3, r2, r3
 800a5c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a5cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a5d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a5d8:	f04f 0200 	mov.w	r2, #0
 800a5dc:	f04f 0300 	mov.w	r3, #0
 800a5e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a5e4:	4649      	mov	r1, r9
 800a5e6:	008b      	lsls	r3, r1, #2
 800a5e8:	4641      	mov	r1, r8
 800a5ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5ee:	4641      	mov	r1, r8
 800a5f0:	008a      	lsls	r2, r1, #2
 800a5f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a5f6:	f7f6 fb2f 	bl	8000c58 <__aeabi_uldivmod>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	4611      	mov	r1, r2
 800a600:	4b38      	ldr	r3, [pc, #224]	; (800a6e4 <UART_SetConfig+0x4e4>)
 800a602:	fba3 2301 	umull	r2, r3, r3, r1
 800a606:	095b      	lsrs	r3, r3, #5
 800a608:	2264      	movs	r2, #100	; 0x64
 800a60a:	fb02 f303 	mul.w	r3, r2, r3
 800a60e:	1acb      	subs	r3, r1, r3
 800a610:	011b      	lsls	r3, r3, #4
 800a612:	3332      	adds	r3, #50	; 0x32
 800a614:	4a33      	ldr	r2, [pc, #204]	; (800a6e4 <UART_SetConfig+0x4e4>)
 800a616:	fba2 2303 	umull	r2, r3, r2, r3
 800a61a:	095b      	lsrs	r3, r3, #5
 800a61c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a620:	441c      	add	r4, r3
 800a622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a626:	2200      	movs	r2, #0
 800a628:	673b      	str	r3, [r7, #112]	; 0x70
 800a62a:	677a      	str	r2, [r7, #116]	; 0x74
 800a62c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a630:	4642      	mov	r2, r8
 800a632:	464b      	mov	r3, r9
 800a634:	1891      	adds	r1, r2, r2
 800a636:	60b9      	str	r1, [r7, #8]
 800a638:	415b      	adcs	r3, r3
 800a63a:	60fb      	str	r3, [r7, #12]
 800a63c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a640:	4641      	mov	r1, r8
 800a642:	1851      	adds	r1, r2, r1
 800a644:	6039      	str	r1, [r7, #0]
 800a646:	4649      	mov	r1, r9
 800a648:	414b      	adcs	r3, r1
 800a64a:	607b      	str	r3, [r7, #4]
 800a64c:	f04f 0200 	mov.w	r2, #0
 800a650:	f04f 0300 	mov.w	r3, #0
 800a654:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a658:	4659      	mov	r1, fp
 800a65a:	00cb      	lsls	r3, r1, #3
 800a65c:	4651      	mov	r1, sl
 800a65e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a662:	4651      	mov	r1, sl
 800a664:	00ca      	lsls	r2, r1, #3
 800a666:	4610      	mov	r0, r2
 800a668:	4619      	mov	r1, r3
 800a66a:	4603      	mov	r3, r0
 800a66c:	4642      	mov	r2, r8
 800a66e:	189b      	adds	r3, r3, r2
 800a670:	66bb      	str	r3, [r7, #104]	; 0x68
 800a672:	464b      	mov	r3, r9
 800a674:	460a      	mov	r2, r1
 800a676:	eb42 0303 	adc.w	r3, r2, r3
 800a67a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a67c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	663b      	str	r3, [r7, #96]	; 0x60
 800a686:	667a      	str	r2, [r7, #100]	; 0x64
 800a688:	f04f 0200 	mov.w	r2, #0
 800a68c:	f04f 0300 	mov.w	r3, #0
 800a690:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a694:	4649      	mov	r1, r9
 800a696:	008b      	lsls	r3, r1, #2
 800a698:	4641      	mov	r1, r8
 800a69a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a69e:	4641      	mov	r1, r8
 800a6a0:	008a      	lsls	r2, r1, #2
 800a6a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a6a6:	f7f6 fad7 	bl	8000c58 <__aeabi_uldivmod>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	4b0d      	ldr	r3, [pc, #52]	; (800a6e4 <UART_SetConfig+0x4e4>)
 800a6b0:	fba3 1302 	umull	r1, r3, r3, r2
 800a6b4:	095b      	lsrs	r3, r3, #5
 800a6b6:	2164      	movs	r1, #100	; 0x64
 800a6b8:	fb01 f303 	mul.w	r3, r1, r3
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	011b      	lsls	r3, r3, #4
 800a6c0:	3332      	adds	r3, #50	; 0x32
 800a6c2:	4a08      	ldr	r2, [pc, #32]	; (800a6e4 <UART_SetConfig+0x4e4>)
 800a6c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a6c8:	095b      	lsrs	r3, r3, #5
 800a6ca:	f003 020f 	and.w	r2, r3, #15
 800a6ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4422      	add	r2, r4
 800a6d6:	609a      	str	r2, [r3, #8]
}
 800a6d8:	bf00      	nop
 800a6da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6e4:	51eb851f 	.word	0x51eb851f

0800a6e8 <atoi>:
 800a6e8:	220a      	movs	r2, #10
 800a6ea:	2100      	movs	r1, #0
 800a6ec:	f000 b93e 	b.w	800a96c <strtol>

0800a6f0 <malloc>:
 800a6f0:	4b02      	ldr	r3, [pc, #8]	; (800a6fc <malloc+0xc>)
 800a6f2:	4601      	mov	r1, r0
 800a6f4:	6818      	ldr	r0, [r3, #0]
 800a6f6:	f000 b82b 	b.w	800a750 <_malloc_r>
 800a6fa:	bf00      	nop
 800a6fc:	200012cc 	.word	0x200012cc

0800a700 <free>:
 800a700:	4b02      	ldr	r3, [pc, #8]	; (800a70c <free+0xc>)
 800a702:	4601      	mov	r1, r0
 800a704:	6818      	ldr	r0, [r3, #0]
 800a706:	f001 be61 	b.w	800c3cc <_free_r>
 800a70a:	bf00      	nop
 800a70c:	200012cc 	.word	0x200012cc

0800a710 <sbrk_aligned>:
 800a710:	b570      	push	{r4, r5, r6, lr}
 800a712:	4e0e      	ldr	r6, [pc, #56]	; (800a74c <sbrk_aligned+0x3c>)
 800a714:	460c      	mov	r4, r1
 800a716:	6831      	ldr	r1, [r6, #0]
 800a718:	4605      	mov	r5, r0
 800a71a:	b911      	cbnz	r1, 800a722 <sbrk_aligned+0x12>
 800a71c:	f000 ff58 	bl	800b5d0 <_sbrk_r>
 800a720:	6030      	str	r0, [r6, #0]
 800a722:	4621      	mov	r1, r4
 800a724:	4628      	mov	r0, r5
 800a726:	f000 ff53 	bl	800b5d0 <_sbrk_r>
 800a72a:	1c43      	adds	r3, r0, #1
 800a72c:	d00a      	beq.n	800a744 <sbrk_aligned+0x34>
 800a72e:	1cc4      	adds	r4, r0, #3
 800a730:	f024 0403 	bic.w	r4, r4, #3
 800a734:	42a0      	cmp	r0, r4
 800a736:	d007      	beq.n	800a748 <sbrk_aligned+0x38>
 800a738:	1a21      	subs	r1, r4, r0
 800a73a:	4628      	mov	r0, r5
 800a73c:	f000 ff48 	bl	800b5d0 <_sbrk_r>
 800a740:	3001      	adds	r0, #1
 800a742:	d101      	bne.n	800a748 <sbrk_aligned+0x38>
 800a744:	f04f 34ff 	mov.w	r4, #4294967295
 800a748:	4620      	mov	r0, r4
 800a74a:	bd70      	pop	{r4, r5, r6, pc}
 800a74c:	200015f4 	.word	0x200015f4

0800a750 <_malloc_r>:
 800a750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a754:	1ccd      	adds	r5, r1, #3
 800a756:	f025 0503 	bic.w	r5, r5, #3
 800a75a:	3508      	adds	r5, #8
 800a75c:	2d0c      	cmp	r5, #12
 800a75e:	bf38      	it	cc
 800a760:	250c      	movcc	r5, #12
 800a762:	2d00      	cmp	r5, #0
 800a764:	4607      	mov	r7, r0
 800a766:	db01      	blt.n	800a76c <_malloc_r+0x1c>
 800a768:	42a9      	cmp	r1, r5
 800a76a:	d905      	bls.n	800a778 <_malloc_r+0x28>
 800a76c:	230c      	movs	r3, #12
 800a76e:	603b      	str	r3, [r7, #0]
 800a770:	2600      	movs	r6, #0
 800a772:	4630      	mov	r0, r6
 800a774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a778:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a84c <_malloc_r+0xfc>
 800a77c:	f000 f868 	bl	800a850 <__malloc_lock>
 800a780:	f8d8 3000 	ldr.w	r3, [r8]
 800a784:	461c      	mov	r4, r3
 800a786:	bb5c      	cbnz	r4, 800a7e0 <_malloc_r+0x90>
 800a788:	4629      	mov	r1, r5
 800a78a:	4638      	mov	r0, r7
 800a78c:	f7ff ffc0 	bl	800a710 <sbrk_aligned>
 800a790:	1c43      	adds	r3, r0, #1
 800a792:	4604      	mov	r4, r0
 800a794:	d155      	bne.n	800a842 <_malloc_r+0xf2>
 800a796:	f8d8 4000 	ldr.w	r4, [r8]
 800a79a:	4626      	mov	r6, r4
 800a79c:	2e00      	cmp	r6, #0
 800a79e:	d145      	bne.n	800a82c <_malloc_r+0xdc>
 800a7a0:	2c00      	cmp	r4, #0
 800a7a2:	d048      	beq.n	800a836 <_malloc_r+0xe6>
 800a7a4:	6823      	ldr	r3, [r4, #0]
 800a7a6:	4631      	mov	r1, r6
 800a7a8:	4638      	mov	r0, r7
 800a7aa:	eb04 0903 	add.w	r9, r4, r3
 800a7ae:	f000 ff0f 	bl	800b5d0 <_sbrk_r>
 800a7b2:	4581      	cmp	r9, r0
 800a7b4:	d13f      	bne.n	800a836 <_malloc_r+0xe6>
 800a7b6:	6821      	ldr	r1, [r4, #0]
 800a7b8:	1a6d      	subs	r5, r5, r1
 800a7ba:	4629      	mov	r1, r5
 800a7bc:	4638      	mov	r0, r7
 800a7be:	f7ff ffa7 	bl	800a710 <sbrk_aligned>
 800a7c2:	3001      	adds	r0, #1
 800a7c4:	d037      	beq.n	800a836 <_malloc_r+0xe6>
 800a7c6:	6823      	ldr	r3, [r4, #0]
 800a7c8:	442b      	add	r3, r5
 800a7ca:	6023      	str	r3, [r4, #0]
 800a7cc:	f8d8 3000 	ldr.w	r3, [r8]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d038      	beq.n	800a846 <_malloc_r+0xf6>
 800a7d4:	685a      	ldr	r2, [r3, #4]
 800a7d6:	42a2      	cmp	r2, r4
 800a7d8:	d12b      	bne.n	800a832 <_malloc_r+0xe2>
 800a7da:	2200      	movs	r2, #0
 800a7dc:	605a      	str	r2, [r3, #4]
 800a7de:	e00f      	b.n	800a800 <_malloc_r+0xb0>
 800a7e0:	6822      	ldr	r2, [r4, #0]
 800a7e2:	1b52      	subs	r2, r2, r5
 800a7e4:	d41f      	bmi.n	800a826 <_malloc_r+0xd6>
 800a7e6:	2a0b      	cmp	r2, #11
 800a7e8:	d917      	bls.n	800a81a <_malloc_r+0xca>
 800a7ea:	1961      	adds	r1, r4, r5
 800a7ec:	42a3      	cmp	r3, r4
 800a7ee:	6025      	str	r5, [r4, #0]
 800a7f0:	bf18      	it	ne
 800a7f2:	6059      	strne	r1, [r3, #4]
 800a7f4:	6863      	ldr	r3, [r4, #4]
 800a7f6:	bf08      	it	eq
 800a7f8:	f8c8 1000 	streq.w	r1, [r8]
 800a7fc:	5162      	str	r2, [r4, r5]
 800a7fe:	604b      	str	r3, [r1, #4]
 800a800:	4638      	mov	r0, r7
 800a802:	f104 060b 	add.w	r6, r4, #11
 800a806:	f000 f829 	bl	800a85c <__malloc_unlock>
 800a80a:	f026 0607 	bic.w	r6, r6, #7
 800a80e:	1d23      	adds	r3, r4, #4
 800a810:	1af2      	subs	r2, r6, r3
 800a812:	d0ae      	beq.n	800a772 <_malloc_r+0x22>
 800a814:	1b9b      	subs	r3, r3, r6
 800a816:	50a3      	str	r3, [r4, r2]
 800a818:	e7ab      	b.n	800a772 <_malloc_r+0x22>
 800a81a:	42a3      	cmp	r3, r4
 800a81c:	6862      	ldr	r2, [r4, #4]
 800a81e:	d1dd      	bne.n	800a7dc <_malloc_r+0x8c>
 800a820:	f8c8 2000 	str.w	r2, [r8]
 800a824:	e7ec      	b.n	800a800 <_malloc_r+0xb0>
 800a826:	4623      	mov	r3, r4
 800a828:	6864      	ldr	r4, [r4, #4]
 800a82a:	e7ac      	b.n	800a786 <_malloc_r+0x36>
 800a82c:	4634      	mov	r4, r6
 800a82e:	6876      	ldr	r6, [r6, #4]
 800a830:	e7b4      	b.n	800a79c <_malloc_r+0x4c>
 800a832:	4613      	mov	r3, r2
 800a834:	e7cc      	b.n	800a7d0 <_malloc_r+0x80>
 800a836:	230c      	movs	r3, #12
 800a838:	603b      	str	r3, [r7, #0]
 800a83a:	4638      	mov	r0, r7
 800a83c:	f000 f80e 	bl	800a85c <__malloc_unlock>
 800a840:	e797      	b.n	800a772 <_malloc_r+0x22>
 800a842:	6025      	str	r5, [r4, #0]
 800a844:	e7dc      	b.n	800a800 <_malloc_r+0xb0>
 800a846:	605b      	str	r3, [r3, #4]
 800a848:	deff      	udf	#255	; 0xff
 800a84a:	bf00      	nop
 800a84c:	200015f0 	.word	0x200015f0

0800a850 <__malloc_lock>:
 800a850:	4801      	ldr	r0, [pc, #4]	; (800a858 <__malloc_lock+0x8>)
 800a852:	f000 bf09 	b.w	800b668 <__retarget_lock_acquire_recursive>
 800a856:	bf00      	nop
 800a858:	20001738 	.word	0x20001738

0800a85c <__malloc_unlock>:
 800a85c:	4801      	ldr	r0, [pc, #4]	; (800a864 <__malloc_unlock+0x8>)
 800a85e:	f000 bf04 	b.w	800b66a <__retarget_lock_release_recursive>
 800a862:	bf00      	nop
 800a864:	20001738 	.word	0x20001738

0800a868 <_strtol_l.constprop.0>:
 800a868:	2b01      	cmp	r3, #1
 800a86a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a86e:	d001      	beq.n	800a874 <_strtol_l.constprop.0+0xc>
 800a870:	2b24      	cmp	r3, #36	; 0x24
 800a872:	d906      	bls.n	800a882 <_strtol_l.constprop.0+0x1a>
 800a874:	f000 fece 	bl	800b614 <__errno>
 800a878:	2316      	movs	r3, #22
 800a87a:	6003      	str	r3, [r0, #0]
 800a87c:	2000      	movs	r0, #0
 800a87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a882:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a968 <_strtol_l.constprop.0+0x100>
 800a886:	460d      	mov	r5, r1
 800a888:	462e      	mov	r6, r5
 800a88a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a88e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a892:	f017 0708 	ands.w	r7, r7, #8
 800a896:	d1f7      	bne.n	800a888 <_strtol_l.constprop.0+0x20>
 800a898:	2c2d      	cmp	r4, #45	; 0x2d
 800a89a:	d132      	bne.n	800a902 <_strtol_l.constprop.0+0x9a>
 800a89c:	782c      	ldrb	r4, [r5, #0]
 800a89e:	2701      	movs	r7, #1
 800a8a0:	1cb5      	adds	r5, r6, #2
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d05b      	beq.n	800a95e <_strtol_l.constprop.0+0xf6>
 800a8a6:	2b10      	cmp	r3, #16
 800a8a8:	d109      	bne.n	800a8be <_strtol_l.constprop.0+0x56>
 800a8aa:	2c30      	cmp	r4, #48	; 0x30
 800a8ac:	d107      	bne.n	800a8be <_strtol_l.constprop.0+0x56>
 800a8ae:	782c      	ldrb	r4, [r5, #0]
 800a8b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a8b4:	2c58      	cmp	r4, #88	; 0x58
 800a8b6:	d14d      	bne.n	800a954 <_strtol_l.constprop.0+0xec>
 800a8b8:	786c      	ldrb	r4, [r5, #1]
 800a8ba:	2310      	movs	r3, #16
 800a8bc:	3502      	adds	r5, #2
 800a8be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a8c2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a8c6:	f04f 0e00 	mov.w	lr, #0
 800a8ca:	fbb8 f9f3 	udiv	r9, r8, r3
 800a8ce:	4676      	mov	r6, lr
 800a8d0:	fb03 8a19 	mls	sl, r3, r9, r8
 800a8d4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a8d8:	f1bc 0f09 	cmp.w	ip, #9
 800a8dc:	d816      	bhi.n	800a90c <_strtol_l.constprop.0+0xa4>
 800a8de:	4664      	mov	r4, ip
 800a8e0:	42a3      	cmp	r3, r4
 800a8e2:	dd24      	ble.n	800a92e <_strtol_l.constprop.0+0xc6>
 800a8e4:	f1be 3fff 	cmp.w	lr, #4294967295
 800a8e8:	d008      	beq.n	800a8fc <_strtol_l.constprop.0+0x94>
 800a8ea:	45b1      	cmp	r9, r6
 800a8ec:	d31c      	bcc.n	800a928 <_strtol_l.constprop.0+0xc0>
 800a8ee:	d101      	bne.n	800a8f4 <_strtol_l.constprop.0+0x8c>
 800a8f0:	45a2      	cmp	sl, r4
 800a8f2:	db19      	blt.n	800a928 <_strtol_l.constprop.0+0xc0>
 800a8f4:	fb06 4603 	mla	r6, r6, r3, r4
 800a8f8:	f04f 0e01 	mov.w	lr, #1
 800a8fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a900:	e7e8      	b.n	800a8d4 <_strtol_l.constprop.0+0x6c>
 800a902:	2c2b      	cmp	r4, #43	; 0x2b
 800a904:	bf04      	itt	eq
 800a906:	782c      	ldrbeq	r4, [r5, #0]
 800a908:	1cb5      	addeq	r5, r6, #2
 800a90a:	e7ca      	b.n	800a8a2 <_strtol_l.constprop.0+0x3a>
 800a90c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a910:	f1bc 0f19 	cmp.w	ip, #25
 800a914:	d801      	bhi.n	800a91a <_strtol_l.constprop.0+0xb2>
 800a916:	3c37      	subs	r4, #55	; 0x37
 800a918:	e7e2      	b.n	800a8e0 <_strtol_l.constprop.0+0x78>
 800a91a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a91e:	f1bc 0f19 	cmp.w	ip, #25
 800a922:	d804      	bhi.n	800a92e <_strtol_l.constprop.0+0xc6>
 800a924:	3c57      	subs	r4, #87	; 0x57
 800a926:	e7db      	b.n	800a8e0 <_strtol_l.constprop.0+0x78>
 800a928:	f04f 3eff 	mov.w	lr, #4294967295
 800a92c:	e7e6      	b.n	800a8fc <_strtol_l.constprop.0+0x94>
 800a92e:	f1be 3fff 	cmp.w	lr, #4294967295
 800a932:	d105      	bne.n	800a940 <_strtol_l.constprop.0+0xd8>
 800a934:	2322      	movs	r3, #34	; 0x22
 800a936:	6003      	str	r3, [r0, #0]
 800a938:	4646      	mov	r6, r8
 800a93a:	b942      	cbnz	r2, 800a94e <_strtol_l.constprop.0+0xe6>
 800a93c:	4630      	mov	r0, r6
 800a93e:	e79e      	b.n	800a87e <_strtol_l.constprop.0+0x16>
 800a940:	b107      	cbz	r7, 800a944 <_strtol_l.constprop.0+0xdc>
 800a942:	4276      	negs	r6, r6
 800a944:	2a00      	cmp	r2, #0
 800a946:	d0f9      	beq.n	800a93c <_strtol_l.constprop.0+0xd4>
 800a948:	f1be 0f00 	cmp.w	lr, #0
 800a94c:	d000      	beq.n	800a950 <_strtol_l.constprop.0+0xe8>
 800a94e:	1e69      	subs	r1, r5, #1
 800a950:	6011      	str	r1, [r2, #0]
 800a952:	e7f3      	b.n	800a93c <_strtol_l.constprop.0+0xd4>
 800a954:	2430      	movs	r4, #48	; 0x30
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1b1      	bne.n	800a8be <_strtol_l.constprop.0+0x56>
 800a95a:	2308      	movs	r3, #8
 800a95c:	e7af      	b.n	800a8be <_strtol_l.constprop.0+0x56>
 800a95e:	2c30      	cmp	r4, #48	; 0x30
 800a960:	d0a5      	beq.n	800a8ae <_strtol_l.constprop.0+0x46>
 800a962:	230a      	movs	r3, #10
 800a964:	e7ab      	b.n	800a8be <_strtol_l.constprop.0+0x56>
 800a966:	bf00      	nop
 800a968:	08010ff9 	.word	0x08010ff9

0800a96c <strtol>:
 800a96c:	4613      	mov	r3, r2
 800a96e:	460a      	mov	r2, r1
 800a970:	4601      	mov	r1, r0
 800a972:	4802      	ldr	r0, [pc, #8]	; (800a97c <strtol+0x10>)
 800a974:	6800      	ldr	r0, [r0, #0]
 800a976:	f7ff bf77 	b.w	800a868 <_strtol_l.constprop.0>
 800a97a:	bf00      	nop
 800a97c:	200012cc 	.word	0x200012cc

0800a980 <__cvt>:
 800a980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a984:	ec55 4b10 	vmov	r4, r5, d0
 800a988:	2d00      	cmp	r5, #0
 800a98a:	460e      	mov	r6, r1
 800a98c:	4619      	mov	r1, r3
 800a98e:	462b      	mov	r3, r5
 800a990:	bfbb      	ittet	lt
 800a992:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a996:	461d      	movlt	r5, r3
 800a998:	2300      	movge	r3, #0
 800a99a:	232d      	movlt	r3, #45	; 0x2d
 800a99c:	700b      	strb	r3, [r1, #0]
 800a99e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a9a4:	4691      	mov	r9, r2
 800a9a6:	f023 0820 	bic.w	r8, r3, #32
 800a9aa:	bfbc      	itt	lt
 800a9ac:	4622      	movlt	r2, r4
 800a9ae:	4614      	movlt	r4, r2
 800a9b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a9b4:	d005      	beq.n	800a9c2 <__cvt+0x42>
 800a9b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a9ba:	d100      	bne.n	800a9be <__cvt+0x3e>
 800a9bc:	3601      	adds	r6, #1
 800a9be:	2102      	movs	r1, #2
 800a9c0:	e000      	b.n	800a9c4 <__cvt+0x44>
 800a9c2:	2103      	movs	r1, #3
 800a9c4:	ab03      	add	r3, sp, #12
 800a9c6:	9301      	str	r3, [sp, #4]
 800a9c8:	ab02      	add	r3, sp, #8
 800a9ca:	9300      	str	r3, [sp, #0]
 800a9cc:	ec45 4b10 	vmov	d0, r4, r5
 800a9d0:	4653      	mov	r3, sl
 800a9d2:	4632      	mov	r2, r6
 800a9d4:	f000 ff08 	bl	800b7e8 <_dtoa_r>
 800a9d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a9dc:	4607      	mov	r7, r0
 800a9de:	d102      	bne.n	800a9e6 <__cvt+0x66>
 800a9e0:	f019 0f01 	tst.w	r9, #1
 800a9e4:	d022      	beq.n	800aa2c <__cvt+0xac>
 800a9e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a9ea:	eb07 0906 	add.w	r9, r7, r6
 800a9ee:	d110      	bne.n	800aa12 <__cvt+0x92>
 800a9f0:	783b      	ldrb	r3, [r7, #0]
 800a9f2:	2b30      	cmp	r3, #48	; 0x30
 800a9f4:	d10a      	bne.n	800aa0c <__cvt+0x8c>
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	4629      	mov	r1, r5
 800a9fe:	f7f6 f86b 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa02:	b918      	cbnz	r0, 800aa0c <__cvt+0x8c>
 800aa04:	f1c6 0601 	rsb	r6, r6, #1
 800aa08:	f8ca 6000 	str.w	r6, [sl]
 800aa0c:	f8da 3000 	ldr.w	r3, [sl]
 800aa10:	4499      	add	r9, r3
 800aa12:	2200      	movs	r2, #0
 800aa14:	2300      	movs	r3, #0
 800aa16:	4620      	mov	r0, r4
 800aa18:	4629      	mov	r1, r5
 800aa1a:	f7f6 f85d 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa1e:	b108      	cbz	r0, 800aa24 <__cvt+0xa4>
 800aa20:	f8cd 900c 	str.w	r9, [sp, #12]
 800aa24:	2230      	movs	r2, #48	; 0x30
 800aa26:	9b03      	ldr	r3, [sp, #12]
 800aa28:	454b      	cmp	r3, r9
 800aa2a:	d307      	bcc.n	800aa3c <__cvt+0xbc>
 800aa2c:	9b03      	ldr	r3, [sp, #12]
 800aa2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa30:	1bdb      	subs	r3, r3, r7
 800aa32:	4638      	mov	r0, r7
 800aa34:	6013      	str	r3, [r2, #0]
 800aa36:	b004      	add	sp, #16
 800aa38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa3c:	1c59      	adds	r1, r3, #1
 800aa3e:	9103      	str	r1, [sp, #12]
 800aa40:	701a      	strb	r2, [r3, #0]
 800aa42:	e7f0      	b.n	800aa26 <__cvt+0xa6>

0800aa44 <__exponent>:
 800aa44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa46:	4603      	mov	r3, r0
 800aa48:	2900      	cmp	r1, #0
 800aa4a:	bfb8      	it	lt
 800aa4c:	4249      	neglt	r1, r1
 800aa4e:	f803 2b02 	strb.w	r2, [r3], #2
 800aa52:	bfb4      	ite	lt
 800aa54:	222d      	movlt	r2, #45	; 0x2d
 800aa56:	222b      	movge	r2, #43	; 0x2b
 800aa58:	2909      	cmp	r1, #9
 800aa5a:	7042      	strb	r2, [r0, #1]
 800aa5c:	dd2a      	ble.n	800aab4 <__exponent+0x70>
 800aa5e:	f10d 0207 	add.w	r2, sp, #7
 800aa62:	4617      	mov	r7, r2
 800aa64:	260a      	movs	r6, #10
 800aa66:	4694      	mov	ip, r2
 800aa68:	fb91 f5f6 	sdiv	r5, r1, r6
 800aa6c:	fb06 1415 	mls	r4, r6, r5, r1
 800aa70:	3430      	adds	r4, #48	; 0x30
 800aa72:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800aa76:	460c      	mov	r4, r1
 800aa78:	2c63      	cmp	r4, #99	; 0x63
 800aa7a:	f102 32ff 	add.w	r2, r2, #4294967295
 800aa7e:	4629      	mov	r1, r5
 800aa80:	dcf1      	bgt.n	800aa66 <__exponent+0x22>
 800aa82:	3130      	adds	r1, #48	; 0x30
 800aa84:	f1ac 0402 	sub.w	r4, ip, #2
 800aa88:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aa8c:	1c41      	adds	r1, r0, #1
 800aa8e:	4622      	mov	r2, r4
 800aa90:	42ba      	cmp	r2, r7
 800aa92:	d30a      	bcc.n	800aaaa <__exponent+0x66>
 800aa94:	f10d 0209 	add.w	r2, sp, #9
 800aa98:	eba2 020c 	sub.w	r2, r2, ip
 800aa9c:	42bc      	cmp	r4, r7
 800aa9e:	bf88      	it	hi
 800aaa0:	2200      	movhi	r2, #0
 800aaa2:	4413      	add	r3, r2
 800aaa4:	1a18      	subs	r0, r3, r0
 800aaa6:	b003      	add	sp, #12
 800aaa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaaa:	f812 5b01 	ldrb.w	r5, [r2], #1
 800aaae:	f801 5f01 	strb.w	r5, [r1, #1]!
 800aab2:	e7ed      	b.n	800aa90 <__exponent+0x4c>
 800aab4:	2330      	movs	r3, #48	; 0x30
 800aab6:	3130      	adds	r1, #48	; 0x30
 800aab8:	7083      	strb	r3, [r0, #2]
 800aaba:	70c1      	strb	r1, [r0, #3]
 800aabc:	1d03      	adds	r3, r0, #4
 800aabe:	e7f1      	b.n	800aaa4 <__exponent+0x60>

0800aac0 <_printf_float>:
 800aac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac4:	ed2d 8b02 	vpush	{d8}
 800aac8:	b08d      	sub	sp, #52	; 0x34
 800aaca:	460c      	mov	r4, r1
 800aacc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aad0:	4616      	mov	r6, r2
 800aad2:	461f      	mov	r7, r3
 800aad4:	4605      	mov	r5, r0
 800aad6:	f000 fd43 	bl	800b560 <_localeconv_r>
 800aada:	f8d0 a000 	ldr.w	sl, [r0]
 800aade:	4650      	mov	r0, sl
 800aae0:	f7f5 fbce 	bl	8000280 <strlen>
 800aae4:	2300      	movs	r3, #0
 800aae6:	930a      	str	r3, [sp, #40]	; 0x28
 800aae8:	6823      	ldr	r3, [r4, #0]
 800aaea:	9305      	str	r3, [sp, #20]
 800aaec:	f8d8 3000 	ldr.w	r3, [r8]
 800aaf0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aaf4:	3307      	adds	r3, #7
 800aaf6:	f023 0307 	bic.w	r3, r3, #7
 800aafa:	f103 0208 	add.w	r2, r3, #8
 800aafe:	f8c8 2000 	str.w	r2, [r8]
 800ab02:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ab0a:	9307      	str	r3, [sp, #28]
 800ab0c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ab10:	ee08 0a10 	vmov	s16, r0
 800ab14:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ab18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab1c:	4b9e      	ldr	r3, [pc, #632]	; (800ad98 <_printf_float+0x2d8>)
 800ab1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab22:	f7f6 f80b 	bl	8000b3c <__aeabi_dcmpun>
 800ab26:	bb88      	cbnz	r0, 800ab8c <_printf_float+0xcc>
 800ab28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab2c:	4b9a      	ldr	r3, [pc, #616]	; (800ad98 <_printf_float+0x2d8>)
 800ab2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab32:	f7f5 ffe5 	bl	8000b00 <__aeabi_dcmple>
 800ab36:	bb48      	cbnz	r0, 800ab8c <_printf_float+0xcc>
 800ab38:	2200      	movs	r2, #0
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	4640      	mov	r0, r8
 800ab3e:	4649      	mov	r1, r9
 800ab40:	f7f5 ffd4 	bl	8000aec <__aeabi_dcmplt>
 800ab44:	b110      	cbz	r0, 800ab4c <_printf_float+0x8c>
 800ab46:	232d      	movs	r3, #45	; 0x2d
 800ab48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab4c:	4a93      	ldr	r2, [pc, #588]	; (800ad9c <_printf_float+0x2dc>)
 800ab4e:	4b94      	ldr	r3, [pc, #592]	; (800ada0 <_printf_float+0x2e0>)
 800ab50:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ab54:	bf94      	ite	ls
 800ab56:	4690      	movls	r8, r2
 800ab58:	4698      	movhi	r8, r3
 800ab5a:	2303      	movs	r3, #3
 800ab5c:	6123      	str	r3, [r4, #16]
 800ab5e:	9b05      	ldr	r3, [sp, #20]
 800ab60:	f023 0304 	bic.w	r3, r3, #4
 800ab64:	6023      	str	r3, [r4, #0]
 800ab66:	f04f 0900 	mov.w	r9, #0
 800ab6a:	9700      	str	r7, [sp, #0]
 800ab6c:	4633      	mov	r3, r6
 800ab6e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ab70:	4621      	mov	r1, r4
 800ab72:	4628      	mov	r0, r5
 800ab74:	f000 f9da 	bl	800af2c <_printf_common>
 800ab78:	3001      	adds	r0, #1
 800ab7a:	f040 8090 	bne.w	800ac9e <_printf_float+0x1de>
 800ab7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab82:	b00d      	add	sp, #52	; 0x34
 800ab84:	ecbd 8b02 	vpop	{d8}
 800ab88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab8c:	4642      	mov	r2, r8
 800ab8e:	464b      	mov	r3, r9
 800ab90:	4640      	mov	r0, r8
 800ab92:	4649      	mov	r1, r9
 800ab94:	f7f5 ffd2 	bl	8000b3c <__aeabi_dcmpun>
 800ab98:	b140      	cbz	r0, 800abac <_printf_float+0xec>
 800ab9a:	464b      	mov	r3, r9
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	bfbc      	itt	lt
 800aba0:	232d      	movlt	r3, #45	; 0x2d
 800aba2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aba6:	4a7f      	ldr	r2, [pc, #508]	; (800ada4 <_printf_float+0x2e4>)
 800aba8:	4b7f      	ldr	r3, [pc, #508]	; (800ada8 <_printf_float+0x2e8>)
 800abaa:	e7d1      	b.n	800ab50 <_printf_float+0x90>
 800abac:	6863      	ldr	r3, [r4, #4]
 800abae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800abb2:	9206      	str	r2, [sp, #24]
 800abb4:	1c5a      	adds	r2, r3, #1
 800abb6:	d13f      	bne.n	800ac38 <_printf_float+0x178>
 800abb8:	2306      	movs	r3, #6
 800abba:	6063      	str	r3, [r4, #4]
 800abbc:	9b05      	ldr	r3, [sp, #20]
 800abbe:	6861      	ldr	r1, [r4, #4]
 800abc0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800abc4:	2300      	movs	r3, #0
 800abc6:	9303      	str	r3, [sp, #12]
 800abc8:	ab0a      	add	r3, sp, #40	; 0x28
 800abca:	e9cd b301 	strd	fp, r3, [sp, #4]
 800abce:	ab09      	add	r3, sp, #36	; 0x24
 800abd0:	ec49 8b10 	vmov	d0, r8, r9
 800abd4:	9300      	str	r3, [sp, #0]
 800abd6:	6022      	str	r2, [r4, #0]
 800abd8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800abdc:	4628      	mov	r0, r5
 800abde:	f7ff fecf 	bl	800a980 <__cvt>
 800abe2:	9b06      	ldr	r3, [sp, #24]
 800abe4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abe6:	2b47      	cmp	r3, #71	; 0x47
 800abe8:	4680      	mov	r8, r0
 800abea:	d108      	bne.n	800abfe <_printf_float+0x13e>
 800abec:	1cc8      	adds	r0, r1, #3
 800abee:	db02      	blt.n	800abf6 <_printf_float+0x136>
 800abf0:	6863      	ldr	r3, [r4, #4]
 800abf2:	4299      	cmp	r1, r3
 800abf4:	dd41      	ble.n	800ac7a <_printf_float+0x1ba>
 800abf6:	f1ab 0302 	sub.w	r3, fp, #2
 800abfa:	fa5f fb83 	uxtb.w	fp, r3
 800abfe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ac02:	d820      	bhi.n	800ac46 <_printf_float+0x186>
 800ac04:	3901      	subs	r1, #1
 800ac06:	465a      	mov	r2, fp
 800ac08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ac0c:	9109      	str	r1, [sp, #36]	; 0x24
 800ac0e:	f7ff ff19 	bl	800aa44 <__exponent>
 800ac12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac14:	1813      	adds	r3, r2, r0
 800ac16:	2a01      	cmp	r2, #1
 800ac18:	4681      	mov	r9, r0
 800ac1a:	6123      	str	r3, [r4, #16]
 800ac1c:	dc02      	bgt.n	800ac24 <_printf_float+0x164>
 800ac1e:	6822      	ldr	r2, [r4, #0]
 800ac20:	07d2      	lsls	r2, r2, #31
 800ac22:	d501      	bpl.n	800ac28 <_printf_float+0x168>
 800ac24:	3301      	adds	r3, #1
 800ac26:	6123      	str	r3, [r4, #16]
 800ac28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d09c      	beq.n	800ab6a <_printf_float+0xaa>
 800ac30:	232d      	movs	r3, #45	; 0x2d
 800ac32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac36:	e798      	b.n	800ab6a <_printf_float+0xaa>
 800ac38:	9a06      	ldr	r2, [sp, #24]
 800ac3a:	2a47      	cmp	r2, #71	; 0x47
 800ac3c:	d1be      	bne.n	800abbc <_printf_float+0xfc>
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d1bc      	bne.n	800abbc <_printf_float+0xfc>
 800ac42:	2301      	movs	r3, #1
 800ac44:	e7b9      	b.n	800abba <_printf_float+0xfa>
 800ac46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ac4a:	d118      	bne.n	800ac7e <_printf_float+0x1be>
 800ac4c:	2900      	cmp	r1, #0
 800ac4e:	6863      	ldr	r3, [r4, #4]
 800ac50:	dd0b      	ble.n	800ac6a <_printf_float+0x1aa>
 800ac52:	6121      	str	r1, [r4, #16]
 800ac54:	b913      	cbnz	r3, 800ac5c <_printf_float+0x19c>
 800ac56:	6822      	ldr	r2, [r4, #0]
 800ac58:	07d0      	lsls	r0, r2, #31
 800ac5a:	d502      	bpl.n	800ac62 <_printf_float+0x1a2>
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	440b      	add	r3, r1
 800ac60:	6123      	str	r3, [r4, #16]
 800ac62:	65a1      	str	r1, [r4, #88]	; 0x58
 800ac64:	f04f 0900 	mov.w	r9, #0
 800ac68:	e7de      	b.n	800ac28 <_printf_float+0x168>
 800ac6a:	b913      	cbnz	r3, 800ac72 <_printf_float+0x1b2>
 800ac6c:	6822      	ldr	r2, [r4, #0]
 800ac6e:	07d2      	lsls	r2, r2, #31
 800ac70:	d501      	bpl.n	800ac76 <_printf_float+0x1b6>
 800ac72:	3302      	adds	r3, #2
 800ac74:	e7f4      	b.n	800ac60 <_printf_float+0x1a0>
 800ac76:	2301      	movs	r3, #1
 800ac78:	e7f2      	b.n	800ac60 <_printf_float+0x1a0>
 800ac7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ac7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac80:	4299      	cmp	r1, r3
 800ac82:	db05      	blt.n	800ac90 <_printf_float+0x1d0>
 800ac84:	6823      	ldr	r3, [r4, #0]
 800ac86:	6121      	str	r1, [r4, #16]
 800ac88:	07d8      	lsls	r0, r3, #31
 800ac8a:	d5ea      	bpl.n	800ac62 <_printf_float+0x1a2>
 800ac8c:	1c4b      	adds	r3, r1, #1
 800ac8e:	e7e7      	b.n	800ac60 <_printf_float+0x1a0>
 800ac90:	2900      	cmp	r1, #0
 800ac92:	bfd4      	ite	le
 800ac94:	f1c1 0202 	rsble	r2, r1, #2
 800ac98:	2201      	movgt	r2, #1
 800ac9a:	4413      	add	r3, r2
 800ac9c:	e7e0      	b.n	800ac60 <_printf_float+0x1a0>
 800ac9e:	6823      	ldr	r3, [r4, #0]
 800aca0:	055a      	lsls	r2, r3, #21
 800aca2:	d407      	bmi.n	800acb4 <_printf_float+0x1f4>
 800aca4:	6923      	ldr	r3, [r4, #16]
 800aca6:	4642      	mov	r2, r8
 800aca8:	4631      	mov	r1, r6
 800acaa:	4628      	mov	r0, r5
 800acac:	47b8      	blx	r7
 800acae:	3001      	adds	r0, #1
 800acb0:	d12c      	bne.n	800ad0c <_printf_float+0x24c>
 800acb2:	e764      	b.n	800ab7e <_printf_float+0xbe>
 800acb4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800acb8:	f240 80e0 	bls.w	800ae7c <_printf_float+0x3bc>
 800acbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800acc0:	2200      	movs	r2, #0
 800acc2:	2300      	movs	r3, #0
 800acc4:	f7f5 ff08 	bl	8000ad8 <__aeabi_dcmpeq>
 800acc8:	2800      	cmp	r0, #0
 800acca:	d034      	beq.n	800ad36 <_printf_float+0x276>
 800accc:	4a37      	ldr	r2, [pc, #220]	; (800adac <_printf_float+0x2ec>)
 800acce:	2301      	movs	r3, #1
 800acd0:	4631      	mov	r1, r6
 800acd2:	4628      	mov	r0, r5
 800acd4:	47b8      	blx	r7
 800acd6:	3001      	adds	r0, #1
 800acd8:	f43f af51 	beq.w	800ab7e <_printf_float+0xbe>
 800acdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ace0:	429a      	cmp	r2, r3
 800ace2:	db02      	blt.n	800acea <_printf_float+0x22a>
 800ace4:	6823      	ldr	r3, [r4, #0]
 800ace6:	07d8      	lsls	r0, r3, #31
 800ace8:	d510      	bpl.n	800ad0c <_printf_float+0x24c>
 800acea:	ee18 3a10 	vmov	r3, s16
 800acee:	4652      	mov	r2, sl
 800acf0:	4631      	mov	r1, r6
 800acf2:	4628      	mov	r0, r5
 800acf4:	47b8      	blx	r7
 800acf6:	3001      	adds	r0, #1
 800acf8:	f43f af41 	beq.w	800ab7e <_printf_float+0xbe>
 800acfc:	f04f 0800 	mov.w	r8, #0
 800ad00:	f104 091a 	add.w	r9, r4, #26
 800ad04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad06:	3b01      	subs	r3, #1
 800ad08:	4543      	cmp	r3, r8
 800ad0a:	dc09      	bgt.n	800ad20 <_printf_float+0x260>
 800ad0c:	6823      	ldr	r3, [r4, #0]
 800ad0e:	079b      	lsls	r3, r3, #30
 800ad10:	f100 8107 	bmi.w	800af22 <_printf_float+0x462>
 800ad14:	68e0      	ldr	r0, [r4, #12]
 800ad16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad18:	4298      	cmp	r0, r3
 800ad1a:	bfb8      	it	lt
 800ad1c:	4618      	movlt	r0, r3
 800ad1e:	e730      	b.n	800ab82 <_printf_float+0xc2>
 800ad20:	2301      	movs	r3, #1
 800ad22:	464a      	mov	r2, r9
 800ad24:	4631      	mov	r1, r6
 800ad26:	4628      	mov	r0, r5
 800ad28:	47b8      	blx	r7
 800ad2a:	3001      	adds	r0, #1
 800ad2c:	f43f af27 	beq.w	800ab7e <_printf_float+0xbe>
 800ad30:	f108 0801 	add.w	r8, r8, #1
 800ad34:	e7e6      	b.n	800ad04 <_printf_float+0x244>
 800ad36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	dc39      	bgt.n	800adb0 <_printf_float+0x2f0>
 800ad3c:	4a1b      	ldr	r2, [pc, #108]	; (800adac <_printf_float+0x2ec>)
 800ad3e:	2301      	movs	r3, #1
 800ad40:	4631      	mov	r1, r6
 800ad42:	4628      	mov	r0, r5
 800ad44:	47b8      	blx	r7
 800ad46:	3001      	adds	r0, #1
 800ad48:	f43f af19 	beq.w	800ab7e <_printf_float+0xbe>
 800ad4c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ad50:	4313      	orrs	r3, r2
 800ad52:	d102      	bne.n	800ad5a <_printf_float+0x29a>
 800ad54:	6823      	ldr	r3, [r4, #0]
 800ad56:	07d9      	lsls	r1, r3, #31
 800ad58:	d5d8      	bpl.n	800ad0c <_printf_float+0x24c>
 800ad5a:	ee18 3a10 	vmov	r3, s16
 800ad5e:	4652      	mov	r2, sl
 800ad60:	4631      	mov	r1, r6
 800ad62:	4628      	mov	r0, r5
 800ad64:	47b8      	blx	r7
 800ad66:	3001      	adds	r0, #1
 800ad68:	f43f af09 	beq.w	800ab7e <_printf_float+0xbe>
 800ad6c:	f04f 0900 	mov.w	r9, #0
 800ad70:	f104 0a1a 	add.w	sl, r4, #26
 800ad74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad76:	425b      	negs	r3, r3
 800ad78:	454b      	cmp	r3, r9
 800ad7a:	dc01      	bgt.n	800ad80 <_printf_float+0x2c0>
 800ad7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad7e:	e792      	b.n	800aca6 <_printf_float+0x1e6>
 800ad80:	2301      	movs	r3, #1
 800ad82:	4652      	mov	r2, sl
 800ad84:	4631      	mov	r1, r6
 800ad86:	4628      	mov	r0, r5
 800ad88:	47b8      	blx	r7
 800ad8a:	3001      	adds	r0, #1
 800ad8c:	f43f aef7 	beq.w	800ab7e <_printf_float+0xbe>
 800ad90:	f109 0901 	add.w	r9, r9, #1
 800ad94:	e7ee      	b.n	800ad74 <_printf_float+0x2b4>
 800ad96:	bf00      	nop
 800ad98:	7fefffff 	.word	0x7fefffff
 800ad9c:	080110f9 	.word	0x080110f9
 800ada0:	080110fd 	.word	0x080110fd
 800ada4:	08011101 	.word	0x08011101
 800ada8:	08011105 	.word	0x08011105
 800adac:	08011109 	.word	0x08011109
 800adb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800adb4:	429a      	cmp	r2, r3
 800adb6:	bfa8      	it	ge
 800adb8:	461a      	movge	r2, r3
 800adba:	2a00      	cmp	r2, #0
 800adbc:	4691      	mov	r9, r2
 800adbe:	dc37      	bgt.n	800ae30 <_printf_float+0x370>
 800adc0:	f04f 0b00 	mov.w	fp, #0
 800adc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800adc8:	f104 021a 	add.w	r2, r4, #26
 800adcc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800adce:	9305      	str	r3, [sp, #20]
 800add0:	eba3 0309 	sub.w	r3, r3, r9
 800add4:	455b      	cmp	r3, fp
 800add6:	dc33      	bgt.n	800ae40 <_printf_float+0x380>
 800add8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800addc:	429a      	cmp	r2, r3
 800adde:	db3b      	blt.n	800ae58 <_printf_float+0x398>
 800ade0:	6823      	ldr	r3, [r4, #0]
 800ade2:	07da      	lsls	r2, r3, #31
 800ade4:	d438      	bmi.n	800ae58 <_printf_float+0x398>
 800ade6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800adea:	eba2 0903 	sub.w	r9, r2, r3
 800adee:	9b05      	ldr	r3, [sp, #20]
 800adf0:	1ad2      	subs	r2, r2, r3
 800adf2:	4591      	cmp	r9, r2
 800adf4:	bfa8      	it	ge
 800adf6:	4691      	movge	r9, r2
 800adf8:	f1b9 0f00 	cmp.w	r9, #0
 800adfc:	dc35      	bgt.n	800ae6a <_printf_float+0x3aa>
 800adfe:	f04f 0800 	mov.w	r8, #0
 800ae02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae06:	f104 0a1a 	add.w	sl, r4, #26
 800ae0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae0e:	1a9b      	subs	r3, r3, r2
 800ae10:	eba3 0309 	sub.w	r3, r3, r9
 800ae14:	4543      	cmp	r3, r8
 800ae16:	f77f af79 	ble.w	800ad0c <_printf_float+0x24c>
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	4652      	mov	r2, sl
 800ae1e:	4631      	mov	r1, r6
 800ae20:	4628      	mov	r0, r5
 800ae22:	47b8      	blx	r7
 800ae24:	3001      	adds	r0, #1
 800ae26:	f43f aeaa 	beq.w	800ab7e <_printf_float+0xbe>
 800ae2a:	f108 0801 	add.w	r8, r8, #1
 800ae2e:	e7ec      	b.n	800ae0a <_printf_float+0x34a>
 800ae30:	4613      	mov	r3, r2
 800ae32:	4631      	mov	r1, r6
 800ae34:	4642      	mov	r2, r8
 800ae36:	4628      	mov	r0, r5
 800ae38:	47b8      	blx	r7
 800ae3a:	3001      	adds	r0, #1
 800ae3c:	d1c0      	bne.n	800adc0 <_printf_float+0x300>
 800ae3e:	e69e      	b.n	800ab7e <_printf_float+0xbe>
 800ae40:	2301      	movs	r3, #1
 800ae42:	4631      	mov	r1, r6
 800ae44:	4628      	mov	r0, r5
 800ae46:	9205      	str	r2, [sp, #20]
 800ae48:	47b8      	blx	r7
 800ae4a:	3001      	adds	r0, #1
 800ae4c:	f43f ae97 	beq.w	800ab7e <_printf_float+0xbe>
 800ae50:	9a05      	ldr	r2, [sp, #20]
 800ae52:	f10b 0b01 	add.w	fp, fp, #1
 800ae56:	e7b9      	b.n	800adcc <_printf_float+0x30c>
 800ae58:	ee18 3a10 	vmov	r3, s16
 800ae5c:	4652      	mov	r2, sl
 800ae5e:	4631      	mov	r1, r6
 800ae60:	4628      	mov	r0, r5
 800ae62:	47b8      	blx	r7
 800ae64:	3001      	adds	r0, #1
 800ae66:	d1be      	bne.n	800ade6 <_printf_float+0x326>
 800ae68:	e689      	b.n	800ab7e <_printf_float+0xbe>
 800ae6a:	9a05      	ldr	r2, [sp, #20]
 800ae6c:	464b      	mov	r3, r9
 800ae6e:	4442      	add	r2, r8
 800ae70:	4631      	mov	r1, r6
 800ae72:	4628      	mov	r0, r5
 800ae74:	47b8      	blx	r7
 800ae76:	3001      	adds	r0, #1
 800ae78:	d1c1      	bne.n	800adfe <_printf_float+0x33e>
 800ae7a:	e680      	b.n	800ab7e <_printf_float+0xbe>
 800ae7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae7e:	2a01      	cmp	r2, #1
 800ae80:	dc01      	bgt.n	800ae86 <_printf_float+0x3c6>
 800ae82:	07db      	lsls	r3, r3, #31
 800ae84:	d53a      	bpl.n	800aefc <_printf_float+0x43c>
 800ae86:	2301      	movs	r3, #1
 800ae88:	4642      	mov	r2, r8
 800ae8a:	4631      	mov	r1, r6
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	47b8      	blx	r7
 800ae90:	3001      	adds	r0, #1
 800ae92:	f43f ae74 	beq.w	800ab7e <_printf_float+0xbe>
 800ae96:	ee18 3a10 	vmov	r3, s16
 800ae9a:	4652      	mov	r2, sl
 800ae9c:	4631      	mov	r1, r6
 800ae9e:	4628      	mov	r0, r5
 800aea0:	47b8      	blx	r7
 800aea2:	3001      	adds	r0, #1
 800aea4:	f43f ae6b 	beq.w	800ab7e <_printf_float+0xbe>
 800aea8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aeac:	2200      	movs	r2, #0
 800aeae:	2300      	movs	r3, #0
 800aeb0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800aeb4:	f7f5 fe10 	bl	8000ad8 <__aeabi_dcmpeq>
 800aeb8:	b9d8      	cbnz	r0, 800aef2 <_printf_float+0x432>
 800aeba:	f10a 33ff 	add.w	r3, sl, #4294967295
 800aebe:	f108 0201 	add.w	r2, r8, #1
 800aec2:	4631      	mov	r1, r6
 800aec4:	4628      	mov	r0, r5
 800aec6:	47b8      	blx	r7
 800aec8:	3001      	adds	r0, #1
 800aeca:	d10e      	bne.n	800aeea <_printf_float+0x42a>
 800aecc:	e657      	b.n	800ab7e <_printf_float+0xbe>
 800aece:	2301      	movs	r3, #1
 800aed0:	4652      	mov	r2, sl
 800aed2:	4631      	mov	r1, r6
 800aed4:	4628      	mov	r0, r5
 800aed6:	47b8      	blx	r7
 800aed8:	3001      	adds	r0, #1
 800aeda:	f43f ae50 	beq.w	800ab7e <_printf_float+0xbe>
 800aede:	f108 0801 	add.w	r8, r8, #1
 800aee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aee4:	3b01      	subs	r3, #1
 800aee6:	4543      	cmp	r3, r8
 800aee8:	dcf1      	bgt.n	800aece <_printf_float+0x40e>
 800aeea:	464b      	mov	r3, r9
 800aeec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aef0:	e6da      	b.n	800aca8 <_printf_float+0x1e8>
 800aef2:	f04f 0800 	mov.w	r8, #0
 800aef6:	f104 0a1a 	add.w	sl, r4, #26
 800aefa:	e7f2      	b.n	800aee2 <_printf_float+0x422>
 800aefc:	2301      	movs	r3, #1
 800aefe:	4642      	mov	r2, r8
 800af00:	e7df      	b.n	800aec2 <_printf_float+0x402>
 800af02:	2301      	movs	r3, #1
 800af04:	464a      	mov	r2, r9
 800af06:	4631      	mov	r1, r6
 800af08:	4628      	mov	r0, r5
 800af0a:	47b8      	blx	r7
 800af0c:	3001      	adds	r0, #1
 800af0e:	f43f ae36 	beq.w	800ab7e <_printf_float+0xbe>
 800af12:	f108 0801 	add.w	r8, r8, #1
 800af16:	68e3      	ldr	r3, [r4, #12]
 800af18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af1a:	1a5b      	subs	r3, r3, r1
 800af1c:	4543      	cmp	r3, r8
 800af1e:	dcf0      	bgt.n	800af02 <_printf_float+0x442>
 800af20:	e6f8      	b.n	800ad14 <_printf_float+0x254>
 800af22:	f04f 0800 	mov.w	r8, #0
 800af26:	f104 0919 	add.w	r9, r4, #25
 800af2a:	e7f4      	b.n	800af16 <_printf_float+0x456>

0800af2c <_printf_common>:
 800af2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af30:	4616      	mov	r6, r2
 800af32:	4699      	mov	r9, r3
 800af34:	688a      	ldr	r2, [r1, #8]
 800af36:	690b      	ldr	r3, [r1, #16]
 800af38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af3c:	4293      	cmp	r3, r2
 800af3e:	bfb8      	it	lt
 800af40:	4613      	movlt	r3, r2
 800af42:	6033      	str	r3, [r6, #0]
 800af44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af48:	4607      	mov	r7, r0
 800af4a:	460c      	mov	r4, r1
 800af4c:	b10a      	cbz	r2, 800af52 <_printf_common+0x26>
 800af4e:	3301      	adds	r3, #1
 800af50:	6033      	str	r3, [r6, #0]
 800af52:	6823      	ldr	r3, [r4, #0]
 800af54:	0699      	lsls	r1, r3, #26
 800af56:	bf42      	ittt	mi
 800af58:	6833      	ldrmi	r3, [r6, #0]
 800af5a:	3302      	addmi	r3, #2
 800af5c:	6033      	strmi	r3, [r6, #0]
 800af5e:	6825      	ldr	r5, [r4, #0]
 800af60:	f015 0506 	ands.w	r5, r5, #6
 800af64:	d106      	bne.n	800af74 <_printf_common+0x48>
 800af66:	f104 0a19 	add.w	sl, r4, #25
 800af6a:	68e3      	ldr	r3, [r4, #12]
 800af6c:	6832      	ldr	r2, [r6, #0]
 800af6e:	1a9b      	subs	r3, r3, r2
 800af70:	42ab      	cmp	r3, r5
 800af72:	dc26      	bgt.n	800afc2 <_printf_common+0x96>
 800af74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af78:	1e13      	subs	r3, r2, #0
 800af7a:	6822      	ldr	r2, [r4, #0]
 800af7c:	bf18      	it	ne
 800af7e:	2301      	movne	r3, #1
 800af80:	0692      	lsls	r2, r2, #26
 800af82:	d42b      	bmi.n	800afdc <_printf_common+0xb0>
 800af84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af88:	4649      	mov	r1, r9
 800af8a:	4638      	mov	r0, r7
 800af8c:	47c0      	blx	r8
 800af8e:	3001      	adds	r0, #1
 800af90:	d01e      	beq.n	800afd0 <_printf_common+0xa4>
 800af92:	6823      	ldr	r3, [r4, #0]
 800af94:	6922      	ldr	r2, [r4, #16]
 800af96:	f003 0306 	and.w	r3, r3, #6
 800af9a:	2b04      	cmp	r3, #4
 800af9c:	bf02      	ittt	eq
 800af9e:	68e5      	ldreq	r5, [r4, #12]
 800afa0:	6833      	ldreq	r3, [r6, #0]
 800afa2:	1aed      	subeq	r5, r5, r3
 800afa4:	68a3      	ldr	r3, [r4, #8]
 800afa6:	bf0c      	ite	eq
 800afa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afac:	2500      	movne	r5, #0
 800afae:	4293      	cmp	r3, r2
 800afb0:	bfc4      	itt	gt
 800afb2:	1a9b      	subgt	r3, r3, r2
 800afb4:	18ed      	addgt	r5, r5, r3
 800afb6:	2600      	movs	r6, #0
 800afb8:	341a      	adds	r4, #26
 800afba:	42b5      	cmp	r5, r6
 800afbc:	d11a      	bne.n	800aff4 <_printf_common+0xc8>
 800afbe:	2000      	movs	r0, #0
 800afc0:	e008      	b.n	800afd4 <_printf_common+0xa8>
 800afc2:	2301      	movs	r3, #1
 800afc4:	4652      	mov	r2, sl
 800afc6:	4649      	mov	r1, r9
 800afc8:	4638      	mov	r0, r7
 800afca:	47c0      	blx	r8
 800afcc:	3001      	adds	r0, #1
 800afce:	d103      	bne.n	800afd8 <_printf_common+0xac>
 800afd0:	f04f 30ff 	mov.w	r0, #4294967295
 800afd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afd8:	3501      	adds	r5, #1
 800afda:	e7c6      	b.n	800af6a <_printf_common+0x3e>
 800afdc:	18e1      	adds	r1, r4, r3
 800afde:	1c5a      	adds	r2, r3, #1
 800afe0:	2030      	movs	r0, #48	; 0x30
 800afe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800afe6:	4422      	add	r2, r4
 800afe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800afec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aff0:	3302      	adds	r3, #2
 800aff2:	e7c7      	b.n	800af84 <_printf_common+0x58>
 800aff4:	2301      	movs	r3, #1
 800aff6:	4622      	mov	r2, r4
 800aff8:	4649      	mov	r1, r9
 800affa:	4638      	mov	r0, r7
 800affc:	47c0      	blx	r8
 800affe:	3001      	adds	r0, #1
 800b000:	d0e6      	beq.n	800afd0 <_printf_common+0xa4>
 800b002:	3601      	adds	r6, #1
 800b004:	e7d9      	b.n	800afba <_printf_common+0x8e>
	...

0800b008 <_printf_i>:
 800b008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b00c:	7e0f      	ldrb	r7, [r1, #24]
 800b00e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b010:	2f78      	cmp	r7, #120	; 0x78
 800b012:	4691      	mov	r9, r2
 800b014:	4680      	mov	r8, r0
 800b016:	460c      	mov	r4, r1
 800b018:	469a      	mov	sl, r3
 800b01a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b01e:	d807      	bhi.n	800b030 <_printf_i+0x28>
 800b020:	2f62      	cmp	r7, #98	; 0x62
 800b022:	d80a      	bhi.n	800b03a <_printf_i+0x32>
 800b024:	2f00      	cmp	r7, #0
 800b026:	f000 80d4 	beq.w	800b1d2 <_printf_i+0x1ca>
 800b02a:	2f58      	cmp	r7, #88	; 0x58
 800b02c:	f000 80c0 	beq.w	800b1b0 <_printf_i+0x1a8>
 800b030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b038:	e03a      	b.n	800b0b0 <_printf_i+0xa8>
 800b03a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b03e:	2b15      	cmp	r3, #21
 800b040:	d8f6      	bhi.n	800b030 <_printf_i+0x28>
 800b042:	a101      	add	r1, pc, #4	; (adr r1, 800b048 <_printf_i+0x40>)
 800b044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b048:	0800b0a1 	.word	0x0800b0a1
 800b04c:	0800b0b5 	.word	0x0800b0b5
 800b050:	0800b031 	.word	0x0800b031
 800b054:	0800b031 	.word	0x0800b031
 800b058:	0800b031 	.word	0x0800b031
 800b05c:	0800b031 	.word	0x0800b031
 800b060:	0800b0b5 	.word	0x0800b0b5
 800b064:	0800b031 	.word	0x0800b031
 800b068:	0800b031 	.word	0x0800b031
 800b06c:	0800b031 	.word	0x0800b031
 800b070:	0800b031 	.word	0x0800b031
 800b074:	0800b1b9 	.word	0x0800b1b9
 800b078:	0800b0e1 	.word	0x0800b0e1
 800b07c:	0800b173 	.word	0x0800b173
 800b080:	0800b031 	.word	0x0800b031
 800b084:	0800b031 	.word	0x0800b031
 800b088:	0800b1db 	.word	0x0800b1db
 800b08c:	0800b031 	.word	0x0800b031
 800b090:	0800b0e1 	.word	0x0800b0e1
 800b094:	0800b031 	.word	0x0800b031
 800b098:	0800b031 	.word	0x0800b031
 800b09c:	0800b17b 	.word	0x0800b17b
 800b0a0:	682b      	ldr	r3, [r5, #0]
 800b0a2:	1d1a      	adds	r2, r3, #4
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	602a      	str	r2, [r5, #0]
 800b0a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e09f      	b.n	800b1f4 <_printf_i+0x1ec>
 800b0b4:	6820      	ldr	r0, [r4, #0]
 800b0b6:	682b      	ldr	r3, [r5, #0]
 800b0b8:	0607      	lsls	r7, r0, #24
 800b0ba:	f103 0104 	add.w	r1, r3, #4
 800b0be:	6029      	str	r1, [r5, #0]
 800b0c0:	d501      	bpl.n	800b0c6 <_printf_i+0xbe>
 800b0c2:	681e      	ldr	r6, [r3, #0]
 800b0c4:	e003      	b.n	800b0ce <_printf_i+0xc6>
 800b0c6:	0646      	lsls	r6, r0, #25
 800b0c8:	d5fb      	bpl.n	800b0c2 <_printf_i+0xba>
 800b0ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b0ce:	2e00      	cmp	r6, #0
 800b0d0:	da03      	bge.n	800b0da <_printf_i+0xd2>
 800b0d2:	232d      	movs	r3, #45	; 0x2d
 800b0d4:	4276      	negs	r6, r6
 800b0d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0da:	485a      	ldr	r0, [pc, #360]	; (800b244 <_printf_i+0x23c>)
 800b0dc:	230a      	movs	r3, #10
 800b0de:	e012      	b.n	800b106 <_printf_i+0xfe>
 800b0e0:	682b      	ldr	r3, [r5, #0]
 800b0e2:	6820      	ldr	r0, [r4, #0]
 800b0e4:	1d19      	adds	r1, r3, #4
 800b0e6:	6029      	str	r1, [r5, #0]
 800b0e8:	0605      	lsls	r5, r0, #24
 800b0ea:	d501      	bpl.n	800b0f0 <_printf_i+0xe8>
 800b0ec:	681e      	ldr	r6, [r3, #0]
 800b0ee:	e002      	b.n	800b0f6 <_printf_i+0xee>
 800b0f0:	0641      	lsls	r1, r0, #25
 800b0f2:	d5fb      	bpl.n	800b0ec <_printf_i+0xe4>
 800b0f4:	881e      	ldrh	r6, [r3, #0]
 800b0f6:	4853      	ldr	r0, [pc, #332]	; (800b244 <_printf_i+0x23c>)
 800b0f8:	2f6f      	cmp	r7, #111	; 0x6f
 800b0fa:	bf0c      	ite	eq
 800b0fc:	2308      	moveq	r3, #8
 800b0fe:	230a      	movne	r3, #10
 800b100:	2100      	movs	r1, #0
 800b102:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b106:	6865      	ldr	r5, [r4, #4]
 800b108:	60a5      	str	r5, [r4, #8]
 800b10a:	2d00      	cmp	r5, #0
 800b10c:	bfa2      	ittt	ge
 800b10e:	6821      	ldrge	r1, [r4, #0]
 800b110:	f021 0104 	bicge.w	r1, r1, #4
 800b114:	6021      	strge	r1, [r4, #0]
 800b116:	b90e      	cbnz	r6, 800b11c <_printf_i+0x114>
 800b118:	2d00      	cmp	r5, #0
 800b11a:	d04b      	beq.n	800b1b4 <_printf_i+0x1ac>
 800b11c:	4615      	mov	r5, r2
 800b11e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b122:	fb03 6711 	mls	r7, r3, r1, r6
 800b126:	5dc7      	ldrb	r7, [r0, r7]
 800b128:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b12c:	4637      	mov	r7, r6
 800b12e:	42bb      	cmp	r3, r7
 800b130:	460e      	mov	r6, r1
 800b132:	d9f4      	bls.n	800b11e <_printf_i+0x116>
 800b134:	2b08      	cmp	r3, #8
 800b136:	d10b      	bne.n	800b150 <_printf_i+0x148>
 800b138:	6823      	ldr	r3, [r4, #0]
 800b13a:	07de      	lsls	r6, r3, #31
 800b13c:	d508      	bpl.n	800b150 <_printf_i+0x148>
 800b13e:	6923      	ldr	r3, [r4, #16]
 800b140:	6861      	ldr	r1, [r4, #4]
 800b142:	4299      	cmp	r1, r3
 800b144:	bfde      	ittt	le
 800b146:	2330      	movle	r3, #48	; 0x30
 800b148:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b14c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b150:	1b52      	subs	r2, r2, r5
 800b152:	6122      	str	r2, [r4, #16]
 800b154:	f8cd a000 	str.w	sl, [sp]
 800b158:	464b      	mov	r3, r9
 800b15a:	aa03      	add	r2, sp, #12
 800b15c:	4621      	mov	r1, r4
 800b15e:	4640      	mov	r0, r8
 800b160:	f7ff fee4 	bl	800af2c <_printf_common>
 800b164:	3001      	adds	r0, #1
 800b166:	d14a      	bne.n	800b1fe <_printf_i+0x1f6>
 800b168:	f04f 30ff 	mov.w	r0, #4294967295
 800b16c:	b004      	add	sp, #16
 800b16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b172:	6823      	ldr	r3, [r4, #0]
 800b174:	f043 0320 	orr.w	r3, r3, #32
 800b178:	6023      	str	r3, [r4, #0]
 800b17a:	4833      	ldr	r0, [pc, #204]	; (800b248 <_printf_i+0x240>)
 800b17c:	2778      	movs	r7, #120	; 0x78
 800b17e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b182:	6823      	ldr	r3, [r4, #0]
 800b184:	6829      	ldr	r1, [r5, #0]
 800b186:	061f      	lsls	r7, r3, #24
 800b188:	f851 6b04 	ldr.w	r6, [r1], #4
 800b18c:	d402      	bmi.n	800b194 <_printf_i+0x18c>
 800b18e:	065f      	lsls	r7, r3, #25
 800b190:	bf48      	it	mi
 800b192:	b2b6      	uxthmi	r6, r6
 800b194:	07df      	lsls	r7, r3, #31
 800b196:	bf48      	it	mi
 800b198:	f043 0320 	orrmi.w	r3, r3, #32
 800b19c:	6029      	str	r1, [r5, #0]
 800b19e:	bf48      	it	mi
 800b1a0:	6023      	strmi	r3, [r4, #0]
 800b1a2:	b91e      	cbnz	r6, 800b1ac <_printf_i+0x1a4>
 800b1a4:	6823      	ldr	r3, [r4, #0]
 800b1a6:	f023 0320 	bic.w	r3, r3, #32
 800b1aa:	6023      	str	r3, [r4, #0]
 800b1ac:	2310      	movs	r3, #16
 800b1ae:	e7a7      	b.n	800b100 <_printf_i+0xf8>
 800b1b0:	4824      	ldr	r0, [pc, #144]	; (800b244 <_printf_i+0x23c>)
 800b1b2:	e7e4      	b.n	800b17e <_printf_i+0x176>
 800b1b4:	4615      	mov	r5, r2
 800b1b6:	e7bd      	b.n	800b134 <_printf_i+0x12c>
 800b1b8:	682b      	ldr	r3, [r5, #0]
 800b1ba:	6826      	ldr	r6, [r4, #0]
 800b1bc:	6961      	ldr	r1, [r4, #20]
 800b1be:	1d18      	adds	r0, r3, #4
 800b1c0:	6028      	str	r0, [r5, #0]
 800b1c2:	0635      	lsls	r5, r6, #24
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	d501      	bpl.n	800b1cc <_printf_i+0x1c4>
 800b1c8:	6019      	str	r1, [r3, #0]
 800b1ca:	e002      	b.n	800b1d2 <_printf_i+0x1ca>
 800b1cc:	0670      	lsls	r0, r6, #25
 800b1ce:	d5fb      	bpl.n	800b1c8 <_printf_i+0x1c0>
 800b1d0:	8019      	strh	r1, [r3, #0]
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	6123      	str	r3, [r4, #16]
 800b1d6:	4615      	mov	r5, r2
 800b1d8:	e7bc      	b.n	800b154 <_printf_i+0x14c>
 800b1da:	682b      	ldr	r3, [r5, #0]
 800b1dc:	1d1a      	adds	r2, r3, #4
 800b1de:	602a      	str	r2, [r5, #0]
 800b1e0:	681d      	ldr	r5, [r3, #0]
 800b1e2:	6862      	ldr	r2, [r4, #4]
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	f7f4 fffa 	bl	80001e0 <memchr>
 800b1ec:	b108      	cbz	r0, 800b1f2 <_printf_i+0x1ea>
 800b1ee:	1b40      	subs	r0, r0, r5
 800b1f0:	6060      	str	r0, [r4, #4]
 800b1f2:	6863      	ldr	r3, [r4, #4]
 800b1f4:	6123      	str	r3, [r4, #16]
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1fc:	e7aa      	b.n	800b154 <_printf_i+0x14c>
 800b1fe:	6923      	ldr	r3, [r4, #16]
 800b200:	462a      	mov	r2, r5
 800b202:	4649      	mov	r1, r9
 800b204:	4640      	mov	r0, r8
 800b206:	47d0      	blx	sl
 800b208:	3001      	adds	r0, #1
 800b20a:	d0ad      	beq.n	800b168 <_printf_i+0x160>
 800b20c:	6823      	ldr	r3, [r4, #0]
 800b20e:	079b      	lsls	r3, r3, #30
 800b210:	d413      	bmi.n	800b23a <_printf_i+0x232>
 800b212:	68e0      	ldr	r0, [r4, #12]
 800b214:	9b03      	ldr	r3, [sp, #12]
 800b216:	4298      	cmp	r0, r3
 800b218:	bfb8      	it	lt
 800b21a:	4618      	movlt	r0, r3
 800b21c:	e7a6      	b.n	800b16c <_printf_i+0x164>
 800b21e:	2301      	movs	r3, #1
 800b220:	4632      	mov	r2, r6
 800b222:	4649      	mov	r1, r9
 800b224:	4640      	mov	r0, r8
 800b226:	47d0      	blx	sl
 800b228:	3001      	adds	r0, #1
 800b22a:	d09d      	beq.n	800b168 <_printf_i+0x160>
 800b22c:	3501      	adds	r5, #1
 800b22e:	68e3      	ldr	r3, [r4, #12]
 800b230:	9903      	ldr	r1, [sp, #12]
 800b232:	1a5b      	subs	r3, r3, r1
 800b234:	42ab      	cmp	r3, r5
 800b236:	dcf2      	bgt.n	800b21e <_printf_i+0x216>
 800b238:	e7eb      	b.n	800b212 <_printf_i+0x20a>
 800b23a:	2500      	movs	r5, #0
 800b23c:	f104 0619 	add.w	r6, r4, #25
 800b240:	e7f5      	b.n	800b22e <_printf_i+0x226>
 800b242:	bf00      	nop
 800b244:	0801110b 	.word	0x0801110b
 800b248:	0801111c 	.word	0x0801111c

0800b24c <std>:
 800b24c:	2300      	movs	r3, #0
 800b24e:	b510      	push	{r4, lr}
 800b250:	4604      	mov	r4, r0
 800b252:	e9c0 3300 	strd	r3, r3, [r0]
 800b256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b25a:	6083      	str	r3, [r0, #8]
 800b25c:	8181      	strh	r1, [r0, #12]
 800b25e:	6643      	str	r3, [r0, #100]	; 0x64
 800b260:	81c2      	strh	r2, [r0, #14]
 800b262:	6183      	str	r3, [r0, #24]
 800b264:	4619      	mov	r1, r3
 800b266:	2208      	movs	r2, #8
 800b268:	305c      	adds	r0, #92	; 0x5c
 800b26a:	f000 f902 	bl	800b472 <memset>
 800b26e:	4b05      	ldr	r3, [pc, #20]	; (800b284 <std+0x38>)
 800b270:	6263      	str	r3, [r4, #36]	; 0x24
 800b272:	4b05      	ldr	r3, [pc, #20]	; (800b288 <std+0x3c>)
 800b274:	62a3      	str	r3, [r4, #40]	; 0x28
 800b276:	4b05      	ldr	r3, [pc, #20]	; (800b28c <std+0x40>)
 800b278:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b27a:	4b05      	ldr	r3, [pc, #20]	; (800b290 <std+0x44>)
 800b27c:	6224      	str	r4, [r4, #32]
 800b27e:	6323      	str	r3, [r4, #48]	; 0x30
 800b280:	bd10      	pop	{r4, pc}
 800b282:	bf00      	nop
 800b284:	0800b3ed 	.word	0x0800b3ed
 800b288:	0800b40f 	.word	0x0800b40f
 800b28c:	0800b447 	.word	0x0800b447
 800b290:	0800b46b 	.word	0x0800b46b

0800b294 <stdio_exit_handler>:
 800b294:	4a02      	ldr	r2, [pc, #8]	; (800b2a0 <stdio_exit_handler+0xc>)
 800b296:	4903      	ldr	r1, [pc, #12]	; (800b2a4 <stdio_exit_handler+0x10>)
 800b298:	4803      	ldr	r0, [pc, #12]	; (800b2a8 <stdio_exit_handler+0x14>)
 800b29a:	f000 b869 	b.w	800b370 <_fwalk_sglue>
 800b29e:	bf00      	nop
 800b2a0:	20001274 	.word	0x20001274
 800b2a4:	0800cf19 	.word	0x0800cf19
 800b2a8:	20001280 	.word	0x20001280

0800b2ac <cleanup_stdio>:
 800b2ac:	6841      	ldr	r1, [r0, #4]
 800b2ae:	4b0c      	ldr	r3, [pc, #48]	; (800b2e0 <cleanup_stdio+0x34>)
 800b2b0:	4299      	cmp	r1, r3
 800b2b2:	b510      	push	{r4, lr}
 800b2b4:	4604      	mov	r4, r0
 800b2b6:	d001      	beq.n	800b2bc <cleanup_stdio+0x10>
 800b2b8:	f001 fe2e 	bl	800cf18 <_fflush_r>
 800b2bc:	68a1      	ldr	r1, [r4, #8]
 800b2be:	4b09      	ldr	r3, [pc, #36]	; (800b2e4 <cleanup_stdio+0x38>)
 800b2c0:	4299      	cmp	r1, r3
 800b2c2:	d002      	beq.n	800b2ca <cleanup_stdio+0x1e>
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	f001 fe27 	bl	800cf18 <_fflush_r>
 800b2ca:	68e1      	ldr	r1, [r4, #12]
 800b2cc:	4b06      	ldr	r3, [pc, #24]	; (800b2e8 <cleanup_stdio+0x3c>)
 800b2ce:	4299      	cmp	r1, r3
 800b2d0:	d004      	beq.n	800b2dc <cleanup_stdio+0x30>
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2d8:	f001 be1e 	b.w	800cf18 <_fflush_r>
 800b2dc:	bd10      	pop	{r4, pc}
 800b2de:	bf00      	nop
 800b2e0:	200015f8 	.word	0x200015f8
 800b2e4:	20001660 	.word	0x20001660
 800b2e8:	200016c8 	.word	0x200016c8

0800b2ec <global_stdio_init.part.0>:
 800b2ec:	b510      	push	{r4, lr}
 800b2ee:	4b0b      	ldr	r3, [pc, #44]	; (800b31c <global_stdio_init.part.0+0x30>)
 800b2f0:	4c0b      	ldr	r4, [pc, #44]	; (800b320 <global_stdio_init.part.0+0x34>)
 800b2f2:	4a0c      	ldr	r2, [pc, #48]	; (800b324 <global_stdio_init.part.0+0x38>)
 800b2f4:	601a      	str	r2, [r3, #0]
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	2104      	movs	r1, #4
 800b2fc:	f7ff ffa6 	bl	800b24c <std>
 800b300:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b304:	2201      	movs	r2, #1
 800b306:	2109      	movs	r1, #9
 800b308:	f7ff ffa0 	bl	800b24c <std>
 800b30c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b310:	2202      	movs	r2, #2
 800b312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b316:	2112      	movs	r1, #18
 800b318:	f7ff bf98 	b.w	800b24c <std>
 800b31c:	20001730 	.word	0x20001730
 800b320:	200015f8 	.word	0x200015f8
 800b324:	0800b295 	.word	0x0800b295

0800b328 <__sfp_lock_acquire>:
 800b328:	4801      	ldr	r0, [pc, #4]	; (800b330 <__sfp_lock_acquire+0x8>)
 800b32a:	f000 b99d 	b.w	800b668 <__retarget_lock_acquire_recursive>
 800b32e:	bf00      	nop
 800b330:	20001739 	.word	0x20001739

0800b334 <__sfp_lock_release>:
 800b334:	4801      	ldr	r0, [pc, #4]	; (800b33c <__sfp_lock_release+0x8>)
 800b336:	f000 b998 	b.w	800b66a <__retarget_lock_release_recursive>
 800b33a:	bf00      	nop
 800b33c:	20001739 	.word	0x20001739

0800b340 <__sinit>:
 800b340:	b510      	push	{r4, lr}
 800b342:	4604      	mov	r4, r0
 800b344:	f7ff fff0 	bl	800b328 <__sfp_lock_acquire>
 800b348:	6a23      	ldr	r3, [r4, #32]
 800b34a:	b11b      	cbz	r3, 800b354 <__sinit+0x14>
 800b34c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b350:	f7ff bff0 	b.w	800b334 <__sfp_lock_release>
 800b354:	4b04      	ldr	r3, [pc, #16]	; (800b368 <__sinit+0x28>)
 800b356:	6223      	str	r3, [r4, #32]
 800b358:	4b04      	ldr	r3, [pc, #16]	; (800b36c <__sinit+0x2c>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1f5      	bne.n	800b34c <__sinit+0xc>
 800b360:	f7ff ffc4 	bl	800b2ec <global_stdio_init.part.0>
 800b364:	e7f2      	b.n	800b34c <__sinit+0xc>
 800b366:	bf00      	nop
 800b368:	0800b2ad 	.word	0x0800b2ad
 800b36c:	20001730 	.word	0x20001730

0800b370 <_fwalk_sglue>:
 800b370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b374:	4607      	mov	r7, r0
 800b376:	4688      	mov	r8, r1
 800b378:	4614      	mov	r4, r2
 800b37a:	2600      	movs	r6, #0
 800b37c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b380:	f1b9 0901 	subs.w	r9, r9, #1
 800b384:	d505      	bpl.n	800b392 <_fwalk_sglue+0x22>
 800b386:	6824      	ldr	r4, [r4, #0]
 800b388:	2c00      	cmp	r4, #0
 800b38a:	d1f7      	bne.n	800b37c <_fwalk_sglue+0xc>
 800b38c:	4630      	mov	r0, r6
 800b38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b392:	89ab      	ldrh	r3, [r5, #12]
 800b394:	2b01      	cmp	r3, #1
 800b396:	d907      	bls.n	800b3a8 <_fwalk_sglue+0x38>
 800b398:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b39c:	3301      	adds	r3, #1
 800b39e:	d003      	beq.n	800b3a8 <_fwalk_sglue+0x38>
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	4638      	mov	r0, r7
 800b3a4:	47c0      	blx	r8
 800b3a6:	4306      	orrs	r6, r0
 800b3a8:	3568      	adds	r5, #104	; 0x68
 800b3aa:	e7e9      	b.n	800b380 <_fwalk_sglue+0x10>

0800b3ac <siprintf>:
 800b3ac:	b40e      	push	{r1, r2, r3}
 800b3ae:	b500      	push	{lr}
 800b3b0:	b09c      	sub	sp, #112	; 0x70
 800b3b2:	ab1d      	add	r3, sp, #116	; 0x74
 800b3b4:	9002      	str	r0, [sp, #8]
 800b3b6:	9006      	str	r0, [sp, #24]
 800b3b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b3bc:	4809      	ldr	r0, [pc, #36]	; (800b3e4 <siprintf+0x38>)
 800b3be:	9107      	str	r1, [sp, #28]
 800b3c0:	9104      	str	r1, [sp, #16]
 800b3c2:	4909      	ldr	r1, [pc, #36]	; (800b3e8 <siprintf+0x3c>)
 800b3c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3c8:	9105      	str	r1, [sp, #20]
 800b3ca:	6800      	ldr	r0, [r0, #0]
 800b3cc:	9301      	str	r3, [sp, #4]
 800b3ce:	a902      	add	r1, sp, #8
 800b3d0:	f001 fc1e 	bl	800cc10 <_svfiprintf_r>
 800b3d4:	9b02      	ldr	r3, [sp, #8]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	701a      	strb	r2, [r3, #0]
 800b3da:	b01c      	add	sp, #112	; 0x70
 800b3dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3e0:	b003      	add	sp, #12
 800b3e2:	4770      	bx	lr
 800b3e4:	200012cc 	.word	0x200012cc
 800b3e8:	ffff0208 	.word	0xffff0208

0800b3ec <__sread>:
 800b3ec:	b510      	push	{r4, lr}
 800b3ee:	460c      	mov	r4, r1
 800b3f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f4:	f000 f8da 	bl	800b5ac <_read_r>
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	bfab      	itete	ge
 800b3fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b3fe:	89a3      	ldrhlt	r3, [r4, #12]
 800b400:	181b      	addge	r3, r3, r0
 800b402:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b406:	bfac      	ite	ge
 800b408:	6563      	strge	r3, [r4, #84]	; 0x54
 800b40a:	81a3      	strhlt	r3, [r4, #12]
 800b40c:	bd10      	pop	{r4, pc}

0800b40e <__swrite>:
 800b40e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b412:	461f      	mov	r7, r3
 800b414:	898b      	ldrh	r3, [r1, #12]
 800b416:	05db      	lsls	r3, r3, #23
 800b418:	4605      	mov	r5, r0
 800b41a:	460c      	mov	r4, r1
 800b41c:	4616      	mov	r6, r2
 800b41e:	d505      	bpl.n	800b42c <__swrite+0x1e>
 800b420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b424:	2302      	movs	r3, #2
 800b426:	2200      	movs	r2, #0
 800b428:	f000 f8ae 	bl	800b588 <_lseek_r>
 800b42c:	89a3      	ldrh	r3, [r4, #12]
 800b42e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b432:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b436:	81a3      	strh	r3, [r4, #12]
 800b438:	4632      	mov	r2, r6
 800b43a:	463b      	mov	r3, r7
 800b43c:	4628      	mov	r0, r5
 800b43e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b442:	f000 b8d5 	b.w	800b5f0 <_write_r>

0800b446 <__sseek>:
 800b446:	b510      	push	{r4, lr}
 800b448:	460c      	mov	r4, r1
 800b44a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b44e:	f000 f89b 	bl	800b588 <_lseek_r>
 800b452:	1c43      	adds	r3, r0, #1
 800b454:	89a3      	ldrh	r3, [r4, #12]
 800b456:	bf15      	itete	ne
 800b458:	6560      	strne	r0, [r4, #84]	; 0x54
 800b45a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b45e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b462:	81a3      	strheq	r3, [r4, #12]
 800b464:	bf18      	it	ne
 800b466:	81a3      	strhne	r3, [r4, #12]
 800b468:	bd10      	pop	{r4, pc}

0800b46a <__sclose>:
 800b46a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b46e:	f000 b87b 	b.w	800b568 <_close_r>

0800b472 <memset>:
 800b472:	4402      	add	r2, r0
 800b474:	4603      	mov	r3, r0
 800b476:	4293      	cmp	r3, r2
 800b478:	d100      	bne.n	800b47c <memset+0xa>
 800b47a:	4770      	bx	lr
 800b47c:	f803 1b01 	strb.w	r1, [r3], #1
 800b480:	e7f9      	b.n	800b476 <memset+0x4>

0800b482 <strncmp>:
 800b482:	b510      	push	{r4, lr}
 800b484:	b16a      	cbz	r2, 800b4a2 <strncmp+0x20>
 800b486:	3901      	subs	r1, #1
 800b488:	1884      	adds	r4, r0, r2
 800b48a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b48e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b492:	429a      	cmp	r2, r3
 800b494:	d103      	bne.n	800b49e <strncmp+0x1c>
 800b496:	42a0      	cmp	r0, r4
 800b498:	d001      	beq.n	800b49e <strncmp+0x1c>
 800b49a:	2a00      	cmp	r2, #0
 800b49c:	d1f5      	bne.n	800b48a <strncmp+0x8>
 800b49e:	1ad0      	subs	r0, r2, r3
 800b4a0:	bd10      	pop	{r4, pc}
 800b4a2:	4610      	mov	r0, r2
 800b4a4:	e7fc      	b.n	800b4a0 <strncmp+0x1e>
	...

0800b4a8 <strtok>:
 800b4a8:	4b16      	ldr	r3, [pc, #88]	; (800b504 <strtok+0x5c>)
 800b4aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4ac:	681e      	ldr	r6, [r3, #0]
 800b4ae:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800b4b0:	4605      	mov	r5, r0
 800b4b2:	b9fc      	cbnz	r4, 800b4f4 <strtok+0x4c>
 800b4b4:	2050      	movs	r0, #80	; 0x50
 800b4b6:	9101      	str	r1, [sp, #4]
 800b4b8:	f7ff f91a 	bl	800a6f0 <malloc>
 800b4bc:	9901      	ldr	r1, [sp, #4]
 800b4be:	6470      	str	r0, [r6, #68]	; 0x44
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	b920      	cbnz	r0, 800b4ce <strtok+0x26>
 800b4c4:	4b10      	ldr	r3, [pc, #64]	; (800b508 <strtok+0x60>)
 800b4c6:	4811      	ldr	r0, [pc, #68]	; (800b50c <strtok+0x64>)
 800b4c8:	215b      	movs	r1, #91	; 0x5b
 800b4ca:	f000 f8e5 	bl	800b698 <__assert_func>
 800b4ce:	e9c0 4400 	strd	r4, r4, [r0]
 800b4d2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b4d6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b4da:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b4de:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b4e2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b4e6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b4ea:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b4ee:	6184      	str	r4, [r0, #24]
 800b4f0:	7704      	strb	r4, [r0, #28]
 800b4f2:	6244      	str	r4, [r0, #36]	; 0x24
 800b4f4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	4628      	mov	r0, r5
 800b4fa:	b002      	add	sp, #8
 800b4fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b500:	f000 b806 	b.w	800b510 <__strtok_r>
 800b504:	200012cc 	.word	0x200012cc
 800b508:	0801112d 	.word	0x0801112d
 800b50c:	08011144 	.word	0x08011144

0800b510 <__strtok_r>:
 800b510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b512:	b908      	cbnz	r0, 800b518 <__strtok_r+0x8>
 800b514:	6810      	ldr	r0, [r2, #0]
 800b516:	b188      	cbz	r0, 800b53c <__strtok_r+0x2c>
 800b518:	4604      	mov	r4, r0
 800b51a:	4620      	mov	r0, r4
 800b51c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b520:	460f      	mov	r7, r1
 800b522:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b526:	b91e      	cbnz	r6, 800b530 <__strtok_r+0x20>
 800b528:	b965      	cbnz	r5, 800b544 <__strtok_r+0x34>
 800b52a:	6015      	str	r5, [r2, #0]
 800b52c:	4628      	mov	r0, r5
 800b52e:	e005      	b.n	800b53c <__strtok_r+0x2c>
 800b530:	42b5      	cmp	r5, r6
 800b532:	d1f6      	bne.n	800b522 <__strtok_r+0x12>
 800b534:	2b00      	cmp	r3, #0
 800b536:	d1f0      	bne.n	800b51a <__strtok_r+0xa>
 800b538:	6014      	str	r4, [r2, #0]
 800b53a:	7003      	strb	r3, [r0, #0]
 800b53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b53e:	461c      	mov	r4, r3
 800b540:	e00c      	b.n	800b55c <__strtok_r+0x4c>
 800b542:	b915      	cbnz	r5, 800b54a <__strtok_r+0x3a>
 800b544:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b548:	460e      	mov	r6, r1
 800b54a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b54e:	42ab      	cmp	r3, r5
 800b550:	d1f7      	bne.n	800b542 <__strtok_r+0x32>
 800b552:	2b00      	cmp	r3, #0
 800b554:	d0f3      	beq.n	800b53e <__strtok_r+0x2e>
 800b556:	2300      	movs	r3, #0
 800b558:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b55c:	6014      	str	r4, [r2, #0]
 800b55e:	e7ed      	b.n	800b53c <__strtok_r+0x2c>

0800b560 <_localeconv_r>:
 800b560:	4800      	ldr	r0, [pc, #0]	; (800b564 <_localeconv_r+0x4>)
 800b562:	4770      	bx	lr
 800b564:	200013c0 	.word	0x200013c0

0800b568 <_close_r>:
 800b568:	b538      	push	{r3, r4, r5, lr}
 800b56a:	4d06      	ldr	r5, [pc, #24]	; (800b584 <_close_r+0x1c>)
 800b56c:	2300      	movs	r3, #0
 800b56e:	4604      	mov	r4, r0
 800b570:	4608      	mov	r0, r1
 800b572:	602b      	str	r3, [r5, #0]
 800b574:	f7fb fa1d 	bl	80069b2 <_close>
 800b578:	1c43      	adds	r3, r0, #1
 800b57a:	d102      	bne.n	800b582 <_close_r+0x1a>
 800b57c:	682b      	ldr	r3, [r5, #0]
 800b57e:	b103      	cbz	r3, 800b582 <_close_r+0x1a>
 800b580:	6023      	str	r3, [r4, #0]
 800b582:	bd38      	pop	{r3, r4, r5, pc}
 800b584:	20001734 	.word	0x20001734

0800b588 <_lseek_r>:
 800b588:	b538      	push	{r3, r4, r5, lr}
 800b58a:	4d07      	ldr	r5, [pc, #28]	; (800b5a8 <_lseek_r+0x20>)
 800b58c:	4604      	mov	r4, r0
 800b58e:	4608      	mov	r0, r1
 800b590:	4611      	mov	r1, r2
 800b592:	2200      	movs	r2, #0
 800b594:	602a      	str	r2, [r5, #0]
 800b596:	461a      	mov	r2, r3
 800b598:	f7fb fa32 	bl	8006a00 <_lseek>
 800b59c:	1c43      	adds	r3, r0, #1
 800b59e:	d102      	bne.n	800b5a6 <_lseek_r+0x1e>
 800b5a0:	682b      	ldr	r3, [r5, #0]
 800b5a2:	b103      	cbz	r3, 800b5a6 <_lseek_r+0x1e>
 800b5a4:	6023      	str	r3, [r4, #0]
 800b5a6:	bd38      	pop	{r3, r4, r5, pc}
 800b5a8:	20001734 	.word	0x20001734

0800b5ac <_read_r>:
 800b5ac:	b538      	push	{r3, r4, r5, lr}
 800b5ae:	4d07      	ldr	r5, [pc, #28]	; (800b5cc <_read_r+0x20>)
 800b5b0:	4604      	mov	r4, r0
 800b5b2:	4608      	mov	r0, r1
 800b5b4:	4611      	mov	r1, r2
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	602a      	str	r2, [r5, #0]
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	f7fb f9c0 	bl	8006940 <_read>
 800b5c0:	1c43      	adds	r3, r0, #1
 800b5c2:	d102      	bne.n	800b5ca <_read_r+0x1e>
 800b5c4:	682b      	ldr	r3, [r5, #0]
 800b5c6:	b103      	cbz	r3, 800b5ca <_read_r+0x1e>
 800b5c8:	6023      	str	r3, [r4, #0]
 800b5ca:	bd38      	pop	{r3, r4, r5, pc}
 800b5cc:	20001734 	.word	0x20001734

0800b5d0 <_sbrk_r>:
 800b5d0:	b538      	push	{r3, r4, r5, lr}
 800b5d2:	4d06      	ldr	r5, [pc, #24]	; (800b5ec <_sbrk_r+0x1c>)
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	4604      	mov	r4, r0
 800b5d8:	4608      	mov	r0, r1
 800b5da:	602b      	str	r3, [r5, #0]
 800b5dc:	f7fb fa1e 	bl	8006a1c <_sbrk>
 800b5e0:	1c43      	adds	r3, r0, #1
 800b5e2:	d102      	bne.n	800b5ea <_sbrk_r+0x1a>
 800b5e4:	682b      	ldr	r3, [r5, #0]
 800b5e6:	b103      	cbz	r3, 800b5ea <_sbrk_r+0x1a>
 800b5e8:	6023      	str	r3, [r4, #0]
 800b5ea:	bd38      	pop	{r3, r4, r5, pc}
 800b5ec:	20001734 	.word	0x20001734

0800b5f0 <_write_r>:
 800b5f0:	b538      	push	{r3, r4, r5, lr}
 800b5f2:	4d07      	ldr	r5, [pc, #28]	; (800b610 <_write_r+0x20>)
 800b5f4:	4604      	mov	r4, r0
 800b5f6:	4608      	mov	r0, r1
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	602a      	str	r2, [r5, #0]
 800b5fe:	461a      	mov	r2, r3
 800b600:	f7fb f9bb 	bl	800697a <_write>
 800b604:	1c43      	adds	r3, r0, #1
 800b606:	d102      	bne.n	800b60e <_write_r+0x1e>
 800b608:	682b      	ldr	r3, [r5, #0]
 800b60a:	b103      	cbz	r3, 800b60e <_write_r+0x1e>
 800b60c:	6023      	str	r3, [r4, #0]
 800b60e:	bd38      	pop	{r3, r4, r5, pc}
 800b610:	20001734 	.word	0x20001734

0800b614 <__errno>:
 800b614:	4b01      	ldr	r3, [pc, #4]	; (800b61c <__errno+0x8>)
 800b616:	6818      	ldr	r0, [r3, #0]
 800b618:	4770      	bx	lr
 800b61a:	bf00      	nop
 800b61c:	200012cc 	.word	0x200012cc

0800b620 <__libc_init_array>:
 800b620:	b570      	push	{r4, r5, r6, lr}
 800b622:	4d0d      	ldr	r5, [pc, #52]	; (800b658 <__libc_init_array+0x38>)
 800b624:	4c0d      	ldr	r4, [pc, #52]	; (800b65c <__libc_init_array+0x3c>)
 800b626:	1b64      	subs	r4, r4, r5
 800b628:	10a4      	asrs	r4, r4, #2
 800b62a:	2600      	movs	r6, #0
 800b62c:	42a6      	cmp	r6, r4
 800b62e:	d109      	bne.n	800b644 <__libc_init_array+0x24>
 800b630:	4d0b      	ldr	r5, [pc, #44]	; (800b660 <__libc_init_array+0x40>)
 800b632:	4c0c      	ldr	r4, [pc, #48]	; (800b664 <__libc_init_array+0x44>)
 800b634:	f004 fe1a 	bl	801026c <_init>
 800b638:	1b64      	subs	r4, r4, r5
 800b63a:	10a4      	asrs	r4, r4, #2
 800b63c:	2600      	movs	r6, #0
 800b63e:	42a6      	cmp	r6, r4
 800b640:	d105      	bne.n	800b64e <__libc_init_array+0x2e>
 800b642:	bd70      	pop	{r4, r5, r6, pc}
 800b644:	f855 3b04 	ldr.w	r3, [r5], #4
 800b648:	4798      	blx	r3
 800b64a:	3601      	adds	r6, #1
 800b64c:	e7ee      	b.n	800b62c <__libc_init_array+0xc>
 800b64e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b652:	4798      	blx	r3
 800b654:	3601      	adds	r6, #1
 800b656:	e7f2      	b.n	800b63e <__libc_init_array+0x1e>
 800b658:	08011648 	.word	0x08011648
 800b65c:	08011648 	.word	0x08011648
 800b660:	08011648 	.word	0x08011648
 800b664:	0801164c 	.word	0x0801164c

0800b668 <__retarget_lock_acquire_recursive>:
 800b668:	4770      	bx	lr

0800b66a <__retarget_lock_release_recursive>:
 800b66a:	4770      	bx	lr

0800b66c <strcpy>:
 800b66c:	4603      	mov	r3, r0
 800b66e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b672:	f803 2b01 	strb.w	r2, [r3], #1
 800b676:	2a00      	cmp	r2, #0
 800b678:	d1f9      	bne.n	800b66e <strcpy+0x2>
 800b67a:	4770      	bx	lr

0800b67c <memcpy>:
 800b67c:	440a      	add	r2, r1
 800b67e:	4291      	cmp	r1, r2
 800b680:	f100 33ff 	add.w	r3, r0, #4294967295
 800b684:	d100      	bne.n	800b688 <memcpy+0xc>
 800b686:	4770      	bx	lr
 800b688:	b510      	push	{r4, lr}
 800b68a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b68e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b692:	4291      	cmp	r1, r2
 800b694:	d1f9      	bne.n	800b68a <memcpy+0xe>
 800b696:	bd10      	pop	{r4, pc}

0800b698 <__assert_func>:
 800b698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b69a:	4614      	mov	r4, r2
 800b69c:	461a      	mov	r2, r3
 800b69e:	4b09      	ldr	r3, [pc, #36]	; (800b6c4 <__assert_func+0x2c>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4605      	mov	r5, r0
 800b6a4:	68d8      	ldr	r0, [r3, #12]
 800b6a6:	b14c      	cbz	r4, 800b6bc <__assert_func+0x24>
 800b6a8:	4b07      	ldr	r3, [pc, #28]	; (800b6c8 <__assert_func+0x30>)
 800b6aa:	9100      	str	r1, [sp, #0]
 800b6ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b6b0:	4906      	ldr	r1, [pc, #24]	; (800b6cc <__assert_func+0x34>)
 800b6b2:	462b      	mov	r3, r5
 800b6b4:	f001 fc58 	bl	800cf68 <fiprintf>
 800b6b8:	f001 fc82 	bl	800cfc0 <abort>
 800b6bc:	4b04      	ldr	r3, [pc, #16]	; (800b6d0 <__assert_func+0x38>)
 800b6be:	461c      	mov	r4, r3
 800b6c0:	e7f3      	b.n	800b6aa <__assert_func+0x12>
 800b6c2:	bf00      	nop
 800b6c4:	200012cc 	.word	0x200012cc
 800b6c8:	0801119e 	.word	0x0801119e
 800b6cc:	080111ab 	.word	0x080111ab
 800b6d0:	080111d9 	.word	0x080111d9

0800b6d4 <quorem>:
 800b6d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d8:	6903      	ldr	r3, [r0, #16]
 800b6da:	690c      	ldr	r4, [r1, #16]
 800b6dc:	42a3      	cmp	r3, r4
 800b6de:	4607      	mov	r7, r0
 800b6e0:	db7e      	blt.n	800b7e0 <quorem+0x10c>
 800b6e2:	3c01      	subs	r4, #1
 800b6e4:	f101 0814 	add.w	r8, r1, #20
 800b6e8:	f100 0514 	add.w	r5, r0, #20
 800b6ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6f0:	9301      	str	r3, [sp, #4]
 800b6f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b6f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b702:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b706:	fbb2 f6f3 	udiv	r6, r2, r3
 800b70a:	d331      	bcc.n	800b770 <quorem+0x9c>
 800b70c:	f04f 0e00 	mov.w	lr, #0
 800b710:	4640      	mov	r0, r8
 800b712:	46ac      	mov	ip, r5
 800b714:	46f2      	mov	sl, lr
 800b716:	f850 2b04 	ldr.w	r2, [r0], #4
 800b71a:	b293      	uxth	r3, r2
 800b71c:	fb06 e303 	mla	r3, r6, r3, lr
 800b720:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b724:	0c1a      	lsrs	r2, r3, #16
 800b726:	b29b      	uxth	r3, r3
 800b728:	ebaa 0303 	sub.w	r3, sl, r3
 800b72c:	f8dc a000 	ldr.w	sl, [ip]
 800b730:	fa13 f38a 	uxtah	r3, r3, sl
 800b734:	fb06 220e 	mla	r2, r6, lr, r2
 800b738:	9300      	str	r3, [sp, #0]
 800b73a:	9b00      	ldr	r3, [sp, #0]
 800b73c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b740:	b292      	uxth	r2, r2
 800b742:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b746:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b74a:	f8bd 3000 	ldrh.w	r3, [sp]
 800b74e:	4581      	cmp	r9, r0
 800b750:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b754:	f84c 3b04 	str.w	r3, [ip], #4
 800b758:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b75c:	d2db      	bcs.n	800b716 <quorem+0x42>
 800b75e:	f855 300b 	ldr.w	r3, [r5, fp]
 800b762:	b92b      	cbnz	r3, 800b770 <quorem+0x9c>
 800b764:	9b01      	ldr	r3, [sp, #4]
 800b766:	3b04      	subs	r3, #4
 800b768:	429d      	cmp	r5, r3
 800b76a:	461a      	mov	r2, r3
 800b76c:	d32c      	bcc.n	800b7c8 <quorem+0xf4>
 800b76e:	613c      	str	r4, [r7, #16]
 800b770:	4638      	mov	r0, r7
 800b772:	f001 f8f3 	bl	800c95c <__mcmp>
 800b776:	2800      	cmp	r0, #0
 800b778:	db22      	blt.n	800b7c0 <quorem+0xec>
 800b77a:	3601      	adds	r6, #1
 800b77c:	4629      	mov	r1, r5
 800b77e:	2000      	movs	r0, #0
 800b780:	f858 2b04 	ldr.w	r2, [r8], #4
 800b784:	f8d1 c000 	ldr.w	ip, [r1]
 800b788:	b293      	uxth	r3, r2
 800b78a:	1ac3      	subs	r3, r0, r3
 800b78c:	0c12      	lsrs	r2, r2, #16
 800b78e:	fa13 f38c 	uxtah	r3, r3, ip
 800b792:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b796:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7a0:	45c1      	cmp	r9, r8
 800b7a2:	f841 3b04 	str.w	r3, [r1], #4
 800b7a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b7aa:	d2e9      	bcs.n	800b780 <quorem+0xac>
 800b7ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7b4:	b922      	cbnz	r2, 800b7c0 <quorem+0xec>
 800b7b6:	3b04      	subs	r3, #4
 800b7b8:	429d      	cmp	r5, r3
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	d30a      	bcc.n	800b7d4 <quorem+0x100>
 800b7be:	613c      	str	r4, [r7, #16]
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	b003      	add	sp, #12
 800b7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c8:	6812      	ldr	r2, [r2, #0]
 800b7ca:	3b04      	subs	r3, #4
 800b7cc:	2a00      	cmp	r2, #0
 800b7ce:	d1ce      	bne.n	800b76e <quorem+0x9a>
 800b7d0:	3c01      	subs	r4, #1
 800b7d2:	e7c9      	b.n	800b768 <quorem+0x94>
 800b7d4:	6812      	ldr	r2, [r2, #0]
 800b7d6:	3b04      	subs	r3, #4
 800b7d8:	2a00      	cmp	r2, #0
 800b7da:	d1f0      	bne.n	800b7be <quorem+0xea>
 800b7dc:	3c01      	subs	r4, #1
 800b7de:	e7eb      	b.n	800b7b8 <quorem+0xe4>
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	e7ee      	b.n	800b7c2 <quorem+0xee>
 800b7e4:	0000      	movs	r0, r0
	...

0800b7e8 <_dtoa_r>:
 800b7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ec:	ed2d 8b04 	vpush	{d8-d9}
 800b7f0:	69c5      	ldr	r5, [r0, #28]
 800b7f2:	b093      	sub	sp, #76	; 0x4c
 800b7f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b7f8:	ec57 6b10 	vmov	r6, r7, d0
 800b7fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b800:	9107      	str	r1, [sp, #28]
 800b802:	4604      	mov	r4, r0
 800b804:	920a      	str	r2, [sp, #40]	; 0x28
 800b806:	930d      	str	r3, [sp, #52]	; 0x34
 800b808:	b975      	cbnz	r5, 800b828 <_dtoa_r+0x40>
 800b80a:	2010      	movs	r0, #16
 800b80c:	f7fe ff70 	bl	800a6f0 <malloc>
 800b810:	4602      	mov	r2, r0
 800b812:	61e0      	str	r0, [r4, #28]
 800b814:	b920      	cbnz	r0, 800b820 <_dtoa_r+0x38>
 800b816:	4bae      	ldr	r3, [pc, #696]	; (800bad0 <_dtoa_r+0x2e8>)
 800b818:	21ef      	movs	r1, #239	; 0xef
 800b81a:	48ae      	ldr	r0, [pc, #696]	; (800bad4 <_dtoa_r+0x2ec>)
 800b81c:	f7ff ff3c 	bl	800b698 <__assert_func>
 800b820:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b824:	6005      	str	r5, [r0, #0]
 800b826:	60c5      	str	r5, [r0, #12]
 800b828:	69e3      	ldr	r3, [r4, #28]
 800b82a:	6819      	ldr	r1, [r3, #0]
 800b82c:	b151      	cbz	r1, 800b844 <_dtoa_r+0x5c>
 800b82e:	685a      	ldr	r2, [r3, #4]
 800b830:	604a      	str	r2, [r1, #4]
 800b832:	2301      	movs	r3, #1
 800b834:	4093      	lsls	r3, r2
 800b836:	608b      	str	r3, [r1, #8]
 800b838:	4620      	mov	r0, r4
 800b83a:	f000 fe53 	bl	800c4e4 <_Bfree>
 800b83e:	69e3      	ldr	r3, [r4, #28]
 800b840:	2200      	movs	r2, #0
 800b842:	601a      	str	r2, [r3, #0]
 800b844:	1e3b      	subs	r3, r7, #0
 800b846:	bfbb      	ittet	lt
 800b848:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b84c:	9303      	strlt	r3, [sp, #12]
 800b84e:	2300      	movge	r3, #0
 800b850:	2201      	movlt	r2, #1
 800b852:	bfac      	ite	ge
 800b854:	f8c8 3000 	strge.w	r3, [r8]
 800b858:	f8c8 2000 	strlt.w	r2, [r8]
 800b85c:	4b9e      	ldr	r3, [pc, #632]	; (800bad8 <_dtoa_r+0x2f0>)
 800b85e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b862:	ea33 0308 	bics.w	r3, r3, r8
 800b866:	d11b      	bne.n	800b8a0 <_dtoa_r+0xb8>
 800b868:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b86a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b86e:	6013      	str	r3, [r2, #0]
 800b870:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b874:	4333      	orrs	r3, r6
 800b876:	f000 8593 	beq.w	800c3a0 <_dtoa_r+0xbb8>
 800b87a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b87c:	b963      	cbnz	r3, 800b898 <_dtoa_r+0xb0>
 800b87e:	4b97      	ldr	r3, [pc, #604]	; (800badc <_dtoa_r+0x2f4>)
 800b880:	e027      	b.n	800b8d2 <_dtoa_r+0xea>
 800b882:	4b97      	ldr	r3, [pc, #604]	; (800bae0 <_dtoa_r+0x2f8>)
 800b884:	9300      	str	r3, [sp, #0]
 800b886:	3308      	adds	r3, #8
 800b888:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b88a:	6013      	str	r3, [r2, #0]
 800b88c:	9800      	ldr	r0, [sp, #0]
 800b88e:	b013      	add	sp, #76	; 0x4c
 800b890:	ecbd 8b04 	vpop	{d8-d9}
 800b894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b898:	4b90      	ldr	r3, [pc, #576]	; (800badc <_dtoa_r+0x2f4>)
 800b89a:	9300      	str	r3, [sp, #0]
 800b89c:	3303      	adds	r3, #3
 800b89e:	e7f3      	b.n	800b888 <_dtoa_r+0xa0>
 800b8a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	ec51 0b17 	vmov	r0, r1, d7
 800b8aa:	eeb0 8a47 	vmov.f32	s16, s14
 800b8ae:	eef0 8a67 	vmov.f32	s17, s15
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	f7f5 f910 	bl	8000ad8 <__aeabi_dcmpeq>
 800b8b8:	4681      	mov	r9, r0
 800b8ba:	b160      	cbz	r0, 800b8d6 <_dtoa_r+0xee>
 800b8bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b8be:	2301      	movs	r3, #1
 800b8c0:	6013      	str	r3, [r2, #0]
 800b8c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	f000 8568 	beq.w	800c39a <_dtoa_r+0xbb2>
 800b8ca:	4b86      	ldr	r3, [pc, #536]	; (800bae4 <_dtoa_r+0x2fc>)
 800b8cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b8ce:	6013      	str	r3, [r2, #0]
 800b8d0:	3b01      	subs	r3, #1
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	e7da      	b.n	800b88c <_dtoa_r+0xa4>
 800b8d6:	aa10      	add	r2, sp, #64	; 0x40
 800b8d8:	a911      	add	r1, sp, #68	; 0x44
 800b8da:	4620      	mov	r0, r4
 800b8dc:	eeb0 0a48 	vmov.f32	s0, s16
 800b8e0:	eef0 0a68 	vmov.f32	s1, s17
 800b8e4:	f001 f8e0 	bl	800caa8 <__d2b>
 800b8e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b8ec:	4682      	mov	sl, r0
 800b8ee:	2d00      	cmp	r5, #0
 800b8f0:	d07f      	beq.n	800b9f2 <_dtoa_r+0x20a>
 800b8f2:	ee18 3a90 	vmov	r3, s17
 800b8f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b8fe:	ec51 0b18 	vmov	r0, r1, d8
 800b902:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b906:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b90a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b90e:	4619      	mov	r1, r3
 800b910:	2200      	movs	r2, #0
 800b912:	4b75      	ldr	r3, [pc, #468]	; (800bae8 <_dtoa_r+0x300>)
 800b914:	f7f4 fcc0 	bl	8000298 <__aeabi_dsub>
 800b918:	a367      	add	r3, pc, #412	; (adr r3, 800bab8 <_dtoa_r+0x2d0>)
 800b91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91e:	f7f4 fe73 	bl	8000608 <__aeabi_dmul>
 800b922:	a367      	add	r3, pc, #412	; (adr r3, 800bac0 <_dtoa_r+0x2d8>)
 800b924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b928:	f7f4 fcb8 	bl	800029c <__adddf3>
 800b92c:	4606      	mov	r6, r0
 800b92e:	4628      	mov	r0, r5
 800b930:	460f      	mov	r7, r1
 800b932:	f7f4 fdff 	bl	8000534 <__aeabi_i2d>
 800b936:	a364      	add	r3, pc, #400	; (adr r3, 800bac8 <_dtoa_r+0x2e0>)
 800b938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93c:	f7f4 fe64 	bl	8000608 <__aeabi_dmul>
 800b940:	4602      	mov	r2, r0
 800b942:	460b      	mov	r3, r1
 800b944:	4630      	mov	r0, r6
 800b946:	4639      	mov	r1, r7
 800b948:	f7f4 fca8 	bl	800029c <__adddf3>
 800b94c:	4606      	mov	r6, r0
 800b94e:	460f      	mov	r7, r1
 800b950:	f7f5 f90a 	bl	8000b68 <__aeabi_d2iz>
 800b954:	2200      	movs	r2, #0
 800b956:	4683      	mov	fp, r0
 800b958:	2300      	movs	r3, #0
 800b95a:	4630      	mov	r0, r6
 800b95c:	4639      	mov	r1, r7
 800b95e:	f7f5 f8c5 	bl	8000aec <__aeabi_dcmplt>
 800b962:	b148      	cbz	r0, 800b978 <_dtoa_r+0x190>
 800b964:	4658      	mov	r0, fp
 800b966:	f7f4 fde5 	bl	8000534 <__aeabi_i2d>
 800b96a:	4632      	mov	r2, r6
 800b96c:	463b      	mov	r3, r7
 800b96e:	f7f5 f8b3 	bl	8000ad8 <__aeabi_dcmpeq>
 800b972:	b908      	cbnz	r0, 800b978 <_dtoa_r+0x190>
 800b974:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b978:	f1bb 0f16 	cmp.w	fp, #22
 800b97c:	d857      	bhi.n	800ba2e <_dtoa_r+0x246>
 800b97e:	4b5b      	ldr	r3, [pc, #364]	; (800baec <_dtoa_r+0x304>)
 800b980:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b988:	ec51 0b18 	vmov	r0, r1, d8
 800b98c:	f7f5 f8ae 	bl	8000aec <__aeabi_dcmplt>
 800b990:	2800      	cmp	r0, #0
 800b992:	d04e      	beq.n	800ba32 <_dtoa_r+0x24a>
 800b994:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b998:	2300      	movs	r3, #0
 800b99a:	930c      	str	r3, [sp, #48]	; 0x30
 800b99c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b99e:	1b5b      	subs	r3, r3, r5
 800b9a0:	1e5a      	subs	r2, r3, #1
 800b9a2:	bf45      	ittet	mi
 800b9a4:	f1c3 0301 	rsbmi	r3, r3, #1
 800b9a8:	9305      	strmi	r3, [sp, #20]
 800b9aa:	2300      	movpl	r3, #0
 800b9ac:	2300      	movmi	r3, #0
 800b9ae:	9206      	str	r2, [sp, #24]
 800b9b0:	bf54      	ite	pl
 800b9b2:	9305      	strpl	r3, [sp, #20]
 800b9b4:	9306      	strmi	r3, [sp, #24]
 800b9b6:	f1bb 0f00 	cmp.w	fp, #0
 800b9ba:	db3c      	blt.n	800ba36 <_dtoa_r+0x24e>
 800b9bc:	9b06      	ldr	r3, [sp, #24]
 800b9be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b9c2:	445b      	add	r3, fp
 800b9c4:	9306      	str	r3, [sp, #24]
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	9308      	str	r3, [sp, #32]
 800b9ca:	9b07      	ldr	r3, [sp, #28]
 800b9cc:	2b09      	cmp	r3, #9
 800b9ce:	d868      	bhi.n	800baa2 <_dtoa_r+0x2ba>
 800b9d0:	2b05      	cmp	r3, #5
 800b9d2:	bfc4      	itt	gt
 800b9d4:	3b04      	subgt	r3, #4
 800b9d6:	9307      	strgt	r3, [sp, #28]
 800b9d8:	9b07      	ldr	r3, [sp, #28]
 800b9da:	f1a3 0302 	sub.w	r3, r3, #2
 800b9de:	bfcc      	ite	gt
 800b9e0:	2500      	movgt	r5, #0
 800b9e2:	2501      	movle	r5, #1
 800b9e4:	2b03      	cmp	r3, #3
 800b9e6:	f200 8085 	bhi.w	800baf4 <_dtoa_r+0x30c>
 800b9ea:	e8df f003 	tbb	[pc, r3]
 800b9ee:	3b2e      	.short	0x3b2e
 800b9f0:	5839      	.short	0x5839
 800b9f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b9f6:	441d      	add	r5, r3
 800b9f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b9fc:	2b20      	cmp	r3, #32
 800b9fe:	bfc1      	itttt	gt
 800ba00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba04:	fa08 f803 	lslgt.w	r8, r8, r3
 800ba08:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ba0c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ba10:	bfd6      	itet	le
 800ba12:	f1c3 0320 	rsble	r3, r3, #32
 800ba16:	ea48 0003 	orrgt.w	r0, r8, r3
 800ba1a:	fa06 f003 	lslle.w	r0, r6, r3
 800ba1e:	f7f4 fd79 	bl	8000514 <__aeabi_ui2d>
 800ba22:	2201      	movs	r2, #1
 800ba24:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ba28:	3d01      	subs	r5, #1
 800ba2a:	920e      	str	r2, [sp, #56]	; 0x38
 800ba2c:	e76f      	b.n	800b90e <_dtoa_r+0x126>
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e7b3      	b.n	800b99a <_dtoa_r+0x1b2>
 800ba32:	900c      	str	r0, [sp, #48]	; 0x30
 800ba34:	e7b2      	b.n	800b99c <_dtoa_r+0x1b4>
 800ba36:	9b05      	ldr	r3, [sp, #20]
 800ba38:	eba3 030b 	sub.w	r3, r3, fp
 800ba3c:	9305      	str	r3, [sp, #20]
 800ba3e:	f1cb 0300 	rsb	r3, fp, #0
 800ba42:	9308      	str	r3, [sp, #32]
 800ba44:	2300      	movs	r3, #0
 800ba46:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba48:	e7bf      	b.n	800b9ca <_dtoa_r+0x1e2>
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	dc52      	bgt.n	800bafa <_dtoa_r+0x312>
 800ba54:	2301      	movs	r3, #1
 800ba56:	9301      	str	r3, [sp, #4]
 800ba58:	9304      	str	r3, [sp, #16]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	920a      	str	r2, [sp, #40]	; 0x28
 800ba5e:	e00b      	b.n	800ba78 <_dtoa_r+0x290>
 800ba60:	2301      	movs	r3, #1
 800ba62:	e7f3      	b.n	800ba4c <_dtoa_r+0x264>
 800ba64:	2300      	movs	r3, #0
 800ba66:	9309      	str	r3, [sp, #36]	; 0x24
 800ba68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba6a:	445b      	add	r3, fp
 800ba6c:	9301      	str	r3, [sp, #4]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	9304      	str	r3, [sp, #16]
 800ba74:	bfb8      	it	lt
 800ba76:	2301      	movlt	r3, #1
 800ba78:	69e0      	ldr	r0, [r4, #28]
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	2204      	movs	r2, #4
 800ba7e:	f102 0614 	add.w	r6, r2, #20
 800ba82:	429e      	cmp	r6, r3
 800ba84:	d93d      	bls.n	800bb02 <_dtoa_r+0x31a>
 800ba86:	6041      	str	r1, [r0, #4]
 800ba88:	4620      	mov	r0, r4
 800ba8a:	f000 fceb 	bl	800c464 <_Balloc>
 800ba8e:	9000      	str	r0, [sp, #0]
 800ba90:	2800      	cmp	r0, #0
 800ba92:	d139      	bne.n	800bb08 <_dtoa_r+0x320>
 800ba94:	4b16      	ldr	r3, [pc, #88]	; (800baf0 <_dtoa_r+0x308>)
 800ba96:	4602      	mov	r2, r0
 800ba98:	f240 11af 	movw	r1, #431	; 0x1af
 800ba9c:	e6bd      	b.n	800b81a <_dtoa_r+0x32>
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e7e1      	b.n	800ba66 <_dtoa_r+0x27e>
 800baa2:	2501      	movs	r5, #1
 800baa4:	2300      	movs	r3, #0
 800baa6:	9307      	str	r3, [sp, #28]
 800baa8:	9509      	str	r5, [sp, #36]	; 0x24
 800baaa:	f04f 33ff 	mov.w	r3, #4294967295
 800baae:	9301      	str	r3, [sp, #4]
 800bab0:	9304      	str	r3, [sp, #16]
 800bab2:	2200      	movs	r2, #0
 800bab4:	2312      	movs	r3, #18
 800bab6:	e7d1      	b.n	800ba5c <_dtoa_r+0x274>
 800bab8:	636f4361 	.word	0x636f4361
 800babc:	3fd287a7 	.word	0x3fd287a7
 800bac0:	8b60c8b3 	.word	0x8b60c8b3
 800bac4:	3fc68a28 	.word	0x3fc68a28
 800bac8:	509f79fb 	.word	0x509f79fb
 800bacc:	3fd34413 	.word	0x3fd34413
 800bad0:	0801112d 	.word	0x0801112d
 800bad4:	080111e7 	.word	0x080111e7
 800bad8:	7ff00000 	.word	0x7ff00000
 800badc:	080111e3 	.word	0x080111e3
 800bae0:	080111da 	.word	0x080111da
 800bae4:	0801110a 	.word	0x0801110a
 800bae8:	3ff80000 	.word	0x3ff80000
 800baec:	080112d8 	.word	0x080112d8
 800baf0:	0801123f 	.word	0x0801123f
 800baf4:	2301      	movs	r3, #1
 800baf6:	9309      	str	r3, [sp, #36]	; 0x24
 800baf8:	e7d7      	b.n	800baaa <_dtoa_r+0x2c2>
 800bafa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bafc:	9301      	str	r3, [sp, #4]
 800bafe:	9304      	str	r3, [sp, #16]
 800bb00:	e7ba      	b.n	800ba78 <_dtoa_r+0x290>
 800bb02:	3101      	adds	r1, #1
 800bb04:	0052      	lsls	r2, r2, #1
 800bb06:	e7ba      	b.n	800ba7e <_dtoa_r+0x296>
 800bb08:	69e3      	ldr	r3, [r4, #28]
 800bb0a:	9a00      	ldr	r2, [sp, #0]
 800bb0c:	601a      	str	r2, [r3, #0]
 800bb0e:	9b04      	ldr	r3, [sp, #16]
 800bb10:	2b0e      	cmp	r3, #14
 800bb12:	f200 80a8 	bhi.w	800bc66 <_dtoa_r+0x47e>
 800bb16:	2d00      	cmp	r5, #0
 800bb18:	f000 80a5 	beq.w	800bc66 <_dtoa_r+0x47e>
 800bb1c:	f1bb 0f00 	cmp.w	fp, #0
 800bb20:	dd38      	ble.n	800bb94 <_dtoa_r+0x3ac>
 800bb22:	4bc0      	ldr	r3, [pc, #768]	; (800be24 <_dtoa_r+0x63c>)
 800bb24:	f00b 020f 	and.w	r2, fp, #15
 800bb28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb2c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bb30:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bb34:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bb38:	d019      	beq.n	800bb6e <_dtoa_r+0x386>
 800bb3a:	4bbb      	ldr	r3, [pc, #748]	; (800be28 <_dtoa_r+0x640>)
 800bb3c:	ec51 0b18 	vmov	r0, r1, d8
 800bb40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb44:	f7f4 fe8a 	bl	800085c <__aeabi_ddiv>
 800bb48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb4c:	f008 080f 	and.w	r8, r8, #15
 800bb50:	2503      	movs	r5, #3
 800bb52:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800be28 <_dtoa_r+0x640>
 800bb56:	f1b8 0f00 	cmp.w	r8, #0
 800bb5a:	d10a      	bne.n	800bb72 <_dtoa_r+0x38a>
 800bb5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb60:	4632      	mov	r2, r6
 800bb62:	463b      	mov	r3, r7
 800bb64:	f7f4 fe7a 	bl	800085c <__aeabi_ddiv>
 800bb68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb6c:	e02b      	b.n	800bbc6 <_dtoa_r+0x3de>
 800bb6e:	2502      	movs	r5, #2
 800bb70:	e7ef      	b.n	800bb52 <_dtoa_r+0x36a>
 800bb72:	f018 0f01 	tst.w	r8, #1
 800bb76:	d008      	beq.n	800bb8a <_dtoa_r+0x3a2>
 800bb78:	4630      	mov	r0, r6
 800bb7a:	4639      	mov	r1, r7
 800bb7c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bb80:	f7f4 fd42 	bl	8000608 <__aeabi_dmul>
 800bb84:	3501      	adds	r5, #1
 800bb86:	4606      	mov	r6, r0
 800bb88:	460f      	mov	r7, r1
 800bb8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bb8e:	f109 0908 	add.w	r9, r9, #8
 800bb92:	e7e0      	b.n	800bb56 <_dtoa_r+0x36e>
 800bb94:	f000 809f 	beq.w	800bcd6 <_dtoa_r+0x4ee>
 800bb98:	f1cb 0600 	rsb	r6, fp, #0
 800bb9c:	4ba1      	ldr	r3, [pc, #644]	; (800be24 <_dtoa_r+0x63c>)
 800bb9e:	4fa2      	ldr	r7, [pc, #648]	; (800be28 <_dtoa_r+0x640>)
 800bba0:	f006 020f 	and.w	r2, r6, #15
 800bba4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbac:	ec51 0b18 	vmov	r0, r1, d8
 800bbb0:	f7f4 fd2a 	bl	8000608 <__aeabi_dmul>
 800bbb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbb8:	1136      	asrs	r6, r6, #4
 800bbba:	2300      	movs	r3, #0
 800bbbc:	2502      	movs	r5, #2
 800bbbe:	2e00      	cmp	r6, #0
 800bbc0:	d17e      	bne.n	800bcc0 <_dtoa_r+0x4d8>
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d1d0      	bne.n	800bb68 <_dtoa_r+0x380>
 800bbc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbc8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	f000 8084 	beq.w	800bcda <_dtoa_r+0x4f2>
 800bbd2:	4b96      	ldr	r3, [pc, #600]	; (800be2c <_dtoa_r+0x644>)
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	4640      	mov	r0, r8
 800bbd8:	4649      	mov	r1, r9
 800bbda:	f7f4 ff87 	bl	8000aec <__aeabi_dcmplt>
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	d07b      	beq.n	800bcda <_dtoa_r+0x4f2>
 800bbe2:	9b04      	ldr	r3, [sp, #16]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d078      	beq.n	800bcda <_dtoa_r+0x4f2>
 800bbe8:	9b01      	ldr	r3, [sp, #4]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	dd39      	ble.n	800bc62 <_dtoa_r+0x47a>
 800bbee:	4b90      	ldr	r3, [pc, #576]	; (800be30 <_dtoa_r+0x648>)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	4640      	mov	r0, r8
 800bbf4:	4649      	mov	r1, r9
 800bbf6:	f7f4 fd07 	bl	8000608 <__aeabi_dmul>
 800bbfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbfe:	9e01      	ldr	r6, [sp, #4]
 800bc00:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bc04:	3501      	adds	r5, #1
 800bc06:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	f7f4 fc92 	bl	8000534 <__aeabi_i2d>
 800bc10:	4642      	mov	r2, r8
 800bc12:	464b      	mov	r3, r9
 800bc14:	f7f4 fcf8 	bl	8000608 <__aeabi_dmul>
 800bc18:	4b86      	ldr	r3, [pc, #536]	; (800be34 <_dtoa_r+0x64c>)
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f7f4 fb3e 	bl	800029c <__adddf3>
 800bc20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bc24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc28:	9303      	str	r3, [sp, #12]
 800bc2a:	2e00      	cmp	r6, #0
 800bc2c:	d158      	bne.n	800bce0 <_dtoa_r+0x4f8>
 800bc2e:	4b82      	ldr	r3, [pc, #520]	; (800be38 <_dtoa_r+0x650>)
 800bc30:	2200      	movs	r2, #0
 800bc32:	4640      	mov	r0, r8
 800bc34:	4649      	mov	r1, r9
 800bc36:	f7f4 fb2f 	bl	8000298 <__aeabi_dsub>
 800bc3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc3e:	4680      	mov	r8, r0
 800bc40:	4689      	mov	r9, r1
 800bc42:	f7f4 ff71 	bl	8000b28 <__aeabi_dcmpgt>
 800bc46:	2800      	cmp	r0, #0
 800bc48:	f040 8296 	bne.w	800c178 <_dtoa_r+0x990>
 800bc4c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bc50:	4640      	mov	r0, r8
 800bc52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc56:	4649      	mov	r1, r9
 800bc58:	f7f4 ff48 	bl	8000aec <__aeabi_dcmplt>
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	f040 8289 	bne.w	800c174 <_dtoa_r+0x98c>
 800bc62:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bc66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	f2c0 814e 	blt.w	800bf0a <_dtoa_r+0x722>
 800bc6e:	f1bb 0f0e 	cmp.w	fp, #14
 800bc72:	f300 814a 	bgt.w	800bf0a <_dtoa_r+0x722>
 800bc76:	4b6b      	ldr	r3, [pc, #428]	; (800be24 <_dtoa_r+0x63c>)
 800bc78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bc7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	f280 80dc 	bge.w	800be40 <_dtoa_r+0x658>
 800bc88:	9b04      	ldr	r3, [sp, #16]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	f300 80d8 	bgt.w	800be40 <_dtoa_r+0x658>
 800bc90:	f040 826f 	bne.w	800c172 <_dtoa_r+0x98a>
 800bc94:	4b68      	ldr	r3, [pc, #416]	; (800be38 <_dtoa_r+0x650>)
 800bc96:	2200      	movs	r2, #0
 800bc98:	4640      	mov	r0, r8
 800bc9a:	4649      	mov	r1, r9
 800bc9c:	f7f4 fcb4 	bl	8000608 <__aeabi_dmul>
 800bca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bca4:	f7f4 ff36 	bl	8000b14 <__aeabi_dcmpge>
 800bca8:	9e04      	ldr	r6, [sp, #16]
 800bcaa:	4637      	mov	r7, r6
 800bcac:	2800      	cmp	r0, #0
 800bcae:	f040 8245 	bne.w	800c13c <_dtoa_r+0x954>
 800bcb2:	9d00      	ldr	r5, [sp, #0]
 800bcb4:	2331      	movs	r3, #49	; 0x31
 800bcb6:	f805 3b01 	strb.w	r3, [r5], #1
 800bcba:	f10b 0b01 	add.w	fp, fp, #1
 800bcbe:	e241      	b.n	800c144 <_dtoa_r+0x95c>
 800bcc0:	07f2      	lsls	r2, r6, #31
 800bcc2:	d505      	bpl.n	800bcd0 <_dtoa_r+0x4e8>
 800bcc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcc8:	f7f4 fc9e 	bl	8000608 <__aeabi_dmul>
 800bccc:	3501      	adds	r5, #1
 800bcce:	2301      	movs	r3, #1
 800bcd0:	1076      	asrs	r6, r6, #1
 800bcd2:	3708      	adds	r7, #8
 800bcd4:	e773      	b.n	800bbbe <_dtoa_r+0x3d6>
 800bcd6:	2502      	movs	r5, #2
 800bcd8:	e775      	b.n	800bbc6 <_dtoa_r+0x3de>
 800bcda:	9e04      	ldr	r6, [sp, #16]
 800bcdc:	465f      	mov	r7, fp
 800bcde:	e792      	b.n	800bc06 <_dtoa_r+0x41e>
 800bce0:	9900      	ldr	r1, [sp, #0]
 800bce2:	4b50      	ldr	r3, [pc, #320]	; (800be24 <_dtoa_r+0x63c>)
 800bce4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bce8:	4431      	add	r1, r6
 800bcea:	9102      	str	r1, [sp, #8]
 800bcec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bcee:	eeb0 9a47 	vmov.f32	s18, s14
 800bcf2:	eef0 9a67 	vmov.f32	s19, s15
 800bcf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bcfa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bcfe:	2900      	cmp	r1, #0
 800bd00:	d044      	beq.n	800bd8c <_dtoa_r+0x5a4>
 800bd02:	494e      	ldr	r1, [pc, #312]	; (800be3c <_dtoa_r+0x654>)
 800bd04:	2000      	movs	r0, #0
 800bd06:	f7f4 fda9 	bl	800085c <__aeabi_ddiv>
 800bd0a:	ec53 2b19 	vmov	r2, r3, d9
 800bd0e:	f7f4 fac3 	bl	8000298 <__aeabi_dsub>
 800bd12:	9d00      	ldr	r5, [sp, #0]
 800bd14:	ec41 0b19 	vmov	d9, r0, r1
 800bd18:	4649      	mov	r1, r9
 800bd1a:	4640      	mov	r0, r8
 800bd1c:	f7f4 ff24 	bl	8000b68 <__aeabi_d2iz>
 800bd20:	4606      	mov	r6, r0
 800bd22:	f7f4 fc07 	bl	8000534 <__aeabi_i2d>
 800bd26:	4602      	mov	r2, r0
 800bd28:	460b      	mov	r3, r1
 800bd2a:	4640      	mov	r0, r8
 800bd2c:	4649      	mov	r1, r9
 800bd2e:	f7f4 fab3 	bl	8000298 <__aeabi_dsub>
 800bd32:	3630      	adds	r6, #48	; 0x30
 800bd34:	f805 6b01 	strb.w	r6, [r5], #1
 800bd38:	ec53 2b19 	vmov	r2, r3, d9
 800bd3c:	4680      	mov	r8, r0
 800bd3e:	4689      	mov	r9, r1
 800bd40:	f7f4 fed4 	bl	8000aec <__aeabi_dcmplt>
 800bd44:	2800      	cmp	r0, #0
 800bd46:	d164      	bne.n	800be12 <_dtoa_r+0x62a>
 800bd48:	4642      	mov	r2, r8
 800bd4a:	464b      	mov	r3, r9
 800bd4c:	4937      	ldr	r1, [pc, #220]	; (800be2c <_dtoa_r+0x644>)
 800bd4e:	2000      	movs	r0, #0
 800bd50:	f7f4 faa2 	bl	8000298 <__aeabi_dsub>
 800bd54:	ec53 2b19 	vmov	r2, r3, d9
 800bd58:	f7f4 fec8 	bl	8000aec <__aeabi_dcmplt>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	f040 80b6 	bne.w	800bece <_dtoa_r+0x6e6>
 800bd62:	9b02      	ldr	r3, [sp, #8]
 800bd64:	429d      	cmp	r5, r3
 800bd66:	f43f af7c 	beq.w	800bc62 <_dtoa_r+0x47a>
 800bd6a:	4b31      	ldr	r3, [pc, #196]	; (800be30 <_dtoa_r+0x648>)
 800bd6c:	ec51 0b19 	vmov	r0, r1, d9
 800bd70:	2200      	movs	r2, #0
 800bd72:	f7f4 fc49 	bl	8000608 <__aeabi_dmul>
 800bd76:	4b2e      	ldr	r3, [pc, #184]	; (800be30 <_dtoa_r+0x648>)
 800bd78:	ec41 0b19 	vmov	d9, r0, r1
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	4640      	mov	r0, r8
 800bd80:	4649      	mov	r1, r9
 800bd82:	f7f4 fc41 	bl	8000608 <__aeabi_dmul>
 800bd86:	4680      	mov	r8, r0
 800bd88:	4689      	mov	r9, r1
 800bd8a:	e7c5      	b.n	800bd18 <_dtoa_r+0x530>
 800bd8c:	ec51 0b17 	vmov	r0, r1, d7
 800bd90:	f7f4 fc3a 	bl	8000608 <__aeabi_dmul>
 800bd94:	9b02      	ldr	r3, [sp, #8]
 800bd96:	9d00      	ldr	r5, [sp, #0]
 800bd98:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd9a:	ec41 0b19 	vmov	d9, r0, r1
 800bd9e:	4649      	mov	r1, r9
 800bda0:	4640      	mov	r0, r8
 800bda2:	f7f4 fee1 	bl	8000b68 <__aeabi_d2iz>
 800bda6:	4606      	mov	r6, r0
 800bda8:	f7f4 fbc4 	bl	8000534 <__aeabi_i2d>
 800bdac:	3630      	adds	r6, #48	; 0x30
 800bdae:	4602      	mov	r2, r0
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	4640      	mov	r0, r8
 800bdb4:	4649      	mov	r1, r9
 800bdb6:	f7f4 fa6f 	bl	8000298 <__aeabi_dsub>
 800bdba:	f805 6b01 	strb.w	r6, [r5], #1
 800bdbe:	9b02      	ldr	r3, [sp, #8]
 800bdc0:	429d      	cmp	r5, r3
 800bdc2:	4680      	mov	r8, r0
 800bdc4:	4689      	mov	r9, r1
 800bdc6:	f04f 0200 	mov.w	r2, #0
 800bdca:	d124      	bne.n	800be16 <_dtoa_r+0x62e>
 800bdcc:	4b1b      	ldr	r3, [pc, #108]	; (800be3c <_dtoa_r+0x654>)
 800bdce:	ec51 0b19 	vmov	r0, r1, d9
 800bdd2:	f7f4 fa63 	bl	800029c <__adddf3>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	460b      	mov	r3, r1
 800bdda:	4640      	mov	r0, r8
 800bddc:	4649      	mov	r1, r9
 800bdde:	f7f4 fea3 	bl	8000b28 <__aeabi_dcmpgt>
 800bde2:	2800      	cmp	r0, #0
 800bde4:	d173      	bne.n	800bece <_dtoa_r+0x6e6>
 800bde6:	ec53 2b19 	vmov	r2, r3, d9
 800bdea:	4914      	ldr	r1, [pc, #80]	; (800be3c <_dtoa_r+0x654>)
 800bdec:	2000      	movs	r0, #0
 800bdee:	f7f4 fa53 	bl	8000298 <__aeabi_dsub>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	4640      	mov	r0, r8
 800bdf8:	4649      	mov	r1, r9
 800bdfa:	f7f4 fe77 	bl	8000aec <__aeabi_dcmplt>
 800bdfe:	2800      	cmp	r0, #0
 800be00:	f43f af2f 	beq.w	800bc62 <_dtoa_r+0x47a>
 800be04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800be06:	1e6b      	subs	r3, r5, #1
 800be08:	930f      	str	r3, [sp, #60]	; 0x3c
 800be0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be0e:	2b30      	cmp	r3, #48	; 0x30
 800be10:	d0f8      	beq.n	800be04 <_dtoa_r+0x61c>
 800be12:	46bb      	mov	fp, r7
 800be14:	e04a      	b.n	800beac <_dtoa_r+0x6c4>
 800be16:	4b06      	ldr	r3, [pc, #24]	; (800be30 <_dtoa_r+0x648>)
 800be18:	f7f4 fbf6 	bl	8000608 <__aeabi_dmul>
 800be1c:	4680      	mov	r8, r0
 800be1e:	4689      	mov	r9, r1
 800be20:	e7bd      	b.n	800bd9e <_dtoa_r+0x5b6>
 800be22:	bf00      	nop
 800be24:	080112d8 	.word	0x080112d8
 800be28:	080112b0 	.word	0x080112b0
 800be2c:	3ff00000 	.word	0x3ff00000
 800be30:	40240000 	.word	0x40240000
 800be34:	401c0000 	.word	0x401c0000
 800be38:	40140000 	.word	0x40140000
 800be3c:	3fe00000 	.word	0x3fe00000
 800be40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800be44:	9d00      	ldr	r5, [sp, #0]
 800be46:	4642      	mov	r2, r8
 800be48:	464b      	mov	r3, r9
 800be4a:	4630      	mov	r0, r6
 800be4c:	4639      	mov	r1, r7
 800be4e:	f7f4 fd05 	bl	800085c <__aeabi_ddiv>
 800be52:	f7f4 fe89 	bl	8000b68 <__aeabi_d2iz>
 800be56:	9001      	str	r0, [sp, #4]
 800be58:	f7f4 fb6c 	bl	8000534 <__aeabi_i2d>
 800be5c:	4642      	mov	r2, r8
 800be5e:	464b      	mov	r3, r9
 800be60:	f7f4 fbd2 	bl	8000608 <__aeabi_dmul>
 800be64:	4602      	mov	r2, r0
 800be66:	460b      	mov	r3, r1
 800be68:	4630      	mov	r0, r6
 800be6a:	4639      	mov	r1, r7
 800be6c:	f7f4 fa14 	bl	8000298 <__aeabi_dsub>
 800be70:	9e01      	ldr	r6, [sp, #4]
 800be72:	9f04      	ldr	r7, [sp, #16]
 800be74:	3630      	adds	r6, #48	; 0x30
 800be76:	f805 6b01 	strb.w	r6, [r5], #1
 800be7a:	9e00      	ldr	r6, [sp, #0]
 800be7c:	1bae      	subs	r6, r5, r6
 800be7e:	42b7      	cmp	r7, r6
 800be80:	4602      	mov	r2, r0
 800be82:	460b      	mov	r3, r1
 800be84:	d134      	bne.n	800bef0 <_dtoa_r+0x708>
 800be86:	f7f4 fa09 	bl	800029c <__adddf3>
 800be8a:	4642      	mov	r2, r8
 800be8c:	464b      	mov	r3, r9
 800be8e:	4606      	mov	r6, r0
 800be90:	460f      	mov	r7, r1
 800be92:	f7f4 fe49 	bl	8000b28 <__aeabi_dcmpgt>
 800be96:	b9c8      	cbnz	r0, 800becc <_dtoa_r+0x6e4>
 800be98:	4642      	mov	r2, r8
 800be9a:	464b      	mov	r3, r9
 800be9c:	4630      	mov	r0, r6
 800be9e:	4639      	mov	r1, r7
 800bea0:	f7f4 fe1a 	bl	8000ad8 <__aeabi_dcmpeq>
 800bea4:	b110      	cbz	r0, 800beac <_dtoa_r+0x6c4>
 800bea6:	9b01      	ldr	r3, [sp, #4]
 800bea8:	07db      	lsls	r3, r3, #31
 800beaa:	d40f      	bmi.n	800becc <_dtoa_r+0x6e4>
 800beac:	4651      	mov	r1, sl
 800beae:	4620      	mov	r0, r4
 800beb0:	f000 fb18 	bl	800c4e4 <_Bfree>
 800beb4:	2300      	movs	r3, #0
 800beb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800beb8:	702b      	strb	r3, [r5, #0]
 800beba:	f10b 0301 	add.w	r3, fp, #1
 800bebe:	6013      	str	r3, [r2, #0]
 800bec0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f43f ace2 	beq.w	800b88c <_dtoa_r+0xa4>
 800bec8:	601d      	str	r5, [r3, #0]
 800beca:	e4df      	b.n	800b88c <_dtoa_r+0xa4>
 800becc:	465f      	mov	r7, fp
 800bece:	462b      	mov	r3, r5
 800bed0:	461d      	mov	r5, r3
 800bed2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bed6:	2a39      	cmp	r2, #57	; 0x39
 800bed8:	d106      	bne.n	800bee8 <_dtoa_r+0x700>
 800beda:	9a00      	ldr	r2, [sp, #0]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d1f7      	bne.n	800bed0 <_dtoa_r+0x6e8>
 800bee0:	9900      	ldr	r1, [sp, #0]
 800bee2:	2230      	movs	r2, #48	; 0x30
 800bee4:	3701      	adds	r7, #1
 800bee6:	700a      	strb	r2, [r1, #0]
 800bee8:	781a      	ldrb	r2, [r3, #0]
 800beea:	3201      	adds	r2, #1
 800beec:	701a      	strb	r2, [r3, #0]
 800beee:	e790      	b.n	800be12 <_dtoa_r+0x62a>
 800bef0:	4ba3      	ldr	r3, [pc, #652]	; (800c180 <_dtoa_r+0x998>)
 800bef2:	2200      	movs	r2, #0
 800bef4:	f7f4 fb88 	bl	8000608 <__aeabi_dmul>
 800bef8:	2200      	movs	r2, #0
 800befa:	2300      	movs	r3, #0
 800befc:	4606      	mov	r6, r0
 800befe:	460f      	mov	r7, r1
 800bf00:	f7f4 fdea 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf04:	2800      	cmp	r0, #0
 800bf06:	d09e      	beq.n	800be46 <_dtoa_r+0x65e>
 800bf08:	e7d0      	b.n	800beac <_dtoa_r+0x6c4>
 800bf0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf0c:	2a00      	cmp	r2, #0
 800bf0e:	f000 80ca 	beq.w	800c0a6 <_dtoa_r+0x8be>
 800bf12:	9a07      	ldr	r2, [sp, #28]
 800bf14:	2a01      	cmp	r2, #1
 800bf16:	f300 80ad 	bgt.w	800c074 <_dtoa_r+0x88c>
 800bf1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf1c:	2a00      	cmp	r2, #0
 800bf1e:	f000 80a5 	beq.w	800c06c <_dtoa_r+0x884>
 800bf22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf26:	9e08      	ldr	r6, [sp, #32]
 800bf28:	9d05      	ldr	r5, [sp, #20]
 800bf2a:	9a05      	ldr	r2, [sp, #20]
 800bf2c:	441a      	add	r2, r3
 800bf2e:	9205      	str	r2, [sp, #20]
 800bf30:	9a06      	ldr	r2, [sp, #24]
 800bf32:	2101      	movs	r1, #1
 800bf34:	441a      	add	r2, r3
 800bf36:	4620      	mov	r0, r4
 800bf38:	9206      	str	r2, [sp, #24]
 800bf3a:	f000 fb89 	bl	800c650 <__i2b>
 800bf3e:	4607      	mov	r7, r0
 800bf40:	b165      	cbz	r5, 800bf5c <_dtoa_r+0x774>
 800bf42:	9b06      	ldr	r3, [sp, #24]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	dd09      	ble.n	800bf5c <_dtoa_r+0x774>
 800bf48:	42ab      	cmp	r3, r5
 800bf4a:	9a05      	ldr	r2, [sp, #20]
 800bf4c:	bfa8      	it	ge
 800bf4e:	462b      	movge	r3, r5
 800bf50:	1ad2      	subs	r2, r2, r3
 800bf52:	9205      	str	r2, [sp, #20]
 800bf54:	9a06      	ldr	r2, [sp, #24]
 800bf56:	1aed      	subs	r5, r5, r3
 800bf58:	1ad3      	subs	r3, r2, r3
 800bf5a:	9306      	str	r3, [sp, #24]
 800bf5c:	9b08      	ldr	r3, [sp, #32]
 800bf5e:	b1f3      	cbz	r3, 800bf9e <_dtoa_r+0x7b6>
 800bf60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	f000 80a3 	beq.w	800c0ae <_dtoa_r+0x8c6>
 800bf68:	2e00      	cmp	r6, #0
 800bf6a:	dd10      	ble.n	800bf8e <_dtoa_r+0x7a6>
 800bf6c:	4639      	mov	r1, r7
 800bf6e:	4632      	mov	r2, r6
 800bf70:	4620      	mov	r0, r4
 800bf72:	f000 fc2d 	bl	800c7d0 <__pow5mult>
 800bf76:	4652      	mov	r2, sl
 800bf78:	4601      	mov	r1, r0
 800bf7a:	4607      	mov	r7, r0
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	f000 fb7d 	bl	800c67c <__multiply>
 800bf82:	4651      	mov	r1, sl
 800bf84:	4680      	mov	r8, r0
 800bf86:	4620      	mov	r0, r4
 800bf88:	f000 faac 	bl	800c4e4 <_Bfree>
 800bf8c:	46c2      	mov	sl, r8
 800bf8e:	9b08      	ldr	r3, [sp, #32]
 800bf90:	1b9a      	subs	r2, r3, r6
 800bf92:	d004      	beq.n	800bf9e <_dtoa_r+0x7b6>
 800bf94:	4651      	mov	r1, sl
 800bf96:	4620      	mov	r0, r4
 800bf98:	f000 fc1a 	bl	800c7d0 <__pow5mult>
 800bf9c:	4682      	mov	sl, r0
 800bf9e:	2101      	movs	r1, #1
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	f000 fb55 	bl	800c650 <__i2b>
 800bfa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	4606      	mov	r6, r0
 800bfac:	f340 8081 	ble.w	800c0b2 <_dtoa_r+0x8ca>
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	4601      	mov	r1, r0
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	f000 fc0b 	bl	800c7d0 <__pow5mult>
 800bfba:	9b07      	ldr	r3, [sp, #28]
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	4606      	mov	r6, r0
 800bfc0:	dd7a      	ble.n	800c0b8 <_dtoa_r+0x8d0>
 800bfc2:	f04f 0800 	mov.w	r8, #0
 800bfc6:	6933      	ldr	r3, [r6, #16]
 800bfc8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bfcc:	6918      	ldr	r0, [r3, #16]
 800bfce:	f000 faf1 	bl	800c5b4 <__hi0bits>
 800bfd2:	f1c0 0020 	rsb	r0, r0, #32
 800bfd6:	9b06      	ldr	r3, [sp, #24]
 800bfd8:	4418      	add	r0, r3
 800bfda:	f010 001f 	ands.w	r0, r0, #31
 800bfde:	f000 8094 	beq.w	800c10a <_dtoa_r+0x922>
 800bfe2:	f1c0 0320 	rsb	r3, r0, #32
 800bfe6:	2b04      	cmp	r3, #4
 800bfe8:	f340 8085 	ble.w	800c0f6 <_dtoa_r+0x90e>
 800bfec:	9b05      	ldr	r3, [sp, #20]
 800bfee:	f1c0 001c 	rsb	r0, r0, #28
 800bff2:	4403      	add	r3, r0
 800bff4:	9305      	str	r3, [sp, #20]
 800bff6:	9b06      	ldr	r3, [sp, #24]
 800bff8:	4403      	add	r3, r0
 800bffa:	4405      	add	r5, r0
 800bffc:	9306      	str	r3, [sp, #24]
 800bffe:	9b05      	ldr	r3, [sp, #20]
 800c000:	2b00      	cmp	r3, #0
 800c002:	dd05      	ble.n	800c010 <_dtoa_r+0x828>
 800c004:	4651      	mov	r1, sl
 800c006:	461a      	mov	r2, r3
 800c008:	4620      	mov	r0, r4
 800c00a:	f000 fc3b 	bl	800c884 <__lshift>
 800c00e:	4682      	mov	sl, r0
 800c010:	9b06      	ldr	r3, [sp, #24]
 800c012:	2b00      	cmp	r3, #0
 800c014:	dd05      	ble.n	800c022 <_dtoa_r+0x83a>
 800c016:	4631      	mov	r1, r6
 800c018:	461a      	mov	r2, r3
 800c01a:	4620      	mov	r0, r4
 800c01c:	f000 fc32 	bl	800c884 <__lshift>
 800c020:	4606      	mov	r6, r0
 800c022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c024:	2b00      	cmp	r3, #0
 800c026:	d072      	beq.n	800c10e <_dtoa_r+0x926>
 800c028:	4631      	mov	r1, r6
 800c02a:	4650      	mov	r0, sl
 800c02c:	f000 fc96 	bl	800c95c <__mcmp>
 800c030:	2800      	cmp	r0, #0
 800c032:	da6c      	bge.n	800c10e <_dtoa_r+0x926>
 800c034:	2300      	movs	r3, #0
 800c036:	4651      	mov	r1, sl
 800c038:	220a      	movs	r2, #10
 800c03a:	4620      	mov	r0, r4
 800c03c:	f000 fa74 	bl	800c528 <__multadd>
 800c040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c042:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c046:	4682      	mov	sl, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	f000 81b0 	beq.w	800c3ae <_dtoa_r+0xbc6>
 800c04e:	2300      	movs	r3, #0
 800c050:	4639      	mov	r1, r7
 800c052:	220a      	movs	r2, #10
 800c054:	4620      	mov	r0, r4
 800c056:	f000 fa67 	bl	800c528 <__multadd>
 800c05a:	9b01      	ldr	r3, [sp, #4]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	4607      	mov	r7, r0
 800c060:	f300 8096 	bgt.w	800c190 <_dtoa_r+0x9a8>
 800c064:	9b07      	ldr	r3, [sp, #28]
 800c066:	2b02      	cmp	r3, #2
 800c068:	dc59      	bgt.n	800c11e <_dtoa_r+0x936>
 800c06a:	e091      	b.n	800c190 <_dtoa_r+0x9a8>
 800c06c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c06e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c072:	e758      	b.n	800bf26 <_dtoa_r+0x73e>
 800c074:	9b04      	ldr	r3, [sp, #16]
 800c076:	1e5e      	subs	r6, r3, #1
 800c078:	9b08      	ldr	r3, [sp, #32]
 800c07a:	42b3      	cmp	r3, r6
 800c07c:	bfbf      	itttt	lt
 800c07e:	9b08      	ldrlt	r3, [sp, #32]
 800c080:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c082:	9608      	strlt	r6, [sp, #32]
 800c084:	1af3      	sublt	r3, r6, r3
 800c086:	bfb4      	ite	lt
 800c088:	18d2      	addlt	r2, r2, r3
 800c08a:	1b9e      	subge	r6, r3, r6
 800c08c:	9b04      	ldr	r3, [sp, #16]
 800c08e:	bfbc      	itt	lt
 800c090:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c092:	2600      	movlt	r6, #0
 800c094:	2b00      	cmp	r3, #0
 800c096:	bfb7      	itett	lt
 800c098:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c09c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c0a0:	1a9d      	sublt	r5, r3, r2
 800c0a2:	2300      	movlt	r3, #0
 800c0a4:	e741      	b.n	800bf2a <_dtoa_r+0x742>
 800c0a6:	9e08      	ldr	r6, [sp, #32]
 800c0a8:	9d05      	ldr	r5, [sp, #20]
 800c0aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c0ac:	e748      	b.n	800bf40 <_dtoa_r+0x758>
 800c0ae:	9a08      	ldr	r2, [sp, #32]
 800c0b0:	e770      	b.n	800bf94 <_dtoa_r+0x7ac>
 800c0b2:	9b07      	ldr	r3, [sp, #28]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	dc19      	bgt.n	800c0ec <_dtoa_r+0x904>
 800c0b8:	9b02      	ldr	r3, [sp, #8]
 800c0ba:	b9bb      	cbnz	r3, 800c0ec <_dtoa_r+0x904>
 800c0bc:	9b03      	ldr	r3, [sp, #12]
 800c0be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0c2:	b99b      	cbnz	r3, 800c0ec <_dtoa_r+0x904>
 800c0c4:	9b03      	ldr	r3, [sp, #12]
 800c0c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0ca:	0d1b      	lsrs	r3, r3, #20
 800c0cc:	051b      	lsls	r3, r3, #20
 800c0ce:	b183      	cbz	r3, 800c0f2 <_dtoa_r+0x90a>
 800c0d0:	9b05      	ldr	r3, [sp, #20]
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	9305      	str	r3, [sp, #20]
 800c0d6:	9b06      	ldr	r3, [sp, #24]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	9306      	str	r3, [sp, #24]
 800c0dc:	f04f 0801 	mov.w	r8, #1
 800c0e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	f47f af6f 	bne.w	800bfc6 <_dtoa_r+0x7de>
 800c0e8:	2001      	movs	r0, #1
 800c0ea:	e774      	b.n	800bfd6 <_dtoa_r+0x7ee>
 800c0ec:	f04f 0800 	mov.w	r8, #0
 800c0f0:	e7f6      	b.n	800c0e0 <_dtoa_r+0x8f8>
 800c0f2:	4698      	mov	r8, r3
 800c0f4:	e7f4      	b.n	800c0e0 <_dtoa_r+0x8f8>
 800c0f6:	d082      	beq.n	800bffe <_dtoa_r+0x816>
 800c0f8:	9a05      	ldr	r2, [sp, #20]
 800c0fa:	331c      	adds	r3, #28
 800c0fc:	441a      	add	r2, r3
 800c0fe:	9205      	str	r2, [sp, #20]
 800c100:	9a06      	ldr	r2, [sp, #24]
 800c102:	441a      	add	r2, r3
 800c104:	441d      	add	r5, r3
 800c106:	9206      	str	r2, [sp, #24]
 800c108:	e779      	b.n	800bffe <_dtoa_r+0x816>
 800c10a:	4603      	mov	r3, r0
 800c10c:	e7f4      	b.n	800c0f8 <_dtoa_r+0x910>
 800c10e:	9b04      	ldr	r3, [sp, #16]
 800c110:	2b00      	cmp	r3, #0
 800c112:	dc37      	bgt.n	800c184 <_dtoa_r+0x99c>
 800c114:	9b07      	ldr	r3, [sp, #28]
 800c116:	2b02      	cmp	r3, #2
 800c118:	dd34      	ble.n	800c184 <_dtoa_r+0x99c>
 800c11a:	9b04      	ldr	r3, [sp, #16]
 800c11c:	9301      	str	r3, [sp, #4]
 800c11e:	9b01      	ldr	r3, [sp, #4]
 800c120:	b963      	cbnz	r3, 800c13c <_dtoa_r+0x954>
 800c122:	4631      	mov	r1, r6
 800c124:	2205      	movs	r2, #5
 800c126:	4620      	mov	r0, r4
 800c128:	f000 f9fe 	bl	800c528 <__multadd>
 800c12c:	4601      	mov	r1, r0
 800c12e:	4606      	mov	r6, r0
 800c130:	4650      	mov	r0, sl
 800c132:	f000 fc13 	bl	800c95c <__mcmp>
 800c136:	2800      	cmp	r0, #0
 800c138:	f73f adbb 	bgt.w	800bcb2 <_dtoa_r+0x4ca>
 800c13c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c13e:	9d00      	ldr	r5, [sp, #0]
 800c140:	ea6f 0b03 	mvn.w	fp, r3
 800c144:	f04f 0800 	mov.w	r8, #0
 800c148:	4631      	mov	r1, r6
 800c14a:	4620      	mov	r0, r4
 800c14c:	f000 f9ca 	bl	800c4e4 <_Bfree>
 800c150:	2f00      	cmp	r7, #0
 800c152:	f43f aeab 	beq.w	800beac <_dtoa_r+0x6c4>
 800c156:	f1b8 0f00 	cmp.w	r8, #0
 800c15a:	d005      	beq.n	800c168 <_dtoa_r+0x980>
 800c15c:	45b8      	cmp	r8, r7
 800c15e:	d003      	beq.n	800c168 <_dtoa_r+0x980>
 800c160:	4641      	mov	r1, r8
 800c162:	4620      	mov	r0, r4
 800c164:	f000 f9be 	bl	800c4e4 <_Bfree>
 800c168:	4639      	mov	r1, r7
 800c16a:	4620      	mov	r0, r4
 800c16c:	f000 f9ba 	bl	800c4e4 <_Bfree>
 800c170:	e69c      	b.n	800beac <_dtoa_r+0x6c4>
 800c172:	2600      	movs	r6, #0
 800c174:	4637      	mov	r7, r6
 800c176:	e7e1      	b.n	800c13c <_dtoa_r+0x954>
 800c178:	46bb      	mov	fp, r7
 800c17a:	4637      	mov	r7, r6
 800c17c:	e599      	b.n	800bcb2 <_dtoa_r+0x4ca>
 800c17e:	bf00      	nop
 800c180:	40240000 	.word	0x40240000
 800c184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c186:	2b00      	cmp	r3, #0
 800c188:	f000 80c8 	beq.w	800c31c <_dtoa_r+0xb34>
 800c18c:	9b04      	ldr	r3, [sp, #16]
 800c18e:	9301      	str	r3, [sp, #4]
 800c190:	2d00      	cmp	r5, #0
 800c192:	dd05      	ble.n	800c1a0 <_dtoa_r+0x9b8>
 800c194:	4639      	mov	r1, r7
 800c196:	462a      	mov	r2, r5
 800c198:	4620      	mov	r0, r4
 800c19a:	f000 fb73 	bl	800c884 <__lshift>
 800c19e:	4607      	mov	r7, r0
 800c1a0:	f1b8 0f00 	cmp.w	r8, #0
 800c1a4:	d05b      	beq.n	800c25e <_dtoa_r+0xa76>
 800c1a6:	6879      	ldr	r1, [r7, #4]
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	f000 f95b 	bl	800c464 <_Balloc>
 800c1ae:	4605      	mov	r5, r0
 800c1b0:	b928      	cbnz	r0, 800c1be <_dtoa_r+0x9d6>
 800c1b2:	4b83      	ldr	r3, [pc, #524]	; (800c3c0 <_dtoa_r+0xbd8>)
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c1ba:	f7ff bb2e 	b.w	800b81a <_dtoa_r+0x32>
 800c1be:	693a      	ldr	r2, [r7, #16]
 800c1c0:	3202      	adds	r2, #2
 800c1c2:	0092      	lsls	r2, r2, #2
 800c1c4:	f107 010c 	add.w	r1, r7, #12
 800c1c8:	300c      	adds	r0, #12
 800c1ca:	f7ff fa57 	bl	800b67c <memcpy>
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	4629      	mov	r1, r5
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	f000 fb56 	bl	800c884 <__lshift>
 800c1d8:	9b00      	ldr	r3, [sp, #0]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	9304      	str	r3, [sp, #16]
 800c1de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	9308      	str	r3, [sp, #32]
 800c1e6:	9b02      	ldr	r3, [sp, #8]
 800c1e8:	f003 0301 	and.w	r3, r3, #1
 800c1ec:	46b8      	mov	r8, r7
 800c1ee:	9306      	str	r3, [sp, #24]
 800c1f0:	4607      	mov	r7, r0
 800c1f2:	9b04      	ldr	r3, [sp, #16]
 800c1f4:	4631      	mov	r1, r6
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	4650      	mov	r0, sl
 800c1fa:	9301      	str	r3, [sp, #4]
 800c1fc:	f7ff fa6a 	bl	800b6d4 <quorem>
 800c200:	4641      	mov	r1, r8
 800c202:	9002      	str	r0, [sp, #8]
 800c204:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c208:	4650      	mov	r0, sl
 800c20a:	f000 fba7 	bl	800c95c <__mcmp>
 800c20e:	463a      	mov	r2, r7
 800c210:	9005      	str	r0, [sp, #20]
 800c212:	4631      	mov	r1, r6
 800c214:	4620      	mov	r0, r4
 800c216:	f000 fbbd 	bl	800c994 <__mdiff>
 800c21a:	68c2      	ldr	r2, [r0, #12]
 800c21c:	4605      	mov	r5, r0
 800c21e:	bb02      	cbnz	r2, 800c262 <_dtoa_r+0xa7a>
 800c220:	4601      	mov	r1, r0
 800c222:	4650      	mov	r0, sl
 800c224:	f000 fb9a 	bl	800c95c <__mcmp>
 800c228:	4602      	mov	r2, r0
 800c22a:	4629      	mov	r1, r5
 800c22c:	4620      	mov	r0, r4
 800c22e:	9209      	str	r2, [sp, #36]	; 0x24
 800c230:	f000 f958 	bl	800c4e4 <_Bfree>
 800c234:	9b07      	ldr	r3, [sp, #28]
 800c236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c238:	9d04      	ldr	r5, [sp, #16]
 800c23a:	ea43 0102 	orr.w	r1, r3, r2
 800c23e:	9b06      	ldr	r3, [sp, #24]
 800c240:	4319      	orrs	r1, r3
 800c242:	d110      	bne.n	800c266 <_dtoa_r+0xa7e>
 800c244:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c248:	d029      	beq.n	800c29e <_dtoa_r+0xab6>
 800c24a:	9b05      	ldr	r3, [sp, #20]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	dd02      	ble.n	800c256 <_dtoa_r+0xa6e>
 800c250:	9b02      	ldr	r3, [sp, #8]
 800c252:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c256:	9b01      	ldr	r3, [sp, #4]
 800c258:	f883 9000 	strb.w	r9, [r3]
 800c25c:	e774      	b.n	800c148 <_dtoa_r+0x960>
 800c25e:	4638      	mov	r0, r7
 800c260:	e7ba      	b.n	800c1d8 <_dtoa_r+0x9f0>
 800c262:	2201      	movs	r2, #1
 800c264:	e7e1      	b.n	800c22a <_dtoa_r+0xa42>
 800c266:	9b05      	ldr	r3, [sp, #20]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	db04      	blt.n	800c276 <_dtoa_r+0xa8e>
 800c26c:	9907      	ldr	r1, [sp, #28]
 800c26e:	430b      	orrs	r3, r1
 800c270:	9906      	ldr	r1, [sp, #24]
 800c272:	430b      	orrs	r3, r1
 800c274:	d120      	bne.n	800c2b8 <_dtoa_r+0xad0>
 800c276:	2a00      	cmp	r2, #0
 800c278:	dded      	ble.n	800c256 <_dtoa_r+0xa6e>
 800c27a:	4651      	mov	r1, sl
 800c27c:	2201      	movs	r2, #1
 800c27e:	4620      	mov	r0, r4
 800c280:	f000 fb00 	bl	800c884 <__lshift>
 800c284:	4631      	mov	r1, r6
 800c286:	4682      	mov	sl, r0
 800c288:	f000 fb68 	bl	800c95c <__mcmp>
 800c28c:	2800      	cmp	r0, #0
 800c28e:	dc03      	bgt.n	800c298 <_dtoa_r+0xab0>
 800c290:	d1e1      	bne.n	800c256 <_dtoa_r+0xa6e>
 800c292:	f019 0f01 	tst.w	r9, #1
 800c296:	d0de      	beq.n	800c256 <_dtoa_r+0xa6e>
 800c298:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c29c:	d1d8      	bne.n	800c250 <_dtoa_r+0xa68>
 800c29e:	9a01      	ldr	r2, [sp, #4]
 800c2a0:	2339      	movs	r3, #57	; 0x39
 800c2a2:	7013      	strb	r3, [r2, #0]
 800c2a4:	462b      	mov	r3, r5
 800c2a6:	461d      	mov	r5, r3
 800c2a8:	3b01      	subs	r3, #1
 800c2aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c2ae:	2a39      	cmp	r2, #57	; 0x39
 800c2b0:	d06c      	beq.n	800c38c <_dtoa_r+0xba4>
 800c2b2:	3201      	adds	r2, #1
 800c2b4:	701a      	strb	r2, [r3, #0]
 800c2b6:	e747      	b.n	800c148 <_dtoa_r+0x960>
 800c2b8:	2a00      	cmp	r2, #0
 800c2ba:	dd07      	ble.n	800c2cc <_dtoa_r+0xae4>
 800c2bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c2c0:	d0ed      	beq.n	800c29e <_dtoa_r+0xab6>
 800c2c2:	9a01      	ldr	r2, [sp, #4]
 800c2c4:	f109 0301 	add.w	r3, r9, #1
 800c2c8:	7013      	strb	r3, [r2, #0]
 800c2ca:	e73d      	b.n	800c148 <_dtoa_r+0x960>
 800c2cc:	9b04      	ldr	r3, [sp, #16]
 800c2ce:	9a08      	ldr	r2, [sp, #32]
 800c2d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d043      	beq.n	800c360 <_dtoa_r+0xb78>
 800c2d8:	4651      	mov	r1, sl
 800c2da:	2300      	movs	r3, #0
 800c2dc:	220a      	movs	r2, #10
 800c2de:	4620      	mov	r0, r4
 800c2e0:	f000 f922 	bl	800c528 <__multadd>
 800c2e4:	45b8      	cmp	r8, r7
 800c2e6:	4682      	mov	sl, r0
 800c2e8:	f04f 0300 	mov.w	r3, #0
 800c2ec:	f04f 020a 	mov.w	r2, #10
 800c2f0:	4641      	mov	r1, r8
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	d107      	bne.n	800c306 <_dtoa_r+0xb1e>
 800c2f6:	f000 f917 	bl	800c528 <__multadd>
 800c2fa:	4680      	mov	r8, r0
 800c2fc:	4607      	mov	r7, r0
 800c2fe:	9b04      	ldr	r3, [sp, #16]
 800c300:	3301      	adds	r3, #1
 800c302:	9304      	str	r3, [sp, #16]
 800c304:	e775      	b.n	800c1f2 <_dtoa_r+0xa0a>
 800c306:	f000 f90f 	bl	800c528 <__multadd>
 800c30a:	4639      	mov	r1, r7
 800c30c:	4680      	mov	r8, r0
 800c30e:	2300      	movs	r3, #0
 800c310:	220a      	movs	r2, #10
 800c312:	4620      	mov	r0, r4
 800c314:	f000 f908 	bl	800c528 <__multadd>
 800c318:	4607      	mov	r7, r0
 800c31a:	e7f0      	b.n	800c2fe <_dtoa_r+0xb16>
 800c31c:	9b04      	ldr	r3, [sp, #16]
 800c31e:	9301      	str	r3, [sp, #4]
 800c320:	9d00      	ldr	r5, [sp, #0]
 800c322:	4631      	mov	r1, r6
 800c324:	4650      	mov	r0, sl
 800c326:	f7ff f9d5 	bl	800b6d4 <quorem>
 800c32a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c32e:	9b00      	ldr	r3, [sp, #0]
 800c330:	f805 9b01 	strb.w	r9, [r5], #1
 800c334:	1aea      	subs	r2, r5, r3
 800c336:	9b01      	ldr	r3, [sp, #4]
 800c338:	4293      	cmp	r3, r2
 800c33a:	dd07      	ble.n	800c34c <_dtoa_r+0xb64>
 800c33c:	4651      	mov	r1, sl
 800c33e:	2300      	movs	r3, #0
 800c340:	220a      	movs	r2, #10
 800c342:	4620      	mov	r0, r4
 800c344:	f000 f8f0 	bl	800c528 <__multadd>
 800c348:	4682      	mov	sl, r0
 800c34a:	e7ea      	b.n	800c322 <_dtoa_r+0xb3a>
 800c34c:	9b01      	ldr	r3, [sp, #4]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	bfc8      	it	gt
 800c352:	461d      	movgt	r5, r3
 800c354:	9b00      	ldr	r3, [sp, #0]
 800c356:	bfd8      	it	le
 800c358:	2501      	movle	r5, #1
 800c35a:	441d      	add	r5, r3
 800c35c:	f04f 0800 	mov.w	r8, #0
 800c360:	4651      	mov	r1, sl
 800c362:	2201      	movs	r2, #1
 800c364:	4620      	mov	r0, r4
 800c366:	f000 fa8d 	bl	800c884 <__lshift>
 800c36a:	4631      	mov	r1, r6
 800c36c:	4682      	mov	sl, r0
 800c36e:	f000 faf5 	bl	800c95c <__mcmp>
 800c372:	2800      	cmp	r0, #0
 800c374:	dc96      	bgt.n	800c2a4 <_dtoa_r+0xabc>
 800c376:	d102      	bne.n	800c37e <_dtoa_r+0xb96>
 800c378:	f019 0f01 	tst.w	r9, #1
 800c37c:	d192      	bne.n	800c2a4 <_dtoa_r+0xabc>
 800c37e:	462b      	mov	r3, r5
 800c380:	461d      	mov	r5, r3
 800c382:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c386:	2a30      	cmp	r2, #48	; 0x30
 800c388:	d0fa      	beq.n	800c380 <_dtoa_r+0xb98>
 800c38a:	e6dd      	b.n	800c148 <_dtoa_r+0x960>
 800c38c:	9a00      	ldr	r2, [sp, #0]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d189      	bne.n	800c2a6 <_dtoa_r+0xabe>
 800c392:	f10b 0b01 	add.w	fp, fp, #1
 800c396:	2331      	movs	r3, #49	; 0x31
 800c398:	e796      	b.n	800c2c8 <_dtoa_r+0xae0>
 800c39a:	4b0a      	ldr	r3, [pc, #40]	; (800c3c4 <_dtoa_r+0xbdc>)
 800c39c:	f7ff ba99 	b.w	800b8d2 <_dtoa_r+0xea>
 800c3a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f47f aa6d 	bne.w	800b882 <_dtoa_r+0x9a>
 800c3a8:	4b07      	ldr	r3, [pc, #28]	; (800c3c8 <_dtoa_r+0xbe0>)
 800c3aa:	f7ff ba92 	b.w	800b8d2 <_dtoa_r+0xea>
 800c3ae:	9b01      	ldr	r3, [sp, #4]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	dcb5      	bgt.n	800c320 <_dtoa_r+0xb38>
 800c3b4:	9b07      	ldr	r3, [sp, #28]
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	f73f aeb1 	bgt.w	800c11e <_dtoa_r+0x936>
 800c3bc:	e7b0      	b.n	800c320 <_dtoa_r+0xb38>
 800c3be:	bf00      	nop
 800c3c0:	0801123f 	.word	0x0801123f
 800c3c4:	08011109 	.word	0x08011109
 800c3c8:	080111da 	.word	0x080111da

0800c3cc <_free_r>:
 800c3cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3ce:	2900      	cmp	r1, #0
 800c3d0:	d044      	beq.n	800c45c <_free_r+0x90>
 800c3d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3d6:	9001      	str	r0, [sp, #4]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	f1a1 0404 	sub.w	r4, r1, #4
 800c3de:	bfb8      	it	lt
 800c3e0:	18e4      	addlt	r4, r4, r3
 800c3e2:	f7fe fa35 	bl	800a850 <__malloc_lock>
 800c3e6:	4a1e      	ldr	r2, [pc, #120]	; (800c460 <_free_r+0x94>)
 800c3e8:	9801      	ldr	r0, [sp, #4]
 800c3ea:	6813      	ldr	r3, [r2, #0]
 800c3ec:	b933      	cbnz	r3, 800c3fc <_free_r+0x30>
 800c3ee:	6063      	str	r3, [r4, #4]
 800c3f0:	6014      	str	r4, [r2, #0]
 800c3f2:	b003      	add	sp, #12
 800c3f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3f8:	f7fe ba30 	b.w	800a85c <__malloc_unlock>
 800c3fc:	42a3      	cmp	r3, r4
 800c3fe:	d908      	bls.n	800c412 <_free_r+0x46>
 800c400:	6825      	ldr	r5, [r4, #0]
 800c402:	1961      	adds	r1, r4, r5
 800c404:	428b      	cmp	r3, r1
 800c406:	bf01      	itttt	eq
 800c408:	6819      	ldreq	r1, [r3, #0]
 800c40a:	685b      	ldreq	r3, [r3, #4]
 800c40c:	1949      	addeq	r1, r1, r5
 800c40e:	6021      	streq	r1, [r4, #0]
 800c410:	e7ed      	b.n	800c3ee <_free_r+0x22>
 800c412:	461a      	mov	r2, r3
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	b10b      	cbz	r3, 800c41c <_free_r+0x50>
 800c418:	42a3      	cmp	r3, r4
 800c41a:	d9fa      	bls.n	800c412 <_free_r+0x46>
 800c41c:	6811      	ldr	r1, [r2, #0]
 800c41e:	1855      	adds	r5, r2, r1
 800c420:	42a5      	cmp	r5, r4
 800c422:	d10b      	bne.n	800c43c <_free_r+0x70>
 800c424:	6824      	ldr	r4, [r4, #0]
 800c426:	4421      	add	r1, r4
 800c428:	1854      	adds	r4, r2, r1
 800c42a:	42a3      	cmp	r3, r4
 800c42c:	6011      	str	r1, [r2, #0]
 800c42e:	d1e0      	bne.n	800c3f2 <_free_r+0x26>
 800c430:	681c      	ldr	r4, [r3, #0]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	6053      	str	r3, [r2, #4]
 800c436:	440c      	add	r4, r1
 800c438:	6014      	str	r4, [r2, #0]
 800c43a:	e7da      	b.n	800c3f2 <_free_r+0x26>
 800c43c:	d902      	bls.n	800c444 <_free_r+0x78>
 800c43e:	230c      	movs	r3, #12
 800c440:	6003      	str	r3, [r0, #0]
 800c442:	e7d6      	b.n	800c3f2 <_free_r+0x26>
 800c444:	6825      	ldr	r5, [r4, #0]
 800c446:	1961      	adds	r1, r4, r5
 800c448:	428b      	cmp	r3, r1
 800c44a:	bf04      	itt	eq
 800c44c:	6819      	ldreq	r1, [r3, #0]
 800c44e:	685b      	ldreq	r3, [r3, #4]
 800c450:	6063      	str	r3, [r4, #4]
 800c452:	bf04      	itt	eq
 800c454:	1949      	addeq	r1, r1, r5
 800c456:	6021      	streq	r1, [r4, #0]
 800c458:	6054      	str	r4, [r2, #4]
 800c45a:	e7ca      	b.n	800c3f2 <_free_r+0x26>
 800c45c:	b003      	add	sp, #12
 800c45e:	bd30      	pop	{r4, r5, pc}
 800c460:	200015f0 	.word	0x200015f0

0800c464 <_Balloc>:
 800c464:	b570      	push	{r4, r5, r6, lr}
 800c466:	69c6      	ldr	r6, [r0, #28]
 800c468:	4604      	mov	r4, r0
 800c46a:	460d      	mov	r5, r1
 800c46c:	b976      	cbnz	r6, 800c48c <_Balloc+0x28>
 800c46e:	2010      	movs	r0, #16
 800c470:	f7fe f93e 	bl	800a6f0 <malloc>
 800c474:	4602      	mov	r2, r0
 800c476:	61e0      	str	r0, [r4, #28]
 800c478:	b920      	cbnz	r0, 800c484 <_Balloc+0x20>
 800c47a:	4b18      	ldr	r3, [pc, #96]	; (800c4dc <_Balloc+0x78>)
 800c47c:	4818      	ldr	r0, [pc, #96]	; (800c4e0 <_Balloc+0x7c>)
 800c47e:	216b      	movs	r1, #107	; 0x6b
 800c480:	f7ff f90a 	bl	800b698 <__assert_func>
 800c484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c488:	6006      	str	r6, [r0, #0]
 800c48a:	60c6      	str	r6, [r0, #12]
 800c48c:	69e6      	ldr	r6, [r4, #28]
 800c48e:	68f3      	ldr	r3, [r6, #12]
 800c490:	b183      	cbz	r3, 800c4b4 <_Balloc+0x50>
 800c492:	69e3      	ldr	r3, [r4, #28]
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c49a:	b9b8      	cbnz	r0, 800c4cc <_Balloc+0x68>
 800c49c:	2101      	movs	r1, #1
 800c49e:	fa01 f605 	lsl.w	r6, r1, r5
 800c4a2:	1d72      	adds	r2, r6, #5
 800c4a4:	0092      	lsls	r2, r2, #2
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	f000 fd91 	bl	800cfce <_calloc_r>
 800c4ac:	b160      	cbz	r0, 800c4c8 <_Balloc+0x64>
 800c4ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c4b2:	e00e      	b.n	800c4d2 <_Balloc+0x6e>
 800c4b4:	2221      	movs	r2, #33	; 0x21
 800c4b6:	2104      	movs	r1, #4
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	f000 fd88 	bl	800cfce <_calloc_r>
 800c4be:	69e3      	ldr	r3, [r4, #28]
 800c4c0:	60f0      	str	r0, [r6, #12]
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d1e4      	bne.n	800c492 <_Balloc+0x2e>
 800c4c8:	2000      	movs	r0, #0
 800c4ca:	bd70      	pop	{r4, r5, r6, pc}
 800c4cc:	6802      	ldr	r2, [r0, #0]
 800c4ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4d8:	e7f7      	b.n	800c4ca <_Balloc+0x66>
 800c4da:	bf00      	nop
 800c4dc:	0801112d 	.word	0x0801112d
 800c4e0:	08011250 	.word	0x08011250

0800c4e4 <_Bfree>:
 800c4e4:	b570      	push	{r4, r5, r6, lr}
 800c4e6:	69c6      	ldr	r6, [r0, #28]
 800c4e8:	4605      	mov	r5, r0
 800c4ea:	460c      	mov	r4, r1
 800c4ec:	b976      	cbnz	r6, 800c50c <_Bfree+0x28>
 800c4ee:	2010      	movs	r0, #16
 800c4f0:	f7fe f8fe 	bl	800a6f0 <malloc>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	61e8      	str	r0, [r5, #28]
 800c4f8:	b920      	cbnz	r0, 800c504 <_Bfree+0x20>
 800c4fa:	4b09      	ldr	r3, [pc, #36]	; (800c520 <_Bfree+0x3c>)
 800c4fc:	4809      	ldr	r0, [pc, #36]	; (800c524 <_Bfree+0x40>)
 800c4fe:	218f      	movs	r1, #143	; 0x8f
 800c500:	f7ff f8ca 	bl	800b698 <__assert_func>
 800c504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c508:	6006      	str	r6, [r0, #0]
 800c50a:	60c6      	str	r6, [r0, #12]
 800c50c:	b13c      	cbz	r4, 800c51e <_Bfree+0x3a>
 800c50e:	69eb      	ldr	r3, [r5, #28]
 800c510:	6862      	ldr	r2, [r4, #4]
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c518:	6021      	str	r1, [r4, #0]
 800c51a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c51e:	bd70      	pop	{r4, r5, r6, pc}
 800c520:	0801112d 	.word	0x0801112d
 800c524:	08011250 	.word	0x08011250

0800c528 <__multadd>:
 800c528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c52c:	690d      	ldr	r5, [r1, #16]
 800c52e:	4607      	mov	r7, r0
 800c530:	460c      	mov	r4, r1
 800c532:	461e      	mov	r6, r3
 800c534:	f101 0c14 	add.w	ip, r1, #20
 800c538:	2000      	movs	r0, #0
 800c53a:	f8dc 3000 	ldr.w	r3, [ip]
 800c53e:	b299      	uxth	r1, r3
 800c540:	fb02 6101 	mla	r1, r2, r1, r6
 800c544:	0c1e      	lsrs	r6, r3, #16
 800c546:	0c0b      	lsrs	r3, r1, #16
 800c548:	fb02 3306 	mla	r3, r2, r6, r3
 800c54c:	b289      	uxth	r1, r1
 800c54e:	3001      	adds	r0, #1
 800c550:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c554:	4285      	cmp	r5, r0
 800c556:	f84c 1b04 	str.w	r1, [ip], #4
 800c55a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c55e:	dcec      	bgt.n	800c53a <__multadd+0x12>
 800c560:	b30e      	cbz	r6, 800c5a6 <__multadd+0x7e>
 800c562:	68a3      	ldr	r3, [r4, #8]
 800c564:	42ab      	cmp	r3, r5
 800c566:	dc19      	bgt.n	800c59c <__multadd+0x74>
 800c568:	6861      	ldr	r1, [r4, #4]
 800c56a:	4638      	mov	r0, r7
 800c56c:	3101      	adds	r1, #1
 800c56e:	f7ff ff79 	bl	800c464 <_Balloc>
 800c572:	4680      	mov	r8, r0
 800c574:	b928      	cbnz	r0, 800c582 <__multadd+0x5a>
 800c576:	4602      	mov	r2, r0
 800c578:	4b0c      	ldr	r3, [pc, #48]	; (800c5ac <__multadd+0x84>)
 800c57a:	480d      	ldr	r0, [pc, #52]	; (800c5b0 <__multadd+0x88>)
 800c57c:	21ba      	movs	r1, #186	; 0xba
 800c57e:	f7ff f88b 	bl	800b698 <__assert_func>
 800c582:	6922      	ldr	r2, [r4, #16]
 800c584:	3202      	adds	r2, #2
 800c586:	f104 010c 	add.w	r1, r4, #12
 800c58a:	0092      	lsls	r2, r2, #2
 800c58c:	300c      	adds	r0, #12
 800c58e:	f7ff f875 	bl	800b67c <memcpy>
 800c592:	4621      	mov	r1, r4
 800c594:	4638      	mov	r0, r7
 800c596:	f7ff ffa5 	bl	800c4e4 <_Bfree>
 800c59a:	4644      	mov	r4, r8
 800c59c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5a0:	3501      	adds	r5, #1
 800c5a2:	615e      	str	r6, [r3, #20]
 800c5a4:	6125      	str	r5, [r4, #16]
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5ac:	0801123f 	.word	0x0801123f
 800c5b0:	08011250 	.word	0x08011250

0800c5b4 <__hi0bits>:
 800c5b4:	0c03      	lsrs	r3, r0, #16
 800c5b6:	041b      	lsls	r3, r3, #16
 800c5b8:	b9d3      	cbnz	r3, 800c5f0 <__hi0bits+0x3c>
 800c5ba:	0400      	lsls	r0, r0, #16
 800c5bc:	2310      	movs	r3, #16
 800c5be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c5c2:	bf04      	itt	eq
 800c5c4:	0200      	lsleq	r0, r0, #8
 800c5c6:	3308      	addeq	r3, #8
 800c5c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c5cc:	bf04      	itt	eq
 800c5ce:	0100      	lsleq	r0, r0, #4
 800c5d0:	3304      	addeq	r3, #4
 800c5d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c5d6:	bf04      	itt	eq
 800c5d8:	0080      	lsleq	r0, r0, #2
 800c5da:	3302      	addeq	r3, #2
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	db05      	blt.n	800c5ec <__hi0bits+0x38>
 800c5e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c5e4:	f103 0301 	add.w	r3, r3, #1
 800c5e8:	bf08      	it	eq
 800c5ea:	2320      	moveq	r3, #32
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	4770      	bx	lr
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	e7e4      	b.n	800c5be <__hi0bits+0xa>

0800c5f4 <__lo0bits>:
 800c5f4:	6803      	ldr	r3, [r0, #0]
 800c5f6:	f013 0207 	ands.w	r2, r3, #7
 800c5fa:	d00c      	beq.n	800c616 <__lo0bits+0x22>
 800c5fc:	07d9      	lsls	r1, r3, #31
 800c5fe:	d422      	bmi.n	800c646 <__lo0bits+0x52>
 800c600:	079a      	lsls	r2, r3, #30
 800c602:	bf49      	itett	mi
 800c604:	085b      	lsrmi	r3, r3, #1
 800c606:	089b      	lsrpl	r3, r3, #2
 800c608:	6003      	strmi	r3, [r0, #0]
 800c60a:	2201      	movmi	r2, #1
 800c60c:	bf5c      	itt	pl
 800c60e:	6003      	strpl	r3, [r0, #0]
 800c610:	2202      	movpl	r2, #2
 800c612:	4610      	mov	r0, r2
 800c614:	4770      	bx	lr
 800c616:	b299      	uxth	r1, r3
 800c618:	b909      	cbnz	r1, 800c61e <__lo0bits+0x2a>
 800c61a:	0c1b      	lsrs	r3, r3, #16
 800c61c:	2210      	movs	r2, #16
 800c61e:	b2d9      	uxtb	r1, r3
 800c620:	b909      	cbnz	r1, 800c626 <__lo0bits+0x32>
 800c622:	3208      	adds	r2, #8
 800c624:	0a1b      	lsrs	r3, r3, #8
 800c626:	0719      	lsls	r1, r3, #28
 800c628:	bf04      	itt	eq
 800c62a:	091b      	lsreq	r3, r3, #4
 800c62c:	3204      	addeq	r2, #4
 800c62e:	0799      	lsls	r1, r3, #30
 800c630:	bf04      	itt	eq
 800c632:	089b      	lsreq	r3, r3, #2
 800c634:	3202      	addeq	r2, #2
 800c636:	07d9      	lsls	r1, r3, #31
 800c638:	d403      	bmi.n	800c642 <__lo0bits+0x4e>
 800c63a:	085b      	lsrs	r3, r3, #1
 800c63c:	f102 0201 	add.w	r2, r2, #1
 800c640:	d003      	beq.n	800c64a <__lo0bits+0x56>
 800c642:	6003      	str	r3, [r0, #0]
 800c644:	e7e5      	b.n	800c612 <__lo0bits+0x1e>
 800c646:	2200      	movs	r2, #0
 800c648:	e7e3      	b.n	800c612 <__lo0bits+0x1e>
 800c64a:	2220      	movs	r2, #32
 800c64c:	e7e1      	b.n	800c612 <__lo0bits+0x1e>
	...

0800c650 <__i2b>:
 800c650:	b510      	push	{r4, lr}
 800c652:	460c      	mov	r4, r1
 800c654:	2101      	movs	r1, #1
 800c656:	f7ff ff05 	bl	800c464 <_Balloc>
 800c65a:	4602      	mov	r2, r0
 800c65c:	b928      	cbnz	r0, 800c66a <__i2b+0x1a>
 800c65e:	4b05      	ldr	r3, [pc, #20]	; (800c674 <__i2b+0x24>)
 800c660:	4805      	ldr	r0, [pc, #20]	; (800c678 <__i2b+0x28>)
 800c662:	f240 1145 	movw	r1, #325	; 0x145
 800c666:	f7ff f817 	bl	800b698 <__assert_func>
 800c66a:	2301      	movs	r3, #1
 800c66c:	6144      	str	r4, [r0, #20]
 800c66e:	6103      	str	r3, [r0, #16]
 800c670:	bd10      	pop	{r4, pc}
 800c672:	bf00      	nop
 800c674:	0801123f 	.word	0x0801123f
 800c678:	08011250 	.word	0x08011250

0800c67c <__multiply>:
 800c67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c680:	4691      	mov	r9, r2
 800c682:	690a      	ldr	r2, [r1, #16]
 800c684:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c688:	429a      	cmp	r2, r3
 800c68a:	bfb8      	it	lt
 800c68c:	460b      	movlt	r3, r1
 800c68e:	460c      	mov	r4, r1
 800c690:	bfbc      	itt	lt
 800c692:	464c      	movlt	r4, r9
 800c694:	4699      	movlt	r9, r3
 800c696:	6927      	ldr	r7, [r4, #16]
 800c698:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c69c:	68a3      	ldr	r3, [r4, #8]
 800c69e:	6861      	ldr	r1, [r4, #4]
 800c6a0:	eb07 060a 	add.w	r6, r7, sl
 800c6a4:	42b3      	cmp	r3, r6
 800c6a6:	b085      	sub	sp, #20
 800c6a8:	bfb8      	it	lt
 800c6aa:	3101      	addlt	r1, #1
 800c6ac:	f7ff feda 	bl	800c464 <_Balloc>
 800c6b0:	b930      	cbnz	r0, 800c6c0 <__multiply+0x44>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	4b44      	ldr	r3, [pc, #272]	; (800c7c8 <__multiply+0x14c>)
 800c6b6:	4845      	ldr	r0, [pc, #276]	; (800c7cc <__multiply+0x150>)
 800c6b8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c6bc:	f7fe ffec 	bl	800b698 <__assert_func>
 800c6c0:	f100 0514 	add.w	r5, r0, #20
 800c6c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c6c8:	462b      	mov	r3, r5
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	4543      	cmp	r3, r8
 800c6ce:	d321      	bcc.n	800c714 <__multiply+0x98>
 800c6d0:	f104 0314 	add.w	r3, r4, #20
 800c6d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c6d8:	f109 0314 	add.w	r3, r9, #20
 800c6dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c6e0:	9202      	str	r2, [sp, #8]
 800c6e2:	1b3a      	subs	r2, r7, r4
 800c6e4:	3a15      	subs	r2, #21
 800c6e6:	f022 0203 	bic.w	r2, r2, #3
 800c6ea:	3204      	adds	r2, #4
 800c6ec:	f104 0115 	add.w	r1, r4, #21
 800c6f0:	428f      	cmp	r7, r1
 800c6f2:	bf38      	it	cc
 800c6f4:	2204      	movcc	r2, #4
 800c6f6:	9201      	str	r2, [sp, #4]
 800c6f8:	9a02      	ldr	r2, [sp, #8]
 800c6fa:	9303      	str	r3, [sp, #12]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d80c      	bhi.n	800c71a <__multiply+0x9e>
 800c700:	2e00      	cmp	r6, #0
 800c702:	dd03      	ble.n	800c70c <__multiply+0x90>
 800c704:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d05b      	beq.n	800c7c4 <__multiply+0x148>
 800c70c:	6106      	str	r6, [r0, #16]
 800c70e:	b005      	add	sp, #20
 800c710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c714:	f843 2b04 	str.w	r2, [r3], #4
 800c718:	e7d8      	b.n	800c6cc <__multiply+0x50>
 800c71a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c71e:	f1ba 0f00 	cmp.w	sl, #0
 800c722:	d024      	beq.n	800c76e <__multiply+0xf2>
 800c724:	f104 0e14 	add.w	lr, r4, #20
 800c728:	46a9      	mov	r9, r5
 800c72a:	f04f 0c00 	mov.w	ip, #0
 800c72e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c732:	f8d9 1000 	ldr.w	r1, [r9]
 800c736:	fa1f fb82 	uxth.w	fp, r2
 800c73a:	b289      	uxth	r1, r1
 800c73c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c740:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c744:	f8d9 2000 	ldr.w	r2, [r9]
 800c748:	4461      	add	r1, ip
 800c74a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c74e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c752:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c756:	b289      	uxth	r1, r1
 800c758:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c75c:	4577      	cmp	r7, lr
 800c75e:	f849 1b04 	str.w	r1, [r9], #4
 800c762:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c766:	d8e2      	bhi.n	800c72e <__multiply+0xb2>
 800c768:	9a01      	ldr	r2, [sp, #4]
 800c76a:	f845 c002 	str.w	ip, [r5, r2]
 800c76e:	9a03      	ldr	r2, [sp, #12]
 800c770:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c774:	3304      	adds	r3, #4
 800c776:	f1b9 0f00 	cmp.w	r9, #0
 800c77a:	d021      	beq.n	800c7c0 <__multiply+0x144>
 800c77c:	6829      	ldr	r1, [r5, #0]
 800c77e:	f104 0c14 	add.w	ip, r4, #20
 800c782:	46ae      	mov	lr, r5
 800c784:	f04f 0a00 	mov.w	sl, #0
 800c788:	f8bc b000 	ldrh.w	fp, [ip]
 800c78c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c790:	fb09 220b 	mla	r2, r9, fp, r2
 800c794:	4452      	add	r2, sl
 800c796:	b289      	uxth	r1, r1
 800c798:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c79c:	f84e 1b04 	str.w	r1, [lr], #4
 800c7a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c7a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c7a8:	f8be 1000 	ldrh.w	r1, [lr]
 800c7ac:	fb09 110a 	mla	r1, r9, sl, r1
 800c7b0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c7b4:	4567      	cmp	r7, ip
 800c7b6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c7ba:	d8e5      	bhi.n	800c788 <__multiply+0x10c>
 800c7bc:	9a01      	ldr	r2, [sp, #4]
 800c7be:	50a9      	str	r1, [r5, r2]
 800c7c0:	3504      	adds	r5, #4
 800c7c2:	e799      	b.n	800c6f8 <__multiply+0x7c>
 800c7c4:	3e01      	subs	r6, #1
 800c7c6:	e79b      	b.n	800c700 <__multiply+0x84>
 800c7c8:	0801123f 	.word	0x0801123f
 800c7cc:	08011250 	.word	0x08011250

0800c7d0 <__pow5mult>:
 800c7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7d4:	4615      	mov	r5, r2
 800c7d6:	f012 0203 	ands.w	r2, r2, #3
 800c7da:	4606      	mov	r6, r0
 800c7dc:	460f      	mov	r7, r1
 800c7de:	d007      	beq.n	800c7f0 <__pow5mult+0x20>
 800c7e0:	4c25      	ldr	r4, [pc, #148]	; (800c878 <__pow5mult+0xa8>)
 800c7e2:	3a01      	subs	r2, #1
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7ea:	f7ff fe9d 	bl	800c528 <__multadd>
 800c7ee:	4607      	mov	r7, r0
 800c7f0:	10ad      	asrs	r5, r5, #2
 800c7f2:	d03d      	beq.n	800c870 <__pow5mult+0xa0>
 800c7f4:	69f4      	ldr	r4, [r6, #28]
 800c7f6:	b97c      	cbnz	r4, 800c818 <__pow5mult+0x48>
 800c7f8:	2010      	movs	r0, #16
 800c7fa:	f7fd ff79 	bl	800a6f0 <malloc>
 800c7fe:	4602      	mov	r2, r0
 800c800:	61f0      	str	r0, [r6, #28]
 800c802:	b928      	cbnz	r0, 800c810 <__pow5mult+0x40>
 800c804:	4b1d      	ldr	r3, [pc, #116]	; (800c87c <__pow5mult+0xac>)
 800c806:	481e      	ldr	r0, [pc, #120]	; (800c880 <__pow5mult+0xb0>)
 800c808:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c80c:	f7fe ff44 	bl	800b698 <__assert_func>
 800c810:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c814:	6004      	str	r4, [r0, #0]
 800c816:	60c4      	str	r4, [r0, #12]
 800c818:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c81c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c820:	b94c      	cbnz	r4, 800c836 <__pow5mult+0x66>
 800c822:	f240 2171 	movw	r1, #625	; 0x271
 800c826:	4630      	mov	r0, r6
 800c828:	f7ff ff12 	bl	800c650 <__i2b>
 800c82c:	2300      	movs	r3, #0
 800c82e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c832:	4604      	mov	r4, r0
 800c834:	6003      	str	r3, [r0, #0]
 800c836:	f04f 0900 	mov.w	r9, #0
 800c83a:	07eb      	lsls	r3, r5, #31
 800c83c:	d50a      	bpl.n	800c854 <__pow5mult+0x84>
 800c83e:	4639      	mov	r1, r7
 800c840:	4622      	mov	r2, r4
 800c842:	4630      	mov	r0, r6
 800c844:	f7ff ff1a 	bl	800c67c <__multiply>
 800c848:	4639      	mov	r1, r7
 800c84a:	4680      	mov	r8, r0
 800c84c:	4630      	mov	r0, r6
 800c84e:	f7ff fe49 	bl	800c4e4 <_Bfree>
 800c852:	4647      	mov	r7, r8
 800c854:	106d      	asrs	r5, r5, #1
 800c856:	d00b      	beq.n	800c870 <__pow5mult+0xa0>
 800c858:	6820      	ldr	r0, [r4, #0]
 800c85a:	b938      	cbnz	r0, 800c86c <__pow5mult+0x9c>
 800c85c:	4622      	mov	r2, r4
 800c85e:	4621      	mov	r1, r4
 800c860:	4630      	mov	r0, r6
 800c862:	f7ff ff0b 	bl	800c67c <__multiply>
 800c866:	6020      	str	r0, [r4, #0]
 800c868:	f8c0 9000 	str.w	r9, [r0]
 800c86c:	4604      	mov	r4, r0
 800c86e:	e7e4      	b.n	800c83a <__pow5mult+0x6a>
 800c870:	4638      	mov	r0, r7
 800c872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c876:	bf00      	nop
 800c878:	080113a0 	.word	0x080113a0
 800c87c:	0801112d 	.word	0x0801112d
 800c880:	08011250 	.word	0x08011250

0800c884 <__lshift>:
 800c884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c888:	460c      	mov	r4, r1
 800c88a:	6849      	ldr	r1, [r1, #4]
 800c88c:	6923      	ldr	r3, [r4, #16]
 800c88e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c892:	68a3      	ldr	r3, [r4, #8]
 800c894:	4607      	mov	r7, r0
 800c896:	4691      	mov	r9, r2
 800c898:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c89c:	f108 0601 	add.w	r6, r8, #1
 800c8a0:	42b3      	cmp	r3, r6
 800c8a2:	db0b      	blt.n	800c8bc <__lshift+0x38>
 800c8a4:	4638      	mov	r0, r7
 800c8a6:	f7ff fddd 	bl	800c464 <_Balloc>
 800c8aa:	4605      	mov	r5, r0
 800c8ac:	b948      	cbnz	r0, 800c8c2 <__lshift+0x3e>
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	4b28      	ldr	r3, [pc, #160]	; (800c954 <__lshift+0xd0>)
 800c8b2:	4829      	ldr	r0, [pc, #164]	; (800c958 <__lshift+0xd4>)
 800c8b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c8b8:	f7fe feee 	bl	800b698 <__assert_func>
 800c8bc:	3101      	adds	r1, #1
 800c8be:	005b      	lsls	r3, r3, #1
 800c8c0:	e7ee      	b.n	800c8a0 <__lshift+0x1c>
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	f100 0114 	add.w	r1, r0, #20
 800c8c8:	f100 0210 	add.w	r2, r0, #16
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	4553      	cmp	r3, sl
 800c8d0:	db33      	blt.n	800c93a <__lshift+0xb6>
 800c8d2:	6920      	ldr	r0, [r4, #16]
 800c8d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c8d8:	f104 0314 	add.w	r3, r4, #20
 800c8dc:	f019 091f 	ands.w	r9, r9, #31
 800c8e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c8e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c8e8:	d02b      	beq.n	800c942 <__lshift+0xbe>
 800c8ea:	f1c9 0e20 	rsb	lr, r9, #32
 800c8ee:	468a      	mov	sl, r1
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	6818      	ldr	r0, [r3, #0]
 800c8f4:	fa00 f009 	lsl.w	r0, r0, r9
 800c8f8:	4310      	orrs	r0, r2
 800c8fa:	f84a 0b04 	str.w	r0, [sl], #4
 800c8fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c902:	459c      	cmp	ip, r3
 800c904:	fa22 f20e 	lsr.w	r2, r2, lr
 800c908:	d8f3      	bhi.n	800c8f2 <__lshift+0x6e>
 800c90a:	ebac 0304 	sub.w	r3, ip, r4
 800c90e:	3b15      	subs	r3, #21
 800c910:	f023 0303 	bic.w	r3, r3, #3
 800c914:	3304      	adds	r3, #4
 800c916:	f104 0015 	add.w	r0, r4, #21
 800c91a:	4584      	cmp	ip, r0
 800c91c:	bf38      	it	cc
 800c91e:	2304      	movcc	r3, #4
 800c920:	50ca      	str	r2, [r1, r3]
 800c922:	b10a      	cbz	r2, 800c928 <__lshift+0xa4>
 800c924:	f108 0602 	add.w	r6, r8, #2
 800c928:	3e01      	subs	r6, #1
 800c92a:	4638      	mov	r0, r7
 800c92c:	612e      	str	r6, [r5, #16]
 800c92e:	4621      	mov	r1, r4
 800c930:	f7ff fdd8 	bl	800c4e4 <_Bfree>
 800c934:	4628      	mov	r0, r5
 800c936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c93a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c93e:	3301      	adds	r3, #1
 800c940:	e7c5      	b.n	800c8ce <__lshift+0x4a>
 800c942:	3904      	subs	r1, #4
 800c944:	f853 2b04 	ldr.w	r2, [r3], #4
 800c948:	f841 2f04 	str.w	r2, [r1, #4]!
 800c94c:	459c      	cmp	ip, r3
 800c94e:	d8f9      	bhi.n	800c944 <__lshift+0xc0>
 800c950:	e7ea      	b.n	800c928 <__lshift+0xa4>
 800c952:	bf00      	nop
 800c954:	0801123f 	.word	0x0801123f
 800c958:	08011250 	.word	0x08011250

0800c95c <__mcmp>:
 800c95c:	b530      	push	{r4, r5, lr}
 800c95e:	6902      	ldr	r2, [r0, #16]
 800c960:	690c      	ldr	r4, [r1, #16]
 800c962:	1b12      	subs	r2, r2, r4
 800c964:	d10e      	bne.n	800c984 <__mcmp+0x28>
 800c966:	f100 0314 	add.w	r3, r0, #20
 800c96a:	3114      	adds	r1, #20
 800c96c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c970:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c974:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c978:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c97c:	42a5      	cmp	r5, r4
 800c97e:	d003      	beq.n	800c988 <__mcmp+0x2c>
 800c980:	d305      	bcc.n	800c98e <__mcmp+0x32>
 800c982:	2201      	movs	r2, #1
 800c984:	4610      	mov	r0, r2
 800c986:	bd30      	pop	{r4, r5, pc}
 800c988:	4283      	cmp	r3, r0
 800c98a:	d3f3      	bcc.n	800c974 <__mcmp+0x18>
 800c98c:	e7fa      	b.n	800c984 <__mcmp+0x28>
 800c98e:	f04f 32ff 	mov.w	r2, #4294967295
 800c992:	e7f7      	b.n	800c984 <__mcmp+0x28>

0800c994 <__mdiff>:
 800c994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c998:	460c      	mov	r4, r1
 800c99a:	4606      	mov	r6, r0
 800c99c:	4611      	mov	r1, r2
 800c99e:	4620      	mov	r0, r4
 800c9a0:	4690      	mov	r8, r2
 800c9a2:	f7ff ffdb 	bl	800c95c <__mcmp>
 800c9a6:	1e05      	subs	r5, r0, #0
 800c9a8:	d110      	bne.n	800c9cc <__mdiff+0x38>
 800c9aa:	4629      	mov	r1, r5
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	f7ff fd59 	bl	800c464 <_Balloc>
 800c9b2:	b930      	cbnz	r0, 800c9c2 <__mdiff+0x2e>
 800c9b4:	4b3a      	ldr	r3, [pc, #232]	; (800caa0 <__mdiff+0x10c>)
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	f240 2137 	movw	r1, #567	; 0x237
 800c9bc:	4839      	ldr	r0, [pc, #228]	; (800caa4 <__mdiff+0x110>)
 800c9be:	f7fe fe6b 	bl	800b698 <__assert_func>
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c9c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9cc:	bfa4      	itt	ge
 800c9ce:	4643      	movge	r3, r8
 800c9d0:	46a0      	movge	r8, r4
 800c9d2:	4630      	mov	r0, r6
 800c9d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c9d8:	bfa6      	itte	ge
 800c9da:	461c      	movge	r4, r3
 800c9dc:	2500      	movge	r5, #0
 800c9de:	2501      	movlt	r5, #1
 800c9e0:	f7ff fd40 	bl	800c464 <_Balloc>
 800c9e4:	b920      	cbnz	r0, 800c9f0 <__mdiff+0x5c>
 800c9e6:	4b2e      	ldr	r3, [pc, #184]	; (800caa0 <__mdiff+0x10c>)
 800c9e8:	4602      	mov	r2, r0
 800c9ea:	f240 2145 	movw	r1, #581	; 0x245
 800c9ee:	e7e5      	b.n	800c9bc <__mdiff+0x28>
 800c9f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c9f4:	6926      	ldr	r6, [r4, #16]
 800c9f6:	60c5      	str	r5, [r0, #12]
 800c9f8:	f104 0914 	add.w	r9, r4, #20
 800c9fc:	f108 0514 	add.w	r5, r8, #20
 800ca00:	f100 0e14 	add.w	lr, r0, #20
 800ca04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ca08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ca0c:	f108 0210 	add.w	r2, r8, #16
 800ca10:	46f2      	mov	sl, lr
 800ca12:	2100      	movs	r1, #0
 800ca14:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ca1c:	fa11 f88b 	uxtah	r8, r1, fp
 800ca20:	b299      	uxth	r1, r3
 800ca22:	0c1b      	lsrs	r3, r3, #16
 800ca24:	eba8 0801 	sub.w	r8, r8, r1
 800ca28:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca2c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ca30:	fa1f f888 	uxth.w	r8, r8
 800ca34:	1419      	asrs	r1, r3, #16
 800ca36:	454e      	cmp	r6, r9
 800ca38:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ca3c:	f84a 3b04 	str.w	r3, [sl], #4
 800ca40:	d8e8      	bhi.n	800ca14 <__mdiff+0x80>
 800ca42:	1b33      	subs	r3, r6, r4
 800ca44:	3b15      	subs	r3, #21
 800ca46:	f023 0303 	bic.w	r3, r3, #3
 800ca4a:	3304      	adds	r3, #4
 800ca4c:	3415      	adds	r4, #21
 800ca4e:	42a6      	cmp	r6, r4
 800ca50:	bf38      	it	cc
 800ca52:	2304      	movcc	r3, #4
 800ca54:	441d      	add	r5, r3
 800ca56:	4473      	add	r3, lr
 800ca58:	469e      	mov	lr, r3
 800ca5a:	462e      	mov	r6, r5
 800ca5c:	4566      	cmp	r6, ip
 800ca5e:	d30e      	bcc.n	800ca7e <__mdiff+0xea>
 800ca60:	f10c 0203 	add.w	r2, ip, #3
 800ca64:	1b52      	subs	r2, r2, r5
 800ca66:	f022 0203 	bic.w	r2, r2, #3
 800ca6a:	3d03      	subs	r5, #3
 800ca6c:	45ac      	cmp	ip, r5
 800ca6e:	bf38      	it	cc
 800ca70:	2200      	movcc	r2, #0
 800ca72:	4413      	add	r3, r2
 800ca74:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ca78:	b17a      	cbz	r2, 800ca9a <__mdiff+0x106>
 800ca7a:	6107      	str	r7, [r0, #16]
 800ca7c:	e7a4      	b.n	800c9c8 <__mdiff+0x34>
 800ca7e:	f856 8b04 	ldr.w	r8, [r6], #4
 800ca82:	fa11 f288 	uxtah	r2, r1, r8
 800ca86:	1414      	asrs	r4, r2, #16
 800ca88:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ca8c:	b292      	uxth	r2, r2
 800ca8e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ca92:	f84e 2b04 	str.w	r2, [lr], #4
 800ca96:	1421      	asrs	r1, r4, #16
 800ca98:	e7e0      	b.n	800ca5c <__mdiff+0xc8>
 800ca9a:	3f01      	subs	r7, #1
 800ca9c:	e7ea      	b.n	800ca74 <__mdiff+0xe0>
 800ca9e:	bf00      	nop
 800caa0:	0801123f 	.word	0x0801123f
 800caa4:	08011250 	.word	0x08011250

0800caa8 <__d2b>:
 800caa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800caac:	460f      	mov	r7, r1
 800caae:	2101      	movs	r1, #1
 800cab0:	ec59 8b10 	vmov	r8, r9, d0
 800cab4:	4616      	mov	r6, r2
 800cab6:	f7ff fcd5 	bl	800c464 <_Balloc>
 800caba:	4604      	mov	r4, r0
 800cabc:	b930      	cbnz	r0, 800cacc <__d2b+0x24>
 800cabe:	4602      	mov	r2, r0
 800cac0:	4b24      	ldr	r3, [pc, #144]	; (800cb54 <__d2b+0xac>)
 800cac2:	4825      	ldr	r0, [pc, #148]	; (800cb58 <__d2b+0xb0>)
 800cac4:	f240 310f 	movw	r1, #783	; 0x30f
 800cac8:	f7fe fde6 	bl	800b698 <__assert_func>
 800cacc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cad0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cad4:	bb2d      	cbnz	r5, 800cb22 <__d2b+0x7a>
 800cad6:	9301      	str	r3, [sp, #4]
 800cad8:	f1b8 0300 	subs.w	r3, r8, #0
 800cadc:	d026      	beq.n	800cb2c <__d2b+0x84>
 800cade:	4668      	mov	r0, sp
 800cae0:	9300      	str	r3, [sp, #0]
 800cae2:	f7ff fd87 	bl	800c5f4 <__lo0bits>
 800cae6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800caea:	b1e8      	cbz	r0, 800cb28 <__d2b+0x80>
 800caec:	f1c0 0320 	rsb	r3, r0, #32
 800caf0:	fa02 f303 	lsl.w	r3, r2, r3
 800caf4:	430b      	orrs	r3, r1
 800caf6:	40c2      	lsrs	r2, r0
 800caf8:	6163      	str	r3, [r4, #20]
 800cafa:	9201      	str	r2, [sp, #4]
 800cafc:	9b01      	ldr	r3, [sp, #4]
 800cafe:	61a3      	str	r3, [r4, #24]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	bf14      	ite	ne
 800cb04:	2202      	movne	r2, #2
 800cb06:	2201      	moveq	r2, #1
 800cb08:	6122      	str	r2, [r4, #16]
 800cb0a:	b1bd      	cbz	r5, 800cb3c <__d2b+0x94>
 800cb0c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cb10:	4405      	add	r5, r0
 800cb12:	603d      	str	r5, [r7, #0]
 800cb14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb18:	6030      	str	r0, [r6, #0]
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	b003      	add	sp, #12
 800cb1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb26:	e7d6      	b.n	800cad6 <__d2b+0x2e>
 800cb28:	6161      	str	r1, [r4, #20]
 800cb2a:	e7e7      	b.n	800cafc <__d2b+0x54>
 800cb2c:	a801      	add	r0, sp, #4
 800cb2e:	f7ff fd61 	bl	800c5f4 <__lo0bits>
 800cb32:	9b01      	ldr	r3, [sp, #4]
 800cb34:	6163      	str	r3, [r4, #20]
 800cb36:	3020      	adds	r0, #32
 800cb38:	2201      	movs	r2, #1
 800cb3a:	e7e5      	b.n	800cb08 <__d2b+0x60>
 800cb3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb44:	6038      	str	r0, [r7, #0]
 800cb46:	6918      	ldr	r0, [r3, #16]
 800cb48:	f7ff fd34 	bl	800c5b4 <__hi0bits>
 800cb4c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb50:	e7e2      	b.n	800cb18 <__d2b+0x70>
 800cb52:	bf00      	nop
 800cb54:	0801123f 	.word	0x0801123f
 800cb58:	08011250 	.word	0x08011250

0800cb5c <__ssputs_r>:
 800cb5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb60:	688e      	ldr	r6, [r1, #8]
 800cb62:	461f      	mov	r7, r3
 800cb64:	42be      	cmp	r6, r7
 800cb66:	680b      	ldr	r3, [r1, #0]
 800cb68:	4682      	mov	sl, r0
 800cb6a:	460c      	mov	r4, r1
 800cb6c:	4690      	mov	r8, r2
 800cb6e:	d82c      	bhi.n	800cbca <__ssputs_r+0x6e>
 800cb70:	898a      	ldrh	r2, [r1, #12]
 800cb72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb76:	d026      	beq.n	800cbc6 <__ssputs_r+0x6a>
 800cb78:	6965      	ldr	r5, [r4, #20]
 800cb7a:	6909      	ldr	r1, [r1, #16]
 800cb7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb80:	eba3 0901 	sub.w	r9, r3, r1
 800cb84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb88:	1c7b      	adds	r3, r7, #1
 800cb8a:	444b      	add	r3, r9
 800cb8c:	106d      	asrs	r5, r5, #1
 800cb8e:	429d      	cmp	r5, r3
 800cb90:	bf38      	it	cc
 800cb92:	461d      	movcc	r5, r3
 800cb94:	0553      	lsls	r3, r2, #21
 800cb96:	d527      	bpl.n	800cbe8 <__ssputs_r+0x8c>
 800cb98:	4629      	mov	r1, r5
 800cb9a:	f7fd fdd9 	bl	800a750 <_malloc_r>
 800cb9e:	4606      	mov	r6, r0
 800cba0:	b360      	cbz	r0, 800cbfc <__ssputs_r+0xa0>
 800cba2:	6921      	ldr	r1, [r4, #16]
 800cba4:	464a      	mov	r2, r9
 800cba6:	f7fe fd69 	bl	800b67c <memcpy>
 800cbaa:	89a3      	ldrh	r3, [r4, #12]
 800cbac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cbb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbb4:	81a3      	strh	r3, [r4, #12]
 800cbb6:	6126      	str	r6, [r4, #16]
 800cbb8:	6165      	str	r5, [r4, #20]
 800cbba:	444e      	add	r6, r9
 800cbbc:	eba5 0509 	sub.w	r5, r5, r9
 800cbc0:	6026      	str	r6, [r4, #0]
 800cbc2:	60a5      	str	r5, [r4, #8]
 800cbc4:	463e      	mov	r6, r7
 800cbc6:	42be      	cmp	r6, r7
 800cbc8:	d900      	bls.n	800cbcc <__ssputs_r+0x70>
 800cbca:	463e      	mov	r6, r7
 800cbcc:	6820      	ldr	r0, [r4, #0]
 800cbce:	4632      	mov	r2, r6
 800cbd0:	4641      	mov	r1, r8
 800cbd2:	f000 f9db 	bl	800cf8c <memmove>
 800cbd6:	68a3      	ldr	r3, [r4, #8]
 800cbd8:	1b9b      	subs	r3, r3, r6
 800cbda:	60a3      	str	r3, [r4, #8]
 800cbdc:	6823      	ldr	r3, [r4, #0]
 800cbde:	4433      	add	r3, r6
 800cbe0:	6023      	str	r3, [r4, #0]
 800cbe2:	2000      	movs	r0, #0
 800cbe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbe8:	462a      	mov	r2, r5
 800cbea:	f000 fa18 	bl	800d01e <_realloc_r>
 800cbee:	4606      	mov	r6, r0
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	d1e0      	bne.n	800cbb6 <__ssputs_r+0x5a>
 800cbf4:	6921      	ldr	r1, [r4, #16]
 800cbf6:	4650      	mov	r0, sl
 800cbf8:	f7ff fbe8 	bl	800c3cc <_free_r>
 800cbfc:	230c      	movs	r3, #12
 800cbfe:	f8ca 3000 	str.w	r3, [sl]
 800cc02:	89a3      	ldrh	r3, [r4, #12]
 800cc04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc08:	81a3      	strh	r3, [r4, #12]
 800cc0a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc0e:	e7e9      	b.n	800cbe4 <__ssputs_r+0x88>

0800cc10 <_svfiprintf_r>:
 800cc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc14:	4698      	mov	r8, r3
 800cc16:	898b      	ldrh	r3, [r1, #12]
 800cc18:	061b      	lsls	r3, r3, #24
 800cc1a:	b09d      	sub	sp, #116	; 0x74
 800cc1c:	4607      	mov	r7, r0
 800cc1e:	460d      	mov	r5, r1
 800cc20:	4614      	mov	r4, r2
 800cc22:	d50e      	bpl.n	800cc42 <_svfiprintf_r+0x32>
 800cc24:	690b      	ldr	r3, [r1, #16]
 800cc26:	b963      	cbnz	r3, 800cc42 <_svfiprintf_r+0x32>
 800cc28:	2140      	movs	r1, #64	; 0x40
 800cc2a:	f7fd fd91 	bl	800a750 <_malloc_r>
 800cc2e:	6028      	str	r0, [r5, #0]
 800cc30:	6128      	str	r0, [r5, #16]
 800cc32:	b920      	cbnz	r0, 800cc3e <_svfiprintf_r+0x2e>
 800cc34:	230c      	movs	r3, #12
 800cc36:	603b      	str	r3, [r7, #0]
 800cc38:	f04f 30ff 	mov.w	r0, #4294967295
 800cc3c:	e0d0      	b.n	800cde0 <_svfiprintf_r+0x1d0>
 800cc3e:	2340      	movs	r3, #64	; 0x40
 800cc40:	616b      	str	r3, [r5, #20]
 800cc42:	2300      	movs	r3, #0
 800cc44:	9309      	str	r3, [sp, #36]	; 0x24
 800cc46:	2320      	movs	r3, #32
 800cc48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc50:	2330      	movs	r3, #48	; 0x30
 800cc52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cdf8 <_svfiprintf_r+0x1e8>
 800cc56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc5a:	f04f 0901 	mov.w	r9, #1
 800cc5e:	4623      	mov	r3, r4
 800cc60:	469a      	mov	sl, r3
 800cc62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc66:	b10a      	cbz	r2, 800cc6c <_svfiprintf_r+0x5c>
 800cc68:	2a25      	cmp	r2, #37	; 0x25
 800cc6a:	d1f9      	bne.n	800cc60 <_svfiprintf_r+0x50>
 800cc6c:	ebba 0b04 	subs.w	fp, sl, r4
 800cc70:	d00b      	beq.n	800cc8a <_svfiprintf_r+0x7a>
 800cc72:	465b      	mov	r3, fp
 800cc74:	4622      	mov	r2, r4
 800cc76:	4629      	mov	r1, r5
 800cc78:	4638      	mov	r0, r7
 800cc7a:	f7ff ff6f 	bl	800cb5c <__ssputs_r>
 800cc7e:	3001      	adds	r0, #1
 800cc80:	f000 80a9 	beq.w	800cdd6 <_svfiprintf_r+0x1c6>
 800cc84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc86:	445a      	add	r2, fp
 800cc88:	9209      	str	r2, [sp, #36]	; 0x24
 800cc8a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	f000 80a1 	beq.w	800cdd6 <_svfiprintf_r+0x1c6>
 800cc94:	2300      	movs	r3, #0
 800cc96:	f04f 32ff 	mov.w	r2, #4294967295
 800cc9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc9e:	f10a 0a01 	add.w	sl, sl, #1
 800cca2:	9304      	str	r3, [sp, #16]
 800cca4:	9307      	str	r3, [sp, #28]
 800cca6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccaa:	931a      	str	r3, [sp, #104]	; 0x68
 800ccac:	4654      	mov	r4, sl
 800ccae:	2205      	movs	r2, #5
 800ccb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccb4:	4850      	ldr	r0, [pc, #320]	; (800cdf8 <_svfiprintf_r+0x1e8>)
 800ccb6:	f7f3 fa93 	bl	80001e0 <memchr>
 800ccba:	9a04      	ldr	r2, [sp, #16]
 800ccbc:	b9d8      	cbnz	r0, 800ccf6 <_svfiprintf_r+0xe6>
 800ccbe:	06d0      	lsls	r0, r2, #27
 800ccc0:	bf44      	itt	mi
 800ccc2:	2320      	movmi	r3, #32
 800ccc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccc8:	0711      	lsls	r1, r2, #28
 800ccca:	bf44      	itt	mi
 800cccc:	232b      	movmi	r3, #43	; 0x2b
 800ccce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccd2:	f89a 3000 	ldrb.w	r3, [sl]
 800ccd6:	2b2a      	cmp	r3, #42	; 0x2a
 800ccd8:	d015      	beq.n	800cd06 <_svfiprintf_r+0xf6>
 800ccda:	9a07      	ldr	r2, [sp, #28]
 800ccdc:	4654      	mov	r4, sl
 800ccde:	2000      	movs	r0, #0
 800cce0:	f04f 0c0a 	mov.w	ip, #10
 800cce4:	4621      	mov	r1, r4
 800cce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccea:	3b30      	subs	r3, #48	; 0x30
 800ccec:	2b09      	cmp	r3, #9
 800ccee:	d94d      	bls.n	800cd8c <_svfiprintf_r+0x17c>
 800ccf0:	b1b0      	cbz	r0, 800cd20 <_svfiprintf_r+0x110>
 800ccf2:	9207      	str	r2, [sp, #28]
 800ccf4:	e014      	b.n	800cd20 <_svfiprintf_r+0x110>
 800ccf6:	eba0 0308 	sub.w	r3, r0, r8
 800ccfa:	fa09 f303 	lsl.w	r3, r9, r3
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	9304      	str	r3, [sp, #16]
 800cd02:	46a2      	mov	sl, r4
 800cd04:	e7d2      	b.n	800ccac <_svfiprintf_r+0x9c>
 800cd06:	9b03      	ldr	r3, [sp, #12]
 800cd08:	1d19      	adds	r1, r3, #4
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	9103      	str	r1, [sp, #12]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	bfbb      	ittet	lt
 800cd12:	425b      	neglt	r3, r3
 800cd14:	f042 0202 	orrlt.w	r2, r2, #2
 800cd18:	9307      	strge	r3, [sp, #28]
 800cd1a:	9307      	strlt	r3, [sp, #28]
 800cd1c:	bfb8      	it	lt
 800cd1e:	9204      	strlt	r2, [sp, #16]
 800cd20:	7823      	ldrb	r3, [r4, #0]
 800cd22:	2b2e      	cmp	r3, #46	; 0x2e
 800cd24:	d10c      	bne.n	800cd40 <_svfiprintf_r+0x130>
 800cd26:	7863      	ldrb	r3, [r4, #1]
 800cd28:	2b2a      	cmp	r3, #42	; 0x2a
 800cd2a:	d134      	bne.n	800cd96 <_svfiprintf_r+0x186>
 800cd2c:	9b03      	ldr	r3, [sp, #12]
 800cd2e:	1d1a      	adds	r2, r3, #4
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	9203      	str	r2, [sp, #12]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	bfb8      	it	lt
 800cd38:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd3c:	3402      	adds	r4, #2
 800cd3e:	9305      	str	r3, [sp, #20]
 800cd40:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ce08 <_svfiprintf_r+0x1f8>
 800cd44:	7821      	ldrb	r1, [r4, #0]
 800cd46:	2203      	movs	r2, #3
 800cd48:	4650      	mov	r0, sl
 800cd4a:	f7f3 fa49 	bl	80001e0 <memchr>
 800cd4e:	b138      	cbz	r0, 800cd60 <_svfiprintf_r+0x150>
 800cd50:	9b04      	ldr	r3, [sp, #16]
 800cd52:	eba0 000a 	sub.w	r0, r0, sl
 800cd56:	2240      	movs	r2, #64	; 0x40
 800cd58:	4082      	lsls	r2, r0
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	3401      	adds	r4, #1
 800cd5e:	9304      	str	r3, [sp, #16]
 800cd60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd64:	4825      	ldr	r0, [pc, #148]	; (800cdfc <_svfiprintf_r+0x1ec>)
 800cd66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd6a:	2206      	movs	r2, #6
 800cd6c:	f7f3 fa38 	bl	80001e0 <memchr>
 800cd70:	2800      	cmp	r0, #0
 800cd72:	d038      	beq.n	800cde6 <_svfiprintf_r+0x1d6>
 800cd74:	4b22      	ldr	r3, [pc, #136]	; (800ce00 <_svfiprintf_r+0x1f0>)
 800cd76:	bb1b      	cbnz	r3, 800cdc0 <_svfiprintf_r+0x1b0>
 800cd78:	9b03      	ldr	r3, [sp, #12]
 800cd7a:	3307      	adds	r3, #7
 800cd7c:	f023 0307 	bic.w	r3, r3, #7
 800cd80:	3308      	adds	r3, #8
 800cd82:	9303      	str	r3, [sp, #12]
 800cd84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd86:	4433      	add	r3, r6
 800cd88:	9309      	str	r3, [sp, #36]	; 0x24
 800cd8a:	e768      	b.n	800cc5e <_svfiprintf_r+0x4e>
 800cd8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd90:	460c      	mov	r4, r1
 800cd92:	2001      	movs	r0, #1
 800cd94:	e7a6      	b.n	800cce4 <_svfiprintf_r+0xd4>
 800cd96:	2300      	movs	r3, #0
 800cd98:	3401      	adds	r4, #1
 800cd9a:	9305      	str	r3, [sp, #20]
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	f04f 0c0a 	mov.w	ip, #10
 800cda2:	4620      	mov	r0, r4
 800cda4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cda8:	3a30      	subs	r2, #48	; 0x30
 800cdaa:	2a09      	cmp	r2, #9
 800cdac:	d903      	bls.n	800cdb6 <_svfiprintf_r+0x1a6>
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d0c6      	beq.n	800cd40 <_svfiprintf_r+0x130>
 800cdb2:	9105      	str	r1, [sp, #20]
 800cdb4:	e7c4      	b.n	800cd40 <_svfiprintf_r+0x130>
 800cdb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdba:	4604      	mov	r4, r0
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	e7f0      	b.n	800cda2 <_svfiprintf_r+0x192>
 800cdc0:	ab03      	add	r3, sp, #12
 800cdc2:	9300      	str	r3, [sp, #0]
 800cdc4:	462a      	mov	r2, r5
 800cdc6:	4b0f      	ldr	r3, [pc, #60]	; (800ce04 <_svfiprintf_r+0x1f4>)
 800cdc8:	a904      	add	r1, sp, #16
 800cdca:	4638      	mov	r0, r7
 800cdcc:	f7fd fe78 	bl	800aac0 <_printf_float>
 800cdd0:	1c42      	adds	r2, r0, #1
 800cdd2:	4606      	mov	r6, r0
 800cdd4:	d1d6      	bne.n	800cd84 <_svfiprintf_r+0x174>
 800cdd6:	89ab      	ldrh	r3, [r5, #12]
 800cdd8:	065b      	lsls	r3, r3, #25
 800cdda:	f53f af2d 	bmi.w	800cc38 <_svfiprintf_r+0x28>
 800cdde:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cde0:	b01d      	add	sp, #116	; 0x74
 800cde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde6:	ab03      	add	r3, sp, #12
 800cde8:	9300      	str	r3, [sp, #0]
 800cdea:	462a      	mov	r2, r5
 800cdec:	4b05      	ldr	r3, [pc, #20]	; (800ce04 <_svfiprintf_r+0x1f4>)
 800cdee:	a904      	add	r1, sp, #16
 800cdf0:	4638      	mov	r0, r7
 800cdf2:	f7fe f909 	bl	800b008 <_printf_i>
 800cdf6:	e7eb      	b.n	800cdd0 <_svfiprintf_r+0x1c0>
 800cdf8:	080113ac 	.word	0x080113ac
 800cdfc:	080113b6 	.word	0x080113b6
 800ce00:	0800aac1 	.word	0x0800aac1
 800ce04:	0800cb5d 	.word	0x0800cb5d
 800ce08:	080113b2 	.word	0x080113b2

0800ce0c <__sflush_r>:
 800ce0c:	898a      	ldrh	r2, [r1, #12]
 800ce0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce12:	4605      	mov	r5, r0
 800ce14:	0710      	lsls	r0, r2, #28
 800ce16:	460c      	mov	r4, r1
 800ce18:	d458      	bmi.n	800cecc <__sflush_r+0xc0>
 800ce1a:	684b      	ldr	r3, [r1, #4]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	dc05      	bgt.n	800ce2c <__sflush_r+0x20>
 800ce20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	dc02      	bgt.n	800ce2c <__sflush_r+0x20>
 800ce26:	2000      	movs	r0, #0
 800ce28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce2e:	2e00      	cmp	r6, #0
 800ce30:	d0f9      	beq.n	800ce26 <__sflush_r+0x1a>
 800ce32:	2300      	movs	r3, #0
 800ce34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce38:	682f      	ldr	r7, [r5, #0]
 800ce3a:	6a21      	ldr	r1, [r4, #32]
 800ce3c:	602b      	str	r3, [r5, #0]
 800ce3e:	d032      	beq.n	800cea6 <__sflush_r+0x9a>
 800ce40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce42:	89a3      	ldrh	r3, [r4, #12]
 800ce44:	075a      	lsls	r2, r3, #29
 800ce46:	d505      	bpl.n	800ce54 <__sflush_r+0x48>
 800ce48:	6863      	ldr	r3, [r4, #4]
 800ce4a:	1ac0      	subs	r0, r0, r3
 800ce4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce4e:	b10b      	cbz	r3, 800ce54 <__sflush_r+0x48>
 800ce50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce52:	1ac0      	subs	r0, r0, r3
 800ce54:	2300      	movs	r3, #0
 800ce56:	4602      	mov	r2, r0
 800ce58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce5a:	6a21      	ldr	r1, [r4, #32]
 800ce5c:	4628      	mov	r0, r5
 800ce5e:	47b0      	blx	r6
 800ce60:	1c43      	adds	r3, r0, #1
 800ce62:	89a3      	ldrh	r3, [r4, #12]
 800ce64:	d106      	bne.n	800ce74 <__sflush_r+0x68>
 800ce66:	6829      	ldr	r1, [r5, #0]
 800ce68:	291d      	cmp	r1, #29
 800ce6a:	d82b      	bhi.n	800cec4 <__sflush_r+0xb8>
 800ce6c:	4a29      	ldr	r2, [pc, #164]	; (800cf14 <__sflush_r+0x108>)
 800ce6e:	410a      	asrs	r2, r1
 800ce70:	07d6      	lsls	r6, r2, #31
 800ce72:	d427      	bmi.n	800cec4 <__sflush_r+0xb8>
 800ce74:	2200      	movs	r2, #0
 800ce76:	6062      	str	r2, [r4, #4]
 800ce78:	04d9      	lsls	r1, r3, #19
 800ce7a:	6922      	ldr	r2, [r4, #16]
 800ce7c:	6022      	str	r2, [r4, #0]
 800ce7e:	d504      	bpl.n	800ce8a <__sflush_r+0x7e>
 800ce80:	1c42      	adds	r2, r0, #1
 800ce82:	d101      	bne.n	800ce88 <__sflush_r+0x7c>
 800ce84:	682b      	ldr	r3, [r5, #0]
 800ce86:	b903      	cbnz	r3, 800ce8a <__sflush_r+0x7e>
 800ce88:	6560      	str	r0, [r4, #84]	; 0x54
 800ce8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce8c:	602f      	str	r7, [r5, #0]
 800ce8e:	2900      	cmp	r1, #0
 800ce90:	d0c9      	beq.n	800ce26 <__sflush_r+0x1a>
 800ce92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce96:	4299      	cmp	r1, r3
 800ce98:	d002      	beq.n	800cea0 <__sflush_r+0x94>
 800ce9a:	4628      	mov	r0, r5
 800ce9c:	f7ff fa96 	bl	800c3cc <_free_r>
 800cea0:	2000      	movs	r0, #0
 800cea2:	6360      	str	r0, [r4, #52]	; 0x34
 800cea4:	e7c0      	b.n	800ce28 <__sflush_r+0x1c>
 800cea6:	2301      	movs	r3, #1
 800cea8:	4628      	mov	r0, r5
 800ceaa:	47b0      	blx	r6
 800ceac:	1c41      	adds	r1, r0, #1
 800ceae:	d1c8      	bne.n	800ce42 <__sflush_r+0x36>
 800ceb0:	682b      	ldr	r3, [r5, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d0c5      	beq.n	800ce42 <__sflush_r+0x36>
 800ceb6:	2b1d      	cmp	r3, #29
 800ceb8:	d001      	beq.n	800cebe <__sflush_r+0xb2>
 800ceba:	2b16      	cmp	r3, #22
 800cebc:	d101      	bne.n	800cec2 <__sflush_r+0xb6>
 800cebe:	602f      	str	r7, [r5, #0]
 800cec0:	e7b1      	b.n	800ce26 <__sflush_r+0x1a>
 800cec2:	89a3      	ldrh	r3, [r4, #12]
 800cec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cec8:	81a3      	strh	r3, [r4, #12]
 800ceca:	e7ad      	b.n	800ce28 <__sflush_r+0x1c>
 800cecc:	690f      	ldr	r7, [r1, #16]
 800cece:	2f00      	cmp	r7, #0
 800ced0:	d0a9      	beq.n	800ce26 <__sflush_r+0x1a>
 800ced2:	0793      	lsls	r3, r2, #30
 800ced4:	680e      	ldr	r6, [r1, #0]
 800ced6:	bf08      	it	eq
 800ced8:	694b      	ldreq	r3, [r1, #20]
 800ceda:	600f      	str	r7, [r1, #0]
 800cedc:	bf18      	it	ne
 800cede:	2300      	movne	r3, #0
 800cee0:	eba6 0807 	sub.w	r8, r6, r7
 800cee4:	608b      	str	r3, [r1, #8]
 800cee6:	f1b8 0f00 	cmp.w	r8, #0
 800ceea:	dd9c      	ble.n	800ce26 <__sflush_r+0x1a>
 800ceec:	6a21      	ldr	r1, [r4, #32]
 800ceee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cef0:	4643      	mov	r3, r8
 800cef2:	463a      	mov	r2, r7
 800cef4:	4628      	mov	r0, r5
 800cef6:	47b0      	blx	r6
 800cef8:	2800      	cmp	r0, #0
 800cefa:	dc06      	bgt.n	800cf0a <__sflush_r+0xfe>
 800cefc:	89a3      	ldrh	r3, [r4, #12]
 800cefe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf02:	81a3      	strh	r3, [r4, #12]
 800cf04:	f04f 30ff 	mov.w	r0, #4294967295
 800cf08:	e78e      	b.n	800ce28 <__sflush_r+0x1c>
 800cf0a:	4407      	add	r7, r0
 800cf0c:	eba8 0800 	sub.w	r8, r8, r0
 800cf10:	e7e9      	b.n	800cee6 <__sflush_r+0xda>
 800cf12:	bf00      	nop
 800cf14:	dfbffffe 	.word	0xdfbffffe

0800cf18 <_fflush_r>:
 800cf18:	b538      	push	{r3, r4, r5, lr}
 800cf1a:	690b      	ldr	r3, [r1, #16]
 800cf1c:	4605      	mov	r5, r0
 800cf1e:	460c      	mov	r4, r1
 800cf20:	b913      	cbnz	r3, 800cf28 <_fflush_r+0x10>
 800cf22:	2500      	movs	r5, #0
 800cf24:	4628      	mov	r0, r5
 800cf26:	bd38      	pop	{r3, r4, r5, pc}
 800cf28:	b118      	cbz	r0, 800cf32 <_fflush_r+0x1a>
 800cf2a:	6a03      	ldr	r3, [r0, #32]
 800cf2c:	b90b      	cbnz	r3, 800cf32 <_fflush_r+0x1a>
 800cf2e:	f7fe fa07 	bl	800b340 <__sinit>
 800cf32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d0f3      	beq.n	800cf22 <_fflush_r+0xa>
 800cf3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf3c:	07d0      	lsls	r0, r2, #31
 800cf3e:	d404      	bmi.n	800cf4a <_fflush_r+0x32>
 800cf40:	0599      	lsls	r1, r3, #22
 800cf42:	d402      	bmi.n	800cf4a <_fflush_r+0x32>
 800cf44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf46:	f7fe fb8f 	bl	800b668 <__retarget_lock_acquire_recursive>
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	4621      	mov	r1, r4
 800cf4e:	f7ff ff5d 	bl	800ce0c <__sflush_r>
 800cf52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf54:	07da      	lsls	r2, r3, #31
 800cf56:	4605      	mov	r5, r0
 800cf58:	d4e4      	bmi.n	800cf24 <_fflush_r+0xc>
 800cf5a:	89a3      	ldrh	r3, [r4, #12]
 800cf5c:	059b      	lsls	r3, r3, #22
 800cf5e:	d4e1      	bmi.n	800cf24 <_fflush_r+0xc>
 800cf60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf62:	f7fe fb82 	bl	800b66a <__retarget_lock_release_recursive>
 800cf66:	e7dd      	b.n	800cf24 <_fflush_r+0xc>

0800cf68 <fiprintf>:
 800cf68:	b40e      	push	{r1, r2, r3}
 800cf6a:	b503      	push	{r0, r1, lr}
 800cf6c:	4601      	mov	r1, r0
 800cf6e:	ab03      	add	r3, sp, #12
 800cf70:	4805      	ldr	r0, [pc, #20]	; (800cf88 <fiprintf+0x20>)
 800cf72:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf76:	6800      	ldr	r0, [r0, #0]
 800cf78:	9301      	str	r3, [sp, #4]
 800cf7a:	f000 f8b5 	bl	800d0e8 <_vfiprintf_r>
 800cf7e:	b002      	add	sp, #8
 800cf80:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf84:	b003      	add	sp, #12
 800cf86:	4770      	bx	lr
 800cf88:	200012cc 	.word	0x200012cc

0800cf8c <memmove>:
 800cf8c:	4288      	cmp	r0, r1
 800cf8e:	b510      	push	{r4, lr}
 800cf90:	eb01 0402 	add.w	r4, r1, r2
 800cf94:	d902      	bls.n	800cf9c <memmove+0x10>
 800cf96:	4284      	cmp	r4, r0
 800cf98:	4623      	mov	r3, r4
 800cf9a:	d807      	bhi.n	800cfac <memmove+0x20>
 800cf9c:	1e43      	subs	r3, r0, #1
 800cf9e:	42a1      	cmp	r1, r4
 800cfa0:	d008      	beq.n	800cfb4 <memmove+0x28>
 800cfa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfaa:	e7f8      	b.n	800cf9e <memmove+0x12>
 800cfac:	4402      	add	r2, r0
 800cfae:	4601      	mov	r1, r0
 800cfb0:	428a      	cmp	r2, r1
 800cfb2:	d100      	bne.n	800cfb6 <memmove+0x2a>
 800cfb4:	bd10      	pop	{r4, pc}
 800cfb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cfbe:	e7f7      	b.n	800cfb0 <memmove+0x24>

0800cfc0 <abort>:
 800cfc0:	b508      	push	{r3, lr}
 800cfc2:	2006      	movs	r0, #6
 800cfc4:	f000 fa68 	bl	800d498 <raise>
 800cfc8:	2001      	movs	r0, #1
 800cfca:	f7f9 fcaf 	bl	800692c <_exit>

0800cfce <_calloc_r>:
 800cfce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfd0:	fba1 2402 	umull	r2, r4, r1, r2
 800cfd4:	b94c      	cbnz	r4, 800cfea <_calloc_r+0x1c>
 800cfd6:	4611      	mov	r1, r2
 800cfd8:	9201      	str	r2, [sp, #4]
 800cfda:	f7fd fbb9 	bl	800a750 <_malloc_r>
 800cfde:	9a01      	ldr	r2, [sp, #4]
 800cfe0:	4605      	mov	r5, r0
 800cfe2:	b930      	cbnz	r0, 800cff2 <_calloc_r+0x24>
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	b003      	add	sp, #12
 800cfe8:	bd30      	pop	{r4, r5, pc}
 800cfea:	220c      	movs	r2, #12
 800cfec:	6002      	str	r2, [r0, #0]
 800cfee:	2500      	movs	r5, #0
 800cff0:	e7f8      	b.n	800cfe4 <_calloc_r+0x16>
 800cff2:	4621      	mov	r1, r4
 800cff4:	f7fe fa3d 	bl	800b472 <memset>
 800cff8:	e7f4      	b.n	800cfe4 <_calloc_r+0x16>

0800cffa <__ascii_mbtowc>:
 800cffa:	b082      	sub	sp, #8
 800cffc:	b901      	cbnz	r1, 800d000 <__ascii_mbtowc+0x6>
 800cffe:	a901      	add	r1, sp, #4
 800d000:	b142      	cbz	r2, 800d014 <__ascii_mbtowc+0x1a>
 800d002:	b14b      	cbz	r3, 800d018 <__ascii_mbtowc+0x1e>
 800d004:	7813      	ldrb	r3, [r2, #0]
 800d006:	600b      	str	r3, [r1, #0]
 800d008:	7812      	ldrb	r2, [r2, #0]
 800d00a:	1e10      	subs	r0, r2, #0
 800d00c:	bf18      	it	ne
 800d00e:	2001      	movne	r0, #1
 800d010:	b002      	add	sp, #8
 800d012:	4770      	bx	lr
 800d014:	4610      	mov	r0, r2
 800d016:	e7fb      	b.n	800d010 <__ascii_mbtowc+0x16>
 800d018:	f06f 0001 	mvn.w	r0, #1
 800d01c:	e7f8      	b.n	800d010 <__ascii_mbtowc+0x16>

0800d01e <_realloc_r>:
 800d01e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d022:	4680      	mov	r8, r0
 800d024:	4614      	mov	r4, r2
 800d026:	460e      	mov	r6, r1
 800d028:	b921      	cbnz	r1, 800d034 <_realloc_r+0x16>
 800d02a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d02e:	4611      	mov	r1, r2
 800d030:	f7fd bb8e 	b.w	800a750 <_malloc_r>
 800d034:	b92a      	cbnz	r2, 800d042 <_realloc_r+0x24>
 800d036:	f7ff f9c9 	bl	800c3cc <_free_r>
 800d03a:	4625      	mov	r5, r4
 800d03c:	4628      	mov	r0, r5
 800d03e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d042:	f000 fa45 	bl	800d4d0 <_malloc_usable_size_r>
 800d046:	4284      	cmp	r4, r0
 800d048:	4607      	mov	r7, r0
 800d04a:	d802      	bhi.n	800d052 <_realloc_r+0x34>
 800d04c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d050:	d812      	bhi.n	800d078 <_realloc_r+0x5a>
 800d052:	4621      	mov	r1, r4
 800d054:	4640      	mov	r0, r8
 800d056:	f7fd fb7b 	bl	800a750 <_malloc_r>
 800d05a:	4605      	mov	r5, r0
 800d05c:	2800      	cmp	r0, #0
 800d05e:	d0ed      	beq.n	800d03c <_realloc_r+0x1e>
 800d060:	42bc      	cmp	r4, r7
 800d062:	4622      	mov	r2, r4
 800d064:	4631      	mov	r1, r6
 800d066:	bf28      	it	cs
 800d068:	463a      	movcs	r2, r7
 800d06a:	f7fe fb07 	bl	800b67c <memcpy>
 800d06e:	4631      	mov	r1, r6
 800d070:	4640      	mov	r0, r8
 800d072:	f7ff f9ab 	bl	800c3cc <_free_r>
 800d076:	e7e1      	b.n	800d03c <_realloc_r+0x1e>
 800d078:	4635      	mov	r5, r6
 800d07a:	e7df      	b.n	800d03c <_realloc_r+0x1e>

0800d07c <__ascii_wctomb>:
 800d07c:	b149      	cbz	r1, 800d092 <__ascii_wctomb+0x16>
 800d07e:	2aff      	cmp	r2, #255	; 0xff
 800d080:	bf85      	ittet	hi
 800d082:	238a      	movhi	r3, #138	; 0x8a
 800d084:	6003      	strhi	r3, [r0, #0]
 800d086:	700a      	strbls	r2, [r1, #0]
 800d088:	f04f 30ff 	movhi.w	r0, #4294967295
 800d08c:	bf98      	it	ls
 800d08e:	2001      	movls	r0, #1
 800d090:	4770      	bx	lr
 800d092:	4608      	mov	r0, r1
 800d094:	4770      	bx	lr

0800d096 <__sfputc_r>:
 800d096:	6893      	ldr	r3, [r2, #8]
 800d098:	3b01      	subs	r3, #1
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	b410      	push	{r4}
 800d09e:	6093      	str	r3, [r2, #8]
 800d0a0:	da08      	bge.n	800d0b4 <__sfputc_r+0x1e>
 800d0a2:	6994      	ldr	r4, [r2, #24]
 800d0a4:	42a3      	cmp	r3, r4
 800d0a6:	db01      	blt.n	800d0ac <__sfputc_r+0x16>
 800d0a8:	290a      	cmp	r1, #10
 800d0aa:	d103      	bne.n	800d0b4 <__sfputc_r+0x1e>
 800d0ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0b0:	f000 b934 	b.w	800d31c <__swbuf_r>
 800d0b4:	6813      	ldr	r3, [r2, #0]
 800d0b6:	1c58      	adds	r0, r3, #1
 800d0b8:	6010      	str	r0, [r2, #0]
 800d0ba:	7019      	strb	r1, [r3, #0]
 800d0bc:	4608      	mov	r0, r1
 800d0be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <__sfputs_r>:
 800d0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0c6:	4606      	mov	r6, r0
 800d0c8:	460f      	mov	r7, r1
 800d0ca:	4614      	mov	r4, r2
 800d0cc:	18d5      	adds	r5, r2, r3
 800d0ce:	42ac      	cmp	r4, r5
 800d0d0:	d101      	bne.n	800d0d6 <__sfputs_r+0x12>
 800d0d2:	2000      	movs	r0, #0
 800d0d4:	e007      	b.n	800d0e6 <__sfputs_r+0x22>
 800d0d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0da:	463a      	mov	r2, r7
 800d0dc:	4630      	mov	r0, r6
 800d0de:	f7ff ffda 	bl	800d096 <__sfputc_r>
 800d0e2:	1c43      	adds	r3, r0, #1
 800d0e4:	d1f3      	bne.n	800d0ce <__sfputs_r+0xa>
 800d0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d0e8 <_vfiprintf_r>:
 800d0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ec:	460d      	mov	r5, r1
 800d0ee:	b09d      	sub	sp, #116	; 0x74
 800d0f0:	4614      	mov	r4, r2
 800d0f2:	4698      	mov	r8, r3
 800d0f4:	4606      	mov	r6, r0
 800d0f6:	b118      	cbz	r0, 800d100 <_vfiprintf_r+0x18>
 800d0f8:	6a03      	ldr	r3, [r0, #32]
 800d0fa:	b90b      	cbnz	r3, 800d100 <_vfiprintf_r+0x18>
 800d0fc:	f7fe f920 	bl	800b340 <__sinit>
 800d100:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d102:	07d9      	lsls	r1, r3, #31
 800d104:	d405      	bmi.n	800d112 <_vfiprintf_r+0x2a>
 800d106:	89ab      	ldrh	r3, [r5, #12]
 800d108:	059a      	lsls	r2, r3, #22
 800d10a:	d402      	bmi.n	800d112 <_vfiprintf_r+0x2a>
 800d10c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d10e:	f7fe faab 	bl	800b668 <__retarget_lock_acquire_recursive>
 800d112:	89ab      	ldrh	r3, [r5, #12]
 800d114:	071b      	lsls	r3, r3, #28
 800d116:	d501      	bpl.n	800d11c <_vfiprintf_r+0x34>
 800d118:	692b      	ldr	r3, [r5, #16]
 800d11a:	b99b      	cbnz	r3, 800d144 <_vfiprintf_r+0x5c>
 800d11c:	4629      	mov	r1, r5
 800d11e:	4630      	mov	r0, r6
 800d120:	f000 f93a 	bl	800d398 <__swsetup_r>
 800d124:	b170      	cbz	r0, 800d144 <_vfiprintf_r+0x5c>
 800d126:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d128:	07dc      	lsls	r4, r3, #31
 800d12a:	d504      	bpl.n	800d136 <_vfiprintf_r+0x4e>
 800d12c:	f04f 30ff 	mov.w	r0, #4294967295
 800d130:	b01d      	add	sp, #116	; 0x74
 800d132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d136:	89ab      	ldrh	r3, [r5, #12]
 800d138:	0598      	lsls	r0, r3, #22
 800d13a:	d4f7      	bmi.n	800d12c <_vfiprintf_r+0x44>
 800d13c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d13e:	f7fe fa94 	bl	800b66a <__retarget_lock_release_recursive>
 800d142:	e7f3      	b.n	800d12c <_vfiprintf_r+0x44>
 800d144:	2300      	movs	r3, #0
 800d146:	9309      	str	r3, [sp, #36]	; 0x24
 800d148:	2320      	movs	r3, #32
 800d14a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d14e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d152:	2330      	movs	r3, #48	; 0x30
 800d154:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d308 <_vfiprintf_r+0x220>
 800d158:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d15c:	f04f 0901 	mov.w	r9, #1
 800d160:	4623      	mov	r3, r4
 800d162:	469a      	mov	sl, r3
 800d164:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d168:	b10a      	cbz	r2, 800d16e <_vfiprintf_r+0x86>
 800d16a:	2a25      	cmp	r2, #37	; 0x25
 800d16c:	d1f9      	bne.n	800d162 <_vfiprintf_r+0x7a>
 800d16e:	ebba 0b04 	subs.w	fp, sl, r4
 800d172:	d00b      	beq.n	800d18c <_vfiprintf_r+0xa4>
 800d174:	465b      	mov	r3, fp
 800d176:	4622      	mov	r2, r4
 800d178:	4629      	mov	r1, r5
 800d17a:	4630      	mov	r0, r6
 800d17c:	f7ff ffa2 	bl	800d0c4 <__sfputs_r>
 800d180:	3001      	adds	r0, #1
 800d182:	f000 80a9 	beq.w	800d2d8 <_vfiprintf_r+0x1f0>
 800d186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d188:	445a      	add	r2, fp
 800d18a:	9209      	str	r2, [sp, #36]	; 0x24
 800d18c:	f89a 3000 	ldrb.w	r3, [sl]
 800d190:	2b00      	cmp	r3, #0
 800d192:	f000 80a1 	beq.w	800d2d8 <_vfiprintf_r+0x1f0>
 800d196:	2300      	movs	r3, #0
 800d198:	f04f 32ff 	mov.w	r2, #4294967295
 800d19c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1a0:	f10a 0a01 	add.w	sl, sl, #1
 800d1a4:	9304      	str	r3, [sp, #16]
 800d1a6:	9307      	str	r3, [sp, #28]
 800d1a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1ac:	931a      	str	r3, [sp, #104]	; 0x68
 800d1ae:	4654      	mov	r4, sl
 800d1b0:	2205      	movs	r2, #5
 800d1b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1b6:	4854      	ldr	r0, [pc, #336]	; (800d308 <_vfiprintf_r+0x220>)
 800d1b8:	f7f3 f812 	bl	80001e0 <memchr>
 800d1bc:	9a04      	ldr	r2, [sp, #16]
 800d1be:	b9d8      	cbnz	r0, 800d1f8 <_vfiprintf_r+0x110>
 800d1c0:	06d1      	lsls	r1, r2, #27
 800d1c2:	bf44      	itt	mi
 800d1c4:	2320      	movmi	r3, #32
 800d1c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1ca:	0713      	lsls	r3, r2, #28
 800d1cc:	bf44      	itt	mi
 800d1ce:	232b      	movmi	r3, #43	; 0x2b
 800d1d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1d4:	f89a 3000 	ldrb.w	r3, [sl]
 800d1d8:	2b2a      	cmp	r3, #42	; 0x2a
 800d1da:	d015      	beq.n	800d208 <_vfiprintf_r+0x120>
 800d1dc:	9a07      	ldr	r2, [sp, #28]
 800d1de:	4654      	mov	r4, sl
 800d1e0:	2000      	movs	r0, #0
 800d1e2:	f04f 0c0a 	mov.w	ip, #10
 800d1e6:	4621      	mov	r1, r4
 800d1e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1ec:	3b30      	subs	r3, #48	; 0x30
 800d1ee:	2b09      	cmp	r3, #9
 800d1f0:	d94d      	bls.n	800d28e <_vfiprintf_r+0x1a6>
 800d1f2:	b1b0      	cbz	r0, 800d222 <_vfiprintf_r+0x13a>
 800d1f4:	9207      	str	r2, [sp, #28]
 800d1f6:	e014      	b.n	800d222 <_vfiprintf_r+0x13a>
 800d1f8:	eba0 0308 	sub.w	r3, r0, r8
 800d1fc:	fa09 f303 	lsl.w	r3, r9, r3
 800d200:	4313      	orrs	r3, r2
 800d202:	9304      	str	r3, [sp, #16]
 800d204:	46a2      	mov	sl, r4
 800d206:	e7d2      	b.n	800d1ae <_vfiprintf_r+0xc6>
 800d208:	9b03      	ldr	r3, [sp, #12]
 800d20a:	1d19      	adds	r1, r3, #4
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	9103      	str	r1, [sp, #12]
 800d210:	2b00      	cmp	r3, #0
 800d212:	bfbb      	ittet	lt
 800d214:	425b      	neglt	r3, r3
 800d216:	f042 0202 	orrlt.w	r2, r2, #2
 800d21a:	9307      	strge	r3, [sp, #28]
 800d21c:	9307      	strlt	r3, [sp, #28]
 800d21e:	bfb8      	it	lt
 800d220:	9204      	strlt	r2, [sp, #16]
 800d222:	7823      	ldrb	r3, [r4, #0]
 800d224:	2b2e      	cmp	r3, #46	; 0x2e
 800d226:	d10c      	bne.n	800d242 <_vfiprintf_r+0x15a>
 800d228:	7863      	ldrb	r3, [r4, #1]
 800d22a:	2b2a      	cmp	r3, #42	; 0x2a
 800d22c:	d134      	bne.n	800d298 <_vfiprintf_r+0x1b0>
 800d22e:	9b03      	ldr	r3, [sp, #12]
 800d230:	1d1a      	adds	r2, r3, #4
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	9203      	str	r2, [sp, #12]
 800d236:	2b00      	cmp	r3, #0
 800d238:	bfb8      	it	lt
 800d23a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d23e:	3402      	adds	r4, #2
 800d240:	9305      	str	r3, [sp, #20]
 800d242:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d318 <_vfiprintf_r+0x230>
 800d246:	7821      	ldrb	r1, [r4, #0]
 800d248:	2203      	movs	r2, #3
 800d24a:	4650      	mov	r0, sl
 800d24c:	f7f2 ffc8 	bl	80001e0 <memchr>
 800d250:	b138      	cbz	r0, 800d262 <_vfiprintf_r+0x17a>
 800d252:	9b04      	ldr	r3, [sp, #16]
 800d254:	eba0 000a 	sub.w	r0, r0, sl
 800d258:	2240      	movs	r2, #64	; 0x40
 800d25a:	4082      	lsls	r2, r0
 800d25c:	4313      	orrs	r3, r2
 800d25e:	3401      	adds	r4, #1
 800d260:	9304      	str	r3, [sp, #16]
 800d262:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d266:	4829      	ldr	r0, [pc, #164]	; (800d30c <_vfiprintf_r+0x224>)
 800d268:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d26c:	2206      	movs	r2, #6
 800d26e:	f7f2 ffb7 	bl	80001e0 <memchr>
 800d272:	2800      	cmp	r0, #0
 800d274:	d03f      	beq.n	800d2f6 <_vfiprintf_r+0x20e>
 800d276:	4b26      	ldr	r3, [pc, #152]	; (800d310 <_vfiprintf_r+0x228>)
 800d278:	bb1b      	cbnz	r3, 800d2c2 <_vfiprintf_r+0x1da>
 800d27a:	9b03      	ldr	r3, [sp, #12]
 800d27c:	3307      	adds	r3, #7
 800d27e:	f023 0307 	bic.w	r3, r3, #7
 800d282:	3308      	adds	r3, #8
 800d284:	9303      	str	r3, [sp, #12]
 800d286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d288:	443b      	add	r3, r7
 800d28a:	9309      	str	r3, [sp, #36]	; 0x24
 800d28c:	e768      	b.n	800d160 <_vfiprintf_r+0x78>
 800d28e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d292:	460c      	mov	r4, r1
 800d294:	2001      	movs	r0, #1
 800d296:	e7a6      	b.n	800d1e6 <_vfiprintf_r+0xfe>
 800d298:	2300      	movs	r3, #0
 800d29a:	3401      	adds	r4, #1
 800d29c:	9305      	str	r3, [sp, #20]
 800d29e:	4619      	mov	r1, r3
 800d2a0:	f04f 0c0a 	mov.w	ip, #10
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2aa:	3a30      	subs	r2, #48	; 0x30
 800d2ac:	2a09      	cmp	r2, #9
 800d2ae:	d903      	bls.n	800d2b8 <_vfiprintf_r+0x1d0>
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d0c6      	beq.n	800d242 <_vfiprintf_r+0x15a>
 800d2b4:	9105      	str	r1, [sp, #20]
 800d2b6:	e7c4      	b.n	800d242 <_vfiprintf_r+0x15a>
 800d2b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2bc:	4604      	mov	r4, r0
 800d2be:	2301      	movs	r3, #1
 800d2c0:	e7f0      	b.n	800d2a4 <_vfiprintf_r+0x1bc>
 800d2c2:	ab03      	add	r3, sp, #12
 800d2c4:	9300      	str	r3, [sp, #0]
 800d2c6:	462a      	mov	r2, r5
 800d2c8:	4b12      	ldr	r3, [pc, #72]	; (800d314 <_vfiprintf_r+0x22c>)
 800d2ca:	a904      	add	r1, sp, #16
 800d2cc:	4630      	mov	r0, r6
 800d2ce:	f7fd fbf7 	bl	800aac0 <_printf_float>
 800d2d2:	4607      	mov	r7, r0
 800d2d4:	1c78      	adds	r0, r7, #1
 800d2d6:	d1d6      	bne.n	800d286 <_vfiprintf_r+0x19e>
 800d2d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2da:	07d9      	lsls	r1, r3, #31
 800d2dc:	d405      	bmi.n	800d2ea <_vfiprintf_r+0x202>
 800d2de:	89ab      	ldrh	r3, [r5, #12]
 800d2e0:	059a      	lsls	r2, r3, #22
 800d2e2:	d402      	bmi.n	800d2ea <_vfiprintf_r+0x202>
 800d2e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2e6:	f7fe f9c0 	bl	800b66a <__retarget_lock_release_recursive>
 800d2ea:	89ab      	ldrh	r3, [r5, #12]
 800d2ec:	065b      	lsls	r3, r3, #25
 800d2ee:	f53f af1d 	bmi.w	800d12c <_vfiprintf_r+0x44>
 800d2f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2f4:	e71c      	b.n	800d130 <_vfiprintf_r+0x48>
 800d2f6:	ab03      	add	r3, sp, #12
 800d2f8:	9300      	str	r3, [sp, #0]
 800d2fa:	462a      	mov	r2, r5
 800d2fc:	4b05      	ldr	r3, [pc, #20]	; (800d314 <_vfiprintf_r+0x22c>)
 800d2fe:	a904      	add	r1, sp, #16
 800d300:	4630      	mov	r0, r6
 800d302:	f7fd fe81 	bl	800b008 <_printf_i>
 800d306:	e7e4      	b.n	800d2d2 <_vfiprintf_r+0x1ea>
 800d308:	080113ac 	.word	0x080113ac
 800d30c:	080113b6 	.word	0x080113b6
 800d310:	0800aac1 	.word	0x0800aac1
 800d314:	0800d0c5 	.word	0x0800d0c5
 800d318:	080113b2 	.word	0x080113b2

0800d31c <__swbuf_r>:
 800d31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d31e:	460e      	mov	r6, r1
 800d320:	4614      	mov	r4, r2
 800d322:	4605      	mov	r5, r0
 800d324:	b118      	cbz	r0, 800d32e <__swbuf_r+0x12>
 800d326:	6a03      	ldr	r3, [r0, #32]
 800d328:	b90b      	cbnz	r3, 800d32e <__swbuf_r+0x12>
 800d32a:	f7fe f809 	bl	800b340 <__sinit>
 800d32e:	69a3      	ldr	r3, [r4, #24]
 800d330:	60a3      	str	r3, [r4, #8]
 800d332:	89a3      	ldrh	r3, [r4, #12]
 800d334:	071a      	lsls	r2, r3, #28
 800d336:	d525      	bpl.n	800d384 <__swbuf_r+0x68>
 800d338:	6923      	ldr	r3, [r4, #16]
 800d33a:	b31b      	cbz	r3, 800d384 <__swbuf_r+0x68>
 800d33c:	6823      	ldr	r3, [r4, #0]
 800d33e:	6922      	ldr	r2, [r4, #16]
 800d340:	1a98      	subs	r0, r3, r2
 800d342:	6963      	ldr	r3, [r4, #20]
 800d344:	b2f6      	uxtb	r6, r6
 800d346:	4283      	cmp	r3, r0
 800d348:	4637      	mov	r7, r6
 800d34a:	dc04      	bgt.n	800d356 <__swbuf_r+0x3a>
 800d34c:	4621      	mov	r1, r4
 800d34e:	4628      	mov	r0, r5
 800d350:	f7ff fde2 	bl	800cf18 <_fflush_r>
 800d354:	b9e0      	cbnz	r0, 800d390 <__swbuf_r+0x74>
 800d356:	68a3      	ldr	r3, [r4, #8]
 800d358:	3b01      	subs	r3, #1
 800d35a:	60a3      	str	r3, [r4, #8]
 800d35c:	6823      	ldr	r3, [r4, #0]
 800d35e:	1c5a      	adds	r2, r3, #1
 800d360:	6022      	str	r2, [r4, #0]
 800d362:	701e      	strb	r6, [r3, #0]
 800d364:	6962      	ldr	r2, [r4, #20]
 800d366:	1c43      	adds	r3, r0, #1
 800d368:	429a      	cmp	r2, r3
 800d36a:	d004      	beq.n	800d376 <__swbuf_r+0x5a>
 800d36c:	89a3      	ldrh	r3, [r4, #12]
 800d36e:	07db      	lsls	r3, r3, #31
 800d370:	d506      	bpl.n	800d380 <__swbuf_r+0x64>
 800d372:	2e0a      	cmp	r6, #10
 800d374:	d104      	bne.n	800d380 <__swbuf_r+0x64>
 800d376:	4621      	mov	r1, r4
 800d378:	4628      	mov	r0, r5
 800d37a:	f7ff fdcd 	bl	800cf18 <_fflush_r>
 800d37e:	b938      	cbnz	r0, 800d390 <__swbuf_r+0x74>
 800d380:	4638      	mov	r0, r7
 800d382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d384:	4621      	mov	r1, r4
 800d386:	4628      	mov	r0, r5
 800d388:	f000 f806 	bl	800d398 <__swsetup_r>
 800d38c:	2800      	cmp	r0, #0
 800d38e:	d0d5      	beq.n	800d33c <__swbuf_r+0x20>
 800d390:	f04f 37ff 	mov.w	r7, #4294967295
 800d394:	e7f4      	b.n	800d380 <__swbuf_r+0x64>
	...

0800d398 <__swsetup_r>:
 800d398:	b538      	push	{r3, r4, r5, lr}
 800d39a:	4b2a      	ldr	r3, [pc, #168]	; (800d444 <__swsetup_r+0xac>)
 800d39c:	4605      	mov	r5, r0
 800d39e:	6818      	ldr	r0, [r3, #0]
 800d3a0:	460c      	mov	r4, r1
 800d3a2:	b118      	cbz	r0, 800d3ac <__swsetup_r+0x14>
 800d3a4:	6a03      	ldr	r3, [r0, #32]
 800d3a6:	b90b      	cbnz	r3, 800d3ac <__swsetup_r+0x14>
 800d3a8:	f7fd ffca 	bl	800b340 <__sinit>
 800d3ac:	89a3      	ldrh	r3, [r4, #12]
 800d3ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3b2:	0718      	lsls	r0, r3, #28
 800d3b4:	d422      	bmi.n	800d3fc <__swsetup_r+0x64>
 800d3b6:	06d9      	lsls	r1, r3, #27
 800d3b8:	d407      	bmi.n	800d3ca <__swsetup_r+0x32>
 800d3ba:	2309      	movs	r3, #9
 800d3bc:	602b      	str	r3, [r5, #0]
 800d3be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d3c2:	81a3      	strh	r3, [r4, #12]
 800d3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3c8:	e034      	b.n	800d434 <__swsetup_r+0x9c>
 800d3ca:	0758      	lsls	r0, r3, #29
 800d3cc:	d512      	bpl.n	800d3f4 <__swsetup_r+0x5c>
 800d3ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3d0:	b141      	cbz	r1, 800d3e4 <__swsetup_r+0x4c>
 800d3d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d3d6:	4299      	cmp	r1, r3
 800d3d8:	d002      	beq.n	800d3e0 <__swsetup_r+0x48>
 800d3da:	4628      	mov	r0, r5
 800d3dc:	f7fe fff6 	bl	800c3cc <_free_r>
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	6363      	str	r3, [r4, #52]	; 0x34
 800d3e4:	89a3      	ldrh	r3, [r4, #12]
 800d3e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d3ea:	81a3      	strh	r3, [r4, #12]
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	6063      	str	r3, [r4, #4]
 800d3f0:	6923      	ldr	r3, [r4, #16]
 800d3f2:	6023      	str	r3, [r4, #0]
 800d3f4:	89a3      	ldrh	r3, [r4, #12]
 800d3f6:	f043 0308 	orr.w	r3, r3, #8
 800d3fa:	81a3      	strh	r3, [r4, #12]
 800d3fc:	6923      	ldr	r3, [r4, #16]
 800d3fe:	b94b      	cbnz	r3, 800d414 <__swsetup_r+0x7c>
 800d400:	89a3      	ldrh	r3, [r4, #12]
 800d402:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d40a:	d003      	beq.n	800d414 <__swsetup_r+0x7c>
 800d40c:	4621      	mov	r1, r4
 800d40e:	4628      	mov	r0, r5
 800d410:	f000 f88c 	bl	800d52c <__smakebuf_r>
 800d414:	89a0      	ldrh	r0, [r4, #12]
 800d416:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d41a:	f010 0301 	ands.w	r3, r0, #1
 800d41e:	d00a      	beq.n	800d436 <__swsetup_r+0x9e>
 800d420:	2300      	movs	r3, #0
 800d422:	60a3      	str	r3, [r4, #8]
 800d424:	6963      	ldr	r3, [r4, #20]
 800d426:	425b      	negs	r3, r3
 800d428:	61a3      	str	r3, [r4, #24]
 800d42a:	6923      	ldr	r3, [r4, #16]
 800d42c:	b943      	cbnz	r3, 800d440 <__swsetup_r+0xa8>
 800d42e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d432:	d1c4      	bne.n	800d3be <__swsetup_r+0x26>
 800d434:	bd38      	pop	{r3, r4, r5, pc}
 800d436:	0781      	lsls	r1, r0, #30
 800d438:	bf58      	it	pl
 800d43a:	6963      	ldrpl	r3, [r4, #20]
 800d43c:	60a3      	str	r3, [r4, #8]
 800d43e:	e7f4      	b.n	800d42a <__swsetup_r+0x92>
 800d440:	2000      	movs	r0, #0
 800d442:	e7f7      	b.n	800d434 <__swsetup_r+0x9c>
 800d444:	200012cc 	.word	0x200012cc

0800d448 <_raise_r>:
 800d448:	291f      	cmp	r1, #31
 800d44a:	b538      	push	{r3, r4, r5, lr}
 800d44c:	4604      	mov	r4, r0
 800d44e:	460d      	mov	r5, r1
 800d450:	d904      	bls.n	800d45c <_raise_r+0x14>
 800d452:	2316      	movs	r3, #22
 800d454:	6003      	str	r3, [r0, #0]
 800d456:	f04f 30ff 	mov.w	r0, #4294967295
 800d45a:	bd38      	pop	{r3, r4, r5, pc}
 800d45c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d45e:	b112      	cbz	r2, 800d466 <_raise_r+0x1e>
 800d460:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d464:	b94b      	cbnz	r3, 800d47a <_raise_r+0x32>
 800d466:	4620      	mov	r0, r4
 800d468:	f000 f830 	bl	800d4cc <_getpid_r>
 800d46c:	462a      	mov	r2, r5
 800d46e:	4601      	mov	r1, r0
 800d470:	4620      	mov	r0, r4
 800d472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d476:	f000 b817 	b.w	800d4a8 <_kill_r>
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	d00a      	beq.n	800d494 <_raise_r+0x4c>
 800d47e:	1c59      	adds	r1, r3, #1
 800d480:	d103      	bne.n	800d48a <_raise_r+0x42>
 800d482:	2316      	movs	r3, #22
 800d484:	6003      	str	r3, [r0, #0]
 800d486:	2001      	movs	r0, #1
 800d488:	e7e7      	b.n	800d45a <_raise_r+0x12>
 800d48a:	2400      	movs	r4, #0
 800d48c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d490:	4628      	mov	r0, r5
 800d492:	4798      	blx	r3
 800d494:	2000      	movs	r0, #0
 800d496:	e7e0      	b.n	800d45a <_raise_r+0x12>

0800d498 <raise>:
 800d498:	4b02      	ldr	r3, [pc, #8]	; (800d4a4 <raise+0xc>)
 800d49a:	4601      	mov	r1, r0
 800d49c:	6818      	ldr	r0, [r3, #0]
 800d49e:	f7ff bfd3 	b.w	800d448 <_raise_r>
 800d4a2:	bf00      	nop
 800d4a4:	200012cc 	.word	0x200012cc

0800d4a8 <_kill_r>:
 800d4a8:	b538      	push	{r3, r4, r5, lr}
 800d4aa:	4d07      	ldr	r5, [pc, #28]	; (800d4c8 <_kill_r+0x20>)
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	4608      	mov	r0, r1
 800d4b2:	4611      	mov	r1, r2
 800d4b4:	602b      	str	r3, [r5, #0]
 800d4b6:	f7f9 fa29 	bl	800690c <_kill>
 800d4ba:	1c43      	adds	r3, r0, #1
 800d4bc:	d102      	bne.n	800d4c4 <_kill_r+0x1c>
 800d4be:	682b      	ldr	r3, [r5, #0]
 800d4c0:	b103      	cbz	r3, 800d4c4 <_kill_r+0x1c>
 800d4c2:	6023      	str	r3, [r4, #0]
 800d4c4:	bd38      	pop	{r3, r4, r5, pc}
 800d4c6:	bf00      	nop
 800d4c8:	20001734 	.word	0x20001734

0800d4cc <_getpid_r>:
 800d4cc:	f7f9 ba16 	b.w	80068fc <_getpid>

0800d4d0 <_malloc_usable_size_r>:
 800d4d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4d4:	1f18      	subs	r0, r3, #4
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	bfbc      	itt	lt
 800d4da:	580b      	ldrlt	r3, [r1, r0]
 800d4dc:	18c0      	addlt	r0, r0, r3
 800d4de:	4770      	bx	lr

0800d4e0 <__swhatbuf_r>:
 800d4e0:	b570      	push	{r4, r5, r6, lr}
 800d4e2:	460c      	mov	r4, r1
 800d4e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4e8:	2900      	cmp	r1, #0
 800d4ea:	b096      	sub	sp, #88	; 0x58
 800d4ec:	4615      	mov	r5, r2
 800d4ee:	461e      	mov	r6, r3
 800d4f0:	da0d      	bge.n	800d50e <__swhatbuf_r+0x2e>
 800d4f2:	89a3      	ldrh	r3, [r4, #12]
 800d4f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d4f8:	f04f 0100 	mov.w	r1, #0
 800d4fc:	bf0c      	ite	eq
 800d4fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d502:	2340      	movne	r3, #64	; 0x40
 800d504:	2000      	movs	r0, #0
 800d506:	6031      	str	r1, [r6, #0]
 800d508:	602b      	str	r3, [r5, #0]
 800d50a:	b016      	add	sp, #88	; 0x58
 800d50c:	bd70      	pop	{r4, r5, r6, pc}
 800d50e:	466a      	mov	r2, sp
 800d510:	f000 f848 	bl	800d5a4 <_fstat_r>
 800d514:	2800      	cmp	r0, #0
 800d516:	dbec      	blt.n	800d4f2 <__swhatbuf_r+0x12>
 800d518:	9901      	ldr	r1, [sp, #4]
 800d51a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d51e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d522:	4259      	negs	r1, r3
 800d524:	4159      	adcs	r1, r3
 800d526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d52a:	e7eb      	b.n	800d504 <__swhatbuf_r+0x24>

0800d52c <__smakebuf_r>:
 800d52c:	898b      	ldrh	r3, [r1, #12]
 800d52e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d530:	079d      	lsls	r5, r3, #30
 800d532:	4606      	mov	r6, r0
 800d534:	460c      	mov	r4, r1
 800d536:	d507      	bpl.n	800d548 <__smakebuf_r+0x1c>
 800d538:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d53c:	6023      	str	r3, [r4, #0]
 800d53e:	6123      	str	r3, [r4, #16]
 800d540:	2301      	movs	r3, #1
 800d542:	6163      	str	r3, [r4, #20]
 800d544:	b002      	add	sp, #8
 800d546:	bd70      	pop	{r4, r5, r6, pc}
 800d548:	ab01      	add	r3, sp, #4
 800d54a:	466a      	mov	r2, sp
 800d54c:	f7ff ffc8 	bl	800d4e0 <__swhatbuf_r>
 800d550:	9900      	ldr	r1, [sp, #0]
 800d552:	4605      	mov	r5, r0
 800d554:	4630      	mov	r0, r6
 800d556:	f7fd f8fb 	bl	800a750 <_malloc_r>
 800d55a:	b948      	cbnz	r0, 800d570 <__smakebuf_r+0x44>
 800d55c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d560:	059a      	lsls	r2, r3, #22
 800d562:	d4ef      	bmi.n	800d544 <__smakebuf_r+0x18>
 800d564:	f023 0303 	bic.w	r3, r3, #3
 800d568:	f043 0302 	orr.w	r3, r3, #2
 800d56c:	81a3      	strh	r3, [r4, #12]
 800d56e:	e7e3      	b.n	800d538 <__smakebuf_r+0xc>
 800d570:	89a3      	ldrh	r3, [r4, #12]
 800d572:	6020      	str	r0, [r4, #0]
 800d574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d578:	81a3      	strh	r3, [r4, #12]
 800d57a:	9b00      	ldr	r3, [sp, #0]
 800d57c:	6163      	str	r3, [r4, #20]
 800d57e:	9b01      	ldr	r3, [sp, #4]
 800d580:	6120      	str	r0, [r4, #16]
 800d582:	b15b      	cbz	r3, 800d59c <__smakebuf_r+0x70>
 800d584:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d588:	4630      	mov	r0, r6
 800d58a:	f000 f81d 	bl	800d5c8 <_isatty_r>
 800d58e:	b128      	cbz	r0, 800d59c <__smakebuf_r+0x70>
 800d590:	89a3      	ldrh	r3, [r4, #12]
 800d592:	f023 0303 	bic.w	r3, r3, #3
 800d596:	f043 0301 	orr.w	r3, r3, #1
 800d59a:	81a3      	strh	r3, [r4, #12]
 800d59c:	89a3      	ldrh	r3, [r4, #12]
 800d59e:	431d      	orrs	r5, r3
 800d5a0:	81a5      	strh	r5, [r4, #12]
 800d5a2:	e7cf      	b.n	800d544 <__smakebuf_r+0x18>

0800d5a4 <_fstat_r>:
 800d5a4:	b538      	push	{r3, r4, r5, lr}
 800d5a6:	4d07      	ldr	r5, [pc, #28]	; (800d5c4 <_fstat_r+0x20>)
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	4604      	mov	r4, r0
 800d5ac:	4608      	mov	r0, r1
 800d5ae:	4611      	mov	r1, r2
 800d5b0:	602b      	str	r3, [r5, #0]
 800d5b2:	f7f9 fa0a 	bl	80069ca <_fstat>
 800d5b6:	1c43      	adds	r3, r0, #1
 800d5b8:	d102      	bne.n	800d5c0 <_fstat_r+0x1c>
 800d5ba:	682b      	ldr	r3, [r5, #0]
 800d5bc:	b103      	cbz	r3, 800d5c0 <_fstat_r+0x1c>
 800d5be:	6023      	str	r3, [r4, #0]
 800d5c0:	bd38      	pop	{r3, r4, r5, pc}
 800d5c2:	bf00      	nop
 800d5c4:	20001734 	.word	0x20001734

0800d5c8 <_isatty_r>:
 800d5c8:	b538      	push	{r3, r4, r5, lr}
 800d5ca:	4d06      	ldr	r5, [pc, #24]	; (800d5e4 <_isatty_r+0x1c>)
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	4604      	mov	r4, r0
 800d5d0:	4608      	mov	r0, r1
 800d5d2:	602b      	str	r3, [r5, #0]
 800d5d4:	f7f9 fa09 	bl	80069ea <_isatty>
 800d5d8:	1c43      	adds	r3, r0, #1
 800d5da:	d102      	bne.n	800d5e2 <_isatty_r+0x1a>
 800d5dc:	682b      	ldr	r3, [r5, #0]
 800d5de:	b103      	cbz	r3, 800d5e2 <_isatty_r+0x1a>
 800d5e0:	6023      	str	r3, [r4, #0]
 800d5e2:	bd38      	pop	{r3, r4, r5, pc}
 800d5e4:	20001734 	.word	0x20001734

0800d5e8 <asin>:
 800d5e8:	b538      	push	{r3, r4, r5, lr}
 800d5ea:	ed2d 8b02 	vpush	{d8}
 800d5ee:	ec55 4b10 	vmov	r4, r5, d0
 800d5f2:	f000 ff55 	bl	800e4a0 <__ieee754_asin>
 800d5f6:	4622      	mov	r2, r4
 800d5f8:	462b      	mov	r3, r5
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	4629      	mov	r1, r5
 800d5fe:	eeb0 8a40 	vmov.f32	s16, s0
 800d602:	eef0 8a60 	vmov.f32	s17, s1
 800d606:	f7f3 fa99 	bl	8000b3c <__aeabi_dcmpun>
 800d60a:	b9a8      	cbnz	r0, 800d638 <asin+0x50>
 800d60c:	ec45 4b10 	vmov	d0, r4, r5
 800d610:	f000 fa86 	bl	800db20 <fabs>
 800d614:	4b0c      	ldr	r3, [pc, #48]	; (800d648 <asin+0x60>)
 800d616:	ec51 0b10 	vmov	r0, r1, d0
 800d61a:	2200      	movs	r2, #0
 800d61c:	f7f3 fa84 	bl	8000b28 <__aeabi_dcmpgt>
 800d620:	b150      	cbz	r0, 800d638 <asin+0x50>
 800d622:	f7fd fff7 	bl	800b614 <__errno>
 800d626:	ecbd 8b02 	vpop	{d8}
 800d62a:	2321      	movs	r3, #33	; 0x21
 800d62c:	6003      	str	r3, [r0, #0]
 800d62e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d632:	4806      	ldr	r0, [pc, #24]	; (800d64c <asin+0x64>)
 800d634:	f000 bb18 	b.w	800dc68 <nan>
 800d638:	eeb0 0a48 	vmov.f32	s0, s16
 800d63c:	eef0 0a68 	vmov.f32	s1, s17
 800d640:	ecbd 8b02 	vpop	{d8}
 800d644:	bd38      	pop	{r3, r4, r5, pc}
 800d646:	bf00      	nop
 800d648:	3ff00000 	.word	0x3ff00000
 800d64c:	080111d9 	.word	0x080111d9

0800d650 <atan2>:
 800d650:	f001 b93a 	b.w	800e8c8 <__ieee754_atan2>

0800d654 <pow>:
 800d654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d656:	ed2d 8b02 	vpush	{d8}
 800d65a:	eeb0 8a40 	vmov.f32	s16, s0
 800d65e:	eef0 8a60 	vmov.f32	s17, s1
 800d662:	ec55 4b11 	vmov	r4, r5, d1
 800d666:	f001 f9f7 	bl	800ea58 <__ieee754_pow>
 800d66a:	4622      	mov	r2, r4
 800d66c:	462b      	mov	r3, r5
 800d66e:	4620      	mov	r0, r4
 800d670:	4629      	mov	r1, r5
 800d672:	ec57 6b10 	vmov	r6, r7, d0
 800d676:	f7f3 fa61 	bl	8000b3c <__aeabi_dcmpun>
 800d67a:	2800      	cmp	r0, #0
 800d67c:	d13b      	bne.n	800d6f6 <pow+0xa2>
 800d67e:	ec51 0b18 	vmov	r0, r1, d8
 800d682:	2200      	movs	r2, #0
 800d684:	2300      	movs	r3, #0
 800d686:	f7f3 fa27 	bl	8000ad8 <__aeabi_dcmpeq>
 800d68a:	b1b8      	cbz	r0, 800d6bc <pow+0x68>
 800d68c:	2200      	movs	r2, #0
 800d68e:	2300      	movs	r3, #0
 800d690:	4620      	mov	r0, r4
 800d692:	4629      	mov	r1, r5
 800d694:	f7f3 fa20 	bl	8000ad8 <__aeabi_dcmpeq>
 800d698:	2800      	cmp	r0, #0
 800d69a:	d146      	bne.n	800d72a <pow+0xd6>
 800d69c:	ec45 4b10 	vmov	d0, r4, r5
 800d6a0:	f000 fad6 	bl	800dc50 <finite>
 800d6a4:	b338      	cbz	r0, 800d6f6 <pow+0xa2>
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	4620      	mov	r0, r4
 800d6ac:	4629      	mov	r1, r5
 800d6ae:	f7f3 fa1d 	bl	8000aec <__aeabi_dcmplt>
 800d6b2:	b300      	cbz	r0, 800d6f6 <pow+0xa2>
 800d6b4:	f7fd ffae 	bl	800b614 <__errno>
 800d6b8:	2322      	movs	r3, #34	; 0x22
 800d6ba:	e01b      	b.n	800d6f4 <pow+0xa0>
 800d6bc:	ec47 6b10 	vmov	d0, r6, r7
 800d6c0:	f000 fac6 	bl	800dc50 <finite>
 800d6c4:	b9e0      	cbnz	r0, 800d700 <pow+0xac>
 800d6c6:	eeb0 0a48 	vmov.f32	s0, s16
 800d6ca:	eef0 0a68 	vmov.f32	s1, s17
 800d6ce:	f000 fabf 	bl	800dc50 <finite>
 800d6d2:	b1a8      	cbz	r0, 800d700 <pow+0xac>
 800d6d4:	ec45 4b10 	vmov	d0, r4, r5
 800d6d8:	f000 faba 	bl	800dc50 <finite>
 800d6dc:	b180      	cbz	r0, 800d700 <pow+0xac>
 800d6de:	4632      	mov	r2, r6
 800d6e0:	463b      	mov	r3, r7
 800d6e2:	4630      	mov	r0, r6
 800d6e4:	4639      	mov	r1, r7
 800d6e6:	f7f3 fa29 	bl	8000b3c <__aeabi_dcmpun>
 800d6ea:	2800      	cmp	r0, #0
 800d6ec:	d0e2      	beq.n	800d6b4 <pow+0x60>
 800d6ee:	f7fd ff91 	bl	800b614 <__errno>
 800d6f2:	2321      	movs	r3, #33	; 0x21
 800d6f4:	6003      	str	r3, [r0, #0]
 800d6f6:	ecbd 8b02 	vpop	{d8}
 800d6fa:	ec47 6b10 	vmov	d0, r6, r7
 800d6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d700:	2200      	movs	r2, #0
 800d702:	2300      	movs	r3, #0
 800d704:	4630      	mov	r0, r6
 800d706:	4639      	mov	r1, r7
 800d708:	f7f3 f9e6 	bl	8000ad8 <__aeabi_dcmpeq>
 800d70c:	2800      	cmp	r0, #0
 800d70e:	d0f2      	beq.n	800d6f6 <pow+0xa2>
 800d710:	eeb0 0a48 	vmov.f32	s0, s16
 800d714:	eef0 0a68 	vmov.f32	s1, s17
 800d718:	f000 fa9a 	bl	800dc50 <finite>
 800d71c:	2800      	cmp	r0, #0
 800d71e:	d0ea      	beq.n	800d6f6 <pow+0xa2>
 800d720:	ec45 4b10 	vmov	d0, r4, r5
 800d724:	f000 fa94 	bl	800dc50 <finite>
 800d728:	e7c3      	b.n	800d6b2 <pow+0x5e>
 800d72a:	4f01      	ldr	r7, [pc, #4]	; (800d730 <pow+0xdc>)
 800d72c:	2600      	movs	r6, #0
 800d72e:	e7e2      	b.n	800d6f6 <pow+0xa2>
 800d730:	3ff00000 	.word	0x3ff00000
 800d734:	00000000 	.word	0x00000000

0800d738 <atan>:
 800d738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73c:	ec55 4b10 	vmov	r4, r5, d0
 800d740:	4bc3      	ldr	r3, [pc, #780]	; (800da50 <atan+0x318>)
 800d742:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d746:	429e      	cmp	r6, r3
 800d748:	46ab      	mov	fp, r5
 800d74a:	dd18      	ble.n	800d77e <atan+0x46>
 800d74c:	4bc1      	ldr	r3, [pc, #772]	; (800da54 <atan+0x31c>)
 800d74e:	429e      	cmp	r6, r3
 800d750:	dc01      	bgt.n	800d756 <atan+0x1e>
 800d752:	d109      	bne.n	800d768 <atan+0x30>
 800d754:	b144      	cbz	r4, 800d768 <atan+0x30>
 800d756:	4622      	mov	r2, r4
 800d758:	462b      	mov	r3, r5
 800d75a:	4620      	mov	r0, r4
 800d75c:	4629      	mov	r1, r5
 800d75e:	f7f2 fd9d 	bl	800029c <__adddf3>
 800d762:	4604      	mov	r4, r0
 800d764:	460d      	mov	r5, r1
 800d766:	e006      	b.n	800d776 <atan+0x3e>
 800d768:	f1bb 0f00 	cmp.w	fp, #0
 800d76c:	f300 8131 	bgt.w	800d9d2 <atan+0x29a>
 800d770:	a59b      	add	r5, pc, #620	; (adr r5, 800d9e0 <atan+0x2a8>)
 800d772:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d776:	ec45 4b10 	vmov	d0, r4, r5
 800d77a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d77e:	4bb6      	ldr	r3, [pc, #728]	; (800da58 <atan+0x320>)
 800d780:	429e      	cmp	r6, r3
 800d782:	dc14      	bgt.n	800d7ae <atan+0x76>
 800d784:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d788:	429e      	cmp	r6, r3
 800d78a:	dc0d      	bgt.n	800d7a8 <atan+0x70>
 800d78c:	a396      	add	r3, pc, #600	; (adr r3, 800d9e8 <atan+0x2b0>)
 800d78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d792:	ee10 0a10 	vmov	r0, s0
 800d796:	4629      	mov	r1, r5
 800d798:	f7f2 fd80 	bl	800029c <__adddf3>
 800d79c:	4baf      	ldr	r3, [pc, #700]	; (800da5c <atan+0x324>)
 800d79e:	2200      	movs	r2, #0
 800d7a0:	f7f3 f9c2 	bl	8000b28 <__aeabi_dcmpgt>
 800d7a4:	2800      	cmp	r0, #0
 800d7a6:	d1e6      	bne.n	800d776 <atan+0x3e>
 800d7a8:	f04f 3aff 	mov.w	sl, #4294967295
 800d7ac:	e02b      	b.n	800d806 <atan+0xce>
 800d7ae:	f000 f9b7 	bl	800db20 <fabs>
 800d7b2:	4bab      	ldr	r3, [pc, #684]	; (800da60 <atan+0x328>)
 800d7b4:	429e      	cmp	r6, r3
 800d7b6:	ec55 4b10 	vmov	r4, r5, d0
 800d7ba:	f300 80bf 	bgt.w	800d93c <atan+0x204>
 800d7be:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d7c2:	429e      	cmp	r6, r3
 800d7c4:	f300 80a0 	bgt.w	800d908 <atan+0x1d0>
 800d7c8:	ee10 2a10 	vmov	r2, s0
 800d7cc:	ee10 0a10 	vmov	r0, s0
 800d7d0:	462b      	mov	r3, r5
 800d7d2:	4629      	mov	r1, r5
 800d7d4:	f7f2 fd62 	bl	800029c <__adddf3>
 800d7d8:	4ba0      	ldr	r3, [pc, #640]	; (800da5c <atan+0x324>)
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f7f2 fd5c 	bl	8000298 <__aeabi_dsub>
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	4606      	mov	r6, r0
 800d7e4:	460f      	mov	r7, r1
 800d7e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	4629      	mov	r1, r5
 800d7ee:	f7f2 fd55 	bl	800029c <__adddf3>
 800d7f2:	4602      	mov	r2, r0
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	4630      	mov	r0, r6
 800d7f8:	4639      	mov	r1, r7
 800d7fa:	f7f3 f82f 	bl	800085c <__aeabi_ddiv>
 800d7fe:	f04f 0a00 	mov.w	sl, #0
 800d802:	4604      	mov	r4, r0
 800d804:	460d      	mov	r5, r1
 800d806:	4622      	mov	r2, r4
 800d808:	462b      	mov	r3, r5
 800d80a:	4620      	mov	r0, r4
 800d80c:	4629      	mov	r1, r5
 800d80e:	f7f2 fefb 	bl	8000608 <__aeabi_dmul>
 800d812:	4602      	mov	r2, r0
 800d814:	460b      	mov	r3, r1
 800d816:	4680      	mov	r8, r0
 800d818:	4689      	mov	r9, r1
 800d81a:	f7f2 fef5 	bl	8000608 <__aeabi_dmul>
 800d81e:	a374      	add	r3, pc, #464	; (adr r3, 800d9f0 <atan+0x2b8>)
 800d820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d824:	4606      	mov	r6, r0
 800d826:	460f      	mov	r7, r1
 800d828:	f7f2 feee 	bl	8000608 <__aeabi_dmul>
 800d82c:	a372      	add	r3, pc, #456	; (adr r3, 800d9f8 <atan+0x2c0>)
 800d82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d832:	f7f2 fd33 	bl	800029c <__adddf3>
 800d836:	4632      	mov	r2, r6
 800d838:	463b      	mov	r3, r7
 800d83a:	f7f2 fee5 	bl	8000608 <__aeabi_dmul>
 800d83e:	a370      	add	r3, pc, #448	; (adr r3, 800da00 <atan+0x2c8>)
 800d840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d844:	f7f2 fd2a 	bl	800029c <__adddf3>
 800d848:	4632      	mov	r2, r6
 800d84a:	463b      	mov	r3, r7
 800d84c:	f7f2 fedc 	bl	8000608 <__aeabi_dmul>
 800d850:	a36d      	add	r3, pc, #436	; (adr r3, 800da08 <atan+0x2d0>)
 800d852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d856:	f7f2 fd21 	bl	800029c <__adddf3>
 800d85a:	4632      	mov	r2, r6
 800d85c:	463b      	mov	r3, r7
 800d85e:	f7f2 fed3 	bl	8000608 <__aeabi_dmul>
 800d862:	a36b      	add	r3, pc, #428	; (adr r3, 800da10 <atan+0x2d8>)
 800d864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d868:	f7f2 fd18 	bl	800029c <__adddf3>
 800d86c:	4632      	mov	r2, r6
 800d86e:	463b      	mov	r3, r7
 800d870:	f7f2 feca 	bl	8000608 <__aeabi_dmul>
 800d874:	a368      	add	r3, pc, #416	; (adr r3, 800da18 <atan+0x2e0>)
 800d876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87a:	f7f2 fd0f 	bl	800029c <__adddf3>
 800d87e:	4642      	mov	r2, r8
 800d880:	464b      	mov	r3, r9
 800d882:	f7f2 fec1 	bl	8000608 <__aeabi_dmul>
 800d886:	a366      	add	r3, pc, #408	; (adr r3, 800da20 <atan+0x2e8>)
 800d888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88c:	4680      	mov	r8, r0
 800d88e:	4689      	mov	r9, r1
 800d890:	4630      	mov	r0, r6
 800d892:	4639      	mov	r1, r7
 800d894:	f7f2 feb8 	bl	8000608 <__aeabi_dmul>
 800d898:	a363      	add	r3, pc, #396	; (adr r3, 800da28 <atan+0x2f0>)
 800d89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89e:	f7f2 fcfb 	bl	8000298 <__aeabi_dsub>
 800d8a2:	4632      	mov	r2, r6
 800d8a4:	463b      	mov	r3, r7
 800d8a6:	f7f2 feaf 	bl	8000608 <__aeabi_dmul>
 800d8aa:	a361      	add	r3, pc, #388	; (adr r3, 800da30 <atan+0x2f8>)
 800d8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b0:	f7f2 fcf2 	bl	8000298 <__aeabi_dsub>
 800d8b4:	4632      	mov	r2, r6
 800d8b6:	463b      	mov	r3, r7
 800d8b8:	f7f2 fea6 	bl	8000608 <__aeabi_dmul>
 800d8bc:	a35e      	add	r3, pc, #376	; (adr r3, 800da38 <atan+0x300>)
 800d8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c2:	f7f2 fce9 	bl	8000298 <__aeabi_dsub>
 800d8c6:	4632      	mov	r2, r6
 800d8c8:	463b      	mov	r3, r7
 800d8ca:	f7f2 fe9d 	bl	8000608 <__aeabi_dmul>
 800d8ce:	a35c      	add	r3, pc, #368	; (adr r3, 800da40 <atan+0x308>)
 800d8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d4:	f7f2 fce0 	bl	8000298 <__aeabi_dsub>
 800d8d8:	4632      	mov	r2, r6
 800d8da:	463b      	mov	r3, r7
 800d8dc:	f7f2 fe94 	bl	8000608 <__aeabi_dmul>
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	460b      	mov	r3, r1
 800d8e4:	4640      	mov	r0, r8
 800d8e6:	4649      	mov	r1, r9
 800d8e8:	f7f2 fcd8 	bl	800029c <__adddf3>
 800d8ec:	4622      	mov	r2, r4
 800d8ee:	462b      	mov	r3, r5
 800d8f0:	f7f2 fe8a 	bl	8000608 <__aeabi_dmul>
 800d8f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d8f8:	4602      	mov	r2, r0
 800d8fa:	460b      	mov	r3, r1
 800d8fc:	d14b      	bne.n	800d996 <atan+0x25e>
 800d8fe:	4620      	mov	r0, r4
 800d900:	4629      	mov	r1, r5
 800d902:	f7f2 fcc9 	bl	8000298 <__aeabi_dsub>
 800d906:	e72c      	b.n	800d762 <atan+0x2a>
 800d908:	ee10 0a10 	vmov	r0, s0
 800d90c:	4b53      	ldr	r3, [pc, #332]	; (800da5c <atan+0x324>)
 800d90e:	2200      	movs	r2, #0
 800d910:	4629      	mov	r1, r5
 800d912:	f7f2 fcc1 	bl	8000298 <__aeabi_dsub>
 800d916:	4b51      	ldr	r3, [pc, #324]	; (800da5c <atan+0x324>)
 800d918:	4606      	mov	r6, r0
 800d91a:	460f      	mov	r7, r1
 800d91c:	2200      	movs	r2, #0
 800d91e:	4620      	mov	r0, r4
 800d920:	4629      	mov	r1, r5
 800d922:	f7f2 fcbb 	bl	800029c <__adddf3>
 800d926:	4602      	mov	r2, r0
 800d928:	460b      	mov	r3, r1
 800d92a:	4630      	mov	r0, r6
 800d92c:	4639      	mov	r1, r7
 800d92e:	f7f2 ff95 	bl	800085c <__aeabi_ddiv>
 800d932:	f04f 0a01 	mov.w	sl, #1
 800d936:	4604      	mov	r4, r0
 800d938:	460d      	mov	r5, r1
 800d93a:	e764      	b.n	800d806 <atan+0xce>
 800d93c:	4b49      	ldr	r3, [pc, #292]	; (800da64 <atan+0x32c>)
 800d93e:	429e      	cmp	r6, r3
 800d940:	da1d      	bge.n	800d97e <atan+0x246>
 800d942:	ee10 0a10 	vmov	r0, s0
 800d946:	4b48      	ldr	r3, [pc, #288]	; (800da68 <atan+0x330>)
 800d948:	2200      	movs	r2, #0
 800d94a:	4629      	mov	r1, r5
 800d94c:	f7f2 fca4 	bl	8000298 <__aeabi_dsub>
 800d950:	4b45      	ldr	r3, [pc, #276]	; (800da68 <atan+0x330>)
 800d952:	4606      	mov	r6, r0
 800d954:	460f      	mov	r7, r1
 800d956:	2200      	movs	r2, #0
 800d958:	4620      	mov	r0, r4
 800d95a:	4629      	mov	r1, r5
 800d95c:	f7f2 fe54 	bl	8000608 <__aeabi_dmul>
 800d960:	4b3e      	ldr	r3, [pc, #248]	; (800da5c <atan+0x324>)
 800d962:	2200      	movs	r2, #0
 800d964:	f7f2 fc9a 	bl	800029c <__adddf3>
 800d968:	4602      	mov	r2, r0
 800d96a:	460b      	mov	r3, r1
 800d96c:	4630      	mov	r0, r6
 800d96e:	4639      	mov	r1, r7
 800d970:	f7f2 ff74 	bl	800085c <__aeabi_ddiv>
 800d974:	f04f 0a02 	mov.w	sl, #2
 800d978:	4604      	mov	r4, r0
 800d97a:	460d      	mov	r5, r1
 800d97c:	e743      	b.n	800d806 <atan+0xce>
 800d97e:	462b      	mov	r3, r5
 800d980:	ee10 2a10 	vmov	r2, s0
 800d984:	4939      	ldr	r1, [pc, #228]	; (800da6c <atan+0x334>)
 800d986:	2000      	movs	r0, #0
 800d988:	f7f2 ff68 	bl	800085c <__aeabi_ddiv>
 800d98c:	f04f 0a03 	mov.w	sl, #3
 800d990:	4604      	mov	r4, r0
 800d992:	460d      	mov	r5, r1
 800d994:	e737      	b.n	800d806 <atan+0xce>
 800d996:	4b36      	ldr	r3, [pc, #216]	; (800da70 <atan+0x338>)
 800d998:	4e36      	ldr	r6, [pc, #216]	; (800da74 <atan+0x33c>)
 800d99a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a2:	f7f2 fc79 	bl	8000298 <__aeabi_dsub>
 800d9a6:	4622      	mov	r2, r4
 800d9a8:	462b      	mov	r3, r5
 800d9aa:	f7f2 fc75 	bl	8000298 <__aeabi_dsub>
 800d9ae:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d9b2:	4602      	mov	r2, r0
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d9ba:	f7f2 fc6d 	bl	8000298 <__aeabi_dsub>
 800d9be:	f1bb 0f00 	cmp.w	fp, #0
 800d9c2:	4604      	mov	r4, r0
 800d9c4:	460d      	mov	r5, r1
 800d9c6:	f6bf aed6 	bge.w	800d776 <atan+0x3e>
 800d9ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9ce:	461d      	mov	r5, r3
 800d9d0:	e6d1      	b.n	800d776 <atan+0x3e>
 800d9d2:	a51d      	add	r5, pc, #116	; (adr r5, 800da48 <atan+0x310>)
 800d9d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d9d8:	e6cd      	b.n	800d776 <atan+0x3e>
 800d9da:	bf00      	nop
 800d9dc:	f3af 8000 	nop.w
 800d9e0:	54442d18 	.word	0x54442d18
 800d9e4:	bff921fb 	.word	0xbff921fb
 800d9e8:	8800759c 	.word	0x8800759c
 800d9ec:	7e37e43c 	.word	0x7e37e43c
 800d9f0:	e322da11 	.word	0xe322da11
 800d9f4:	3f90ad3a 	.word	0x3f90ad3a
 800d9f8:	24760deb 	.word	0x24760deb
 800d9fc:	3fa97b4b 	.word	0x3fa97b4b
 800da00:	a0d03d51 	.word	0xa0d03d51
 800da04:	3fb10d66 	.word	0x3fb10d66
 800da08:	c54c206e 	.word	0xc54c206e
 800da0c:	3fb745cd 	.word	0x3fb745cd
 800da10:	920083ff 	.word	0x920083ff
 800da14:	3fc24924 	.word	0x3fc24924
 800da18:	5555550d 	.word	0x5555550d
 800da1c:	3fd55555 	.word	0x3fd55555
 800da20:	2c6a6c2f 	.word	0x2c6a6c2f
 800da24:	bfa2b444 	.word	0xbfa2b444
 800da28:	52defd9a 	.word	0x52defd9a
 800da2c:	3fadde2d 	.word	0x3fadde2d
 800da30:	af749a6d 	.word	0xaf749a6d
 800da34:	3fb3b0f2 	.word	0x3fb3b0f2
 800da38:	fe231671 	.word	0xfe231671
 800da3c:	3fbc71c6 	.word	0x3fbc71c6
 800da40:	9998ebc4 	.word	0x9998ebc4
 800da44:	3fc99999 	.word	0x3fc99999
 800da48:	54442d18 	.word	0x54442d18
 800da4c:	3ff921fb 	.word	0x3ff921fb
 800da50:	440fffff 	.word	0x440fffff
 800da54:	7ff00000 	.word	0x7ff00000
 800da58:	3fdbffff 	.word	0x3fdbffff
 800da5c:	3ff00000 	.word	0x3ff00000
 800da60:	3ff2ffff 	.word	0x3ff2ffff
 800da64:	40038000 	.word	0x40038000
 800da68:	3ff80000 	.word	0x3ff80000
 800da6c:	bff00000 	.word	0xbff00000
 800da70:	080113e8 	.word	0x080113e8
 800da74:	080113c8 	.word	0x080113c8

0800da78 <cos>:
 800da78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da7a:	ec53 2b10 	vmov	r2, r3, d0
 800da7e:	4826      	ldr	r0, [pc, #152]	; (800db18 <cos+0xa0>)
 800da80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800da84:	4281      	cmp	r1, r0
 800da86:	dc06      	bgt.n	800da96 <cos+0x1e>
 800da88:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800db10 <cos+0x98>
 800da8c:	b005      	add	sp, #20
 800da8e:	f85d eb04 	ldr.w	lr, [sp], #4
 800da92:	f000 b971 	b.w	800dd78 <__kernel_cos>
 800da96:	4821      	ldr	r0, [pc, #132]	; (800db1c <cos+0xa4>)
 800da98:	4281      	cmp	r1, r0
 800da9a:	dd09      	ble.n	800dab0 <cos+0x38>
 800da9c:	ee10 0a10 	vmov	r0, s0
 800daa0:	4619      	mov	r1, r3
 800daa2:	f7f2 fbf9 	bl	8000298 <__aeabi_dsub>
 800daa6:	ec41 0b10 	vmov	d0, r0, r1
 800daaa:	b005      	add	sp, #20
 800daac:	f85d fb04 	ldr.w	pc, [sp], #4
 800dab0:	4668      	mov	r0, sp
 800dab2:	f001 fcfd 	bl	800f4b0 <__ieee754_rem_pio2>
 800dab6:	f000 0003 	and.w	r0, r0, #3
 800daba:	2801      	cmp	r0, #1
 800dabc:	d00b      	beq.n	800dad6 <cos+0x5e>
 800dabe:	2802      	cmp	r0, #2
 800dac0:	d016      	beq.n	800daf0 <cos+0x78>
 800dac2:	b9e0      	cbnz	r0, 800dafe <cos+0x86>
 800dac4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dac8:	ed9d 0b00 	vldr	d0, [sp]
 800dacc:	f000 f954 	bl	800dd78 <__kernel_cos>
 800dad0:	ec51 0b10 	vmov	r0, r1, d0
 800dad4:	e7e7      	b.n	800daa6 <cos+0x2e>
 800dad6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dada:	ed9d 0b00 	vldr	d0, [sp]
 800dade:	f000 fa13 	bl	800df08 <__kernel_sin>
 800dae2:	ec53 2b10 	vmov	r2, r3, d0
 800dae6:	ee10 0a10 	vmov	r0, s0
 800daea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800daee:	e7da      	b.n	800daa6 <cos+0x2e>
 800daf0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800daf4:	ed9d 0b00 	vldr	d0, [sp]
 800daf8:	f000 f93e 	bl	800dd78 <__kernel_cos>
 800dafc:	e7f1      	b.n	800dae2 <cos+0x6a>
 800dafe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db02:	ed9d 0b00 	vldr	d0, [sp]
 800db06:	2001      	movs	r0, #1
 800db08:	f000 f9fe 	bl	800df08 <__kernel_sin>
 800db0c:	e7e0      	b.n	800dad0 <cos+0x58>
 800db0e:	bf00      	nop
	...
 800db18:	3fe921fb 	.word	0x3fe921fb
 800db1c:	7fefffff 	.word	0x7fefffff

0800db20 <fabs>:
 800db20:	ec51 0b10 	vmov	r0, r1, d0
 800db24:	ee10 2a10 	vmov	r2, s0
 800db28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800db2c:	ec43 2b10 	vmov	d0, r2, r3
 800db30:	4770      	bx	lr
 800db32:	0000      	movs	r0, r0
 800db34:	0000      	movs	r0, r0
	...

0800db38 <sin>:
 800db38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db3a:	ec53 2b10 	vmov	r2, r3, d0
 800db3e:	4828      	ldr	r0, [pc, #160]	; (800dbe0 <sin+0xa8>)
 800db40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800db44:	4281      	cmp	r1, r0
 800db46:	dc07      	bgt.n	800db58 <sin+0x20>
 800db48:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800dbd8 <sin+0xa0>
 800db4c:	2000      	movs	r0, #0
 800db4e:	b005      	add	sp, #20
 800db50:	f85d eb04 	ldr.w	lr, [sp], #4
 800db54:	f000 b9d8 	b.w	800df08 <__kernel_sin>
 800db58:	4822      	ldr	r0, [pc, #136]	; (800dbe4 <sin+0xac>)
 800db5a:	4281      	cmp	r1, r0
 800db5c:	dd09      	ble.n	800db72 <sin+0x3a>
 800db5e:	ee10 0a10 	vmov	r0, s0
 800db62:	4619      	mov	r1, r3
 800db64:	f7f2 fb98 	bl	8000298 <__aeabi_dsub>
 800db68:	ec41 0b10 	vmov	d0, r0, r1
 800db6c:	b005      	add	sp, #20
 800db6e:	f85d fb04 	ldr.w	pc, [sp], #4
 800db72:	4668      	mov	r0, sp
 800db74:	f001 fc9c 	bl	800f4b0 <__ieee754_rem_pio2>
 800db78:	f000 0003 	and.w	r0, r0, #3
 800db7c:	2801      	cmp	r0, #1
 800db7e:	d00c      	beq.n	800db9a <sin+0x62>
 800db80:	2802      	cmp	r0, #2
 800db82:	d011      	beq.n	800dba8 <sin+0x70>
 800db84:	b9f0      	cbnz	r0, 800dbc4 <sin+0x8c>
 800db86:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db8a:	ed9d 0b00 	vldr	d0, [sp]
 800db8e:	2001      	movs	r0, #1
 800db90:	f000 f9ba 	bl	800df08 <__kernel_sin>
 800db94:	ec51 0b10 	vmov	r0, r1, d0
 800db98:	e7e6      	b.n	800db68 <sin+0x30>
 800db9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db9e:	ed9d 0b00 	vldr	d0, [sp]
 800dba2:	f000 f8e9 	bl	800dd78 <__kernel_cos>
 800dba6:	e7f5      	b.n	800db94 <sin+0x5c>
 800dba8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dbac:	ed9d 0b00 	vldr	d0, [sp]
 800dbb0:	2001      	movs	r0, #1
 800dbb2:	f000 f9a9 	bl	800df08 <__kernel_sin>
 800dbb6:	ec53 2b10 	vmov	r2, r3, d0
 800dbba:	ee10 0a10 	vmov	r0, s0
 800dbbe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dbc2:	e7d1      	b.n	800db68 <sin+0x30>
 800dbc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dbc8:	ed9d 0b00 	vldr	d0, [sp]
 800dbcc:	f000 f8d4 	bl	800dd78 <__kernel_cos>
 800dbd0:	e7f1      	b.n	800dbb6 <sin+0x7e>
 800dbd2:	bf00      	nop
 800dbd4:	f3af 8000 	nop.w
	...
 800dbe0:	3fe921fb 	.word	0x3fe921fb
 800dbe4:	7fefffff 	.word	0x7fefffff

0800dbe8 <tan>:
 800dbe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dbea:	ec53 2b10 	vmov	r2, r3, d0
 800dbee:	4816      	ldr	r0, [pc, #88]	; (800dc48 <tan+0x60>)
 800dbf0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dbf4:	4281      	cmp	r1, r0
 800dbf6:	dc07      	bgt.n	800dc08 <tan+0x20>
 800dbf8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800dc40 <tan+0x58>
 800dbfc:	2001      	movs	r0, #1
 800dbfe:	b005      	add	sp, #20
 800dc00:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc04:	f000 ba40 	b.w	800e088 <__kernel_tan>
 800dc08:	4810      	ldr	r0, [pc, #64]	; (800dc4c <tan+0x64>)
 800dc0a:	4281      	cmp	r1, r0
 800dc0c:	dd09      	ble.n	800dc22 <tan+0x3a>
 800dc0e:	ee10 0a10 	vmov	r0, s0
 800dc12:	4619      	mov	r1, r3
 800dc14:	f7f2 fb40 	bl	8000298 <__aeabi_dsub>
 800dc18:	ec41 0b10 	vmov	d0, r0, r1
 800dc1c:	b005      	add	sp, #20
 800dc1e:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc22:	4668      	mov	r0, sp
 800dc24:	f001 fc44 	bl	800f4b0 <__ieee754_rem_pio2>
 800dc28:	0040      	lsls	r0, r0, #1
 800dc2a:	f000 0002 	and.w	r0, r0, #2
 800dc2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dc32:	ed9d 0b00 	vldr	d0, [sp]
 800dc36:	f1c0 0001 	rsb	r0, r0, #1
 800dc3a:	f000 fa25 	bl	800e088 <__kernel_tan>
 800dc3e:	e7ed      	b.n	800dc1c <tan+0x34>
	...
 800dc48:	3fe921fb 	.word	0x3fe921fb
 800dc4c:	7fefffff 	.word	0x7fefffff

0800dc50 <finite>:
 800dc50:	b082      	sub	sp, #8
 800dc52:	ed8d 0b00 	vstr	d0, [sp]
 800dc56:	9801      	ldr	r0, [sp, #4]
 800dc58:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800dc5c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800dc60:	0fc0      	lsrs	r0, r0, #31
 800dc62:	b002      	add	sp, #8
 800dc64:	4770      	bx	lr
	...

0800dc68 <nan>:
 800dc68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dc70 <nan+0x8>
 800dc6c:	4770      	bx	lr
 800dc6e:	bf00      	nop
 800dc70:	00000000 	.word	0x00000000
 800dc74:	7ff80000 	.word	0x7ff80000

0800dc78 <floor>:
 800dc78:	ec51 0b10 	vmov	r0, r1, d0
 800dc7c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dc80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc84:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800dc88:	2e13      	cmp	r6, #19
 800dc8a:	ee10 5a10 	vmov	r5, s0
 800dc8e:	ee10 8a10 	vmov	r8, s0
 800dc92:	460c      	mov	r4, r1
 800dc94:	dc31      	bgt.n	800dcfa <floor+0x82>
 800dc96:	2e00      	cmp	r6, #0
 800dc98:	da14      	bge.n	800dcc4 <floor+0x4c>
 800dc9a:	a333      	add	r3, pc, #204	; (adr r3, 800dd68 <floor+0xf0>)
 800dc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca0:	f7f2 fafc 	bl	800029c <__adddf3>
 800dca4:	2200      	movs	r2, #0
 800dca6:	2300      	movs	r3, #0
 800dca8:	f7f2 ff3e 	bl	8000b28 <__aeabi_dcmpgt>
 800dcac:	b138      	cbz	r0, 800dcbe <floor+0x46>
 800dcae:	2c00      	cmp	r4, #0
 800dcb0:	da53      	bge.n	800dd5a <floor+0xe2>
 800dcb2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800dcb6:	4325      	orrs	r5, r4
 800dcb8:	d052      	beq.n	800dd60 <floor+0xe8>
 800dcba:	4c2d      	ldr	r4, [pc, #180]	; (800dd70 <floor+0xf8>)
 800dcbc:	2500      	movs	r5, #0
 800dcbe:	4621      	mov	r1, r4
 800dcc0:	4628      	mov	r0, r5
 800dcc2:	e024      	b.n	800dd0e <floor+0x96>
 800dcc4:	4f2b      	ldr	r7, [pc, #172]	; (800dd74 <floor+0xfc>)
 800dcc6:	4137      	asrs	r7, r6
 800dcc8:	ea01 0307 	and.w	r3, r1, r7
 800dccc:	4303      	orrs	r3, r0
 800dcce:	d01e      	beq.n	800dd0e <floor+0x96>
 800dcd0:	a325      	add	r3, pc, #148	; (adr r3, 800dd68 <floor+0xf0>)
 800dcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd6:	f7f2 fae1 	bl	800029c <__adddf3>
 800dcda:	2200      	movs	r2, #0
 800dcdc:	2300      	movs	r3, #0
 800dcde:	f7f2 ff23 	bl	8000b28 <__aeabi_dcmpgt>
 800dce2:	2800      	cmp	r0, #0
 800dce4:	d0eb      	beq.n	800dcbe <floor+0x46>
 800dce6:	2c00      	cmp	r4, #0
 800dce8:	bfbe      	ittt	lt
 800dcea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800dcee:	4133      	asrlt	r3, r6
 800dcf0:	18e4      	addlt	r4, r4, r3
 800dcf2:	ea24 0407 	bic.w	r4, r4, r7
 800dcf6:	2500      	movs	r5, #0
 800dcf8:	e7e1      	b.n	800dcbe <floor+0x46>
 800dcfa:	2e33      	cmp	r6, #51	; 0x33
 800dcfc:	dd0b      	ble.n	800dd16 <floor+0x9e>
 800dcfe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800dd02:	d104      	bne.n	800dd0e <floor+0x96>
 800dd04:	ee10 2a10 	vmov	r2, s0
 800dd08:	460b      	mov	r3, r1
 800dd0a:	f7f2 fac7 	bl	800029c <__adddf3>
 800dd0e:	ec41 0b10 	vmov	d0, r0, r1
 800dd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd16:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800dd1a:	f04f 37ff 	mov.w	r7, #4294967295
 800dd1e:	40df      	lsrs	r7, r3
 800dd20:	4238      	tst	r0, r7
 800dd22:	d0f4      	beq.n	800dd0e <floor+0x96>
 800dd24:	a310      	add	r3, pc, #64	; (adr r3, 800dd68 <floor+0xf0>)
 800dd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2a:	f7f2 fab7 	bl	800029c <__adddf3>
 800dd2e:	2200      	movs	r2, #0
 800dd30:	2300      	movs	r3, #0
 800dd32:	f7f2 fef9 	bl	8000b28 <__aeabi_dcmpgt>
 800dd36:	2800      	cmp	r0, #0
 800dd38:	d0c1      	beq.n	800dcbe <floor+0x46>
 800dd3a:	2c00      	cmp	r4, #0
 800dd3c:	da0a      	bge.n	800dd54 <floor+0xdc>
 800dd3e:	2e14      	cmp	r6, #20
 800dd40:	d101      	bne.n	800dd46 <floor+0xce>
 800dd42:	3401      	adds	r4, #1
 800dd44:	e006      	b.n	800dd54 <floor+0xdc>
 800dd46:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	40b3      	lsls	r3, r6
 800dd4e:	441d      	add	r5, r3
 800dd50:	45a8      	cmp	r8, r5
 800dd52:	d8f6      	bhi.n	800dd42 <floor+0xca>
 800dd54:	ea25 0507 	bic.w	r5, r5, r7
 800dd58:	e7b1      	b.n	800dcbe <floor+0x46>
 800dd5a:	2500      	movs	r5, #0
 800dd5c:	462c      	mov	r4, r5
 800dd5e:	e7ae      	b.n	800dcbe <floor+0x46>
 800dd60:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800dd64:	e7ab      	b.n	800dcbe <floor+0x46>
 800dd66:	bf00      	nop
 800dd68:	8800759c 	.word	0x8800759c
 800dd6c:	7e37e43c 	.word	0x7e37e43c
 800dd70:	bff00000 	.word	0xbff00000
 800dd74:	000fffff 	.word	0x000fffff

0800dd78 <__kernel_cos>:
 800dd78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd7c:	ec57 6b10 	vmov	r6, r7, d0
 800dd80:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800dd84:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800dd88:	ed8d 1b00 	vstr	d1, [sp]
 800dd8c:	da07      	bge.n	800dd9e <__kernel_cos+0x26>
 800dd8e:	ee10 0a10 	vmov	r0, s0
 800dd92:	4639      	mov	r1, r7
 800dd94:	f7f2 fee8 	bl	8000b68 <__aeabi_d2iz>
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	f000 8088 	beq.w	800deae <__kernel_cos+0x136>
 800dd9e:	4632      	mov	r2, r6
 800dda0:	463b      	mov	r3, r7
 800dda2:	4630      	mov	r0, r6
 800dda4:	4639      	mov	r1, r7
 800dda6:	f7f2 fc2f 	bl	8000608 <__aeabi_dmul>
 800ddaa:	4b51      	ldr	r3, [pc, #324]	; (800def0 <__kernel_cos+0x178>)
 800ddac:	2200      	movs	r2, #0
 800ddae:	4604      	mov	r4, r0
 800ddb0:	460d      	mov	r5, r1
 800ddb2:	f7f2 fc29 	bl	8000608 <__aeabi_dmul>
 800ddb6:	a340      	add	r3, pc, #256	; (adr r3, 800deb8 <__kernel_cos+0x140>)
 800ddb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddbc:	4682      	mov	sl, r0
 800ddbe:	468b      	mov	fp, r1
 800ddc0:	4620      	mov	r0, r4
 800ddc2:	4629      	mov	r1, r5
 800ddc4:	f7f2 fc20 	bl	8000608 <__aeabi_dmul>
 800ddc8:	a33d      	add	r3, pc, #244	; (adr r3, 800dec0 <__kernel_cos+0x148>)
 800ddca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddce:	f7f2 fa65 	bl	800029c <__adddf3>
 800ddd2:	4622      	mov	r2, r4
 800ddd4:	462b      	mov	r3, r5
 800ddd6:	f7f2 fc17 	bl	8000608 <__aeabi_dmul>
 800ddda:	a33b      	add	r3, pc, #236	; (adr r3, 800dec8 <__kernel_cos+0x150>)
 800dddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde0:	f7f2 fa5a 	bl	8000298 <__aeabi_dsub>
 800dde4:	4622      	mov	r2, r4
 800dde6:	462b      	mov	r3, r5
 800dde8:	f7f2 fc0e 	bl	8000608 <__aeabi_dmul>
 800ddec:	a338      	add	r3, pc, #224	; (adr r3, 800ded0 <__kernel_cos+0x158>)
 800ddee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf2:	f7f2 fa53 	bl	800029c <__adddf3>
 800ddf6:	4622      	mov	r2, r4
 800ddf8:	462b      	mov	r3, r5
 800ddfa:	f7f2 fc05 	bl	8000608 <__aeabi_dmul>
 800ddfe:	a336      	add	r3, pc, #216	; (adr r3, 800ded8 <__kernel_cos+0x160>)
 800de00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de04:	f7f2 fa48 	bl	8000298 <__aeabi_dsub>
 800de08:	4622      	mov	r2, r4
 800de0a:	462b      	mov	r3, r5
 800de0c:	f7f2 fbfc 	bl	8000608 <__aeabi_dmul>
 800de10:	a333      	add	r3, pc, #204	; (adr r3, 800dee0 <__kernel_cos+0x168>)
 800de12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de16:	f7f2 fa41 	bl	800029c <__adddf3>
 800de1a:	4622      	mov	r2, r4
 800de1c:	462b      	mov	r3, r5
 800de1e:	f7f2 fbf3 	bl	8000608 <__aeabi_dmul>
 800de22:	4622      	mov	r2, r4
 800de24:	462b      	mov	r3, r5
 800de26:	f7f2 fbef 	bl	8000608 <__aeabi_dmul>
 800de2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de2e:	4604      	mov	r4, r0
 800de30:	460d      	mov	r5, r1
 800de32:	4630      	mov	r0, r6
 800de34:	4639      	mov	r1, r7
 800de36:	f7f2 fbe7 	bl	8000608 <__aeabi_dmul>
 800de3a:	460b      	mov	r3, r1
 800de3c:	4602      	mov	r2, r0
 800de3e:	4629      	mov	r1, r5
 800de40:	4620      	mov	r0, r4
 800de42:	f7f2 fa29 	bl	8000298 <__aeabi_dsub>
 800de46:	4b2b      	ldr	r3, [pc, #172]	; (800def4 <__kernel_cos+0x17c>)
 800de48:	4598      	cmp	r8, r3
 800de4a:	4606      	mov	r6, r0
 800de4c:	460f      	mov	r7, r1
 800de4e:	dc10      	bgt.n	800de72 <__kernel_cos+0xfa>
 800de50:	4602      	mov	r2, r0
 800de52:	460b      	mov	r3, r1
 800de54:	4650      	mov	r0, sl
 800de56:	4659      	mov	r1, fp
 800de58:	f7f2 fa1e 	bl	8000298 <__aeabi_dsub>
 800de5c:	460b      	mov	r3, r1
 800de5e:	4926      	ldr	r1, [pc, #152]	; (800def8 <__kernel_cos+0x180>)
 800de60:	4602      	mov	r2, r0
 800de62:	2000      	movs	r0, #0
 800de64:	f7f2 fa18 	bl	8000298 <__aeabi_dsub>
 800de68:	ec41 0b10 	vmov	d0, r0, r1
 800de6c:	b003      	add	sp, #12
 800de6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de72:	4b22      	ldr	r3, [pc, #136]	; (800defc <__kernel_cos+0x184>)
 800de74:	4920      	ldr	r1, [pc, #128]	; (800def8 <__kernel_cos+0x180>)
 800de76:	4598      	cmp	r8, r3
 800de78:	bfcc      	ite	gt
 800de7a:	4d21      	ldrgt	r5, [pc, #132]	; (800df00 <__kernel_cos+0x188>)
 800de7c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800de80:	2400      	movs	r4, #0
 800de82:	4622      	mov	r2, r4
 800de84:	462b      	mov	r3, r5
 800de86:	2000      	movs	r0, #0
 800de88:	f7f2 fa06 	bl	8000298 <__aeabi_dsub>
 800de8c:	4622      	mov	r2, r4
 800de8e:	4680      	mov	r8, r0
 800de90:	4689      	mov	r9, r1
 800de92:	462b      	mov	r3, r5
 800de94:	4650      	mov	r0, sl
 800de96:	4659      	mov	r1, fp
 800de98:	f7f2 f9fe 	bl	8000298 <__aeabi_dsub>
 800de9c:	4632      	mov	r2, r6
 800de9e:	463b      	mov	r3, r7
 800dea0:	f7f2 f9fa 	bl	8000298 <__aeabi_dsub>
 800dea4:	4602      	mov	r2, r0
 800dea6:	460b      	mov	r3, r1
 800dea8:	4640      	mov	r0, r8
 800deaa:	4649      	mov	r1, r9
 800deac:	e7da      	b.n	800de64 <__kernel_cos+0xec>
 800deae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800dee8 <__kernel_cos+0x170>
 800deb2:	e7db      	b.n	800de6c <__kernel_cos+0xf4>
 800deb4:	f3af 8000 	nop.w
 800deb8:	be8838d4 	.word	0xbe8838d4
 800debc:	bda8fae9 	.word	0xbda8fae9
 800dec0:	bdb4b1c4 	.word	0xbdb4b1c4
 800dec4:	3e21ee9e 	.word	0x3e21ee9e
 800dec8:	809c52ad 	.word	0x809c52ad
 800decc:	3e927e4f 	.word	0x3e927e4f
 800ded0:	19cb1590 	.word	0x19cb1590
 800ded4:	3efa01a0 	.word	0x3efa01a0
 800ded8:	16c15177 	.word	0x16c15177
 800dedc:	3f56c16c 	.word	0x3f56c16c
 800dee0:	5555554c 	.word	0x5555554c
 800dee4:	3fa55555 	.word	0x3fa55555
 800dee8:	00000000 	.word	0x00000000
 800deec:	3ff00000 	.word	0x3ff00000
 800def0:	3fe00000 	.word	0x3fe00000
 800def4:	3fd33332 	.word	0x3fd33332
 800def8:	3ff00000 	.word	0x3ff00000
 800defc:	3fe90000 	.word	0x3fe90000
 800df00:	3fd20000 	.word	0x3fd20000
 800df04:	00000000 	.word	0x00000000

0800df08 <__kernel_sin>:
 800df08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df0c:	ed2d 8b04 	vpush	{d8-d9}
 800df10:	eeb0 8a41 	vmov.f32	s16, s2
 800df14:	eef0 8a61 	vmov.f32	s17, s3
 800df18:	ec55 4b10 	vmov	r4, r5, d0
 800df1c:	b083      	sub	sp, #12
 800df1e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800df22:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800df26:	9001      	str	r0, [sp, #4]
 800df28:	da06      	bge.n	800df38 <__kernel_sin+0x30>
 800df2a:	ee10 0a10 	vmov	r0, s0
 800df2e:	4629      	mov	r1, r5
 800df30:	f7f2 fe1a 	bl	8000b68 <__aeabi_d2iz>
 800df34:	2800      	cmp	r0, #0
 800df36:	d051      	beq.n	800dfdc <__kernel_sin+0xd4>
 800df38:	4622      	mov	r2, r4
 800df3a:	462b      	mov	r3, r5
 800df3c:	4620      	mov	r0, r4
 800df3e:	4629      	mov	r1, r5
 800df40:	f7f2 fb62 	bl	8000608 <__aeabi_dmul>
 800df44:	4682      	mov	sl, r0
 800df46:	468b      	mov	fp, r1
 800df48:	4602      	mov	r2, r0
 800df4a:	460b      	mov	r3, r1
 800df4c:	4620      	mov	r0, r4
 800df4e:	4629      	mov	r1, r5
 800df50:	f7f2 fb5a 	bl	8000608 <__aeabi_dmul>
 800df54:	a341      	add	r3, pc, #260	; (adr r3, 800e05c <__kernel_sin+0x154>)
 800df56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5a:	4680      	mov	r8, r0
 800df5c:	4689      	mov	r9, r1
 800df5e:	4650      	mov	r0, sl
 800df60:	4659      	mov	r1, fp
 800df62:	f7f2 fb51 	bl	8000608 <__aeabi_dmul>
 800df66:	a33f      	add	r3, pc, #252	; (adr r3, 800e064 <__kernel_sin+0x15c>)
 800df68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6c:	f7f2 f994 	bl	8000298 <__aeabi_dsub>
 800df70:	4652      	mov	r2, sl
 800df72:	465b      	mov	r3, fp
 800df74:	f7f2 fb48 	bl	8000608 <__aeabi_dmul>
 800df78:	a33c      	add	r3, pc, #240	; (adr r3, 800e06c <__kernel_sin+0x164>)
 800df7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7e:	f7f2 f98d 	bl	800029c <__adddf3>
 800df82:	4652      	mov	r2, sl
 800df84:	465b      	mov	r3, fp
 800df86:	f7f2 fb3f 	bl	8000608 <__aeabi_dmul>
 800df8a:	a33a      	add	r3, pc, #232	; (adr r3, 800e074 <__kernel_sin+0x16c>)
 800df8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df90:	f7f2 f982 	bl	8000298 <__aeabi_dsub>
 800df94:	4652      	mov	r2, sl
 800df96:	465b      	mov	r3, fp
 800df98:	f7f2 fb36 	bl	8000608 <__aeabi_dmul>
 800df9c:	a337      	add	r3, pc, #220	; (adr r3, 800e07c <__kernel_sin+0x174>)
 800df9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa2:	f7f2 f97b 	bl	800029c <__adddf3>
 800dfa6:	9b01      	ldr	r3, [sp, #4]
 800dfa8:	4606      	mov	r6, r0
 800dfaa:	460f      	mov	r7, r1
 800dfac:	b9eb      	cbnz	r3, 800dfea <__kernel_sin+0xe2>
 800dfae:	4602      	mov	r2, r0
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	4650      	mov	r0, sl
 800dfb4:	4659      	mov	r1, fp
 800dfb6:	f7f2 fb27 	bl	8000608 <__aeabi_dmul>
 800dfba:	a325      	add	r3, pc, #148	; (adr r3, 800e050 <__kernel_sin+0x148>)
 800dfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc0:	f7f2 f96a 	bl	8000298 <__aeabi_dsub>
 800dfc4:	4642      	mov	r2, r8
 800dfc6:	464b      	mov	r3, r9
 800dfc8:	f7f2 fb1e 	bl	8000608 <__aeabi_dmul>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	460b      	mov	r3, r1
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	4629      	mov	r1, r5
 800dfd4:	f7f2 f962 	bl	800029c <__adddf3>
 800dfd8:	4604      	mov	r4, r0
 800dfda:	460d      	mov	r5, r1
 800dfdc:	ec45 4b10 	vmov	d0, r4, r5
 800dfe0:	b003      	add	sp, #12
 800dfe2:	ecbd 8b04 	vpop	{d8-d9}
 800dfe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfea:	4b1b      	ldr	r3, [pc, #108]	; (800e058 <__kernel_sin+0x150>)
 800dfec:	ec51 0b18 	vmov	r0, r1, d8
 800dff0:	2200      	movs	r2, #0
 800dff2:	f7f2 fb09 	bl	8000608 <__aeabi_dmul>
 800dff6:	4632      	mov	r2, r6
 800dff8:	ec41 0b19 	vmov	d9, r0, r1
 800dffc:	463b      	mov	r3, r7
 800dffe:	4640      	mov	r0, r8
 800e000:	4649      	mov	r1, r9
 800e002:	f7f2 fb01 	bl	8000608 <__aeabi_dmul>
 800e006:	4602      	mov	r2, r0
 800e008:	460b      	mov	r3, r1
 800e00a:	ec51 0b19 	vmov	r0, r1, d9
 800e00e:	f7f2 f943 	bl	8000298 <__aeabi_dsub>
 800e012:	4652      	mov	r2, sl
 800e014:	465b      	mov	r3, fp
 800e016:	f7f2 faf7 	bl	8000608 <__aeabi_dmul>
 800e01a:	ec53 2b18 	vmov	r2, r3, d8
 800e01e:	f7f2 f93b 	bl	8000298 <__aeabi_dsub>
 800e022:	a30b      	add	r3, pc, #44	; (adr r3, 800e050 <__kernel_sin+0x148>)
 800e024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e028:	4606      	mov	r6, r0
 800e02a:	460f      	mov	r7, r1
 800e02c:	4640      	mov	r0, r8
 800e02e:	4649      	mov	r1, r9
 800e030:	f7f2 faea 	bl	8000608 <__aeabi_dmul>
 800e034:	4602      	mov	r2, r0
 800e036:	460b      	mov	r3, r1
 800e038:	4630      	mov	r0, r6
 800e03a:	4639      	mov	r1, r7
 800e03c:	f7f2 f92e 	bl	800029c <__adddf3>
 800e040:	4602      	mov	r2, r0
 800e042:	460b      	mov	r3, r1
 800e044:	4620      	mov	r0, r4
 800e046:	4629      	mov	r1, r5
 800e048:	f7f2 f926 	bl	8000298 <__aeabi_dsub>
 800e04c:	e7c4      	b.n	800dfd8 <__kernel_sin+0xd0>
 800e04e:	bf00      	nop
 800e050:	55555549 	.word	0x55555549
 800e054:	3fc55555 	.word	0x3fc55555
 800e058:	3fe00000 	.word	0x3fe00000
 800e05c:	5acfd57c 	.word	0x5acfd57c
 800e060:	3de5d93a 	.word	0x3de5d93a
 800e064:	8a2b9ceb 	.word	0x8a2b9ceb
 800e068:	3e5ae5e6 	.word	0x3e5ae5e6
 800e06c:	57b1fe7d 	.word	0x57b1fe7d
 800e070:	3ec71de3 	.word	0x3ec71de3
 800e074:	19c161d5 	.word	0x19c161d5
 800e078:	3f2a01a0 	.word	0x3f2a01a0
 800e07c:	1110f8a6 	.word	0x1110f8a6
 800e080:	3f811111 	.word	0x3f811111
 800e084:	00000000 	.word	0x00000000

0800e088 <__kernel_tan>:
 800e088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e08c:	ed2d 8b06 	vpush	{d8-d10}
 800e090:	ec5b ab10 	vmov	sl, fp, d0
 800e094:	4be0      	ldr	r3, [pc, #896]	; (800e418 <__kernel_tan+0x390>)
 800e096:	b083      	sub	sp, #12
 800e098:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800e09c:	429f      	cmp	r7, r3
 800e09e:	ec59 8b11 	vmov	r8, r9, d1
 800e0a2:	4606      	mov	r6, r0
 800e0a4:	f8cd b000 	str.w	fp, [sp]
 800e0a8:	dc61      	bgt.n	800e16e <__kernel_tan+0xe6>
 800e0aa:	ee10 0a10 	vmov	r0, s0
 800e0ae:	4659      	mov	r1, fp
 800e0b0:	f7f2 fd5a 	bl	8000b68 <__aeabi_d2iz>
 800e0b4:	4605      	mov	r5, r0
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	f040 8083 	bne.w	800e1c2 <__kernel_tan+0x13a>
 800e0bc:	1c73      	adds	r3, r6, #1
 800e0be:	4652      	mov	r2, sl
 800e0c0:	4313      	orrs	r3, r2
 800e0c2:	433b      	orrs	r3, r7
 800e0c4:	d112      	bne.n	800e0ec <__kernel_tan+0x64>
 800e0c6:	ec4b ab10 	vmov	d0, sl, fp
 800e0ca:	f7ff fd29 	bl	800db20 <fabs>
 800e0ce:	49d3      	ldr	r1, [pc, #844]	; (800e41c <__kernel_tan+0x394>)
 800e0d0:	ec53 2b10 	vmov	r2, r3, d0
 800e0d4:	2000      	movs	r0, #0
 800e0d6:	f7f2 fbc1 	bl	800085c <__aeabi_ddiv>
 800e0da:	4682      	mov	sl, r0
 800e0dc:	468b      	mov	fp, r1
 800e0de:	ec4b ab10 	vmov	d0, sl, fp
 800e0e2:	b003      	add	sp, #12
 800e0e4:	ecbd 8b06 	vpop	{d8-d10}
 800e0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0ec:	2e01      	cmp	r6, #1
 800e0ee:	d0f6      	beq.n	800e0de <__kernel_tan+0x56>
 800e0f0:	4642      	mov	r2, r8
 800e0f2:	464b      	mov	r3, r9
 800e0f4:	4650      	mov	r0, sl
 800e0f6:	4659      	mov	r1, fp
 800e0f8:	f7f2 f8d0 	bl	800029c <__adddf3>
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	460b      	mov	r3, r1
 800e100:	460f      	mov	r7, r1
 800e102:	2000      	movs	r0, #0
 800e104:	49c6      	ldr	r1, [pc, #792]	; (800e420 <__kernel_tan+0x398>)
 800e106:	f7f2 fba9 	bl	800085c <__aeabi_ddiv>
 800e10a:	e9cd 0100 	strd	r0, r1, [sp]
 800e10e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e112:	462e      	mov	r6, r5
 800e114:	4652      	mov	r2, sl
 800e116:	462c      	mov	r4, r5
 800e118:	4630      	mov	r0, r6
 800e11a:	461d      	mov	r5, r3
 800e11c:	4639      	mov	r1, r7
 800e11e:	465b      	mov	r3, fp
 800e120:	f7f2 f8ba 	bl	8000298 <__aeabi_dsub>
 800e124:	4602      	mov	r2, r0
 800e126:	460b      	mov	r3, r1
 800e128:	4640      	mov	r0, r8
 800e12a:	4649      	mov	r1, r9
 800e12c:	f7f2 f8b4 	bl	8000298 <__aeabi_dsub>
 800e130:	4632      	mov	r2, r6
 800e132:	462b      	mov	r3, r5
 800e134:	f7f2 fa68 	bl	8000608 <__aeabi_dmul>
 800e138:	4632      	mov	r2, r6
 800e13a:	4680      	mov	r8, r0
 800e13c:	4689      	mov	r9, r1
 800e13e:	462b      	mov	r3, r5
 800e140:	4630      	mov	r0, r6
 800e142:	4639      	mov	r1, r7
 800e144:	f7f2 fa60 	bl	8000608 <__aeabi_dmul>
 800e148:	4bb4      	ldr	r3, [pc, #720]	; (800e41c <__kernel_tan+0x394>)
 800e14a:	2200      	movs	r2, #0
 800e14c:	f7f2 f8a6 	bl	800029c <__adddf3>
 800e150:	4602      	mov	r2, r0
 800e152:	460b      	mov	r3, r1
 800e154:	4640      	mov	r0, r8
 800e156:	4649      	mov	r1, r9
 800e158:	f7f2 f8a0 	bl	800029c <__adddf3>
 800e15c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e160:	f7f2 fa52 	bl	8000608 <__aeabi_dmul>
 800e164:	4622      	mov	r2, r4
 800e166:	462b      	mov	r3, r5
 800e168:	f7f2 f898 	bl	800029c <__adddf3>
 800e16c:	e7b5      	b.n	800e0da <__kernel_tan+0x52>
 800e16e:	4bad      	ldr	r3, [pc, #692]	; (800e424 <__kernel_tan+0x39c>)
 800e170:	429f      	cmp	r7, r3
 800e172:	dd26      	ble.n	800e1c2 <__kernel_tan+0x13a>
 800e174:	9b00      	ldr	r3, [sp, #0]
 800e176:	2b00      	cmp	r3, #0
 800e178:	da09      	bge.n	800e18e <__kernel_tan+0x106>
 800e17a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e17e:	469b      	mov	fp, r3
 800e180:	ee10 aa10 	vmov	sl, s0
 800e184:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e188:	ee11 8a10 	vmov	r8, s2
 800e18c:	4699      	mov	r9, r3
 800e18e:	4652      	mov	r2, sl
 800e190:	465b      	mov	r3, fp
 800e192:	a183      	add	r1, pc, #524	; (adr r1, 800e3a0 <__kernel_tan+0x318>)
 800e194:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e198:	f7f2 f87e 	bl	8000298 <__aeabi_dsub>
 800e19c:	4642      	mov	r2, r8
 800e19e:	464b      	mov	r3, r9
 800e1a0:	4604      	mov	r4, r0
 800e1a2:	460d      	mov	r5, r1
 800e1a4:	a180      	add	r1, pc, #512	; (adr r1, 800e3a8 <__kernel_tan+0x320>)
 800e1a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1aa:	f7f2 f875 	bl	8000298 <__aeabi_dsub>
 800e1ae:	4622      	mov	r2, r4
 800e1b0:	462b      	mov	r3, r5
 800e1b2:	f7f2 f873 	bl	800029c <__adddf3>
 800e1b6:	f04f 0800 	mov.w	r8, #0
 800e1ba:	4682      	mov	sl, r0
 800e1bc:	468b      	mov	fp, r1
 800e1be:	f04f 0900 	mov.w	r9, #0
 800e1c2:	4652      	mov	r2, sl
 800e1c4:	465b      	mov	r3, fp
 800e1c6:	4650      	mov	r0, sl
 800e1c8:	4659      	mov	r1, fp
 800e1ca:	f7f2 fa1d 	bl	8000608 <__aeabi_dmul>
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	ec43 2b18 	vmov	d8, r2, r3
 800e1d6:	f7f2 fa17 	bl	8000608 <__aeabi_dmul>
 800e1da:	ec53 2b18 	vmov	r2, r3, d8
 800e1de:	4604      	mov	r4, r0
 800e1e0:	460d      	mov	r5, r1
 800e1e2:	4650      	mov	r0, sl
 800e1e4:	4659      	mov	r1, fp
 800e1e6:	f7f2 fa0f 	bl	8000608 <__aeabi_dmul>
 800e1ea:	a371      	add	r3, pc, #452	; (adr r3, 800e3b0 <__kernel_tan+0x328>)
 800e1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f0:	ec41 0b19 	vmov	d9, r0, r1
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	4629      	mov	r1, r5
 800e1f8:	f7f2 fa06 	bl	8000608 <__aeabi_dmul>
 800e1fc:	a36e      	add	r3, pc, #440	; (adr r3, 800e3b8 <__kernel_tan+0x330>)
 800e1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e202:	f7f2 f84b 	bl	800029c <__adddf3>
 800e206:	4622      	mov	r2, r4
 800e208:	462b      	mov	r3, r5
 800e20a:	f7f2 f9fd 	bl	8000608 <__aeabi_dmul>
 800e20e:	a36c      	add	r3, pc, #432	; (adr r3, 800e3c0 <__kernel_tan+0x338>)
 800e210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e214:	f7f2 f842 	bl	800029c <__adddf3>
 800e218:	4622      	mov	r2, r4
 800e21a:	462b      	mov	r3, r5
 800e21c:	f7f2 f9f4 	bl	8000608 <__aeabi_dmul>
 800e220:	a369      	add	r3, pc, #420	; (adr r3, 800e3c8 <__kernel_tan+0x340>)
 800e222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e226:	f7f2 f839 	bl	800029c <__adddf3>
 800e22a:	4622      	mov	r2, r4
 800e22c:	462b      	mov	r3, r5
 800e22e:	f7f2 f9eb 	bl	8000608 <__aeabi_dmul>
 800e232:	a367      	add	r3, pc, #412	; (adr r3, 800e3d0 <__kernel_tan+0x348>)
 800e234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e238:	f7f2 f830 	bl	800029c <__adddf3>
 800e23c:	4622      	mov	r2, r4
 800e23e:	462b      	mov	r3, r5
 800e240:	f7f2 f9e2 	bl	8000608 <__aeabi_dmul>
 800e244:	a364      	add	r3, pc, #400	; (adr r3, 800e3d8 <__kernel_tan+0x350>)
 800e246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24a:	f7f2 f827 	bl	800029c <__adddf3>
 800e24e:	ec53 2b18 	vmov	r2, r3, d8
 800e252:	f7f2 f9d9 	bl	8000608 <__aeabi_dmul>
 800e256:	a362      	add	r3, pc, #392	; (adr r3, 800e3e0 <__kernel_tan+0x358>)
 800e258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25c:	ec41 0b1a 	vmov	d10, r0, r1
 800e260:	4620      	mov	r0, r4
 800e262:	4629      	mov	r1, r5
 800e264:	f7f2 f9d0 	bl	8000608 <__aeabi_dmul>
 800e268:	a35f      	add	r3, pc, #380	; (adr r3, 800e3e8 <__kernel_tan+0x360>)
 800e26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e26e:	f7f2 f815 	bl	800029c <__adddf3>
 800e272:	4622      	mov	r2, r4
 800e274:	462b      	mov	r3, r5
 800e276:	f7f2 f9c7 	bl	8000608 <__aeabi_dmul>
 800e27a:	a35d      	add	r3, pc, #372	; (adr r3, 800e3f0 <__kernel_tan+0x368>)
 800e27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e280:	f7f2 f80c 	bl	800029c <__adddf3>
 800e284:	4622      	mov	r2, r4
 800e286:	462b      	mov	r3, r5
 800e288:	f7f2 f9be 	bl	8000608 <__aeabi_dmul>
 800e28c:	a35a      	add	r3, pc, #360	; (adr r3, 800e3f8 <__kernel_tan+0x370>)
 800e28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e292:	f7f2 f803 	bl	800029c <__adddf3>
 800e296:	4622      	mov	r2, r4
 800e298:	462b      	mov	r3, r5
 800e29a:	f7f2 f9b5 	bl	8000608 <__aeabi_dmul>
 800e29e:	a358      	add	r3, pc, #352	; (adr r3, 800e400 <__kernel_tan+0x378>)
 800e2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a4:	f7f1 fffa 	bl	800029c <__adddf3>
 800e2a8:	4622      	mov	r2, r4
 800e2aa:	462b      	mov	r3, r5
 800e2ac:	f7f2 f9ac 	bl	8000608 <__aeabi_dmul>
 800e2b0:	a355      	add	r3, pc, #340	; (adr r3, 800e408 <__kernel_tan+0x380>)
 800e2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b6:	f7f1 fff1 	bl	800029c <__adddf3>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	460b      	mov	r3, r1
 800e2be:	ec51 0b1a 	vmov	r0, r1, d10
 800e2c2:	f7f1 ffeb 	bl	800029c <__adddf3>
 800e2c6:	ec53 2b19 	vmov	r2, r3, d9
 800e2ca:	f7f2 f99d 	bl	8000608 <__aeabi_dmul>
 800e2ce:	4642      	mov	r2, r8
 800e2d0:	464b      	mov	r3, r9
 800e2d2:	f7f1 ffe3 	bl	800029c <__adddf3>
 800e2d6:	ec53 2b18 	vmov	r2, r3, d8
 800e2da:	f7f2 f995 	bl	8000608 <__aeabi_dmul>
 800e2de:	4642      	mov	r2, r8
 800e2e0:	464b      	mov	r3, r9
 800e2e2:	f7f1 ffdb 	bl	800029c <__adddf3>
 800e2e6:	a34a      	add	r3, pc, #296	; (adr r3, 800e410 <__kernel_tan+0x388>)
 800e2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ec:	4604      	mov	r4, r0
 800e2ee:	460d      	mov	r5, r1
 800e2f0:	ec51 0b19 	vmov	r0, r1, d9
 800e2f4:	f7f2 f988 	bl	8000608 <__aeabi_dmul>
 800e2f8:	4622      	mov	r2, r4
 800e2fa:	462b      	mov	r3, r5
 800e2fc:	f7f1 ffce 	bl	800029c <__adddf3>
 800e300:	460b      	mov	r3, r1
 800e302:	ec41 0b18 	vmov	d8, r0, r1
 800e306:	4602      	mov	r2, r0
 800e308:	4659      	mov	r1, fp
 800e30a:	4650      	mov	r0, sl
 800e30c:	f7f1 ffc6 	bl	800029c <__adddf3>
 800e310:	4b44      	ldr	r3, [pc, #272]	; (800e424 <__kernel_tan+0x39c>)
 800e312:	429f      	cmp	r7, r3
 800e314:	4604      	mov	r4, r0
 800e316:	460d      	mov	r5, r1
 800e318:	f340 8086 	ble.w	800e428 <__kernel_tan+0x3a0>
 800e31c:	4630      	mov	r0, r6
 800e31e:	f7f2 f909 	bl	8000534 <__aeabi_i2d>
 800e322:	4622      	mov	r2, r4
 800e324:	4680      	mov	r8, r0
 800e326:	4689      	mov	r9, r1
 800e328:	462b      	mov	r3, r5
 800e32a:	4620      	mov	r0, r4
 800e32c:	4629      	mov	r1, r5
 800e32e:	f7f2 f96b 	bl	8000608 <__aeabi_dmul>
 800e332:	4642      	mov	r2, r8
 800e334:	4606      	mov	r6, r0
 800e336:	460f      	mov	r7, r1
 800e338:	464b      	mov	r3, r9
 800e33a:	4620      	mov	r0, r4
 800e33c:	4629      	mov	r1, r5
 800e33e:	f7f1 ffad 	bl	800029c <__adddf3>
 800e342:	4602      	mov	r2, r0
 800e344:	460b      	mov	r3, r1
 800e346:	4630      	mov	r0, r6
 800e348:	4639      	mov	r1, r7
 800e34a:	f7f2 fa87 	bl	800085c <__aeabi_ddiv>
 800e34e:	ec53 2b18 	vmov	r2, r3, d8
 800e352:	f7f1 ffa1 	bl	8000298 <__aeabi_dsub>
 800e356:	4602      	mov	r2, r0
 800e358:	460b      	mov	r3, r1
 800e35a:	4650      	mov	r0, sl
 800e35c:	4659      	mov	r1, fp
 800e35e:	f7f1 ff9b 	bl	8000298 <__aeabi_dsub>
 800e362:	4602      	mov	r2, r0
 800e364:	460b      	mov	r3, r1
 800e366:	f7f1 ff99 	bl	800029c <__adddf3>
 800e36a:	4602      	mov	r2, r0
 800e36c:	460b      	mov	r3, r1
 800e36e:	4640      	mov	r0, r8
 800e370:	4649      	mov	r1, r9
 800e372:	f7f1 ff91 	bl	8000298 <__aeabi_dsub>
 800e376:	9b00      	ldr	r3, [sp, #0]
 800e378:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800e37c:	f00a 0a02 	and.w	sl, sl, #2
 800e380:	4604      	mov	r4, r0
 800e382:	f1ca 0001 	rsb	r0, sl, #1
 800e386:	460d      	mov	r5, r1
 800e388:	f7f2 f8d4 	bl	8000534 <__aeabi_i2d>
 800e38c:	4602      	mov	r2, r0
 800e38e:	460b      	mov	r3, r1
 800e390:	4620      	mov	r0, r4
 800e392:	4629      	mov	r1, r5
 800e394:	f7f2 f938 	bl	8000608 <__aeabi_dmul>
 800e398:	e69f      	b.n	800e0da <__kernel_tan+0x52>
 800e39a:	bf00      	nop
 800e39c:	f3af 8000 	nop.w
 800e3a0:	54442d18 	.word	0x54442d18
 800e3a4:	3fe921fb 	.word	0x3fe921fb
 800e3a8:	33145c07 	.word	0x33145c07
 800e3ac:	3c81a626 	.word	0x3c81a626
 800e3b0:	74bf7ad4 	.word	0x74bf7ad4
 800e3b4:	3efb2a70 	.word	0x3efb2a70
 800e3b8:	32f0a7e9 	.word	0x32f0a7e9
 800e3bc:	3f12b80f 	.word	0x3f12b80f
 800e3c0:	1a8d1068 	.word	0x1a8d1068
 800e3c4:	3f3026f7 	.word	0x3f3026f7
 800e3c8:	fee08315 	.word	0xfee08315
 800e3cc:	3f57dbc8 	.word	0x3f57dbc8
 800e3d0:	e96e8493 	.word	0xe96e8493
 800e3d4:	3f8226e3 	.word	0x3f8226e3
 800e3d8:	1bb341fe 	.word	0x1bb341fe
 800e3dc:	3faba1ba 	.word	0x3faba1ba
 800e3e0:	db605373 	.word	0xdb605373
 800e3e4:	bef375cb 	.word	0xbef375cb
 800e3e8:	a03792a6 	.word	0xa03792a6
 800e3ec:	3f147e88 	.word	0x3f147e88
 800e3f0:	f2f26501 	.word	0xf2f26501
 800e3f4:	3f4344d8 	.word	0x3f4344d8
 800e3f8:	c9560328 	.word	0xc9560328
 800e3fc:	3f6d6d22 	.word	0x3f6d6d22
 800e400:	8406d637 	.word	0x8406d637
 800e404:	3f9664f4 	.word	0x3f9664f4
 800e408:	1110fe7a 	.word	0x1110fe7a
 800e40c:	3fc11111 	.word	0x3fc11111
 800e410:	55555563 	.word	0x55555563
 800e414:	3fd55555 	.word	0x3fd55555
 800e418:	3e2fffff 	.word	0x3e2fffff
 800e41c:	3ff00000 	.word	0x3ff00000
 800e420:	bff00000 	.word	0xbff00000
 800e424:	3fe59427 	.word	0x3fe59427
 800e428:	2e01      	cmp	r6, #1
 800e42a:	d02f      	beq.n	800e48c <__kernel_tan+0x404>
 800e42c:	460f      	mov	r7, r1
 800e42e:	4602      	mov	r2, r0
 800e430:	460b      	mov	r3, r1
 800e432:	4689      	mov	r9, r1
 800e434:	2000      	movs	r0, #0
 800e436:	4917      	ldr	r1, [pc, #92]	; (800e494 <__kernel_tan+0x40c>)
 800e438:	f7f2 fa10 	bl	800085c <__aeabi_ddiv>
 800e43c:	2600      	movs	r6, #0
 800e43e:	e9cd 0100 	strd	r0, r1, [sp]
 800e442:	4652      	mov	r2, sl
 800e444:	465b      	mov	r3, fp
 800e446:	4630      	mov	r0, r6
 800e448:	4639      	mov	r1, r7
 800e44a:	f7f1 ff25 	bl	8000298 <__aeabi_dsub>
 800e44e:	e9dd 4500 	ldrd	r4, r5, [sp]
 800e452:	4602      	mov	r2, r0
 800e454:	460b      	mov	r3, r1
 800e456:	ec51 0b18 	vmov	r0, r1, d8
 800e45a:	f7f1 ff1d 	bl	8000298 <__aeabi_dsub>
 800e45e:	4632      	mov	r2, r6
 800e460:	462b      	mov	r3, r5
 800e462:	f7f2 f8d1 	bl	8000608 <__aeabi_dmul>
 800e466:	46b0      	mov	r8, r6
 800e468:	460f      	mov	r7, r1
 800e46a:	4642      	mov	r2, r8
 800e46c:	462b      	mov	r3, r5
 800e46e:	4634      	mov	r4, r6
 800e470:	4649      	mov	r1, r9
 800e472:	4606      	mov	r6, r0
 800e474:	4640      	mov	r0, r8
 800e476:	f7f2 f8c7 	bl	8000608 <__aeabi_dmul>
 800e47a:	4b07      	ldr	r3, [pc, #28]	; (800e498 <__kernel_tan+0x410>)
 800e47c:	2200      	movs	r2, #0
 800e47e:	f7f1 ff0d 	bl	800029c <__adddf3>
 800e482:	4602      	mov	r2, r0
 800e484:	460b      	mov	r3, r1
 800e486:	4630      	mov	r0, r6
 800e488:	4639      	mov	r1, r7
 800e48a:	e665      	b.n	800e158 <__kernel_tan+0xd0>
 800e48c:	4682      	mov	sl, r0
 800e48e:	468b      	mov	fp, r1
 800e490:	e625      	b.n	800e0de <__kernel_tan+0x56>
 800e492:	bf00      	nop
 800e494:	bff00000 	.word	0xbff00000
 800e498:	3ff00000 	.word	0x3ff00000
 800e49c:	00000000 	.word	0x00000000

0800e4a0 <__ieee754_asin>:
 800e4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a4:	ed2d 8b04 	vpush	{d8-d9}
 800e4a8:	ec55 4b10 	vmov	r4, r5, d0
 800e4ac:	4bcc      	ldr	r3, [pc, #816]	; (800e7e0 <__ieee754_asin+0x340>)
 800e4ae:	b083      	sub	sp, #12
 800e4b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e4b4:	4598      	cmp	r8, r3
 800e4b6:	9501      	str	r5, [sp, #4]
 800e4b8:	dd33      	ble.n	800e522 <__ieee754_asin+0x82>
 800e4ba:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800e4be:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800e4c2:	ea58 0804 	orrs.w	r8, r8, r4
 800e4c6:	d117      	bne.n	800e4f8 <__ieee754_asin+0x58>
 800e4c8:	a3ab      	add	r3, pc, #684	; (adr r3, 800e778 <__ieee754_asin+0x2d8>)
 800e4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ce:	ee10 0a10 	vmov	r0, s0
 800e4d2:	4629      	mov	r1, r5
 800e4d4:	f7f2 f898 	bl	8000608 <__aeabi_dmul>
 800e4d8:	a3a9      	add	r3, pc, #676	; (adr r3, 800e780 <__ieee754_asin+0x2e0>)
 800e4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4de:	4606      	mov	r6, r0
 800e4e0:	460f      	mov	r7, r1
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	4629      	mov	r1, r5
 800e4e6:	f7f2 f88f 	bl	8000608 <__aeabi_dmul>
 800e4ea:	4602      	mov	r2, r0
 800e4ec:	460b      	mov	r3, r1
 800e4ee:	4630      	mov	r0, r6
 800e4f0:	4639      	mov	r1, r7
 800e4f2:	f7f1 fed3 	bl	800029c <__adddf3>
 800e4f6:	e00b      	b.n	800e510 <__ieee754_asin+0x70>
 800e4f8:	ee10 2a10 	vmov	r2, s0
 800e4fc:	462b      	mov	r3, r5
 800e4fe:	ee10 0a10 	vmov	r0, s0
 800e502:	4629      	mov	r1, r5
 800e504:	f7f1 fec8 	bl	8000298 <__aeabi_dsub>
 800e508:	4602      	mov	r2, r0
 800e50a:	460b      	mov	r3, r1
 800e50c:	f7f2 f9a6 	bl	800085c <__aeabi_ddiv>
 800e510:	4604      	mov	r4, r0
 800e512:	460d      	mov	r5, r1
 800e514:	ec45 4b10 	vmov	d0, r4, r5
 800e518:	b003      	add	sp, #12
 800e51a:	ecbd 8b04 	vpop	{d8-d9}
 800e51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e522:	4bb0      	ldr	r3, [pc, #704]	; (800e7e4 <__ieee754_asin+0x344>)
 800e524:	4598      	cmp	r8, r3
 800e526:	dc11      	bgt.n	800e54c <__ieee754_asin+0xac>
 800e528:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e52c:	f280 80ae 	bge.w	800e68c <__ieee754_asin+0x1ec>
 800e530:	a395      	add	r3, pc, #596	; (adr r3, 800e788 <__ieee754_asin+0x2e8>)
 800e532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e536:	ee10 0a10 	vmov	r0, s0
 800e53a:	4629      	mov	r1, r5
 800e53c:	f7f1 feae 	bl	800029c <__adddf3>
 800e540:	4ba9      	ldr	r3, [pc, #676]	; (800e7e8 <__ieee754_asin+0x348>)
 800e542:	2200      	movs	r2, #0
 800e544:	f7f2 faf0 	bl	8000b28 <__aeabi_dcmpgt>
 800e548:	2800      	cmp	r0, #0
 800e54a:	d1e3      	bne.n	800e514 <__ieee754_asin+0x74>
 800e54c:	ec45 4b10 	vmov	d0, r4, r5
 800e550:	f7ff fae6 	bl	800db20 <fabs>
 800e554:	49a4      	ldr	r1, [pc, #656]	; (800e7e8 <__ieee754_asin+0x348>)
 800e556:	ec53 2b10 	vmov	r2, r3, d0
 800e55a:	2000      	movs	r0, #0
 800e55c:	f7f1 fe9c 	bl	8000298 <__aeabi_dsub>
 800e560:	4ba2      	ldr	r3, [pc, #648]	; (800e7ec <__ieee754_asin+0x34c>)
 800e562:	2200      	movs	r2, #0
 800e564:	f7f2 f850 	bl	8000608 <__aeabi_dmul>
 800e568:	a389      	add	r3, pc, #548	; (adr r3, 800e790 <__ieee754_asin+0x2f0>)
 800e56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56e:	4604      	mov	r4, r0
 800e570:	460d      	mov	r5, r1
 800e572:	f7f2 f849 	bl	8000608 <__aeabi_dmul>
 800e576:	a388      	add	r3, pc, #544	; (adr r3, 800e798 <__ieee754_asin+0x2f8>)
 800e578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57c:	f7f1 fe8e 	bl	800029c <__adddf3>
 800e580:	4622      	mov	r2, r4
 800e582:	462b      	mov	r3, r5
 800e584:	f7f2 f840 	bl	8000608 <__aeabi_dmul>
 800e588:	a385      	add	r3, pc, #532	; (adr r3, 800e7a0 <__ieee754_asin+0x300>)
 800e58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58e:	f7f1 fe83 	bl	8000298 <__aeabi_dsub>
 800e592:	4622      	mov	r2, r4
 800e594:	462b      	mov	r3, r5
 800e596:	f7f2 f837 	bl	8000608 <__aeabi_dmul>
 800e59a:	a383      	add	r3, pc, #524	; (adr r3, 800e7a8 <__ieee754_asin+0x308>)
 800e59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a0:	f7f1 fe7c 	bl	800029c <__adddf3>
 800e5a4:	4622      	mov	r2, r4
 800e5a6:	462b      	mov	r3, r5
 800e5a8:	f7f2 f82e 	bl	8000608 <__aeabi_dmul>
 800e5ac:	a380      	add	r3, pc, #512	; (adr r3, 800e7b0 <__ieee754_asin+0x310>)
 800e5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b2:	f7f1 fe71 	bl	8000298 <__aeabi_dsub>
 800e5b6:	4622      	mov	r2, r4
 800e5b8:	462b      	mov	r3, r5
 800e5ba:	f7f2 f825 	bl	8000608 <__aeabi_dmul>
 800e5be:	a37e      	add	r3, pc, #504	; (adr r3, 800e7b8 <__ieee754_asin+0x318>)
 800e5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c4:	f7f1 fe6a 	bl	800029c <__adddf3>
 800e5c8:	4622      	mov	r2, r4
 800e5ca:	462b      	mov	r3, r5
 800e5cc:	f7f2 f81c 	bl	8000608 <__aeabi_dmul>
 800e5d0:	a37b      	add	r3, pc, #492	; (adr r3, 800e7c0 <__ieee754_asin+0x320>)
 800e5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d6:	ec41 0b18 	vmov	d8, r0, r1
 800e5da:	4620      	mov	r0, r4
 800e5dc:	4629      	mov	r1, r5
 800e5de:	f7f2 f813 	bl	8000608 <__aeabi_dmul>
 800e5e2:	a379      	add	r3, pc, #484	; (adr r3, 800e7c8 <__ieee754_asin+0x328>)
 800e5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e8:	f7f1 fe56 	bl	8000298 <__aeabi_dsub>
 800e5ec:	4622      	mov	r2, r4
 800e5ee:	462b      	mov	r3, r5
 800e5f0:	f7f2 f80a 	bl	8000608 <__aeabi_dmul>
 800e5f4:	a376      	add	r3, pc, #472	; (adr r3, 800e7d0 <__ieee754_asin+0x330>)
 800e5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5fa:	f7f1 fe4f 	bl	800029c <__adddf3>
 800e5fe:	4622      	mov	r2, r4
 800e600:	462b      	mov	r3, r5
 800e602:	f7f2 f801 	bl	8000608 <__aeabi_dmul>
 800e606:	a374      	add	r3, pc, #464	; (adr r3, 800e7d8 <__ieee754_asin+0x338>)
 800e608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e60c:	f7f1 fe44 	bl	8000298 <__aeabi_dsub>
 800e610:	4622      	mov	r2, r4
 800e612:	462b      	mov	r3, r5
 800e614:	f7f1 fff8 	bl	8000608 <__aeabi_dmul>
 800e618:	4b73      	ldr	r3, [pc, #460]	; (800e7e8 <__ieee754_asin+0x348>)
 800e61a:	2200      	movs	r2, #0
 800e61c:	f7f1 fe3e 	bl	800029c <__adddf3>
 800e620:	ec45 4b10 	vmov	d0, r4, r5
 800e624:	4606      	mov	r6, r0
 800e626:	460f      	mov	r7, r1
 800e628:	f001 f9f8 	bl	800fa1c <__ieee754_sqrt>
 800e62c:	4b70      	ldr	r3, [pc, #448]	; (800e7f0 <__ieee754_asin+0x350>)
 800e62e:	4598      	cmp	r8, r3
 800e630:	ec5b ab10 	vmov	sl, fp, d0
 800e634:	f340 80de 	ble.w	800e7f4 <__ieee754_asin+0x354>
 800e638:	4632      	mov	r2, r6
 800e63a:	463b      	mov	r3, r7
 800e63c:	ec51 0b18 	vmov	r0, r1, d8
 800e640:	f7f2 f90c 	bl	800085c <__aeabi_ddiv>
 800e644:	4652      	mov	r2, sl
 800e646:	465b      	mov	r3, fp
 800e648:	f7f1 ffde 	bl	8000608 <__aeabi_dmul>
 800e64c:	4652      	mov	r2, sl
 800e64e:	465b      	mov	r3, fp
 800e650:	f7f1 fe24 	bl	800029c <__adddf3>
 800e654:	4602      	mov	r2, r0
 800e656:	460b      	mov	r3, r1
 800e658:	f7f1 fe20 	bl	800029c <__adddf3>
 800e65c:	a348      	add	r3, pc, #288	; (adr r3, 800e780 <__ieee754_asin+0x2e0>)
 800e65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e662:	f7f1 fe19 	bl	8000298 <__aeabi_dsub>
 800e666:	4602      	mov	r2, r0
 800e668:	460b      	mov	r3, r1
 800e66a:	a143      	add	r1, pc, #268	; (adr r1, 800e778 <__ieee754_asin+0x2d8>)
 800e66c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e670:	f7f1 fe12 	bl	8000298 <__aeabi_dsub>
 800e674:	9b01      	ldr	r3, [sp, #4]
 800e676:	2b00      	cmp	r3, #0
 800e678:	bfdc      	itt	le
 800e67a:	4602      	movle	r2, r0
 800e67c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800e680:	4604      	mov	r4, r0
 800e682:	460d      	mov	r5, r1
 800e684:	bfdc      	itt	le
 800e686:	4614      	movle	r4, r2
 800e688:	461d      	movle	r5, r3
 800e68a:	e743      	b.n	800e514 <__ieee754_asin+0x74>
 800e68c:	ee10 2a10 	vmov	r2, s0
 800e690:	ee10 0a10 	vmov	r0, s0
 800e694:	462b      	mov	r3, r5
 800e696:	4629      	mov	r1, r5
 800e698:	f7f1 ffb6 	bl	8000608 <__aeabi_dmul>
 800e69c:	a33c      	add	r3, pc, #240	; (adr r3, 800e790 <__ieee754_asin+0x2f0>)
 800e69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a2:	4606      	mov	r6, r0
 800e6a4:	460f      	mov	r7, r1
 800e6a6:	f7f1 ffaf 	bl	8000608 <__aeabi_dmul>
 800e6aa:	a33b      	add	r3, pc, #236	; (adr r3, 800e798 <__ieee754_asin+0x2f8>)
 800e6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b0:	f7f1 fdf4 	bl	800029c <__adddf3>
 800e6b4:	4632      	mov	r2, r6
 800e6b6:	463b      	mov	r3, r7
 800e6b8:	f7f1 ffa6 	bl	8000608 <__aeabi_dmul>
 800e6bc:	a338      	add	r3, pc, #224	; (adr r3, 800e7a0 <__ieee754_asin+0x300>)
 800e6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c2:	f7f1 fde9 	bl	8000298 <__aeabi_dsub>
 800e6c6:	4632      	mov	r2, r6
 800e6c8:	463b      	mov	r3, r7
 800e6ca:	f7f1 ff9d 	bl	8000608 <__aeabi_dmul>
 800e6ce:	a336      	add	r3, pc, #216	; (adr r3, 800e7a8 <__ieee754_asin+0x308>)
 800e6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d4:	f7f1 fde2 	bl	800029c <__adddf3>
 800e6d8:	4632      	mov	r2, r6
 800e6da:	463b      	mov	r3, r7
 800e6dc:	f7f1 ff94 	bl	8000608 <__aeabi_dmul>
 800e6e0:	a333      	add	r3, pc, #204	; (adr r3, 800e7b0 <__ieee754_asin+0x310>)
 800e6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e6:	f7f1 fdd7 	bl	8000298 <__aeabi_dsub>
 800e6ea:	4632      	mov	r2, r6
 800e6ec:	463b      	mov	r3, r7
 800e6ee:	f7f1 ff8b 	bl	8000608 <__aeabi_dmul>
 800e6f2:	a331      	add	r3, pc, #196	; (adr r3, 800e7b8 <__ieee754_asin+0x318>)
 800e6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f8:	f7f1 fdd0 	bl	800029c <__adddf3>
 800e6fc:	4632      	mov	r2, r6
 800e6fe:	463b      	mov	r3, r7
 800e700:	f7f1 ff82 	bl	8000608 <__aeabi_dmul>
 800e704:	a32e      	add	r3, pc, #184	; (adr r3, 800e7c0 <__ieee754_asin+0x320>)
 800e706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70a:	4680      	mov	r8, r0
 800e70c:	4689      	mov	r9, r1
 800e70e:	4630      	mov	r0, r6
 800e710:	4639      	mov	r1, r7
 800e712:	f7f1 ff79 	bl	8000608 <__aeabi_dmul>
 800e716:	a32c      	add	r3, pc, #176	; (adr r3, 800e7c8 <__ieee754_asin+0x328>)
 800e718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e71c:	f7f1 fdbc 	bl	8000298 <__aeabi_dsub>
 800e720:	4632      	mov	r2, r6
 800e722:	463b      	mov	r3, r7
 800e724:	f7f1 ff70 	bl	8000608 <__aeabi_dmul>
 800e728:	a329      	add	r3, pc, #164	; (adr r3, 800e7d0 <__ieee754_asin+0x330>)
 800e72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e72e:	f7f1 fdb5 	bl	800029c <__adddf3>
 800e732:	4632      	mov	r2, r6
 800e734:	463b      	mov	r3, r7
 800e736:	f7f1 ff67 	bl	8000608 <__aeabi_dmul>
 800e73a:	a327      	add	r3, pc, #156	; (adr r3, 800e7d8 <__ieee754_asin+0x338>)
 800e73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e740:	f7f1 fdaa 	bl	8000298 <__aeabi_dsub>
 800e744:	4632      	mov	r2, r6
 800e746:	463b      	mov	r3, r7
 800e748:	f7f1 ff5e 	bl	8000608 <__aeabi_dmul>
 800e74c:	4b26      	ldr	r3, [pc, #152]	; (800e7e8 <__ieee754_asin+0x348>)
 800e74e:	2200      	movs	r2, #0
 800e750:	f7f1 fda4 	bl	800029c <__adddf3>
 800e754:	4602      	mov	r2, r0
 800e756:	460b      	mov	r3, r1
 800e758:	4640      	mov	r0, r8
 800e75a:	4649      	mov	r1, r9
 800e75c:	f7f2 f87e 	bl	800085c <__aeabi_ddiv>
 800e760:	4622      	mov	r2, r4
 800e762:	462b      	mov	r3, r5
 800e764:	f7f1 ff50 	bl	8000608 <__aeabi_dmul>
 800e768:	4602      	mov	r2, r0
 800e76a:	460b      	mov	r3, r1
 800e76c:	4620      	mov	r0, r4
 800e76e:	4629      	mov	r1, r5
 800e770:	e6bf      	b.n	800e4f2 <__ieee754_asin+0x52>
 800e772:	bf00      	nop
 800e774:	f3af 8000 	nop.w
 800e778:	54442d18 	.word	0x54442d18
 800e77c:	3ff921fb 	.word	0x3ff921fb
 800e780:	33145c07 	.word	0x33145c07
 800e784:	3c91a626 	.word	0x3c91a626
 800e788:	8800759c 	.word	0x8800759c
 800e78c:	7e37e43c 	.word	0x7e37e43c
 800e790:	0dfdf709 	.word	0x0dfdf709
 800e794:	3f023de1 	.word	0x3f023de1
 800e798:	7501b288 	.word	0x7501b288
 800e79c:	3f49efe0 	.word	0x3f49efe0
 800e7a0:	b5688f3b 	.word	0xb5688f3b
 800e7a4:	3fa48228 	.word	0x3fa48228
 800e7a8:	0e884455 	.word	0x0e884455
 800e7ac:	3fc9c155 	.word	0x3fc9c155
 800e7b0:	03eb6f7d 	.word	0x03eb6f7d
 800e7b4:	3fd4d612 	.word	0x3fd4d612
 800e7b8:	55555555 	.word	0x55555555
 800e7bc:	3fc55555 	.word	0x3fc55555
 800e7c0:	b12e9282 	.word	0xb12e9282
 800e7c4:	3fb3b8c5 	.word	0x3fb3b8c5
 800e7c8:	1b8d0159 	.word	0x1b8d0159
 800e7cc:	3fe6066c 	.word	0x3fe6066c
 800e7d0:	9c598ac8 	.word	0x9c598ac8
 800e7d4:	40002ae5 	.word	0x40002ae5
 800e7d8:	1c8a2d4b 	.word	0x1c8a2d4b
 800e7dc:	40033a27 	.word	0x40033a27
 800e7e0:	3fefffff 	.word	0x3fefffff
 800e7e4:	3fdfffff 	.word	0x3fdfffff
 800e7e8:	3ff00000 	.word	0x3ff00000
 800e7ec:	3fe00000 	.word	0x3fe00000
 800e7f0:	3fef3332 	.word	0x3fef3332
 800e7f4:	ee10 2a10 	vmov	r2, s0
 800e7f8:	ee10 0a10 	vmov	r0, s0
 800e7fc:	465b      	mov	r3, fp
 800e7fe:	4659      	mov	r1, fp
 800e800:	f7f1 fd4c 	bl	800029c <__adddf3>
 800e804:	4632      	mov	r2, r6
 800e806:	463b      	mov	r3, r7
 800e808:	ec41 0b19 	vmov	d9, r0, r1
 800e80c:	ec51 0b18 	vmov	r0, r1, d8
 800e810:	f7f2 f824 	bl	800085c <__aeabi_ddiv>
 800e814:	4602      	mov	r2, r0
 800e816:	460b      	mov	r3, r1
 800e818:	ec51 0b19 	vmov	r0, r1, d9
 800e81c:	f7f1 fef4 	bl	8000608 <__aeabi_dmul>
 800e820:	f04f 0800 	mov.w	r8, #0
 800e824:	4606      	mov	r6, r0
 800e826:	460f      	mov	r7, r1
 800e828:	4642      	mov	r2, r8
 800e82a:	465b      	mov	r3, fp
 800e82c:	4640      	mov	r0, r8
 800e82e:	4659      	mov	r1, fp
 800e830:	f7f1 feea 	bl	8000608 <__aeabi_dmul>
 800e834:	4602      	mov	r2, r0
 800e836:	460b      	mov	r3, r1
 800e838:	4620      	mov	r0, r4
 800e83a:	4629      	mov	r1, r5
 800e83c:	f7f1 fd2c 	bl	8000298 <__aeabi_dsub>
 800e840:	4642      	mov	r2, r8
 800e842:	4604      	mov	r4, r0
 800e844:	460d      	mov	r5, r1
 800e846:	465b      	mov	r3, fp
 800e848:	4650      	mov	r0, sl
 800e84a:	4659      	mov	r1, fp
 800e84c:	f7f1 fd26 	bl	800029c <__adddf3>
 800e850:	4602      	mov	r2, r0
 800e852:	460b      	mov	r3, r1
 800e854:	4620      	mov	r0, r4
 800e856:	4629      	mov	r1, r5
 800e858:	f7f2 f800 	bl	800085c <__aeabi_ddiv>
 800e85c:	4602      	mov	r2, r0
 800e85e:	460b      	mov	r3, r1
 800e860:	f7f1 fd1c 	bl	800029c <__adddf3>
 800e864:	4602      	mov	r2, r0
 800e866:	460b      	mov	r3, r1
 800e868:	a113      	add	r1, pc, #76	; (adr r1, 800e8b8 <__ieee754_asin+0x418>)
 800e86a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e86e:	f7f1 fd13 	bl	8000298 <__aeabi_dsub>
 800e872:	4602      	mov	r2, r0
 800e874:	460b      	mov	r3, r1
 800e876:	4630      	mov	r0, r6
 800e878:	4639      	mov	r1, r7
 800e87a:	f7f1 fd0d 	bl	8000298 <__aeabi_dsub>
 800e87e:	4642      	mov	r2, r8
 800e880:	4604      	mov	r4, r0
 800e882:	460d      	mov	r5, r1
 800e884:	465b      	mov	r3, fp
 800e886:	4640      	mov	r0, r8
 800e888:	4659      	mov	r1, fp
 800e88a:	f7f1 fd07 	bl	800029c <__adddf3>
 800e88e:	4602      	mov	r2, r0
 800e890:	460b      	mov	r3, r1
 800e892:	a10b      	add	r1, pc, #44	; (adr r1, 800e8c0 <__ieee754_asin+0x420>)
 800e894:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e898:	f7f1 fcfe 	bl	8000298 <__aeabi_dsub>
 800e89c:	4602      	mov	r2, r0
 800e89e:	460b      	mov	r3, r1
 800e8a0:	4620      	mov	r0, r4
 800e8a2:	4629      	mov	r1, r5
 800e8a4:	f7f1 fcf8 	bl	8000298 <__aeabi_dsub>
 800e8a8:	4602      	mov	r2, r0
 800e8aa:	460b      	mov	r3, r1
 800e8ac:	a104      	add	r1, pc, #16	; (adr r1, 800e8c0 <__ieee754_asin+0x420>)
 800e8ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8b2:	e6dd      	b.n	800e670 <__ieee754_asin+0x1d0>
 800e8b4:	f3af 8000 	nop.w
 800e8b8:	33145c07 	.word	0x33145c07
 800e8bc:	3c91a626 	.word	0x3c91a626
 800e8c0:	54442d18 	.word	0x54442d18
 800e8c4:	3fe921fb 	.word	0x3fe921fb

0800e8c8 <__ieee754_atan2>:
 800e8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8cc:	ec57 6b11 	vmov	r6, r7, d1
 800e8d0:	4273      	negs	r3, r6
 800e8d2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800ea50 <__ieee754_atan2+0x188>
 800e8d6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e8da:	4333      	orrs	r3, r6
 800e8dc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e8e0:	4543      	cmp	r3, r8
 800e8e2:	ec51 0b10 	vmov	r0, r1, d0
 800e8e6:	ee11 5a10 	vmov	r5, s2
 800e8ea:	d80a      	bhi.n	800e902 <__ieee754_atan2+0x3a>
 800e8ec:	4244      	negs	r4, r0
 800e8ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e8f2:	4304      	orrs	r4, r0
 800e8f4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e8f8:	4544      	cmp	r4, r8
 800e8fa:	ee10 9a10 	vmov	r9, s0
 800e8fe:	468e      	mov	lr, r1
 800e900:	d907      	bls.n	800e912 <__ieee754_atan2+0x4a>
 800e902:	4632      	mov	r2, r6
 800e904:	463b      	mov	r3, r7
 800e906:	f7f1 fcc9 	bl	800029c <__adddf3>
 800e90a:	ec41 0b10 	vmov	d0, r0, r1
 800e90e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e912:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e916:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e91a:	4334      	orrs	r4, r6
 800e91c:	d103      	bne.n	800e926 <__ieee754_atan2+0x5e>
 800e91e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e922:	f7fe bf09 	b.w	800d738 <atan>
 800e926:	17bc      	asrs	r4, r7, #30
 800e928:	f004 0402 	and.w	r4, r4, #2
 800e92c:	ea53 0909 	orrs.w	r9, r3, r9
 800e930:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e934:	d107      	bne.n	800e946 <__ieee754_atan2+0x7e>
 800e936:	2c02      	cmp	r4, #2
 800e938:	d05f      	beq.n	800e9fa <__ieee754_atan2+0x132>
 800e93a:	2c03      	cmp	r4, #3
 800e93c:	d1e5      	bne.n	800e90a <__ieee754_atan2+0x42>
 800e93e:	a140      	add	r1, pc, #256	; (adr r1, 800ea40 <__ieee754_atan2+0x178>)
 800e940:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e944:	e7e1      	b.n	800e90a <__ieee754_atan2+0x42>
 800e946:	4315      	orrs	r5, r2
 800e948:	d106      	bne.n	800e958 <__ieee754_atan2+0x90>
 800e94a:	f1be 0f00 	cmp.w	lr, #0
 800e94e:	da5f      	bge.n	800ea10 <__ieee754_atan2+0x148>
 800e950:	a13d      	add	r1, pc, #244	; (adr r1, 800ea48 <__ieee754_atan2+0x180>)
 800e952:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e956:	e7d8      	b.n	800e90a <__ieee754_atan2+0x42>
 800e958:	4542      	cmp	r2, r8
 800e95a:	d10f      	bne.n	800e97c <__ieee754_atan2+0xb4>
 800e95c:	4293      	cmp	r3, r2
 800e95e:	f104 34ff 	add.w	r4, r4, #4294967295
 800e962:	d107      	bne.n	800e974 <__ieee754_atan2+0xac>
 800e964:	2c02      	cmp	r4, #2
 800e966:	d84c      	bhi.n	800ea02 <__ieee754_atan2+0x13a>
 800e968:	4b33      	ldr	r3, [pc, #204]	; (800ea38 <__ieee754_atan2+0x170>)
 800e96a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e96e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e972:	e7ca      	b.n	800e90a <__ieee754_atan2+0x42>
 800e974:	2c02      	cmp	r4, #2
 800e976:	d848      	bhi.n	800ea0a <__ieee754_atan2+0x142>
 800e978:	4b30      	ldr	r3, [pc, #192]	; (800ea3c <__ieee754_atan2+0x174>)
 800e97a:	e7f6      	b.n	800e96a <__ieee754_atan2+0xa2>
 800e97c:	4543      	cmp	r3, r8
 800e97e:	d0e4      	beq.n	800e94a <__ieee754_atan2+0x82>
 800e980:	1a9b      	subs	r3, r3, r2
 800e982:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e986:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e98a:	da1e      	bge.n	800e9ca <__ieee754_atan2+0x102>
 800e98c:	2f00      	cmp	r7, #0
 800e98e:	da01      	bge.n	800e994 <__ieee754_atan2+0xcc>
 800e990:	323c      	adds	r2, #60	; 0x3c
 800e992:	db1e      	blt.n	800e9d2 <__ieee754_atan2+0x10a>
 800e994:	4632      	mov	r2, r6
 800e996:	463b      	mov	r3, r7
 800e998:	f7f1 ff60 	bl	800085c <__aeabi_ddiv>
 800e99c:	ec41 0b10 	vmov	d0, r0, r1
 800e9a0:	f7ff f8be 	bl	800db20 <fabs>
 800e9a4:	f7fe fec8 	bl	800d738 <atan>
 800e9a8:	ec51 0b10 	vmov	r0, r1, d0
 800e9ac:	2c01      	cmp	r4, #1
 800e9ae:	d013      	beq.n	800e9d8 <__ieee754_atan2+0x110>
 800e9b0:	2c02      	cmp	r4, #2
 800e9b2:	d015      	beq.n	800e9e0 <__ieee754_atan2+0x118>
 800e9b4:	2c00      	cmp	r4, #0
 800e9b6:	d0a8      	beq.n	800e90a <__ieee754_atan2+0x42>
 800e9b8:	a317      	add	r3, pc, #92	; (adr r3, 800ea18 <__ieee754_atan2+0x150>)
 800e9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9be:	f7f1 fc6b 	bl	8000298 <__aeabi_dsub>
 800e9c2:	a317      	add	r3, pc, #92	; (adr r3, 800ea20 <__ieee754_atan2+0x158>)
 800e9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c8:	e014      	b.n	800e9f4 <__ieee754_atan2+0x12c>
 800e9ca:	a117      	add	r1, pc, #92	; (adr r1, 800ea28 <__ieee754_atan2+0x160>)
 800e9cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9d0:	e7ec      	b.n	800e9ac <__ieee754_atan2+0xe4>
 800e9d2:	2000      	movs	r0, #0
 800e9d4:	2100      	movs	r1, #0
 800e9d6:	e7e9      	b.n	800e9ac <__ieee754_atan2+0xe4>
 800e9d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9dc:	4619      	mov	r1, r3
 800e9de:	e794      	b.n	800e90a <__ieee754_atan2+0x42>
 800e9e0:	a30d      	add	r3, pc, #52	; (adr r3, 800ea18 <__ieee754_atan2+0x150>)
 800e9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e6:	f7f1 fc57 	bl	8000298 <__aeabi_dsub>
 800e9ea:	4602      	mov	r2, r0
 800e9ec:	460b      	mov	r3, r1
 800e9ee:	a10c      	add	r1, pc, #48	; (adr r1, 800ea20 <__ieee754_atan2+0x158>)
 800e9f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9f4:	f7f1 fc50 	bl	8000298 <__aeabi_dsub>
 800e9f8:	e787      	b.n	800e90a <__ieee754_atan2+0x42>
 800e9fa:	a109      	add	r1, pc, #36	; (adr r1, 800ea20 <__ieee754_atan2+0x158>)
 800e9fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea00:	e783      	b.n	800e90a <__ieee754_atan2+0x42>
 800ea02:	a10b      	add	r1, pc, #44	; (adr r1, 800ea30 <__ieee754_atan2+0x168>)
 800ea04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea08:	e77f      	b.n	800e90a <__ieee754_atan2+0x42>
 800ea0a:	2000      	movs	r0, #0
 800ea0c:	2100      	movs	r1, #0
 800ea0e:	e77c      	b.n	800e90a <__ieee754_atan2+0x42>
 800ea10:	a105      	add	r1, pc, #20	; (adr r1, 800ea28 <__ieee754_atan2+0x160>)
 800ea12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea16:	e778      	b.n	800e90a <__ieee754_atan2+0x42>
 800ea18:	33145c07 	.word	0x33145c07
 800ea1c:	3ca1a626 	.word	0x3ca1a626
 800ea20:	54442d18 	.word	0x54442d18
 800ea24:	400921fb 	.word	0x400921fb
 800ea28:	54442d18 	.word	0x54442d18
 800ea2c:	3ff921fb 	.word	0x3ff921fb
 800ea30:	54442d18 	.word	0x54442d18
 800ea34:	3fe921fb 	.word	0x3fe921fb
 800ea38:	08011408 	.word	0x08011408
 800ea3c:	08011420 	.word	0x08011420
 800ea40:	54442d18 	.word	0x54442d18
 800ea44:	c00921fb 	.word	0xc00921fb
 800ea48:	54442d18 	.word	0x54442d18
 800ea4c:	bff921fb 	.word	0xbff921fb
 800ea50:	7ff00000 	.word	0x7ff00000
 800ea54:	00000000 	.word	0x00000000

0800ea58 <__ieee754_pow>:
 800ea58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea5c:	ed2d 8b06 	vpush	{d8-d10}
 800ea60:	b089      	sub	sp, #36	; 0x24
 800ea62:	ed8d 1b00 	vstr	d1, [sp]
 800ea66:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ea6a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ea6e:	ea58 0102 	orrs.w	r1, r8, r2
 800ea72:	ec57 6b10 	vmov	r6, r7, d0
 800ea76:	d115      	bne.n	800eaa4 <__ieee754_pow+0x4c>
 800ea78:	19b3      	adds	r3, r6, r6
 800ea7a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ea7e:	4152      	adcs	r2, r2
 800ea80:	4299      	cmp	r1, r3
 800ea82:	4b89      	ldr	r3, [pc, #548]	; (800eca8 <__ieee754_pow+0x250>)
 800ea84:	4193      	sbcs	r3, r2
 800ea86:	f080 84d1 	bcs.w	800f42c <__ieee754_pow+0x9d4>
 800ea8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea8e:	4630      	mov	r0, r6
 800ea90:	4639      	mov	r1, r7
 800ea92:	f7f1 fc03 	bl	800029c <__adddf3>
 800ea96:	ec41 0b10 	vmov	d0, r0, r1
 800ea9a:	b009      	add	sp, #36	; 0x24
 800ea9c:	ecbd 8b06 	vpop	{d8-d10}
 800eaa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaa4:	4b81      	ldr	r3, [pc, #516]	; (800ecac <__ieee754_pow+0x254>)
 800eaa6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800eaaa:	429c      	cmp	r4, r3
 800eaac:	ee10 aa10 	vmov	sl, s0
 800eab0:	463d      	mov	r5, r7
 800eab2:	dc06      	bgt.n	800eac2 <__ieee754_pow+0x6a>
 800eab4:	d101      	bne.n	800eaba <__ieee754_pow+0x62>
 800eab6:	2e00      	cmp	r6, #0
 800eab8:	d1e7      	bne.n	800ea8a <__ieee754_pow+0x32>
 800eaba:	4598      	cmp	r8, r3
 800eabc:	dc01      	bgt.n	800eac2 <__ieee754_pow+0x6a>
 800eabe:	d10f      	bne.n	800eae0 <__ieee754_pow+0x88>
 800eac0:	b172      	cbz	r2, 800eae0 <__ieee754_pow+0x88>
 800eac2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800eac6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800eaca:	ea55 050a 	orrs.w	r5, r5, sl
 800eace:	d1dc      	bne.n	800ea8a <__ieee754_pow+0x32>
 800ead0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ead4:	18db      	adds	r3, r3, r3
 800ead6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800eada:	4152      	adcs	r2, r2
 800eadc:	429d      	cmp	r5, r3
 800eade:	e7d0      	b.n	800ea82 <__ieee754_pow+0x2a>
 800eae0:	2d00      	cmp	r5, #0
 800eae2:	da3b      	bge.n	800eb5c <__ieee754_pow+0x104>
 800eae4:	4b72      	ldr	r3, [pc, #456]	; (800ecb0 <__ieee754_pow+0x258>)
 800eae6:	4598      	cmp	r8, r3
 800eae8:	dc51      	bgt.n	800eb8e <__ieee754_pow+0x136>
 800eaea:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800eaee:	4598      	cmp	r8, r3
 800eaf0:	f340 84ab 	ble.w	800f44a <__ieee754_pow+0x9f2>
 800eaf4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800eaf8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800eafc:	2b14      	cmp	r3, #20
 800eafe:	dd0f      	ble.n	800eb20 <__ieee754_pow+0xc8>
 800eb00:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800eb04:	fa22 f103 	lsr.w	r1, r2, r3
 800eb08:	fa01 f303 	lsl.w	r3, r1, r3
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	f040 849c 	bne.w	800f44a <__ieee754_pow+0x9f2>
 800eb12:	f001 0101 	and.w	r1, r1, #1
 800eb16:	f1c1 0302 	rsb	r3, r1, #2
 800eb1a:	9304      	str	r3, [sp, #16]
 800eb1c:	b182      	cbz	r2, 800eb40 <__ieee754_pow+0xe8>
 800eb1e:	e05f      	b.n	800ebe0 <__ieee754_pow+0x188>
 800eb20:	2a00      	cmp	r2, #0
 800eb22:	d15b      	bne.n	800ebdc <__ieee754_pow+0x184>
 800eb24:	f1c3 0314 	rsb	r3, r3, #20
 800eb28:	fa48 f103 	asr.w	r1, r8, r3
 800eb2c:	fa01 f303 	lsl.w	r3, r1, r3
 800eb30:	4543      	cmp	r3, r8
 800eb32:	f040 8487 	bne.w	800f444 <__ieee754_pow+0x9ec>
 800eb36:	f001 0101 	and.w	r1, r1, #1
 800eb3a:	f1c1 0302 	rsb	r3, r1, #2
 800eb3e:	9304      	str	r3, [sp, #16]
 800eb40:	4b5c      	ldr	r3, [pc, #368]	; (800ecb4 <__ieee754_pow+0x25c>)
 800eb42:	4598      	cmp	r8, r3
 800eb44:	d132      	bne.n	800ebac <__ieee754_pow+0x154>
 800eb46:	f1b9 0f00 	cmp.w	r9, #0
 800eb4a:	f280 8477 	bge.w	800f43c <__ieee754_pow+0x9e4>
 800eb4e:	4959      	ldr	r1, [pc, #356]	; (800ecb4 <__ieee754_pow+0x25c>)
 800eb50:	4632      	mov	r2, r6
 800eb52:	463b      	mov	r3, r7
 800eb54:	2000      	movs	r0, #0
 800eb56:	f7f1 fe81 	bl	800085c <__aeabi_ddiv>
 800eb5a:	e79c      	b.n	800ea96 <__ieee754_pow+0x3e>
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	9304      	str	r3, [sp, #16]
 800eb60:	2a00      	cmp	r2, #0
 800eb62:	d13d      	bne.n	800ebe0 <__ieee754_pow+0x188>
 800eb64:	4b51      	ldr	r3, [pc, #324]	; (800ecac <__ieee754_pow+0x254>)
 800eb66:	4598      	cmp	r8, r3
 800eb68:	d1ea      	bne.n	800eb40 <__ieee754_pow+0xe8>
 800eb6a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800eb6e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800eb72:	ea53 030a 	orrs.w	r3, r3, sl
 800eb76:	f000 8459 	beq.w	800f42c <__ieee754_pow+0x9d4>
 800eb7a:	4b4f      	ldr	r3, [pc, #316]	; (800ecb8 <__ieee754_pow+0x260>)
 800eb7c:	429c      	cmp	r4, r3
 800eb7e:	dd08      	ble.n	800eb92 <__ieee754_pow+0x13a>
 800eb80:	f1b9 0f00 	cmp.w	r9, #0
 800eb84:	f2c0 8456 	blt.w	800f434 <__ieee754_pow+0x9dc>
 800eb88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb8c:	e783      	b.n	800ea96 <__ieee754_pow+0x3e>
 800eb8e:	2302      	movs	r3, #2
 800eb90:	e7e5      	b.n	800eb5e <__ieee754_pow+0x106>
 800eb92:	f1b9 0f00 	cmp.w	r9, #0
 800eb96:	f04f 0000 	mov.w	r0, #0
 800eb9a:	f04f 0100 	mov.w	r1, #0
 800eb9e:	f6bf af7a 	bge.w	800ea96 <__ieee754_pow+0x3e>
 800eba2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800eba6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ebaa:	e774      	b.n	800ea96 <__ieee754_pow+0x3e>
 800ebac:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ebb0:	d106      	bne.n	800ebc0 <__ieee754_pow+0x168>
 800ebb2:	4632      	mov	r2, r6
 800ebb4:	463b      	mov	r3, r7
 800ebb6:	4630      	mov	r0, r6
 800ebb8:	4639      	mov	r1, r7
 800ebba:	f7f1 fd25 	bl	8000608 <__aeabi_dmul>
 800ebbe:	e76a      	b.n	800ea96 <__ieee754_pow+0x3e>
 800ebc0:	4b3e      	ldr	r3, [pc, #248]	; (800ecbc <__ieee754_pow+0x264>)
 800ebc2:	4599      	cmp	r9, r3
 800ebc4:	d10c      	bne.n	800ebe0 <__ieee754_pow+0x188>
 800ebc6:	2d00      	cmp	r5, #0
 800ebc8:	db0a      	blt.n	800ebe0 <__ieee754_pow+0x188>
 800ebca:	ec47 6b10 	vmov	d0, r6, r7
 800ebce:	b009      	add	sp, #36	; 0x24
 800ebd0:	ecbd 8b06 	vpop	{d8-d10}
 800ebd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebd8:	f000 bf20 	b.w	800fa1c <__ieee754_sqrt>
 800ebdc:	2300      	movs	r3, #0
 800ebde:	9304      	str	r3, [sp, #16]
 800ebe0:	ec47 6b10 	vmov	d0, r6, r7
 800ebe4:	f7fe ff9c 	bl	800db20 <fabs>
 800ebe8:	ec51 0b10 	vmov	r0, r1, d0
 800ebec:	f1ba 0f00 	cmp.w	sl, #0
 800ebf0:	d129      	bne.n	800ec46 <__ieee754_pow+0x1ee>
 800ebf2:	b124      	cbz	r4, 800ebfe <__ieee754_pow+0x1a6>
 800ebf4:	4b2f      	ldr	r3, [pc, #188]	; (800ecb4 <__ieee754_pow+0x25c>)
 800ebf6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d123      	bne.n	800ec46 <__ieee754_pow+0x1ee>
 800ebfe:	f1b9 0f00 	cmp.w	r9, #0
 800ec02:	da05      	bge.n	800ec10 <__ieee754_pow+0x1b8>
 800ec04:	4602      	mov	r2, r0
 800ec06:	460b      	mov	r3, r1
 800ec08:	2000      	movs	r0, #0
 800ec0a:	492a      	ldr	r1, [pc, #168]	; (800ecb4 <__ieee754_pow+0x25c>)
 800ec0c:	f7f1 fe26 	bl	800085c <__aeabi_ddiv>
 800ec10:	2d00      	cmp	r5, #0
 800ec12:	f6bf af40 	bge.w	800ea96 <__ieee754_pow+0x3e>
 800ec16:	9b04      	ldr	r3, [sp, #16]
 800ec18:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ec1c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ec20:	431c      	orrs	r4, r3
 800ec22:	d108      	bne.n	800ec36 <__ieee754_pow+0x1de>
 800ec24:	4602      	mov	r2, r0
 800ec26:	460b      	mov	r3, r1
 800ec28:	4610      	mov	r0, r2
 800ec2a:	4619      	mov	r1, r3
 800ec2c:	f7f1 fb34 	bl	8000298 <__aeabi_dsub>
 800ec30:	4602      	mov	r2, r0
 800ec32:	460b      	mov	r3, r1
 800ec34:	e78f      	b.n	800eb56 <__ieee754_pow+0xfe>
 800ec36:	9b04      	ldr	r3, [sp, #16]
 800ec38:	2b01      	cmp	r3, #1
 800ec3a:	f47f af2c 	bne.w	800ea96 <__ieee754_pow+0x3e>
 800ec3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec42:	4619      	mov	r1, r3
 800ec44:	e727      	b.n	800ea96 <__ieee754_pow+0x3e>
 800ec46:	0feb      	lsrs	r3, r5, #31
 800ec48:	3b01      	subs	r3, #1
 800ec4a:	9306      	str	r3, [sp, #24]
 800ec4c:	9a06      	ldr	r2, [sp, #24]
 800ec4e:	9b04      	ldr	r3, [sp, #16]
 800ec50:	4313      	orrs	r3, r2
 800ec52:	d102      	bne.n	800ec5a <__ieee754_pow+0x202>
 800ec54:	4632      	mov	r2, r6
 800ec56:	463b      	mov	r3, r7
 800ec58:	e7e6      	b.n	800ec28 <__ieee754_pow+0x1d0>
 800ec5a:	4b19      	ldr	r3, [pc, #100]	; (800ecc0 <__ieee754_pow+0x268>)
 800ec5c:	4598      	cmp	r8, r3
 800ec5e:	f340 80fb 	ble.w	800ee58 <__ieee754_pow+0x400>
 800ec62:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ec66:	4598      	cmp	r8, r3
 800ec68:	4b13      	ldr	r3, [pc, #76]	; (800ecb8 <__ieee754_pow+0x260>)
 800ec6a:	dd0c      	ble.n	800ec86 <__ieee754_pow+0x22e>
 800ec6c:	429c      	cmp	r4, r3
 800ec6e:	dc0f      	bgt.n	800ec90 <__ieee754_pow+0x238>
 800ec70:	f1b9 0f00 	cmp.w	r9, #0
 800ec74:	da0f      	bge.n	800ec96 <__ieee754_pow+0x23e>
 800ec76:	2000      	movs	r0, #0
 800ec78:	b009      	add	sp, #36	; 0x24
 800ec7a:	ecbd 8b06 	vpop	{d8-d10}
 800ec7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec82:	f000 bec2 	b.w	800fa0a <__math_oflow>
 800ec86:	429c      	cmp	r4, r3
 800ec88:	dbf2      	blt.n	800ec70 <__ieee754_pow+0x218>
 800ec8a:	4b0a      	ldr	r3, [pc, #40]	; (800ecb4 <__ieee754_pow+0x25c>)
 800ec8c:	429c      	cmp	r4, r3
 800ec8e:	dd19      	ble.n	800ecc4 <__ieee754_pow+0x26c>
 800ec90:	f1b9 0f00 	cmp.w	r9, #0
 800ec94:	dcef      	bgt.n	800ec76 <__ieee754_pow+0x21e>
 800ec96:	2000      	movs	r0, #0
 800ec98:	b009      	add	sp, #36	; 0x24
 800ec9a:	ecbd 8b06 	vpop	{d8-d10}
 800ec9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eca2:	f000 bea9 	b.w	800f9f8 <__math_uflow>
 800eca6:	bf00      	nop
 800eca8:	fff00000 	.word	0xfff00000
 800ecac:	7ff00000 	.word	0x7ff00000
 800ecb0:	433fffff 	.word	0x433fffff
 800ecb4:	3ff00000 	.word	0x3ff00000
 800ecb8:	3fefffff 	.word	0x3fefffff
 800ecbc:	3fe00000 	.word	0x3fe00000
 800ecc0:	41e00000 	.word	0x41e00000
 800ecc4:	4b60      	ldr	r3, [pc, #384]	; (800ee48 <__ieee754_pow+0x3f0>)
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	f7f1 fae6 	bl	8000298 <__aeabi_dsub>
 800eccc:	a354      	add	r3, pc, #336	; (adr r3, 800ee20 <__ieee754_pow+0x3c8>)
 800ecce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd2:	4604      	mov	r4, r0
 800ecd4:	460d      	mov	r5, r1
 800ecd6:	f7f1 fc97 	bl	8000608 <__aeabi_dmul>
 800ecda:	a353      	add	r3, pc, #332	; (adr r3, 800ee28 <__ieee754_pow+0x3d0>)
 800ecdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece0:	4606      	mov	r6, r0
 800ece2:	460f      	mov	r7, r1
 800ece4:	4620      	mov	r0, r4
 800ece6:	4629      	mov	r1, r5
 800ece8:	f7f1 fc8e 	bl	8000608 <__aeabi_dmul>
 800ecec:	4b57      	ldr	r3, [pc, #348]	; (800ee4c <__ieee754_pow+0x3f4>)
 800ecee:	4682      	mov	sl, r0
 800ecf0:	468b      	mov	fp, r1
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	4629      	mov	r1, r5
 800ecf8:	f7f1 fc86 	bl	8000608 <__aeabi_dmul>
 800ecfc:	4602      	mov	r2, r0
 800ecfe:	460b      	mov	r3, r1
 800ed00:	a14b      	add	r1, pc, #300	; (adr r1, 800ee30 <__ieee754_pow+0x3d8>)
 800ed02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed06:	f7f1 fac7 	bl	8000298 <__aeabi_dsub>
 800ed0a:	4622      	mov	r2, r4
 800ed0c:	462b      	mov	r3, r5
 800ed0e:	f7f1 fc7b 	bl	8000608 <__aeabi_dmul>
 800ed12:	4602      	mov	r2, r0
 800ed14:	460b      	mov	r3, r1
 800ed16:	2000      	movs	r0, #0
 800ed18:	494d      	ldr	r1, [pc, #308]	; (800ee50 <__ieee754_pow+0x3f8>)
 800ed1a:	f7f1 fabd 	bl	8000298 <__aeabi_dsub>
 800ed1e:	4622      	mov	r2, r4
 800ed20:	4680      	mov	r8, r0
 800ed22:	4689      	mov	r9, r1
 800ed24:	462b      	mov	r3, r5
 800ed26:	4620      	mov	r0, r4
 800ed28:	4629      	mov	r1, r5
 800ed2a:	f7f1 fc6d 	bl	8000608 <__aeabi_dmul>
 800ed2e:	4602      	mov	r2, r0
 800ed30:	460b      	mov	r3, r1
 800ed32:	4640      	mov	r0, r8
 800ed34:	4649      	mov	r1, r9
 800ed36:	f7f1 fc67 	bl	8000608 <__aeabi_dmul>
 800ed3a:	a33f      	add	r3, pc, #252	; (adr r3, 800ee38 <__ieee754_pow+0x3e0>)
 800ed3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed40:	f7f1 fc62 	bl	8000608 <__aeabi_dmul>
 800ed44:	4602      	mov	r2, r0
 800ed46:	460b      	mov	r3, r1
 800ed48:	4650      	mov	r0, sl
 800ed4a:	4659      	mov	r1, fp
 800ed4c:	f7f1 faa4 	bl	8000298 <__aeabi_dsub>
 800ed50:	4602      	mov	r2, r0
 800ed52:	460b      	mov	r3, r1
 800ed54:	4680      	mov	r8, r0
 800ed56:	4689      	mov	r9, r1
 800ed58:	4630      	mov	r0, r6
 800ed5a:	4639      	mov	r1, r7
 800ed5c:	f7f1 fa9e 	bl	800029c <__adddf3>
 800ed60:	2000      	movs	r0, #0
 800ed62:	4632      	mov	r2, r6
 800ed64:	463b      	mov	r3, r7
 800ed66:	4604      	mov	r4, r0
 800ed68:	460d      	mov	r5, r1
 800ed6a:	f7f1 fa95 	bl	8000298 <__aeabi_dsub>
 800ed6e:	4602      	mov	r2, r0
 800ed70:	460b      	mov	r3, r1
 800ed72:	4640      	mov	r0, r8
 800ed74:	4649      	mov	r1, r9
 800ed76:	f7f1 fa8f 	bl	8000298 <__aeabi_dsub>
 800ed7a:	9b04      	ldr	r3, [sp, #16]
 800ed7c:	9a06      	ldr	r2, [sp, #24]
 800ed7e:	3b01      	subs	r3, #1
 800ed80:	4313      	orrs	r3, r2
 800ed82:	4682      	mov	sl, r0
 800ed84:	468b      	mov	fp, r1
 800ed86:	f040 81e7 	bne.w	800f158 <__ieee754_pow+0x700>
 800ed8a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ee40 <__ieee754_pow+0x3e8>
 800ed8e:	eeb0 8a47 	vmov.f32	s16, s14
 800ed92:	eef0 8a67 	vmov.f32	s17, s15
 800ed96:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ed9a:	2600      	movs	r6, #0
 800ed9c:	4632      	mov	r2, r6
 800ed9e:	463b      	mov	r3, r7
 800eda0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eda4:	f7f1 fa78 	bl	8000298 <__aeabi_dsub>
 800eda8:	4622      	mov	r2, r4
 800edaa:	462b      	mov	r3, r5
 800edac:	f7f1 fc2c 	bl	8000608 <__aeabi_dmul>
 800edb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800edb4:	4680      	mov	r8, r0
 800edb6:	4689      	mov	r9, r1
 800edb8:	4650      	mov	r0, sl
 800edba:	4659      	mov	r1, fp
 800edbc:	f7f1 fc24 	bl	8000608 <__aeabi_dmul>
 800edc0:	4602      	mov	r2, r0
 800edc2:	460b      	mov	r3, r1
 800edc4:	4640      	mov	r0, r8
 800edc6:	4649      	mov	r1, r9
 800edc8:	f7f1 fa68 	bl	800029c <__adddf3>
 800edcc:	4632      	mov	r2, r6
 800edce:	463b      	mov	r3, r7
 800edd0:	4680      	mov	r8, r0
 800edd2:	4689      	mov	r9, r1
 800edd4:	4620      	mov	r0, r4
 800edd6:	4629      	mov	r1, r5
 800edd8:	f7f1 fc16 	bl	8000608 <__aeabi_dmul>
 800eddc:	460b      	mov	r3, r1
 800edde:	4604      	mov	r4, r0
 800ede0:	460d      	mov	r5, r1
 800ede2:	4602      	mov	r2, r0
 800ede4:	4649      	mov	r1, r9
 800ede6:	4640      	mov	r0, r8
 800ede8:	f7f1 fa58 	bl	800029c <__adddf3>
 800edec:	4b19      	ldr	r3, [pc, #100]	; (800ee54 <__ieee754_pow+0x3fc>)
 800edee:	4299      	cmp	r1, r3
 800edf0:	ec45 4b19 	vmov	d9, r4, r5
 800edf4:	4606      	mov	r6, r0
 800edf6:	460f      	mov	r7, r1
 800edf8:	468b      	mov	fp, r1
 800edfa:	f340 82f0 	ble.w	800f3de <__ieee754_pow+0x986>
 800edfe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ee02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ee06:	4303      	orrs	r3, r0
 800ee08:	f000 81e4 	beq.w	800f1d4 <__ieee754_pow+0x77c>
 800ee0c:	ec51 0b18 	vmov	r0, r1, d8
 800ee10:	2200      	movs	r2, #0
 800ee12:	2300      	movs	r3, #0
 800ee14:	f7f1 fe6a 	bl	8000aec <__aeabi_dcmplt>
 800ee18:	3800      	subs	r0, #0
 800ee1a:	bf18      	it	ne
 800ee1c:	2001      	movne	r0, #1
 800ee1e:	e72b      	b.n	800ec78 <__ieee754_pow+0x220>
 800ee20:	60000000 	.word	0x60000000
 800ee24:	3ff71547 	.word	0x3ff71547
 800ee28:	f85ddf44 	.word	0xf85ddf44
 800ee2c:	3e54ae0b 	.word	0x3e54ae0b
 800ee30:	55555555 	.word	0x55555555
 800ee34:	3fd55555 	.word	0x3fd55555
 800ee38:	652b82fe 	.word	0x652b82fe
 800ee3c:	3ff71547 	.word	0x3ff71547
 800ee40:	00000000 	.word	0x00000000
 800ee44:	bff00000 	.word	0xbff00000
 800ee48:	3ff00000 	.word	0x3ff00000
 800ee4c:	3fd00000 	.word	0x3fd00000
 800ee50:	3fe00000 	.word	0x3fe00000
 800ee54:	408fffff 	.word	0x408fffff
 800ee58:	4bd5      	ldr	r3, [pc, #852]	; (800f1b0 <__ieee754_pow+0x758>)
 800ee5a:	402b      	ands	r3, r5
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	b92b      	cbnz	r3, 800ee6c <__ieee754_pow+0x414>
 800ee60:	4bd4      	ldr	r3, [pc, #848]	; (800f1b4 <__ieee754_pow+0x75c>)
 800ee62:	f7f1 fbd1 	bl	8000608 <__aeabi_dmul>
 800ee66:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ee6a:	460c      	mov	r4, r1
 800ee6c:	1523      	asrs	r3, r4, #20
 800ee6e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ee72:	4413      	add	r3, r2
 800ee74:	9305      	str	r3, [sp, #20]
 800ee76:	4bd0      	ldr	r3, [pc, #832]	; (800f1b8 <__ieee754_pow+0x760>)
 800ee78:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ee7c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ee80:	429c      	cmp	r4, r3
 800ee82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ee86:	dd08      	ble.n	800ee9a <__ieee754_pow+0x442>
 800ee88:	4bcc      	ldr	r3, [pc, #816]	; (800f1bc <__ieee754_pow+0x764>)
 800ee8a:	429c      	cmp	r4, r3
 800ee8c:	f340 8162 	ble.w	800f154 <__ieee754_pow+0x6fc>
 800ee90:	9b05      	ldr	r3, [sp, #20]
 800ee92:	3301      	adds	r3, #1
 800ee94:	9305      	str	r3, [sp, #20]
 800ee96:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ee9a:	2400      	movs	r4, #0
 800ee9c:	00e3      	lsls	r3, r4, #3
 800ee9e:	9307      	str	r3, [sp, #28]
 800eea0:	4bc7      	ldr	r3, [pc, #796]	; (800f1c0 <__ieee754_pow+0x768>)
 800eea2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eea6:	ed93 7b00 	vldr	d7, [r3]
 800eeaa:	4629      	mov	r1, r5
 800eeac:	ec53 2b17 	vmov	r2, r3, d7
 800eeb0:	eeb0 9a47 	vmov.f32	s18, s14
 800eeb4:	eef0 9a67 	vmov.f32	s19, s15
 800eeb8:	4682      	mov	sl, r0
 800eeba:	f7f1 f9ed 	bl	8000298 <__aeabi_dsub>
 800eebe:	4652      	mov	r2, sl
 800eec0:	4606      	mov	r6, r0
 800eec2:	460f      	mov	r7, r1
 800eec4:	462b      	mov	r3, r5
 800eec6:	ec51 0b19 	vmov	r0, r1, d9
 800eeca:	f7f1 f9e7 	bl	800029c <__adddf3>
 800eece:	4602      	mov	r2, r0
 800eed0:	460b      	mov	r3, r1
 800eed2:	2000      	movs	r0, #0
 800eed4:	49bb      	ldr	r1, [pc, #748]	; (800f1c4 <__ieee754_pow+0x76c>)
 800eed6:	f7f1 fcc1 	bl	800085c <__aeabi_ddiv>
 800eeda:	ec41 0b1a 	vmov	d10, r0, r1
 800eede:	4602      	mov	r2, r0
 800eee0:	460b      	mov	r3, r1
 800eee2:	4630      	mov	r0, r6
 800eee4:	4639      	mov	r1, r7
 800eee6:	f7f1 fb8f 	bl	8000608 <__aeabi_dmul>
 800eeea:	2300      	movs	r3, #0
 800eeec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eef0:	9302      	str	r3, [sp, #8]
 800eef2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800eef6:	46ab      	mov	fp, r5
 800eef8:	106d      	asrs	r5, r5, #1
 800eefa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800eefe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ef02:	ec41 0b18 	vmov	d8, r0, r1
 800ef06:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	4640      	mov	r0, r8
 800ef0e:	4649      	mov	r1, r9
 800ef10:	4614      	mov	r4, r2
 800ef12:	461d      	mov	r5, r3
 800ef14:	f7f1 fb78 	bl	8000608 <__aeabi_dmul>
 800ef18:	4602      	mov	r2, r0
 800ef1a:	460b      	mov	r3, r1
 800ef1c:	4630      	mov	r0, r6
 800ef1e:	4639      	mov	r1, r7
 800ef20:	f7f1 f9ba 	bl	8000298 <__aeabi_dsub>
 800ef24:	ec53 2b19 	vmov	r2, r3, d9
 800ef28:	4606      	mov	r6, r0
 800ef2a:	460f      	mov	r7, r1
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	4629      	mov	r1, r5
 800ef30:	f7f1 f9b2 	bl	8000298 <__aeabi_dsub>
 800ef34:	4602      	mov	r2, r0
 800ef36:	460b      	mov	r3, r1
 800ef38:	4650      	mov	r0, sl
 800ef3a:	4659      	mov	r1, fp
 800ef3c:	f7f1 f9ac 	bl	8000298 <__aeabi_dsub>
 800ef40:	4642      	mov	r2, r8
 800ef42:	464b      	mov	r3, r9
 800ef44:	f7f1 fb60 	bl	8000608 <__aeabi_dmul>
 800ef48:	4602      	mov	r2, r0
 800ef4a:	460b      	mov	r3, r1
 800ef4c:	4630      	mov	r0, r6
 800ef4e:	4639      	mov	r1, r7
 800ef50:	f7f1 f9a2 	bl	8000298 <__aeabi_dsub>
 800ef54:	ec53 2b1a 	vmov	r2, r3, d10
 800ef58:	f7f1 fb56 	bl	8000608 <__aeabi_dmul>
 800ef5c:	ec53 2b18 	vmov	r2, r3, d8
 800ef60:	ec41 0b19 	vmov	d9, r0, r1
 800ef64:	ec51 0b18 	vmov	r0, r1, d8
 800ef68:	f7f1 fb4e 	bl	8000608 <__aeabi_dmul>
 800ef6c:	a37c      	add	r3, pc, #496	; (adr r3, 800f160 <__ieee754_pow+0x708>)
 800ef6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef72:	4604      	mov	r4, r0
 800ef74:	460d      	mov	r5, r1
 800ef76:	f7f1 fb47 	bl	8000608 <__aeabi_dmul>
 800ef7a:	a37b      	add	r3, pc, #492	; (adr r3, 800f168 <__ieee754_pow+0x710>)
 800ef7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef80:	f7f1 f98c 	bl	800029c <__adddf3>
 800ef84:	4622      	mov	r2, r4
 800ef86:	462b      	mov	r3, r5
 800ef88:	f7f1 fb3e 	bl	8000608 <__aeabi_dmul>
 800ef8c:	a378      	add	r3, pc, #480	; (adr r3, 800f170 <__ieee754_pow+0x718>)
 800ef8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef92:	f7f1 f983 	bl	800029c <__adddf3>
 800ef96:	4622      	mov	r2, r4
 800ef98:	462b      	mov	r3, r5
 800ef9a:	f7f1 fb35 	bl	8000608 <__aeabi_dmul>
 800ef9e:	a376      	add	r3, pc, #472	; (adr r3, 800f178 <__ieee754_pow+0x720>)
 800efa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa4:	f7f1 f97a 	bl	800029c <__adddf3>
 800efa8:	4622      	mov	r2, r4
 800efaa:	462b      	mov	r3, r5
 800efac:	f7f1 fb2c 	bl	8000608 <__aeabi_dmul>
 800efb0:	a373      	add	r3, pc, #460	; (adr r3, 800f180 <__ieee754_pow+0x728>)
 800efb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb6:	f7f1 f971 	bl	800029c <__adddf3>
 800efba:	4622      	mov	r2, r4
 800efbc:	462b      	mov	r3, r5
 800efbe:	f7f1 fb23 	bl	8000608 <__aeabi_dmul>
 800efc2:	a371      	add	r3, pc, #452	; (adr r3, 800f188 <__ieee754_pow+0x730>)
 800efc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc8:	f7f1 f968 	bl	800029c <__adddf3>
 800efcc:	4622      	mov	r2, r4
 800efce:	4606      	mov	r6, r0
 800efd0:	460f      	mov	r7, r1
 800efd2:	462b      	mov	r3, r5
 800efd4:	4620      	mov	r0, r4
 800efd6:	4629      	mov	r1, r5
 800efd8:	f7f1 fb16 	bl	8000608 <__aeabi_dmul>
 800efdc:	4602      	mov	r2, r0
 800efde:	460b      	mov	r3, r1
 800efe0:	4630      	mov	r0, r6
 800efe2:	4639      	mov	r1, r7
 800efe4:	f7f1 fb10 	bl	8000608 <__aeabi_dmul>
 800efe8:	4642      	mov	r2, r8
 800efea:	4604      	mov	r4, r0
 800efec:	460d      	mov	r5, r1
 800efee:	464b      	mov	r3, r9
 800eff0:	ec51 0b18 	vmov	r0, r1, d8
 800eff4:	f7f1 f952 	bl	800029c <__adddf3>
 800eff8:	ec53 2b19 	vmov	r2, r3, d9
 800effc:	f7f1 fb04 	bl	8000608 <__aeabi_dmul>
 800f000:	4622      	mov	r2, r4
 800f002:	462b      	mov	r3, r5
 800f004:	f7f1 f94a 	bl	800029c <__adddf3>
 800f008:	4642      	mov	r2, r8
 800f00a:	4682      	mov	sl, r0
 800f00c:	468b      	mov	fp, r1
 800f00e:	464b      	mov	r3, r9
 800f010:	4640      	mov	r0, r8
 800f012:	4649      	mov	r1, r9
 800f014:	f7f1 faf8 	bl	8000608 <__aeabi_dmul>
 800f018:	4b6b      	ldr	r3, [pc, #428]	; (800f1c8 <__ieee754_pow+0x770>)
 800f01a:	2200      	movs	r2, #0
 800f01c:	4606      	mov	r6, r0
 800f01e:	460f      	mov	r7, r1
 800f020:	f7f1 f93c 	bl	800029c <__adddf3>
 800f024:	4652      	mov	r2, sl
 800f026:	465b      	mov	r3, fp
 800f028:	f7f1 f938 	bl	800029c <__adddf3>
 800f02c:	2000      	movs	r0, #0
 800f02e:	4604      	mov	r4, r0
 800f030:	460d      	mov	r5, r1
 800f032:	4602      	mov	r2, r0
 800f034:	460b      	mov	r3, r1
 800f036:	4640      	mov	r0, r8
 800f038:	4649      	mov	r1, r9
 800f03a:	f7f1 fae5 	bl	8000608 <__aeabi_dmul>
 800f03e:	4b62      	ldr	r3, [pc, #392]	; (800f1c8 <__ieee754_pow+0x770>)
 800f040:	4680      	mov	r8, r0
 800f042:	4689      	mov	r9, r1
 800f044:	2200      	movs	r2, #0
 800f046:	4620      	mov	r0, r4
 800f048:	4629      	mov	r1, r5
 800f04a:	f7f1 f925 	bl	8000298 <__aeabi_dsub>
 800f04e:	4632      	mov	r2, r6
 800f050:	463b      	mov	r3, r7
 800f052:	f7f1 f921 	bl	8000298 <__aeabi_dsub>
 800f056:	4602      	mov	r2, r0
 800f058:	460b      	mov	r3, r1
 800f05a:	4650      	mov	r0, sl
 800f05c:	4659      	mov	r1, fp
 800f05e:	f7f1 f91b 	bl	8000298 <__aeabi_dsub>
 800f062:	ec53 2b18 	vmov	r2, r3, d8
 800f066:	f7f1 facf 	bl	8000608 <__aeabi_dmul>
 800f06a:	4622      	mov	r2, r4
 800f06c:	4606      	mov	r6, r0
 800f06e:	460f      	mov	r7, r1
 800f070:	462b      	mov	r3, r5
 800f072:	ec51 0b19 	vmov	r0, r1, d9
 800f076:	f7f1 fac7 	bl	8000608 <__aeabi_dmul>
 800f07a:	4602      	mov	r2, r0
 800f07c:	460b      	mov	r3, r1
 800f07e:	4630      	mov	r0, r6
 800f080:	4639      	mov	r1, r7
 800f082:	f7f1 f90b 	bl	800029c <__adddf3>
 800f086:	4606      	mov	r6, r0
 800f088:	460f      	mov	r7, r1
 800f08a:	4602      	mov	r2, r0
 800f08c:	460b      	mov	r3, r1
 800f08e:	4640      	mov	r0, r8
 800f090:	4649      	mov	r1, r9
 800f092:	f7f1 f903 	bl	800029c <__adddf3>
 800f096:	a33e      	add	r3, pc, #248	; (adr r3, 800f190 <__ieee754_pow+0x738>)
 800f098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f09c:	2000      	movs	r0, #0
 800f09e:	4604      	mov	r4, r0
 800f0a0:	460d      	mov	r5, r1
 800f0a2:	f7f1 fab1 	bl	8000608 <__aeabi_dmul>
 800f0a6:	4642      	mov	r2, r8
 800f0a8:	ec41 0b18 	vmov	d8, r0, r1
 800f0ac:	464b      	mov	r3, r9
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	4629      	mov	r1, r5
 800f0b2:	f7f1 f8f1 	bl	8000298 <__aeabi_dsub>
 800f0b6:	4602      	mov	r2, r0
 800f0b8:	460b      	mov	r3, r1
 800f0ba:	4630      	mov	r0, r6
 800f0bc:	4639      	mov	r1, r7
 800f0be:	f7f1 f8eb 	bl	8000298 <__aeabi_dsub>
 800f0c2:	a335      	add	r3, pc, #212	; (adr r3, 800f198 <__ieee754_pow+0x740>)
 800f0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c8:	f7f1 fa9e 	bl	8000608 <__aeabi_dmul>
 800f0cc:	a334      	add	r3, pc, #208	; (adr r3, 800f1a0 <__ieee754_pow+0x748>)
 800f0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d2:	4606      	mov	r6, r0
 800f0d4:	460f      	mov	r7, r1
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	4629      	mov	r1, r5
 800f0da:	f7f1 fa95 	bl	8000608 <__aeabi_dmul>
 800f0de:	4602      	mov	r2, r0
 800f0e0:	460b      	mov	r3, r1
 800f0e2:	4630      	mov	r0, r6
 800f0e4:	4639      	mov	r1, r7
 800f0e6:	f7f1 f8d9 	bl	800029c <__adddf3>
 800f0ea:	9a07      	ldr	r2, [sp, #28]
 800f0ec:	4b37      	ldr	r3, [pc, #220]	; (800f1cc <__ieee754_pow+0x774>)
 800f0ee:	4413      	add	r3, r2
 800f0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f4:	f7f1 f8d2 	bl	800029c <__adddf3>
 800f0f8:	4682      	mov	sl, r0
 800f0fa:	9805      	ldr	r0, [sp, #20]
 800f0fc:	468b      	mov	fp, r1
 800f0fe:	f7f1 fa19 	bl	8000534 <__aeabi_i2d>
 800f102:	9a07      	ldr	r2, [sp, #28]
 800f104:	4b32      	ldr	r3, [pc, #200]	; (800f1d0 <__ieee754_pow+0x778>)
 800f106:	4413      	add	r3, r2
 800f108:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f10c:	4606      	mov	r6, r0
 800f10e:	460f      	mov	r7, r1
 800f110:	4652      	mov	r2, sl
 800f112:	465b      	mov	r3, fp
 800f114:	ec51 0b18 	vmov	r0, r1, d8
 800f118:	f7f1 f8c0 	bl	800029c <__adddf3>
 800f11c:	4642      	mov	r2, r8
 800f11e:	464b      	mov	r3, r9
 800f120:	f7f1 f8bc 	bl	800029c <__adddf3>
 800f124:	4632      	mov	r2, r6
 800f126:	463b      	mov	r3, r7
 800f128:	f7f1 f8b8 	bl	800029c <__adddf3>
 800f12c:	2000      	movs	r0, #0
 800f12e:	4632      	mov	r2, r6
 800f130:	463b      	mov	r3, r7
 800f132:	4604      	mov	r4, r0
 800f134:	460d      	mov	r5, r1
 800f136:	f7f1 f8af 	bl	8000298 <__aeabi_dsub>
 800f13a:	4642      	mov	r2, r8
 800f13c:	464b      	mov	r3, r9
 800f13e:	f7f1 f8ab 	bl	8000298 <__aeabi_dsub>
 800f142:	ec53 2b18 	vmov	r2, r3, d8
 800f146:	f7f1 f8a7 	bl	8000298 <__aeabi_dsub>
 800f14a:	4602      	mov	r2, r0
 800f14c:	460b      	mov	r3, r1
 800f14e:	4650      	mov	r0, sl
 800f150:	4659      	mov	r1, fp
 800f152:	e610      	b.n	800ed76 <__ieee754_pow+0x31e>
 800f154:	2401      	movs	r4, #1
 800f156:	e6a1      	b.n	800ee9c <__ieee754_pow+0x444>
 800f158:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800f1a8 <__ieee754_pow+0x750>
 800f15c:	e617      	b.n	800ed8e <__ieee754_pow+0x336>
 800f15e:	bf00      	nop
 800f160:	4a454eef 	.word	0x4a454eef
 800f164:	3fca7e28 	.word	0x3fca7e28
 800f168:	93c9db65 	.word	0x93c9db65
 800f16c:	3fcd864a 	.word	0x3fcd864a
 800f170:	a91d4101 	.word	0xa91d4101
 800f174:	3fd17460 	.word	0x3fd17460
 800f178:	518f264d 	.word	0x518f264d
 800f17c:	3fd55555 	.word	0x3fd55555
 800f180:	db6fabff 	.word	0xdb6fabff
 800f184:	3fdb6db6 	.word	0x3fdb6db6
 800f188:	33333303 	.word	0x33333303
 800f18c:	3fe33333 	.word	0x3fe33333
 800f190:	e0000000 	.word	0xe0000000
 800f194:	3feec709 	.word	0x3feec709
 800f198:	dc3a03fd 	.word	0xdc3a03fd
 800f19c:	3feec709 	.word	0x3feec709
 800f1a0:	145b01f5 	.word	0x145b01f5
 800f1a4:	be3e2fe0 	.word	0xbe3e2fe0
 800f1a8:	00000000 	.word	0x00000000
 800f1ac:	3ff00000 	.word	0x3ff00000
 800f1b0:	7ff00000 	.word	0x7ff00000
 800f1b4:	43400000 	.word	0x43400000
 800f1b8:	0003988e 	.word	0x0003988e
 800f1bc:	000bb679 	.word	0x000bb679
 800f1c0:	08011438 	.word	0x08011438
 800f1c4:	3ff00000 	.word	0x3ff00000
 800f1c8:	40080000 	.word	0x40080000
 800f1cc:	08011458 	.word	0x08011458
 800f1d0:	08011448 	.word	0x08011448
 800f1d4:	a3b3      	add	r3, pc, #716	; (adr r3, 800f4a4 <__ieee754_pow+0xa4c>)
 800f1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1da:	4640      	mov	r0, r8
 800f1dc:	4649      	mov	r1, r9
 800f1de:	f7f1 f85d 	bl	800029c <__adddf3>
 800f1e2:	4622      	mov	r2, r4
 800f1e4:	ec41 0b1a 	vmov	d10, r0, r1
 800f1e8:	462b      	mov	r3, r5
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	4639      	mov	r1, r7
 800f1ee:	f7f1 f853 	bl	8000298 <__aeabi_dsub>
 800f1f2:	4602      	mov	r2, r0
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	ec51 0b1a 	vmov	r0, r1, d10
 800f1fa:	f7f1 fc95 	bl	8000b28 <__aeabi_dcmpgt>
 800f1fe:	2800      	cmp	r0, #0
 800f200:	f47f ae04 	bne.w	800ee0c <__ieee754_pow+0x3b4>
 800f204:	4aa2      	ldr	r2, [pc, #648]	; (800f490 <__ieee754_pow+0xa38>)
 800f206:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f20a:	4293      	cmp	r3, r2
 800f20c:	f340 8107 	ble.w	800f41e <__ieee754_pow+0x9c6>
 800f210:	151b      	asrs	r3, r3, #20
 800f212:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f216:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f21a:	fa4a fa03 	asr.w	sl, sl, r3
 800f21e:	44da      	add	sl, fp
 800f220:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800f224:	489b      	ldr	r0, [pc, #620]	; (800f494 <__ieee754_pow+0xa3c>)
 800f226:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f22a:	4108      	asrs	r0, r1
 800f22c:	ea00 030a 	and.w	r3, r0, sl
 800f230:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800f234:	f1c1 0114 	rsb	r1, r1, #20
 800f238:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f23c:	fa4a fa01 	asr.w	sl, sl, r1
 800f240:	f1bb 0f00 	cmp.w	fp, #0
 800f244:	f04f 0200 	mov.w	r2, #0
 800f248:	4620      	mov	r0, r4
 800f24a:	4629      	mov	r1, r5
 800f24c:	bfb8      	it	lt
 800f24e:	f1ca 0a00 	rsblt	sl, sl, #0
 800f252:	f7f1 f821 	bl	8000298 <__aeabi_dsub>
 800f256:	ec41 0b19 	vmov	d9, r0, r1
 800f25a:	4642      	mov	r2, r8
 800f25c:	464b      	mov	r3, r9
 800f25e:	ec51 0b19 	vmov	r0, r1, d9
 800f262:	f7f1 f81b 	bl	800029c <__adddf3>
 800f266:	a37a      	add	r3, pc, #488	; (adr r3, 800f450 <__ieee754_pow+0x9f8>)
 800f268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f26c:	2000      	movs	r0, #0
 800f26e:	4604      	mov	r4, r0
 800f270:	460d      	mov	r5, r1
 800f272:	f7f1 f9c9 	bl	8000608 <__aeabi_dmul>
 800f276:	ec53 2b19 	vmov	r2, r3, d9
 800f27a:	4606      	mov	r6, r0
 800f27c:	460f      	mov	r7, r1
 800f27e:	4620      	mov	r0, r4
 800f280:	4629      	mov	r1, r5
 800f282:	f7f1 f809 	bl	8000298 <__aeabi_dsub>
 800f286:	4602      	mov	r2, r0
 800f288:	460b      	mov	r3, r1
 800f28a:	4640      	mov	r0, r8
 800f28c:	4649      	mov	r1, r9
 800f28e:	f7f1 f803 	bl	8000298 <__aeabi_dsub>
 800f292:	a371      	add	r3, pc, #452	; (adr r3, 800f458 <__ieee754_pow+0xa00>)
 800f294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f298:	f7f1 f9b6 	bl	8000608 <__aeabi_dmul>
 800f29c:	a370      	add	r3, pc, #448	; (adr r3, 800f460 <__ieee754_pow+0xa08>)
 800f29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a2:	4680      	mov	r8, r0
 800f2a4:	4689      	mov	r9, r1
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	4629      	mov	r1, r5
 800f2aa:	f7f1 f9ad 	bl	8000608 <__aeabi_dmul>
 800f2ae:	4602      	mov	r2, r0
 800f2b0:	460b      	mov	r3, r1
 800f2b2:	4640      	mov	r0, r8
 800f2b4:	4649      	mov	r1, r9
 800f2b6:	f7f0 fff1 	bl	800029c <__adddf3>
 800f2ba:	4604      	mov	r4, r0
 800f2bc:	460d      	mov	r5, r1
 800f2be:	4602      	mov	r2, r0
 800f2c0:	460b      	mov	r3, r1
 800f2c2:	4630      	mov	r0, r6
 800f2c4:	4639      	mov	r1, r7
 800f2c6:	f7f0 ffe9 	bl	800029c <__adddf3>
 800f2ca:	4632      	mov	r2, r6
 800f2cc:	463b      	mov	r3, r7
 800f2ce:	4680      	mov	r8, r0
 800f2d0:	4689      	mov	r9, r1
 800f2d2:	f7f0 ffe1 	bl	8000298 <__aeabi_dsub>
 800f2d6:	4602      	mov	r2, r0
 800f2d8:	460b      	mov	r3, r1
 800f2da:	4620      	mov	r0, r4
 800f2dc:	4629      	mov	r1, r5
 800f2de:	f7f0 ffdb 	bl	8000298 <__aeabi_dsub>
 800f2e2:	4642      	mov	r2, r8
 800f2e4:	4606      	mov	r6, r0
 800f2e6:	460f      	mov	r7, r1
 800f2e8:	464b      	mov	r3, r9
 800f2ea:	4640      	mov	r0, r8
 800f2ec:	4649      	mov	r1, r9
 800f2ee:	f7f1 f98b 	bl	8000608 <__aeabi_dmul>
 800f2f2:	a35d      	add	r3, pc, #372	; (adr r3, 800f468 <__ieee754_pow+0xa10>)
 800f2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f8:	4604      	mov	r4, r0
 800f2fa:	460d      	mov	r5, r1
 800f2fc:	f7f1 f984 	bl	8000608 <__aeabi_dmul>
 800f300:	a35b      	add	r3, pc, #364	; (adr r3, 800f470 <__ieee754_pow+0xa18>)
 800f302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f306:	f7f0 ffc7 	bl	8000298 <__aeabi_dsub>
 800f30a:	4622      	mov	r2, r4
 800f30c:	462b      	mov	r3, r5
 800f30e:	f7f1 f97b 	bl	8000608 <__aeabi_dmul>
 800f312:	a359      	add	r3, pc, #356	; (adr r3, 800f478 <__ieee754_pow+0xa20>)
 800f314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f318:	f7f0 ffc0 	bl	800029c <__adddf3>
 800f31c:	4622      	mov	r2, r4
 800f31e:	462b      	mov	r3, r5
 800f320:	f7f1 f972 	bl	8000608 <__aeabi_dmul>
 800f324:	a356      	add	r3, pc, #344	; (adr r3, 800f480 <__ieee754_pow+0xa28>)
 800f326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f32a:	f7f0 ffb5 	bl	8000298 <__aeabi_dsub>
 800f32e:	4622      	mov	r2, r4
 800f330:	462b      	mov	r3, r5
 800f332:	f7f1 f969 	bl	8000608 <__aeabi_dmul>
 800f336:	a354      	add	r3, pc, #336	; (adr r3, 800f488 <__ieee754_pow+0xa30>)
 800f338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f33c:	f7f0 ffae 	bl	800029c <__adddf3>
 800f340:	4622      	mov	r2, r4
 800f342:	462b      	mov	r3, r5
 800f344:	f7f1 f960 	bl	8000608 <__aeabi_dmul>
 800f348:	4602      	mov	r2, r0
 800f34a:	460b      	mov	r3, r1
 800f34c:	4640      	mov	r0, r8
 800f34e:	4649      	mov	r1, r9
 800f350:	f7f0 ffa2 	bl	8000298 <__aeabi_dsub>
 800f354:	4604      	mov	r4, r0
 800f356:	460d      	mov	r5, r1
 800f358:	4602      	mov	r2, r0
 800f35a:	460b      	mov	r3, r1
 800f35c:	4640      	mov	r0, r8
 800f35e:	4649      	mov	r1, r9
 800f360:	f7f1 f952 	bl	8000608 <__aeabi_dmul>
 800f364:	2200      	movs	r2, #0
 800f366:	ec41 0b19 	vmov	d9, r0, r1
 800f36a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f36e:	4620      	mov	r0, r4
 800f370:	4629      	mov	r1, r5
 800f372:	f7f0 ff91 	bl	8000298 <__aeabi_dsub>
 800f376:	4602      	mov	r2, r0
 800f378:	460b      	mov	r3, r1
 800f37a:	ec51 0b19 	vmov	r0, r1, d9
 800f37e:	f7f1 fa6d 	bl	800085c <__aeabi_ddiv>
 800f382:	4632      	mov	r2, r6
 800f384:	4604      	mov	r4, r0
 800f386:	460d      	mov	r5, r1
 800f388:	463b      	mov	r3, r7
 800f38a:	4640      	mov	r0, r8
 800f38c:	4649      	mov	r1, r9
 800f38e:	f7f1 f93b 	bl	8000608 <__aeabi_dmul>
 800f392:	4632      	mov	r2, r6
 800f394:	463b      	mov	r3, r7
 800f396:	f7f0 ff81 	bl	800029c <__adddf3>
 800f39a:	4602      	mov	r2, r0
 800f39c:	460b      	mov	r3, r1
 800f39e:	4620      	mov	r0, r4
 800f3a0:	4629      	mov	r1, r5
 800f3a2:	f7f0 ff79 	bl	8000298 <__aeabi_dsub>
 800f3a6:	4642      	mov	r2, r8
 800f3a8:	464b      	mov	r3, r9
 800f3aa:	f7f0 ff75 	bl	8000298 <__aeabi_dsub>
 800f3ae:	460b      	mov	r3, r1
 800f3b0:	4602      	mov	r2, r0
 800f3b2:	4939      	ldr	r1, [pc, #228]	; (800f498 <__ieee754_pow+0xa40>)
 800f3b4:	2000      	movs	r0, #0
 800f3b6:	f7f0 ff6f 	bl	8000298 <__aeabi_dsub>
 800f3ba:	ec41 0b10 	vmov	d0, r0, r1
 800f3be:	ee10 3a90 	vmov	r3, s1
 800f3c2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f3c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f3ca:	da2b      	bge.n	800f424 <__ieee754_pow+0x9cc>
 800f3cc:	4650      	mov	r0, sl
 800f3ce:	f000 fa77 	bl	800f8c0 <scalbn>
 800f3d2:	ec51 0b10 	vmov	r0, r1, d0
 800f3d6:	ec53 2b18 	vmov	r2, r3, d8
 800f3da:	f7ff bbee 	b.w	800ebba <__ieee754_pow+0x162>
 800f3de:	4b2f      	ldr	r3, [pc, #188]	; (800f49c <__ieee754_pow+0xa44>)
 800f3e0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f3e4:	429e      	cmp	r6, r3
 800f3e6:	f77f af0d 	ble.w	800f204 <__ieee754_pow+0x7ac>
 800f3ea:	4b2d      	ldr	r3, [pc, #180]	; (800f4a0 <__ieee754_pow+0xa48>)
 800f3ec:	440b      	add	r3, r1
 800f3ee:	4303      	orrs	r3, r0
 800f3f0:	d009      	beq.n	800f406 <__ieee754_pow+0x9ae>
 800f3f2:	ec51 0b18 	vmov	r0, r1, d8
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	f7f1 fb77 	bl	8000aec <__aeabi_dcmplt>
 800f3fe:	3800      	subs	r0, #0
 800f400:	bf18      	it	ne
 800f402:	2001      	movne	r0, #1
 800f404:	e448      	b.n	800ec98 <__ieee754_pow+0x240>
 800f406:	4622      	mov	r2, r4
 800f408:	462b      	mov	r3, r5
 800f40a:	f7f0 ff45 	bl	8000298 <__aeabi_dsub>
 800f40e:	4642      	mov	r2, r8
 800f410:	464b      	mov	r3, r9
 800f412:	f7f1 fb7f 	bl	8000b14 <__aeabi_dcmpge>
 800f416:	2800      	cmp	r0, #0
 800f418:	f43f aef4 	beq.w	800f204 <__ieee754_pow+0x7ac>
 800f41c:	e7e9      	b.n	800f3f2 <__ieee754_pow+0x99a>
 800f41e:	f04f 0a00 	mov.w	sl, #0
 800f422:	e71a      	b.n	800f25a <__ieee754_pow+0x802>
 800f424:	ec51 0b10 	vmov	r0, r1, d0
 800f428:	4619      	mov	r1, r3
 800f42a:	e7d4      	b.n	800f3d6 <__ieee754_pow+0x97e>
 800f42c:	491a      	ldr	r1, [pc, #104]	; (800f498 <__ieee754_pow+0xa40>)
 800f42e:	2000      	movs	r0, #0
 800f430:	f7ff bb31 	b.w	800ea96 <__ieee754_pow+0x3e>
 800f434:	2000      	movs	r0, #0
 800f436:	2100      	movs	r1, #0
 800f438:	f7ff bb2d 	b.w	800ea96 <__ieee754_pow+0x3e>
 800f43c:	4630      	mov	r0, r6
 800f43e:	4639      	mov	r1, r7
 800f440:	f7ff bb29 	b.w	800ea96 <__ieee754_pow+0x3e>
 800f444:	9204      	str	r2, [sp, #16]
 800f446:	f7ff bb7b 	b.w	800eb40 <__ieee754_pow+0xe8>
 800f44a:	2300      	movs	r3, #0
 800f44c:	f7ff bb65 	b.w	800eb1a <__ieee754_pow+0xc2>
 800f450:	00000000 	.word	0x00000000
 800f454:	3fe62e43 	.word	0x3fe62e43
 800f458:	fefa39ef 	.word	0xfefa39ef
 800f45c:	3fe62e42 	.word	0x3fe62e42
 800f460:	0ca86c39 	.word	0x0ca86c39
 800f464:	be205c61 	.word	0xbe205c61
 800f468:	72bea4d0 	.word	0x72bea4d0
 800f46c:	3e663769 	.word	0x3e663769
 800f470:	c5d26bf1 	.word	0xc5d26bf1
 800f474:	3ebbbd41 	.word	0x3ebbbd41
 800f478:	af25de2c 	.word	0xaf25de2c
 800f47c:	3f11566a 	.word	0x3f11566a
 800f480:	16bebd93 	.word	0x16bebd93
 800f484:	3f66c16c 	.word	0x3f66c16c
 800f488:	5555553e 	.word	0x5555553e
 800f48c:	3fc55555 	.word	0x3fc55555
 800f490:	3fe00000 	.word	0x3fe00000
 800f494:	fff00000 	.word	0xfff00000
 800f498:	3ff00000 	.word	0x3ff00000
 800f49c:	4090cbff 	.word	0x4090cbff
 800f4a0:	3f6f3400 	.word	0x3f6f3400
 800f4a4:	652b82fe 	.word	0x652b82fe
 800f4a8:	3c971547 	.word	0x3c971547
 800f4ac:	00000000 	.word	0x00000000

0800f4b0 <__ieee754_rem_pio2>:
 800f4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4b4:	ed2d 8b02 	vpush	{d8}
 800f4b8:	ec55 4b10 	vmov	r4, r5, d0
 800f4bc:	4bca      	ldr	r3, [pc, #808]	; (800f7e8 <__ieee754_rem_pio2+0x338>)
 800f4be:	b08b      	sub	sp, #44	; 0x2c
 800f4c0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f4c4:	4598      	cmp	r8, r3
 800f4c6:	4682      	mov	sl, r0
 800f4c8:	9502      	str	r5, [sp, #8]
 800f4ca:	dc08      	bgt.n	800f4de <__ieee754_rem_pio2+0x2e>
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	ed80 0b00 	vstr	d0, [r0]
 800f4d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f4d8:	f04f 0b00 	mov.w	fp, #0
 800f4dc:	e028      	b.n	800f530 <__ieee754_rem_pio2+0x80>
 800f4de:	4bc3      	ldr	r3, [pc, #780]	; (800f7ec <__ieee754_rem_pio2+0x33c>)
 800f4e0:	4598      	cmp	r8, r3
 800f4e2:	dc78      	bgt.n	800f5d6 <__ieee754_rem_pio2+0x126>
 800f4e4:	9b02      	ldr	r3, [sp, #8]
 800f4e6:	4ec2      	ldr	r6, [pc, #776]	; (800f7f0 <__ieee754_rem_pio2+0x340>)
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	ee10 0a10 	vmov	r0, s0
 800f4ee:	a3b0      	add	r3, pc, #704	; (adr r3, 800f7b0 <__ieee754_rem_pio2+0x300>)
 800f4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f4:	4629      	mov	r1, r5
 800f4f6:	dd39      	ble.n	800f56c <__ieee754_rem_pio2+0xbc>
 800f4f8:	f7f0 fece 	bl	8000298 <__aeabi_dsub>
 800f4fc:	45b0      	cmp	r8, r6
 800f4fe:	4604      	mov	r4, r0
 800f500:	460d      	mov	r5, r1
 800f502:	d01b      	beq.n	800f53c <__ieee754_rem_pio2+0x8c>
 800f504:	a3ac      	add	r3, pc, #688	; (adr r3, 800f7b8 <__ieee754_rem_pio2+0x308>)
 800f506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f50a:	f7f0 fec5 	bl	8000298 <__aeabi_dsub>
 800f50e:	4602      	mov	r2, r0
 800f510:	460b      	mov	r3, r1
 800f512:	e9ca 2300 	strd	r2, r3, [sl]
 800f516:	4620      	mov	r0, r4
 800f518:	4629      	mov	r1, r5
 800f51a:	f7f0 febd 	bl	8000298 <__aeabi_dsub>
 800f51e:	a3a6      	add	r3, pc, #664	; (adr r3, 800f7b8 <__ieee754_rem_pio2+0x308>)
 800f520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f524:	f7f0 feb8 	bl	8000298 <__aeabi_dsub>
 800f528:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f52c:	f04f 0b01 	mov.w	fp, #1
 800f530:	4658      	mov	r0, fp
 800f532:	b00b      	add	sp, #44	; 0x2c
 800f534:	ecbd 8b02 	vpop	{d8}
 800f538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f53c:	a3a0      	add	r3, pc, #640	; (adr r3, 800f7c0 <__ieee754_rem_pio2+0x310>)
 800f53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f542:	f7f0 fea9 	bl	8000298 <__aeabi_dsub>
 800f546:	a3a0      	add	r3, pc, #640	; (adr r3, 800f7c8 <__ieee754_rem_pio2+0x318>)
 800f548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f54c:	4604      	mov	r4, r0
 800f54e:	460d      	mov	r5, r1
 800f550:	f7f0 fea2 	bl	8000298 <__aeabi_dsub>
 800f554:	4602      	mov	r2, r0
 800f556:	460b      	mov	r3, r1
 800f558:	e9ca 2300 	strd	r2, r3, [sl]
 800f55c:	4620      	mov	r0, r4
 800f55e:	4629      	mov	r1, r5
 800f560:	f7f0 fe9a 	bl	8000298 <__aeabi_dsub>
 800f564:	a398      	add	r3, pc, #608	; (adr r3, 800f7c8 <__ieee754_rem_pio2+0x318>)
 800f566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f56a:	e7db      	b.n	800f524 <__ieee754_rem_pio2+0x74>
 800f56c:	f7f0 fe96 	bl	800029c <__adddf3>
 800f570:	45b0      	cmp	r8, r6
 800f572:	4604      	mov	r4, r0
 800f574:	460d      	mov	r5, r1
 800f576:	d016      	beq.n	800f5a6 <__ieee754_rem_pio2+0xf6>
 800f578:	a38f      	add	r3, pc, #572	; (adr r3, 800f7b8 <__ieee754_rem_pio2+0x308>)
 800f57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57e:	f7f0 fe8d 	bl	800029c <__adddf3>
 800f582:	4602      	mov	r2, r0
 800f584:	460b      	mov	r3, r1
 800f586:	e9ca 2300 	strd	r2, r3, [sl]
 800f58a:	4620      	mov	r0, r4
 800f58c:	4629      	mov	r1, r5
 800f58e:	f7f0 fe83 	bl	8000298 <__aeabi_dsub>
 800f592:	a389      	add	r3, pc, #548	; (adr r3, 800f7b8 <__ieee754_rem_pio2+0x308>)
 800f594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f598:	f7f0 fe80 	bl	800029c <__adddf3>
 800f59c:	f04f 3bff 	mov.w	fp, #4294967295
 800f5a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f5a4:	e7c4      	b.n	800f530 <__ieee754_rem_pio2+0x80>
 800f5a6:	a386      	add	r3, pc, #536	; (adr r3, 800f7c0 <__ieee754_rem_pio2+0x310>)
 800f5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ac:	f7f0 fe76 	bl	800029c <__adddf3>
 800f5b0:	a385      	add	r3, pc, #532	; (adr r3, 800f7c8 <__ieee754_rem_pio2+0x318>)
 800f5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b6:	4604      	mov	r4, r0
 800f5b8:	460d      	mov	r5, r1
 800f5ba:	f7f0 fe6f 	bl	800029c <__adddf3>
 800f5be:	4602      	mov	r2, r0
 800f5c0:	460b      	mov	r3, r1
 800f5c2:	e9ca 2300 	strd	r2, r3, [sl]
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	4629      	mov	r1, r5
 800f5ca:	f7f0 fe65 	bl	8000298 <__aeabi_dsub>
 800f5ce:	a37e      	add	r3, pc, #504	; (adr r3, 800f7c8 <__ieee754_rem_pio2+0x318>)
 800f5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d4:	e7e0      	b.n	800f598 <__ieee754_rem_pio2+0xe8>
 800f5d6:	4b87      	ldr	r3, [pc, #540]	; (800f7f4 <__ieee754_rem_pio2+0x344>)
 800f5d8:	4598      	cmp	r8, r3
 800f5da:	f300 80d8 	bgt.w	800f78e <__ieee754_rem_pio2+0x2de>
 800f5de:	f7fe fa9f 	bl	800db20 <fabs>
 800f5e2:	ec55 4b10 	vmov	r4, r5, d0
 800f5e6:	ee10 0a10 	vmov	r0, s0
 800f5ea:	a379      	add	r3, pc, #484	; (adr r3, 800f7d0 <__ieee754_rem_pio2+0x320>)
 800f5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5f0:	4629      	mov	r1, r5
 800f5f2:	f7f1 f809 	bl	8000608 <__aeabi_dmul>
 800f5f6:	4b80      	ldr	r3, [pc, #512]	; (800f7f8 <__ieee754_rem_pio2+0x348>)
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	f7f0 fe4f 	bl	800029c <__adddf3>
 800f5fe:	f7f1 fab3 	bl	8000b68 <__aeabi_d2iz>
 800f602:	4683      	mov	fp, r0
 800f604:	f7f0 ff96 	bl	8000534 <__aeabi_i2d>
 800f608:	4602      	mov	r2, r0
 800f60a:	460b      	mov	r3, r1
 800f60c:	ec43 2b18 	vmov	d8, r2, r3
 800f610:	a367      	add	r3, pc, #412	; (adr r3, 800f7b0 <__ieee754_rem_pio2+0x300>)
 800f612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f616:	f7f0 fff7 	bl	8000608 <__aeabi_dmul>
 800f61a:	4602      	mov	r2, r0
 800f61c:	460b      	mov	r3, r1
 800f61e:	4620      	mov	r0, r4
 800f620:	4629      	mov	r1, r5
 800f622:	f7f0 fe39 	bl	8000298 <__aeabi_dsub>
 800f626:	a364      	add	r3, pc, #400	; (adr r3, 800f7b8 <__ieee754_rem_pio2+0x308>)
 800f628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f62c:	4606      	mov	r6, r0
 800f62e:	460f      	mov	r7, r1
 800f630:	ec51 0b18 	vmov	r0, r1, d8
 800f634:	f7f0 ffe8 	bl	8000608 <__aeabi_dmul>
 800f638:	f1bb 0f1f 	cmp.w	fp, #31
 800f63c:	4604      	mov	r4, r0
 800f63e:	460d      	mov	r5, r1
 800f640:	dc0d      	bgt.n	800f65e <__ieee754_rem_pio2+0x1ae>
 800f642:	4b6e      	ldr	r3, [pc, #440]	; (800f7fc <__ieee754_rem_pio2+0x34c>)
 800f644:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f64c:	4543      	cmp	r3, r8
 800f64e:	d006      	beq.n	800f65e <__ieee754_rem_pio2+0x1ae>
 800f650:	4622      	mov	r2, r4
 800f652:	462b      	mov	r3, r5
 800f654:	4630      	mov	r0, r6
 800f656:	4639      	mov	r1, r7
 800f658:	f7f0 fe1e 	bl	8000298 <__aeabi_dsub>
 800f65c:	e00e      	b.n	800f67c <__ieee754_rem_pio2+0x1cc>
 800f65e:	462b      	mov	r3, r5
 800f660:	4622      	mov	r2, r4
 800f662:	4630      	mov	r0, r6
 800f664:	4639      	mov	r1, r7
 800f666:	f7f0 fe17 	bl	8000298 <__aeabi_dsub>
 800f66a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f66e:	9303      	str	r3, [sp, #12]
 800f670:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f674:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800f678:	2b10      	cmp	r3, #16
 800f67a:	dc02      	bgt.n	800f682 <__ieee754_rem_pio2+0x1d2>
 800f67c:	e9ca 0100 	strd	r0, r1, [sl]
 800f680:	e039      	b.n	800f6f6 <__ieee754_rem_pio2+0x246>
 800f682:	a34f      	add	r3, pc, #316	; (adr r3, 800f7c0 <__ieee754_rem_pio2+0x310>)
 800f684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f688:	ec51 0b18 	vmov	r0, r1, d8
 800f68c:	f7f0 ffbc 	bl	8000608 <__aeabi_dmul>
 800f690:	4604      	mov	r4, r0
 800f692:	460d      	mov	r5, r1
 800f694:	4602      	mov	r2, r0
 800f696:	460b      	mov	r3, r1
 800f698:	4630      	mov	r0, r6
 800f69a:	4639      	mov	r1, r7
 800f69c:	f7f0 fdfc 	bl	8000298 <__aeabi_dsub>
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	460b      	mov	r3, r1
 800f6a4:	4680      	mov	r8, r0
 800f6a6:	4689      	mov	r9, r1
 800f6a8:	4630      	mov	r0, r6
 800f6aa:	4639      	mov	r1, r7
 800f6ac:	f7f0 fdf4 	bl	8000298 <__aeabi_dsub>
 800f6b0:	4622      	mov	r2, r4
 800f6b2:	462b      	mov	r3, r5
 800f6b4:	f7f0 fdf0 	bl	8000298 <__aeabi_dsub>
 800f6b8:	a343      	add	r3, pc, #268	; (adr r3, 800f7c8 <__ieee754_rem_pio2+0x318>)
 800f6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6be:	4604      	mov	r4, r0
 800f6c0:	460d      	mov	r5, r1
 800f6c2:	ec51 0b18 	vmov	r0, r1, d8
 800f6c6:	f7f0 ff9f 	bl	8000608 <__aeabi_dmul>
 800f6ca:	4622      	mov	r2, r4
 800f6cc:	462b      	mov	r3, r5
 800f6ce:	f7f0 fde3 	bl	8000298 <__aeabi_dsub>
 800f6d2:	4602      	mov	r2, r0
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	4604      	mov	r4, r0
 800f6d8:	460d      	mov	r5, r1
 800f6da:	4640      	mov	r0, r8
 800f6dc:	4649      	mov	r1, r9
 800f6de:	f7f0 fddb 	bl	8000298 <__aeabi_dsub>
 800f6e2:	9a03      	ldr	r2, [sp, #12]
 800f6e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f6e8:	1ad3      	subs	r3, r2, r3
 800f6ea:	2b31      	cmp	r3, #49	; 0x31
 800f6ec:	dc24      	bgt.n	800f738 <__ieee754_rem_pio2+0x288>
 800f6ee:	e9ca 0100 	strd	r0, r1, [sl]
 800f6f2:	4646      	mov	r6, r8
 800f6f4:	464f      	mov	r7, r9
 800f6f6:	e9da 8900 	ldrd	r8, r9, [sl]
 800f6fa:	4630      	mov	r0, r6
 800f6fc:	4642      	mov	r2, r8
 800f6fe:	464b      	mov	r3, r9
 800f700:	4639      	mov	r1, r7
 800f702:	f7f0 fdc9 	bl	8000298 <__aeabi_dsub>
 800f706:	462b      	mov	r3, r5
 800f708:	4622      	mov	r2, r4
 800f70a:	f7f0 fdc5 	bl	8000298 <__aeabi_dsub>
 800f70e:	9b02      	ldr	r3, [sp, #8]
 800f710:	2b00      	cmp	r3, #0
 800f712:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f716:	f6bf af0b 	bge.w	800f530 <__ieee754_rem_pio2+0x80>
 800f71a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f71e:	f8ca 3004 	str.w	r3, [sl, #4]
 800f722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f726:	f8ca 8000 	str.w	r8, [sl]
 800f72a:	f8ca 0008 	str.w	r0, [sl, #8]
 800f72e:	f8ca 300c 	str.w	r3, [sl, #12]
 800f732:	f1cb 0b00 	rsb	fp, fp, #0
 800f736:	e6fb      	b.n	800f530 <__ieee754_rem_pio2+0x80>
 800f738:	a327      	add	r3, pc, #156	; (adr r3, 800f7d8 <__ieee754_rem_pio2+0x328>)
 800f73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f73e:	ec51 0b18 	vmov	r0, r1, d8
 800f742:	f7f0 ff61 	bl	8000608 <__aeabi_dmul>
 800f746:	4604      	mov	r4, r0
 800f748:	460d      	mov	r5, r1
 800f74a:	4602      	mov	r2, r0
 800f74c:	460b      	mov	r3, r1
 800f74e:	4640      	mov	r0, r8
 800f750:	4649      	mov	r1, r9
 800f752:	f7f0 fda1 	bl	8000298 <__aeabi_dsub>
 800f756:	4602      	mov	r2, r0
 800f758:	460b      	mov	r3, r1
 800f75a:	4606      	mov	r6, r0
 800f75c:	460f      	mov	r7, r1
 800f75e:	4640      	mov	r0, r8
 800f760:	4649      	mov	r1, r9
 800f762:	f7f0 fd99 	bl	8000298 <__aeabi_dsub>
 800f766:	4622      	mov	r2, r4
 800f768:	462b      	mov	r3, r5
 800f76a:	f7f0 fd95 	bl	8000298 <__aeabi_dsub>
 800f76e:	a31c      	add	r3, pc, #112	; (adr r3, 800f7e0 <__ieee754_rem_pio2+0x330>)
 800f770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f774:	4604      	mov	r4, r0
 800f776:	460d      	mov	r5, r1
 800f778:	ec51 0b18 	vmov	r0, r1, d8
 800f77c:	f7f0 ff44 	bl	8000608 <__aeabi_dmul>
 800f780:	4622      	mov	r2, r4
 800f782:	462b      	mov	r3, r5
 800f784:	f7f0 fd88 	bl	8000298 <__aeabi_dsub>
 800f788:	4604      	mov	r4, r0
 800f78a:	460d      	mov	r5, r1
 800f78c:	e760      	b.n	800f650 <__ieee754_rem_pio2+0x1a0>
 800f78e:	4b1c      	ldr	r3, [pc, #112]	; (800f800 <__ieee754_rem_pio2+0x350>)
 800f790:	4598      	cmp	r8, r3
 800f792:	dd37      	ble.n	800f804 <__ieee754_rem_pio2+0x354>
 800f794:	ee10 2a10 	vmov	r2, s0
 800f798:	462b      	mov	r3, r5
 800f79a:	4620      	mov	r0, r4
 800f79c:	4629      	mov	r1, r5
 800f79e:	f7f0 fd7b 	bl	8000298 <__aeabi_dsub>
 800f7a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f7a6:	e9ca 0100 	strd	r0, r1, [sl]
 800f7aa:	e695      	b.n	800f4d8 <__ieee754_rem_pio2+0x28>
 800f7ac:	f3af 8000 	nop.w
 800f7b0:	54400000 	.word	0x54400000
 800f7b4:	3ff921fb 	.word	0x3ff921fb
 800f7b8:	1a626331 	.word	0x1a626331
 800f7bc:	3dd0b461 	.word	0x3dd0b461
 800f7c0:	1a600000 	.word	0x1a600000
 800f7c4:	3dd0b461 	.word	0x3dd0b461
 800f7c8:	2e037073 	.word	0x2e037073
 800f7cc:	3ba3198a 	.word	0x3ba3198a
 800f7d0:	6dc9c883 	.word	0x6dc9c883
 800f7d4:	3fe45f30 	.word	0x3fe45f30
 800f7d8:	2e000000 	.word	0x2e000000
 800f7dc:	3ba3198a 	.word	0x3ba3198a
 800f7e0:	252049c1 	.word	0x252049c1
 800f7e4:	397b839a 	.word	0x397b839a
 800f7e8:	3fe921fb 	.word	0x3fe921fb
 800f7ec:	4002d97b 	.word	0x4002d97b
 800f7f0:	3ff921fb 	.word	0x3ff921fb
 800f7f4:	413921fb 	.word	0x413921fb
 800f7f8:	3fe00000 	.word	0x3fe00000
 800f7fc:	08011468 	.word	0x08011468
 800f800:	7fefffff 	.word	0x7fefffff
 800f804:	ea4f 5628 	mov.w	r6, r8, asr #20
 800f808:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800f80c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800f810:	4620      	mov	r0, r4
 800f812:	460d      	mov	r5, r1
 800f814:	f7f1 f9a8 	bl	8000b68 <__aeabi_d2iz>
 800f818:	f7f0 fe8c 	bl	8000534 <__aeabi_i2d>
 800f81c:	4602      	mov	r2, r0
 800f81e:	460b      	mov	r3, r1
 800f820:	4620      	mov	r0, r4
 800f822:	4629      	mov	r1, r5
 800f824:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f828:	f7f0 fd36 	bl	8000298 <__aeabi_dsub>
 800f82c:	4b21      	ldr	r3, [pc, #132]	; (800f8b4 <__ieee754_rem_pio2+0x404>)
 800f82e:	2200      	movs	r2, #0
 800f830:	f7f0 feea 	bl	8000608 <__aeabi_dmul>
 800f834:	460d      	mov	r5, r1
 800f836:	4604      	mov	r4, r0
 800f838:	f7f1 f996 	bl	8000b68 <__aeabi_d2iz>
 800f83c:	f7f0 fe7a 	bl	8000534 <__aeabi_i2d>
 800f840:	4602      	mov	r2, r0
 800f842:	460b      	mov	r3, r1
 800f844:	4620      	mov	r0, r4
 800f846:	4629      	mov	r1, r5
 800f848:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f84c:	f7f0 fd24 	bl	8000298 <__aeabi_dsub>
 800f850:	4b18      	ldr	r3, [pc, #96]	; (800f8b4 <__ieee754_rem_pio2+0x404>)
 800f852:	2200      	movs	r2, #0
 800f854:	f7f0 fed8 	bl	8000608 <__aeabi_dmul>
 800f858:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f85c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800f860:	2703      	movs	r7, #3
 800f862:	2400      	movs	r4, #0
 800f864:	2500      	movs	r5, #0
 800f866:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800f86a:	4622      	mov	r2, r4
 800f86c:	462b      	mov	r3, r5
 800f86e:	46b9      	mov	r9, r7
 800f870:	3f01      	subs	r7, #1
 800f872:	f7f1 f931 	bl	8000ad8 <__aeabi_dcmpeq>
 800f876:	2800      	cmp	r0, #0
 800f878:	d1f5      	bne.n	800f866 <__ieee754_rem_pio2+0x3b6>
 800f87a:	4b0f      	ldr	r3, [pc, #60]	; (800f8b8 <__ieee754_rem_pio2+0x408>)
 800f87c:	9301      	str	r3, [sp, #4]
 800f87e:	2302      	movs	r3, #2
 800f880:	9300      	str	r3, [sp, #0]
 800f882:	4632      	mov	r2, r6
 800f884:	464b      	mov	r3, r9
 800f886:	4651      	mov	r1, sl
 800f888:	a804      	add	r0, sp, #16
 800f88a:	f000 f9a1 	bl	800fbd0 <__kernel_rem_pio2>
 800f88e:	9b02      	ldr	r3, [sp, #8]
 800f890:	2b00      	cmp	r3, #0
 800f892:	4683      	mov	fp, r0
 800f894:	f6bf ae4c 	bge.w	800f530 <__ieee754_rem_pio2+0x80>
 800f898:	e9da 2100 	ldrd	r2, r1, [sl]
 800f89c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f8a0:	e9ca 2300 	strd	r2, r3, [sl]
 800f8a4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800f8a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f8ac:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800f8b0:	e73f      	b.n	800f732 <__ieee754_rem_pio2+0x282>
 800f8b2:	bf00      	nop
 800f8b4:	41700000 	.word	0x41700000
 800f8b8:	080114e8 	.word	0x080114e8
 800f8bc:	00000000 	.word	0x00000000

0800f8c0 <scalbn>:
 800f8c0:	b570      	push	{r4, r5, r6, lr}
 800f8c2:	ec55 4b10 	vmov	r4, r5, d0
 800f8c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f8ca:	4606      	mov	r6, r0
 800f8cc:	462b      	mov	r3, r5
 800f8ce:	b999      	cbnz	r1, 800f8f8 <scalbn+0x38>
 800f8d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f8d4:	4323      	orrs	r3, r4
 800f8d6:	d03f      	beq.n	800f958 <scalbn+0x98>
 800f8d8:	4b35      	ldr	r3, [pc, #212]	; (800f9b0 <scalbn+0xf0>)
 800f8da:	4629      	mov	r1, r5
 800f8dc:	ee10 0a10 	vmov	r0, s0
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	f7f0 fe91 	bl	8000608 <__aeabi_dmul>
 800f8e6:	4b33      	ldr	r3, [pc, #204]	; (800f9b4 <scalbn+0xf4>)
 800f8e8:	429e      	cmp	r6, r3
 800f8ea:	4604      	mov	r4, r0
 800f8ec:	460d      	mov	r5, r1
 800f8ee:	da10      	bge.n	800f912 <scalbn+0x52>
 800f8f0:	a327      	add	r3, pc, #156	; (adr r3, 800f990 <scalbn+0xd0>)
 800f8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f6:	e01f      	b.n	800f938 <scalbn+0x78>
 800f8f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f8fc:	4291      	cmp	r1, r2
 800f8fe:	d10c      	bne.n	800f91a <scalbn+0x5a>
 800f900:	ee10 2a10 	vmov	r2, s0
 800f904:	4620      	mov	r0, r4
 800f906:	4629      	mov	r1, r5
 800f908:	f7f0 fcc8 	bl	800029c <__adddf3>
 800f90c:	4604      	mov	r4, r0
 800f90e:	460d      	mov	r5, r1
 800f910:	e022      	b.n	800f958 <scalbn+0x98>
 800f912:	460b      	mov	r3, r1
 800f914:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f918:	3936      	subs	r1, #54	; 0x36
 800f91a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f91e:	4296      	cmp	r6, r2
 800f920:	dd0d      	ble.n	800f93e <scalbn+0x7e>
 800f922:	2d00      	cmp	r5, #0
 800f924:	a11c      	add	r1, pc, #112	; (adr r1, 800f998 <scalbn+0xd8>)
 800f926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f92a:	da02      	bge.n	800f932 <scalbn+0x72>
 800f92c:	a11c      	add	r1, pc, #112	; (adr r1, 800f9a0 <scalbn+0xe0>)
 800f92e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f932:	a319      	add	r3, pc, #100	; (adr r3, 800f998 <scalbn+0xd8>)
 800f934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f938:	f7f0 fe66 	bl	8000608 <__aeabi_dmul>
 800f93c:	e7e6      	b.n	800f90c <scalbn+0x4c>
 800f93e:	1872      	adds	r2, r6, r1
 800f940:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f944:	428a      	cmp	r2, r1
 800f946:	dcec      	bgt.n	800f922 <scalbn+0x62>
 800f948:	2a00      	cmp	r2, #0
 800f94a:	dd08      	ble.n	800f95e <scalbn+0x9e>
 800f94c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f950:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f954:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f958:	ec45 4b10 	vmov	d0, r4, r5
 800f95c:	bd70      	pop	{r4, r5, r6, pc}
 800f95e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f962:	da08      	bge.n	800f976 <scalbn+0xb6>
 800f964:	2d00      	cmp	r5, #0
 800f966:	a10a      	add	r1, pc, #40	; (adr r1, 800f990 <scalbn+0xd0>)
 800f968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f96c:	dac0      	bge.n	800f8f0 <scalbn+0x30>
 800f96e:	a10e      	add	r1, pc, #56	; (adr r1, 800f9a8 <scalbn+0xe8>)
 800f970:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f974:	e7bc      	b.n	800f8f0 <scalbn+0x30>
 800f976:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f97a:	3236      	adds	r2, #54	; 0x36
 800f97c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f980:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f984:	4620      	mov	r0, r4
 800f986:	4b0c      	ldr	r3, [pc, #48]	; (800f9b8 <scalbn+0xf8>)
 800f988:	2200      	movs	r2, #0
 800f98a:	e7d5      	b.n	800f938 <scalbn+0x78>
 800f98c:	f3af 8000 	nop.w
 800f990:	c2f8f359 	.word	0xc2f8f359
 800f994:	01a56e1f 	.word	0x01a56e1f
 800f998:	8800759c 	.word	0x8800759c
 800f99c:	7e37e43c 	.word	0x7e37e43c
 800f9a0:	8800759c 	.word	0x8800759c
 800f9a4:	fe37e43c 	.word	0xfe37e43c
 800f9a8:	c2f8f359 	.word	0xc2f8f359
 800f9ac:	81a56e1f 	.word	0x81a56e1f
 800f9b0:	43500000 	.word	0x43500000
 800f9b4:	ffff3cb0 	.word	0xffff3cb0
 800f9b8:	3c900000 	.word	0x3c900000

0800f9bc <with_errno>:
 800f9bc:	b570      	push	{r4, r5, r6, lr}
 800f9be:	4604      	mov	r4, r0
 800f9c0:	460d      	mov	r5, r1
 800f9c2:	4616      	mov	r6, r2
 800f9c4:	f7fb fe26 	bl	800b614 <__errno>
 800f9c8:	4629      	mov	r1, r5
 800f9ca:	6006      	str	r6, [r0, #0]
 800f9cc:	4620      	mov	r0, r4
 800f9ce:	bd70      	pop	{r4, r5, r6, pc}

0800f9d0 <xflow>:
 800f9d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f9d2:	4614      	mov	r4, r2
 800f9d4:	461d      	mov	r5, r3
 800f9d6:	b108      	cbz	r0, 800f9dc <xflow+0xc>
 800f9d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f9dc:	e9cd 2300 	strd	r2, r3, [sp]
 800f9e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9e4:	4620      	mov	r0, r4
 800f9e6:	4629      	mov	r1, r5
 800f9e8:	f7f0 fe0e 	bl	8000608 <__aeabi_dmul>
 800f9ec:	2222      	movs	r2, #34	; 0x22
 800f9ee:	b003      	add	sp, #12
 800f9f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f9f4:	f7ff bfe2 	b.w	800f9bc <with_errno>

0800f9f8 <__math_uflow>:
 800f9f8:	b508      	push	{r3, lr}
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fa00:	f7ff ffe6 	bl	800f9d0 <xflow>
 800fa04:	ec41 0b10 	vmov	d0, r0, r1
 800fa08:	bd08      	pop	{r3, pc}

0800fa0a <__math_oflow>:
 800fa0a:	b508      	push	{r3, lr}
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800fa12:	f7ff ffdd 	bl	800f9d0 <xflow>
 800fa16:	ec41 0b10 	vmov	d0, r0, r1
 800fa1a:	bd08      	pop	{r3, pc}

0800fa1c <__ieee754_sqrt>:
 800fa1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa20:	ec55 4b10 	vmov	r4, r5, d0
 800fa24:	4e67      	ldr	r6, [pc, #412]	; (800fbc4 <__ieee754_sqrt+0x1a8>)
 800fa26:	43ae      	bics	r6, r5
 800fa28:	ee10 0a10 	vmov	r0, s0
 800fa2c:	ee10 2a10 	vmov	r2, s0
 800fa30:	4629      	mov	r1, r5
 800fa32:	462b      	mov	r3, r5
 800fa34:	d10d      	bne.n	800fa52 <__ieee754_sqrt+0x36>
 800fa36:	f7f0 fde7 	bl	8000608 <__aeabi_dmul>
 800fa3a:	4602      	mov	r2, r0
 800fa3c:	460b      	mov	r3, r1
 800fa3e:	4620      	mov	r0, r4
 800fa40:	4629      	mov	r1, r5
 800fa42:	f7f0 fc2b 	bl	800029c <__adddf3>
 800fa46:	4604      	mov	r4, r0
 800fa48:	460d      	mov	r5, r1
 800fa4a:	ec45 4b10 	vmov	d0, r4, r5
 800fa4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa52:	2d00      	cmp	r5, #0
 800fa54:	dc0b      	bgt.n	800fa6e <__ieee754_sqrt+0x52>
 800fa56:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fa5a:	4326      	orrs	r6, r4
 800fa5c:	d0f5      	beq.n	800fa4a <__ieee754_sqrt+0x2e>
 800fa5e:	b135      	cbz	r5, 800fa6e <__ieee754_sqrt+0x52>
 800fa60:	f7f0 fc1a 	bl	8000298 <__aeabi_dsub>
 800fa64:	4602      	mov	r2, r0
 800fa66:	460b      	mov	r3, r1
 800fa68:	f7f0 fef8 	bl	800085c <__aeabi_ddiv>
 800fa6c:	e7eb      	b.n	800fa46 <__ieee754_sqrt+0x2a>
 800fa6e:	1509      	asrs	r1, r1, #20
 800fa70:	f000 808d 	beq.w	800fb8e <__ieee754_sqrt+0x172>
 800fa74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa78:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800fa7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fa80:	07c9      	lsls	r1, r1, #31
 800fa82:	bf5c      	itt	pl
 800fa84:	005b      	lslpl	r3, r3, #1
 800fa86:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800fa8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fa8e:	bf58      	it	pl
 800fa90:	0052      	lslpl	r2, r2, #1
 800fa92:	2500      	movs	r5, #0
 800fa94:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fa98:	1076      	asrs	r6, r6, #1
 800fa9a:	0052      	lsls	r2, r2, #1
 800fa9c:	f04f 0e16 	mov.w	lr, #22
 800faa0:	46ac      	mov	ip, r5
 800faa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800faa6:	eb0c 0001 	add.w	r0, ip, r1
 800faaa:	4298      	cmp	r0, r3
 800faac:	bfde      	ittt	le
 800faae:	1a1b      	suble	r3, r3, r0
 800fab0:	eb00 0c01 	addle.w	ip, r0, r1
 800fab4:	186d      	addle	r5, r5, r1
 800fab6:	005b      	lsls	r3, r3, #1
 800fab8:	f1be 0e01 	subs.w	lr, lr, #1
 800fabc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fac0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fac4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fac8:	d1ed      	bne.n	800faa6 <__ieee754_sqrt+0x8a>
 800faca:	4674      	mov	r4, lr
 800facc:	2720      	movs	r7, #32
 800face:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800fad2:	4563      	cmp	r3, ip
 800fad4:	eb01 000e 	add.w	r0, r1, lr
 800fad8:	dc02      	bgt.n	800fae0 <__ieee754_sqrt+0xc4>
 800fada:	d113      	bne.n	800fb04 <__ieee754_sqrt+0xe8>
 800fadc:	4290      	cmp	r0, r2
 800fade:	d811      	bhi.n	800fb04 <__ieee754_sqrt+0xe8>
 800fae0:	2800      	cmp	r0, #0
 800fae2:	eb00 0e01 	add.w	lr, r0, r1
 800fae6:	da57      	bge.n	800fb98 <__ieee754_sqrt+0x17c>
 800fae8:	f1be 0f00 	cmp.w	lr, #0
 800faec:	db54      	blt.n	800fb98 <__ieee754_sqrt+0x17c>
 800faee:	f10c 0801 	add.w	r8, ip, #1
 800faf2:	eba3 030c 	sub.w	r3, r3, ip
 800faf6:	4290      	cmp	r0, r2
 800faf8:	bf88      	it	hi
 800fafa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fafe:	1a12      	subs	r2, r2, r0
 800fb00:	440c      	add	r4, r1
 800fb02:	46c4      	mov	ip, r8
 800fb04:	005b      	lsls	r3, r3, #1
 800fb06:	3f01      	subs	r7, #1
 800fb08:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fb0c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fb10:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fb14:	d1dd      	bne.n	800fad2 <__ieee754_sqrt+0xb6>
 800fb16:	4313      	orrs	r3, r2
 800fb18:	d01b      	beq.n	800fb52 <__ieee754_sqrt+0x136>
 800fb1a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800fbc8 <__ieee754_sqrt+0x1ac>
 800fb1e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800fbcc <__ieee754_sqrt+0x1b0>
 800fb22:	e9da 0100 	ldrd	r0, r1, [sl]
 800fb26:	e9db 2300 	ldrd	r2, r3, [fp]
 800fb2a:	f7f0 fbb5 	bl	8000298 <__aeabi_dsub>
 800fb2e:	e9da 8900 	ldrd	r8, r9, [sl]
 800fb32:	4602      	mov	r2, r0
 800fb34:	460b      	mov	r3, r1
 800fb36:	4640      	mov	r0, r8
 800fb38:	4649      	mov	r1, r9
 800fb3a:	f7f0 ffe1 	bl	8000b00 <__aeabi_dcmple>
 800fb3e:	b140      	cbz	r0, 800fb52 <__ieee754_sqrt+0x136>
 800fb40:	f1b4 3fff 	cmp.w	r4, #4294967295
 800fb44:	e9da 0100 	ldrd	r0, r1, [sl]
 800fb48:	e9db 2300 	ldrd	r2, r3, [fp]
 800fb4c:	d126      	bne.n	800fb9c <__ieee754_sqrt+0x180>
 800fb4e:	3501      	adds	r5, #1
 800fb50:	463c      	mov	r4, r7
 800fb52:	106a      	asrs	r2, r5, #1
 800fb54:	0863      	lsrs	r3, r4, #1
 800fb56:	07e9      	lsls	r1, r5, #31
 800fb58:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800fb5c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800fb60:	bf48      	it	mi
 800fb62:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800fb66:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800fb6a:	461c      	mov	r4, r3
 800fb6c:	e76d      	b.n	800fa4a <__ieee754_sqrt+0x2e>
 800fb6e:	0ad3      	lsrs	r3, r2, #11
 800fb70:	3815      	subs	r0, #21
 800fb72:	0552      	lsls	r2, r2, #21
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d0fa      	beq.n	800fb6e <__ieee754_sqrt+0x152>
 800fb78:	02dc      	lsls	r4, r3, #11
 800fb7a:	d50a      	bpl.n	800fb92 <__ieee754_sqrt+0x176>
 800fb7c:	f1c1 0420 	rsb	r4, r1, #32
 800fb80:	fa22 f404 	lsr.w	r4, r2, r4
 800fb84:	1e4d      	subs	r5, r1, #1
 800fb86:	408a      	lsls	r2, r1
 800fb88:	4323      	orrs	r3, r4
 800fb8a:	1b41      	subs	r1, r0, r5
 800fb8c:	e772      	b.n	800fa74 <__ieee754_sqrt+0x58>
 800fb8e:	4608      	mov	r0, r1
 800fb90:	e7f0      	b.n	800fb74 <__ieee754_sqrt+0x158>
 800fb92:	005b      	lsls	r3, r3, #1
 800fb94:	3101      	adds	r1, #1
 800fb96:	e7ef      	b.n	800fb78 <__ieee754_sqrt+0x15c>
 800fb98:	46e0      	mov	r8, ip
 800fb9a:	e7aa      	b.n	800faf2 <__ieee754_sqrt+0xd6>
 800fb9c:	f7f0 fb7e 	bl	800029c <__adddf3>
 800fba0:	e9da 8900 	ldrd	r8, r9, [sl]
 800fba4:	4602      	mov	r2, r0
 800fba6:	460b      	mov	r3, r1
 800fba8:	4640      	mov	r0, r8
 800fbaa:	4649      	mov	r1, r9
 800fbac:	f7f0 ff9e 	bl	8000aec <__aeabi_dcmplt>
 800fbb0:	b120      	cbz	r0, 800fbbc <__ieee754_sqrt+0x1a0>
 800fbb2:	1ca0      	adds	r0, r4, #2
 800fbb4:	bf08      	it	eq
 800fbb6:	3501      	addeq	r5, #1
 800fbb8:	3402      	adds	r4, #2
 800fbba:	e7ca      	b.n	800fb52 <__ieee754_sqrt+0x136>
 800fbbc:	3401      	adds	r4, #1
 800fbbe:	f024 0401 	bic.w	r4, r4, #1
 800fbc2:	e7c6      	b.n	800fb52 <__ieee754_sqrt+0x136>
 800fbc4:	7ff00000 	.word	0x7ff00000
 800fbc8:	20001440 	.word	0x20001440
 800fbcc:	20001448 	.word	0x20001448

0800fbd0 <__kernel_rem_pio2>:
 800fbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbd4:	ed2d 8b02 	vpush	{d8}
 800fbd8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800fbdc:	f112 0f14 	cmn.w	r2, #20
 800fbe0:	9306      	str	r3, [sp, #24]
 800fbe2:	9104      	str	r1, [sp, #16]
 800fbe4:	4bc2      	ldr	r3, [pc, #776]	; (800fef0 <__kernel_rem_pio2+0x320>)
 800fbe6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800fbe8:	9009      	str	r0, [sp, #36]	; 0x24
 800fbea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fbee:	9300      	str	r3, [sp, #0]
 800fbf0:	9b06      	ldr	r3, [sp, #24]
 800fbf2:	f103 33ff 	add.w	r3, r3, #4294967295
 800fbf6:	bfa8      	it	ge
 800fbf8:	1ed4      	subge	r4, r2, #3
 800fbfa:	9305      	str	r3, [sp, #20]
 800fbfc:	bfb2      	itee	lt
 800fbfe:	2400      	movlt	r4, #0
 800fc00:	2318      	movge	r3, #24
 800fc02:	fb94 f4f3 	sdivge	r4, r4, r3
 800fc06:	f06f 0317 	mvn.w	r3, #23
 800fc0a:	fb04 3303 	mla	r3, r4, r3, r3
 800fc0e:	eb03 0a02 	add.w	sl, r3, r2
 800fc12:	9b00      	ldr	r3, [sp, #0]
 800fc14:	9a05      	ldr	r2, [sp, #20]
 800fc16:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800fee0 <__kernel_rem_pio2+0x310>
 800fc1a:	eb03 0802 	add.w	r8, r3, r2
 800fc1e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800fc20:	1aa7      	subs	r7, r4, r2
 800fc22:	ae20      	add	r6, sp, #128	; 0x80
 800fc24:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800fc28:	2500      	movs	r5, #0
 800fc2a:	4545      	cmp	r5, r8
 800fc2c:	dd13      	ble.n	800fc56 <__kernel_rem_pio2+0x86>
 800fc2e:	9b06      	ldr	r3, [sp, #24]
 800fc30:	aa20      	add	r2, sp, #128	; 0x80
 800fc32:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800fc36:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800fc3a:	f04f 0800 	mov.w	r8, #0
 800fc3e:	9b00      	ldr	r3, [sp, #0]
 800fc40:	4598      	cmp	r8, r3
 800fc42:	dc31      	bgt.n	800fca8 <__kernel_rem_pio2+0xd8>
 800fc44:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800fee0 <__kernel_rem_pio2+0x310>
 800fc48:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800fc4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fc50:	462f      	mov	r7, r5
 800fc52:	2600      	movs	r6, #0
 800fc54:	e01b      	b.n	800fc8e <__kernel_rem_pio2+0xbe>
 800fc56:	42ef      	cmn	r7, r5
 800fc58:	d407      	bmi.n	800fc6a <__kernel_rem_pio2+0x9a>
 800fc5a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800fc5e:	f7f0 fc69 	bl	8000534 <__aeabi_i2d>
 800fc62:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fc66:	3501      	adds	r5, #1
 800fc68:	e7df      	b.n	800fc2a <__kernel_rem_pio2+0x5a>
 800fc6a:	ec51 0b18 	vmov	r0, r1, d8
 800fc6e:	e7f8      	b.n	800fc62 <__kernel_rem_pio2+0x92>
 800fc70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc74:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fc78:	f7f0 fcc6 	bl	8000608 <__aeabi_dmul>
 800fc7c:	4602      	mov	r2, r0
 800fc7e:	460b      	mov	r3, r1
 800fc80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc84:	f7f0 fb0a 	bl	800029c <__adddf3>
 800fc88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc8c:	3601      	adds	r6, #1
 800fc8e:	9b05      	ldr	r3, [sp, #20]
 800fc90:	429e      	cmp	r6, r3
 800fc92:	f1a7 0708 	sub.w	r7, r7, #8
 800fc96:	ddeb      	ble.n	800fc70 <__kernel_rem_pio2+0xa0>
 800fc98:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fc9c:	f108 0801 	add.w	r8, r8, #1
 800fca0:	ecab 7b02 	vstmia	fp!, {d7}
 800fca4:	3508      	adds	r5, #8
 800fca6:	e7ca      	b.n	800fc3e <__kernel_rem_pio2+0x6e>
 800fca8:	9b00      	ldr	r3, [sp, #0]
 800fcaa:	aa0c      	add	r2, sp, #48	; 0x30
 800fcac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fcb0:	930b      	str	r3, [sp, #44]	; 0x2c
 800fcb2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800fcb4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fcb8:	9c00      	ldr	r4, [sp, #0]
 800fcba:	930a      	str	r3, [sp, #40]	; 0x28
 800fcbc:	00e3      	lsls	r3, r4, #3
 800fcbe:	9308      	str	r3, [sp, #32]
 800fcc0:	ab98      	add	r3, sp, #608	; 0x260
 800fcc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fcc6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800fcca:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800fcce:	ab70      	add	r3, sp, #448	; 0x1c0
 800fcd0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800fcd4:	46c3      	mov	fp, r8
 800fcd6:	46a1      	mov	r9, r4
 800fcd8:	f1b9 0f00 	cmp.w	r9, #0
 800fcdc:	f1a5 0508 	sub.w	r5, r5, #8
 800fce0:	dc77      	bgt.n	800fdd2 <__kernel_rem_pio2+0x202>
 800fce2:	ec47 6b10 	vmov	d0, r6, r7
 800fce6:	4650      	mov	r0, sl
 800fce8:	f7ff fdea 	bl	800f8c0 <scalbn>
 800fcec:	ec57 6b10 	vmov	r6, r7, d0
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800fcf6:	ee10 0a10 	vmov	r0, s0
 800fcfa:	4639      	mov	r1, r7
 800fcfc:	f7f0 fc84 	bl	8000608 <__aeabi_dmul>
 800fd00:	ec41 0b10 	vmov	d0, r0, r1
 800fd04:	f7fd ffb8 	bl	800dc78 <floor>
 800fd08:	4b7a      	ldr	r3, [pc, #488]	; (800fef4 <__kernel_rem_pio2+0x324>)
 800fd0a:	ec51 0b10 	vmov	r0, r1, d0
 800fd0e:	2200      	movs	r2, #0
 800fd10:	f7f0 fc7a 	bl	8000608 <__aeabi_dmul>
 800fd14:	4602      	mov	r2, r0
 800fd16:	460b      	mov	r3, r1
 800fd18:	4630      	mov	r0, r6
 800fd1a:	4639      	mov	r1, r7
 800fd1c:	f7f0 fabc 	bl	8000298 <__aeabi_dsub>
 800fd20:	460f      	mov	r7, r1
 800fd22:	4606      	mov	r6, r0
 800fd24:	f7f0 ff20 	bl	8000b68 <__aeabi_d2iz>
 800fd28:	9002      	str	r0, [sp, #8]
 800fd2a:	f7f0 fc03 	bl	8000534 <__aeabi_i2d>
 800fd2e:	4602      	mov	r2, r0
 800fd30:	460b      	mov	r3, r1
 800fd32:	4630      	mov	r0, r6
 800fd34:	4639      	mov	r1, r7
 800fd36:	f7f0 faaf 	bl	8000298 <__aeabi_dsub>
 800fd3a:	f1ba 0f00 	cmp.w	sl, #0
 800fd3e:	4606      	mov	r6, r0
 800fd40:	460f      	mov	r7, r1
 800fd42:	dd6d      	ble.n	800fe20 <__kernel_rem_pio2+0x250>
 800fd44:	1e61      	subs	r1, r4, #1
 800fd46:	ab0c      	add	r3, sp, #48	; 0x30
 800fd48:	9d02      	ldr	r5, [sp, #8]
 800fd4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fd4e:	f1ca 0018 	rsb	r0, sl, #24
 800fd52:	fa43 f200 	asr.w	r2, r3, r0
 800fd56:	4415      	add	r5, r2
 800fd58:	4082      	lsls	r2, r0
 800fd5a:	1a9b      	subs	r3, r3, r2
 800fd5c:	aa0c      	add	r2, sp, #48	; 0x30
 800fd5e:	9502      	str	r5, [sp, #8]
 800fd60:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800fd64:	f1ca 0217 	rsb	r2, sl, #23
 800fd68:	fa43 fb02 	asr.w	fp, r3, r2
 800fd6c:	f1bb 0f00 	cmp.w	fp, #0
 800fd70:	dd65      	ble.n	800fe3e <__kernel_rem_pio2+0x26e>
 800fd72:	9b02      	ldr	r3, [sp, #8]
 800fd74:	2200      	movs	r2, #0
 800fd76:	3301      	adds	r3, #1
 800fd78:	9302      	str	r3, [sp, #8]
 800fd7a:	4615      	mov	r5, r2
 800fd7c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800fd80:	4294      	cmp	r4, r2
 800fd82:	f300 809f 	bgt.w	800fec4 <__kernel_rem_pio2+0x2f4>
 800fd86:	f1ba 0f00 	cmp.w	sl, #0
 800fd8a:	dd07      	ble.n	800fd9c <__kernel_rem_pio2+0x1cc>
 800fd8c:	f1ba 0f01 	cmp.w	sl, #1
 800fd90:	f000 80c1 	beq.w	800ff16 <__kernel_rem_pio2+0x346>
 800fd94:	f1ba 0f02 	cmp.w	sl, #2
 800fd98:	f000 80c7 	beq.w	800ff2a <__kernel_rem_pio2+0x35a>
 800fd9c:	f1bb 0f02 	cmp.w	fp, #2
 800fda0:	d14d      	bne.n	800fe3e <__kernel_rem_pio2+0x26e>
 800fda2:	4632      	mov	r2, r6
 800fda4:	463b      	mov	r3, r7
 800fda6:	4954      	ldr	r1, [pc, #336]	; (800fef8 <__kernel_rem_pio2+0x328>)
 800fda8:	2000      	movs	r0, #0
 800fdaa:	f7f0 fa75 	bl	8000298 <__aeabi_dsub>
 800fdae:	4606      	mov	r6, r0
 800fdb0:	460f      	mov	r7, r1
 800fdb2:	2d00      	cmp	r5, #0
 800fdb4:	d043      	beq.n	800fe3e <__kernel_rem_pio2+0x26e>
 800fdb6:	4650      	mov	r0, sl
 800fdb8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800fee8 <__kernel_rem_pio2+0x318>
 800fdbc:	f7ff fd80 	bl	800f8c0 <scalbn>
 800fdc0:	4630      	mov	r0, r6
 800fdc2:	4639      	mov	r1, r7
 800fdc4:	ec53 2b10 	vmov	r2, r3, d0
 800fdc8:	f7f0 fa66 	bl	8000298 <__aeabi_dsub>
 800fdcc:	4606      	mov	r6, r0
 800fdce:	460f      	mov	r7, r1
 800fdd0:	e035      	b.n	800fe3e <__kernel_rem_pio2+0x26e>
 800fdd2:	4b4a      	ldr	r3, [pc, #296]	; (800fefc <__kernel_rem_pio2+0x32c>)
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	4630      	mov	r0, r6
 800fdd8:	4639      	mov	r1, r7
 800fdda:	f7f0 fc15 	bl	8000608 <__aeabi_dmul>
 800fdde:	f7f0 fec3 	bl	8000b68 <__aeabi_d2iz>
 800fde2:	f7f0 fba7 	bl	8000534 <__aeabi_i2d>
 800fde6:	4602      	mov	r2, r0
 800fde8:	460b      	mov	r3, r1
 800fdea:	ec43 2b18 	vmov	d8, r2, r3
 800fdee:	4b44      	ldr	r3, [pc, #272]	; (800ff00 <__kernel_rem_pio2+0x330>)
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	f7f0 fc09 	bl	8000608 <__aeabi_dmul>
 800fdf6:	4602      	mov	r2, r0
 800fdf8:	460b      	mov	r3, r1
 800fdfa:	4630      	mov	r0, r6
 800fdfc:	4639      	mov	r1, r7
 800fdfe:	f7f0 fa4b 	bl	8000298 <__aeabi_dsub>
 800fe02:	f7f0 feb1 	bl	8000b68 <__aeabi_d2iz>
 800fe06:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fe0a:	f84b 0b04 	str.w	r0, [fp], #4
 800fe0e:	ec51 0b18 	vmov	r0, r1, d8
 800fe12:	f7f0 fa43 	bl	800029c <__adddf3>
 800fe16:	f109 39ff 	add.w	r9, r9, #4294967295
 800fe1a:	4606      	mov	r6, r0
 800fe1c:	460f      	mov	r7, r1
 800fe1e:	e75b      	b.n	800fcd8 <__kernel_rem_pio2+0x108>
 800fe20:	d106      	bne.n	800fe30 <__kernel_rem_pio2+0x260>
 800fe22:	1e63      	subs	r3, r4, #1
 800fe24:	aa0c      	add	r2, sp, #48	; 0x30
 800fe26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe2a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800fe2e:	e79d      	b.n	800fd6c <__kernel_rem_pio2+0x19c>
 800fe30:	4b34      	ldr	r3, [pc, #208]	; (800ff04 <__kernel_rem_pio2+0x334>)
 800fe32:	2200      	movs	r2, #0
 800fe34:	f7f0 fe6e 	bl	8000b14 <__aeabi_dcmpge>
 800fe38:	2800      	cmp	r0, #0
 800fe3a:	d140      	bne.n	800febe <__kernel_rem_pio2+0x2ee>
 800fe3c:	4683      	mov	fp, r0
 800fe3e:	2200      	movs	r2, #0
 800fe40:	2300      	movs	r3, #0
 800fe42:	4630      	mov	r0, r6
 800fe44:	4639      	mov	r1, r7
 800fe46:	f7f0 fe47 	bl	8000ad8 <__aeabi_dcmpeq>
 800fe4a:	2800      	cmp	r0, #0
 800fe4c:	f000 80c1 	beq.w	800ffd2 <__kernel_rem_pio2+0x402>
 800fe50:	1e65      	subs	r5, r4, #1
 800fe52:	462b      	mov	r3, r5
 800fe54:	2200      	movs	r2, #0
 800fe56:	9900      	ldr	r1, [sp, #0]
 800fe58:	428b      	cmp	r3, r1
 800fe5a:	da6d      	bge.n	800ff38 <__kernel_rem_pio2+0x368>
 800fe5c:	2a00      	cmp	r2, #0
 800fe5e:	f000 808a 	beq.w	800ff76 <__kernel_rem_pio2+0x3a6>
 800fe62:	ab0c      	add	r3, sp, #48	; 0x30
 800fe64:	f1aa 0a18 	sub.w	sl, sl, #24
 800fe68:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	f000 80ae 	beq.w	800ffce <__kernel_rem_pio2+0x3fe>
 800fe72:	4650      	mov	r0, sl
 800fe74:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800fee8 <__kernel_rem_pio2+0x318>
 800fe78:	f7ff fd22 	bl	800f8c0 <scalbn>
 800fe7c:	1c6b      	adds	r3, r5, #1
 800fe7e:	00da      	lsls	r2, r3, #3
 800fe80:	9205      	str	r2, [sp, #20]
 800fe82:	ec57 6b10 	vmov	r6, r7, d0
 800fe86:	aa70      	add	r2, sp, #448	; 0x1c0
 800fe88:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800fefc <__kernel_rem_pio2+0x32c>
 800fe8c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800fe90:	462c      	mov	r4, r5
 800fe92:	f04f 0800 	mov.w	r8, #0
 800fe96:	2c00      	cmp	r4, #0
 800fe98:	f280 80d4 	bge.w	8010044 <__kernel_rem_pio2+0x474>
 800fe9c:	462c      	mov	r4, r5
 800fe9e:	2c00      	cmp	r4, #0
 800fea0:	f2c0 8102 	blt.w	80100a8 <__kernel_rem_pio2+0x4d8>
 800fea4:	4b18      	ldr	r3, [pc, #96]	; (800ff08 <__kernel_rem_pio2+0x338>)
 800fea6:	461e      	mov	r6, r3
 800fea8:	ab70      	add	r3, sp, #448	; 0x1c0
 800feaa:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800feae:	1b2b      	subs	r3, r5, r4
 800feb0:	f04f 0900 	mov.w	r9, #0
 800feb4:	f04f 0a00 	mov.w	sl, #0
 800feb8:	2700      	movs	r7, #0
 800feba:	9306      	str	r3, [sp, #24]
 800febc:	e0e6      	b.n	801008c <__kernel_rem_pio2+0x4bc>
 800febe:	f04f 0b02 	mov.w	fp, #2
 800fec2:	e756      	b.n	800fd72 <__kernel_rem_pio2+0x1a2>
 800fec4:	f8d8 3000 	ldr.w	r3, [r8]
 800fec8:	bb05      	cbnz	r5, 800ff0c <__kernel_rem_pio2+0x33c>
 800feca:	b123      	cbz	r3, 800fed6 <__kernel_rem_pio2+0x306>
 800fecc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800fed0:	f8c8 3000 	str.w	r3, [r8]
 800fed4:	2301      	movs	r3, #1
 800fed6:	3201      	adds	r2, #1
 800fed8:	f108 0804 	add.w	r8, r8, #4
 800fedc:	461d      	mov	r5, r3
 800fede:	e74f      	b.n	800fd80 <__kernel_rem_pio2+0x1b0>
	...
 800feec:	3ff00000 	.word	0x3ff00000
 800fef0:	08011630 	.word	0x08011630
 800fef4:	40200000 	.word	0x40200000
 800fef8:	3ff00000 	.word	0x3ff00000
 800fefc:	3e700000 	.word	0x3e700000
 800ff00:	41700000 	.word	0x41700000
 800ff04:	3fe00000 	.word	0x3fe00000
 800ff08:	080115f0 	.word	0x080115f0
 800ff0c:	1acb      	subs	r3, r1, r3
 800ff0e:	f8c8 3000 	str.w	r3, [r8]
 800ff12:	462b      	mov	r3, r5
 800ff14:	e7df      	b.n	800fed6 <__kernel_rem_pio2+0x306>
 800ff16:	1e62      	subs	r2, r4, #1
 800ff18:	ab0c      	add	r3, sp, #48	; 0x30
 800ff1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff1e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ff22:	a90c      	add	r1, sp, #48	; 0x30
 800ff24:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ff28:	e738      	b.n	800fd9c <__kernel_rem_pio2+0x1cc>
 800ff2a:	1e62      	subs	r2, r4, #1
 800ff2c:	ab0c      	add	r3, sp, #48	; 0x30
 800ff2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff32:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ff36:	e7f4      	b.n	800ff22 <__kernel_rem_pio2+0x352>
 800ff38:	a90c      	add	r1, sp, #48	; 0x30
 800ff3a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ff3e:	3b01      	subs	r3, #1
 800ff40:	430a      	orrs	r2, r1
 800ff42:	e788      	b.n	800fe56 <__kernel_rem_pio2+0x286>
 800ff44:	3301      	adds	r3, #1
 800ff46:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ff4a:	2900      	cmp	r1, #0
 800ff4c:	d0fa      	beq.n	800ff44 <__kernel_rem_pio2+0x374>
 800ff4e:	9a08      	ldr	r2, [sp, #32]
 800ff50:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800ff54:	446a      	add	r2, sp
 800ff56:	3a98      	subs	r2, #152	; 0x98
 800ff58:	9208      	str	r2, [sp, #32]
 800ff5a:	9a06      	ldr	r2, [sp, #24]
 800ff5c:	a920      	add	r1, sp, #128	; 0x80
 800ff5e:	18a2      	adds	r2, r4, r2
 800ff60:	18e3      	adds	r3, r4, r3
 800ff62:	f104 0801 	add.w	r8, r4, #1
 800ff66:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ff6a:	9302      	str	r3, [sp, #8]
 800ff6c:	9b02      	ldr	r3, [sp, #8]
 800ff6e:	4543      	cmp	r3, r8
 800ff70:	da04      	bge.n	800ff7c <__kernel_rem_pio2+0x3ac>
 800ff72:	461c      	mov	r4, r3
 800ff74:	e6a2      	b.n	800fcbc <__kernel_rem_pio2+0xec>
 800ff76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ff78:	2301      	movs	r3, #1
 800ff7a:	e7e4      	b.n	800ff46 <__kernel_rem_pio2+0x376>
 800ff7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff7e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ff82:	f7f0 fad7 	bl	8000534 <__aeabi_i2d>
 800ff86:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ff8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff8c:	46ab      	mov	fp, r5
 800ff8e:	461c      	mov	r4, r3
 800ff90:	f04f 0900 	mov.w	r9, #0
 800ff94:	2600      	movs	r6, #0
 800ff96:	2700      	movs	r7, #0
 800ff98:	9b05      	ldr	r3, [sp, #20]
 800ff9a:	4599      	cmp	r9, r3
 800ff9c:	dd06      	ble.n	800ffac <__kernel_rem_pio2+0x3dc>
 800ff9e:	9b08      	ldr	r3, [sp, #32]
 800ffa0:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ffa4:	f108 0801 	add.w	r8, r8, #1
 800ffa8:	9308      	str	r3, [sp, #32]
 800ffaa:	e7df      	b.n	800ff6c <__kernel_rem_pio2+0x39c>
 800ffac:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ffb0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ffb4:	f7f0 fb28 	bl	8000608 <__aeabi_dmul>
 800ffb8:	4602      	mov	r2, r0
 800ffba:	460b      	mov	r3, r1
 800ffbc:	4630      	mov	r0, r6
 800ffbe:	4639      	mov	r1, r7
 800ffc0:	f7f0 f96c 	bl	800029c <__adddf3>
 800ffc4:	f109 0901 	add.w	r9, r9, #1
 800ffc8:	4606      	mov	r6, r0
 800ffca:	460f      	mov	r7, r1
 800ffcc:	e7e4      	b.n	800ff98 <__kernel_rem_pio2+0x3c8>
 800ffce:	3d01      	subs	r5, #1
 800ffd0:	e747      	b.n	800fe62 <__kernel_rem_pio2+0x292>
 800ffd2:	ec47 6b10 	vmov	d0, r6, r7
 800ffd6:	f1ca 0000 	rsb	r0, sl, #0
 800ffda:	f7ff fc71 	bl	800f8c0 <scalbn>
 800ffde:	ec57 6b10 	vmov	r6, r7, d0
 800ffe2:	4ba0      	ldr	r3, [pc, #640]	; (8010264 <__kernel_rem_pio2+0x694>)
 800ffe4:	ee10 0a10 	vmov	r0, s0
 800ffe8:	2200      	movs	r2, #0
 800ffea:	4639      	mov	r1, r7
 800ffec:	f7f0 fd92 	bl	8000b14 <__aeabi_dcmpge>
 800fff0:	b1f8      	cbz	r0, 8010032 <__kernel_rem_pio2+0x462>
 800fff2:	4b9d      	ldr	r3, [pc, #628]	; (8010268 <__kernel_rem_pio2+0x698>)
 800fff4:	2200      	movs	r2, #0
 800fff6:	4630      	mov	r0, r6
 800fff8:	4639      	mov	r1, r7
 800fffa:	f7f0 fb05 	bl	8000608 <__aeabi_dmul>
 800fffe:	f7f0 fdb3 	bl	8000b68 <__aeabi_d2iz>
 8010002:	4680      	mov	r8, r0
 8010004:	f7f0 fa96 	bl	8000534 <__aeabi_i2d>
 8010008:	4b96      	ldr	r3, [pc, #600]	; (8010264 <__kernel_rem_pio2+0x694>)
 801000a:	2200      	movs	r2, #0
 801000c:	f7f0 fafc 	bl	8000608 <__aeabi_dmul>
 8010010:	460b      	mov	r3, r1
 8010012:	4602      	mov	r2, r0
 8010014:	4639      	mov	r1, r7
 8010016:	4630      	mov	r0, r6
 8010018:	f7f0 f93e 	bl	8000298 <__aeabi_dsub>
 801001c:	f7f0 fda4 	bl	8000b68 <__aeabi_d2iz>
 8010020:	1c65      	adds	r5, r4, #1
 8010022:	ab0c      	add	r3, sp, #48	; 0x30
 8010024:	f10a 0a18 	add.w	sl, sl, #24
 8010028:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801002c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010030:	e71f      	b.n	800fe72 <__kernel_rem_pio2+0x2a2>
 8010032:	4630      	mov	r0, r6
 8010034:	4639      	mov	r1, r7
 8010036:	f7f0 fd97 	bl	8000b68 <__aeabi_d2iz>
 801003a:	ab0c      	add	r3, sp, #48	; 0x30
 801003c:	4625      	mov	r5, r4
 801003e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010042:	e716      	b.n	800fe72 <__kernel_rem_pio2+0x2a2>
 8010044:	ab0c      	add	r3, sp, #48	; 0x30
 8010046:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801004a:	f7f0 fa73 	bl	8000534 <__aeabi_i2d>
 801004e:	4632      	mov	r2, r6
 8010050:	463b      	mov	r3, r7
 8010052:	f7f0 fad9 	bl	8000608 <__aeabi_dmul>
 8010056:	4642      	mov	r2, r8
 8010058:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801005c:	464b      	mov	r3, r9
 801005e:	4630      	mov	r0, r6
 8010060:	4639      	mov	r1, r7
 8010062:	f7f0 fad1 	bl	8000608 <__aeabi_dmul>
 8010066:	3c01      	subs	r4, #1
 8010068:	4606      	mov	r6, r0
 801006a:	460f      	mov	r7, r1
 801006c:	e713      	b.n	800fe96 <__kernel_rem_pio2+0x2c6>
 801006e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8010072:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8010076:	f7f0 fac7 	bl	8000608 <__aeabi_dmul>
 801007a:	4602      	mov	r2, r0
 801007c:	460b      	mov	r3, r1
 801007e:	4648      	mov	r0, r9
 8010080:	4651      	mov	r1, sl
 8010082:	f7f0 f90b 	bl	800029c <__adddf3>
 8010086:	3701      	adds	r7, #1
 8010088:	4681      	mov	r9, r0
 801008a:	468a      	mov	sl, r1
 801008c:	9b00      	ldr	r3, [sp, #0]
 801008e:	429f      	cmp	r7, r3
 8010090:	dc02      	bgt.n	8010098 <__kernel_rem_pio2+0x4c8>
 8010092:	9b06      	ldr	r3, [sp, #24]
 8010094:	429f      	cmp	r7, r3
 8010096:	ddea      	ble.n	801006e <__kernel_rem_pio2+0x49e>
 8010098:	9a06      	ldr	r2, [sp, #24]
 801009a:	ab48      	add	r3, sp, #288	; 0x120
 801009c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80100a0:	e9c6 9a00 	strd	r9, sl, [r6]
 80100a4:	3c01      	subs	r4, #1
 80100a6:	e6fa      	b.n	800fe9e <__kernel_rem_pio2+0x2ce>
 80100a8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80100aa:	2b02      	cmp	r3, #2
 80100ac:	dc0b      	bgt.n	80100c6 <__kernel_rem_pio2+0x4f6>
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	dc39      	bgt.n	8010126 <__kernel_rem_pio2+0x556>
 80100b2:	d05d      	beq.n	8010170 <__kernel_rem_pio2+0x5a0>
 80100b4:	9b02      	ldr	r3, [sp, #8]
 80100b6:	f003 0007 	and.w	r0, r3, #7
 80100ba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80100be:	ecbd 8b02 	vpop	{d8}
 80100c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100c6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80100c8:	2b03      	cmp	r3, #3
 80100ca:	d1f3      	bne.n	80100b4 <__kernel_rem_pio2+0x4e4>
 80100cc:	9b05      	ldr	r3, [sp, #20]
 80100ce:	9500      	str	r5, [sp, #0]
 80100d0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80100d4:	eb0d 0403 	add.w	r4, sp, r3
 80100d8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80100dc:	46a2      	mov	sl, r4
 80100de:	9b00      	ldr	r3, [sp, #0]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	f1aa 0a08 	sub.w	sl, sl, #8
 80100e6:	dc69      	bgt.n	80101bc <__kernel_rem_pio2+0x5ec>
 80100e8:	46aa      	mov	sl, r5
 80100ea:	f1ba 0f01 	cmp.w	sl, #1
 80100ee:	f1a4 0408 	sub.w	r4, r4, #8
 80100f2:	f300 8083 	bgt.w	80101fc <__kernel_rem_pio2+0x62c>
 80100f6:	9c05      	ldr	r4, [sp, #20]
 80100f8:	ab48      	add	r3, sp, #288	; 0x120
 80100fa:	441c      	add	r4, r3
 80100fc:	2000      	movs	r0, #0
 80100fe:	2100      	movs	r1, #0
 8010100:	2d01      	cmp	r5, #1
 8010102:	f300 809a 	bgt.w	801023a <__kernel_rem_pio2+0x66a>
 8010106:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801010a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801010e:	f1bb 0f00 	cmp.w	fp, #0
 8010112:	f040 8098 	bne.w	8010246 <__kernel_rem_pio2+0x676>
 8010116:	9b04      	ldr	r3, [sp, #16]
 8010118:	e9c3 7800 	strd	r7, r8, [r3]
 801011c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8010120:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010124:	e7c6      	b.n	80100b4 <__kernel_rem_pio2+0x4e4>
 8010126:	9e05      	ldr	r6, [sp, #20]
 8010128:	ab48      	add	r3, sp, #288	; 0x120
 801012a:	441e      	add	r6, r3
 801012c:	462c      	mov	r4, r5
 801012e:	2000      	movs	r0, #0
 8010130:	2100      	movs	r1, #0
 8010132:	2c00      	cmp	r4, #0
 8010134:	da33      	bge.n	801019e <__kernel_rem_pio2+0x5ce>
 8010136:	f1bb 0f00 	cmp.w	fp, #0
 801013a:	d036      	beq.n	80101aa <__kernel_rem_pio2+0x5da>
 801013c:	4602      	mov	r2, r0
 801013e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010142:	9c04      	ldr	r4, [sp, #16]
 8010144:	e9c4 2300 	strd	r2, r3, [r4]
 8010148:	4602      	mov	r2, r0
 801014a:	460b      	mov	r3, r1
 801014c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8010150:	f7f0 f8a2 	bl	8000298 <__aeabi_dsub>
 8010154:	ae4a      	add	r6, sp, #296	; 0x128
 8010156:	2401      	movs	r4, #1
 8010158:	42a5      	cmp	r5, r4
 801015a:	da29      	bge.n	80101b0 <__kernel_rem_pio2+0x5e0>
 801015c:	f1bb 0f00 	cmp.w	fp, #0
 8010160:	d002      	beq.n	8010168 <__kernel_rem_pio2+0x598>
 8010162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010166:	4619      	mov	r1, r3
 8010168:	9b04      	ldr	r3, [sp, #16]
 801016a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801016e:	e7a1      	b.n	80100b4 <__kernel_rem_pio2+0x4e4>
 8010170:	9c05      	ldr	r4, [sp, #20]
 8010172:	ab48      	add	r3, sp, #288	; 0x120
 8010174:	441c      	add	r4, r3
 8010176:	2000      	movs	r0, #0
 8010178:	2100      	movs	r1, #0
 801017a:	2d00      	cmp	r5, #0
 801017c:	da09      	bge.n	8010192 <__kernel_rem_pio2+0x5c2>
 801017e:	f1bb 0f00 	cmp.w	fp, #0
 8010182:	d002      	beq.n	801018a <__kernel_rem_pio2+0x5ba>
 8010184:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010188:	4619      	mov	r1, r3
 801018a:	9b04      	ldr	r3, [sp, #16]
 801018c:	e9c3 0100 	strd	r0, r1, [r3]
 8010190:	e790      	b.n	80100b4 <__kernel_rem_pio2+0x4e4>
 8010192:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010196:	f7f0 f881 	bl	800029c <__adddf3>
 801019a:	3d01      	subs	r5, #1
 801019c:	e7ed      	b.n	801017a <__kernel_rem_pio2+0x5aa>
 801019e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80101a2:	f7f0 f87b 	bl	800029c <__adddf3>
 80101a6:	3c01      	subs	r4, #1
 80101a8:	e7c3      	b.n	8010132 <__kernel_rem_pio2+0x562>
 80101aa:	4602      	mov	r2, r0
 80101ac:	460b      	mov	r3, r1
 80101ae:	e7c8      	b.n	8010142 <__kernel_rem_pio2+0x572>
 80101b0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80101b4:	f7f0 f872 	bl	800029c <__adddf3>
 80101b8:	3401      	adds	r4, #1
 80101ba:	e7cd      	b.n	8010158 <__kernel_rem_pio2+0x588>
 80101bc:	e9da 8900 	ldrd	r8, r9, [sl]
 80101c0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80101c4:	9b00      	ldr	r3, [sp, #0]
 80101c6:	3b01      	subs	r3, #1
 80101c8:	9300      	str	r3, [sp, #0]
 80101ca:	4632      	mov	r2, r6
 80101cc:	463b      	mov	r3, r7
 80101ce:	4640      	mov	r0, r8
 80101d0:	4649      	mov	r1, r9
 80101d2:	f7f0 f863 	bl	800029c <__adddf3>
 80101d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80101da:	4602      	mov	r2, r0
 80101dc:	460b      	mov	r3, r1
 80101de:	4640      	mov	r0, r8
 80101e0:	4649      	mov	r1, r9
 80101e2:	f7f0 f859 	bl	8000298 <__aeabi_dsub>
 80101e6:	4632      	mov	r2, r6
 80101e8:	463b      	mov	r3, r7
 80101ea:	f7f0 f857 	bl	800029c <__adddf3>
 80101ee:	ed9d 7b06 	vldr	d7, [sp, #24]
 80101f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80101f6:	ed8a 7b00 	vstr	d7, [sl]
 80101fa:	e770      	b.n	80100de <__kernel_rem_pio2+0x50e>
 80101fc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010200:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8010204:	4640      	mov	r0, r8
 8010206:	4632      	mov	r2, r6
 8010208:	463b      	mov	r3, r7
 801020a:	4649      	mov	r1, r9
 801020c:	f7f0 f846 	bl	800029c <__adddf3>
 8010210:	e9cd 0100 	strd	r0, r1, [sp]
 8010214:	4602      	mov	r2, r0
 8010216:	460b      	mov	r3, r1
 8010218:	4640      	mov	r0, r8
 801021a:	4649      	mov	r1, r9
 801021c:	f7f0 f83c 	bl	8000298 <__aeabi_dsub>
 8010220:	4632      	mov	r2, r6
 8010222:	463b      	mov	r3, r7
 8010224:	f7f0 f83a 	bl	800029c <__adddf3>
 8010228:	ed9d 7b00 	vldr	d7, [sp]
 801022c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010230:	ed84 7b00 	vstr	d7, [r4]
 8010234:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010238:	e757      	b.n	80100ea <__kernel_rem_pio2+0x51a>
 801023a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801023e:	f7f0 f82d 	bl	800029c <__adddf3>
 8010242:	3d01      	subs	r5, #1
 8010244:	e75c      	b.n	8010100 <__kernel_rem_pio2+0x530>
 8010246:	9b04      	ldr	r3, [sp, #16]
 8010248:	9a04      	ldr	r2, [sp, #16]
 801024a:	601f      	str	r7, [r3, #0]
 801024c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8010250:	605c      	str	r4, [r3, #4]
 8010252:	609d      	str	r5, [r3, #8]
 8010254:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010258:	60d3      	str	r3, [r2, #12]
 801025a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801025e:	6110      	str	r0, [r2, #16]
 8010260:	6153      	str	r3, [r2, #20]
 8010262:	e727      	b.n	80100b4 <__kernel_rem_pio2+0x4e4>
 8010264:	41700000 	.word	0x41700000
 8010268:	3e700000 	.word	0x3e700000

0801026c <_init>:
 801026c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801026e:	bf00      	nop
 8010270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010272:	bc08      	pop	{r3}
 8010274:	469e      	mov	lr, r3
 8010276:	4770      	bx	lr

08010278 <_fini>:
 8010278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801027a:	bf00      	nop
 801027c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801027e:	bc08      	pop	{r3}
 8010280:	469e      	mov	lr, r3
 8010282:	4770      	bx	lr
