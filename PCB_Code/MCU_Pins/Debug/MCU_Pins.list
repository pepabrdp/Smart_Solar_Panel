
MCU_Pins.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe40  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013c0  0800ffe0  0800ffe0  0001ffe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080113a0  080113a0  00031450  2**0
                  CONTENTS
  4 .ARM          00000008  080113a0  080113a0  000213a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080113a8  080113a8  00031450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080113a8  080113a8  000213a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080113ac  080113ac  000213ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001450  20000000  080113b0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20001450  08012800  00031450  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000173c  08012800  0003173c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031450  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00031480  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001365c  00000000  00000000  000314c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024f6  00000000  00000000  00044b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001318  00000000  00000000  00047018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f31  00000000  00000000  00048330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018f52  00000000  00000000  00049261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000158cc  00000000  00000000  000621b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fb8a  00000000  00000000  00077a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ce8  00000000  00000000  0011760c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0011e2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20001450 	.word	0x20001450
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ffc8 	.word	0x0800ffc8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20001454 	.word	0x20001454
 80001dc:	0800ffc8 	.word	0x0800ffc8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	0000      	movs	r0, r0
	...

08000f58 <getDayinDecimals>:
    double c;
};


double getDayinDecimals(int day, double hour, double min, double sec)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b090      	sub	sp, #64	; 0x40
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	61f8      	str	r0, [r7, #28]
 8000f60:	ed87 0b04 	vstr	d0, [r7, #16]
 8000f64:	ed87 1b02 	vstr	d1, [r7, #8]
 8000f68:	ed87 2b00 	vstr	d2, [r7]
    double hour_in_decimal = hour / 24;
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	4b23      	ldr	r3, [pc, #140]	; (8001000 <getDayinDecimals+0xa8>)
 8000f72:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f76:	f7ff fc71 	bl	800085c <__aeabi_ddiv>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double min_in_decimal = min / (60 * 24);
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <getDayinDecimals+0xac>)
 8000f88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f8c:	f7ff fc66 	bl	800085c <__aeabi_ddiv>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double sec_in_decimal = sec / (60 * 60 * 24);
 8000f98:	a317      	add	r3, pc, #92	; (adr r3, 8000ff8 <getDayinDecimals+0xa0>)
 8000f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fa2:	f7ff fc5b 	bl	800085c <__aeabi_ddiv>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double day_in_decimal = day + hour_in_decimal + min_in_decimal + sec_in_decimal;
 8000fae:	69f8      	ldr	r0, [r7, #28]
 8000fb0:	f7ff fac0 	bl	8000534 <__aeabi_i2d>
 8000fb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000fb8:	f7ff f970 	bl	800029c <__adddf3>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000fc8:	f7ff f968 	bl	800029c <__adddf3>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000fd4:	f7ff f962 	bl	800029c <__adddf3>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	e9c7 2308 	strd	r2, r3, [r7, #32]

    return day_in_decimal;
 8000fe0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000fe4:	ec43 2b17 	vmov	d7, r2, r3
}
 8000fe8:	eeb0 0a47 	vmov.f32	s0, s14
 8000fec:	eef0 0a67 	vmov.f32	s1, s15
 8000ff0:	3740      	adds	r7, #64	; 0x40
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40f51800 	.word	0x40f51800
 8001000:	40380000 	.word	0x40380000
 8001004:	40968000 	.word	0x40968000

08001008 <getJulianDay>:

double getJulianDay(int year, int month, double day, double zone)
{
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6178      	str	r0, [r7, #20]
 8001010:	6139      	str	r1, [r7, #16]
 8001012:	ed87 0b02 	vstr	d0, [r7, #8]
 8001016:	ed87 1b00 	vstr	d1, [r7]
    if (month == 1 || month == 2)
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d002      	beq.n	8001026 <getJulianDay+0x1e>
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d105      	bne.n	8001032 <getJulianDay+0x2a>
    {
        month += 12;
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	330c      	adds	r3, #12
 800102a:	613b      	str	r3, [r7, #16]
        year -= 1;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	3b01      	subs	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
    }

    int a = (int)(year / 100);
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	4a40      	ldr	r2, [pc, #256]	; (8001138 <getJulianDay+0x130>)
 8001036:	fb82 1203 	smull	r1, r2, r2, r3
 800103a:	1152      	asrs	r2, r2, #5
 800103c:	17db      	asrs	r3, r3, #31
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
    int b = 2 - a + (int)(a / 4);
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	f1c3 0202 	rsb	r2, r3, #2
 8001048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104a:	2b00      	cmp	r3, #0
 800104c:	da00      	bge.n	8001050 <getJulianDay+0x48>
 800104e:	3303      	adds	r3, #3
 8001050:	109b      	asrs	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	623b      	str	r3, [r7, #32]

    double julianDay = (int)(365.25 * (year + 4716)) + (int)(30.6001 * (month + 1)) + day - (zone / 24) + b - 1524.5;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 800105c:	330c      	adds	r3, #12
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fa68 	bl	8000534 <__aeabi_i2d>
 8001064:	a32e      	add	r3, pc, #184	; (adr r3, 8001120 <getJulianDay+0x118>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	f7ff facd 	bl	8000608 <__aeabi_dmul>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	f7ff fd77 	bl	8000b68 <__aeabi_d2iz>
 800107a:	4604      	mov	r4, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	3301      	adds	r3, #1
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa57 	bl	8000534 <__aeabi_i2d>
 8001086:	a328      	add	r3, pc, #160	; (adr r3, 8001128 <getJulianDay+0x120>)
 8001088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108c:	f7ff fabc 	bl	8000608 <__aeabi_dmul>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4610      	mov	r0, r2
 8001096:	4619      	mov	r1, r3
 8001098:	f7ff fd66 	bl	8000b68 <__aeabi_d2iz>
 800109c:	4603      	mov	r3, r0
 800109e:	4423      	add	r3, r4
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fa47 	bl	8000534 <__aeabi_i2d>
 80010a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010aa:	f7ff f8f7 	bl	800029c <__adddf3>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4614      	mov	r4, r2
 80010b4:	461d      	mov	r5, r3
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	4b20      	ldr	r3, [pc, #128]	; (800113c <getJulianDay+0x134>)
 80010bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010c0:	f7ff fbcc 	bl	800085c <__aeabi_ddiv>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4620      	mov	r0, r4
 80010ca:	4629      	mov	r1, r5
 80010cc:	f7ff f8e4 	bl	8000298 <__aeabi_dsub>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4614      	mov	r4, r2
 80010d6:	461d      	mov	r5, r3
 80010d8:	6a38      	ldr	r0, [r7, #32]
 80010da:	f7ff fa2b 	bl	8000534 <__aeabi_i2d>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4620      	mov	r0, r4
 80010e4:	4629      	mov	r1, r5
 80010e6:	f7ff f8d9 	bl	800029c <__adddf3>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	a30f      	add	r3, pc, #60	; (adr r3, 8001130 <getJulianDay+0x128>)
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	f7ff f8ce 	bl	8000298 <__aeabi_dsub>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return julianDay;
 8001104:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001108:	ec43 2b17 	vmov	d7, r2, r3
}
 800110c:	eeb0 0a47 	vmov.f32	s0, s14
 8001110:	eef0 0a67 	vmov.f32	s1, s15
 8001114:	3728      	adds	r7, #40	; 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bdb0      	pop	{r4, r5, r7, pc}
 800111a:	bf00      	nop
 800111c:	f3af 8000 	nop.w
 8001120:	00000000 	.word	0x00000000
 8001124:	4076d400 	.word	0x4076d400
 8001128:	27525461 	.word	0x27525461
 800112c:	403e99a0 	.word	0x403e99a0
 8001130:	00000000 	.word	0x00000000
 8001134:	4097d200 	.word	0x4097d200
 8001138:	51eb851f 	.word	0x51eb851f
 800113c:	40380000 	.word	0x40380000

08001140 <getJulianEphemerisDay>:

double getJulianEphemerisDay(double julianDay)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	ed87 0b00 	vstr	d0, [r7]
    double julianEphemerisDay = julianDay + (69 / 86400);
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001156:	f7ff f8a1 	bl	800029c <__adddf3>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return julianEphemerisDay;
 8001162:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001166:	ec43 2b17 	vmov	d7, r2, r3
}
 800116a:	eeb0 0a47 	vmov.f32	s0, s14
 800116e:	eef0 0a67 	vmov.f32	s1, s15
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <getJulianCentury>:

double getJulianCentury(double julianDay)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	ed87 0b00 	vstr	d0, [r7]
    double julianCentury = (julianDay - 2451545) / 36525;
 8001182:	a30f      	add	r3, pc, #60	; (adr r3, 80011c0 <getJulianCentury+0x48>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	e9d7 0100 	ldrd	r0, r1, [r7]
 800118c:	f7ff f884 	bl	8000298 <__aeabi_dsub>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	a30b      	add	r3, pc, #44	; (adr r3, 80011c8 <getJulianCentury+0x50>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	f7ff fb5d 	bl	800085c <__aeabi_ddiv>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return julianCentury;
 80011aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011ae:	ec43 2b17 	vmov	d7, r2, r3
}
 80011b2:	eeb0 0a47 	vmov.f32	s0, s14
 80011b6:	eef0 0a67 	vmov.f32	s1, s15
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	80000000 	.word	0x80000000
 80011c4:	4142b42c 	.word	0x4142b42c
 80011c8:	00000000 	.word	0x00000000
 80011cc:	40e1d5a0 	.word	0x40e1d5a0

080011d0 <getJulianEphemerisCentury>:

double getJulianEphemerisCentury(double julianEphemerisDay)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	ed87 0b00 	vstr	d0, [r7]
    double julianEphemerisCentury = (julianEphemerisDay - 2451545) / 36525;
 80011da:	a30f      	add	r3, pc, #60	; (adr r3, 8001218 <getJulianEphemerisCentury+0x48>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011e4:	f7ff f858 	bl	8000298 <__aeabi_dsub>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	a30b      	add	r3, pc, #44	; (adr r3, 8001220 <getJulianEphemerisCentury+0x50>)
 80011f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f6:	f7ff fb31 	bl	800085c <__aeabi_ddiv>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return julianEphemerisCentury;
 8001202:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001206:	ec43 2b17 	vmov	d7, r2, r3
}
 800120a:	eeb0 0a47 	vmov.f32	s0, s14
 800120e:	eef0 0a67 	vmov.f32	s1, s15
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	80000000 	.word	0x80000000
 800121c:	4142b42c 	.word	0x4142b42c
 8001220:	00000000 	.word	0x00000000
 8001224:	40e1d5a0 	.word	0x40e1d5a0

08001228 <getJulianEphemerisMillenium>:

double getJulianEphemerisMillenium(double julianEphemerisCentury)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	ed87 0b00 	vstr	d0, [r7]
    double julianEphemerisMillenium = julianEphemerisCentury / 10;
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <getJulianEphemerisMillenium+0x38>)
 8001238:	e9d7 0100 	ldrd	r0, r1, [r7]
 800123c:	f7ff fb0e 	bl	800085c <__aeabi_ddiv>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return julianEphemerisMillenium;
 8001248:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800124c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001250:	eeb0 0a47 	vmov.f32	s0, s14
 8001254:	eef0 0a67 	vmov.f32	s1, s15
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40240000 	.word	0x40240000

08001264 <initL0>:


struct L0 *initL0()
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
        {30, 0.44, 83996.85},
        {30, 2.74, 1349.87},
        {25, 3.16, 4690.48}
    };

    return data;
 8001268:	4b02      	ldr	r3, [pc, #8]	; (8001274 <initL0+0x10>)
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	20000020 	.word	0x20000020

08001278 <initL1>:

struct L1 *initL1()
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
        {8, 5.3, 2352.87},
        {6, 2.65, 9437.76},
        {6, 4.67, 4690.48}
    };

    return data;
 800127c:	4b02      	ldr	r3, [pc, #8]	; (8001288 <initL1+0x10>)
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	20000620 	.word	0x20000620

0800128c <initL2>:


struct L2 *initL2()
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
        {3, 2.28, 553.57},
        {2, 4.38, 5223.69},
        {2, 3.75, 0.98}
    };

    return data;
 8001290:	4b02      	ldr	r3, [pc, #8]	; (800129c <initL2+0x10>)
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	20000950 	.word	0x20000950

080012a0 <initL3>:

struct L3 *initL3()
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
        {1, 4.72, 3.52},
        {1, 5.3, 18849.23},
        {1, 5.97, 242.73}
    };

    return data;
 80012a4:	4b02      	ldr	r3, [pc, #8]	; (80012b0 <initL3+0x10>)
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	20000b30 	.word	0x20000b30

080012b4 <initL4>:

struct L4 *initL4()
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
        {114, 3.142, 0},
        {8, 4.13, 6283.08},
        {1, 3.84, 12566.15}
    };

    return data;
 80012b8:	4b02      	ldr	r3, [pc, #8]	; (80012c4 <initL4+0x10>)
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	20000bd8 	.word	0x20000bd8

080012c8 <initL5>:

struct L5 *initL5()
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
    static struct L5 data[1] = {
        {1, 3.14, 0}
    };

    return data;
 80012cc:	4b02      	ldr	r3, [pc, #8]	; (80012d8 <initL5+0x10>)
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	20000c20 	.word	0x20000c20

080012dc <getL0>:

double getL0(struct L0 *data, double julianEphemerisMillenium)
{
 80012dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012e0:	b088      	sub	sp, #32
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	60f8      	str	r0, [r7, #12]
 80012e6:	ed87 0b00 	vstr	d0, [r7]
    double L0 = 0;
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 64; i++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	e048      	b.n	800138e <getL0+0xb2>
    {
        L0 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	4613      	mov	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	461a      	mov	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f910 	bl	8000534 <__aeabi_i2d>
 8001314:	4680      	mov	r8, r0
 8001316:	4689      	mov	r9, r1
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	4613      	mov	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4413      	add	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	461a      	mov	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	461a      	mov	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4413      	add	r3, r2
 800133c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001344:	f7ff f960 	bl	8000608 <__aeabi_dmul>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4620      	mov	r0, r4
 800134e:	4629      	mov	r1, r5
 8001350:	f7fe ffa4 	bl	800029c <__adddf3>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	ec43 2b17 	vmov	d7, r2, r3
 800135c:	eeb0 0a47 	vmov.f32	s0, s14
 8001360:	eef0 0a67 	vmov.f32	s1, s15
 8001364:	f00c fa34 	bl	800d7d0 <cos>
 8001368:	ec53 2b10 	vmov	r2, r3, d0
 800136c:	4640      	mov	r0, r8
 800136e:	4649      	mov	r1, r9
 8001370:	f7ff f94a 	bl	8000608 <__aeabi_dmul>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800137c:	f7fe ff8e 	bl	800029c <__adddf3>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 64; i++)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	3301      	adds	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2b3f      	cmp	r3, #63	; 0x3f
 8001392:	ddb3      	ble.n	80012fc <getL0+0x20>
    }
    return L0;
 8001394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001398:	ec43 2b17 	vmov	d7, r2, r3
}
 800139c:	eeb0 0a47 	vmov.f32	s0, s14
 80013a0:	eef0 0a67 	vmov.f32	s1, s15
 80013a4:	3720      	adds	r7, #32
 80013a6:	46bd      	mov	sp, r7
 80013a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080013ac <getL1>:

double getL1(struct L1 *data, double julianEphemerisMillenium)
{
 80013ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013b0:	b088      	sub	sp, #32
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	ed87 0b00 	vstr	d0, [r7]
    double L1 = 0;
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 34; i++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e048      	b.n	800145e <getL1+0xb2>
    {
        L1 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	461a      	mov	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f8a8 	bl	8000534 <__aeabi_i2d>
 80013e4:	4680      	mov	r8, r0
 80013e6:	4689      	mov	r9, r1
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	461a      	mov	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	4613      	mov	r3, r2
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	4413      	add	r3, r2
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	461a      	mov	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001410:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001414:	f7ff f8f8 	bl	8000608 <__aeabi_dmul>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4620      	mov	r0, r4
 800141e:	4629      	mov	r1, r5
 8001420:	f7fe ff3c 	bl	800029c <__adddf3>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	ec43 2b17 	vmov	d7, r2, r3
 800142c:	eeb0 0a47 	vmov.f32	s0, s14
 8001430:	eef0 0a67 	vmov.f32	s1, s15
 8001434:	f00c f9cc 	bl	800d7d0 <cos>
 8001438:	ec53 2b10 	vmov	r2, r3, d0
 800143c:	4640      	mov	r0, r8
 800143e:	4649      	mov	r1, r9
 8001440:	f7ff f8e2 	bl	8000608 <__aeabi_dmul>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800144c:	f7fe ff26 	bl	800029c <__adddf3>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 34; i++)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	3301      	adds	r3, #1
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	2b21      	cmp	r3, #33	; 0x21
 8001462:	ddb3      	ble.n	80013cc <getL1+0x20>
    }
    return L1;
 8001464:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001468:	ec43 2b17 	vmov	d7, r2, r3
}
 800146c:	eeb0 0a47 	vmov.f32	s0, s14
 8001470:	eef0 0a67 	vmov.f32	s1, s15
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800147c <getL2>:

double getL2(struct L2 *data, double julianEphemerisMillenium)
{
 800147c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001480:	b088      	sub	sp, #32
 8001482:	af00      	add	r7, sp, #0
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	ed87 0b00 	vstr	d0, [r7]
    double L2 = 0;
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	f04f 0300 	mov.w	r3, #0
 8001492:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 20; i++)
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e048      	b.n	800152e <getL2+0xb2>
    {
        L2 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	461a      	mov	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f840 	bl	8000534 <__aeabi_i2d>
 80014b4:	4680      	mov	r8, r0
 80014b6:	4689      	mov	r9, r1
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	4613      	mov	r3, r2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4413      	add	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	461a      	mov	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4413      	add	r3, r2
 80014c8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	4613      	mov	r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	461a      	mov	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80014e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014e4:	f7ff f890 	bl	8000608 <__aeabi_dmul>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4620      	mov	r0, r4
 80014ee:	4629      	mov	r1, r5
 80014f0:	f7fe fed4 	bl	800029c <__adddf3>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	ec43 2b17 	vmov	d7, r2, r3
 80014fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001500:	eef0 0a67 	vmov.f32	s1, s15
 8001504:	f00c f964 	bl	800d7d0 <cos>
 8001508:	ec53 2b10 	vmov	r2, r3, d0
 800150c:	4640      	mov	r0, r8
 800150e:	4649      	mov	r1, r9
 8001510:	f7ff f87a 	bl	8000608 <__aeabi_dmul>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800151c:	f7fe febe 	bl	800029c <__adddf3>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 20; i++)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	3301      	adds	r3, #1
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2b13      	cmp	r3, #19
 8001532:	ddb3      	ble.n	800149c <getL2+0x20>
    }
    return L2;
 8001534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001538:	ec43 2b17 	vmov	d7, r2, r3
}
 800153c:	eeb0 0a47 	vmov.f32	s0, s14
 8001540:	eef0 0a67 	vmov.f32	s1, s15
 8001544:	3720      	adds	r7, #32
 8001546:	46bd      	mov	sp, r7
 8001548:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800154c <getL3>:

double getL3(struct L3 *data, double julianEphemerisMillenium)
{
 800154c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001550:	b088      	sub	sp, #32
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	ed87 0b00 	vstr	d0, [r7]
    double L3 = 0;
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 7; i++)
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	e048      	b.n	80015fe <getL3+0xb2>
    {
        L3 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	461a      	mov	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4413      	add	r3, r2
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ffd8 	bl	8000534 <__aeabi_i2d>
 8001584:	4680      	mov	r8, r0
 8001586:	4689      	mov	r9, r1
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	4613      	mov	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4413      	add	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	461a      	mov	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	461a      	mov	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4413      	add	r3, r2
 80015ac:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80015b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015b4:	f7ff f828 	bl	8000608 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4620      	mov	r0, r4
 80015be:	4629      	mov	r1, r5
 80015c0:	f7fe fe6c 	bl	800029c <__adddf3>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	ec43 2b17 	vmov	d7, r2, r3
 80015cc:	eeb0 0a47 	vmov.f32	s0, s14
 80015d0:	eef0 0a67 	vmov.f32	s1, s15
 80015d4:	f00c f8fc 	bl	800d7d0 <cos>
 80015d8:	ec53 2b10 	vmov	r2, r3, d0
 80015dc:	4640      	mov	r0, r8
 80015de:	4649      	mov	r1, r9
 80015e0:	f7ff f812 	bl	8000608 <__aeabi_dmul>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015ec:	f7fe fe56 	bl	800029c <__adddf3>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 7; i++)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3301      	adds	r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2b06      	cmp	r3, #6
 8001602:	ddb3      	ble.n	800156c <getL3+0x20>
    }
    return L3;
 8001604:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001608:	ec43 2b17 	vmov	d7, r2, r3
}
 800160c:	eeb0 0a47 	vmov.f32	s0, s14
 8001610:	eef0 0a67 	vmov.f32	s1, s15
 8001614:	3720      	adds	r7, #32
 8001616:	46bd      	mov	sp, r7
 8001618:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800161c <getL4>:

double getL4(struct L4 *data, double julianEphemerisMillenium)
{
 800161c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001620:	b088      	sub	sp, #32
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	ed87 0b00 	vstr	d0, [r7]
    double L4 = 0;
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	f04f 0300 	mov.w	r3, #0
 8001632:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 3; i++)
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e048      	b.n	80016ce <getL4+0xb2>
    {
        L4 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	461a      	mov	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff70 	bl	8000534 <__aeabi_i2d>
 8001654:	4680      	mov	r8, r0
 8001656:	4689      	mov	r9, r1
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	4613      	mov	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	461a      	mov	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4413      	add	r3, r2
 800167c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001684:	f7fe ffc0 	bl	8000608 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7fe fe04 	bl	800029c <__adddf3>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	ec43 2b17 	vmov	d7, r2, r3
 800169c:	eeb0 0a47 	vmov.f32	s0, s14
 80016a0:	eef0 0a67 	vmov.f32	s1, s15
 80016a4:	f00c f894 	bl	800d7d0 <cos>
 80016a8:	ec53 2b10 	vmov	r2, r3, d0
 80016ac:	4640      	mov	r0, r8
 80016ae:	4649      	mov	r1, r9
 80016b0:	f7fe ffaa 	bl	8000608 <__aeabi_dmul>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016bc:	f7fe fdee 	bl	800029c <__adddf3>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 3; i++)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3301      	adds	r3, #1
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	ddb3      	ble.n	800163c <getL4+0x20>
    }
    return L4;
 80016d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016d8:	ec43 2b17 	vmov	d7, r2, r3
}
 80016dc:	eeb0 0a47 	vmov.f32	s0, s14
 80016e0:	eef0 0a67 	vmov.f32	s1, s15
 80016e4:	3720      	adds	r7, #32
 80016e6:	46bd      	mov	sp, r7
 80016e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080016ec <getL5>:

double getL5(struct L5 *data, double julianEphemerisMillenium)
{
 80016ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016f0:	b088      	sub	sp, #32
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	ed87 0b00 	vstr	d0, [r7]
    double L5 = 0;
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 1; i++)
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	e048      	b.n	800179e <getL5+0xb2>
    {
        L5 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	461a      	mov	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4413      	add	r3, r2
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe ff08 	bl	8000534 <__aeabi_i2d>
 8001724:	4680      	mov	r8, r0
 8001726:	4689      	mov	r9, r1
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	461a      	mov	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	461a      	mov	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001754:	f7fe ff58 	bl	8000608 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4620      	mov	r0, r4
 800175e:	4629      	mov	r1, r5
 8001760:	f7fe fd9c 	bl	800029c <__adddf3>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	ec43 2b17 	vmov	d7, r2, r3
 800176c:	eeb0 0a47 	vmov.f32	s0, s14
 8001770:	eef0 0a67 	vmov.f32	s1, s15
 8001774:	f00c f82c 	bl	800d7d0 <cos>
 8001778:	ec53 2b10 	vmov	r2, r3, d0
 800177c:	4640      	mov	r0, r8
 800177e:	4649      	mov	r1, r9
 8001780:	f7fe ff42 	bl	8000608 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800178c:	f7fe fd86 	bl	800029c <__adddf3>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 1; i++)
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	3301      	adds	r3, #1
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	ddb3      	ble.n	800170c <getL5+0x20>
    }
    return L5;
 80017a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017a8:	ec43 2b17 	vmov	d7, r2, r3
}
 80017ac:	eeb0 0a47 	vmov.f32	s0, s14
 80017b0:	eef0 0a67 	vmov.f32	s1, s15
 80017b4:	3720      	adds	r7, #32
 80017b6:	46bd      	mov	sp, r7
 80017b8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017bc:	0000      	movs	r0, r0
	...

080017c0 <getHeliocentricLongitude>:

double getHeliocentricLongitude(double L0, double L1, double L2, double L3, double L4, double L5, double JME)
{
 80017c0:	b5b0      	push	{r4, r5, r7, lr}
 80017c2:	b092      	sub	sp, #72	; 0x48
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 80017ca:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 80017ce:	ed87 2b08 	vstr	d2, [r7, #32]
 80017d2:	ed87 3b06 	vstr	d3, [r7, #24]
 80017d6:	ed87 4b04 	vstr	d4, [r7, #16]
 80017da:	ed87 5b02 	vstr	d5, [r7, #8]
 80017de:	ed87 6b00 	vstr	d6, [r7]
    double heliocentric_longitude = (L0 + (L1 * JME) + (L2 * pow(JME, 2)) + (L3 * pow(JME, 3)) + (L4 * pow(JME, 4)) + (L5 * pow(JME, 5))) / pow(10, 8);
 80017e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017ea:	f7fe ff0d 	bl	8000608 <__aeabi_dmul>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4610      	mov	r0, r2
 80017f4:	4619      	mov	r1, r3
 80017f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017fa:	f7fe fd4f 	bl	800029c <__adddf3>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4614      	mov	r4, r2
 8001804:	461d      	mov	r5, r3
 8001806:	ed9f 1b64 	vldr	d1, [pc, #400]	; 8001998 <getHeliocentricLongitude+0x1d8>
 800180a:	ed97 0b00 	vldr	d0, [r7]
 800180e:	f00b fdcd 	bl	800d3ac <pow>
 8001812:	ec51 0b10 	vmov	r0, r1, d0
 8001816:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800181a:	f7fe fef5 	bl	8000608 <__aeabi_dmul>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4620      	mov	r0, r4
 8001824:	4629      	mov	r1, r5
 8001826:	f7fe fd39 	bl	800029c <__adddf3>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4614      	mov	r4, r2
 8001830:	461d      	mov	r5, r3
 8001832:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 80019a0 <getHeliocentricLongitude+0x1e0>
 8001836:	ed97 0b00 	vldr	d0, [r7]
 800183a:	f00b fdb7 	bl	800d3ac <pow>
 800183e:	ec51 0b10 	vmov	r0, r1, d0
 8001842:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001846:	f7fe fedf 	bl	8000608 <__aeabi_dmul>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4620      	mov	r0, r4
 8001850:	4629      	mov	r1, r5
 8001852:	f7fe fd23 	bl	800029c <__adddf3>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4614      	mov	r4, r2
 800185c:	461d      	mov	r5, r3
 800185e:	ed9f 1b52 	vldr	d1, [pc, #328]	; 80019a8 <getHeliocentricLongitude+0x1e8>
 8001862:	ed97 0b00 	vldr	d0, [r7]
 8001866:	f00b fda1 	bl	800d3ac <pow>
 800186a:	ec51 0b10 	vmov	r0, r1, d0
 800186e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001872:	f7fe fec9 	bl	8000608 <__aeabi_dmul>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4620      	mov	r0, r4
 800187c:	4629      	mov	r1, r5
 800187e:	f7fe fd0d 	bl	800029c <__adddf3>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4614      	mov	r4, r2
 8001888:	461d      	mov	r5, r3
 800188a:	ed9f 1b49 	vldr	d1, [pc, #292]	; 80019b0 <getHeliocentricLongitude+0x1f0>
 800188e:	ed97 0b00 	vldr	d0, [r7]
 8001892:	f00b fd8b 	bl	800d3ac <pow>
 8001896:	ec51 0b10 	vmov	r0, r1, d0
 800189a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800189e:	f7fe feb3 	bl	8000608 <__aeabi_dmul>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4620      	mov	r0, r4
 80018a8:	4629      	mov	r1, r5
 80018aa:	f7fe fcf7 	bl	800029c <__adddf3>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	a344      	add	r3, pc, #272	; (adr r3, 80019c8 <getHeliocentricLongitude+0x208>)
 80018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018bc:	f7fe ffce 	bl	800085c <__aeabi_ddiv>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    heliocentric_longitude = (heliocentric_longitude * 180) / M_PI;
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	4b3c      	ldr	r3, [pc, #240]	; (80019c0 <getHeliocentricLongitude+0x200>)
 80018ce:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80018d2:	f7fe fe99 	bl	8000608 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	a336      	add	r3, pc, #216	; (adr r3, 80019b8 <getHeliocentricLongitude+0x1f8>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe ffba 	bl	800085c <__aeabi_ddiv>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    heliocentric_longitude = heliocentric_longitude / 360;
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	4b33      	ldr	r3, [pc, #204]	; (80019c4 <getHeliocentricLongitude+0x204>)
 80018f6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80018fa:	f7fe ffaf 	bl	800085c <__aeabi_ddiv>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    double fraction = fabs(heliocentric_longitude - floor(abs(heliocentric_longitude)));
 8001906:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800190a:	f008 fd95 	bl	800a438 <abs>
 800190e:	4603      	mov	r3, r0
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fe0f 	bl	8000534 <__aeabi_i2d>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800191e:	f7fe fcbb 	bl	8000298 <__aeabi_dsub>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4611      	mov	r1, r2
 8001928:	63b9      	str	r1, [r7, #56]	; 0x38
 800192a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800192e:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (heliocentric_longitude > 0)
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800193c:	f7ff f8f4 	bl	8000b28 <__aeabi_dcmpgt>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00b      	beq.n	800195e <getHeliocentricLongitude+0x19e>
    {
        heliocentric_longitude = 360 * fraction;
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <getHeliocentricLongitude+0x204>)
 800194c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001950:	f7fe fe5a 	bl	8000608 <__aeabi_dmul>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800195c:	e011      	b.n	8001982 <getHeliocentricLongitude+0x1c2>
    }
    else
    {
        heliocentric_longitude = 360 - (360 * fraction);
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <getHeliocentricLongitude+0x204>)
 8001964:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001968:	f7fe fe4e 	bl	8000608 <__aeabi_dmul>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	f04f 0000 	mov.w	r0, #0
 8001974:	4913      	ldr	r1, [pc, #76]	; (80019c4 <getHeliocentricLongitude+0x204>)
 8001976:	f7fe fc8f 	bl	8000298 <__aeabi_dsub>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }

    return heliocentric_longitude;
 8001982:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001986:	ec43 2b17 	vmov	d7, r2, r3
}
 800198a:	eeb0 0a47 	vmov.f32	s0, s14
 800198e:	eef0 0a67 	vmov.f32	s1, s15
 8001992:	3748      	adds	r7, #72	; 0x48
 8001994:	46bd      	mov	sp, r7
 8001996:	bdb0      	pop	{r4, r5, r7, pc}
 8001998:	00000000 	.word	0x00000000
 800199c:	40000000 	.word	0x40000000
 80019a0:	00000000 	.word	0x00000000
 80019a4:	40080000 	.word	0x40080000
 80019a8:	00000000 	.word	0x00000000
 80019ac:	40100000 	.word	0x40100000
 80019b0:	00000000 	.word	0x00000000
 80019b4:	40140000 	.word	0x40140000
 80019b8:	54442d18 	.word	0x54442d18
 80019bc:	400921fb 	.word	0x400921fb
 80019c0:	40668000 	.word	0x40668000
 80019c4:	40768000 	.word	0x40768000
 80019c8:	00000000 	.word	0x00000000
 80019cc:	4197d784 	.word	0x4197d784

080019d0 <initB0>:

struct B0 *initB0()
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
        {80, 3.88, 5223.69},
        {44, 3.7, 2352.87},
        {32, 4, 1577.34}
    };

    return data;
 80019d4:	4b02      	ldr	r3, [pc, #8]	; (80019e0 <initB0+0x10>)
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	20000c38 	.word	0x20000c38

080019e4 <initB1>:

struct B1 *initB1()
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
    static struct B1 data[2] = {
        {9, 3.9, 5507.55},
        {6, 1.73, 5223.69}
    };

    return data;
 80019e8:	4b02      	ldr	r3, [pc, #8]	; (80019f4 <initB1+0x10>)
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	20000cb0 	.word	0x20000cb0

080019f8 <getB0>:

double getB0(struct B0 *data, double julianEphemerisMillenium)
{
 80019f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019fc:	b088      	sub	sp, #32
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	ed87 0b00 	vstr	d0, [r7]
    double B0 = 0;
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 5; i++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	e048      	b.n	8001aaa <getB0+0xb2>
    {
        B0 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fd82 	bl	8000534 <__aeabi_i2d>
 8001a30:	4680      	mov	r8, r0
 8001a32:	4689      	mov	r9, r1
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	4613      	mov	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001a5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a60:	f7fe fdd2 	bl	8000608 <__aeabi_dmul>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4620      	mov	r0, r4
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	f7fe fc16 	bl	800029c <__adddf3>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	ec43 2b17 	vmov	d7, r2, r3
 8001a78:	eeb0 0a47 	vmov.f32	s0, s14
 8001a7c:	eef0 0a67 	vmov.f32	s1, s15
 8001a80:	f00b fea6 	bl	800d7d0 <cos>
 8001a84:	ec53 2b10 	vmov	r2, r3, d0
 8001a88:	4640      	mov	r0, r8
 8001a8a:	4649      	mov	r1, r9
 8001a8c:	f7fe fdbc 	bl	8000608 <__aeabi_dmul>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a98:	f7fe fc00 	bl	800029c <__adddf3>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 5; i++)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	ddb3      	ble.n	8001a18 <getB0+0x20>
    }
    return B0;
 8001ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ab4:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ab8:	eeb0 0a47 	vmov.f32	s0, s14
 8001abc:	eef0 0a67 	vmov.f32	s1, s15
 8001ac0:	3720      	adds	r7, #32
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001ac8 <getB1>:

double getB1(struct B1 *data, double julianEphemerisMillenium)
{
 8001ac8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001acc:	b088      	sub	sp, #32
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	ed87 0b00 	vstr	d0, [r7]
    double B1 = 0;
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 2; i++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	e048      	b.n	8001b7a <getB1+0xb2>
    {
        B1 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	4613      	mov	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	461a      	mov	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fd1a 	bl	8000534 <__aeabi_i2d>
 8001b00:	4680      	mov	r8, r0
 8001b02:	4689      	mov	r9, r1
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001b2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b30:	f7fe fd6a 	bl	8000608 <__aeabi_dmul>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4620      	mov	r0, r4
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	f7fe fbae 	bl	800029c <__adddf3>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	ec43 2b17 	vmov	d7, r2, r3
 8001b48:	eeb0 0a47 	vmov.f32	s0, s14
 8001b4c:	eef0 0a67 	vmov.f32	s1, s15
 8001b50:	f00b fe3e 	bl	800d7d0 <cos>
 8001b54:	ec53 2b10 	vmov	r2, r3, d0
 8001b58:	4640      	mov	r0, r8
 8001b5a:	4649      	mov	r1, r9
 8001b5c:	f7fe fd54 	bl	8000608 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b68:	f7fe fb98 	bl	800029c <__adddf3>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 2; i++)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3301      	adds	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	ddb3      	ble.n	8001ae8 <getB1+0x20>
    }
    return B1;
 8001b80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b84:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b88:	eeb0 0a47 	vmov.f32	s0, s14
 8001b8c:	eef0 0a67 	vmov.f32	s1, s15
 8001b90:	3720      	adds	r7, #32
 8001b92:	46bd      	mov	sp, r7
 8001b94:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001b98 <getHeliocentricLatitude>:

double getHeliocentricLatitude(double B0, double B1, double JME)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001ba2:	ed87 1b02 	vstr	d1, [r7, #8]
 8001ba6:	ed87 2b00 	vstr	d2, [r7]
    double heliocentric_latitude = (B0 + (B1 * JME)) / pow(10, 8);
 8001baa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bb2:	f7fe fd29 	bl	8000608 <__aeabi_dmul>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bc2:	f7fe fb6b 	bl	800029c <__adddf3>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	a317      	add	r3, pc, #92	; (adr r3, 8001c2c <getHeliocentricLatitude+0x94>)
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	f7fe fe42 	bl	800085c <__aeabi_ddiv>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	e9c7 2306 	strd	r2, r3, [r7, #24]

    heliocentric_latitude = (heliocentric_latitude * 180) / M_PI;
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <getHeliocentricLatitude+0x90>)
 8001be6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bea:	f7fe fd0d 	bl	8000608 <__aeabi_dmul>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	a30a      	add	r3, pc, #40	; (adr r3, 8001c20 <getHeliocentricLatitude+0x88>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	f7fe fe2e 	bl	800085c <__aeabi_ddiv>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return heliocentric_latitude;
 8001c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c0c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c10:	eeb0 0a47 	vmov.f32	s0, s14
 8001c14:	eef0 0a67 	vmov.f32	s1, s15
 8001c18:	3720      	adds	r7, #32
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	54442d18 	.word	0x54442d18
 8001c24:	400921fb 	.word	0x400921fb
 8001c28:	40668000 	.word	0x40668000
 8001c2c:	00000000 	.word	0x00000000
 8001c30:	4197d784 	.word	0x4197d784

08001c34 <initR0>:


struct R0 *initR0()
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
        {28, 1.21, 6286.6},
        {28, 1.9, 6279.55},
        {26, 4.59, 10447.39}
    };

    return data;
 8001c38:	4b02      	ldr	r3, [pc, #8]	; (8001c44 <initR0+0x10>)
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	20000ce0 	.word	0x20000ce0

08001c48 <initR1>:


struct R1 *initR1()
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
        {10, 5.91, 10977.08},
        {9, 1.42, 6275.96},
        {9, 0.27, 5486.78}
    };

    return data;
 8001c4c:	4b02      	ldr	r3, [pc, #8]	; (8001c58 <initR1+0x10>)
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	200010a0 	.word	0x200010a0

08001c5c <initR2>:

struct R2 *initR2()
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
        {9, 3.63, 77713.77},
        {6, 1.87, 5573.14},
        {3, 5.47, 18849.23}
    };

    return data;
 8001c60:	4b02      	ldr	r3, [pc, #8]	; (8001c6c <initR2+0x10>)
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	20001190 	.word	0x20001190

08001c70 <initR3>:


struct R3 *initR3()
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
    static struct R3 data[2] = {
        {145, 4.273, 6283.076},
        {7, 3.92, 12566.15}
    };

    return data;
 8001c74:	4b02      	ldr	r3, [pc, #8]	; (8001c80 <initR3+0x10>)
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	20001220 	.word	0x20001220

08001c84 <initR4>:

struct R4 *initR4()
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
    static struct R4 data[1] = {
        {4, 2.56, 6283.08}
    };

    return data;
 8001c88:	4b02      	ldr	r3, [pc, #8]	; (8001c94 <initR4+0x10>)
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	20001250 	.word	0x20001250

08001c98 <getR0>:

double getR0(struct R0 *data, double julianEphemerisMillenium)
{
 8001c98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c9c:	b088      	sub	sp, #32
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	ed87 0b00 	vstr	d0, [r7]
    double R0 = 0;
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 40; i++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	e048      	b.n	8001d4a <getR0+0xb2>
    {
        R0 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fc32 	bl	8000534 <__aeabi_i2d>
 8001cd0:	4680      	mov	r8, r0
 8001cd2:	4689      	mov	r9, r1
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001cfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d00:	f7fe fc82 	bl	8000608 <__aeabi_dmul>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4620      	mov	r0, r4
 8001d0a:	4629      	mov	r1, r5
 8001d0c:	f7fe fac6 	bl	800029c <__adddf3>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	ec43 2b17 	vmov	d7, r2, r3
 8001d18:	eeb0 0a47 	vmov.f32	s0, s14
 8001d1c:	eef0 0a67 	vmov.f32	s1, s15
 8001d20:	f00b fd56 	bl	800d7d0 <cos>
 8001d24:	ec53 2b10 	vmov	r2, r3, d0
 8001d28:	4640      	mov	r0, r8
 8001d2a:	4649      	mov	r1, r9
 8001d2c:	f7fe fc6c 	bl	8000608 <__aeabi_dmul>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d38:	f7fe fab0 	bl	800029c <__adddf3>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 40; i++)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	3301      	adds	r3, #1
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2b27      	cmp	r3, #39	; 0x27
 8001d4e:	ddb3      	ble.n	8001cb8 <getR0+0x20>
    }
    return R0;
 8001d50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d54:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d58:	eeb0 0a47 	vmov.f32	s0, s14
 8001d5c:	eef0 0a67 	vmov.f32	s1, s15
 8001d60:	3720      	adds	r7, #32
 8001d62:	46bd      	mov	sp, r7
 8001d64:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001d68 <getR1>:

double getR1(struct R1 *data, double julianEphemerisMillenium)
{
 8001d68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d6c:	b088      	sub	sp, #32
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	ed87 0b00 	vstr	d0, [r7]
    double R1 = 0;
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 10; i++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	e048      	b.n	8001e1a <getR1+0xb2>
    {
        R1 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	461a      	mov	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4413      	add	r3, r2
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fbca 	bl	8000534 <__aeabi_i2d>
 8001da0:	4680      	mov	r8, r0
 8001da2:	4689      	mov	r9, r1
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	461a      	mov	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4413      	add	r3, r2
 8001db4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dd0:	f7fe fc1a 	bl	8000608 <__aeabi_dmul>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4620      	mov	r0, r4
 8001dda:	4629      	mov	r1, r5
 8001ddc:	f7fe fa5e 	bl	800029c <__adddf3>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	ec43 2b17 	vmov	d7, r2, r3
 8001de8:	eeb0 0a47 	vmov.f32	s0, s14
 8001dec:	eef0 0a67 	vmov.f32	s1, s15
 8001df0:	f00b fcee 	bl	800d7d0 <cos>
 8001df4:	ec53 2b10 	vmov	r2, r3, d0
 8001df8:	4640      	mov	r0, r8
 8001dfa:	4649      	mov	r1, r9
 8001dfc:	f7fe fc04 	bl	8000608 <__aeabi_dmul>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e08:	f7fe fa48 	bl	800029c <__adddf3>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 10; i++)
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	3301      	adds	r3, #1
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2b09      	cmp	r3, #9
 8001e1e:	ddb3      	ble.n	8001d88 <getR1+0x20>
    }
    return R1;
 8001e20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e24:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e28:	eeb0 0a47 	vmov.f32	s0, s14
 8001e2c:	eef0 0a67 	vmov.f32	s1, s15
 8001e30:	3720      	adds	r7, #32
 8001e32:	46bd      	mov	sp, r7
 8001e34:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001e38 <getR2>:

double getR2(struct R2 *data, double julianEphemerisMillenium)
{
 8001e38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e3c:	b088      	sub	sp, #32
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	ed87 0b00 	vstr	d0, [r7]
    double R2 = 0;
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 6; i++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	e048      	b.n	8001eea <getR2+0xb2>
    {
        R2 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	461a      	mov	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4413      	add	r3, r2
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fb62 	bl	8000534 <__aeabi_i2d>
 8001e70:	4680      	mov	r8, r0
 8001e72:	4689      	mov	r9, r1
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	4613      	mov	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	4413      	add	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	461a      	mov	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4413      	add	r3, r2
 8001e98:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ea0:	f7fe fbb2 	bl	8000608 <__aeabi_dmul>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	4629      	mov	r1, r5
 8001eac:	f7fe f9f6 	bl	800029c <__adddf3>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	ec43 2b17 	vmov	d7, r2, r3
 8001eb8:	eeb0 0a47 	vmov.f32	s0, s14
 8001ebc:	eef0 0a67 	vmov.f32	s1, s15
 8001ec0:	f00b fc86 	bl	800d7d0 <cos>
 8001ec4:	ec53 2b10 	vmov	r2, r3, d0
 8001ec8:	4640      	mov	r0, r8
 8001eca:	4649      	mov	r1, r9
 8001ecc:	f7fe fb9c 	bl	8000608 <__aeabi_dmul>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ed8:	f7fe f9e0 	bl	800029c <__adddf3>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 6; i++)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2b05      	cmp	r3, #5
 8001eee:	ddb3      	ble.n	8001e58 <getR2+0x20>
    }
    return R2;
 8001ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ef4:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ef8:	eeb0 0a47 	vmov.f32	s0, s14
 8001efc:	eef0 0a67 	vmov.f32	s1, s15
 8001f00:	3720      	adds	r7, #32
 8001f02:	46bd      	mov	sp, r7
 8001f04:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001f08 <getR3>:

double getR3(struct R3 *data, double julianEphemerisMillenium)
{
 8001f08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f0c:	b088      	sub	sp, #32
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	ed87 0b00 	vstr	d0, [r7]
    double R3 = 0;
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	f04f 0300 	mov.w	r3, #0
 8001f1e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 2; i++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	e048      	b.n	8001fba <getR3+0xb2>
    {
        R3 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	461a      	mov	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4413      	add	r3, r2
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fafa 	bl	8000534 <__aeabi_i2d>
 8001f40:	4680      	mov	r8, r0
 8001f42:	4689      	mov	r9, r1
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4413      	add	r3, r2
 8001f54:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	461a      	mov	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4413      	add	r3, r2
 8001f68:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f70:	f7fe fb4a 	bl	8000608 <__aeabi_dmul>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4620      	mov	r0, r4
 8001f7a:	4629      	mov	r1, r5
 8001f7c:	f7fe f98e 	bl	800029c <__adddf3>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	ec43 2b17 	vmov	d7, r2, r3
 8001f88:	eeb0 0a47 	vmov.f32	s0, s14
 8001f8c:	eef0 0a67 	vmov.f32	s1, s15
 8001f90:	f00b fc1e 	bl	800d7d0 <cos>
 8001f94:	ec53 2b10 	vmov	r2, r3, d0
 8001f98:	4640      	mov	r0, r8
 8001f9a:	4649      	mov	r1, r9
 8001f9c:	f7fe fb34 	bl	8000608 <__aeabi_dmul>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001fa8:	f7fe f978 	bl	800029c <__adddf3>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 2; i++)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	ddb3      	ble.n	8001f28 <getR3+0x20>
    }
    return R3;
 8001fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fc4:	ec43 2b17 	vmov	d7, r2, r3
}
 8001fc8:	eeb0 0a47 	vmov.f32	s0, s14
 8001fcc:	eef0 0a67 	vmov.f32	s1, s15
 8001fd0:	3720      	adds	r7, #32
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001fd8 <getR4>:

double getR4(struct R4 *data, double julianEphemerisMillenium)
{
 8001fd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fdc:	b088      	sub	sp, #32
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	ed87 0b00 	vstr	d0, [r7]
    double R4 = 0;
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 1; i++)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	e048      	b.n	800208a <getR4+0xb2>
    {
        R4 += ((data + i) -> a) * cos(((data + i) -> b) + (((data + i) -> c) * julianEphemerisMillenium));
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	461a      	mov	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fa92 	bl	8000534 <__aeabi_i2d>
 8002010:	4680      	mov	r8, r0
 8002012:	4689      	mov	r9, r1
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	4613      	mov	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	4613      	mov	r3, r2
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	461a      	mov	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4413      	add	r3, r2
 8002038:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800203c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002040:	f7fe fae2 	bl	8000608 <__aeabi_dmul>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4620      	mov	r0, r4
 800204a:	4629      	mov	r1, r5
 800204c:	f7fe f926 	bl	800029c <__adddf3>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	ec43 2b17 	vmov	d7, r2, r3
 8002058:	eeb0 0a47 	vmov.f32	s0, s14
 800205c:	eef0 0a67 	vmov.f32	s1, s15
 8002060:	f00b fbb6 	bl	800d7d0 <cos>
 8002064:	ec53 2b10 	vmov	r2, r3, d0
 8002068:	4640      	mov	r0, r8
 800206a:	4649      	mov	r1, r9
 800206c:	f7fe facc 	bl	8000608 <__aeabi_dmul>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002078:	f7fe f910 	bl	800029c <__adddf3>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < 1; i++)
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	3301      	adds	r3, #1
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2b00      	cmp	r3, #0
 800208e:	ddb3      	ble.n	8001ff8 <getR4+0x20>
    }
    return R4;
 8002090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002094:	ec43 2b17 	vmov	d7, r2, r3
}
 8002098:	eeb0 0a47 	vmov.f32	s0, s14
 800209c:	eef0 0a67 	vmov.f32	s1, s15
 80020a0:	3720      	adds	r7, #32
 80020a2:	46bd      	mov	sp, r7
 80020a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080020a8 <getEarthRadiusVector>:

double getEarthRadiusVector(double R0, double R1, double R2, double R3, double R4, double JME)
{
 80020a8:	b5b0      	push	{r4, r5, r7, lr}
 80020aa:	b08e      	sub	sp, #56	; 0x38
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80020b2:	ed87 1b08 	vstr	d1, [r7, #32]
 80020b6:	ed87 2b06 	vstr	d2, [r7, #24]
 80020ba:	ed87 3b04 	vstr	d3, [r7, #16]
 80020be:	ed87 4b02 	vstr	d4, [r7, #8]
 80020c2:	ed87 5b00 	vstr	d5, [r7]
    double earth_radiusVector = (R0 + (R1 * JME) + (R2 * pow(JME, 2)) + (R3 * pow(JME, 3)) + (R4 * pow(JME, 4))) / pow(10, 8);
 80020c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020ce:	f7fe fa9b 	bl	8000608 <__aeabi_dmul>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020de:	f7fe f8dd 	bl	800029c <__adddf3>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4614      	mov	r4, r2
 80020e8:	461d      	mov	r5, r3
 80020ea:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8002198 <getEarthRadiusVector+0xf0>
 80020ee:	ed97 0b00 	vldr	d0, [r7]
 80020f2:	f00b f95b 	bl	800d3ac <pow>
 80020f6:	ec51 0b10 	vmov	r0, r1, d0
 80020fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020fe:	f7fe fa83 	bl	8000608 <__aeabi_dmul>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4620      	mov	r0, r4
 8002108:	4629      	mov	r1, r5
 800210a:	f7fe f8c7 	bl	800029c <__adddf3>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4614      	mov	r4, r2
 8002114:	461d      	mov	r5, r3
 8002116:	ed9f 1b22 	vldr	d1, [pc, #136]	; 80021a0 <getEarthRadiusVector+0xf8>
 800211a:	ed97 0b00 	vldr	d0, [r7]
 800211e:	f00b f945 	bl	800d3ac <pow>
 8002122:	ec51 0b10 	vmov	r0, r1, d0
 8002126:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800212a:	f7fe fa6d 	bl	8000608 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4620      	mov	r0, r4
 8002134:	4629      	mov	r1, r5
 8002136:	f7fe f8b1 	bl	800029c <__adddf3>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4614      	mov	r4, r2
 8002140:	461d      	mov	r5, r3
 8002142:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80021a8 <getEarthRadiusVector+0x100>
 8002146:	ed97 0b00 	vldr	d0, [r7]
 800214a:	f00b f92f 	bl	800d3ac <pow>
 800214e:	ec51 0b10 	vmov	r0, r1, d0
 8002152:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002156:	f7fe fa57 	bl	8000608 <__aeabi_dmul>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4620      	mov	r0, r4
 8002160:	4629      	mov	r1, r5
 8002162:	f7fe f89b 	bl	800029c <__adddf3>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4610      	mov	r0, r2
 800216c:	4619      	mov	r1, r3
 800216e:	a310      	add	r3, pc, #64	; (adr r3, 80021b0 <getEarthRadiusVector+0x108>)
 8002170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002174:	f7fe fb72 	bl	800085c <__aeabi_ddiv>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    return earth_radiusVector;
 8002180:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002184:	ec43 2b17 	vmov	d7, r2, r3
}
 8002188:	eeb0 0a47 	vmov.f32	s0, s14
 800218c:	eef0 0a67 	vmov.f32	s1, s15
 8002190:	3738      	adds	r7, #56	; 0x38
 8002192:	46bd      	mov	sp, r7
 8002194:	bdb0      	pop	{r4, r5, r7, pc}
 8002196:	bf00      	nop
 8002198:	00000000 	.word	0x00000000
 800219c:	40000000 	.word	0x40000000
 80021a0:	00000000 	.word	0x00000000
 80021a4:	40080000 	.word	0x40080000
 80021a8:	00000000 	.word	0x00000000
 80021ac:	40100000 	.word	0x40100000
 80021b0:	00000000 	.word	0x00000000
 80021b4:	4197d784 	.word	0x4197d784

080021b8 <getGeocentricLongitude>:

double getGeocentricLongitude(double heliocentric_longitude)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	ed87 0b00 	vstr	d0, [r7]
    double geocentric_longitude = heliocentric_longitude + 180;
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	4b2e      	ldr	r3, [pc, #184]	; (8002280 <getGeocentricLongitude+0xc8>)
 80021c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021cc:	f7fe f866 	bl	800029c <__adddf3>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    geocentric_longitude = geocentric_longitude / 360;
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	4b29      	ldr	r3, [pc, #164]	; (8002284 <getGeocentricLongitude+0xcc>)
 80021de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021e2:	f7fe fb3b 	bl	800085c <__aeabi_ddiv>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	e9c7 2304 	strd	r2, r3, [r7, #16]

    double fraction = fabs(geocentric_longitude - floor(abs(geocentric_longitude)));
 80021ee:	ed97 0b04 	vldr	d0, [r7, #16]
 80021f2:	f008 f921 	bl	800a438 <abs>
 80021f6:	4603      	mov	r3, r0
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe f99b 	bl	8000534 <__aeabi_i2d>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002206:	f7fe f847 	bl	8000298 <__aeabi_dsub>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4611      	mov	r1, r2
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002216:	60fb      	str	r3, [r7, #12]

    if (geocentric_longitude > 0)
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002224:	f7fe fc80 	bl	8000b28 <__aeabi_dcmpgt>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00b      	beq.n	8002246 <getGeocentricLongitude+0x8e>
    {
        geocentric_longitude = 360 * fraction;
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	4b14      	ldr	r3, [pc, #80]	; (8002284 <getGeocentricLongitude+0xcc>)
 8002234:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002238:	f7fe f9e6 	bl	8000608 <__aeabi_dmul>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002244:	e011      	b.n	800226a <getGeocentricLongitude+0xb2>
    }
    else
    {
        geocentric_longitude = 360 - (360 * fraction);
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <getGeocentricLongitude+0xcc>)
 800224c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002250:	f7fe f9da 	bl	8000608 <__aeabi_dmul>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	f04f 0000 	mov.w	r0, #0
 800225c:	4909      	ldr	r1, [pc, #36]	; (8002284 <getGeocentricLongitude+0xcc>)
 800225e:	f7fe f81b 	bl	8000298 <__aeabi_dsub>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	e9c7 2304 	strd	r2, r3, [r7, #16]
    }

    return geocentric_longitude;
 800226a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800226e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002272:	eeb0 0a47 	vmov.f32	s0, s14
 8002276:	eef0 0a67 	vmov.f32	s1, s15
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40668000 	.word	0x40668000
 8002284:	40768000 	.word	0x40768000

08002288 <getMeanElongation_MoonFromSun>:

double getMeanElongation_MoonFromSun(double julianEphemerisCentury)
{
 8002288:	b5b0      	push	{r4, r5, r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	ed87 0b00 	vstr	d0, [r7]
    double mean_elongation = 297.85036 + (445267.111480 * julianEphemerisCentury) - (0.0019142 * pow(julianEphemerisCentury, 2)) +
 8002292:	a32b      	add	r3, pc, #172	; (adr r3, 8002340 <getMeanElongation_MoonFromSun+0xb8>)
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002298:	e9d7 0100 	ldrd	r0, r1, [r7]
 800229c:	f7fe f9b4 	bl	8000608 <__aeabi_dmul>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4610      	mov	r0, r2
 80022a6:	4619      	mov	r1, r3
 80022a8:	a327      	add	r3, pc, #156	; (adr r3, 8002348 <getMeanElongation_MoonFromSun+0xc0>)
 80022aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ae:	f7fd fff5 	bl	800029c <__adddf3>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4614      	mov	r4, r2
 80022b8:	461d      	mov	r5, r3
 80022ba:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8002330 <getMeanElongation_MoonFromSun+0xa8>
 80022be:	ed97 0b00 	vldr	d0, [r7]
 80022c2:	f00b f873 	bl	800d3ac <pow>
 80022c6:	ec51 0b10 	vmov	r0, r1, d0
 80022ca:	a321      	add	r3, pc, #132	; (adr r3, 8002350 <getMeanElongation_MoonFromSun+0xc8>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fe f99a 	bl	8000608 <__aeabi_dmul>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4620      	mov	r0, r4
 80022da:	4629      	mov	r1, r5
 80022dc:	f7fd ffdc 	bl	8000298 <__aeabi_dsub>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4614      	mov	r4, r2
 80022e6:	461d      	mov	r5, r3
    (pow(julianEphemerisCentury, 3) / 189474);
 80022e8:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8002338 <getMeanElongation_MoonFromSun+0xb0>
 80022ec:	ed97 0b00 	vldr	d0, [r7]
 80022f0:	f00b f85c 	bl	800d3ac <pow>
 80022f4:	ec51 0b10 	vmov	r0, r1, d0
 80022f8:	a317      	add	r3, pc, #92	; (adr r3, 8002358 <getMeanElongation_MoonFromSun+0xd0>)
 80022fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fe:	f7fe faad 	bl	800085c <__aeabi_ddiv>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
    double mean_elongation = 297.85036 + (445267.111480 * julianEphemerisCentury) - (0.0019142 * pow(julianEphemerisCentury, 2)) +
 8002306:	4620      	mov	r0, r4
 8002308:	4629      	mov	r1, r5
 800230a:	f7fd ffc7 	bl	800029c <__adddf3>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return mean_elongation;
 8002316:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800231a:	ec43 2b17 	vmov	d7, r2, r3
}
 800231e:	eeb0 0a47 	vmov.f32	s0, s14
 8002322:	eef0 0a67 	vmov.f32	s1, s15
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bdb0      	pop	{r4, r5, r7, pc}
 800232c:	f3af 8000 	nop.w
 8002330:	00000000 	.word	0x00000000
 8002334:	40000000 	.word	0x40000000
 8002338:	00000000 	.word	0x00000000
 800233c:	40080000 	.word	0x40080000
 8002340:	7227d029 	.word	0x7227d029
 8002344:	411b2d4c 	.word	0x411b2d4c
 8002348:	13165d3a 	.word	0x13165d3a
 800234c:	40729d9b 	.word	0x40729d9b
 8002350:	9978e26a 	.word	0x9978e26a
 8002354:	3f5f5cbc 	.word	0x3f5f5cbc
 8002358:	00000000 	.word	0x00000000
 800235c:	41072110 	.word	0x41072110

08002360 <getMeanAnomalySun>:

double getMeanAnomalySun(double julianEphemerisCentury)
{
 8002360:	b5b0      	push	{r4, r5, r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	ed87 0b00 	vstr	d0, [r7]
    double mean_anomaly = 357.52772 + (35999.050340 * julianEphemerisCentury) - (0.0001603 * pow(julianEphemerisCentury, 2)) -
 800236a:	a32b      	add	r3, pc, #172	; (adr r3, 8002418 <getMeanAnomalySun+0xb8>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002374:	f7fe f948 	bl	8000608 <__aeabi_dmul>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4610      	mov	r0, r2
 800237e:	4619      	mov	r1, r3
 8002380:	a327      	add	r3, pc, #156	; (adr r3, 8002420 <getMeanAnomalySun+0xc0>)
 8002382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002386:	f7fd ff89 	bl	800029c <__adddf3>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4614      	mov	r4, r2
 8002390:	461d      	mov	r5, r3
 8002392:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8002408 <getMeanAnomalySun+0xa8>
 8002396:	ed97 0b00 	vldr	d0, [r7]
 800239a:	f00b f807 	bl	800d3ac <pow>
 800239e:	ec51 0b10 	vmov	r0, r1, d0
 80023a2:	a321      	add	r3, pc, #132	; (adr r3, 8002428 <getMeanAnomalySun+0xc8>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	f7fe f92e 	bl	8000608 <__aeabi_dmul>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4620      	mov	r0, r4
 80023b2:	4629      	mov	r1, r5
 80023b4:	f7fd ff70 	bl	8000298 <__aeabi_dsub>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4614      	mov	r4, r2
 80023be:	461d      	mov	r5, r3
    (pow(julianEphemerisCentury, 3) / 300000);
 80023c0:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8002410 <getMeanAnomalySun+0xb0>
 80023c4:	ed97 0b00 	vldr	d0, [r7]
 80023c8:	f00a fff0 	bl	800d3ac <pow>
 80023cc:	ec51 0b10 	vmov	r0, r1, d0
 80023d0:	a317      	add	r3, pc, #92	; (adr r3, 8002430 <getMeanAnomalySun+0xd0>)
 80023d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d6:	f7fe fa41 	bl	800085c <__aeabi_ddiv>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
    double mean_anomaly = 357.52772 + (35999.050340 * julianEphemerisCentury) - (0.0001603 * pow(julianEphemerisCentury, 2)) -
 80023de:	4620      	mov	r0, r4
 80023e0:	4629      	mov	r1, r5
 80023e2:	f7fd ff59 	bl	8000298 <__aeabi_dsub>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return mean_anomaly;
 80023ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80023f6:	eeb0 0a47 	vmov.f32	s0, s14
 80023fa:	eef0 0a67 	vmov.f32	s1, s15
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bdb0      	pop	{r4, r5, r7, pc}
 8002404:	f3af 8000 	nop.w
 8002408:	00000000 	.word	0x00000000
 800240c:	40000000 	.word	0x40000000
 8002410:	00000000 	.word	0x00000000
 8002414:	40080000 	.word	0x40080000
 8002418:	9c62a1b6 	.word	0x9c62a1b6
 800241c:	40e193e1 	.word	0x40e193e1
 8002420:	8a86d71f 	.word	0x8a86d71f
 8002424:	40765871 	.word	0x40765871
 8002428:	83dd6fb2 	.word	0x83dd6fb2
 800242c:	3f2502c6 	.word	0x3f2502c6
 8002430:	00000000 	.word	0x00000000
 8002434:	41124f80 	.word	0x41124f80

08002438 <getMeanAnomalyMoon>:

double getMeanAnomalyMoon(double julianEphemerisCentury)
{
 8002438:	b5b0      	push	{r4, r5, r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	ed87 0b00 	vstr	d0, [r7]
    double mean_anomaly = 134.96298 + (477198.867398 * julianEphemerisCentury) + (0.0086972 * pow(julianEphemerisCentury, 2)) +
 8002442:	a32b      	add	r3, pc, #172	; (adr r3, 80024f0 <getMeanAnomalyMoon+0xb8>)
 8002444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002448:	e9d7 0100 	ldrd	r0, r1, [r7]
 800244c:	f7fe f8dc 	bl	8000608 <__aeabi_dmul>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4610      	mov	r0, r2
 8002456:	4619      	mov	r1, r3
 8002458:	a327      	add	r3, pc, #156	; (adr r3, 80024f8 <getMeanAnomalyMoon+0xc0>)
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	f7fd ff1d 	bl	800029c <__adddf3>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4614      	mov	r4, r2
 8002468:	461d      	mov	r5, r3
 800246a:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 80024e0 <getMeanAnomalyMoon+0xa8>
 800246e:	ed97 0b00 	vldr	d0, [r7]
 8002472:	f00a ff9b 	bl	800d3ac <pow>
 8002476:	ec51 0b10 	vmov	r0, r1, d0
 800247a:	a321      	add	r3, pc, #132	; (adr r3, 8002500 <getMeanAnomalyMoon+0xc8>)
 800247c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002480:	f7fe f8c2 	bl	8000608 <__aeabi_dmul>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4620      	mov	r0, r4
 800248a:	4629      	mov	r1, r5
 800248c:	f7fd ff06 	bl	800029c <__adddf3>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4614      	mov	r4, r2
 8002496:	461d      	mov	r5, r3
    (pow(julianEphemerisCentury, 3) / 56250);
 8002498:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80024e8 <getMeanAnomalyMoon+0xb0>
 800249c:	ed97 0b00 	vldr	d0, [r7]
 80024a0:	f00a ff84 	bl	800d3ac <pow>
 80024a4:	ec51 0b10 	vmov	r0, r1, d0
 80024a8:	a317      	add	r3, pc, #92	; (adr r3, 8002508 <getMeanAnomalyMoon+0xd0>)
 80024aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ae:	f7fe f9d5 	bl	800085c <__aeabi_ddiv>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
    double mean_anomaly = 134.96298 + (477198.867398 * julianEphemerisCentury) + (0.0086972 * pow(julianEphemerisCentury, 2)) +
 80024b6:	4620      	mov	r0, r4
 80024b8:	4629      	mov	r1, r5
 80024ba:	f7fd feef 	bl	800029c <__adddf3>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return mean_anomaly;
 80024c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024ca:	ec43 2b17 	vmov	d7, r2, r3
}
 80024ce:	eeb0 0a47 	vmov.f32	s0, s14
 80024d2:	eef0 0a67 	vmov.f32	s1, s15
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bdb0      	pop	{r4, r5, r7, pc}
 80024dc:	f3af 8000 	nop.w
 80024e0:	00000000 	.word	0x00000000
 80024e4:	40000000 	.word	0x40000000
 80024e8:	00000000 	.word	0x00000000
 80024ec:	40080000 	.word	0x40080000
 80024f0:	78372e6a 	.word	0x78372e6a
 80024f4:	411d203b 	.word	0x411d203b
 80024f8:	bb6ed677 	.word	0xbb6ed677
 80024fc:	4060ded0 	.word	0x4060ded0
 8002500:	6c88bf57 	.word	0x6c88bf57
 8002504:	3f81cfd6 	.word	0x3f81cfd6
 8002508:	00000000 	.word	0x00000000
 800250c:	40eb7740 	.word	0x40eb7740

08002510 <getMoonLatitudeArgument>:

double getMoonLatitudeArgument(double julianEphemerisCentury)
{
 8002510:	b5b0      	push	{r4, r5, r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	ed87 0b00 	vstr	d0, [r7]
    double moon_latitude_argument = 93.27191 + (483202.017538 * julianEphemerisCentury) + (0.0036825 * pow(julianEphemerisCentury, 2)) +
 800251a:	a32b      	add	r3, pc, #172	; (adr r3, 80025c8 <getMoonLatitudeArgument+0xb8>)
 800251c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002520:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002524:	f7fe f870 	bl	8000608 <__aeabi_dmul>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4610      	mov	r0, r2
 800252e:	4619      	mov	r1, r3
 8002530:	a327      	add	r3, pc, #156	; (adr r3, 80025d0 <getMoonLatitudeArgument+0xc0>)
 8002532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002536:	f7fd feb1 	bl	800029c <__adddf3>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4614      	mov	r4, r2
 8002540:	461d      	mov	r5, r3
 8002542:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 80025b8 <getMoonLatitudeArgument+0xa8>
 8002546:	ed97 0b00 	vldr	d0, [r7]
 800254a:	f00a ff2f 	bl	800d3ac <pow>
 800254e:	ec51 0b10 	vmov	r0, r1, d0
 8002552:	a321      	add	r3, pc, #132	; (adr r3, 80025d8 <getMoonLatitudeArgument+0xc8>)
 8002554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002558:	f7fe f856 	bl	8000608 <__aeabi_dmul>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4620      	mov	r0, r4
 8002562:	4629      	mov	r1, r5
 8002564:	f7fd fe9a 	bl	800029c <__adddf3>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4614      	mov	r4, r2
 800256e:	461d      	mov	r5, r3
    (pow(julianEphemerisCentury, 3) / 327270);
 8002570:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80025c0 <getMoonLatitudeArgument+0xb0>
 8002574:	ed97 0b00 	vldr	d0, [r7]
 8002578:	f00a ff18 	bl	800d3ac <pow>
 800257c:	ec51 0b10 	vmov	r0, r1, d0
 8002580:	a317      	add	r3, pc, #92	; (adr r3, 80025e0 <getMoonLatitudeArgument+0xd0>)
 8002582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002586:	f7fe f969 	bl	800085c <__aeabi_ddiv>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
    double moon_latitude_argument = 93.27191 + (483202.017538 * julianEphemerisCentury) + (0.0036825 * pow(julianEphemerisCentury, 2)) +
 800258e:	4620      	mov	r0, r4
 8002590:	4629      	mov	r1, r5
 8002592:	f7fd fe83 	bl	800029c <__adddf3>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return moon_latitude_argument;
 800259e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80025a6:	eeb0 0a47 	vmov.f32	s0, s14
 80025aa:	eef0 0a67 	vmov.f32	s1, s15
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bdb0      	pop	{r4, r5, r7, pc}
 80025b4:	f3af 8000 	nop.w
 80025b8:	00000000 	.word	0x00000000
 80025bc:	40000000 	.word	0x40000000
 80025c0:	00000000 	.word	0x00000000
 80025c4:	40080000 	.word	0x40080000
 80025c8:	11f57b42 	.word	0x11f57b42
 80025cc:	411d7e08 	.word	0x411d7e08
 80025d0:	f9335d25 	.word	0xf9335d25
 80025d4:	40575166 	.word	0x40575166
 80025d8:	22291fb4 	.word	0x22291fb4
 80025dc:	3f6e2ac3 	.word	0x3f6e2ac3
 80025e0:	00000000 	.word	0x00000000
 80025e4:	4113f998 	.word	0x4113f998

080025e8 <getMoonAscendingNode>:

double getMoonAscendingNode(double julianEphemerisCentury)
{
 80025e8:	b5b0      	push	{r4, r5, r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	ed87 0b00 	vstr	d0, [r7]
    double moon_ascending_node = 125.04452 - (1934.136261 * julianEphemerisCentury) + (0.0020708 * pow(julianEphemerisCentury, 2)) +
 80025f2:	a329      	add	r3, pc, #164	; (adr r3, 8002698 <getMoonAscendingNode+0xb0>)
 80025f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025fc:	f7fe f804 	bl	8000608 <__aeabi_dmul>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	a126      	add	r1, pc, #152	; (adr r1, 80026a0 <getMoonAscendingNode+0xb8>)
 8002606:	e9d1 0100 	ldrd	r0, r1, [r1]
 800260a:	f7fd fe45 	bl	8000298 <__aeabi_dsub>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4614      	mov	r4, r2
 8002614:	461d      	mov	r5, r3
 8002616:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8002688 <getMoonAscendingNode+0xa0>
 800261a:	ed97 0b00 	vldr	d0, [r7]
 800261e:	f00a fec5 	bl	800d3ac <pow>
 8002622:	ec51 0b10 	vmov	r0, r1, d0
 8002626:	a320      	add	r3, pc, #128	; (adr r3, 80026a8 <getMoonAscendingNode+0xc0>)
 8002628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262c:	f7fd ffec 	bl	8000608 <__aeabi_dmul>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4620      	mov	r0, r4
 8002636:	4629      	mov	r1, r5
 8002638:	f7fd fe30 	bl	800029c <__adddf3>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4614      	mov	r4, r2
 8002642:	461d      	mov	r5, r3
    (pow(julianEphemerisCentury, 3) / 450000);
 8002644:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8002690 <getMoonAscendingNode+0xa8>
 8002648:	ed97 0b00 	vldr	d0, [r7]
 800264c:	f00a feae 	bl	800d3ac <pow>
 8002650:	ec51 0b10 	vmov	r0, r1, d0
 8002654:	a316      	add	r3, pc, #88	; (adr r3, 80026b0 <getMoonAscendingNode+0xc8>)
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	f7fe f8ff 	bl	800085c <__aeabi_ddiv>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
    double moon_ascending_node = 125.04452 - (1934.136261 * julianEphemerisCentury) + (0.0020708 * pow(julianEphemerisCentury, 2)) +
 8002662:	4620      	mov	r0, r4
 8002664:	4629      	mov	r1, r5
 8002666:	f7fd fe19 	bl	800029c <__adddf3>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return moon_ascending_node;
 8002672:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002676:	ec43 2b17 	vmov	d7, r2, r3
}
 800267a:	eeb0 0a47 	vmov.f32	s0, s14
 800267e:	eef0 0a67 	vmov.f32	s1, s15
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bdb0      	pop	{r4, r5, r7, pc}
 8002688:	00000000 	.word	0x00000000
 800268c:	40000000 	.word	0x40000000
 8002690:	00000000 	.word	0x00000000
 8002694:	40080000 	.word	0x40080000
 8002698:	8800eae2 	.word	0x8800eae2
 800269c:	409e388b 	.word	0x409e388b
 80026a0:	6a6a0126 	.word	0x6a6a0126
 80026a4:	405f42d9 	.word	0x405f42d9
 80026a8:	48d98da5 	.word	0x48d98da5
 80026ac:	3f60f6c8 	.word	0x3f60f6c8
 80026b0:	00000000 	.word	0x00000000
 80026b4:	411b7740 	.word	0x411b7740

080026b8 <getNutation>:

double *getNutation(const int Y[63][5], const double abcd[63][4], double JCE, double x0, double x1, double x2, double x3, double x4)
{
 80026b8:	b5b0      	push	{r4, r5, r7, lr}
 80026ba:	b096      	sub	sp, #88	; 0x58
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6378      	str	r0, [r7, #52]	; 0x34
 80026c0:	6339      	str	r1, [r7, #48]	; 0x30
 80026c2:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80026c6:	ed87 1b08 	vstr	d1, [r7, #32]
 80026ca:	ed87 2b06 	vstr	d2, [r7, #24]
 80026ce:	ed87 3b04 	vstr	d3, [r7, #16]
 80026d2:	ed87 4b02 	vstr	d4, [r7, #8]
 80026d6:	ed87 5b00 	vstr	d5, [r7]
    double phi = 0;
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    double eps = 0;
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    for (int i = 0; i < 63; i++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	647b      	str	r3, [r7, #68]	; 0x44
 80026f6:	e0e5      	b.n	80028c4 <getNutation+0x20c>
    {
        double xySum = x0*Y[i][0] + x1*Y[i][1] + x2*Y[i][2] + x3*Y[i][3] + x4*Y[i][4];
 80026f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	461a      	mov	r2, r3
 8002704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002706:	4413      	add	r3, r2
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fd ff12 	bl	8000534 <__aeabi_i2d>
 8002710:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002714:	f7fd ff78 	bl	8000608 <__aeabi_dmul>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4614      	mov	r4, r2
 800271e:	461d      	mov	r5, r3
 8002720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	461a      	mov	r2, r3
 800272c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272e:	4413      	add	r3, r2
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fd fefe 	bl	8000534 <__aeabi_i2d>
 8002738:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800273c:	f7fd ff64 	bl	8000608 <__aeabi_dmul>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4620      	mov	r0, r4
 8002746:	4629      	mov	r1, r5
 8002748:	f7fd fda8 	bl	800029c <__adddf3>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4614      	mov	r4, r2
 8002752:	461d      	mov	r5, r3
 8002754:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	461a      	mov	r2, r3
 8002760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002762:	4413      	add	r3, r2
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	4618      	mov	r0, r3
 8002768:	f7fd fee4 	bl	8000534 <__aeabi_i2d>
 800276c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002770:	f7fd ff4a 	bl	8000608 <__aeabi_dmul>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4620      	mov	r0, r4
 800277a:	4629      	mov	r1, r5
 800277c:	f7fd fd8e 	bl	800029c <__adddf3>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4614      	mov	r4, r2
 8002786:	461d      	mov	r5, r3
 8002788:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	461a      	mov	r2, r3
 8002794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002796:	4413      	add	r3, r2
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd feca 	bl	8000534 <__aeabi_i2d>
 80027a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027a4:	f7fd ff30 	bl	8000608 <__aeabi_dmul>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4620      	mov	r0, r4
 80027ae:	4629      	mov	r1, r5
 80027b0:	f7fd fd74 	bl	800029c <__adddf3>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4614      	mov	r4, r2
 80027ba:	461d      	mov	r5, r3
 80027bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	461a      	mov	r2, r3
 80027c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ca:	4413      	add	r3, r2
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fd feb0 	bl	8000534 <__aeabi_i2d>
 80027d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027d8:	f7fd ff16 	bl	8000608 <__aeabi_dmul>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4620      	mov	r0, r4
 80027e2:	4629      	mov	r1, r5
 80027e4:	f7fd fd5a 	bl	800029c <__adddf3>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        xySum = (M_PI/180.0) * xySum;
 80027f0:	a34d      	add	r3, pc, #308	; (adr r3, 8002928 <getNutation+0x270>)
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80027fa:	f7fd ff05 	bl	8000608 <__aeabi_dmul>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        phi += (abcd[i][0] + (abcd[i][1] * JCE)) * sin(xySum);
 8002806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002808:	015b      	lsls	r3, r3, #5
 800280a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800280c:	4413      	add	r3, r2
 800280e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002814:	015b      	lsls	r3, r3, #5
 8002816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002818:	4413      	add	r3, r2
 800281a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800281e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002822:	f7fd fef1 	bl	8000608 <__aeabi_dmul>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4620      	mov	r0, r4
 800282c:	4629      	mov	r1, r5
 800282e:	f7fd fd35 	bl	800029c <__adddf3>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4614      	mov	r4, r2
 8002838:	461d      	mov	r5, r3
 800283a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800283e:	f00b f827 	bl	800d890 <sin>
 8002842:	ec53 2b10 	vmov	r2, r3, d0
 8002846:	4620      	mov	r0, r4
 8002848:	4629      	mov	r1, r5
 800284a:	f7fd fedd 	bl	8000608 <__aeabi_dmul>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002856:	f7fd fd21 	bl	800029c <__adddf3>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        eps += (abcd[i][2] + (abcd[i][3] * JCE)) * cos(xySum);
 8002862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002864:	015b      	lsls	r3, r3, #5
 8002866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002868:	4413      	add	r3, r2
 800286a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800286e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002870:	015b      	lsls	r3, r3, #5
 8002872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002874:	4413      	add	r3, r2
 8002876:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800287a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800287e:	f7fd fec3 	bl	8000608 <__aeabi_dmul>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4620      	mov	r0, r4
 8002888:	4629      	mov	r1, r5
 800288a:	f7fd fd07 	bl	800029c <__adddf3>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4614      	mov	r4, r2
 8002894:	461d      	mov	r5, r3
 8002896:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800289a:	f00a ff99 	bl	800d7d0 <cos>
 800289e:	ec53 2b10 	vmov	r2, r3, d0
 80028a2:	4620      	mov	r0, r4
 80028a4:	4629      	mov	r1, r5
 80028a6:	f7fd feaf 	bl	8000608 <__aeabi_dmul>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80028b2:	f7fd fcf3 	bl	800029c <__adddf3>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    for (int i = 0; i < 63; i++)
 80028be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c0:	3301      	adds	r3, #1
 80028c2:	647b      	str	r3, [r7, #68]	; 0x44
 80028c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c6:	2b3e      	cmp	r3, #62	; 0x3e
 80028c8:	f77f af16 	ble.w	80026f8 <getNutation+0x40>
    }
    phi = phi / 36000000;
 80028cc:	a318      	add	r3, pc, #96	; (adr r3, 8002930 <getNutation+0x278>)
 80028ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80028d6:	f7fd ffc1 	bl	800085c <__aeabi_ddiv>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    eps = eps / 36000000;
 80028e2:	a313      	add	r3, pc, #76	; (adr r3, 8002930 <getNutation+0x278>)
 80028e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80028ec:	f7fd ffb6 	bl	800085c <__aeabi_ddiv>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    double *nutation = malloc(2 * sizeof(double));
 80028f8:	2010      	movs	r0, #16
 80028fa:	f007 fda5 	bl	800a448 <malloc>
 80028fe:	4603      	mov	r3, r0
 8002900:	643b      	str	r3, [r7, #64]	; 0x40
    nutation[0] = phi;
 8002902:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002904:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002908:	e9c1 2300 	strd	r2, r3, [r1]
    nutation[1] = eps;
 800290c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800290e:	f103 0108 	add.w	r1, r3, #8
 8002912:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002916:	e9c1 2300 	strd	r2, r3, [r1]

    return nutation;
 800291a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800291c:	4618      	mov	r0, r3
 800291e:	3758      	adds	r7, #88	; 0x58
 8002920:	46bd      	mov	sp, r7
 8002922:	bdb0      	pop	{r4, r5, r7, pc}
 8002924:	f3af 8000 	nop.w
 8002928:	a2529d39 	.word	0xa2529d39
 800292c:	3f91df46 	.word	0x3f91df46
 8002930:	00000000 	.word	0x00000000
 8002934:	41812a88 	.word	0x41812a88

08002938 <getMeanObliquity>:

double getMeanObliquity(double U)
{
 8002938:	b5b0      	push	{r4, r5, r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	ed87 0b00 	vstr	d0, [r7]
    double E = 84381.448 - (4680.93 * U) - (1.55 * pow(U, 2)) + (1999.25 * pow(U, 3)) - (51.38 * pow(U, 4)) - (249.67 * pow(U, 5)) -
 8002942:	a389      	add	r3, pc, #548	; (adr r3, 8002b68 <getMeanObliquity+0x230>)
 8002944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002948:	e9d7 0100 	ldrd	r0, r1, [r7]
 800294c:	f7fd fe5c 	bl	8000608 <__aeabi_dmul>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	a186      	add	r1, pc, #536	; (adr r1, 8002b70 <getMeanObliquity+0x238>)
 8002956:	e9d1 0100 	ldrd	r0, r1, [r1]
 800295a:	f7fd fc9d 	bl	8000298 <__aeabi_dsub>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4614      	mov	r4, r2
 8002964:	461d      	mov	r5, r3
 8002966:	ed9f 1b6e 	vldr	d1, [pc, #440]	; 8002b20 <getMeanObliquity+0x1e8>
 800296a:	ed97 0b00 	vldr	d0, [r7]
 800296e:	f00a fd1d 	bl	800d3ac <pow>
 8002972:	ec51 0b10 	vmov	r0, r1, d0
 8002976:	a380      	add	r3, pc, #512	; (adr r3, 8002b78 <getMeanObliquity+0x240>)
 8002978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297c:	f7fd fe44 	bl	8000608 <__aeabi_dmul>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4620      	mov	r0, r4
 8002986:	4629      	mov	r1, r5
 8002988:	f7fd fc86 	bl	8000298 <__aeabi_dsub>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4614      	mov	r4, r2
 8002992:	461d      	mov	r5, r3
 8002994:	ed9f 1b64 	vldr	d1, [pc, #400]	; 8002b28 <getMeanObliquity+0x1f0>
 8002998:	ed97 0b00 	vldr	d0, [r7]
 800299c:	f00a fd06 	bl	800d3ac <pow>
 80029a0:	ec51 0b10 	vmov	r0, r1, d0
 80029a4:	a376      	add	r3, pc, #472	; (adr r3, 8002b80 <getMeanObliquity+0x248>)
 80029a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029aa:	f7fd fe2d 	bl	8000608 <__aeabi_dmul>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4620      	mov	r0, r4
 80029b4:	4629      	mov	r1, r5
 80029b6:	f7fd fc71 	bl	800029c <__adddf3>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4614      	mov	r4, r2
 80029c0:	461d      	mov	r5, r3
 80029c2:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 8002b30 <getMeanObliquity+0x1f8>
 80029c6:	ed97 0b00 	vldr	d0, [r7]
 80029ca:	f00a fcef 	bl	800d3ac <pow>
 80029ce:	ec51 0b10 	vmov	r0, r1, d0
 80029d2:	a36d      	add	r3, pc, #436	; (adr r3, 8002b88 <getMeanObliquity+0x250>)
 80029d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d8:	f7fd fe16 	bl	8000608 <__aeabi_dmul>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4620      	mov	r0, r4
 80029e2:	4629      	mov	r1, r5
 80029e4:	f7fd fc58 	bl	8000298 <__aeabi_dsub>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4614      	mov	r4, r2
 80029ee:	461d      	mov	r5, r3
 80029f0:	ed9f 1b51 	vldr	d1, [pc, #324]	; 8002b38 <getMeanObliquity+0x200>
 80029f4:	ed97 0b00 	vldr	d0, [r7]
 80029f8:	f00a fcd8 	bl	800d3ac <pow>
 80029fc:	ec51 0b10 	vmov	r0, r1, d0
 8002a00:	a363      	add	r3, pc, #396	; (adr r3, 8002b90 <getMeanObliquity+0x258>)
 8002a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a06:	f7fd fdff 	bl	8000608 <__aeabi_dmul>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4620      	mov	r0, r4
 8002a10:	4629      	mov	r1, r5
 8002a12:	f7fd fc41 	bl	8000298 <__aeabi_dsub>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4614      	mov	r4, r2
 8002a1c:	461d      	mov	r5, r3
    (39.05 * pow(U, 6)) + (7.12 * pow(U, 7)) + (27.87 * pow(U, 8)) + (5.79 * pow(U, 9)) + (2.45 * pow(U, 10));
 8002a1e:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8002b40 <getMeanObliquity+0x208>
 8002a22:	ed97 0b00 	vldr	d0, [r7]
 8002a26:	f00a fcc1 	bl	800d3ac <pow>
 8002a2a:	ec51 0b10 	vmov	r0, r1, d0
 8002a2e:	a35a      	add	r3, pc, #360	; (adr r3, 8002b98 <getMeanObliquity+0x260>)
 8002a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a34:	f7fd fde8 	bl	8000608 <__aeabi_dmul>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
    double E = 84381.448 - (4680.93 * U) - (1.55 * pow(U, 2)) + (1999.25 * pow(U, 3)) - (51.38 * pow(U, 4)) - (249.67 * pow(U, 5)) -
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	4629      	mov	r1, r5
 8002a40:	f7fd fc2a 	bl	8000298 <__aeabi_dsub>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4614      	mov	r4, r2
 8002a4a:	461d      	mov	r5, r3
    (39.05 * pow(U, 6)) + (7.12 * pow(U, 7)) + (27.87 * pow(U, 8)) + (5.79 * pow(U, 9)) + (2.45 * pow(U, 10));
 8002a4c:	ed9f 1b3e 	vldr	d1, [pc, #248]	; 8002b48 <getMeanObliquity+0x210>
 8002a50:	ed97 0b00 	vldr	d0, [r7]
 8002a54:	f00a fcaa 	bl	800d3ac <pow>
 8002a58:	ec51 0b10 	vmov	r0, r1, d0
 8002a5c:	a350      	add	r3, pc, #320	; (adr r3, 8002ba0 <getMeanObliquity+0x268>)
 8002a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a62:	f7fd fdd1 	bl	8000608 <__aeabi_dmul>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	4629      	mov	r1, r5
 8002a6e:	f7fd fc15 	bl	800029c <__adddf3>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4614      	mov	r4, r2
 8002a78:	461d      	mov	r5, r3
 8002a7a:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8002b50 <getMeanObliquity+0x218>
 8002a7e:	ed97 0b00 	vldr	d0, [r7]
 8002a82:	f00a fc93 	bl	800d3ac <pow>
 8002a86:	ec51 0b10 	vmov	r0, r1, d0
 8002a8a:	a347      	add	r3, pc, #284	; (adr r3, 8002ba8 <getMeanObliquity+0x270>)
 8002a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a90:	f7fd fdba 	bl	8000608 <__aeabi_dmul>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4620      	mov	r0, r4
 8002a9a:	4629      	mov	r1, r5
 8002a9c:	f7fd fbfe 	bl	800029c <__adddf3>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4614      	mov	r4, r2
 8002aa6:	461d      	mov	r5, r3
 8002aa8:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8002b58 <getMeanObliquity+0x220>
 8002aac:	ed97 0b00 	vldr	d0, [r7]
 8002ab0:	f00a fc7c 	bl	800d3ac <pow>
 8002ab4:	ec51 0b10 	vmov	r0, r1, d0
 8002ab8:	a33d      	add	r3, pc, #244	; (adr r3, 8002bb0 <getMeanObliquity+0x278>)
 8002aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abe:	f7fd fda3 	bl	8000608 <__aeabi_dmul>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	4629      	mov	r1, r5
 8002aca:	f7fd fbe7 	bl	800029c <__adddf3>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4614      	mov	r4, r2
 8002ad4:	461d      	mov	r5, r3
 8002ad6:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8002b60 <getMeanObliquity+0x228>
 8002ada:	ed97 0b00 	vldr	d0, [r7]
 8002ade:	f00a fc65 	bl	800d3ac <pow>
 8002ae2:	ec51 0b10 	vmov	r0, r1, d0
 8002ae6:	a334      	add	r3, pc, #208	; (adr r3, 8002bb8 <getMeanObliquity+0x280>)
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	f7fd fd8c 	bl	8000608 <__aeabi_dmul>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
    double E = 84381.448 - (4680.93 * U) - (1.55 * pow(U, 2)) + (1999.25 * pow(U, 3)) - (51.38 * pow(U, 4)) - (249.67 * pow(U, 5)) -
 8002af4:	4620      	mov	r0, r4
 8002af6:	4629      	mov	r1, r5
 8002af8:	f7fd fbd0 	bl	800029c <__adddf3>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return E;
 8002b04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b08:	ec43 2b17 	vmov	d7, r2, r3
}
 8002b0c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b10:	eef0 0a67 	vmov.f32	s1, s15
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bdb0      	pop	{r4, r5, r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	f3af 8000 	nop.w
 8002b20:	00000000 	.word	0x00000000
 8002b24:	40000000 	.word	0x40000000
 8002b28:	00000000 	.word	0x00000000
 8002b2c:	40080000 	.word	0x40080000
 8002b30:	00000000 	.word	0x00000000
 8002b34:	40100000 	.word	0x40100000
 8002b38:	00000000 	.word	0x00000000
 8002b3c:	40140000 	.word	0x40140000
 8002b40:	00000000 	.word	0x00000000
 8002b44:	40180000 	.word	0x40180000
 8002b48:	00000000 	.word	0x00000000
 8002b4c:	401c0000 	.word	0x401c0000
 8002b50:	00000000 	.word	0x00000000
 8002b54:	40200000 	.word	0x40200000
 8002b58:	00000000 	.word	0x00000000
 8002b5c:	40220000 	.word	0x40220000
 8002b60:	00000000 	.word	0x00000000
 8002b64:	40240000 	.word	0x40240000
 8002b68:	147ae148 	.word	0x147ae148
 8002b6c:	40b248ee 	.word	0x40b248ee
 8002b70:	2b020c4a 	.word	0x2b020c4a
 8002b74:	40f499d7 	.word	0x40f499d7
 8002b78:	cccccccd 	.word	0xcccccccd
 8002b7c:	3ff8cccc 	.word	0x3ff8cccc
 8002b80:	00000000 	.word	0x00000000
 8002b84:	409f3d00 	.word	0x409f3d00
 8002b88:	d70a3d71 	.word	0xd70a3d71
 8002b8c:	4049b0a3 	.word	0x4049b0a3
 8002b90:	a3d70a3d 	.word	0xa3d70a3d
 8002b94:	406f3570 	.word	0x406f3570
 8002b98:	66666666 	.word	0x66666666
 8002b9c:	40438666 	.word	0x40438666
 8002ba0:	47ae147b 	.word	0x47ae147b
 8002ba4:	401c7ae1 	.word	0x401c7ae1
 8002ba8:	51eb851f 	.word	0x51eb851f
 8002bac:	403bdeb8 	.word	0x403bdeb8
 8002bb0:	c28f5c29 	.word	0xc28f5c29
 8002bb4:	401728f5 	.word	0x401728f5
 8002bb8:	9999999a 	.word	0x9999999a
 8002bbc:	40039999 	.word	0x40039999

08002bc0 <getApparentSiderealTime>:

double getApparentSiderealTime(double JD, double JC, double phi, double eps)
{
 8002bc0:	b5b0      	push	{r4, r5, r7, lr}
 8002bc2:	b08e      	sub	sp, #56	; 0x38
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	ed87 0b06 	vstr	d0, [r7, #24]
 8002bca:	ed87 1b04 	vstr	d1, [r7, #16]
 8002bce:	ed87 2b02 	vstr	d2, [r7, #8]
 8002bd2:	ed87 3b00 	vstr	d3, [r7]
    double mean_siderealTime = 280.46061837 + (360.98564736629 * (JD - 2451545)) + (0.000387933 * pow(JC, 2)) - (pow(JC, 3) / 38710000);
 8002bd6:	a367      	add	r3, pc, #412	; (adr r3, 8002d74 <getApparentSiderealTime+0x1b4>)
 8002bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bdc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002be0:	f7fd fb5a 	bl	8000298 <__aeabi_dsub>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	a363      	add	r3, pc, #396	; (adr r3, 8002d7c <getApparentSiderealTime+0x1bc>)
 8002bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf2:	f7fd fd09 	bl	8000608 <__aeabi_dmul>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	a361      	add	r3, pc, #388	; (adr r3, 8002d84 <getApparentSiderealTime+0x1c4>)
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	f7fd fb4a 	bl	800029c <__adddf3>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4614      	mov	r4, r2
 8002c0e:	461d      	mov	r5, r3
 8002c10:	ed9f 1b51 	vldr	d1, [pc, #324]	; 8002d58 <getApparentSiderealTime+0x198>
 8002c14:	ed97 0b04 	vldr	d0, [r7, #16]
 8002c18:	f00a fbc8 	bl	800d3ac <pow>
 8002c1c:	ec51 0b10 	vmov	r0, r1, d0
 8002c20:	a35a      	add	r3, pc, #360	; (adr r3, 8002d8c <getApparentSiderealTime+0x1cc>)
 8002c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c26:	f7fd fcef 	bl	8000608 <__aeabi_dmul>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4620      	mov	r0, r4
 8002c30:	4629      	mov	r1, r5
 8002c32:	f7fd fb33 	bl	800029c <__adddf3>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4614      	mov	r4, r2
 8002c3c:	461d      	mov	r5, r3
 8002c3e:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8002d60 <getApparentSiderealTime+0x1a0>
 8002c42:	ed97 0b04 	vldr	d0, [r7, #16]
 8002c46:	f00a fbb1 	bl	800d3ac <pow>
 8002c4a:	ec51 0b10 	vmov	r0, r1, d0
 8002c4e:	a351      	add	r3, pc, #324	; (adr r3, 8002d94 <getApparentSiderealTime+0x1d4>)
 8002c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c54:	f7fd fe02 	bl	800085c <__aeabi_ddiv>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	4629      	mov	r1, r5
 8002c60:	f7fd fb1a 	bl	8000298 <__aeabi_dsub>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    mean_siderealTime = mean_siderealTime / 360;
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	4b3f      	ldr	r3, [pc, #252]	; (8002d70 <getApparentSiderealTime+0x1b0>)
 8002c72:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002c76:	f7fd fdf1 	bl	800085c <__aeabi_ddiv>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double fraction = fabs(mean_siderealTime - floor(abs(mean_siderealTime)));
 8002c82:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8002c86:	f007 fbd7 	bl	800a438 <abs>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fd fc51 	bl	8000534 <__aeabi_i2d>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002c9a:	f7fd fafd 	bl	8000298 <__aeabi_dsub>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ca6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (mean_siderealTime > 0)
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002cb8:	f7fd ff36 	bl	8000b28 <__aeabi_dcmpgt>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00b      	beq.n	8002cda <getApparentSiderealTime+0x11a>
    {
        mean_siderealTime = 360 * fraction;
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	4b2a      	ldr	r3, [pc, #168]	; (8002d70 <getApparentSiderealTime+0x1b0>)
 8002cc8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ccc:	f7fd fc9c 	bl	8000608 <__aeabi_dmul>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8002cd8:	e011      	b.n	8002cfe <getApparentSiderealTime+0x13e>
    }
    else
    {
        mean_siderealTime = 360 - (360 * fraction);
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <getApparentSiderealTime+0x1b0>)
 8002ce0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ce4:	f7fd fc90 	bl	8000608 <__aeabi_dmul>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	f04f 0000 	mov.w	r0, #0
 8002cf0:	491f      	ldr	r1, [pc, #124]	; (8002d70 <getApparentSiderealTime+0x1b0>)
 8002cf2:	f7fd fad1 	bl	8000298 <__aeabi_dsub>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    }

    eps = (M_PI / 180.0) * eps;
 8002cfe:	a31a      	add	r3, pc, #104	; (adr r3, 8002d68 <getApparentSiderealTime+0x1a8>)
 8002d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d08:	f7fd fc7e 	bl	8000608 <__aeabi_dmul>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	e9c7 2300 	strd	r2, r3, [r7]
    double apparent_siderealTime = mean_siderealTime + (phi * cos(eps));
 8002d14:	ed97 0b00 	vldr	d0, [r7]
 8002d18:	f00a fd5a 	bl	800d7d0 <cos>
 8002d1c:	ec51 0b10 	vmov	r0, r1, d0
 8002d20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d24:	f7fd fc70 	bl	8000608 <__aeabi_dmul>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002d30:	f7fd fab4 	bl	800029c <__adddf3>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	e9c7 2308 	strd	r2, r3, [r7, #32]

    return apparent_siderealTime;
 8002d3c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d40:	ec43 2b17 	vmov	d7, r2, r3
}
 8002d44:	eeb0 0a47 	vmov.f32	s0, s14
 8002d48:	eef0 0a67 	vmov.f32	s1, s15
 8002d4c:	3738      	adds	r7, #56	; 0x38
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bdb0      	pop	{r4, r5, r7, pc}
 8002d52:	bf00      	nop
 8002d54:	f3af 8000 	nop.w
 8002d58:	00000000 	.word	0x00000000
 8002d5c:	40000000 	.word	0x40000000
 8002d60:	00000000 	.word	0x00000000
 8002d64:	40080000 	.word	0x40080000
 8002d68:	a2529d39 	.word	0xa2529d39
 8002d6c:	3f91df46 	.word	0x3f91df46
 8002d70:	40768000 	.word	0x40768000
 8002d74:	80000000 	.word	0x80000000
 8002d78:	4142b42c 	.word	0x4142b42c
 8002d7c:	362c39aa 	.word	0x362c39aa
 8002d80:	40768fc5 	.word	0x40768fc5
 8002d84:	b15e3164 	.word	0xb15e3164
 8002d88:	4071875e 	.word	0x4071875e
 8002d8c:	8c4c4b7f 	.word	0x8c4c4b7f
 8002d90:	3f396c6f 	.word	0x3f396c6f
 8002d94:	80000000 	.word	0x80000000
 8002d98:	41827557 	.word	0x41827557
 8002d9c:	00000000 	.word	0x00000000

08002da0 <getSunRightAscension>:

double getSunRightAscension(double lambda, double eps, double beta)
{
 8002da0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002da4:	ed2d 8b02 	vpush	{d8}
 8002da8:	b08a      	sub	sp, #40	; 0x28
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	ed87 0b04 	vstr	d0, [r7, #16]
 8002db0:	ed87 1b02 	vstr	d1, [r7, #8]
 8002db4:	ed87 2b00 	vstr	d2, [r7]
    lambda = (M_PI / 180.0) * lambda;
 8002db8:	a36b      	add	r3, pc, #428	; (adr r3, 8002f68 <getSunRightAscension+0x1c8>)
 8002dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002dc2:	f7fd fc21 	bl	8000608 <__aeabi_dmul>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	e9c7 2304 	strd	r2, r3, [r7, #16]
    eps = (M_PI / 180.0) * eps;
 8002dce:	a366      	add	r3, pc, #408	; (adr r3, 8002f68 <getSunRightAscension+0x1c8>)
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dd8:	f7fd fc16 	bl	8000608 <__aeabi_dmul>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    beta = (M_PI / 180.0) * beta;
 8002de4:	a360      	add	r3, pc, #384	; (adr r3, 8002f68 <getSunRightAscension+0x1c8>)
 8002de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dee:	f7fd fc0b 	bl	8000608 <__aeabi_dmul>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	e9c7 2300 	strd	r2, r3, [r7]

    double alpha = atan2((sin(lambda)*cos(eps)) - (tan(beta)*sin(eps)), cos(lambda));
 8002dfa:	ed97 0b04 	vldr	d0, [r7, #16]
 8002dfe:	f00a fd47 	bl	800d890 <sin>
 8002e02:	ec55 4b10 	vmov	r4, r5, d0
 8002e06:	ed97 0b02 	vldr	d0, [r7, #8]
 8002e0a:	f00a fce1 	bl	800d7d0 <cos>
 8002e0e:	ec53 2b10 	vmov	r2, r3, d0
 8002e12:	4620      	mov	r0, r4
 8002e14:	4629      	mov	r1, r5
 8002e16:	f7fd fbf7 	bl	8000608 <__aeabi_dmul>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4614      	mov	r4, r2
 8002e20:	461d      	mov	r5, r3
 8002e22:	ed97 0b00 	vldr	d0, [r7]
 8002e26:	f00a fd8b 	bl	800d940 <tan>
 8002e2a:	ec59 8b10 	vmov	r8, r9, d0
 8002e2e:	ed97 0b02 	vldr	d0, [r7, #8]
 8002e32:	f00a fd2d 	bl	800d890 <sin>
 8002e36:	ec53 2b10 	vmov	r2, r3, d0
 8002e3a:	4640      	mov	r0, r8
 8002e3c:	4649      	mov	r1, r9
 8002e3e:	f7fd fbe3 	bl	8000608 <__aeabi_dmul>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4620      	mov	r0, r4
 8002e48:	4629      	mov	r1, r5
 8002e4a:	f7fd fa25 	bl	8000298 <__aeabi_dsub>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	ec43 2b18 	vmov	d8, r2, r3
 8002e56:	ed97 0b04 	vldr	d0, [r7, #16]
 8002e5a:	f00a fcb9 	bl	800d7d0 <cos>
 8002e5e:	eeb0 7a40 	vmov.f32	s14, s0
 8002e62:	eef0 7a60 	vmov.f32	s15, s1
 8002e66:	eeb0 1a47 	vmov.f32	s2, s14
 8002e6a:	eef0 1a67 	vmov.f32	s3, s15
 8002e6e:	eeb0 0a48 	vmov.f32	s0, s16
 8002e72:	eef0 0a68 	vmov.f32	s1, s17
 8002e76:	f00a fa97 	bl	800d3a8 <atan2>
 8002e7a:	ed87 0b08 	vstr	d0, [r7, #32]
    alpha = (alpha * 180) / M_PI;
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	4b37      	ldr	r3, [pc, #220]	; (8002f60 <getSunRightAscension+0x1c0>)
 8002e84:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e88:	f7fd fbbe 	bl	8000608 <__aeabi_dmul>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4610      	mov	r0, r2
 8002e92:	4619      	mov	r1, r3
 8002e94:	a330      	add	r3, pc, #192	; (adr r3, 8002f58 <getSunRightAscension+0x1b8>)
 8002e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9a:	f7fd fcdf 	bl	800085c <__aeabi_ddiv>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	e9c7 2308 	strd	r2, r3, [r7, #32]

    alpha = alpha / 360;
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	4b2e      	ldr	r3, [pc, #184]	; (8002f64 <getSunRightAscension+0x1c4>)
 8002eac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002eb0:	f7fd fcd4 	bl	800085c <__aeabi_ddiv>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double fraction = fabs(alpha - floor(abs(alpha)));
 8002ebc:	ed97 0b08 	vldr	d0, [r7, #32]
 8002ec0:	f007 faba 	bl	800a438 <abs>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd fb34 	bl	8000534 <__aeabi_i2d>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ed4:	f7fd f9e0 	bl	8000298 <__aeabi_dsub>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4611      	mov	r1, r2
 8002ede:	61b9      	str	r1, [r7, #24]
 8002ee0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ee4:	61fb      	str	r3, [r7, #28]
    if (alpha > 0)
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ef2:	f7fd fe19 	bl	8000b28 <__aeabi_dcmpgt>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00b      	beq.n	8002f14 <getSunRightAscension+0x174>
    {
        alpha = 360 * fraction;
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <getSunRightAscension+0x1c4>)
 8002f02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f06:	f7fd fb7f 	bl	8000608 <__aeabi_dmul>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002f12:	e011      	b.n	8002f38 <getSunRightAscension+0x198>
    }
    else
    {
        alpha = 360 - (360 * fraction);
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <getSunRightAscension+0x1c4>)
 8002f1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f1e:	f7fd fb73 	bl	8000608 <__aeabi_dmul>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	f04f 0000 	mov.w	r0, #0
 8002f2a:	490e      	ldr	r1, [pc, #56]	; (8002f64 <getSunRightAscension+0x1c4>)
 8002f2c:	f7fd f9b4 	bl	8000298 <__aeabi_dsub>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }

    return alpha;
 8002f38:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f3c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002f40:	eeb0 0a47 	vmov.f32	s0, s14
 8002f44:	eef0 0a67 	vmov.f32	s1, s15
 8002f48:	3728      	adds	r7, #40	; 0x28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	ecbd 8b02 	vpop	{d8}
 8002f50:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f54:	f3af 8000 	nop.w
 8002f58:	54442d18 	.word	0x54442d18
 8002f5c:	400921fb 	.word	0x400921fb
 8002f60:	40668000 	.word	0x40668000
 8002f64:	40768000 	.word	0x40768000
 8002f68:	a2529d39 	.word	0xa2529d39
 8002f6c:	3f91df46 	.word	0x3f91df46

08002f70 <getSunDeclination>:


double getSunDeclination(double lambda, double eps, double beta)
{
 8002f70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f74:	b088      	sub	sp, #32
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	ed87 0b04 	vstr	d0, [r7, #16]
 8002f7c:	ed87 1b02 	vstr	d1, [r7, #8]
 8002f80:	ed87 2b00 	vstr	d2, [r7]
    lambda = (M_PI / 180.0) * lambda;
 8002f84:	a345      	add	r3, pc, #276	; (adr r3, 800309c <getSunDeclination+0x12c>)
 8002f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f8e:	f7fd fb3b 	bl	8000608 <__aeabi_dmul>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	e9c7 2304 	strd	r2, r3, [r7, #16]
    eps = (M_PI / 180.0) * eps;
 8002f9a:	a340      	add	r3, pc, #256	; (adr r3, 800309c <getSunDeclination+0x12c>)
 8002f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fa4:	f7fd fb30 	bl	8000608 <__aeabi_dmul>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	e9c7 2302 	strd	r2, r3, [r7, #8]
    beta = (M_PI / 180.0) * beta;
 8002fb0:	a33a      	add	r3, pc, #232	; (adr r3, 800309c <getSunDeclination+0x12c>)
 8002fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fba:	f7fd fb25 	bl	8000608 <__aeabi_dmul>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	e9c7 2300 	strd	r2, r3, [r7]

    double delta = asin((sin(beta)*cos(eps)) + (cos(beta)*sin(eps)*sin(lambda)));
 8002fc6:	ed97 0b00 	vldr	d0, [r7]
 8002fca:	f00a fc61 	bl	800d890 <sin>
 8002fce:	ec55 4b10 	vmov	r4, r5, d0
 8002fd2:	ed97 0b02 	vldr	d0, [r7, #8]
 8002fd6:	f00a fbfb 	bl	800d7d0 <cos>
 8002fda:	ec53 2b10 	vmov	r2, r3, d0
 8002fde:	4620      	mov	r0, r4
 8002fe0:	4629      	mov	r1, r5
 8002fe2:	f7fd fb11 	bl	8000608 <__aeabi_dmul>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4614      	mov	r4, r2
 8002fec:	461d      	mov	r5, r3
 8002fee:	ed97 0b00 	vldr	d0, [r7]
 8002ff2:	f00a fbed 	bl	800d7d0 <cos>
 8002ff6:	ec59 8b10 	vmov	r8, r9, d0
 8002ffa:	ed97 0b02 	vldr	d0, [r7, #8]
 8002ffe:	f00a fc47 	bl	800d890 <sin>
 8003002:	ec53 2b10 	vmov	r2, r3, d0
 8003006:	4640      	mov	r0, r8
 8003008:	4649      	mov	r1, r9
 800300a:	f7fd fafd 	bl	8000608 <__aeabi_dmul>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4690      	mov	r8, r2
 8003014:	4699      	mov	r9, r3
 8003016:	ed97 0b04 	vldr	d0, [r7, #16]
 800301a:	f00a fc39 	bl	800d890 <sin>
 800301e:	ec53 2b10 	vmov	r2, r3, d0
 8003022:	4640      	mov	r0, r8
 8003024:	4649      	mov	r1, r9
 8003026:	f7fd faef 	bl	8000608 <__aeabi_dmul>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4620      	mov	r0, r4
 8003030:	4629      	mov	r1, r5
 8003032:	f7fd f933 	bl	800029c <__adddf3>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	ec43 2b17 	vmov	d7, r2, r3
 800303e:	eeb0 0a47 	vmov.f32	s0, s14
 8003042:	eef0 0a67 	vmov.f32	s1, s15
 8003046:	f00a f97b 	bl	800d340 <asin>
 800304a:	ed87 0b06 	vstr	d0, [r7, #24]
    delta = (delta * 180) / M_PI;
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	4b11      	ldr	r3, [pc, #68]	; (8003098 <getSunDeclination+0x128>)
 8003054:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003058:	f7fd fad6 	bl	8000608 <__aeabi_dmul>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	a30a      	add	r3, pc, #40	; (adr r3, 8003090 <getSunDeclination+0x120>)
 8003066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306a:	f7fd fbf7 	bl	800085c <__aeabi_ddiv>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return delta;
 8003076:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800307a:	ec43 2b17 	vmov	d7, r2, r3
}
 800307e:	eeb0 0a47 	vmov.f32	s0, s14
 8003082:	eef0 0a67 	vmov.f32	s1, s15
 8003086:	3720      	adds	r7, #32
 8003088:	46bd      	mov	sp, r7
 800308a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800308e:	bf00      	nop
 8003090:	54442d18 	.word	0x54442d18
 8003094:	400921fb 	.word	0x400921fb
 8003098:	40668000 	.word	0x40668000
 800309c:	a2529d39 	.word	0xa2529d39
 80030a0:	3f91df46 	.word	0x3f91df46

080030a4 <getObserverLocalHourAngle>:

double getObserverLocalHourAngle(double v, double sigma, double alpha)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08a      	sub	sp, #40	; 0x28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	ed87 0b04 	vstr	d0, [r7, #16]
 80030ae:	ed87 1b02 	vstr	d1, [r7, #8]
 80030b2:	ed87 2b00 	vstr	d2, [r7]
    double H = v + sigma - alpha;
 80030b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030be:	f7fd f8ed 	bl	800029c <__adddf3>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4610      	mov	r0, r2
 80030c8:	4619      	mov	r1, r3
 80030ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030ce:	f7fd f8e3 	bl	8000298 <__aeabi_dsub>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    H = H / 360;
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	4b29      	ldr	r3, [pc, #164]	; (8003184 <getObserverLocalHourAngle+0xe0>)
 80030e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80030e4:	f7fd fbba 	bl	800085c <__aeabi_ddiv>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double fraction = fabs(H - floor(abs(H)));
 80030f0:	ed97 0b08 	vldr	d0, [r7, #32]
 80030f4:	f007 f9a0 	bl	800a438 <abs>
 80030f8:	4603      	mov	r3, r0
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fd fa1a 	bl	8000534 <__aeabi_i2d>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003108:	f7fd f8c6 	bl	8000298 <__aeabi_dsub>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4611      	mov	r1, r2
 8003112:	61b9      	str	r1, [r7, #24]
 8003114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003118:	61fb      	str	r3, [r7, #28]
    if (H > 0)
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003126:	f7fd fcff 	bl	8000b28 <__aeabi_dcmpgt>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00b      	beq.n	8003148 <getObserverLocalHourAngle+0xa4>
    {
        H = 360 * fraction;
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	4b13      	ldr	r3, [pc, #76]	; (8003184 <getObserverLocalHourAngle+0xe0>)
 8003136:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800313a:	f7fd fa65 	bl	8000608 <__aeabi_dmul>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8003146:	e011      	b.n	800316c <getObserverLocalHourAngle+0xc8>
    }
    else
    {
        H = 360 - (360 * fraction);
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <getObserverLocalHourAngle+0xe0>)
 800314e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003152:	f7fd fa59 	bl	8000608 <__aeabi_dmul>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	f04f 0000 	mov.w	r0, #0
 800315e:	4909      	ldr	r1, [pc, #36]	; (8003184 <getObserverLocalHourAngle+0xe0>)
 8003160:	f7fd f89a 	bl	8000298 <__aeabi_dsub>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }

    return H;
 800316c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003170:	ec43 2b17 	vmov	d7, r2, r3
}
 8003174:	eeb0 0a47 	vmov.f32	s0, s14
 8003178:	eef0 0a67 	vmov.f32	s1, s15
 800317c:	3728      	adds	r7, #40	; 0x28
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40768000 	.word	0x40768000

08003188 <getEquatorialHorizontalParallax>:

double getEquatorialHorizontalParallax(double R)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	ed87 0b00 	vstr	d0, [r7]
    double parallax = 8.794 / (3600 * R);
 8003192:	a30f      	add	r3, pc, #60	; (adr r3, 80031d0 <getEquatorialHorizontalParallax+0x48>)
 8003194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003198:	e9d7 0100 	ldrd	r0, r1, [r7]
 800319c:	f7fd fa34 	bl	8000608 <__aeabi_dmul>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	a10c      	add	r1, pc, #48	; (adr r1, 80031d8 <getEquatorialHorizontalParallax+0x50>)
 80031a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031aa:	f7fd fb57 	bl	800085c <__aeabi_ddiv>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return parallax;
 80031b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031ba:	ec43 2b17 	vmov	d7, r2, r3
}
 80031be:	eeb0 0a47 	vmov.f32	s0, s14
 80031c2:	eef0 0a67 	vmov.f32	s1, s15
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	f3af 8000 	nop.w
 80031d0:	00000000 	.word	0x00000000
 80031d4:	40ac2000 	.word	0x40ac2000
 80031d8:	2b020c4a 	.word	0x2b020c4a
 80031dc:	40219687 	.word	0x40219687

080031e0 <helper_getU>:

double helper_getU(double latitude)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	ed87 0b00 	vstr	d0, [r7]
    double u = atan(0.99664719 * tan(latitude));
 80031ea:	ed97 0b00 	vldr	d0, [r7]
 80031ee:	f00a fba7 	bl	800d940 <tan>
 80031f2:	ec51 0b10 	vmov	r0, r1, d0
 80031f6:	a30e      	add	r3, pc, #56	; (adr r3, 8003230 <helper_getU+0x50>)
 80031f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fc:	f7fd fa04 	bl	8000608 <__aeabi_dmul>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	ec43 2b17 	vmov	d7, r2, r3
 8003208:	eeb0 0a47 	vmov.f32	s0, s14
 800320c:	eef0 0a67 	vmov.f32	s1, s15
 8003210:	f00a f93e 	bl	800d490 <atan>
 8003214:	ed87 0b02 	vstr	d0, [r7, #8]

    return u;
 8003218:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800321c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003220:	eeb0 0a47 	vmov.f32	s0, s14
 8003224:	eef0 0a67 	vmov.f32	s1, s15
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	a5d668d8 	.word	0xa5d668d8
 8003234:	3fefe488 	.word	0x3fefe488

08003238 <helper_getX>:

double helper_getX(double u, double E, double latitude)
{
 8003238:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800323c:	b088      	sub	sp, #32
 800323e:	af00      	add	r7, sp, #0
 8003240:	ed87 0b04 	vstr	d0, [r7, #16]
 8003244:	ed87 1b02 	vstr	d1, [r7, #8]
 8003248:	ed87 2b00 	vstr	d2, [r7]
    u = (M_PI / 180) * u;
 800324c:	a324      	add	r3, pc, #144	; (adr r3, 80032e0 <helper_getX+0xa8>)
 800324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003252:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003256:	f7fd f9d7 	bl	8000608 <__aeabi_dmul>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    latitude = (M_PI /  180) * latitude;
 8003262:	a31f      	add	r3, pc, #124	; (adr r3, 80032e0 <helper_getX+0xa8>)
 8003264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003268:	e9d7 0100 	ldrd	r0, r1, [r7]
 800326c:	f7fd f9cc 	bl	8000608 <__aeabi_dmul>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	e9c7 2300 	strd	r2, r3, [r7]

    double x = cos(u) + (E / 6378140)*cos(latitude);
 8003278:	ed97 0b04 	vldr	d0, [r7, #16]
 800327c:	f00a faa8 	bl	800d7d0 <cos>
 8003280:	ec59 8b10 	vmov	r8, r9, d0
 8003284:	a318      	add	r3, pc, #96	; (adr r3, 80032e8 <helper_getX+0xb0>)
 8003286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800328e:	f7fd fae5 	bl	800085c <__aeabi_ddiv>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4614      	mov	r4, r2
 8003298:	461d      	mov	r5, r3
 800329a:	ed97 0b00 	vldr	d0, [r7]
 800329e:	f00a fa97 	bl	800d7d0 <cos>
 80032a2:	ec53 2b10 	vmov	r2, r3, d0
 80032a6:	4620      	mov	r0, r4
 80032a8:	4629      	mov	r1, r5
 80032aa:	f7fd f9ad 	bl	8000608 <__aeabi_dmul>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4640      	mov	r0, r8
 80032b4:	4649      	mov	r1, r9
 80032b6:	f7fc fff1 	bl	800029c <__adddf3>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return x;
 80032c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032c6:	ec43 2b17 	vmov	d7, r2, r3
}
 80032ca:	eeb0 0a47 	vmov.f32	s0, s14
 80032ce:	eef0 0a67 	vmov.f32	s1, s15
 80032d2:	3720      	adds	r7, #32
 80032d4:	46bd      	mov	sp, r7
 80032d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032da:	bf00      	nop
 80032dc:	f3af 8000 	nop.w
 80032e0:	a2529d39 	.word	0xa2529d39
 80032e4:	3f91df46 	.word	0x3f91df46
 80032e8:	00000000 	.word	0x00000000
 80032ec:	415854a7 	.word	0x415854a7

080032f0 <helper_getY>:

double helper_getY(double u, double E, double latitude)
{
 80032f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032f4:	b088      	sub	sp, #32
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	ed87 0b04 	vstr	d0, [r7, #16]
 80032fc:	ed87 1b02 	vstr	d1, [r7, #8]
 8003300:	ed87 2b00 	vstr	d2, [r7]
    u = (M_PI / 180) * u;
 8003304:	a328      	add	r3, pc, #160	; (adr r3, 80033a8 <helper_getY+0xb8>)
 8003306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800330e:	f7fd f97b 	bl	8000608 <__aeabi_dmul>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	e9c7 2304 	strd	r2, r3, [r7, #16]
    latitude = (M_PI /  180) * latitude;
 800331a:	a323      	add	r3, pc, #140	; (adr r3, 80033a8 <helper_getY+0xb8>)
 800331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003320:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003324:	f7fd f970 	bl	8000608 <__aeabi_dmul>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	e9c7 2300 	strd	r2, r3, [r7]

    double y = 0.99664719*sin(u) + (E / 6378140)*sin(latitude);
 8003330:	ed97 0b04 	vldr	d0, [r7, #16]
 8003334:	f00a faac 	bl	800d890 <sin>
 8003338:	ec51 0b10 	vmov	r0, r1, d0
 800333c:	a31c      	add	r3, pc, #112	; (adr r3, 80033b0 <helper_getY+0xc0>)
 800333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003342:	f7fd f961 	bl	8000608 <__aeabi_dmul>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4614      	mov	r4, r2
 800334c:	461d      	mov	r5, r3
 800334e:	a31a      	add	r3, pc, #104	; (adr r3, 80033b8 <helper_getY+0xc8>)
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003358:	f7fd fa80 	bl	800085c <__aeabi_ddiv>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4690      	mov	r8, r2
 8003362:	4699      	mov	r9, r3
 8003364:	ed97 0b00 	vldr	d0, [r7]
 8003368:	f00a fa92 	bl	800d890 <sin>
 800336c:	ec53 2b10 	vmov	r2, r3, d0
 8003370:	4640      	mov	r0, r8
 8003372:	4649      	mov	r1, r9
 8003374:	f7fd f948 	bl	8000608 <__aeabi_dmul>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4620      	mov	r0, r4
 800337e:	4629      	mov	r1, r5
 8003380:	f7fc ff8c 	bl	800029c <__adddf3>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return y;
 800338c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003390:	ec43 2b17 	vmov	d7, r2, r3
}
 8003394:	eeb0 0a47 	vmov.f32	s0, s14
 8003398:	eef0 0a67 	vmov.f32	s1, s15
 800339c:	3720      	adds	r7, #32
 800339e:	46bd      	mov	sp, r7
 80033a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033a4:	f3af 8000 	nop.w
 80033a8:	a2529d39 	.word	0xa2529d39
 80033ac:	3f91df46 	.word	0x3f91df46
 80033b0:	a5d668d8 	.word	0xa5d668d8
 80033b4:	3fefe488 	.word	0x3fefe488
 80033b8:	00000000 	.word	0x00000000
 80033bc:	415854a7 	.word	0x415854a7

080033c0 <getParallax_SunRightAscension>:

double getParallax_SunRightAscension(double x, double eqHorizontal_parallax, double H, double delta)
{
 80033c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033c4:	b08e      	sub	sp, #56	; 0x38
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	ed87 0b06 	vstr	d0, [r7, #24]
 80033cc:	ed87 1b04 	vstr	d1, [r7, #16]
 80033d0:	ed87 2b02 	vstr	d2, [r7, #8]
 80033d4:	ed87 3b00 	vstr	d3, [r7]
    x = (M_PI / 180) * x;
 80033d8:	a350      	add	r3, pc, #320	; (adr r3, 800351c <getParallax_SunRightAscension+0x15c>)
 80033da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033e2:	f7fd f911 	bl	8000608 <__aeabi_dmul>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
    eqHorizontal_parallax = (M_PI / 180) * eqHorizontal_parallax;
 80033ee:	a34b      	add	r3, pc, #300	; (adr r3, 800351c <getParallax_SunRightAscension+0x15c>)
 80033f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033f8:	f7fd f906 	bl	8000608 <__aeabi_dmul>
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	e9c7 2304 	strd	r2, r3, [r7, #16]
    H = (M_PI / 180) * H;
 8003404:	a345      	add	r3, pc, #276	; (adr r3, 800351c <getParallax_SunRightAscension+0x15c>)
 8003406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800340e:	f7fd f8fb 	bl	8000608 <__aeabi_dmul>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	e9c7 2302 	strd	r2, r3, [r7, #8]
    delta = (M_PI / 180) * delta;
 800341a:	a340      	add	r3, pc, #256	; (adr r3, 800351c <getParallax_SunRightAscension+0x15c>)
 800341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003420:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003424:	f7fd f8f0 	bl	8000608 <__aeabi_dmul>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	e9c7 2300 	strd	r2, r3, [r7]

    double term1 = -x * sin(eqHorizontal_parallax) * sin(H);
 8003430:	69bc      	ldr	r4, [r7, #24]
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003438:	ed97 0b04 	vldr	d0, [r7, #16]
 800343c:	f00a fa28 	bl	800d890 <sin>
 8003440:	ec53 2b10 	vmov	r2, r3, d0
 8003444:	4620      	mov	r0, r4
 8003446:	4629      	mov	r1, r5
 8003448:	f7fd f8de 	bl	8000608 <__aeabi_dmul>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4614      	mov	r4, r2
 8003452:	461d      	mov	r5, r3
 8003454:	ed97 0b02 	vldr	d0, [r7, #8]
 8003458:	f00a fa1a 	bl	800d890 <sin>
 800345c:	ec53 2b10 	vmov	r2, r3, d0
 8003460:	4620      	mov	r0, r4
 8003462:	4629      	mov	r1, r5
 8003464:	f7fd f8d0 	bl	8000608 <__aeabi_dmul>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double term2 = cos(delta) - (x * sin(eqHorizontal_parallax) * cos(H));
 8003470:	ed97 0b00 	vldr	d0, [r7]
 8003474:	f00a f9ac 	bl	800d7d0 <cos>
 8003478:	ec59 8b10 	vmov	r8, r9, d0
 800347c:	ed97 0b04 	vldr	d0, [r7, #16]
 8003480:	f00a fa06 	bl	800d890 <sin>
 8003484:	ec51 0b10 	vmov	r0, r1, d0
 8003488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800348c:	f7fd f8bc 	bl	8000608 <__aeabi_dmul>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4614      	mov	r4, r2
 8003496:	461d      	mov	r5, r3
 8003498:	ed97 0b02 	vldr	d0, [r7, #8]
 800349c:	f00a f998 	bl	800d7d0 <cos>
 80034a0:	ec53 2b10 	vmov	r2, r3, d0
 80034a4:	4620      	mov	r0, r4
 80034a6:	4629      	mov	r1, r5
 80034a8:	f7fd f8ae 	bl	8000608 <__aeabi_dmul>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4640      	mov	r0, r8
 80034b2:	4649      	mov	r1, r9
 80034b4:	f7fc fef0 	bl	8000298 <__aeabi_dsub>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double parallax = atan2(term1, term2);
 80034c0:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 80034c4:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80034c8:	f009 ff6e 	bl	800d3a8 <atan2>
 80034cc:	ed87 0b08 	vstr	d0, [r7, #32]
    parallax = (parallax * 180) / M_PI;
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	4b10      	ldr	r3, [pc, #64]	; (8003518 <getParallax_SunRightAscension+0x158>)
 80034d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80034da:	f7fd f895 	bl	8000608 <__aeabi_dmul>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	4610      	mov	r0, r2
 80034e4:	4619      	mov	r1, r3
 80034e6:	a30a      	add	r3, pc, #40	; (adr r3, 8003510 <getParallax_SunRightAscension+0x150>)
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f7fd f9b6 	bl	800085c <__aeabi_ddiv>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	e9c7 2308 	strd	r2, r3, [r7, #32]

    return parallax;
 80034f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034fc:	ec43 2b17 	vmov	d7, r2, r3
}
 8003500:	eeb0 0a47 	vmov.f32	s0, s14
 8003504:	eef0 0a67 	vmov.f32	s1, s15
 8003508:	3738      	adds	r7, #56	; 0x38
 800350a:	46bd      	mov	sp, r7
 800350c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003510:	54442d18 	.word	0x54442d18
 8003514:	400921fb 	.word	0x400921fb
 8003518:	40668000 	.word	0x40668000
 800351c:	a2529d39 	.word	0xa2529d39
 8003520:	3f91df46 	.word	0x3f91df46

08003524 <getTopocentricSunRightAscension>:

double getTopocentricSunRightAscension(double alpha, double parallax)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	ed87 0b02 	vstr	d0, [r7, #8]
 800352e:	ed87 1b00 	vstr	d1, [r7]
    double alpha_dash = alpha + parallax;
 8003532:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003536:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800353a:	f7fc feaf 	bl	800029c <__adddf3>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return alpha_dash;
 8003546:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800354a:	ec43 2b17 	vmov	d7, r2, r3
}
 800354e:	eeb0 0a47 	vmov.f32	s0, s14
 8003552:	eef0 0a67 	vmov.f32	s1, s15
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	0000      	movs	r0, r0
	...

08003560 <getTopocentricSunDeclination>:

double getTopocentricSunDeclination(double delta, double y, double x, double eqHorizontal_parallax, double delta_alpha, double H)
{
 8003560:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003564:	b092      	sub	sp, #72	; 0x48
 8003566:	af00      	add	r7, sp, #0
 8003568:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 800356c:	ed87 1b08 	vstr	d1, [r7, #32]
 8003570:	ed87 2b06 	vstr	d2, [r7, #24]
 8003574:	ed87 3b04 	vstr	d3, [r7, #16]
 8003578:	ed87 4b02 	vstr	d4, [r7, #8]
 800357c:	ed87 5b00 	vstr	d5, [r7]
    x = (M_PI / 180) * x;
 8003580:	a360      	add	r3, pc, #384	; (adr r3, 8003704 <getTopocentricSunDeclination+0x1a4>)
 8003582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003586:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800358a:	f7fd f83d 	bl	8000608 <__aeabi_dmul>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	e9c7 2306 	strd	r2, r3, [r7, #24]
    y = (M_PI / 180) * y;
 8003596:	a35b      	add	r3, pc, #364	; (adr r3, 8003704 <getTopocentricSunDeclination+0x1a4>)
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80035a0:	f7fd f832 	bl	8000608 <__aeabi_dmul>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    eqHorizontal_parallax = (M_PI / 180) * eqHorizontal_parallax;
 80035ac:	a355      	add	r3, pc, #340	; (adr r3, 8003704 <getTopocentricSunDeclination+0x1a4>)
 80035ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035b6:	f7fd f827 	bl	8000608 <__aeabi_dmul>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	e9c7 2304 	strd	r2, r3, [r7, #16]
    H = (M_PI / 180) * H;
 80035c2:	a350      	add	r3, pc, #320	; (adr r3, 8003704 <getTopocentricSunDeclination+0x1a4>)
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035cc:	f7fd f81c 	bl	8000608 <__aeabi_dmul>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	e9c7 2300 	strd	r2, r3, [r7]
    delta = (M_PI / 180) * delta;
 80035d8:	a34a      	add	r3, pc, #296	; (adr r3, 8003704 <getTopocentricSunDeclination+0x1a4>)
 80035da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035e2:	f7fd f811 	bl	8000608 <__aeabi_dmul>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    delta_alpha = (M_PI / 180) * delta_alpha;
 80035ee:	a345      	add	r3, pc, #276	; (adr r3, 8003704 <getTopocentricSunDeclination+0x1a4>)
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035f8:	f7fd f806 	bl	8000608 <__aeabi_dmul>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	e9c7 2302 	strd	r2, r3, [r7, #8]

    double term1 = (sin(delta) - (y*sin(eqHorizontal_parallax))) * cos(delta_alpha);
 8003604:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8003608:	f00a f942 	bl	800d890 <sin>
 800360c:	ec55 4b10 	vmov	r4, r5, d0
 8003610:	ed97 0b04 	vldr	d0, [r7, #16]
 8003614:	f00a f93c 	bl	800d890 <sin>
 8003618:	ec51 0b10 	vmov	r0, r1, d0
 800361c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003620:	f7fc fff2 	bl	8000608 <__aeabi_dmul>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4620      	mov	r0, r4
 800362a:	4629      	mov	r1, r5
 800362c:	f7fc fe34 	bl	8000298 <__aeabi_dsub>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4614      	mov	r4, r2
 8003636:	461d      	mov	r5, r3
 8003638:	ed97 0b02 	vldr	d0, [r7, #8]
 800363c:	f00a f8c8 	bl	800d7d0 <cos>
 8003640:	ec53 2b10 	vmov	r2, r3, d0
 8003644:	4620      	mov	r0, r4
 8003646:	4629      	mov	r1, r5
 8003648:	f7fc ffde 	bl	8000608 <__aeabi_dmul>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double term2 = cos(delta) - (x * sin(eqHorizontal_parallax) * cos(H));
 8003654:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8003658:	f00a f8ba 	bl	800d7d0 <cos>
 800365c:	ec59 8b10 	vmov	r8, r9, d0
 8003660:	ed97 0b04 	vldr	d0, [r7, #16]
 8003664:	f00a f914 	bl	800d890 <sin>
 8003668:	ec51 0b10 	vmov	r0, r1, d0
 800366c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003670:	f7fc ffca 	bl	8000608 <__aeabi_dmul>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4614      	mov	r4, r2
 800367a:	461d      	mov	r5, r3
 800367c:	ed97 0b00 	vldr	d0, [r7]
 8003680:	f00a f8a6 	bl	800d7d0 <cos>
 8003684:	ec53 2b10 	vmov	r2, r3, d0
 8003688:	4620      	mov	r0, r4
 800368a:	4629      	mov	r1, r5
 800368c:	f7fc ffbc 	bl	8000608 <__aeabi_dmul>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4640      	mov	r0, r8
 8003696:	4649      	mov	r1, r9
 8003698:	f7fc fdfe 	bl	8000298 <__aeabi_dsub>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

    double delta_dash = atan2(term1, term2);
 80036a4:	ed97 1b0e 	vldr	d1, [r7, #56]	; 0x38
 80036a8:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80036ac:	f009 fe7c 	bl	800d3a8 <atan2>
 80036b0:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
    delta_dash = (delta_dash * 180) / M_PI;
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	4b11      	ldr	r3, [pc, #68]	; (8003700 <getTopocentricSunDeclination+0x1a0>)
 80036ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80036be:	f7fc ffa3 	bl	8000608 <__aeabi_dmul>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4610      	mov	r0, r2
 80036c8:	4619      	mov	r1, r3
 80036ca:	a30b      	add	r3, pc, #44	; (adr r3, 80036f8 <getTopocentricSunDeclination+0x198>)
 80036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d0:	f7fd f8c4 	bl	800085c <__aeabi_ddiv>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    return delta_dash;
 80036dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80036e0:	ec43 2b17 	vmov	d7, r2, r3
}
 80036e4:	eeb0 0a47 	vmov.f32	s0, s14
 80036e8:	eef0 0a67 	vmov.f32	s1, s15
 80036ec:	3748      	adds	r7, #72	; 0x48
 80036ee:	46bd      	mov	sp, r7
 80036f0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036f4:	f3af 8000 	nop.w
 80036f8:	54442d18 	.word	0x54442d18
 80036fc:	400921fb 	.word	0x400921fb
 8003700:	40668000 	.word	0x40668000
 8003704:	a2529d39 	.word	0xa2529d39
 8003708:	3f91df46 	.word	0x3f91df46

0800370c <getTopocentricLocalHourAngle>:

double getTopocentricLocalHourAngle(double H, double alpha_delta)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	ed87 0b02 	vstr	d0, [r7, #8]
 8003716:	ed87 1b00 	vstr	d1, [r7]
    double H_dash = H - alpha_delta;
 800371a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800371e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003722:	f7fc fdb9 	bl	8000298 <__aeabi_dsub>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return H_dash;
 800372e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003732:	ec43 2b17 	vmov	d7, r2, r3
}
 8003736:	eeb0 0a47 	vmov.f32	s0, s14
 800373a:	eef0 0a67 	vmov.f32	s1, s15
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	0000      	movs	r0, r0
	...

08003748 <getIncompleteElevationAngle>:

double getIncompleteElevationAngle(double latitude, double delta_dash, double H_dash)
{
 8003748:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800374c:	b088      	sub	sp, #32
 800374e:	af00      	add	r7, sp, #0
 8003750:	ed87 0b04 	vstr	d0, [r7, #16]
 8003754:	ed87 1b02 	vstr	d1, [r7, #8]
 8003758:	ed87 2b00 	vstr	d2, [r7]
    latitude = (M_PI / 180) * latitude;
 800375c:	a345      	add	r3, pc, #276	; (adr r3, 8003874 <getIncompleteElevationAngle+0x12c>)
 800375e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003762:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003766:	f7fc ff4f 	bl	8000608 <__aeabi_dmul>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    delta_dash = (M_PI / 180) * delta_dash;
 8003772:	a340      	add	r3, pc, #256	; (adr r3, 8003874 <getIncompleteElevationAngle+0x12c>)
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800377c:	f7fc ff44 	bl	8000608 <__aeabi_dmul>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	e9c7 2302 	strd	r2, r3, [r7, #8]
    H_dash = (M_PI / 180) * H_dash;
 8003788:	a33a      	add	r3, pc, #232	; (adr r3, 8003874 <getIncompleteElevationAngle+0x12c>)
 800378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003792:	f7fc ff39 	bl	8000608 <__aeabi_dmul>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	e9c7 2300 	strd	r2, r3, [r7]

    double e0 = asin((sin(latitude)*sin(delta_dash)) + (cos(latitude)*cos(delta_dash)*cos(H_dash)));
 800379e:	ed97 0b04 	vldr	d0, [r7, #16]
 80037a2:	f00a f875 	bl	800d890 <sin>
 80037a6:	ec55 4b10 	vmov	r4, r5, d0
 80037aa:	ed97 0b02 	vldr	d0, [r7, #8]
 80037ae:	f00a f86f 	bl	800d890 <sin>
 80037b2:	ec53 2b10 	vmov	r2, r3, d0
 80037b6:	4620      	mov	r0, r4
 80037b8:	4629      	mov	r1, r5
 80037ba:	f7fc ff25 	bl	8000608 <__aeabi_dmul>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4614      	mov	r4, r2
 80037c4:	461d      	mov	r5, r3
 80037c6:	ed97 0b04 	vldr	d0, [r7, #16]
 80037ca:	f00a f801 	bl	800d7d0 <cos>
 80037ce:	ec59 8b10 	vmov	r8, r9, d0
 80037d2:	ed97 0b02 	vldr	d0, [r7, #8]
 80037d6:	f009 fffb 	bl	800d7d0 <cos>
 80037da:	ec53 2b10 	vmov	r2, r3, d0
 80037de:	4640      	mov	r0, r8
 80037e0:	4649      	mov	r1, r9
 80037e2:	f7fc ff11 	bl	8000608 <__aeabi_dmul>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4690      	mov	r8, r2
 80037ec:	4699      	mov	r9, r3
 80037ee:	ed97 0b00 	vldr	d0, [r7]
 80037f2:	f009 ffed 	bl	800d7d0 <cos>
 80037f6:	ec53 2b10 	vmov	r2, r3, d0
 80037fa:	4640      	mov	r0, r8
 80037fc:	4649      	mov	r1, r9
 80037fe:	f7fc ff03 	bl	8000608 <__aeabi_dmul>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4620      	mov	r0, r4
 8003808:	4629      	mov	r1, r5
 800380a:	f7fc fd47 	bl	800029c <__adddf3>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	ec43 2b17 	vmov	d7, r2, r3
 8003816:	eeb0 0a47 	vmov.f32	s0, s14
 800381a:	eef0 0a67 	vmov.f32	s1, s15
 800381e:	f009 fd8f 	bl	800d340 <asin>
 8003822:	ed87 0b06 	vstr	d0, [r7, #24]
    e0 = (e0 * 180) / M_PI;
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	4b11      	ldr	r3, [pc, #68]	; (8003870 <getIncompleteElevationAngle+0x128>)
 800382c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003830:	f7fc feea 	bl	8000608 <__aeabi_dmul>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4610      	mov	r0, r2
 800383a:	4619      	mov	r1, r3
 800383c:	a30a      	add	r3, pc, #40	; (adr r3, 8003868 <getIncompleteElevationAngle+0x120>)
 800383e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003842:	f7fd f80b 	bl	800085c <__aeabi_ddiv>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return e0;
 800384e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003852:	ec43 2b17 	vmov	d7, r2, r3
}
 8003856:	eeb0 0a47 	vmov.f32	s0, s14
 800385a:	eef0 0a67 	vmov.f32	s1, s15
 800385e:	3720      	adds	r7, #32
 8003860:	46bd      	mov	sp, r7
 8003862:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003866:	bf00      	nop
 8003868:	54442d18 	.word	0x54442d18
 800386c:	400921fb 	.word	0x400921fb
 8003870:	40668000 	.word	0x40668000
 8003874:	a2529d39 	.word	0xa2529d39
 8003878:	3f91df46 	.word	0x3f91df46
 800387c:	00000000 	.word	0x00000000

08003880 <getAtmosphericRefractionCorrection>:

double getAtmosphericRefractionCorrection(double P, double T, double e0)
{
 8003880:	b5b0      	push	{r4, r5, r7, lr}
 8003882:	b08a      	sub	sp, #40	; 0x28
 8003884:	af00      	add	r7, sp, #0
 8003886:	ed87 0b04 	vstr	d0, [r7, #16]
 800388a:	ed87 1b02 	vstr	d1, [r7, #8]
 800388e:	ed87 2b00 	vstr	d2, [r7]
    double temp = (M_PI / 180) * (e0 + (10.3 / (e0 + 5.11)));
 8003892:	a34c      	add	r3, pc, #304	; (adr r3, 80039c4 <getAtmosphericRefractionCorrection+0x144>)
 8003894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003898:	e9d7 0100 	ldrd	r0, r1, [r7]
 800389c:	f7fc fcfe 	bl	800029c <__adddf3>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	a149      	add	r1, pc, #292	; (adr r1, 80039cc <getAtmosphericRefractionCorrection+0x14c>)
 80038a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038aa:	f7fc ffd7 	bl	800085c <__aeabi_ddiv>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4610      	mov	r0, r2
 80038b4:	4619      	mov	r1, r3
 80038b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038ba:	f7fc fcef 	bl	800029c <__adddf3>
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4610      	mov	r0, r2
 80038c4:	4619      	mov	r1, r3
 80038c6:	a343      	add	r3, pc, #268	; (adr r3, 80039d4 <getAtmosphericRefractionCorrection+0x154>)
 80038c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038cc:	f7fc fe9c 	bl	8000608 <__aeabi_dmul>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // double temp = e0 + (10.3 / (e0 + 5.11));
    temp = tan(temp);
 80038d8:	ed97 0b08 	vldr	d0, [r7, #32]
 80038dc:	f00a f830 	bl	800d940 <tan>
 80038e0:	ed87 0b08 	vstr	d0, [r7, #32]
    temp = (temp * 180) / M_PI;
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	4b33      	ldr	r3, [pc, #204]	; (80039b8 <getAtmosphericRefractionCorrection+0x138>)
 80038ea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80038ee:	f7fc fe8b 	bl	8000608 <__aeabi_dmul>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	4610      	mov	r0, r2
 80038f8:	4619      	mov	r1, r3
 80038fa:	a327      	add	r3, pc, #156	; (adr r3, 8003998 <getAtmosphericRefractionCorrection+0x118>)
 80038fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003900:	f7fc ffac 	bl	800085c <__aeabi_ddiv>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	e9c7 2308 	strd	r2, r3, [r7, #32]

    double delta_e = (P / 1010) * (283 / (273 + T)) * (1.02 / (60 * temp));
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	4b2a      	ldr	r3, [pc, #168]	; (80039bc <getAtmosphericRefractionCorrection+0x13c>)
 8003912:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003916:	f7fc ffa1 	bl	800085c <__aeabi_ddiv>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4614      	mov	r4, r2
 8003920:	461d      	mov	r5, r3
 8003922:	a31f      	add	r3, pc, #124	; (adr r3, 80039a0 <getAtmosphericRefractionCorrection+0x120>)
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800392c:	f7fc fcb6 	bl	800029c <__adddf3>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	a11c      	add	r1, pc, #112	; (adr r1, 80039a8 <getAtmosphericRefractionCorrection+0x128>)
 8003936:	e9d1 0100 	ldrd	r0, r1, [r1]
 800393a:	f7fc ff8f 	bl	800085c <__aeabi_ddiv>
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	4620      	mov	r0, r4
 8003944:	4629      	mov	r1, r5
 8003946:	f7fc fe5f 	bl	8000608 <__aeabi_dmul>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	4614      	mov	r4, r2
 8003950:	461d      	mov	r5, r3
 8003952:	f04f 0200 	mov.w	r2, #0
 8003956:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <getAtmosphericRefractionCorrection+0x140>)
 8003958:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800395c:	f7fc fe54 	bl	8000608 <__aeabi_dmul>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	a112      	add	r1, pc, #72	; (adr r1, 80039b0 <getAtmosphericRefractionCorrection+0x130>)
 8003966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800396a:	f7fc ff77 	bl	800085c <__aeabi_ddiv>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4620      	mov	r0, r4
 8003974:	4629      	mov	r1, r5
 8003976:	f7fc fe47 	bl	8000608 <__aeabi_dmul>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return delta_e;
 8003982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003986:	ec43 2b17 	vmov	d7, r2, r3
}
 800398a:	eeb0 0a47 	vmov.f32	s0, s14
 800398e:	eef0 0a67 	vmov.f32	s1, s15
 8003992:	3728      	adds	r7, #40	; 0x28
 8003994:	46bd      	mov	sp, r7
 8003996:	bdb0      	pop	{r4, r5, r7, pc}
 8003998:	54442d18 	.word	0x54442d18
 800399c:	400921fb 	.word	0x400921fb
 80039a0:	00000000 	.word	0x00000000
 80039a4:	40711000 	.word	0x40711000
 80039a8:	00000000 	.word	0x00000000
 80039ac:	4071b000 	.word	0x4071b000
 80039b0:	851eb852 	.word	0x851eb852
 80039b4:	3ff051eb 	.word	0x3ff051eb
 80039b8:	40668000 	.word	0x40668000
 80039bc:	408f9000 	.word	0x408f9000
 80039c0:	404e0000 	.word	0x404e0000
 80039c4:	d70a3d71 	.word	0xd70a3d71
 80039c8:	401470a3 	.word	0x401470a3
 80039cc:	9999999a 	.word	0x9999999a
 80039d0:	40249999 	.word	0x40249999
 80039d4:	a2529d39 	.word	0xa2529d39
 80039d8:	3f91df46 	.word	0x3f91df46

080039dc <getTopocentricElevationAngle>:

double getTopocentricElevationAngle(double e0, double delta_e)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	ed87 0b02 	vstr	d0, [r7, #8]
 80039e6:	ed87 1b00 	vstr	d1, [r7]
    double e = e0 + delta_e;
 80039ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039f2:	f7fc fc53 	bl	800029c <__adddf3>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return e;
 80039fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a02:	ec43 2b17 	vmov	d7, r2, r3
}
 8003a06:	eeb0 0a47 	vmov.f32	s0, s14
 8003a0a:	eef0 0a67 	vmov.f32	s1, s15
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <getTopocentricZenithAngle>:

double getTopocentricZenithAngle(double e)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	ed87 0b00 	vstr	d0, [r7]
    double theta = 90 - e;
 8003a1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a22:	f04f 0000 	mov.w	r0, #0
 8003a26:	4909      	ldr	r1, [pc, #36]	; (8003a4c <getTopocentricZenithAngle+0x38>)
 8003a28:	f7fc fc36 	bl	8000298 <__aeabi_dsub>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return theta;
 8003a34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a38:	ec43 2b17 	vmov	d7, r2, r3
}
 8003a3c:	eeb0 0a47 	vmov.f32	s0, s14
 8003a40:	eef0 0a67 	vmov.f32	s1, s15
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40568000 	.word	0x40568000

08003a50 <getTopocentricAzimuthAngle>:

double getTopocentricAzimuthAngle(double H_dash, double latitude, double delta_dash)
{
 8003a50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a54:	b08c      	sub	sp, #48	; 0x30
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	ed87 0b04 	vstr	d0, [r7, #16]
 8003a5c:	ed87 1b02 	vstr	d1, [r7, #8]
 8003a60:	ed87 2b00 	vstr	d2, [r7]
    H_dash = (M_PI / 180) * H_dash;
 8003a64:	a392      	add	r3, pc, #584	; (adr r3, 8003cb0 <getTopocentricAzimuthAngle+0x260>)
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a6e:	f7fc fdcb 	bl	8000608 <__aeabi_dmul>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	e9c7 2304 	strd	r2, r3, [r7, #16]
    latitude = (M_PI / 180) * latitude;
 8003a7a:	a38d      	add	r3, pc, #564	; (adr r3, 8003cb0 <getTopocentricAzimuthAngle+0x260>)
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a84:	f7fc fdc0 	bl	8000608 <__aeabi_dmul>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    delta_dash = (M_PI / 180) * delta_dash;
 8003a90:	a387      	add	r3, pc, #540	; (adr r3, 8003cb0 <getTopocentricAzimuthAngle+0x260>)
 8003a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a9a:	f7fc fdb5 	bl	8000608 <__aeabi_dmul>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	e9c7 2300 	strd	r2, r3, [r7]

    double temp = (cos(H_dash) * sin(latitude)) - (tan(delta_dash) * cos(latitude));
 8003aa6:	ed97 0b04 	vldr	d0, [r7, #16]
 8003aaa:	f009 fe91 	bl	800d7d0 <cos>
 8003aae:	ec55 4b10 	vmov	r4, r5, d0
 8003ab2:	ed97 0b02 	vldr	d0, [r7, #8]
 8003ab6:	f009 feeb 	bl	800d890 <sin>
 8003aba:	ec53 2b10 	vmov	r2, r3, d0
 8003abe:	4620      	mov	r0, r4
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	f7fc fda1 	bl	8000608 <__aeabi_dmul>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4614      	mov	r4, r2
 8003acc:	461d      	mov	r5, r3
 8003ace:	ed97 0b00 	vldr	d0, [r7]
 8003ad2:	f009 ff35 	bl	800d940 <tan>
 8003ad6:	ec59 8b10 	vmov	r8, r9, d0
 8003ada:	ed97 0b02 	vldr	d0, [r7, #8]
 8003ade:	f009 fe77 	bl	800d7d0 <cos>
 8003ae2:	ec53 2b10 	vmov	r2, r3, d0
 8003ae6:	4640      	mov	r0, r8
 8003ae8:	4649      	mov	r1, r9
 8003aea:	f7fc fd8d 	bl	8000608 <__aeabi_dmul>
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	4620      	mov	r0, r4
 8003af4:	4629      	mov	r1, r5
 8003af6:	f7fc fbcf 	bl	8000298 <__aeabi_dsub>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	e9c7 2308 	strd	r2, r3, [r7, #32]

    double azimuth = atan2(sin(H_dash), temp);
 8003b02:	ed97 0b04 	vldr	d0, [r7, #16]
 8003b06:	f009 fec3 	bl	800d890 <sin>
 8003b0a:	eeb0 7a40 	vmov.f32	s14, s0
 8003b0e:	eef0 7a60 	vmov.f32	s15, s1
 8003b12:	ed97 1b08 	vldr	d1, [r7, #32]
 8003b16:	eeb0 0a47 	vmov.f32	s0, s14
 8003b1a:	eef0 0a67 	vmov.f32	s1, s15
 8003b1e:	f009 fc43 	bl	800d3a8 <atan2>
 8003b22:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
    azimuth = (azimuth * 180) / M_PI;
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	4b5f      	ldr	r3, [pc, #380]	; (8003ca8 <getTopocentricAzimuthAngle+0x258>)
 8003b2c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b30:	f7fc fd6a 	bl	8000608 <__aeabi_dmul>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4610      	mov	r0, r2
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	a358      	add	r3, pc, #352	; (adr r3, 8003ca0 <getTopocentricAzimuthAngle+0x250>)
 8003b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b42:	f7fc fe8b 	bl	800085c <__aeabi_ddiv>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    azimuth = azimuth / 360;
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	4b56      	ldr	r3, [pc, #344]	; (8003cac <getTopocentricAzimuthAngle+0x25c>)
 8003b54:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b58:	f7fc fe80 	bl	800085c <__aeabi_ddiv>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double fraction = fabs(azimuth - floor(abs(azimuth)));
 8003b64:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8003b68:	f006 fc66 	bl	800a438 <abs>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fc fce0 	bl	8000534 <__aeabi_i2d>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b7c:	f7fc fb8c 	bl	8000298 <__aeabi_dsub>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4611      	mov	r1, r2
 8003b86:	61b9      	str	r1, [r7, #24]
 8003b88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b8c:	61fb      	str	r3, [r7, #28]
    if (azimuth > 0)
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b9a:	f7fc ffc5 	bl	8000b28 <__aeabi_dcmpgt>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00b      	beq.n	8003bbc <getTopocentricAzimuthAngle+0x16c>
    {
        azimuth = 360 * fraction;
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	4b40      	ldr	r3, [pc, #256]	; (8003cac <getTopocentricAzimuthAngle+0x25c>)
 8003baa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003bae:	f7fc fd2b 	bl	8000608 <__aeabi_dmul>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003bba:	e011      	b.n	8003be0 <getTopocentricAzimuthAngle+0x190>
    }
    else
    {
        azimuth = 360 - (360 * fraction);
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	4b3a      	ldr	r3, [pc, #232]	; (8003cac <getTopocentricAzimuthAngle+0x25c>)
 8003bc2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003bc6:	f7fc fd1f 	bl	8000608 <__aeabi_dmul>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	f04f 0000 	mov.w	r0, #0
 8003bd2:	4936      	ldr	r1, [pc, #216]	; (8003cac <getTopocentricAzimuthAngle+0x25c>)
 8003bd4:	f7fc fb60 	bl	8000298 <__aeabi_dsub>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }

    azimuth = azimuth + 180;
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	4b30      	ldr	r3, [pc, #192]	; (8003ca8 <getTopocentricAzimuthAngle+0x258>)
 8003be6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003bea:	f7fc fb57 	bl	800029c <__adddf3>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    azimuth = azimuth / 360;
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	4b2c      	ldr	r3, [pc, #176]	; (8003cac <getTopocentricAzimuthAngle+0x25c>)
 8003bfc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c00:	f7fc fe2c 	bl	800085c <__aeabi_ddiv>
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    fraction = fabs(azimuth - floor(abs(azimuth)));
 8003c0c:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8003c10:	f006 fc12 	bl	800a438 <abs>
 8003c14:	4603      	mov	r3, r0
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fc fc8c 	bl	8000534 <__aeabi_i2d>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c24:	f7fc fb38 	bl	8000298 <__aeabi_dsub>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	61b9      	str	r1, [r7, #24]
 8003c30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c34:	61fb      	str	r3, [r7, #28]
    if (azimuth > 0)
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c42:	f7fc ff71 	bl	8000b28 <__aeabi_dcmpgt>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00b      	beq.n	8003c64 <getTopocentricAzimuthAngle+0x214>
    {
        azimuth = 360 * fraction;
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	4b16      	ldr	r3, [pc, #88]	; (8003cac <getTopocentricAzimuthAngle+0x25c>)
 8003c52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003c56:	f7fc fcd7 	bl	8000608 <__aeabi_dmul>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003c62:	e011      	b.n	8003c88 <getTopocentricAzimuthAngle+0x238>
    }
    else
    {
        azimuth = 360 - (360 * fraction);
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	4b10      	ldr	r3, [pc, #64]	; (8003cac <getTopocentricAzimuthAngle+0x25c>)
 8003c6a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003c6e:	f7fc fccb 	bl	8000608 <__aeabi_dmul>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	f04f 0000 	mov.w	r0, #0
 8003c7a:	490c      	ldr	r1, [pc, #48]	; (8003cac <getTopocentricAzimuthAngle+0x25c>)
 8003c7c:	f7fc fb0c 	bl	8000298 <__aeabi_dsub>
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }

    return azimuth;
 8003c88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c8c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003c90:	eeb0 0a47 	vmov.f32	s0, s14
 8003c94:	eef0 0a67 	vmov.f32	s1, s15
 8003c98:	3730      	adds	r7, #48	; 0x30
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ca0:	54442d18 	.word	0x54442d18
 8003ca4:	400921fb 	.word	0x400921fb
 8003ca8:	40668000 	.word	0x40668000
 8003cac:	40768000 	.word	0x40768000
 8003cb0:	a2529d39 	.word	0xa2529d39
 8003cb4:	3f91df46 	.word	0x3f91df46

08003cb8 <caller>:
        return 0;
    }
}

double *caller(int day, int year, int month, float hour, float min, float sec, float zone, float latitude, float longitude)
{
 8003cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cbc:	f6ad 6df4 	subw	sp, sp, #3828	; 0xef4
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003cc6:	f6a3 63cc 	subw	r3, r3, #3788	; 0xecc
 8003cca:	6018      	str	r0, [r3, #0]
 8003ccc:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003cd0:	f5a3 636d 	sub.w	r3, r3, #3792	; 0xed0
 8003cd4:	6019      	str	r1, [r3, #0]
 8003cd6:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003cda:	f6a3 63d4 	subw	r3, r3, #3796	; 0xed4
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003ce4:	f6a3 63d8 	subw	r3, r3, #3800	; 0xed8
 8003ce8:	ed83 0a00 	vstr	s0, [r3]
 8003cec:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003cf0:	f6a3 63dc 	subw	r3, r3, #3804	; 0xedc
 8003cf4:	edc3 0a00 	vstr	s1, [r3]
 8003cf8:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003cfc:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8003d00:	ed83 1a00 	vstr	s2, [r3]
 8003d04:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003d08:	f6a3 63e4 	subw	r3, r3, #3812	; 0xee4
 8003d0c:	edc3 1a00 	vstr	s3, [r3]
 8003d10:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003d14:	f6a3 63e8 	subw	r3, r3, #3816	; 0xee8
 8003d18:	ed83 2a00 	vstr	s4, [r3]
 8003d1c:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003d20:	f6a3 63ec 	subw	r3, r3, #3820	; 0xeec
 8003d24:	edc3 2a00 	vstr	s5, [r3]
    double elevation = 1655;
 8003d28:	f20f 4304 	addw	r3, pc, #1028	; 0x404
 8003d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d30:	f607 61e8 	addw	r1, r7, #3816	; 0xee8
 8003d34:	e9c1 2300 	strd	r2, r3, [r1]

    double pressure = 841.1604;
 8003d38:	a3ff      	add	r3, pc, #1020	; (adr r3, 8004138 <caller+0x480>)
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	f507 616e 	add.w	r1, r7, #3808	; 0xee0
 8003d42:	e9c1 2300 	strd	r2, r3, [r1]
    double temperature = 15;
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	4bf7      	ldr	r3, [pc, #988]	; (8004128 <caller+0x470>)
 8003d4c:	f607 61d8 	addw	r1, r7, #3800	; 0xed8
 8003d50:	e9c1 2300 	strd	r2, r3, [r1]

    double day_in_decimal = getDayinDecimals(day, hour, min, sec);
 8003d54:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003d58:	f6a3 63d8 	subw	r3, r3, #3800	; 0xed8
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	f7fc fbfb 	bl	8000558 <__aeabi_f2d>
 8003d62:	4680      	mov	r8, r0
 8003d64:	4689      	mov	r9, r1
 8003d66:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003d6a:	f6a3 63dc 	subw	r3, r3, #3804	; 0xedc
 8003d6e:	6818      	ldr	r0, [r3, #0]
 8003d70:	f7fc fbf2 	bl	8000558 <__aeabi_f2d>
 8003d74:	4682      	mov	sl, r0
 8003d76:	468b      	mov	fp, r1
 8003d78:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003d7c:	f5a3 636e 	sub.w	r3, r3, #3808	; 0xee0
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	f7fc fbe9 	bl	8000558 <__aeabi_f2d>
 8003d86:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003d8a:	f6a3 63cc 	subw	r3, r3, #3788	; 0xecc
 8003d8e:	ec41 0b12 	vmov	d2, r0, r1
 8003d92:	ec4b ab11 	vmov	d1, sl, fp
 8003d96:	ec49 8b10 	vmov	d0, r8, r9
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	f7fd f8dc 	bl	8000f58 <getDayinDecimals>
 8003da0:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 8003da4:	ed83 0b00 	vstr	d0, [r3]
    double julianDay = getJulianDay(year, month, day_in_decimal, zone);
 8003da8:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003dac:	f6a3 63e4 	subw	r3, r3, #3812	; 0xee4
 8003db0:	6818      	ldr	r0, [r3, #0]
 8003db2:	f7fc fbd1 	bl	8000558 <__aeabi_f2d>
 8003db6:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003dba:	f6a3 62d4 	subw	r2, r3, #3796	; 0xed4
 8003dbe:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8003dc2:	f5a3 636d 	sub.w	r3, r3, #3792	; 0xed0
 8003dc6:	ec41 0b11 	vmov	d1, r0, r1
 8003dca:	f507 616d 	add.w	r1, r7, #3792	; 0xed0
 8003dce:	ed91 0b00 	vldr	d0, [r1]
 8003dd2:	6811      	ldr	r1, [r2, #0]
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	f7fd f917 	bl	8001008 <getJulianDay>
 8003dda:	f607 63c8 	addw	r3, r7, #3784	; 0xec8
 8003dde:	ed83 0b00 	vstr	d0, [r3]

    // printf("Julian Day = %lf\n", julianDay);

    double julianEphemerisDay = getJulianEphemerisDay(julianDay);
 8003de2:	f607 63c8 	addw	r3, r7, #3784	; 0xec8
 8003de6:	ed93 0b00 	vldr	d0, [r3]
 8003dea:	f7fd f9a9 	bl	8001140 <getJulianEphemerisDay>
 8003dee:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 8003df2:	ed83 0b00 	vstr	d0, [r3]

    double julianCentury = getJulianCentury(julianDay);
 8003df6:	f607 63c8 	addw	r3, r7, #3784	; 0xec8
 8003dfa:	ed93 0b00 	vldr	d0, [r3]
 8003dfe:	f7fd f9bb 	bl	8001178 <getJulianCentury>
 8003e02:	f607 63b8 	addw	r3, r7, #3768	; 0xeb8
 8003e06:	ed83 0b00 	vstr	d0, [r3]

    double julianEphemerisCentury = getJulianEphemerisCentury(julianEphemerisDay);
 8003e0a:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 8003e0e:	ed93 0b00 	vldr	d0, [r3]
 8003e12:	f7fd f9dd 	bl	80011d0 <getJulianEphemerisCentury>
 8003e16:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8003e1a:	ed83 0b00 	vstr	d0, [r3]

    double julianEphemerisMillenium = getJulianEphemerisMillenium(julianEphemerisCentury);
 8003e1e:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8003e22:	ed93 0b00 	vldr	d0, [r3]
 8003e26:	f7fd f9ff 	bl	8001228 <getJulianEphemerisMillenium>
 8003e2a:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003e2e:	ed83 0b00 	vstr	d0, [r3]
    /*
    printf("Julian Ephemeris Century = %lf\n", julianEphemerisCentury);
    printf("Julian Ephemeris Millenium = %lf\n", julianEphemerisMillenium);
    */

    struct L0 *dataL0 = initL0();
 8003e32:	f7fd fa17 	bl	8001264 <initL0>
 8003e36:	f8c7 0ea4 	str.w	r0, [r7, #3748]	; 0xea4
    struct L1 *dataL1 = initL1();
 8003e3a:	f7fd fa1d 	bl	8001278 <initL1>
 8003e3e:	f8c7 0ea0 	str.w	r0, [r7, #3744]	; 0xea0
    struct L2 *dataL2 = initL2();
 8003e42:	f7fd fa23 	bl	800128c <initL2>
 8003e46:	f8c7 0e9c 	str.w	r0, [r7, #3740]	; 0xe9c
    struct L3 *dataL3 = initL3();
 8003e4a:	f7fd fa29 	bl	80012a0 <initL3>
 8003e4e:	f8c7 0e98 	str.w	r0, [r7, #3736]	; 0xe98
    struct L4 *dataL4 = initL4();
 8003e52:	f7fd fa2f 	bl	80012b4 <initL4>
 8003e56:	f8c7 0e94 	str.w	r0, [r7, #3732]	; 0xe94
    struct L5 *dataL5 = initL5();
 8003e5a:	f7fd fa35 	bl	80012c8 <initL5>
 8003e5e:	f8c7 0e90 	str.w	r0, [r7, #3728]	; 0xe90

    double L0 = getL0(dataL0, julianEphemerisMillenium);
 8003e62:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003e66:	ed93 0b00 	vldr	d0, [r3]
 8003e6a:	f8d7 0ea4 	ldr.w	r0, [r7, #3748]	; 0xea4
 8003e6e:	f7fd fa35 	bl	80012dc <getL0>
 8003e72:	f607 6388 	addw	r3, r7, #3720	; 0xe88
 8003e76:	ed83 0b00 	vstr	d0, [r3]
    double L1 = getL1(dataL1, julianEphemerisMillenium);
 8003e7a:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003e7e:	ed93 0b00 	vldr	d0, [r3]
 8003e82:	f8d7 0ea0 	ldr.w	r0, [r7, #3744]	; 0xea0
 8003e86:	f7fd fa91 	bl	80013ac <getL1>
 8003e8a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8003e8e:	ed83 0b00 	vstr	d0, [r3]
    double L2 = getL2(dataL2, julianEphemerisMillenium);
 8003e92:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003e96:	ed93 0b00 	vldr	d0, [r3]
 8003e9a:	f8d7 0e9c 	ldr.w	r0, [r7, #3740]	; 0xe9c
 8003e9e:	f7fd faed 	bl	800147c <getL2>
 8003ea2:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003ea6:	ed83 0b00 	vstr	d0, [r3]
    double L3 = getL3(dataL3, julianEphemerisMillenium);
 8003eaa:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003eae:	ed93 0b00 	vldr	d0, [r3]
 8003eb2:	f8d7 0e98 	ldr.w	r0, [r7, #3736]	; 0xe98
 8003eb6:	f7fd fb49 	bl	800154c <getL3>
 8003eba:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 8003ebe:	ed83 0b00 	vstr	d0, [r3]
    double L4 = getL4(dataL4, julianEphemerisMillenium);
 8003ec2:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003ec6:	ed93 0b00 	vldr	d0, [r3]
 8003eca:	f8d7 0e94 	ldr.w	r0, [r7, #3732]	; 0xe94
 8003ece:	f7fd fba5 	bl	800161c <getL4>
 8003ed2:	f607 6368 	addw	r3, r7, #3688	; 0xe68
 8003ed6:	ed83 0b00 	vstr	d0, [r3]
    double L5 = getL5(dataL5, julianEphemerisMillenium);
 8003eda:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003ede:	ed93 0b00 	vldr	d0, [r3]
 8003ee2:	f8d7 0e90 	ldr.w	r0, [r7, #3728]	; 0xe90
 8003ee6:	f7fd fc01 	bl	80016ec <getL5>
 8003eea:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003eee:	ed83 0b00 	vstr	d0, [r3]

    double heliocentric_longitude = getHeliocentricLongitude(L0, L1, L2, L3, L4, L5, julianEphemerisMillenium);
 8003ef2:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003ef6:	ed93 6b00 	vldr	d6, [r3]
 8003efa:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003efe:	ed93 5b00 	vldr	d5, [r3]
 8003f02:	f607 6368 	addw	r3, r7, #3688	; 0xe68
 8003f06:	ed93 4b00 	vldr	d4, [r3]
 8003f0a:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 8003f0e:	ed93 3b00 	vldr	d3, [r3]
 8003f12:	f607 6378 	addw	r3, r7, #3704	; 0xe78
 8003f16:	ed93 2b00 	vldr	d2, [r3]
 8003f1a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8003f1e:	ed93 1b00 	vldr	d1, [r3]
 8003f22:	f607 6388 	addw	r3, r7, #3720	; 0xe88
 8003f26:	ed93 0b00 	vldr	d0, [r3]
 8003f2a:	f7fd fc49 	bl	80017c0 <getHeliocentricLongitude>
 8003f2e:	f607 6358 	addw	r3, r7, #3672	; 0xe58
 8003f32:	ed83 0b00 	vstr	d0, [r3]

    // printf("Heliocentric Longitude = %lf\n", heliocentric_longitude);

    struct B0 *dataB0 = initB0();
 8003f36:	f7fd fd4b 	bl	80019d0 <initB0>
 8003f3a:	f8c7 0e54 	str.w	r0, [r7, #3668]	; 0xe54
    struct B1 *dataB1 = initB1();
 8003f3e:	f7fd fd51 	bl	80019e4 <initB1>
 8003f42:	f8c7 0e50 	str.w	r0, [r7, #3664]	; 0xe50

    double B0 = getB0(dataB0, julianEphemerisMillenium);
 8003f46:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003f4a:	ed93 0b00 	vldr	d0, [r3]
 8003f4e:	f8d7 0e54 	ldr.w	r0, [r7, #3668]	; 0xe54
 8003f52:	f7fd fd51 	bl	80019f8 <getB0>
 8003f56:	f607 6348 	addw	r3, r7, #3656	; 0xe48
 8003f5a:	ed83 0b00 	vstr	d0, [r3]
    double B1 = getB1(dataB1, julianEphemerisMillenium);
 8003f5e:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003f62:	ed93 0b00 	vldr	d0, [r3]
 8003f66:	f8d7 0e50 	ldr.w	r0, [r7, #3664]	; 0xe50
 8003f6a:	f7fd fdad 	bl	8001ac8 <getB1>
 8003f6e:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 8003f72:	ed83 0b00 	vstr	d0, [r3]

    double heliocentric_latitude = getHeliocentricLatitude(B0, B1, julianEphemerisMillenium);
 8003f76:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003f7a:	ed93 2b00 	vldr	d2, [r3]
 8003f7e:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 8003f82:	ed93 1b00 	vldr	d1, [r3]
 8003f86:	f607 6348 	addw	r3, r7, #3656	; 0xe48
 8003f8a:	ed93 0b00 	vldr	d0, [r3]
 8003f8e:	f7fd fe03 	bl	8001b98 <getHeliocentricLatitude>
 8003f92:	f607 6338 	addw	r3, r7, #3640	; 0xe38
 8003f96:	ed83 0b00 	vstr	d0, [r3]

    // printf("Heliocentric Latitude = %lf\n", heliocentric_latitude);

    struct R0 *dataR0 = initR0();
 8003f9a:	f7fd fe4b 	bl	8001c34 <initR0>
 8003f9e:	f8c7 0e34 	str.w	r0, [r7, #3636]	; 0xe34
    struct R1 *dataR1 = initR1();
 8003fa2:	f7fd fe51 	bl	8001c48 <initR1>
 8003fa6:	f8c7 0e30 	str.w	r0, [r7, #3632]	; 0xe30
    struct R2 *dataR2 = initR2();
 8003faa:	f7fd fe57 	bl	8001c5c <initR2>
 8003fae:	f8c7 0e2c 	str.w	r0, [r7, #3628]	; 0xe2c
    struct R3 *dataR3 = initR3();
 8003fb2:	f7fd fe5d 	bl	8001c70 <initR3>
 8003fb6:	f8c7 0e28 	str.w	r0, [r7, #3624]	; 0xe28
    struct R4 *dataR4 = initR4();
 8003fba:	f7fd fe63 	bl	8001c84 <initR4>
 8003fbe:	f8c7 0e24 	str.w	r0, [r7, #3620]	; 0xe24

    double R0 = getR0(dataR0, julianEphemerisMillenium);
 8003fc2:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003fc6:	ed93 0b00 	vldr	d0, [r3]
 8003fca:	f8d7 0e34 	ldr.w	r0, [r7, #3636]	; 0xe34
 8003fce:	f7fd fe63 	bl	8001c98 <getR0>
 8003fd2:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 8003fd6:	ed83 0b00 	vstr	d0, [r3]
    double R1 = getR1(dataR1, julianEphemerisMillenium);
 8003fda:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003fde:	ed93 0b00 	vldr	d0, [r3]
 8003fe2:	f8d7 0e30 	ldr.w	r0, [r7, #3632]	; 0xe30
 8003fe6:	f7fd febf 	bl	8001d68 <getR1>
 8003fea:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8003fee:	ed83 0b00 	vstr	d0, [r3]
    double R2 = getR2(dataR2, julianEphemerisMillenium);
 8003ff2:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8003ff6:	ed93 0b00 	vldr	d0, [r3]
 8003ffa:	f8d7 0e2c 	ldr.w	r0, [r7, #3628]	; 0xe2c
 8003ffe:	f7fd ff1b 	bl	8001e38 <getR2>
 8004002:	f607 6308 	addw	r3, r7, #3592	; 0xe08
 8004006:	ed83 0b00 	vstr	d0, [r3]
    double R3 = getR3(dataR3, julianEphemerisMillenium);
 800400a:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 800400e:	ed93 0b00 	vldr	d0, [r3]
 8004012:	f8d7 0e28 	ldr.w	r0, [r7, #3624]	; 0xe28
 8004016:	f7fd ff77 	bl	8001f08 <getR3>
 800401a:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800401e:	ed83 0b00 	vstr	d0, [r3]
    double R4 = getR4(dataR4, julianEphemerisMillenium);
 8004022:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8004026:	ed93 0b00 	vldr	d0, [r3]
 800402a:	f8d7 0e24 	ldr.w	r0, [r7, #3620]	; 0xe24
 800402e:	f7fd ffd3 	bl	8001fd8 <getR4>
 8004032:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8004036:	ed83 0b00 	vstr	d0, [r3]

    double earth_radiusVector = getEarthRadiusVector(R0, R1, R2, R3, R4, julianEphemerisMillenium);
 800403a:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800403e:	461e      	mov	r6, r3
 8004040:	f607 63a8 	addw	r3, r7, #3752	; 0xea8
 8004044:	ed93 5b00 	vldr	d5, [r3]
 8004048:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800404c:	ed93 4b00 	vldr	d4, [r3]
 8004050:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8004054:	ed93 3b00 	vldr	d3, [r3]
 8004058:	f607 6308 	addw	r3, r7, #3592	; 0xe08
 800405c:	ed93 2b00 	vldr	d2, [r3]
 8004060:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8004064:	ed93 1b00 	vldr	d1, [r3]
 8004068:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 800406c:	ed93 0b00 	vldr	d0, [r3]
 8004070:	f7fe f81a 	bl	80020a8 <getEarthRadiusVector>
 8004074:	ed86 0b00 	vstr	d0, [r6]

    // printf("Earth Radius Vector = %lf\n", earth_radiusVector);

    double geocentric_longitude = getGeocentricLongitude(heliocentric_longitude);
 8004078:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800407c:	461e      	mov	r6, r3
 800407e:	f607 6358 	addw	r3, r7, #3672	; 0xe58
 8004082:	ed93 0b00 	vldr	d0, [r3]
 8004086:	f7fe f897 	bl	80021b8 <getGeocentricLongitude>
 800408a:	ed06 0b02 	vstr	d0, [r6, #-8]
    double geocentric_latitude = -1 * heliocentric_latitude;
 800408e:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 8004092:	461a      	mov	r2, r3
 8004094:	f8d7 4e38 	ldr.w	r4, [r7, #3640]	; 0xe38
 8004098:	f8d7 3e3c 	ldr.w	r3, [r7, #3644]	; 0xe3c
 800409c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80040a0:	e9c2 4500 	strd	r4, r5, [r2]
    /*
    printf("Geocentric Longitude = %lf\n", geocentric_longitude);
    printf("Geocentric Latitude = %lf\n", geocentric_latitude);
    */

    double x0 = getMeanElongation_MoonFromSun(julianEphemerisCentury);
 80040a4:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 80040a8:	461c      	mov	r4, r3
 80040aa:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 80040ae:	ed93 0b00 	vldr	d0, [r3]
 80040b2:	f7fe f8e9 	bl	8002288 <getMeanElongation_MoonFromSun>
 80040b6:	ed04 0b02 	vstr	d0, [r4, #-8]
    double x1 = getMeanAnomalySun(julianEphemerisCentury);
 80040ba:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 80040be:	461c      	mov	r4, r3
 80040c0:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 80040c4:	ed93 0b00 	vldr	d0, [r3]
 80040c8:	f7fe f94a 	bl	8002360 <getMeanAnomalySun>
 80040cc:	ed84 0b00 	vstr	d0, [r4]
    double x2 = getMeanAnomalyMoon(julianEphemerisCentury);
 80040d0:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 80040d4:	461c      	mov	r4, r3
 80040d6:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 80040da:	ed93 0b00 	vldr	d0, [r3]
 80040de:	f7fe f9ab 	bl	8002438 <getMeanAnomalyMoon>
 80040e2:	ed04 0b02 	vstr	d0, [r4, #-8]
    double x3 = getMoonLatitudeArgument(julianEphemerisCentury);
 80040e6:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 80040ea:	461c      	mov	r4, r3
 80040ec:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 80040f0:	ed93 0b00 	vldr	d0, [r3]
 80040f4:	f7fe fa0c 	bl	8002510 <getMoonLatitudeArgument>
 80040f8:	ed84 0b00 	vstr	d0, [r4]
    double x4 = getMoonAscendingNode(julianEphemerisCentury);
 80040fc:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 8004100:	461c      	mov	r4, r3
 8004102:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8004106:	ed93 0b00 	vldr	d0, [r3]
 800410a:	f7fe fa6d 	bl	80025e8 <getMoonAscendingNode>
 800410e:	ed04 0b02 	vstr	d0, [r4, #-8]

    const int Y[63][5] = {
 8004112:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8004116:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 800411a:	4a04      	ldr	r2, [pc, #16]	; (800412c <caller+0x474>)
 800411c:	4618      	mov	r0, r3
 800411e:	4611      	mov	r1, r2
 8004120:	f240 43ec 	movw	r3, #1260	; 0x4ec
 8004124:	e00c      	b.n	8004140 <caller+0x488>
 8004126:	bf00      	nop
 8004128:	402e0000 	.word	0x402e0000
 800412c:	0800ffe0 	.word	0x0800ffe0
 8004130:	00000000 	.word	0x00000000
 8004134:	4099dc00 	.word	0x4099dc00
 8004138:	7fcb923a 	.word	0x7fcb923a
 800413c:	408a4948 	.word	0x408a4948
 8004140:	461a      	mov	r2, r3
 8004142:	f007 f947 	bl	800b3d4 <memcpy>
    {2,-1,-1,2,2},
    {0,0,3,2,2},
    {2,-1,0,2,2},
    };

    const double abcd[63][4]={
 8004146:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800414a:	f6a3 63c8 	subw	r3, r3, #3784	; 0xec8
 800414e:	4ae8      	ldr	r2, [pc, #928]	; (80044f0 <caller+0x838>)
 8004150:	4618      	mov	r0, r3
 8004152:	4611      	mov	r1, r2
 8004154:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004158:	461a      	mov	r2, r3
 800415a:	f007 f93b 	bl	800b3d4 <memcpy>
    {-3,0,0,0},
    {-3,0,0,0},
    {-3,0,0,0},
    };

    double *nutation = malloc(2 * sizeof(double));
 800415e:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8004162:	f5a3 749e 	sub.w	r4, r3, #316	; 0x13c
 8004166:	2010      	movs	r0, #16
 8004168:	f006 f96e 	bl	800a448 <malloc>
 800416c:	4603      	mov	r3, r0
 800416e:	6023      	str	r3, [r4, #0]
    nutation = getNutation(Y, abcd, julianEphemerisCentury, x0, x1, x2, x3, x4);
 8004170:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8004174:	f5a3 749e 	sub.w	r4, r3, #316	; 0x13c
 8004178:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800417c:	469c      	mov	ip, r3
 800417e:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 8004182:	461e      	mov	r6, r3
 8004184:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 8004188:	461d      	mov	r5, r3
 800418a:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 800418e:	4618      	mov	r0, r3
 8004190:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 8004194:	4619      	mov	r1, r3
 8004196:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800419a:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800419e:	ed1c 5b02 	vldr	d5, [ip, #-8]
 80041a2:	ed96 4b00 	vldr	d4, [r6]
 80041a6:	ed15 3b02 	vldr	d3, [r5, #-8]
 80041aa:	ed90 2b00 	vldr	d2, [r0]
 80041ae:	ed11 1b02 	vldr	d1, [r1, #-8]
 80041b2:	f507 616b 	add.w	r1, r7, #3760	; 0xeb0
 80041b6:	ed91 0b00 	vldr	d0, [r1]
 80041ba:	4611      	mov	r1, r2
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fe fa7b 	bl	80026b8 <getNutation>
 80041c2:	6020      	str	r0, [r4, #0]
    double nutation_longitude = nutation[0];
 80041c4:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 80041c8:	4619      	mov	r1, r3
 80041ca:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 80041ce:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d8:	e941 2302 	strd	r2, r3, [r1, #-8]
    double nutation_obliquity = nutation[1];
 80041dc:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 80041e0:	4619      	mov	r1, r3
 80041e2:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 80041e6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80041f0:	e9c1 2300 	strd	r2, r3, [r1]
    /*
    printf("Nutation Longitude = %lf\n", nutation_longitude);
    printf("Nutation Obliquity = %lf\n", nutation_obliquity);
    */

    double mean_obliquity = getMeanObliquity(julianEphemerisMillenium / 10);
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	4bbe      	ldr	r3, [pc, #760]	; (80044f4 <caller+0x83c>)
 80041fa:	f607 61a8 	addw	r1, r7, #3752	; 0xea8
 80041fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004202:	f7fc fb2b 	bl	800085c <__aeabi_ddiv>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	ec43 2b17 	vmov	d7, r2, r3
 800420e:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 8004212:	461c      	mov	r4, r3
 8004214:	eeb0 0a47 	vmov.f32	s0, s14
 8004218:	eef0 0a67 	vmov.f32	s1, s15
 800421c:	f7fe fb8c 	bl	8002938 <getMeanObliquity>
 8004220:	ed04 0b02 	vstr	d0, [r4, #-8]
    double true_obliquity = (mean_obliquity / 3600) + nutation_obliquity;
 8004224:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 8004228:	4619      	mov	r1, r3
 800422a:	a3ad      	add	r3, pc, #692	; (adr r3, 80044e0 <caller+0x828>)
 800422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004230:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8004234:	f7fc fb12 	bl	800085c <__aeabi_ddiv>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	f507 6159 	add.w	r1, r7, #3472	; 0xd90
 8004240:	460c      	mov	r4, r1
 8004242:	f507 615a 	add.w	r1, r7, #3488	; 0xda0
 8004246:	e9d1 0100 	ldrd	r0, r1, [r1]
 800424a:	f7fc f827 	bl	800029c <__adddf3>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	e9c4 2300 	strd	r2, r3, [r4]

    // printf("True Obliquity = %lf\n", true_obliquity);

    double aberration_correction = 20.4898 / (3600 * earth_radiusVector);
 8004256:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800425a:	4619      	mov	r1, r3
 800425c:	a3a0      	add	r3, pc, #640	; (adr r3, 80044e0 <caller+0x828>)
 800425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004262:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004266:	f7fc f9cf 	bl	8000608 <__aeabi_dmul>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	f507 6159 	add.w	r1, r7, #3472	; 0xd90
 8004272:	460c      	mov	r4, r1
 8004274:	a19c      	add	r1, pc, #624	; (adr r1, 80044e8 <caller+0x830>)
 8004276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800427a:	f7fc faef 	bl	800085c <__aeabi_ddiv>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	e944 2302 	strd	r2, r3, [r4, #-8]
    double apparent_sun_longitude = geocentric_longitude + nutation_longitude + aberration_correction;
 8004286:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800428a:	4619      	mov	r1, r3
 800428c:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 8004290:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004294:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8004298:	f7fc f800 	bl	800029c <__adddf3>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	f507 6158 	add.w	r1, r7, #3456	; 0xd80
 80042a4:	460c      	mov	r4, r1
 80042a6:	f507 6159 	add.w	r1, r7, #3472	; 0xd90
 80042aa:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80042ae:	f7fb fff5 	bl	800029c <__adddf3>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	e9c4 2300 	strd	r2, r3, [r4]

    // printf("Apparent Sun Longitude = %lf\n", apparent_sun_longitude);

    double apparent_siderealTime = getApparentSiderealTime(julianDay, julianCentury, nutation_longitude, true_obliquity);
 80042ba:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 80042be:	461c      	mov	r4, r3
 80042c0:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 80042c4:	461a      	mov	r2, r3
 80042c6:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 80042ca:	ed92 3b00 	vldr	d3, [r2]
 80042ce:	ed13 2b02 	vldr	d2, [r3, #-8]
 80042d2:	f607 63b8 	addw	r3, r7, #3768	; 0xeb8
 80042d6:	ed93 1b00 	vldr	d1, [r3]
 80042da:	f607 63c8 	addw	r3, r7, #3784	; 0xec8
 80042de:	ed93 0b00 	vldr	d0, [r3]
 80042e2:	f7fe fc6d 	bl	8002bc0 <getApparentSiderealTime>
 80042e6:	ed04 0b02 	vstr	d0, [r4, #-8]
    double sun_right_ascension = getSunRightAscension(apparent_sun_longitude, true_obliquity, geocentric_latitude);
 80042ea:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 80042ee:	461c      	mov	r4, r3
 80042f0:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 80042f4:	4619      	mov	r1, r3
 80042f6:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 80042fa:	461a      	mov	r2, r3
 80042fc:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 8004300:	ed91 2b00 	vldr	d2, [r1]
 8004304:	ed92 1b00 	vldr	d1, [r2]
 8004308:	ed93 0b00 	vldr	d0, [r3]
 800430c:	f7fe fd48 	bl	8002da0 <getSunRightAscension>
 8004310:	ed84 0b00 	vstr	d0, [r4]
    double sun_declination = getSunDeclination(apparent_sun_longitude, true_obliquity, geocentric_latitude);
 8004314:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 8004318:	461c      	mov	r4, r3
 800431a:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 800431e:	4619      	mov	r1, r3
 8004320:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 8004324:	461a      	mov	r2, r3
 8004326:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800432a:	ed91 2b00 	vldr	d2, [r1]
 800432e:	ed92 1b00 	vldr	d1, [r2]
 8004332:	ed93 0b00 	vldr	d0, [r3]
 8004336:	f7fe fe1b 	bl	8002f70 <getSunDeclination>
 800433a:	ed04 0b02 	vstr	d0, [r4, #-8]
    /*
    printf("Geocentric Sun Right Ascension = %lf\n", sun_right_ascension);
    printf("Geocentric Sun Declination = %lf\n", sun_declination);
    */

    double observer_localHour_angle = getObserverLocalHourAngle(apparent_siderealTime, longitude, sun_right_ascension);
 800433e:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8004342:	f6a3 63ec 	subw	r3, r3, #3820	; 0xeec
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	f7fc f906 	bl	8000558 <__aeabi_f2d>
 800434c:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 8004350:	461c      	mov	r4, r3
 8004352:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 8004356:	461a      	mov	r2, r3
 8004358:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800435c:	ed92 2b00 	vldr	d2, [r2]
 8004360:	ec41 0b11 	vmov	d1, r0, r1
 8004364:	ed13 0b02 	vldr	d0, [r3, #-8]
 8004368:	f7fe fe9c 	bl	80030a4 <getObserverLocalHourAngle>
 800436c:	ed84 0b00 	vstr	d0, [r4]

    // printf("Observer Local Hour Angle = %lf\n", observer_localHour_angle);

    double equatorial_horizontal_parallax = getEquatorialHorizontalParallax(earth_radiusVector);
 8004370:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 8004374:	461c      	mov	r4, r3
 8004376:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800437a:	ed93 0b00 	vldr	d0, [r3]
 800437e:	f7fe ff03 	bl	8003188 <getEquatorialHorizontalParallax>
 8004382:	ed04 0b02 	vstr	d0, [r4, #-8]
    double u = helper_getU(latitude);
 8004386:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800438a:	f6a3 63e8 	subw	r3, r3, #3816	; 0xee8
 800438e:	6818      	ldr	r0, [r3, #0]
 8004390:	f7fc f8e2 	bl	8000558 <__aeabi_f2d>
 8004394:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8004398:	461c      	mov	r4, r3
 800439a:	ec41 0b10 	vmov	d0, r0, r1
 800439e:	f7fe ff1f 	bl	80031e0 <helper_getU>
 80043a2:	ed84 0b00 	vstr	d0, [r4]
    double x = helper_getX(u, elevation, latitude);
 80043a6:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 80043aa:	f6a3 63e8 	subw	r3, r3, #3816	; 0xee8
 80043ae:	6818      	ldr	r0, [r3, #0]
 80043b0:	f7fc f8d2 	bl	8000558 <__aeabi_f2d>
 80043b4:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 80043b8:	461c      	mov	r4, r3
 80043ba:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 80043be:	ec41 0b12 	vmov	d2, r0, r1
 80043c2:	f607 62e8 	addw	r2, r7, #3816	; 0xee8
 80043c6:	ed92 1b00 	vldr	d1, [r2]
 80043ca:	ed93 0b00 	vldr	d0, [r3]
 80043ce:	f7fe ff33 	bl	8003238 <helper_getX>
 80043d2:	ed04 0b02 	vstr	d0, [r4, #-8]
    double y = helper_getY(u, elevation, latitude);
 80043d6:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 80043da:	f6a3 63e8 	subw	r3, r3, #3816	; 0xee8
 80043de:	6818      	ldr	r0, [r3, #0]
 80043e0:	f7fc f8ba 	bl	8000558 <__aeabi_f2d>
 80043e4:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 80043e8:	461c      	mov	r4, r3
 80043ea:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 80043ee:	ec41 0b12 	vmov	d2, r0, r1
 80043f2:	f607 62e8 	addw	r2, r7, #3816	; 0xee8
 80043f6:	ed92 1b00 	vldr	d1, [r2]
 80043fa:	ed93 0b00 	vldr	d0, [r3]
 80043fe:	f7fe ff77 	bl	80032f0 <helper_getY>
 8004402:	ed84 0b00 	vstr	d0, [r4]
    double parallax_sunright_ascension = getParallax_SunRightAscension(x, equatorial_horizontal_parallax, observer_localHour_angle, sun_declination);
 8004406:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800440a:	461c      	mov	r4, r3
 800440c:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 8004410:	4618      	mov	r0, r3
 8004412:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 8004416:	4619      	mov	r1, r3
 8004418:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800441c:	461a      	mov	r2, r3
 800441e:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8004422:	ed10 3b02 	vldr	d3, [r0, #-8]
 8004426:	ed91 2b00 	vldr	d2, [r1]
 800442a:	ed12 1b02 	vldr	d1, [r2, #-8]
 800442e:	ed13 0b02 	vldr	d0, [r3, #-8]
 8004432:	f7fe ffc5 	bl	80033c0 <getParallax_SunRightAscension>
 8004436:	ed04 0b02 	vstr	d0, [r4, #-8]
    double topocentric_sunright_ascension = getTopocentricSunRightAscension(sun_right_ascension, parallax_sunright_ascension);
 800443a:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800443e:	461c      	mov	r4, r3
 8004440:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 8004444:	461a      	mov	r2, r3
 8004446:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800444a:	ed12 1b02 	vldr	d1, [r2, #-8]
 800444e:	ed93 0b00 	vldr	d0, [r3]
 8004452:	f7ff f867 	bl	8003524 <getTopocentricSunRightAscension>
 8004456:	ed84 0b00 	vstr	d0, [r4]
    double topcentric_sun_declination = getTopocentricSunDeclination(sun_declination, y, x, equatorial_horizontal_parallax, parallax_sunright_ascension, observer_localHour_angle);
 800445a:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800445e:	461c      	mov	r4, r3
 8004460:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 8004464:	461e      	mov	r6, r3
 8004466:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800446a:	461d      	mov	r5, r3
 800446c:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 8004470:	4618      	mov	r0, r3
 8004472:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8004476:	4619      	mov	r1, r3
 8004478:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800447c:	461a      	mov	r2, r3
 800447e:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 8004482:	ed96 5b00 	vldr	d5, [r6]
 8004486:	ed15 4b02 	vldr	d4, [r5, #-8]
 800448a:	ed10 3b02 	vldr	d3, [r0, #-8]
 800448e:	ed11 2b02 	vldr	d2, [r1, #-8]
 8004492:	ed92 1b00 	vldr	d1, [r2]
 8004496:	ed13 0b02 	vldr	d0, [r3, #-8]
 800449a:	f7ff f861 	bl	8003560 <getTopocentricSunDeclination>
 800449e:	ed04 0b02 	vstr	d0, [r4, #-8]
    double topocentric_local_hour_angle = getTopocentricLocalHourAngle(observer_localHour_angle, parallax_sunright_ascension);
 80044a2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80044a6:	461c      	mov	r4, r3
 80044a8:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 80044ac:	461a      	mov	r2, r3
 80044ae:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 80044b2:	ed12 1b02 	vldr	d1, [r2, #-8]
 80044b6:	ed93 0b00 	vldr	d0, [r3]
 80044ba:	f7ff f927 	bl	800370c <getTopocentricLocalHourAngle>
 80044be:	ed84 0b00 	vstr	d0, [r4]
    printf("Topocentric Sun Right Ascension = %lf\n", topocentric_sunright_ascension);
    printf("Topocentric Sun Declination = %lf\n", topcentric_sun_declination);
    printf("Topocentric Local Hour Angle = %lf\n", topocentric_local_hour_angle);
    */

    double e0 = getIncompleteElevationAngle(latitude, topcentric_sun_declination, topocentric_local_hour_angle);
 80044c2:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 80044c6:	f6a3 63e8 	subw	r3, r3, #3816	; 0xee8
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	f7fc f844 	bl	8000558 <__aeabi_f2d>
 80044d0:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80044d4:	461c      	mov	r4, r3
 80044d6:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80044da:	461a      	mov	r2, r3
 80044dc:	e00c      	b.n	80044f8 <caller+0x840>
 80044de:	bf00      	nop
 80044e0:	00000000 	.word	0x00000000
 80044e4:	40ac2000 	.word	0x40ac2000
 80044e8:	886594af 	.word	0x886594af
 80044ec:	40347d63 	.word	0x40347d63
 80044f0:	080104d0 	.word	0x080104d0
 80044f4:	40240000 	.word	0x40240000
 80044f8:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80044fc:	ed92 2b00 	vldr	d2, [r2]
 8004500:	ed13 1b02 	vldr	d1, [r3, #-8]
 8004504:	ec41 0b10 	vmov	d0, r0, r1
 8004508:	f7ff f91e 	bl	8003748 <getIncompleteElevationAngle>
 800450c:	ed04 0b02 	vstr	d0, [r4, #-8]
    double delta_e = getAtmosphericRefractionCorrection(pressure, temperature, e0);
 8004510:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8004514:	461c      	mov	r4, r3
 8004516:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800451a:	ed13 2b02 	vldr	d2, [r3, #-8]
 800451e:	f607 63d8 	addw	r3, r7, #3800	; 0xed8
 8004522:	ed93 1b00 	vldr	d1, [r3]
 8004526:	f507 636e 	add.w	r3, r7, #3808	; 0xee0
 800452a:	ed93 0b00 	vldr	d0, [r3]
 800452e:	f7ff f9a7 	bl	8003880 <getAtmosphericRefractionCorrection>
 8004532:	ed84 0b00 	vstr	d0, [r4]
    double topocentric_elevation_angle = getTopocentricElevationAngle(e0, delta_e);
 8004536:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800453a:	461c      	mov	r4, r3
 800453c:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8004540:	461a      	mov	r2, r3
 8004542:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8004546:	ed92 1b00 	vldr	d1, [r2]
 800454a:	ed13 0b02 	vldr	d0, [r3, #-8]
 800454e:	f7ff fa45 	bl	80039dc <getTopocentricElevationAngle>
 8004552:	ed04 0b02 	vstr	d0, [r4, #-8]
    double topocentric_zenith_angle = getTopocentricZenithAngle(topocentric_elevation_angle);
 8004556:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 800455a:	461c      	mov	r4, r3
 800455c:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8004560:	ed13 0b02 	vldr	d0, [r3, #-8]
 8004564:	f7ff fa56 	bl	8003a14 <getTopocentricZenithAngle>
 8004568:	ed84 0b00 	vstr	d0, [r4]

    // printf("Topocentric Zenith Angle = %lf\n", topocentric_zenith_angle);

    double topocentric_azimuth_angle = getTopocentricAzimuthAngle(topocentric_local_hour_angle, latitude, topcentric_sun_declination);
 800456c:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8004570:	f6a3 63e8 	subw	r3, r3, #3816	; 0xee8
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	f7fb ffef 	bl	8000558 <__aeabi_f2d>
 800457a:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 800457e:	461c      	mov	r4, r3
 8004580:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8004584:	461a      	mov	r2, r3
 8004586:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800458a:	ed12 2b02 	vldr	d2, [r2, #-8]
 800458e:	ec41 0b11 	vmov	d1, r0, r1
 8004592:	ed93 0b00 	vldr	d0, [r3]
 8004596:	f7ff fa5b 	bl	8003a50 <getTopocentricAzimuthAngle>
 800459a:	ed04 0b02 	vstr	d0, [r4, #-8]

    // printf("Topocentric Azimuth Angle = %lf\n", topocentric_azimuth_angle);

    double *angles = malloc(2 * sizeof(double));
 800459e:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 80045a2:	f5a3 74fe 	sub.w	r4, r3, #508	; 0x1fc
 80045a6:	2010      	movs	r0, #16
 80045a8:	f005 ff4e 	bl	800a448 <malloc>
 80045ac:	4603      	mov	r3, r0
 80045ae:	6023      	str	r3, [r4, #0]
    angles[0] = topocentric_zenith_angle;
 80045b0:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 80045b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045b8:	6819      	ldr	r1, [r3, #0]
 80045ba:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 80045be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c2:	e9c1 2300 	strd	r2, r3, [r1]
    angles[1] = topocentric_azimuth_angle;
 80045c6:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 80045ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f103 0108 	add.w	r1, r3, #8
 80045d4:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 80045d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80045dc:	e9c1 2300 	strd	r2, r3, [r1]

    return angles;
 80045e0:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 80045e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045e8:	681b      	ldr	r3, [r3, #0]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	f607 67f4 	addw	r7, r7, #3828	; 0xef4
 80045f0:	46bd      	mov	sp, r7
 80045f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045f6:	bf00      	nop

080045f8 <main>:
float stepAngle = 1.8;
int gearRatio = 40;
///////////////////////////////////

int main(void)
{
 80045f8:	b590      	push	{r4, r7, lr}
 80045fa:	b09d      	sub	sp, #116	; 0x74
 80045fc:	af02      	add	r7, sp, #8
	HAL_Init();
 80045fe:	f002 f927 	bl	8006850 <HAL_Init>

	SystemClock_Config();
 8004602:	f001 fc15 	bl	8005e30 <SystemClock_Config>

	MX_GPIO_Init();
 8004606:	f001 fda3 	bl	8006150 <MX_GPIO_Init>
	MX_ADC1_Init();
 800460a:	f001 fc79 	bl	8005f00 <MX_ADC1_Init>
	MX_I2C1_Init();
 800460e:	f001 fcc9 	bl	8005fa4 <MX_I2C1_Init>
	MX_I2C3_Init();
 8004612:	f001 fcf5 	bl	8006000 <MX_I2C3_Init>
	MX_TIM1_Init();
 8004616:	f001 fd21 	bl	800605c <MX_TIM1_Init>
	MX_USART1_UART_Init();
 800461a:	f001 fd6f 	bl	80060fc <MX_USART1_UART_Init>


	///////////////////////////////////////////////////////////////
	//GPS
	float lat = -1;
 800461e:	4bb0      	ldr	r3, [pc, #704]	; (80048e0 <main+0x2e8>)
 8004620:	61fb      	str	r3, [r7, #28]
	float longi = -1;
 8004622:	4baf      	ldr	r3, [pc, #700]	; (80048e0 <main+0x2e8>)
 8004624:	61bb      	str	r3, [r7, #24]
	int date = -1;
 8004626:	f04f 33ff 	mov.w	r3, #4294967295
 800462a:	617b      	str	r3, [r7, #20]
	char longiDir = 'x';
 800462c:	2378      	movs	r3, #120	; 0x78
 800462e:	74fb      	strb	r3, [r7, #19]
	char latDir = 'x';
 8004630:	2378      	movs	r3, #120	; 0x78
 8004632:	74bb      	strb	r3, [r7, #18]
	int time = -1;
 8004634:	f04f 33ff 	mov.w	r3, #4294967295
 8004638:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 50; i++) {
 800463a:	2300      	movs	r3, #0
 800463c:	667b      	str	r3, [r7, #100]	; 0x64
 800463e:	e013      	b.n	8004668 <main+0x70>
	 getGpsData(&lat, &longi, &time, &date, &longiDir, &latDir);
 8004640:	f107 0414 	add.w	r4, r7, #20
 8004644:	f107 020c 	add.w	r2, r7, #12
 8004648:	f107 0118 	add.w	r1, r7, #24
 800464c:	f107 001c 	add.w	r0, r7, #28
 8004650:	f107 0312 	add.w	r3, r7, #18
 8004654:	9301      	str	r3, [sp, #4]
 8004656:	f107 0313 	add.w	r3, r7, #19
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	4623      	mov	r3, r4
 800465e:	f000 fda9 	bl	80051b4 <getGpsData>
	for (int i = 0; i < 50; i++) {
 8004662:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004664:	3301      	adds	r3, #1
 8004666:	667b      	str	r3, [r7, #100]	; 0x64
 8004668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800466a:	2b31      	cmp	r3, #49	; 0x31
 800466c:	dde8      	ble.n	8004640 <main+0x48>
	}

	//////////////////////////////////////////////////////////////
	//LIGHT SENSOR
	setupLightSensor(lightAddressGND);
 800466e:	4b9d      	ldr	r3, [pc, #628]	; (80048e4 <main+0x2ec>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f000 fc8e 	bl	8004f94 <setupLightSensor>
	setupLightSensor(lightAddressVDD);
 8004678:	4b9b      	ldr	r3, [pc, #620]	; (80048e8 <main+0x2f0>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f000 fc89 	bl	8004f94 <setupLightSensor>
	setupLightSensor(lightAddressSDA);
 8004682:	4b9a      	ldr	r3, [pc, #616]	; (80048ec <main+0x2f4>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fc84 	bl	8004f94 <setupLightSensor>
	setupLightSensor(lightAddressSCL);
 800468c:	4b98      	ldr	r3, [pc, #608]	; (80048f0 <main+0x2f8>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	4618      	mov	r0, r3
 8004692:	f000 fc7f 	bl	8004f94 <setupLightSensor>

	//////////////////////////////////////////////////////////////
	//SOLAR PANEL VOLTAGE
	float solarPanelVoltage = 0;
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	64fb      	str	r3, [r7, #76]	; 0x4c

	//////////////////////////////////////////////////////////////
	//MOTOR CONTROL
	HAL_TIM_Base_Start(&htim1);
 800469c:	4895      	ldr	r0, [pc, #596]	; (80048f4 <main+0x2fc>)
 800469e:	f004 fcc9 	bl	8009034 <HAL_TIM_Base_Start>
	///////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////
	//If no valid data -> gamer Mode On
	if (lat == '-1' || longi == '-1' || time == '-1' || date == '-1' ||
 80046a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80046a6:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80048f8 <main+0x300>
 80046aa:	eef4 7a47 	vcmp.f32	s15, s14
 80046ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b2:	d018      	beq.n	80046e6 <main+0xee>
 80046b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80046b8:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80048f8 <main+0x300>
 80046bc:	eef4 7a47 	vcmp.f32	s15, s14
 80046c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c4:	d00f      	beq.n	80046e6 <main+0xee>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f642 5231 	movw	r2, #11569	; 0x2d31
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00a      	beq.n	80046e6 <main+0xee>
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f642 5231 	movw	r2, #11569	; 0x2d31
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d005      	beq.n	80046e6 <main+0xee>
	    longiDir == 'x' || latDir == 'x') {
 80046da:	7cfb      	ldrb	r3, [r7, #19]
	if (lat == '-1' || longi == '-1' || time == '-1' || date == '-1' ||
 80046dc:	2b78      	cmp	r3, #120	; 0x78
 80046de:	d002      	beq.n	80046e6 <main+0xee>
	    longiDir == 'x' || latDir == 'x') {
 80046e0:	7cbb      	ldrb	r3, [r7, #18]
 80046e2:	2b78      	cmp	r3, #120	; 0x78
 80046e4:	d101      	bne.n	80046ea <main+0xf2>
		lightFollowOnlyMode();
 80046e6:	f000 f9bf 	bl	8004a68 <lightFollowOnlyMode>

	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	//MAGNETOMETER
	float xCal, yCal, zCal;
	xCal = 0;
 80046ea:	f04f 0300 	mov.w	r3, #0
 80046ee:	60bb      	str	r3, [r7, #8]
	yCal = 0;
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	607b      	str	r3, [r7, #4]
	zCal = 0;
 80046f6:	f04f 0300 	mov.w	r3, #0
 80046fa:	603b      	str	r3, [r7, #0]
	//TODO: calibration needs to incorporate susan rotation
	setupMag();
 80046fc:	f001 f8c6 	bl	800588c <setupMag>
	hardIronCal(&xCal, &yCal, &zCal);
 8004700:	463a      	mov	r2, r7
 8004702:	1d39      	adds	r1, r7, #4
 8004704:	f107 0308 	add.w	r3, r7, #8
 8004708:	4618      	mov	r0, r3
 800470a:	f001 f9f1 	bl	8005af0 <hardIronCal>

	//Direction Angle
	float direction = magnetometerData(xCal, yCal, zCal);
 800470e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004712:	ed97 7a01 	vldr	s14, [r7, #4]
 8004716:	edd7 6a00 	vldr	s13, [r7]
 800471a:	eeb0 1a66 	vmov.f32	s2, s13
 800471e:	eef0 0a47 	vmov.f32	s1, s14
 8004722:	eeb0 0a67 	vmov.f32	s0, s15
 8004726:	f001 f859 	bl	80057dc <magnetometerData>
 800472a:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

	//Finding Azimuth and Zenith Angles for initialization
	//TODO: incorporate solar algorithm here to calculate azimuth and zenith angles
	float sec = time % 100;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a72      	ldr	r2, [pc, #456]	; (80048fc <main+0x304>)
 8004732:	fb82 1203 	smull	r1, r2, r2, r3
 8004736:	1151      	asrs	r1, r2, #5
 8004738:	17da      	asrs	r2, r3, #31
 800473a:	1a8a      	subs	r2, r1, r2
 800473c:	2164      	movs	r1, #100	; 0x64
 800473e:	fb01 f202 	mul.w	r2, r1, r2
 8004742:	1a9a      	subs	r2, r3, r2
 8004744:	ee07 2a90 	vmov	s15, r2
 8004748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800474c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	time /= 100;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4a6a      	ldr	r2, [pc, #424]	; (80048fc <main+0x304>)
 8004754:	fb82 1203 	smull	r1, r2, r2, r3
 8004758:	1152      	asrs	r2, r2, #5
 800475a:	17db      	asrs	r3, r3, #31
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	60fb      	str	r3, [r7, #12]
	float min = time % 100;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4a66      	ldr	r2, [pc, #408]	; (80048fc <main+0x304>)
 8004764:	fb82 1203 	smull	r1, r2, r2, r3
 8004768:	1151      	asrs	r1, r2, #5
 800476a:	17da      	asrs	r2, r3, #31
 800476c:	1a8a      	subs	r2, r1, r2
 800476e:	2164      	movs	r1, #100	; 0x64
 8004770:	fb01 f202 	mul.w	r2, r1, r2
 8004774:	1a9a      	subs	r2, r3, r2
 8004776:	ee07 2a90 	vmov	s15, r2
 800477a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800477e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	time /= 100;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4a5d      	ldr	r2, [pc, #372]	; (80048fc <main+0x304>)
 8004786:	fb82 1203 	smull	r1, r2, r2, r3
 800478a:	1152      	asrs	r2, r2, #5
 800478c:	17db      	asrs	r3, r3, #31
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	60fb      	str	r3, [r7, #12]
    float hour = time % 100;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4a59      	ldr	r2, [pc, #356]	; (80048fc <main+0x304>)
 8004796:	fb82 1203 	smull	r1, r2, r2, r3
 800479a:	1151      	asrs	r1, r2, #5
 800479c:	17da      	asrs	r2, r3, #31
 800479e:	1a8a      	subs	r2, r1, r2
 80047a0:	2164      	movs	r1, #100	; 0x64
 80047a2:	fb01 f202 	mul.w	r2, r1, r2
 80047a6:	1a9a      	subs	r2, r3, r2
 80047a8:	ee07 2a90 	vmov	s15, r2
 80047ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047b0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    float year = (date % 100) + 2000;
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4b51      	ldr	r3, [pc, #324]	; (80048fc <main+0x304>)
 80047b8:	fb83 1302 	smull	r1, r3, r3, r2
 80047bc:	1159      	asrs	r1, r3, #5
 80047be:	17d3      	asrs	r3, r2, #31
 80047c0:	1acb      	subs	r3, r1, r3
 80047c2:	2164      	movs	r1, #100	; 0x64
 80047c4:	fb01 f303 	mul.w	r3, r1, r3
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80047ce:	ee07 3a90 	vmov	s15, r3
 80047d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047d6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    date /= 100;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	4a47      	ldr	r2, [pc, #284]	; (80048fc <main+0x304>)
 80047de:	fb82 1203 	smull	r1, r2, r2, r3
 80047e2:	1152      	asrs	r2, r2, #5
 80047e4:	17db      	asrs	r3, r3, #31
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	617b      	str	r3, [r7, #20]
    float month = date % 100;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	4a43      	ldr	r2, [pc, #268]	; (80048fc <main+0x304>)
 80047ee:	fb82 1203 	smull	r1, r2, r2, r3
 80047f2:	1151      	asrs	r1, r2, #5
 80047f4:	17da      	asrs	r2, r3, #31
 80047f6:	1a8a      	subs	r2, r1, r2
 80047f8:	2164      	movs	r1, #100	; 0x64
 80047fa:	fb01 f202 	mul.w	r2, r1, r2
 80047fe:	1a9a      	subs	r2, r3, r2
 8004800:	ee07 2a90 	vmov	s15, r2
 8004804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004808:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    date /= 100;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	4a3b      	ldr	r2, [pc, #236]	; (80048fc <main+0x304>)
 8004810:	fb82 1203 	smull	r1, r2, r2, r3
 8004814:	1152      	asrs	r2, r2, #5
 8004816:	17db      	asrs	r3, r3, #31
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	617b      	str	r3, [r7, #20]
    float day = date % 100;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	4a37      	ldr	r2, [pc, #220]	; (80048fc <main+0x304>)
 8004820:	fb82 1203 	smull	r1, r2, r2, r3
 8004824:	1151      	asrs	r1, r2, #5
 8004826:	17da      	asrs	r2, r3, #31
 8004828:	1a8a      	subs	r2, r1, r2
 800482a:	2164      	movs	r1, #100	; 0x64
 800482c:	fb01 f202 	mul.w	r2, r1, r2
 8004830:	1a9a      	subs	r2, r3, r2
 8004832:	ee07 2a90 	vmov	s15, r2
 8004836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800483a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	double *angles = caller(day, year, month, hour, min, sec, 0, lat, longi);
 800483e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004842:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8004846:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800484a:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 800484e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004852:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 8004856:	edd7 7a07 	vldr	s15, [r7, #28]
 800485a:	ed97 7a06 	vldr	s14, [r7, #24]
 800485e:	eef0 2a47 	vmov.f32	s5, s14
 8004862:	eeb0 2a67 	vmov.f32	s4, s15
 8004866:	eddf 1a26 	vldr	s3, [pc, #152]	; 8004900 <main+0x308>
 800486a:	ed97 1a11 	vldr	s2, [r7, #68]	; 0x44
 800486e:	edd7 0a10 	vldr	s1, [r7, #64]	; 0x40
 8004872:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8004876:	ee15 2a90 	vmov	r2, s11
 800487a:	ee16 1a10 	vmov	r1, s12
 800487e:	ee16 0a90 	vmov	r0, s13
 8004882:	f7ff fa19 	bl	8003cb8 <caller>
 8004886:	62f8      	str	r0, [r7, #44]	; 0x2c
	float zenithAngle = angles[0];
 8004888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488e:	4610      	mov	r0, r2
 8004890:	4619      	mov	r1, r3
 8004892:	f7fc f991 	bl	8000bb8 <__aeabi_d2f>
 8004896:	4603      	mov	r3, r0
 8004898:	62bb      	str	r3, [r7, #40]	; 0x28
	float azimuthAngle = angles[1];
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	3308      	adds	r3, #8
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	4610      	mov	r0, r2
 80048a4:	4619      	mov	r1, r3
 80048a6:	f7fc f987 	bl	8000bb8 <__aeabi_d2f>
 80048aa:	4603      	mov	r3, r0
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24

	//Rotate to match azimuth angle
	//TODO:write code to change direction based on it being positive or negative
	float rotationSusanAngle = azimuthAngle - direction;
 80048ae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80048b2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80048b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048ba:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	if (rotationSusanAngle < 0) {
 80048be:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80048c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ca:	d51b      	bpl.n	8004904 <main+0x30c>
		setCounterClockwiseSusan();
 80048cc:	f000 fb00 	bl	8004ed0 <setCounterClockwiseSusan>
		rotationSusanAngle *= -1;
 80048d0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80048d4:	eef1 7a67 	vneg.f32	s15, s15
 80048d8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 80048dc:	e014      	b.n	8004908 <main+0x310>
 80048de:	bf00      	nop
 80048e0:	bf800000 	.word	0xbf800000
 80048e4:	2000000a 	.word	0x2000000a
 80048e8:	2000000b 	.word	0x2000000b
 80048ec:	2000000c 	.word	0x2000000c
 80048f0:	2000000d 	.word	0x2000000d
 80048f4:	2000155c 	.word	0x2000155c
 80048f8:	4634c400 	.word	0x4634c400
 80048fc:	51eb851f 	.word	0x51eb851f
 8004900:	00000000 	.word	0x00000000
	}
	else {
		setClockwiseSusan();
 8004904:	f000 facc 	bl	8004ea0 <setClockwiseSusan>
	}
	rotateMotorSusan(rotationSusanAngle * gearRatio);
 8004908:	4b53      	ldr	r3, [pc, #332]	; (8004a58 <main+0x460>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	ee07 3a90 	vmov	s15, r3
 8004910:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004914:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491c:	eeb0 0a67 	vmov.f32	s0, s15
 8004920:	f000 fa76 	bl	8004e10 <rotateMotorSusan>

	//TODO: figure out the necessary direction to set here
	//Have always the same initial state
	float currentPosition = 90;
 8004924:	4b4d      	ldr	r3, [pc, #308]	; (8004a5c <main+0x464>)
 8004926:	65fb      	str	r3, [r7, #92]	; 0x5c
	float newPosition = currentPosition - zenithAngle;
 8004928:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800492c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004930:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004934:	edc7 7a08 	vstr	s15, [r7, #32]
	rotateMotorRod(newPosition * gearRatio); //multiply by t10 due to gear ratio
 8004938:	4b47      	ldr	r3, [pc, #284]	; (8004a58 <main+0x460>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	ee07 3a90 	vmov	s15, r3
 8004940:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004944:	edd7 7a08 	vldr	s15, [r7, #32]
 8004948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494c:	eeb0 0a67 	vmov.f32	s0, s15
 8004950:	f000 fa20 	bl	8004d94 <rotateMotorRod>
	setCounterClockwiseRod(); //up
 8004954:	f000 fab0 	bl	8004eb8 <setCounterClockwiseRod>

	int counter = 0;
 8004958:	2300      	movs	r3, #0
 800495a:	65bb      	str	r3, [r7, #88]	; 0x58
	while (1)
	{
		//Adjust every 5 minutes
		if ((HAL_GetTick() - counter) > 300000) {
 800495c:	f001 ffde 	bl	800691c <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	4a3e      	ldr	r2, [pc, #248]	; (8004a60 <main+0x468>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d9f7      	bls.n	800495c <main+0x364>
			//Azimuth Angle Change
			//TODO:write code to change direction based on it being positive or negative
			//TODO: recalculate azimuth angle
			direction = magnetometerData(xCal, yCal, zCal);
 800496c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004970:	ed97 7a01 	vldr	s14, [r7, #4]
 8004974:	edd7 6a00 	vldr	s13, [r7]
 8004978:	eeb0 1a66 	vmov.f32	s2, s13
 800497c:	eef0 0a47 	vmov.f32	s1, s14
 8004980:	eeb0 0a67 	vmov.f32	s0, s15
 8004984:	f000 ff2a 	bl	80057dc <magnetometerData>
 8004988:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
			azimuthAngle = 0;
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	627b      	str	r3, [r7, #36]	; 0x24

			float rotationSusanAngle = azimuthAngle - direction;
 8004992:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004996:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800499a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800499e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
			if (rotationSusanAngle < 0) {
 80049a2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80049a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ae:	d508      	bpl.n	80049c2 <main+0x3ca>
				setCounterClockwiseSusan();
 80049b0:	f000 fa8e 	bl	8004ed0 <setCounterClockwiseSusan>
				rotationSusanAngle *= -1;
 80049b4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80049b8:	eef1 7a67 	vneg.f32	s15, s15
 80049bc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 80049c0:	e001      	b.n	80049c6 <main+0x3ce>
			}
			else {
				setClockwiseSusan();
 80049c2:	f000 fa6d 	bl	8004ea0 <setClockwiseSusan>
			}
			rotateMotorSusan(rotationSusanAngle * gearRatio);
 80049c6:	4b24      	ldr	r3, [pc, #144]	; (8004a58 <main+0x460>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049d2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80049d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049da:	eeb0 0a67 	vmov.f32	s0, s15
 80049de:	f000 fa17 	bl	8004e10 <rotateMotorSusan>


			//Zenith Angle Change
			//TODO: figure out the necessary direction to set here
			//TODO: recalculate zenith angle here
			zenithAngle = 0;
 80049e2:	f04f 0300 	mov.w	r3, #0
 80049e6:	62bb      	str	r3, [r7, #40]	; 0x28
			newPosition = 90 - zenithAngle;
 80049e8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004a64 <main+0x46c>
 80049ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80049f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049f4:	edc7 7a08 	vstr	s15, [r7, #32]
			//TODO: Find the difference between current position and new position
			float rotationRodAngle = currentPosition - newPosition;
 80049f8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80049fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8004a00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a04:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
			if (rotationRodAngle < 0) {
 8004a08:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004a0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a14:	d508      	bpl.n	8004a28 <main+0x430>
				setCounterClockwiseRod();
 8004a16:	f000 fa4f 	bl	8004eb8 <setCounterClockwiseRod>
				rotationRodAngle *= -1;
 8004a1a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004a1e:	eef1 7a67 	vneg.f32	s15, s15
 8004a22:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8004a26:	e001      	b.n	8004a2c <main+0x434>
			}
			else {
				setClockwiseRod();
 8004a28:	f000 fa2e 	bl	8004e88 <setClockwiseRod>
			}
			rotateMotorRod(rotationRodAngle * gearRatio);
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <main+0x460>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	ee07 3a90 	vmov	s15, r3
 8004a34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a38:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a40:	eeb0 0a67 	vmov.f32	s0, s15
 8004a44:	f000 f9a6 	bl	8004d94 <rotateMotorRod>
			currentPosition = newPosition;
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	65fb      	str	r3, [r7, #92]	; 0x5c

			counter = HAL_GetTick();
 8004a4c:	f001 ff66 	bl	800691c <HAL_GetTick>
 8004a50:	4603      	mov	r3, r0
 8004a52:	65bb      	str	r3, [r7, #88]	; 0x58
		if ((HAL_GetTick() - counter) > 300000) {
 8004a54:	e782      	b.n	800495c <main+0x364>
 8004a56:	bf00      	nop
 8004a58:	20000018 	.word	0x20000018
 8004a5c:	42b40000 	.word	0x42b40000
 8004a60:	000493e0 	.word	0x000493e0
 8004a64:	42b40000 	.word	0x42b40000

08004a68 <lightFollowOnlyMode>:
		}
	}
}

void lightFollowOnlyMode() {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
	//Later on, if everything's based on interrupts, we deactivate all interrupts
	int motorCounter = 0;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
	while (1) {
		if ((HAL_GetTick() - motorCounter) > 500) {
 8004a72:	f001 ff53 	bl	800691c <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004a80:	f240 808f 	bls.w	8004ba2 <lightFollowOnlyMode+0x13a>
			HAL_GPIO_WritePin(SMART_PANEL_LED_PORT, SMART_PANEL_LED_PIN, GPIO_PIN_SET);
 8004a84:	2201      	movs	r2, #1
 8004a86:	2180      	movs	r1, #128	; 0x80
 8004a88:	484c      	ldr	r0, [pc, #304]	; (8004bbc <lightFollowOnlyMode+0x154>)
 8004a8a:	f002 fe6d 	bl	8007768 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEBUG_LED_PORT, DEBUG_LED_PIN, GPIO_PIN_RESET);
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a94:	4849      	ldr	r0, [pc, #292]	; (8004bbc <lightFollowOnlyMode+0x154>)
 8004a96:	f002 fe67 	bl	8007768 <HAL_GPIO_WritePin>

			float lightDataVDD = getLightData(lightAddressVDD);
 8004a9a:	4b49      	ldr	r3, [pc, #292]	; (8004bc0 <lightFollowOnlyMode+0x158>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 faa2 	bl	8004fe8 <getLightData>
 8004aa4:	ed87 0a04 	vstr	s0, [r7, #16]
			float lightDataGND = getLightData(lightAddressGND);
 8004aa8:	4b46      	ldr	r3, [pc, #280]	; (8004bc4 <lightFollowOnlyMode+0x15c>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 fa9b 	bl	8004fe8 <getLightData>
 8004ab2:	ed87 0a03 	vstr	s0, [r7, #12]
			//TODO: integrate sda and scl light sensors
			float lightDataSDA = getLightData(lightAddressSDA);
 8004ab6:	4b44      	ldr	r3, [pc, #272]	; (8004bc8 <lightFollowOnlyMode+0x160>)
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fa94 	bl	8004fe8 <getLightData>
 8004ac0:	ed87 0a02 	vstr	s0, [r7, #8]
			float lightDataSCL = getLightData(lightAddressSCL);
 8004ac4:	4b41      	ldr	r3, [pc, #260]	; (8004bcc <lightFollowOnlyMode+0x164>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fa8d 	bl	8004fe8 <getLightData>
 8004ace:	ed87 0a01 	vstr	s0, [r7, #4]

			setupMotorRod();
 8004ad2:	f000 fa23 	bl	8004f1c <setupMotorRod>

			if ((lightDataSDA - lightDataSCL)  > 60) {
 8004ad6:	ed97 7a02 	vldr	s14, [r7, #8]
 8004ada:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ade:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ae2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004bd0 <lightFollowOnlyMode+0x168>
 8004ae6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aee:	dd06      	ble.n	8004afe <lightFollowOnlyMode+0x96>
				setCounterClockwiseRod(); //up
 8004af0:	f000 f9e2 	bl	8004eb8 <setCounterClockwiseRod>
				rotateMotorRod(361);
 8004af4:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8004bd4 <lightFollowOnlyMode+0x16c>
 8004af8:	f000 f94c 	bl	8004d94 <rotateMotorRod>
 8004afc:	e012      	b.n	8004b24 <lightFollowOnlyMode+0xbc>
			}
			else if ((lightDataSCL - lightDataSDA) > 60) {
 8004afe:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b02:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b0a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8004bd0 <lightFollowOnlyMode+0x168>
 8004b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b16:	dd05      	ble.n	8004b24 <lightFollowOnlyMode+0xbc>
				setClockwiseRod(); //down
 8004b18:	f000 f9b6 	bl	8004e88 <setClockwiseRod>
				rotateMotorRod(361);
 8004b1c:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8004bd4 <lightFollowOnlyMode+0x16c>
 8004b20:	f000 f938 	bl	8004d94 <rotateMotorRod>
			}

			turnOffMotorRod();
 8004b24:	f000 fa1e 	bl	8004f64 <turnOffMotorRod>


			//Figuring our rotational movement
			setupMotorSusan();
 8004b28:	f000 fa0c 	bl	8004f44 <setupMotorSusan>

			if ((lightDataVDD - lightDataGND)  > 60) {
 8004b2c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004b30:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b38:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004bd0 <lightFollowOnlyMode+0x168>
 8004b3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b44:	dd06      	ble.n	8004b54 <lightFollowOnlyMode+0xec>
				setCounterClockwiseSusan();
 8004b46:	f000 f9c3 	bl	8004ed0 <setCounterClockwiseSusan>
				rotateMotorSusan(361);
 8004b4a:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8004bd4 <lightFollowOnlyMode+0x16c>
 8004b4e:	f000 f95f 	bl	8004e10 <rotateMotorSusan>
 8004b52:	e012      	b.n	8004b7a <lightFollowOnlyMode+0x112>
			}
			else if ((lightDataGND - lightDataVDD) > 60) {
 8004b54:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b58:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b60:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004bd0 <lightFollowOnlyMode+0x168>
 8004b64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b6c:	dd05      	ble.n	8004b7a <lightFollowOnlyMode+0x112>
				setClockwiseSusan();
 8004b6e:	f000 f997 	bl	8004ea0 <setClockwiseSusan>
				rotateMotorSusan(361);
 8004b72:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8004bd4 <lightFollowOnlyMode+0x16c>
 8004b76:	f000 f94b 	bl	8004e10 <rotateMotorSusan>
			}

			turnOffMotorSusan();
 8004b7a:	f000 f9ff 	bl	8004f7c <turnOffMotorSusan>



//			Voltage measurement and sending
			float solarPanelVoltage = getSolarPanelVoltage();
 8004b7e:	f000 fabf 	bl	8005100 <getSolarPanelVoltage>
 8004b82:	ed87 0a00 	vstr	s0, [r7]
			bluetoothSend(solarPanelVoltage, -1, -1, -1);
 8004b86:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8004b8a:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8004b8e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004b92:	ed97 0a00 	vldr	s0, [r7]
 8004b96:	f000 f81f 	bl	8004bd8 <bluetoothSend>


			motorCounter = HAL_GetTick();
 8004b9a:	f001 febf 	bl	800691c <HAL_GetTick>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	617b      	str	r3, [r7, #20]
		}

		HAL_GPIO_WritePin(SMART_PANEL_LED_PORT, SMART_PANEL_LED_PIN, GPIO_PIN_RESET);
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2180      	movs	r1, #128	; 0x80
 8004ba6:	4805      	ldr	r0, [pc, #20]	; (8004bbc <lightFollowOnlyMode+0x154>)
 8004ba8:	f002 fdde 	bl	8007768 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DEBUG_LED_PORT, DEBUG_LED_PIN, GPIO_PIN_SET);
 8004bac:	2201      	movs	r2, #1
 8004bae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bb2:	4802      	ldr	r0, [pc, #8]	; (8004bbc <lightFollowOnlyMode+0x154>)
 8004bb4:	f002 fdd8 	bl	8007768 <HAL_GPIO_WritePin>
		if ((HAL_GetTick() - motorCounter) > 500) {
 8004bb8:	e75b      	b.n	8004a72 <lightFollowOnlyMode+0xa>
 8004bba:	bf00      	nop
 8004bbc:	40020800 	.word	0x40020800
 8004bc0:	2000000b 	.word	0x2000000b
 8004bc4:	2000000a 	.word	0x2000000a
 8004bc8:	2000000c 	.word	0x2000000c
 8004bcc:	2000000d 	.word	0x2000000d
 8004bd0:	42700000 	.word	0x42700000
 8004bd4:	43b48000 	.word	0x43b48000

08004bd8 <bluetoothSend>:

	}
}

void bluetoothSend(float voltageMeasured, float direction, float lat, float longi) {
 8004bd8:	b590      	push	{r4, r7, lr}
 8004bda:	b0b1      	sub	sp, #196	; 0xc4
 8004bdc:	af06      	add	r7, sp, #24
 8004bde:	ed87 0a03 	vstr	s0, [r7, #12]
 8004be2:	edc7 0a02 	vstr	s1, [r7, #8]
 8004be6:	ed87 1a01 	vstr	s2, [r7, #4]
 8004bea:	edc7 1a00 	vstr	s3, [r7]
	if (direction == -1 || lat == -1 || longi == -1) {
 8004bee:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bf2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004bf6:	eef4 7a47 	vcmp.f32	s15, s14
 8004bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfe:	d011      	beq.n	8004c24 <bluetoothSend+0x4c>
 8004c00:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c04:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004c08:	eef4 7a47 	vcmp.f32	s15, s14
 8004c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c10:	d008      	beq.n	8004c24 <bluetoothSend+0x4c>
 8004c12:	edd7 7a00 	vldr	s15, [r7]
 8004c16:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004c1a:	eef4 7a47 	vcmp.f32	s15, s14
 8004c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c22:	d125      	bne.n	8004c70 <bluetoothSend+0x98>
		char msg[26];
		unsigned int voltageMeasuredDecimal = (voltageMeasured - (int)voltageMeasured) * 10000;
 8004c24:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c30:	ed97 7a03 	vldr	s14, [r7, #12]
 8004c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c38:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8004d80 <bluetoothSend+0x1a8>
 8004c3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c44:	ee17 3a90 	vmov	r3, s15
 8004c48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		sprintf((char*)msg,"Voltage measured: %.4f\r\n", voltageMeasured);
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f7fb fc83 	bl	8000558 <__aeabi_f2d>
 8004c52:	4602      	mov	r2, r0
 8004c54:	460b      	mov	r3, r1
 8004c56:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8004c5a:	494a      	ldr	r1, [pc, #296]	; (8004d84 <bluetoothSend+0x1ac>)
 8004c5c:	f006 fa52 	bl	800b104 <siprintf>

		HAL_UART_Transmit_IT(&huart1,msg, sizeof(msg));
 8004c60:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004c64:	221a      	movs	r2, #26
 8004c66:	4619      	mov	r1, r3
 8004c68:	4847      	ldr	r0, [pc, #284]	; (8004d88 <bluetoothSend+0x1b0>)
 8004c6a:	f004 fcda 	bl	8009622 <HAL_UART_Transmit_IT>
	if (direction == -1 || lat == -1 || longi == -1) {
 8004c6e:	e082      	b.n	8004d76 <bluetoothSend+0x19e>
	}
	else {
		char msg[100];
		unsigned int voltageMeasuredDecimal = (voltageMeasured - (int)voltageMeasured) * 100;
 8004c70:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004c80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c84:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8004d8c <bluetoothSend+0x1b4>
 8004c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c90:	ee17 3a90 	vmov	r3, s15
 8004c94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		unsigned int directionDecimal = (direction - (int)direction) * 100;
 8004c98:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ca4:	ed97 7a02 	vldr	s14, [r7, #8]
 8004ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cac:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8004d8c <bluetoothSend+0x1b4>
 8004cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cb8:	ee17 3a90 	vmov	r3, s15
 8004cbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		unsigned int latDecimal = (lat - (int)lat) * 100;
 8004cc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ccc:	ed97 7a01 	vldr	s14, [r7, #4]
 8004cd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cd4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004d8c <bluetoothSend+0x1b4>
 8004cd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce0:	ee17 3a90 	vmov	r3, s15
 8004ce4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		unsigned int longiDecimal = (longi - (int)longi) * 100;
 8004ce8:	edd7 7a00 	vldr	s15, [r7]
 8004cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cf4:	ed97 7a00 	vldr	s14, [r7]
 8004cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cfc:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004d8c <bluetoothSend+0x1b4>
 8004d00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d08:	ee17 3a90 	vmov	r3, s15
 8004d0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		sprintf((char*)msg,"Voltage measured: %u.%u\r\n | Direction Angle: %u.%u \r\n | Latitude: %u.%u \r\n | Longitude: %u.%u \r\n",
 8004d10:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d14:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8004d18:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d20:	ee17 2a90 	vmov	r2, s15
 8004d24:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d2c:	ee17 1a90 	vmov	r1, s15
 8004d30:	edd7 7a00 	vldr	s15, [r7]
 8004d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d38:	ee17 4a90 	vmov	r4, s15
 8004d3c:	f107 0014 	add.w	r0, r7, #20
 8004d40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d44:	9305      	str	r3, [sp, #20]
 8004d46:	9404      	str	r4, [sp, #16]
 8004d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d4c:	9303      	str	r3, [sp, #12]
 8004d4e:	9102      	str	r1, [sp, #8]
 8004d50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d54:	9301      	str	r3, [sp, #4]
 8004d56:	9200      	str	r2, [sp, #0]
 8004d58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004d5c:	ee17 2a10 	vmov	r2, s14
 8004d60:	490b      	ldr	r1, [pc, #44]	; (8004d90 <bluetoothSend+0x1b8>)
 8004d62:	f006 f9cf 	bl	800b104 <siprintf>
				(unsigned int)voltageMeasured, (unsigned int) voltageMeasuredDecimal,
				(unsigned int)direction, (unsigned int) directionDecimal,
				(unsigned int)lat, (unsigned int) latDecimal,
				(unsigned int)longi, (unsigned int) longiDecimal);

		HAL_UART_Transmit_IT(&huart1,msg, sizeof(msg));
 8004d66:	f107 0314 	add.w	r3, r7, #20
 8004d6a:	2264      	movs	r2, #100	; 0x64
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4806      	ldr	r0, [pc, #24]	; (8004d88 <bluetoothSend+0x1b0>)
 8004d70:	f004 fc57 	bl	8009622 <HAL_UART_Transmit_IT>
	}
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop
 8004d78:	37ac      	adds	r7, #172	; 0xac
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd90      	pop	{r4, r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	461c4000 	.word	0x461c4000
 8004d84:	08010cb0 	.word	0x08010cb0
 8004d88:	200015a4 	.word	0x200015a4
 8004d8c:	42c80000 	.word	0x42c80000
 8004d90:	08010ccc 	.word	0x08010ccc

08004d94 <rotateMotorRod>:

///////////////////////////////////////////////////////////////
//MOTOR CONTROL
void rotateMotorRod(float angle) {
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	ed87 0a01 	vstr	s0, [r7, #4]

	int steps = (angle / stepAngle);
 8004d9e:	4b19      	ldr	r3, [pc, #100]	; (8004e04 <rotateMotorRod+0x70>)
 8004da0:	ed93 7a00 	vldr	s14, [r3]
 8004da4:	edd7 6a01 	vldr	s13, [r7, #4]
 8004da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004db0:	ee17 3a90 	vmov	r3, s15
 8004db4:	60bb      	str	r3, [r7, #8]

	for(int x=0; x < steps; x++)
 8004db6:	2300      	movs	r3, #0
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	e01a      	b.n	8004df2 <rotateMotorRod+0x5e>
	{
		HAL_GPIO_WritePin(ROD_STEP_PORT, ROD_STEP_PIN, GPIO_PIN_SET);
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004dc2:	4811      	ldr	r0, [pc, #68]	; (8004e08 <rotateMotorRod+0x74>)
 8004dc4:	f002 fcd0 	bl	8007768 <HAL_GPIO_WritePin>
		microDelay(stepDelay);
 8004dc8:	4b10      	ldr	r3, [pc, #64]	; (8004e0c <rotateMotorRod+0x78>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 f88a 	bl	8004ee8 <microDelay>
		HAL_GPIO_WritePin(ROD_STEP_PORT, ROD_STEP_PIN, GPIO_PIN_RESET);
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004dda:	480b      	ldr	r0, [pc, #44]	; (8004e08 <rotateMotorRod+0x74>)
 8004ddc:	f002 fcc4 	bl	8007768 <HAL_GPIO_WritePin>
		microDelay(stepDelay);
 8004de0:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <rotateMotorRod+0x78>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 f87e 	bl	8004ee8 <microDelay>
	for(int x=0; x < steps; x++)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3301      	adds	r3, #1
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	dbe0      	blt.n	8004dbc <rotateMotorRod+0x28>
	}
}
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20000014 	.word	0x20000014
 8004e08:	40020800 	.word	0x40020800
 8004e0c:	20000010 	.word	0x20000010

08004e10 <rotateMotorSusan>:

void rotateMotorSusan(float angle) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	ed87 0a01 	vstr	s0, [r7, #4]

	int steps = (angle / stepAngle);
 8004e1a:	4b18      	ldr	r3, [pc, #96]	; (8004e7c <rotateMotorSusan+0x6c>)
 8004e1c:	ed93 7a00 	vldr	s14, [r3]
 8004e20:	edd7 6a01 	vldr	s13, [r7, #4]
 8004e24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e2c:	ee17 3a90 	vmov	r3, s15
 8004e30:	60bb      	str	r3, [r7, #8]

	for(int x=0; x < steps; x++)
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	e018      	b.n	8004e6a <rotateMotorSusan+0x5a>
	{
		HAL_GPIO_WritePin(SUSAN_STEP_PORT, SUSAN_STEP_PIN, GPIO_PIN_SET);
 8004e38:	2201      	movs	r2, #1
 8004e3a:	2120      	movs	r1, #32
 8004e3c:	4810      	ldr	r0, [pc, #64]	; (8004e80 <rotateMotorSusan+0x70>)
 8004e3e:	f002 fc93 	bl	8007768 <HAL_GPIO_WritePin>
		microDelay(stepDelay);
 8004e42:	4b10      	ldr	r3, [pc, #64]	; (8004e84 <rotateMotorSusan+0x74>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 f84d 	bl	8004ee8 <microDelay>
		HAL_GPIO_WritePin(SUSAN_STEP_PORT, SUSAN_STEP_PIN, GPIO_PIN_RESET);
 8004e4e:	2200      	movs	r2, #0
 8004e50:	2120      	movs	r1, #32
 8004e52:	480b      	ldr	r0, [pc, #44]	; (8004e80 <rotateMotorSusan+0x70>)
 8004e54:	f002 fc88 	bl	8007768 <HAL_GPIO_WritePin>
		microDelay(stepDelay);
 8004e58:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <rotateMotorSusan+0x74>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 f842 	bl	8004ee8 <microDelay>
	for(int x=0; x < steps; x++)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3301      	adds	r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	dbe2      	blt.n	8004e38 <rotateMotorSusan+0x28>
	}
}
 8004e72:	bf00      	nop
 8004e74:	bf00      	nop
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	20000014 	.word	0x20000014
 8004e80:	40020400 	.word	0x40020400
 8004e84:	20000010 	.word	0x20000010

08004e88 <setClockwiseRod>:

void setClockwiseRod() {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ROD_DIR_PORT, ROD_DIR_PIN, GPIO_PIN_SET);
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e92:	4802      	ldr	r0, [pc, #8]	; (8004e9c <setClockwiseRod+0x14>)
 8004e94:	f002 fc68 	bl	8007768 <HAL_GPIO_WritePin>
}
 8004e98:	bf00      	nop
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40020800 	.word	0x40020800

08004ea0 <setClockwiseSusan>:

void setClockwiseSusan() {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SUSAN_DIR_PORT, SUSAN_DIR_PIN, GPIO_PIN_SET);
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	2140      	movs	r1, #64	; 0x40
 8004ea8:	4802      	ldr	r0, [pc, #8]	; (8004eb4 <setClockwiseSusan+0x14>)
 8004eaa:	f002 fc5d 	bl	8007768 <HAL_GPIO_WritePin>
}
 8004eae:	bf00      	nop
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40020400 	.word	0x40020400

08004eb8 <setCounterClockwiseRod>:

void setCounterClockwiseRod() {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ROD_DIR_PORT, ROD_DIR_PIN, GPIO_PIN_RESET);
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ec2:	4802      	ldr	r0, [pc, #8]	; (8004ecc <setCounterClockwiseRod+0x14>)
 8004ec4:	f002 fc50 	bl	8007768 <HAL_GPIO_WritePin>
}
 8004ec8:	bf00      	nop
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	40020800 	.word	0x40020800

08004ed0 <setCounterClockwiseSusan>:

void setCounterClockwiseSusan() {
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SUSAN_DIR_PORT, SUSAN_DIR_PIN, GPIO_PIN_RESET);
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	2140      	movs	r1, #64	; 0x40
 8004ed8:	4802      	ldr	r0, [pc, #8]	; (8004ee4 <setCounterClockwiseSusan+0x14>)
 8004eda:	f002 fc45 	bl	8007768 <HAL_GPIO_WritePin>
}
 8004ede:	bf00      	nop
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40020400 	.word	0x40020400

08004ee8 <microDelay>:

void microDelay (uint16_t delay)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8004ef2:	4b09      	ldr	r3, [pc, #36]	; (8004f18 <microDelay+0x30>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8004efa:	bf00      	nop
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <microDelay+0x30>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f02:	88fb      	ldrh	r3, [r7, #6]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d3f9      	bcc.n	8004efc <microDelay+0x14>
}
 8004f08:	bf00      	nop
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	2000155c 	.word	0x2000155c

08004f1c <setupMotorRod>:

void setupMotorRod() {
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ROD_SLEEP_PORT, ROD_SLEEP_PIN, GPIO_PIN_SET);
 8004f20:	2201      	movs	r2, #1
 8004f22:	2104      	movs	r1, #4
 8004f24:	4805      	ldr	r0, [pc, #20]	; (8004f3c <setupMotorRod+0x20>)
 8004f26:	f002 fc1f 	bl	8007768 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROD_ENABLE_PORT, ROD_ENABLE_PIN, GPIO_PIN_RESET);
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f30:	4803      	ldr	r0, [pc, #12]	; (8004f40 <setupMotorRod+0x24>)
 8004f32:	f002 fc19 	bl	8007768 <HAL_GPIO_WritePin>
}
 8004f36:	bf00      	nop
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40020c00 	.word	0x40020c00
 8004f40:	40020800 	.word	0x40020800

08004f44 <setupMotorSusan>:

void setupMotorSusan() {
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SUSAN_SLEEP_PORT, SUSAN_SLEEP_PIN, GPIO_PIN_SET);
 8004f48:	2201      	movs	r2, #1
 8004f4a:	2180      	movs	r1, #128	; 0x80
 8004f4c:	4804      	ldr	r0, [pc, #16]	; (8004f60 <setupMotorSusan+0x1c>)
 8004f4e:	f002 fc0b 	bl	8007768 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SUSAN_ENABLE_PORT, SUSAN_ENABLE_PIN, GPIO_PIN_RESET);
 8004f52:	2200      	movs	r2, #0
 8004f54:	2110      	movs	r1, #16
 8004f56:	4802      	ldr	r0, [pc, #8]	; (8004f60 <setupMotorSusan+0x1c>)
 8004f58:	f002 fc06 	bl	8007768 <HAL_GPIO_WritePin>
}
 8004f5c:	bf00      	nop
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40020400 	.word	0x40020400

08004f64 <turnOffMotorRod>:

void turnOffMotorRod() {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ROD_SLEEP_PORT, ROD_SLEEP_PIN, GPIO_PIN_RESET);
 8004f68:	2200      	movs	r2, #0
 8004f6a:	2104      	movs	r1, #4
 8004f6c:	4802      	ldr	r0, [pc, #8]	; (8004f78 <turnOffMotorRod+0x14>)
 8004f6e:	f002 fbfb 	bl	8007768 <HAL_GPIO_WritePin>
}
 8004f72:	bf00      	nop
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	40020c00 	.word	0x40020c00

08004f7c <turnOffMotorSusan>:

void turnOffMotorSusan() {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SUSAN_SLEEP_PORT, SUSAN_SLEEP_PIN, GPIO_PIN_RESET);
 8004f80:	2200      	movs	r2, #0
 8004f82:	2180      	movs	r1, #128	; 0x80
 8004f84:	4802      	ldr	r0, [pc, #8]	; (8004f90 <turnOffMotorSusan+0x14>)
 8004f86:	f002 fbef 	bl	8007768 <HAL_GPIO_WritePin>
}
 8004f8a:	bf00      	nop
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40020400 	.word	0x40020400

08004f94 <setupLightSensor>:
///////////////////////////////////////////////////////////////////

void setupLightSensor(uint8_t lightAddress) {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	71fb      	strb	r3, [r7, #7]
	uint8_t data_send[3] = {0};
 8004f9e:	4b10      	ldr	r3, [pc, #64]	; (8004fe0 <setupLightSensor+0x4c>)
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	81bb      	strh	r3, [r7, #12]
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	73bb      	strb	r3, [r7, #14]
	data_send[0] = 0x0A;
 8004fa8:	230a      	movs	r3, #10
 8004faa:	733b      	strb	r3, [r7, #12]
	data_send[1] = 0x32;
 8004fac:	2332      	movs	r3, #50	; 0x32
 8004fae:	737b      	strb	r3, [r7, #13]
	data_send[2] = 0xF8;
 8004fb0:	23f8      	movs	r3, #248	; 0xf8
 8004fb2:	73bb      	strb	r3, [r7, #14]
	while (HAL_I2C_Master_Transmit(&hi2c3, (lightAddress << 1), data_send, 3, 20) != HAL_OK){}
 8004fb4:	bf00      	nop
 8004fb6:	79fb      	ldrb	r3, [r7, #7]
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	b299      	uxth	r1, r3
 8004fbe:	f107 020c 	add.w	r2, r7, #12
 8004fc2:	2314      	movs	r3, #20
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	4806      	ldr	r0, [pc, #24]	; (8004fe4 <setupLightSensor+0x50>)
 8004fca:	f002 fd2b 	bl	8007a24 <HAL_I2C_Master_Transmit>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1f0      	bne.n	8004fb6 <setupLightSensor+0x22>
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	08010d30 	.word	0x08010d30
 8004fe4:	20001508 	.word	0x20001508

08004fe8 <getLightData>:

float getLightData(uint8_t lightAddress) {
 8004fe8:	b5b0      	push	{r4, r5, r7, lr}
 8004fea:	b08a      	sub	sp, #40	; 0x28
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	4603      	mov	r3, r0
 8004ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t data_send[4] = {0};
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	613b      	str	r3, [r7, #16]
	uint8_t data_in [2] = {0};
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	81bb      	strh	r3, [r7, #12]
	uint16_t exp;
	uint16_t man;
	uint16_t alldata;
	float ans = 0;
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	61fb      	str	r3, [r7, #28]

	data_send[0] = 0x00;
 8005000:	2300      	movs	r3, #0
 8005002:	743b      	strb	r3, [r7, #16]
	while (HAL_I2C_GetState(&hi2c3) != HAL_I2C_STATE_READY){}
 8005004:	bf00      	nop
 8005006:	483c      	ldr	r0, [pc, #240]	; (80050f8 <getLightData+0x110>)
 8005008:	f003 f830 	bl	800806c <HAL_I2C_GetState>
 800500c:	4603      	mov	r3, r0
 800500e:	2b20      	cmp	r3, #32
 8005010:	d1f9      	bne.n	8005006 <getLightData+0x1e>
	while (HAL_I2C_Master_Transmit(&hi2c3, (lightAddress << 1), data_send, 1, 20) != HAL_OK){}
 8005012:	bf00      	nop
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	b29b      	uxth	r3, r3
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	b299      	uxth	r1, r3
 800501c:	f107 0210 	add.w	r2, r7, #16
 8005020:	2314      	movs	r3, #20
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	2301      	movs	r3, #1
 8005026:	4834      	ldr	r0, [pc, #208]	; (80050f8 <getLightData+0x110>)
 8005028:	f002 fcfc 	bl	8007a24 <HAL_I2C_Master_Transmit>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f0      	bne.n	8005014 <getLightData+0x2c>
	while (HAL_I2C_GetState(&hi2c3) != HAL_I2C_STATE_READY){}
 8005032:	bf00      	nop
 8005034:	4830      	ldr	r0, [pc, #192]	; (80050f8 <getLightData+0x110>)
 8005036:	f003 f819 	bl	800806c <HAL_I2C_GetState>
 800503a:	4603      	mov	r3, r0
 800503c:	2b20      	cmp	r3, #32
 800503e:	d1f9      	bne.n	8005034 <getLightData+0x4c>
	while (HAL_I2C_Master_Receive(&hi2c3, (lightAddress << 1 | 1), data_in, 2, HAL_MAX_DELAY)){}
 8005040:	bf00      	nop
 8005042:	79fb      	ldrb	r3, [r7, #7]
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	b21b      	sxth	r3, r3
 8005048:	f043 0301 	orr.w	r3, r3, #1
 800504c:	b21b      	sxth	r3, r3
 800504e:	b299      	uxth	r1, r3
 8005050:	f107 020c 	add.w	r2, r7, #12
 8005054:	f04f 33ff 	mov.w	r3, #4294967295
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	2302      	movs	r3, #2
 800505c:	4826      	ldr	r0, [pc, #152]	; (80050f8 <getLightData+0x110>)
 800505e:	f002 fddf 	bl	8007c20 <HAL_I2C_Master_Receive>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1ec      	bne.n	8005042 <getLightData+0x5a>

	alldata = data_in[0];
 8005068:	7b3b      	ldrb	r3, [r7, #12]
 800506a:	837b      	strh	r3, [r7, #26]
	alldata = (alldata << 8) | data_in[1];
 800506c:	8b7b      	ldrh	r3, [r7, #26]
 800506e:	021b      	lsls	r3, r3, #8
 8005070:	b21a      	sxth	r2, r3
 8005072:	7b7b      	ldrb	r3, [r7, #13]
 8005074:	b21b      	sxth	r3, r3
 8005076:	4313      	orrs	r3, r2
 8005078:	b21b      	sxth	r3, r3
 800507a:	837b      	strh	r3, [r7, #26]
	man = alldata & 0x0FFF;
 800507c:	8b7b      	ldrh	r3, [r7, #26]
 800507e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005082:	833b      	strh	r3, [r7, #24]
	exp = (alldata & 0xF000) >> 12;
 8005084:	8b7b      	ldrh	r3, [r7, #26]
 8005086:	0b1b      	lsrs	r3, r3, #12
 8005088:	82fb      	strh	r3, [r7, #22]

	ans = man * (0.01 * pow(2,exp));
 800508a:	8b3b      	ldrh	r3, [r7, #24]
 800508c:	4618      	mov	r0, r3
 800508e:	f7fb fa51 	bl	8000534 <__aeabi_i2d>
 8005092:	4604      	mov	r4, r0
 8005094:	460d      	mov	r5, r1
 8005096:	8afb      	ldrh	r3, [r7, #22]
 8005098:	4618      	mov	r0, r3
 800509a:	f7fb fa3b 	bl	8000514 <__aeabi_ui2d>
 800509e:	4602      	mov	r2, r0
 80050a0:	460b      	mov	r3, r1
 80050a2:	ec43 2b11 	vmov	d1, r2, r3
 80050a6:	ed9f 0b10 	vldr	d0, [pc, #64]	; 80050e8 <getLightData+0x100>
 80050aa:	f008 f97f 	bl	800d3ac <pow>
 80050ae:	ec51 0b10 	vmov	r0, r1, d0
 80050b2:	a30f      	add	r3, pc, #60	; (adr r3, 80050f0 <getLightData+0x108>)
 80050b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b8:	f7fb faa6 	bl	8000608 <__aeabi_dmul>
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4620      	mov	r0, r4
 80050c2:	4629      	mov	r1, r5
 80050c4:	f7fb faa0 	bl	8000608 <__aeabi_dmul>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4610      	mov	r0, r2
 80050ce:	4619      	mov	r1, r3
 80050d0:	f7fb fd72 	bl	8000bb8 <__aeabi_d2f>
 80050d4:	4603      	mov	r3, r0
 80050d6:	61fb      	str	r3, [r7, #28]

	return ans;
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	ee07 3a90 	vmov	s15, r3
}
 80050de:	eeb0 0a67 	vmov.f32	s0, s15
 80050e2:	3720      	adds	r7, #32
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bdb0      	pop	{r4, r5, r7, pc}
 80050e8:	00000000 	.word	0x00000000
 80050ec:	40000000 	.word	0x40000000
 80050f0:	47ae147b 	.word	0x47ae147b
 80050f4:	3f847ae1 	.word	0x3f847ae1
 80050f8:	20001508 	.word	0x20001508
 80050fc:	00000000 	.word	0x00000000

08005100 <getSolarPanelVoltage>:


float getSolarPanelVoltage() {
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
	unsigned int analogValue = 0;
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]

	HAL_ADC_Start(&hadc1);
 800510a:	4827      	ldr	r0, [pc, #156]	; (80051a8 <getSolarPanelVoltage+0xa8>)
 800510c:	f001 fc56 	bl	80069bc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 300) == HAL_OK) {
 8005110:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005114:	4824      	ldr	r0, [pc, #144]	; (80051a8 <getSolarPanelVoltage+0xa8>)
 8005116:	f001 fd38 	bl	8006b8a <HAL_ADC_PollForConversion>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d103      	bne.n	8005128 <getSolarPanelVoltage+0x28>
		analogValue = HAL_ADC_GetValue(&hadc1);
 8005120:	4821      	ldr	r0, [pc, #132]	; (80051a8 <getSolarPanelVoltage+0xa8>)
 8005122:	f001 fdbd 	bl	8006ca0 <HAL_ADC_GetValue>
 8005126:	6178      	str	r0, [r7, #20]
	}

	HAL_ADC_Stop(&hadc1);
 8005128:	481f      	ldr	r0, [pc, #124]	; (80051a8 <getSolarPanelVoltage+0xa8>)
 800512a:	f001 fcfb 	bl	8006b24 <HAL_ADC_Stop>

	//Value obtained from voltage divider
	int voltageDividerLargeRes = 13;
 800512e:	230d      	movs	r3, #13
 8005130:	613b      	str	r3, [r7, #16]
	float voltageDividerSmallRes = 3;
 8005132:	4b1e      	ldr	r3, [pc, #120]	; (80051ac <getSolarPanelVoltage+0xac>)
 8005134:	60fb      	str	r3, [r7, #12]
	float measuredVoltage = (analogValue * 3.3 /  4096);
 8005136:	6978      	ldr	r0, [r7, #20]
 8005138:	f7fb f9ec 	bl	8000514 <__aeabi_ui2d>
 800513c:	a318      	add	r3, pc, #96	; (adr r3, 80051a0 <getSolarPanelVoltage+0xa0>)
 800513e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005142:	f7fb fa61 	bl	8000608 <__aeabi_dmul>
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	4610      	mov	r0, r2
 800514c:	4619      	mov	r1, r3
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	4b17      	ldr	r3, [pc, #92]	; (80051b0 <getSolarPanelVoltage+0xb0>)
 8005154:	f7fb fb82 	bl	800085c <__aeabi_ddiv>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4610      	mov	r0, r2
 800515e:	4619      	mov	r1, r3
 8005160:	f7fb fd2a 	bl	8000bb8 <__aeabi_d2f>
 8005164:	4603      	mov	r3, r0
 8005166:	60bb      	str	r3, [r7, #8]
	float solarPanelVoltage = (measuredVoltage * (voltageDividerLargeRes + voltageDividerSmallRes) / voltageDividerSmallRes);
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005172:	edd7 7a03 	vldr	s15, [r7, #12]
 8005176:	ee37 7a27 	vadd.f32	s14, s14, s15
 800517a:	edd7 7a02 	vldr	s15, [r7, #8]
 800517e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005182:	ed97 7a03 	vldr	s14, [r7, #12]
 8005186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800518a:	edc7 7a01 	vstr	s15, [r7, #4]

	return solarPanelVoltage;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	ee07 3a90 	vmov	s15, r3
}
 8005194:	eeb0 0a67 	vmov.f32	s0, s15
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	66666666 	.word	0x66666666
 80051a4:	400a6666 	.word	0x400a6666
 80051a8:	2000146c 	.word	0x2000146c
 80051ac:	40400000 	.word	0x40400000
 80051b0:	40b00000 	.word	0x40b00000

080051b4 <getGpsData>:

void getGpsData(float* lat, float* longi, int* time, int* date, char* longDir, char* latDir) {
 80051b4:	b5b0      	push	{r4, r5, r7, lr}
 80051b6:	b0b8      	sub	sp, #224	; 0xe0
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]
	uint8_t gpsDataTx [10] = {0}; //Data to send to GPS module
 80051c2:	2300      	movs	r3, #0
 80051c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	809a      	strh	r2, [r3, #4]
	uint8_t gpsDataReady [2] = {0}; //Data to check if gps module ready
 80051d2:	2300      	movs	r3, #0
 80051d4:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	uint8_t gpsDataRx1 [32] = {0}; //Buffer 1
 80051d8:	2300      	movs	r3, #0
 80051da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051de:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	605a      	str	r2, [r3, #4]
 80051e8:	609a      	str	r2, [r3, #8]
 80051ea:	60da      	str	r2, [r3, #12]
 80051ec:	611a      	str	r2, [r3, #16]
 80051ee:	615a      	str	r2, [r3, #20]
 80051f0:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx2 [32] = {0}; //Buffer 2
 80051f2:	2300      	movs	r3, #0
 80051f4:	667b      	str	r3, [r7, #100]	; 0x64
 80051f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80051fa:	2200      	movs	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	605a      	str	r2, [r3, #4]
 8005200:	609a      	str	r2, [r3, #8]
 8005202:	60da      	str	r2, [r3, #12]
 8005204:	611a      	str	r2, [r3, #16]
 8005206:	615a      	str	r2, [r3, #20]
 8005208:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx3 [32] = {0}; //Buffer 3
 800520a:	2300      	movs	r3, #0
 800520c:	647b      	str	r3, [r7, #68]	; 0x44
 800520e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	605a      	str	r2, [r3, #4]
 8005218:	609a      	str	r2, [r3, #8]
 800521a:	60da      	str	r2, [r3, #12]
 800521c:	611a      	str	r2, [r3, #16]
 800521e:	615a      	str	r2, [r3, #20]
 8005220:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx4 [4] = {0}; //Buffer 4
 8005222:	2300      	movs	r3, #0
 8005224:	643b      	str	r3, [r7, #64]	; 0x40

	//////////////////////////////////////////////////////////////////////////////////////////
	//INITIALIZATION
	gpsDataTx[0] = 0xB5;
 8005226:	23b5      	movs	r3, #181	; 0xb5
 8005228:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	gpsDataTx[1] = 0x62;
 800522c:	2362      	movs	r3, #98	; 0x62
 800522e:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
	gpsDataTx[2] = 0xF0;
 8005232:	23f0      	movs	r3, #240	; 0xf0
 8005234:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
	gpsDataTx[3] = 0x04;
 8005238:	2304      	movs	r3, #4
 800523a:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800523e:	bf00      	nop
 8005240:	480e      	ldr	r0, [pc, #56]	; (800527c <getGpsData+0xc8>)
 8005242:	f002 ff13 	bl	800806c <HAL_I2C_GetState>
 8005246:	4603      	mov	r3, r0
 8005248:	2b20      	cmp	r3, #32
 800524a:	d1f9      	bne.n	8005240 <getGpsData+0x8c>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 4, 20) != HAL_OK){}
 800524c:	bf00      	nop
 800524e:	4b0c      	ldr	r3, [pc, #48]	; (8005280 <getGpsData+0xcc>)
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	b299      	uxth	r1, r3
 8005256:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800525a:	2314      	movs	r3, #20
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	2304      	movs	r3, #4
 8005260:	4806      	ldr	r0, [pc, #24]	; (800527c <getGpsData+0xc8>)
 8005262:	f002 fbdf 	bl	8007a24 <HAL_I2C_Master_Transmit>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1f0      	bne.n	800524e <getGpsData+0x9a>

//		/////////////////////////////////////////////////////////////////////////////////////////
//
//		//WAITING FOR DATA READY
	gpsDataReady[0] = 0;
 800526c:	2300      	movs	r3, #0
 800526e:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
	gpsDataReady[1] = 0;
 8005272:	2300      	movs	r3, #0
 8005274:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
	while ((gpsDataReady[0] == 0) && (gpsDataReady[1] == 0)) //We leave as soon as read something non zero
 8005278:	e02b      	b.n	80052d2 <getGpsData+0x11e>
 800527a:	bf00      	nop
 800527c:	200014b4 	.word	0x200014b4
 8005280:	20000008 	.word	0x20000008
	{
		gpsDataTx[0] = 0xFD;
 8005284:	23fd      	movs	r3, #253	; 0xfd
 8005286:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
		HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, HAL_MAX_DELAY);
 800528a:	4bb5      	ldr	r3, [pc, #724]	; (8005560 <getGpsData+0x3ac>)
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	b299      	uxth	r1, r3
 8005292:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005296:	f04f 33ff 	mov.w	r3, #4294967295
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	2301      	movs	r3, #1
 800529e:	48b1      	ldr	r0, [pc, #708]	; (8005564 <getGpsData+0x3b0>)
 80052a0:	f002 fbc0 	bl	8007a24 <HAL_I2C_Master_Transmit>
		gpsDataReady[0] = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
		gpsDataReady[1] = 0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
		HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataReady, 2, HAL_MAX_DELAY);
 80052b0:	4bab      	ldr	r3, [pc, #684]	; (8005560 <getGpsData+0x3ac>)
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	b21b      	sxth	r3, r3
 80052b8:	f043 0301 	orr.w	r3, r3, #1
 80052bc:	b21b      	sxth	r3, r3
 80052be:	b299      	uxth	r1, r3
 80052c0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80052c4:	f04f 33ff 	mov.w	r3, #4294967295
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	2302      	movs	r3, #2
 80052cc:	48a5      	ldr	r0, [pc, #660]	; (8005564 <getGpsData+0x3b0>)
 80052ce:	f002 fca7 	bl	8007c20 <HAL_I2C_Master_Receive>
	while ((gpsDataReady[0] == 0) && (gpsDataReady[1] == 0)) //We leave as soon as read something non zero
 80052d2:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d103      	bne.n	80052e2 <getGpsData+0x12e>
 80052da:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0d0      	beq.n	8005284 <getGpsData+0xd0>
	}


//		//Buffer 1
	gpsDataTx[0] = 0xFF;
 80052e2:	23ff      	movs	r3, #255	; 0xff
 80052e4:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80052e8:	bf00      	nop
 80052ea:	489e      	ldr	r0, [pc, #632]	; (8005564 <getGpsData+0x3b0>)
 80052ec:	f002 febe 	bl	800806c <HAL_I2C_GetState>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b20      	cmp	r3, #32
 80052f4:	d1f9      	bne.n	80052ea <getGpsData+0x136>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 80052f6:	bf00      	nop
 80052f8:	4b99      	ldr	r3, [pc, #612]	; (8005560 <getGpsData+0x3ac>)
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	b299      	uxth	r1, r3
 8005300:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005304:	2314      	movs	r3, #20
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	2301      	movs	r3, #1
 800530a:	4896      	ldr	r0, [pc, #600]	; (8005564 <getGpsData+0x3b0>)
 800530c:	f002 fb8a 	bl	8007a24 <HAL_I2C_Master_Transmit>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1f0      	bne.n	80052f8 <getGpsData+0x144>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8005316:	bf00      	nop
 8005318:	4892      	ldr	r0, [pc, #584]	; (8005564 <getGpsData+0x3b0>)
 800531a:	f002 fea7 	bl	800806c <HAL_I2C_GetState>
 800531e:	4603      	mov	r3, r0
 8005320:	2b20      	cmp	r3, #32
 8005322:	d1f9      	bne.n	8005318 <getGpsData+0x164>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx1, 32, HAL_MAX_DELAY)){}
 8005324:	bf00      	nop
 8005326:	4b8e      	ldr	r3, [pc, #568]	; (8005560 <getGpsData+0x3ac>)
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	b21b      	sxth	r3, r3
 800532e:	f043 0301 	orr.w	r3, r3, #1
 8005332:	b21b      	sxth	r3, r3
 8005334:	b299      	uxth	r1, r3
 8005336:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800533a:	f04f 33ff 	mov.w	r3, #4294967295
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	2320      	movs	r3, #32
 8005342:	4888      	ldr	r0, [pc, #544]	; (8005564 <getGpsData+0x3b0>)
 8005344:	f002 fc6c 	bl	8007c20 <HAL_I2C_Master_Receive>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1eb      	bne.n	8005326 <getGpsData+0x172>
//
//		//Buffer 2
	gpsDataTx[0] = 0xFF;
 800534e:	23ff      	movs	r3, #255	; 0xff
 8005350:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8005354:	bf00      	nop
 8005356:	4883      	ldr	r0, [pc, #524]	; (8005564 <getGpsData+0x3b0>)
 8005358:	f002 fe88 	bl	800806c <HAL_I2C_GetState>
 800535c:	4603      	mov	r3, r0
 800535e:	2b20      	cmp	r3, #32
 8005360:	d1f9      	bne.n	8005356 <getGpsData+0x1a2>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 8005362:	bf00      	nop
 8005364:	4b7e      	ldr	r3, [pc, #504]	; (8005560 <getGpsData+0x3ac>)
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	b299      	uxth	r1, r3
 800536c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005370:	2314      	movs	r3, #20
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	2301      	movs	r3, #1
 8005376:	487b      	ldr	r0, [pc, #492]	; (8005564 <getGpsData+0x3b0>)
 8005378:	f002 fb54 	bl	8007a24 <HAL_I2C_Master_Transmit>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1f0      	bne.n	8005364 <getGpsData+0x1b0>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8005382:	bf00      	nop
 8005384:	4877      	ldr	r0, [pc, #476]	; (8005564 <getGpsData+0x3b0>)
 8005386:	f002 fe71 	bl	800806c <HAL_I2C_GetState>
 800538a:	4603      	mov	r3, r0
 800538c:	2b20      	cmp	r3, #32
 800538e:	d1f9      	bne.n	8005384 <getGpsData+0x1d0>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx2, 32, HAL_MAX_DELAY)){}
 8005390:	bf00      	nop
 8005392:	4b73      	ldr	r3, [pc, #460]	; (8005560 <getGpsData+0x3ac>)
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	b21b      	sxth	r3, r3
 800539a:	f043 0301 	orr.w	r3, r3, #1
 800539e:	b21b      	sxth	r3, r3
 80053a0:	b299      	uxth	r1, r3
 80053a2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80053a6:	f04f 33ff 	mov.w	r3, #4294967295
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	2320      	movs	r3, #32
 80053ae:	486d      	ldr	r0, [pc, #436]	; (8005564 <getGpsData+0x3b0>)
 80053b0:	f002 fc36 	bl	8007c20 <HAL_I2C_Master_Receive>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1eb      	bne.n	8005392 <getGpsData+0x1de>
//
//		//Buffer 3
	gpsDataTx[0] = 0xFF;
 80053ba:	23ff      	movs	r3, #255	; 0xff
 80053bc:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80053c0:	bf00      	nop
 80053c2:	4868      	ldr	r0, [pc, #416]	; (8005564 <getGpsData+0x3b0>)
 80053c4:	f002 fe52 	bl	800806c <HAL_I2C_GetState>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b20      	cmp	r3, #32
 80053cc:	d1f9      	bne.n	80053c2 <getGpsData+0x20e>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 80053ce:	bf00      	nop
 80053d0:	4b63      	ldr	r3, [pc, #396]	; (8005560 <getGpsData+0x3ac>)
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	b299      	uxth	r1, r3
 80053d8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80053dc:	2314      	movs	r3, #20
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	2301      	movs	r3, #1
 80053e2:	4860      	ldr	r0, [pc, #384]	; (8005564 <getGpsData+0x3b0>)
 80053e4:	f002 fb1e 	bl	8007a24 <HAL_I2C_Master_Transmit>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f0      	bne.n	80053d0 <getGpsData+0x21c>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80053ee:	bf00      	nop
 80053f0:	485c      	ldr	r0, [pc, #368]	; (8005564 <getGpsData+0x3b0>)
 80053f2:	f002 fe3b 	bl	800806c <HAL_I2C_GetState>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b20      	cmp	r3, #32
 80053fa:	d1f9      	bne.n	80053f0 <getGpsData+0x23c>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx3, 32, HAL_MAX_DELAY)){}
 80053fc:	bf00      	nop
 80053fe:	4b58      	ldr	r3, [pc, #352]	; (8005560 <getGpsData+0x3ac>)
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	b21b      	sxth	r3, r3
 8005406:	f043 0301 	orr.w	r3, r3, #1
 800540a:	b21b      	sxth	r3, r3
 800540c:	b299      	uxth	r1, r3
 800540e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8005412:	f04f 33ff 	mov.w	r3, #4294967295
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	2320      	movs	r3, #32
 800541a:	4852      	ldr	r0, [pc, #328]	; (8005564 <getGpsData+0x3b0>)
 800541c:	f002 fc00 	bl	8007c20 <HAL_I2C_Master_Receive>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1eb      	bne.n	80053fe <getGpsData+0x24a>

	//Buffer 4
	gpsDataTx[0] = 0xFF;
 8005426:	23ff      	movs	r3, #255	; 0xff
 8005428:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800542c:	bf00      	nop
 800542e:	484d      	ldr	r0, [pc, #308]	; (8005564 <getGpsData+0x3b0>)
 8005430:	f002 fe1c 	bl	800806c <HAL_I2C_GetState>
 8005434:	4603      	mov	r3, r0
 8005436:	2b20      	cmp	r3, #32
 8005438:	d1f9      	bne.n	800542e <getGpsData+0x27a>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 800543a:	bf00      	nop
 800543c:	4b48      	ldr	r3, [pc, #288]	; (8005560 <getGpsData+0x3ac>)
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	b299      	uxth	r1, r3
 8005444:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005448:	2314      	movs	r3, #20
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	2301      	movs	r3, #1
 800544e:	4845      	ldr	r0, [pc, #276]	; (8005564 <getGpsData+0x3b0>)
 8005450:	f002 fae8 	bl	8007a24 <HAL_I2C_Master_Transmit>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1f0      	bne.n	800543c <getGpsData+0x288>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800545a:	bf00      	nop
 800545c:	4841      	ldr	r0, [pc, #260]	; (8005564 <getGpsData+0x3b0>)
 800545e:	f002 fe05 	bl	800806c <HAL_I2C_GetState>
 8005462:	4603      	mov	r3, r0
 8005464:	2b20      	cmp	r3, #32
 8005466:	d1f9      	bne.n	800545c <getGpsData+0x2a8>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx4, 4, HAL_MAX_DELAY)){}
 8005468:	bf00      	nop
 800546a:	4b3d      	ldr	r3, [pc, #244]	; (8005560 <getGpsData+0x3ac>)
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	b21b      	sxth	r3, r3
 8005472:	f043 0301 	orr.w	r3, r3, #1
 8005476:	b21b      	sxth	r3, r3
 8005478:	b299      	uxth	r1, r3
 800547a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800547e:	f04f 33ff 	mov.w	r3, #4294967295
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	2304      	movs	r3, #4
 8005486:	4837      	ldr	r0, [pc, #220]	; (8005564 <getGpsData+0x3b0>)
 8005488:	f002 fbca 	bl	8007c20 <HAL_I2C_Master_Receive>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1eb      	bne.n	800546a <getGpsData+0x2b6>


	//Create concaterated buffer
	 size_t totalSize = sizeof(gpsDataRx1) + sizeof(gpsDataRx2) + sizeof(gpsDataRx3) + sizeof(gpsDataRx4);
 8005492:	2364      	movs	r3, #100	; 0x64
 8005494:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	// Allocate memory for the concatenated array
	uint8_t *concatenatedArray = (uint8_t *)malloc(totalSize);
 8005498:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800549c:	f004 ffd4 	bl	800a448 <malloc>
 80054a0:	4603      	mov	r3, r0
 80054a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	// Copy the contents of each array into the concatenated array
	size_t offset = 0;
 80054a6:	2300      	movs	r3, #0
 80054a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx1, sizeof(gpsDataRx1));
 80054ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80054b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054b4:	4413      	add	r3, r2
 80054b6:	461d      	mov	r5, r3
 80054b8:	f107 0484 	add.w	r4, r7, #132	; 0x84
 80054bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054be:	6028      	str	r0, [r5, #0]
 80054c0:	6069      	str	r1, [r5, #4]
 80054c2:	60aa      	str	r2, [r5, #8]
 80054c4:	60eb      	str	r3, [r5, #12]
 80054c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054c8:	6128      	str	r0, [r5, #16]
 80054ca:	6169      	str	r1, [r5, #20]
 80054cc:	61aa      	str	r2, [r5, #24]
 80054ce:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx1);
 80054d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054d4:	3320      	adds	r3, #32
 80054d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx2, sizeof(gpsDataRx2));
 80054da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80054de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054e2:	4413      	add	r3, r2
 80054e4:	461d      	mov	r5, r3
 80054e6:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80054ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054ec:	6028      	str	r0, [r5, #0]
 80054ee:	6069      	str	r1, [r5, #4]
 80054f0:	60aa      	str	r2, [r5, #8]
 80054f2:	60eb      	str	r3, [r5, #12]
 80054f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054f6:	6128      	str	r0, [r5, #16]
 80054f8:	6169      	str	r1, [r5, #20]
 80054fa:	61aa      	str	r2, [r5, #24]
 80054fc:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx2);
 80054fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005502:	3320      	adds	r3, #32
 8005504:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx3, sizeof(gpsDataRx3));
 8005508:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800550c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005510:	4413      	add	r3, r2
 8005512:	461d      	mov	r5, r3
 8005514:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8005518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800551a:	6028      	str	r0, [r5, #0]
 800551c:	6069      	str	r1, [r5, #4]
 800551e:	60aa      	str	r2, [r5, #8]
 8005520:	60eb      	str	r3, [r5, #12]
 8005522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005524:	6128      	str	r0, [r5, #16]
 8005526:	6169      	str	r1, [r5, #20]
 8005528:	61aa      	str	r2, [r5, #24]
 800552a:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx3);
 800552c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005530:	3320      	adds	r3, #32
 8005532:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx4, sizeof(gpsDataRx4));
 8005536:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800553a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800553e:	4413      	add	r3, r2
 8005540:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005542:	601a      	str	r2, [r3, #0]


	//String comparisons
	const char* GNRMC = "NRMC,";
 8005544:	4b08      	ldr	r3, [pc, #32]	; (8005568 <getGpsData+0x3b4>)
 8005546:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	const char* minus1 = "-1";
 800554a:	4b08      	ldr	r3, [pc, #32]	; (800556c <getGpsData+0x3b8>)
 800554c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	const char* comma = ",";
 8005550:	4b07      	ldr	r3, [pc, #28]	; (8005570 <getGpsData+0x3bc>)
 8005552:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	char* gpsDataList[12];

	for (int i = 0; i < 12; i++) {
 8005556:	2300      	movs	r3, #0
 8005558:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800555c:	e017      	b.n	800558e <getGpsData+0x3da>
 800555e:	bf00      	nop
 8005560:	20000008 	.word	0x20000008
 8005564:	200014b4 	.word	0x200014b4
 8005568:	08010d34 	.word	0x08010d34
 800556c:	08010d3c 	.word	0x08010d3c
 8005570:	08010d40 	.word	0x08010d40
	    gpsDataList[i] = "-1";
 8005574:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	33d8      	adds	r3, #216	; 0xd8
 800557c:	443b      	add	r3, r7
 800557e:	4a95      	ldr	r2, [pc, #596]	; (80057d4 <getGpsData+0x620>)
 8005580:	f843 2cc8 	str.w	r2, [r3, #-200]
	for (int i = 0; i < 12; i++) {
 8005584:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005588:	3301      	adds	r3, #1
 800558a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800558e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005592:	2b0b      	cmp	r3, #11
 8005594:	ddee      	ble.n	8005574 <getGpsData+0x3c0>
	}

	//Parsing the data and updating our values

	if (strncmp(concatenatedArray, GNRMC, strlen(GNRMC)) == 0) {
 8005596:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800559a:	f7fa fe71 	bl	8000280 <strlen>
 800559e:	4603      	mov	r3, r0
 80055a0:	461a      	mov	r2, r3
 80055a2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80055a6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80055aa:	f005 fe16 	bl	800b1da <strncmp>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d122      	bne.n	80055fa <getGpsData+0x446>
		char* individualGpsData = strtok(concatenatedArray, ","); // Initialize strtok with the buffer
 80055b4:	4988      	ldr	r1, [pc, #544]	; (80057d8 <getGpsData+0x624>)
 80055b6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80055ba:	f005 fe21 	bl	800b200 <strtok>
 80055be:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		int index = 0;
 80055c2:	2300      	movs	r3, #0
 80055c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

		while (individualGpsData != NULL) {
 80055c8:	e013      	b.n	80055f2 <getGpsData+0x43e>
			gpsDataList[index] = individualGpsData; // Store the token in an array
 80055ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	33d8      	adds	r3, #216	; 0xd8
 80055d2:	443b      	add	r3, r7
 80055d4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055d8:	f843 2cc8 	str.w	r2, [r3, #-200]
			individualGpsData = strtok(NULL, ","); // Get the next token
 80055dc:	497e      	ldr	r1, [pc, #504]	; (80057d8 <getGpsData+0x624>)
 80055de:	2000      	movs	r0, #0
 80055e0:	f005 fe0e 	bl	800b200 <strtok>
 80055e4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
			index++;
 80055e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055ec:	3301      	adds	r3, #1
 80055ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		while (individualGpsData != NULL) {
 80055f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1e7      	bne.n	80055ca <getGpsData+0x416>
		}
	}

	//if the value is different from both -1 and ,, we update our time
	if ((strncmp(gpsDataList[1], minus1, strlen(minus1)) != 0) &&
 80055fa:	697c      	ldr	r4, [r7, #20]
 80055fc:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8005600:	f7fa fe3e 	bl	8000280 <strlen>
 8005604:	4603      	mov	r3, r0
 8005606:	461a      	mov	r2, r3
 8005608:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800560c:	4620      	mov	r0, r4
 800560e:	f005 fde4 	bl	800b1da <strncmp>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d015      	beq.n	8005644 <getGpsData+0x490>
	   (strncmp(gpsDataList[1], comma, strlen(comma)) != 0)) {
 8005618:	697c      	ldr	r4, [r7, #20]
 800561a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800561e:	f7fa fe2f 	bl	8000280 <strlen>
 8005622:	4603      	mov	r3, r0
 8005624:	461a      	mov	r2, r3
 8005626:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800562a:	4620      	mov	r0, r4
 800562c:	f005 fdd5 	bl	800b1da <strncmp>
 8005630:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[1], minus1, strlen(minus1)) != 0) &&
 8005632:	2b00      	cmp	r3, #0
 8005634:	d006      	beq.n	8005644 <getGpsData+0x490>
		*time = atoi(gpsDataList[1]);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	4618      	mov	r0, r3
 800563a:	f004 ff01 	bl	800a440 <atoi>
 800563e:	4602      	mov	r2, r0
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	601a      	str	r2, [r3, #0]
	}

	if ((strncmp(gpsDataList[3], minus1, strlen(minus1)) != 0) &&
 8005644:	69fc      	ldr	r4, [r7, #28]
 8005646:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800564a:	f7fa fe19 	bl	8000280 <strlen>
 800564e:	4603      	mov	r3, r0
 8005650:	461a      	mov	r2, r3
 8005652:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005656:	4620      	mov	r0, r4
 8005658:	f005 fdbf 	bl	800b1da <strncmp>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d019      	beq.n	8005696 <getGpsData+0x4e2>
	   (strncmp(gpsDataList[3], comma, strlen(comma)) != 0)) {
 8005662:	69fc      	ldr	r4, [r7, #28]
 8005664:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8005668:	f7fa fe0a 	bl	8000280 <strlen>
 800566c:	4603      	mov	r3, r0
 800566e:	461a      	mov	r2, r3
 8005670:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8005674:	4620      	mov	r0, r4
 8005676:	f005 fdb0 	bl	800b1da <strncmp>
 800567a:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[3], minus1, strlen(minus1)) != 0) &&
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <getGpsData+0x4e2>
		*lat = atoi(gpsDataList[3]);
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	4618      	mov	r0, r3
 8005684:	f004 fedc 	bl	800a440 <atoi>
 8005688:	ee07 0a90 	vmov	s15, r0
 800568c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((strncmp(gpsDataList[4], minus1, strlen(minus1)) != 0) &&
 8005696:	6a3c      	ldr	r4, [r7, #32]
 8005698:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800569c:	f7fa fdf0 	bl	8000280 <strlen>
 80056a0:	4603      	mov	r3, r0
 80056a2:	461a      	mov	r2, r3
 80056a4:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80056a8:	4620      	mov	r0, r4
 80056aa:	f005 fd96 	bl	800b1da <strncmp>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d014      	beq.n	80056de <getGpsData+0x52a>
	   (strncmp(gpsDataList[4], comma, strlen(comma)) != 0)) {
 80056b4:	6a3c      	ldr	r4, [r7, #32]
 80056b6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80056ba:	f7fa fde1 	bl	8000280 <strlen>
 80056be:	4603      	mov	r3, r0
 80056c0:	461a      	mov	r2, r3
 80056c2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80056c6:	4620      	mov	r0, r4
 80056c8:	f005 fd87 	bl	800b1da <strncmp>
 80056cc:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[4], minus1, strlen(minus1)) != 0) &&
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d005      	beq.n	80056de <getGpsData+0x52a>
		strcpy(latDir, gpsDataList[4]);
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	4619      	mov	r1, r3
 80056d6:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80056da:	f005 fe73 	bl	800b3c4 <strcpy>
	}

	if ((strncmp(gpsDataList[5], minus1, strlen(minus1)) != 0) &&
 80056de:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80056e0:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80056e4:	f7fa fdcc 	bl	8000280 <strlen>
 80056e8:	4603      	mov	r3, r0
 80056ea:	461a      	mov	r2, r3
 80056ec:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80056f0:	4620      	mov	r0, r4
 80056f2:	f005 fd72 	bl	800b1da <strncmp>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d019      	beq.n	8005730 <getGpsData+0x57c>
	   (strncmp(gpsDataList[5], comma, strlen(comma)) != 0)) {
 80056fc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80056fe:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8005702:	f7fa fdbd 	bl	8000280 <strlen>
 8005706:	4603      	mov	r3, r0
 8005708:	461a      	mov	r2, r3
 800570a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800570e:	4620      	mov	r0, r4
 8005710:	f005 fd63 	bl	800b1da <strncmp>
 8005714:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[5], minus1, strlen(minus1)) != 0) &&
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <getGpsData+0x57c>
		*longi = atoi(gpsDataList[5]);
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	4618      	mov	r0, r3
 800571e:	f004 fe8f 	bl	800a440 <atoi>
 8005722:	ee07 0a90 	vmov	s15, r0
 8005726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((strncmp(gpsDataList[6], minus1, strlen(minus1)) != 0) &&
 8005730:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8005732:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8005736:	f7fa fda3 	bl	8000280 <strlen>
 800573a:	4603      	mov	r3, r0
 800573c:	461a      	mov	r2, r3
 800573e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005742:	4620      	mov	r0, r4
 8005744:	f005 fd49 	bl	800b1da <strncmp>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d014      	beq.n	8005778 <getGpsData+0x5c4>
	   (strncmp(gpsDataList[6], comma, strlen(comma)) != 0)) {
 800574e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8005750:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8005754:	f7fa fd94 	bl	8000280 <strlen>
 8005758:	4603      	mov	r3, r0
 800575a:	461a      	mov	r2, r3
 800575c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8005760:	4620      	mov	r0, r4
 8005762:	f005 fd3a 	bl	800b1da <strncmp>
 8005766:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[6], minus1, strlen(minus1)) != 0) &&
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <getGpsData+0x5c4>
		strcpy(longDir, gpsDataList[6]);
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	4619      	mov	r1, r3
 8005770:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8005774:	f005 fe26 	bl	800b3c4 <strcpy>
	}

	if ((strncmp(gpsDataList[8], minus1, strlen(minus1)) != 0) &&
 8005778:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800577a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800577e:	f7fa fd7f 	bl	8000280 <strlen>
 8005782:	4603      	mov	r3, r0
 8005784:	461a      	mov	r2, r3
 8005786:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800578a:	4620      	mov	r0, r4
 800578c:	f005 fd25 	bl	800b1da <strncmp>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d015      	beq.n	80057c2 <getGpsData+0x60e>
	   (strncmp(gpsDataList[8], comma, strlen(comma)) != 0)) {
 8005796:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8005798:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800579c:	f7fa fd70 	bl	8000280 <strlen>
 80057a0:	4603      	mov	r3, r0
 80057a2:	461a      	mov	r2, r3
 80057a4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80057a8:	4620      	mov	r0, r4
 80057aa:	f005 fd16 	bl	800b1da <strncmp>
 80057ae:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[8], minus1, strlen(minus1)) != 0) &&
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d006      	beq.n	80057c2 <getGpsData+0x60e>
		*date = atoi(gpsDataList[8]);
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	4618      	mov	r0, r3
 80057b8:	f004 fe42 	bl	800a440 <atoi>
 80057bc:	4602      	mov	r2, r0
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	601a      	str	r2, [r3, #0]
	}

	free(concatenatedArray);
 80057c2:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80057c6:	f004 fe47 	bl	800a458 <free>
}
 80057ca:	bf00      	nop
 80057cc:	37d8      	adds	r7, #216	; 0xd8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bdb0      	pop	{r4, r5, r7, pc}
 80057d2:	bf00      	nop
 80057d4:	08010d3c 	.word	0x08010d3c
 80057d8:	08010d40 	.word	0x08010d40

080057dc <magnetometerData>:

float magnetometerData(float xCal,float yCal,float zCal) {
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08c      	sub	sp, #48	; 0x30
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80057e6:	edc7 0a02 	vstr	s1, [r7, #8]
 80057ea:	ed87 1a01 	vstr	s2, [r7, #4]
	int16_t magnetometerVal [3] = {0};
 80057ee:	f107 0314 	add.w	r3, r7, #20
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	809a      	strh	r2, [r3, #4]

	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &dataRegister, 1, 20) != HAL_OK){} //send data register address
 80057f8:	bf00      	nop
 80057fa:	4b21      	ldr	r3, [pc, #132]	; (8005880 <magnetometerData+0xa4>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	b29b      	uxth	r3, r3
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	b299      	uxth	r1, r3
 8005804:	2314      	movs	r3, #20
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	2301      	movs	r3, #1
 800580a:	4a1e      	ldr	r2, [pc, #120]	; (8005884 <magnetometerData+0xa8>)
 800580c:	481e      	ldr	r0, [pc, #120]	; (8005888 <magnetometerData+0xac>)
 800580e:	f002 f909 	bl	8007a24 <HAL_I2C_Master_Transmit>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1f0      	bne.n	80057fa <magnetometerData+0x1e>
	while (HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), magnetometerVal, 6, HAL_MAX_DELAY)){}
 8005818:	bf00      	nop
 800581a:	4b19      	ldr	r3, [pc, #100]	; (8005880 <magnetometerData+0xa4>)
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	b21b      	sxth	r3, r3
 8005822:	f043 0301 	orr.w	r3, r3, #1
 8005826:	b21b      	sxth	r3, r3
 8005828:	b299      	uxth	r1, r3
 800582a:	f107 0214 	add.w	r2, r7, #20
 800582e:	f04f 33ff 	mov.w	r3, #4294967295
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	2306      	movs	r3, #6
 8005836:	4814      	ldr	r0, [pc, #80]	; (8005888 <magnetometerData+0xac>)
 8005838:	f002 f9f2 	bl	8007c20 <HAL_I2C_Master_Receive>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1eb      	bne.n	800581a <magnetometerData+0x3e>

	int16_t xMag = magnetometerVal[0];
 8005842:	8abb      	ldrh	r3, [r7, #20]
 8005844:	84fb      	strh	r3, [r7, #38]	; 0x26

	int16_t yMag = magnetometerVal[1];
 8005846:	8afb      	ldrh	r3, [r7, #22]
 8005848:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t zMag = magnetometerVal[2];
 800584a:	8b3b      	ldrh	r3, [r7, #24]
 800584c:	847b      	strh	r3, [r7, #34]	; 0x22

	float direction = getDirectionAngle(xMag, yMag, zMag, xCal, yCal, zCal);
 800584e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8005852:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	; 0x24
 8005856:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800585a:	ed97 1a01 	vldr	s2, [r7, #4]
 800585e:	edd7 0a02 	vldr	s1, [r7, #8]
 8005862:	ed97 0a03 	vldr	s0, [r7, #12]
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fa4a 	bl	8005d00 <getDirectionAngle>
 800586c:	ed87 0a07 	vstr	s0, [r7, #28]

	return direction;
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	ee07 3a90 	vmov	s15, r3
}
 8005876:	eeb0 0a67 	vmov.f32	s0, s15
 800587a:	3728      	adds	r7, #40	; 0x28
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	20000000 	.word	0x20000000
 8005884:	20000001 	.word	0x20000001
 8005888:	200014b4 	.word	0x200014b4

0800588c <setupMag>:


void setupMag() {
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af02      	add	r7, sp, #8
//
//	//Values to send
//	uint8_t initRegA = 0x0C;
//	uint8_t disRegA = 0x0E;
//	uint8_t initRegC = 0x10;
	uint8_t magSetupRX = 0;
 8005892:	2300      	movs	r3, #0
 8005894:	71fb      	strb	r3, [r7, #7]

	uint8_t magSetupTX [2] = {0};
 8005896:	2300      	movs	r3, #0
 8005898:	80bb      	strh	r3, [r7, #4]

	//1
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegC, 1, HAL_MAX_DELAY) != HAL_OK){} //send address pointer
 800589a:	bf00      	nop
 800589c:	4b8d      	ldr	r3, [pc, #564]	; (8005ad4 <setupMag+0x248>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	b299      	uxth	r1, r3
 80058a6:	f04f 33ff 	mov.w	r3, #4294967295
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	2301      	movs	r3, #1
 80058ae:	4a8a      	ldr	r2, [pc, #552]	; (8005ad8 <setupMag+0x24c>)
 80058b0:	488a      	ldr	r0, [pc, #552]	; (8005adc <setupMag+0x250>)
 80058b2:	f002 f8b7 	bl	8007a24 <HAL_I2C_Master_Transmit>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1ef      	bne.n	800589c <setupMag+0x10>

	//2
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 80058bc:	4b85      	ldr	r3, [pc, #532]	; (8005ad4 <setupMag+0x248>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	005b      	lsls	r3, r3, #1
 80058c2:	b21b      	sxth	r3, r3
 80058c4:	f043 0301 	orr.w	r3, r3, #1
 80058c8:	b21b      	sxth	r3, r3
 80058ca:	b299      	uxth	r1, r3
 80058cc:	1dfa      	adds	r2, r7, #7
 80058ce:	f04f 33ff 	mov.w	r3, #4294967295
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	2301      	movs	r3, #1
 80058d6:	4881      	ldr	r0, [pc, #516]	; (8005adc <setupMag+0x250>)
 80058d8:	f002 f9a2 	bl	8007c20 <HAL_I2C_Master_Receive>


	//3
	magSetupTX[0] = cfgRegC;
 80058dc:	4b7e      	ldr	r3, [pc, #504]	; (8005ad8 <setupMag+0x24c>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = initRegC;
 80058e2:	4b7f      	ldr	r3, [pc, #508]	; (8005ae0 <setupMag+0x254>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 80058e8:	bf00      	nop
 80058ea:	4b7a      	ldr	r3, [pc, #488]	; (8005ad4 <setupMag+0x248>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	b299      	uxth	r1, r3
 80058f4:	1d3a      	adds	r2, r7, #4
 80058f6:	f04f 33ff 	mov.w	r3, #4294967295
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	2302      	movs	r3, #2
 80058fe:	4877      	ldr	r0, [pc, #476]	; (8005adc <setupMag+0x250>)
 8005900:	f002 f890 	bl	8007a24 <HAL_I2C_Master_Transmit>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1ef      	bne.n	80058ea <setupMag+0x5e>

	//4
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegA, 1, HAL_MAX_DELAY) != HAL_OK){}
 800590a:	bf00      	nop
 800590c:	4b71      	ldr	r3, [pc, #452]	; (8005ad4 <setupMag+0x248>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	b29b      	uxth	r3, r3
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	b299      	uxth	r1, r3
 8005916:	f04f 33ff 	mov.w	r3, #4294967295
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	2301      	movs	r3, #1
 800591e:	4a71      	ldr	r2, [pc, #452]	; (8005ae4 <setupMag+0x258>)
 8005920:	486e      	ldr	r0, [pc, #440]	; (8005adc <setupMag+0x250>)
 8005922:	f002 f87f 	bl	8007a24 <HAL_I2C_Master_Transmit>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1ef      	bne.n	800590c <setupMag+0x80>

	//5
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 800592c:	4b69      	ldr	r3, [pc, #420]	; (8005ad4 <setupMag+0x248>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	b21b      	sxth	r3, r3
 8005934:	f043 0301 	orr.w	r3, r3, #1
 8005938:	b21b      	sxth	r3, r3
 800593a:	b299      	uxth	r1, r3
 800593c:	1dfa      	adds	r2, r7, #7
 800593e:	f04f 33ff 	mov.w	r3, #4294967295
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	2301      	movs	r3, #1
 8005946:	4865      	ldr	r0, [pc, #404]	; (8005adc <setupMag+0x250>)
 8005948:	f002 f96a 	bl	8007c20 <HAL_I2C_Master_Receive>

	//6
	magSetupTX[0] = cfgRegA;
 800594c:	4b65      	ldr	r3, [pc, #404]	; (8005ae4 <setupMag+0x258>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = disRegA;
 8005952:	4b65      	ldr	r3, [pc, #404]	; (8005ae8 <setupMag+0x25c>)
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 8005958:	bf00      	nop
 800595a:	4b5e      	ldr	r3, [pc, #376]	; (8005ad4 <setupMag+0x248>)
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	b29b      	uxth	r3, r3
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	b299      	uxth	r1, r3
 8005964:	1d3a      	adds	r2, r7, #4
 8005966:	f04f 33ff 	mov.w	r3, #4294967295
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	2302      	movs	r3, #2
 800596e:	485b      	ldr	r0, [pc, #364]	; (8005adc <setupMag+0x250>)
 8005970:	f002 f858 	bl	8007a24 <HAL_I2C_Master_Transmit>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1ef      	bne.n	800595a <setupMag+0xce>

	//7
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegA, 1, HAL_MAX_DELAY) != HAL_OK){}
 800597a:	bf00      	nop
 800597c:	4b55      	ldr	r3, [pc, #340]	; (8005ad4 <setupMag+0x248>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	b29b      	uxth	r3, r3
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	b299      	uxth	r1, r3
 8005986:	f04f 33ff 	mov.w	r3, #4294967295
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	2301      	movs	r3, #1
 800598e:	4a55      	ldr	r2, [pc, #340]	; (8005ae4 <setupMag+0x258>)
 8005990:	4852      	ldr	r0, [pc, #328]	; (8005adc <setupMag+0x250>)
 8005992:	f002 f847 	bl	8007a24 <HAL_I2C_Master_Transmit>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1ef      	bne.n	800597c <setupMag+0xf0>

	//8
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 800599c:	4b4d      	ldr	r3, [pc, #308]	; (8005ad4 <setupMag+0x248>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	b21b      	sxth	r3, r3
 80059a4:	f043 0301 	orr.w	r3, r3, #1
 80059a8:	b21b      	sxth	r3, r3
 80059aa:	b299      	uxth	r1, r3
 80059ac:	1dfa      	adds	r2, r7, #7
 80059ae:	f04f 33ff 	mov.w	r3, #4294967295
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	2301      	movs	r3, #1
 80059b6:	4849      	ldr	r0, [pc, #292]	; (8005adc <setupMag+0x250>)
 80059b8:	f002 f932 	bl	8007c20 <HAL_I2C_Master_Receive>

	//9
	magSetupTX[0] = cfgRegA;
 80059bc:	4b49      	ldr	r3, [pc, #292]	; (8005ae4 <setupMag+0x258>)
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = disRegA;
 80059c2:	4b49      	ldr	r3, [pc, #292]	; (8005ae8 <setupMag+0x25c>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 80059c8:	bf00      	nop
 80059ca:	4b42      	ldr	r3, [pc, #264]	; (8005ad4 <setupMag+0x248>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	b299      	uxth	r1, r3
 80059d4:	1d3a      	adds	r2, r7, #4
 80059d6:	f04f 33ff 	mov.w	r3, #4294967295
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	2302      	movs	r3, #2
 80059de:	483f      	ldr	r0, [pc, #252]	; (8005adc <setupMag+0x250>)
 80059e0:	f002 f820 	bl	8007a24 <HAL_I2C_Master_Transmit>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1ef      	bne.n	80059ca <setupMag+0x13e>

	//10
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegC, 1, HAL_MAX_DELAY) != HAL_OK){}
 80059ea:	bf00      	nop
 80059ec:	4b39      	ldr	r3, [pc, #228]	; (8005ad4 <setupMag+0x248>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	b299      	uxth	r1, r3
 80059f6:	f04f 33ff 	mov.w	r3, #4294967295
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	2301      	movs	r3, #1
 80059fe:	4a36      	ldr	r2, [pc, #216]	; (8005ad8 <setupMag+0x24c>)
 8005a00:	4836      	ldr	r0, [pc, #216]	; (8005adc <setupMag+0x250>)
 8005a02:	f002 f80f 	bl	8007a24 <HAL_I2C_Master_Transmit>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1ef      	bne.n	80059ec <setupMag+0x160>

	//11
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8005a0c:	4b31      	ldr	r3, [pc, #196]	; (8005ad4 <setupMag+0x248>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	b21b      	sxth	r3, r3
 8005a14:	f043 0301 	orr.w	r3, r3, #1
 8005a18:	b21b      	sxth	r3, r3
 8005a1a:	b299      	uxth	r1, r3
 8005a1c:	1dfa      	adds	r2, r7, #7
 8005a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	2301      	movs	r3, #1
 8005a26:	482d      	ldr	r0, [pc, #180]	; (8005adc <setupMag+0x250>)
 8005a28:	f002 f8fa 	bl	8007c20 <HAL_I2C_Master_Receive>


	//12
	magSetupTX[0] = cfgRegC;
 8005a2c:	4b2a      	ldr	r3, [pc, #168]	; (8005ad8 <setupMag+0x24c>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = initRegC;
 8005a32:	4b2b      	ldr	r3, [pc, #172]	; (8005ae0 <setupMag+0x254>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 8005a38:	bf00      	nop
 8005a3a:	4b26      	ldr	r3, [pc, #152]	; (8005ad4 <setupMag+0x248>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	b299      	uxth	r1, r3
 8005a44:	1d3a      	adds	r2, r7, #4
 8005a46:	f04f 33ff 	mov.w	r3, #4294967295
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	4823      	ldr	r0, [pc, #140]	; (8005adc <setupMag+0x250>)
 8005a50:	f001 ffe8 	bl	8007a24 <HAL_I2C_Master_Transmit>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1ef      	bne.n	8005a3a <setupMag+0x1ae>

	//13
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &cfgRegA, 2, HAL_MAX_DELAY) != HAL_OK){}
 8005a5a:	bf00      	nop
 8005a5c:	4b1d      	ldr	r3, [pc, #116]	; (8005ad4 <setupMag+0x248>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	b299      	uxth	r1, r3
 8005a66:	f04f 33ff 	mov.w	r3, #4294967295
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ae4 <setupMag+0x258>)
 8005a70:	481a      	ldr	r0, [pc, #104]	; (8005adc <setupMag+0x250>)
 8005a72:	f001 ffd7 	bl	8007a24 <HAL_I2C_Master_Transmit>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1ef      	bne.n	8005a5c <setupMag+0x1d0>

	//14
	HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), &magSetupRX, 1, HAL_MAX_DELAY);
 8005a7c:	4b15      	ldr	r3, [pc, #84]	; (8005ad4 <setupMag+0x248>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	b21b      	sxth	r3, r3
 8005a84:	f043 0301 	orr.w	r3, r3, #1
 8005a88:	b21b      	sxth	r3, r3
 8005a8a:	b299      	uxth	r1, r3
 8005a8c:	1dfa      	adds	r2, r7, #7
 8005a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	2301      	movs	r3, #1
 8005a96:	4811      	ldr	r0, [pc, #68]	; (8005adc <setupMag+0x250>)
 8005a98:	f002 f8c2 	bl	8007c20 <HAL_I2C_Master_Receive>


	//15
	magSetupTX[0] = cfgRegA;
 8005a9c:	4b11      	ldr	r3, [pc, #68]	; (8005ae4 <setupMag+0x258>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	713b      	strb	r3, [r7, #4]
	magSetupTX[1] = initRegA;
 8005aa2:	4b12      	ldr	r3, [pc, #72]	; (8005aec <setupMag+0x260>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	717b      	strb	r3, [r7, #5]
	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), magSetupTX, 2, HAL_MAX_DELAY) != HAL_OK){}
 8005aa8:	bf00      	nop
 8005aaa:	4b0a      	ldr	r3, [pc, #40]	; (8005ad4 <setupMag+0x248>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	b299      	uxth	r1, r3
 8005ab4:	1d3a      	adds	r2, r7, #4
 8005ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	2302      	movs	r3, #2
 8005abe:	4807      	ldr	r0, [pc, #28]	; (8005adc <setupMag+0x250>)
 8005ac0:	f001 ffb0 	bl	8007a24 <HAL_I2C_Master_Transmit>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1ef      	bne.n	8005aaa <setupMag+0x21e>
}
 8005aca:	bf00      	nop
 8005acc:	bf00      	nop
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	20000000 	.word	0x20000000
 8005ad8:	20000003 	.word	0x20000003
 8005adc:	200014b4 	.word	0x200014b4
 8005ae0:	20000006 	.word	0x20000006
 8005ae4:	20000002 	.word	0x20000002
 8005ae8:	20000005 	.word	0x20000005
 8005aec:	20000004 	.word	0x20000004

08005af0 <hardIronCal>:

void hardIronCal(float* xCal, float* yCal, float* zCal) {
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08e      	sub	sp, #56	; 0x38
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
  int16_t magnetometerVal [3] = {0};
 8005afc:	f107 0314 	add.w	r3, r7, #20
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	809a      	strh	r2, [r3, #4]

  while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &dataRegister, 1, 20) != HAL_OK){} //send data register address
 8005b06:	bf00      	nop
 8005b08:	4b78      	ldr	r3, [pc, #480]	; (8005cec <hardIronCal+0x1fc>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	b299      	uxth	r1, r3
 8005b12:	2314      	movs	r3, #20
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	2301      	movs	r3, #1
 8005b18:	4a75      	ldr	r2, [pc, #468]	; (8005cf0 <hardIronCal+0x200>)
 8005b1a:	4876      	ldr	r0, [pc, #472]	; (8005cf4 <hardIronCal+0x204>)
 8005b1c:	f001 ff82 	bl	8007a24 <HAL_I2C_Master_Transmit>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1f0      	bne.n	8005b08 <hardIronCal+0x18>
  while (HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), magnetometerVal, 6, HAL_MAX_DELAY)){}
 8005b26:	bf00      	nop
 8005b28:	4b70      	ldr	r3, [pc, #448]	; (8005cec <hardIronCal+0x1fc>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	b21b      	sxth	r3, r3
 8005b30:	f043 0301 	orr.w	r3, r3, #1
 8005b34:	b21b      	sxth	r3, r3
 8005b36:	b299      	uxth	r1, r3
 8005b38:	f107 0214 	add.w	r2, r7, #20
 8005b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	2306      	movs	r3, #6
 8005b44:	486b      	ldr	r0, [pc, #428]	; (8005cf4 <hardIronCal+0x204>)
 8005b46:	f002 f86b 	bl	8007c20 <HAL_I2C_Master_Receive>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1eb      	bne.n	8005b28 <hardIronCal+0x38>

  int16_t xMax = magnetometerVal[0];
 8005b50:	8abb      	ldrh	r3, [r7, #20]
 8005b52:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int16_t xMin = magnetometerVal[0];
 8005b54:	8abb      	ldrh	r3, [r7, #20]
 8005b56:	85bb      	strh	r3, [r7, #44]	; 0x2c

  int16_t yMax = magnetometerVal[1];
 8005b58:	8afb      	ldrh	r3, [r7, #22]
 8005b5a:	857b      	strh	r3, [r7, #42]	; 0x2a
  int16_t yMin = magnetometerVal[1];
 8005b5c:	8afb      	ldrh	r3, [r7, #22]
 8005b5e:	853b      	strh	r3, [r7, #40]	; 0x28

  int16_t zMax = magnetometerVal[2];
 8005b60:	8b3b      	ldrh	r3, [r7, #24]
 8005b62:	84fb      	strh	r3, [r7, #38]	; 0x26
  int16_t zMin = magnetometerVal[2];
 8005b64:	8b3b      	ldrh	r3, [r7, #24]
 8005b66:	84bb      	strh	r3, [r7, #36]	; 0x24

  int i = 0;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	623b      	str	r3, [r7, #32]
  int motorCounter = 0;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	61fb      	str	r3, [r7, #28]
  while (i != 58) {
 8005b70:	e087      	b.n	8005c82 <hardIronCal+0x192>

		while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &dataRegister, 1, 20) != HAL_OK){} //send data register address
 8005b72:	bf00      	nop
 8005b74:	4b5d      	ldr	r3, [pc, #372]	; (8005cec <hardIronCal+0x1fc>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	b299      	uxth	r1, r3
 8005b7e:	2314      	movs	r3, #20
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	2301      	movs	r3, #1
 8005b84:	4a5a      	ldr	r2, [pc, #360]	; (8005cf0 <hardIronCal+0x200>)
 8005b86:	485b      	ldr	r0, [pc, #364]	; (8005cf4 <hardIronCal+0x204>)
 8005b88:	f001 ff4c 	bl	8007a24 <HAL_I2C_Master_Transmit>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1f0      	bne.n	8005b74 <hardIronCal+0x84>
		while (HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), magnetometerVal, 6, HAL_MAX_DELAY)){}
 8005b92:	bf00      	nop
 8005b94:	4b55      	ldr	r3, [pc, #340]	; (8005cec <hardIronCal+0x1fc>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	b21b      	sxth	r3, r3
 8005b9c:	f043 0301 	orr.w	r3, r3, #1
 8005ba0:	b21b      	sxth	r3, r3
 8005ba2:	b299      	uxth	r1, r3
 8005ba4:	f107 0214 	add.w	r2, r7, #20
 8005ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	2306      	movs	r3, #6
 8005bb0:	4850      	ldr	r0, [pc, #320]	; (8005cf4 <hardIronCal+0x204>)
 8005bb2:	f002 f835 	bl	8007c20 <HAL_I2C_Master_Receive>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1eb      	bne.n	8005b94 <hardIronCal+0xa4>

		//Updating xMax and xMin
		if (magnetometerVal[0] > xMax) {
 8005bbc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005bc0:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	da02      	bge.n	8005bce <hardIronCal+0xde>
		  xMax = magnetometerVal[0];
 8005bc8:	8abb      	ldrh	r3, [r7, #20]
 8005bca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005bcc:	e007      	b.n	8005bde <hardIronCal+0xee>
		}

		else if (magnetometerVal[0] < xMin) {
 8005bce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005bd2:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	dd01      	ble.n	8005bde <hardIronCal+0xee>
		  xMin = magnetometerVal[0];
 8005bda:	8abb      	ldrh	r3, [r7, #20]
 8005bdc:	85bb      	strh	r3, [r7, #44]	; 0x2c
		}

		//Updating yMax and yMin
		if (magnetometerVal[1] > yMax) {
 8005bde:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005be2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8005be6:	429a      	cmp	r2, r3
 8005be8:	da02      	bge.n	8005bf0 <hardIronCal+0x100>
		  yMax = magnetometerVal[1];
 8005bea:	8afb      	ldrh	r3, [r7, #22]
 8005bec:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005bee:	e007      	b.n	8005c00 <hardIronCal+0x110>
		}

		else if (magnetometerVal[1] < yMin) {
 8005bf0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005bf4:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	dd01      	ble.n	8005c00 <hardIronCal+0x110>
		  yMin = magnetometerVal[1];
 8005bfc:	8afb      	ldrh	r3, [r7, #22]
 8005bfe:	853b      	strh	r3, [r7, #40]	; 0x28
		}

		//Updating zMax and zMin
		if (magnetometerVal[2] > zMax) {
 8005c00:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005c04:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	da02      	bge.n	8005c12 <hardIronCal+0x122>
		  zMax = magnetometerVal[2];
 8005c0c:	8b3b      	ldrh	r3, [r7, #24]
 8005c0e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005c10:	e007      	b.n	8005c22 <hardIronCal+0x132>
		}

		else if (magnetometerVal[2] < zMin) {
 8005c12:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005c16:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	dd01      	ble.n	8005c22 <hardIronCal+0x132>
		  zMin = magnetometerVal[2];
 8005c1e:	8b3b      	ldrh	r3, [r7, #24]
 8005c20:	84bb      	strh	r3, [r7, #36]	; 0x24
		}

		if ((HAL_GetTick() - motorCounter) > 1000) {
 8005c22:	f000 fe7b 	bl	800691c <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c30:	d927      	bls.n	8005c82 <hardIronCal+0x192>
			setupMotorSusan();
 8005c32:	f7ff f987 	bl	8004f44 <setupMotorSusan>
			if (i < 18) {
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	2b11      	cmp	r3, #17
 8005c3a:	dc06      	bgt.n	8005c4a <hardIronCal+0x15a>
				setClockwiseSusan();
 8005c3c:	f7ff f930 	bl	8004ea0 <setClockwiseSusan>
				rotateMotorSusan(361);
 8005c40:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8005cf8 <hardIronCal+0x208>
 8005c44:	f7ff f8e4 	bl	8004e10 <rotateMotorSusan>
 8005c48:	e012      	b.n	8005c70 <hardIronCal+0x180>
			}
			else if ( i >= 18 && i < 47){
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	2b11      	cmp	r3, #17
 8005c4e:	dd09      	ble.n	8005c64 <hardIronCal+0x174>
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	2b2e      	cmp	r3, #46	; 0x2e
 8005c54:	dc06      	bgt.n	8005c64 <hardIronCal+0x174>
				setCounterClockwiseSusan();
 8005c56:	f7ff f93b 	bl	8004ed0 <setCounterClockwiseSusan>
				rotateMotorSusan(361);
 8005c5a:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8005cf8 <hardIronCal+0x208>
 8005c5e:	f7ff f8d7 	bl	8004e10 <rotateMotorSusan>
 8005c62:	e005      	b.n	8005c70 <hardIronCal+0x180>
			}
			else {
				setClockwiseSusan();
 8005c64:	f7ff f91c 	bl	8004ea0 <setClockwiseSusan>
				rotateMotorSusan(361);
 8005c68:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8005cf8 <hardIronCal+0x208>
 8005c6c:	f7ff f8d0 	bl	8004e10 <rotateMotorSusan>
			}
			turnOffMotorSusan();
 8005c70:	f7ff f984 	bl	8004f7c <turnOffMotorSusan>

			i++;
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	3301      	adds	r3, #1
 8005c78:	623b      	str	r3, [r7, #32]
			motorCounter = HAL_GetTick();
 8005c7a:	f000 fe4f 	bl	800691c <HAL_GetTick>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	61fb      	str	r3, [r7, #28]
  while (i != 58) {
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	2b3a      	cmp	r3, #58	; 0x3a
 8005c86:	f47f af74 	bne.w	8005b72 <hardIronCal+0x82>
		}
	}

  //finding the calibration values

  *xCal = (xMax + xMin) / 2;
 8005c8a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8005c8e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005c92:	4413      	add	r3, r2
 8005c94:	0fda      	lsrs	r2, r3, #31
 8005c96:	4413      	add	r3, r2
 8005c98:	105b      	asrs	r3, r3, #1
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	edc3 7a00 	vstr	s15, [r3]
  *yCal = (yMax + yMin) / 2;
 8005ca8:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8005cac:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8005cb0:	4413      	add	r3, r2
 8005cb2:	0fda      	lsrs	r2, r3, #31
 8005cb4:	4413      	add	r3, r2
 8005cb6:	105b      	asrs	r3, r3, #1
 8005cb8:	ee07 3a90 	vmov	s15, r3
 8005cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	edc3 7a00 	vstr	s15, [r3]
  *zCal = (zMax + zMin) / 2;
 8005cc6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8005cca:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005cce:	4413      	add	r3, r2
 8005cd0:	0fda      	lsrs	r2, r3, #31
 8005cd2:	4413      	add	r3, r2
 8005cd4:	105b      	asrs	r3, r3, #1
 8005cd6:	ee07 3a90 	vmov	s15, r3
 8005cda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	edc3 7a00 	vstr	s15, [r3]
}
 8005ce4:	bf00      	nop
 8005ce6:	3730      	adds	r7, #48	; 0x30
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	20000000 	.word	0x20000000
 8005cf0:	20000001 	.word	0x20000001
 8005cf4:	200014b4 	.word	0x200014b4
 8005cf8:	43b48000 	.word	0x43b48000
 8005cfc:	00000000 	.word	0x00000000

08005d00 <getDirectionAngle>:

float getDirectionAngle(int16_t xMag, int16_t yMag, int16_t zMag, float xCal, float yCal, float zCal){
 8005d00:	b5b0      	push	{r4, r5, r7, lr}
 8005d02:	b088      	sub	sp, #32
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	4603      	mov	r3, r0
 8005d08:	ed87 0a03 	vstr	s0, [r7, #12]
 8005d0c:	edc7 0a02 	vstr	s1, [r7, #8]
 8005d10:	ed87 1a01 	vstr	s2, [r7, #4]
 8005d14:	82fb      	strh	r3, [r7, #22]
 8005d16:	460b      	mov	r3, r1
 8005d18:	82bb      	strh	r3, [r7, #20]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	827b      	strh	r3, [r7, #18]
  xMag -= xCal;
 8005d1e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d36:	ee17 3a90 	vmov	r3, s15
 8005d3a:	82fb      	strh	r3, [r7, #22]
  yMag -= yCal;
 8005d3c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005d40:	ee07 3a90 	vmov	s15, r3
 8005d44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d48:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d54:	ee17 3a90 	vmov	r3, s15
 8005d58:	82bb      	strh	r3, [r7, #20]
  zMag -= zCal;
 8005d5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d66:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d72:	ee17 3a90 	vmov	r3, s15
 8005d76:	827b      	strh	r3, [r7, #18]

  float D = atan2(xMag, yMag) * (180 / M_PI);
 8005d78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fa fbd9 	bl	8000534 <__aeabi_i2d>
 8005d82:	4604      	mov	r4, r0
 8005d84:	460d      	mov	r5, r1
 8005d86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fa fbd2 	bl	8000534 <__aeabi_i2d>
 8005d90:	4602      	mov	r2, r0
 8005d92:	460b      	mov	r3, r1
 8005d94:	ec43 2b11 	vmov	d1, r2, r3
 8005d98:	ec45 4b10 	vmov	d0, r4, r5
 8005d9c:	f007 fb04 	bl	800d3a8 <atan2>
 8005da0:	ec51 0b10 	vmov	r0, r1, d0
 8005da4:	a320      	add	r3, pc, #128	; (adr r3, 8005e28 <getDirectionAngle+0x128>)
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	f7fa fc2d 	bl	8000608 <__aeabi_dmul>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	4610      	mov	r0, r2
 8005db4:	4619      	mov	r1, r3
 8005db6:	f7fa feff 	bl	8000bb8 <__aeabi_d2f>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	61fb      	str	r3, [r7, #28]
  D -= 55;
 8005dbe:	edd7 7a07 	vldr	s15, [r7, #28]
 8005dc2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005e20 <getDirectionAngle+0x120>
 8005dc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005dca:	edc7 7a07 	vstr	s15, [r7, #28]
  if (D > 360) {
 8005dce:	edd7 7a07 	vldr	s15, [r7, #28]
 8005dd2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005e24 <getDirectionAngle+0x124>
 8005dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dde:	dd08      	ble.n	8005df2 <getDirectionAngle+0xf2>
    D -= 360;
 8005de0:	edd7 7a07 	vldr	s15, [r7, #28]
 8005de4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005e24 <getDirectionAngle+0x124>
 8005de8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005dec:	edc7 7a07 	vstr	s15, [r7, #28]
 8005df0:	e00e      	b.n	8005e10 <getDirectionAngle+0x110>
  }
  else if (D < 0){
 8005df2:	edd7 7a07 	vldr	s15, [r7, #28]
 8005df6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dfe:	d507      	bpl.n	8005e10 <getDirectionAngle+0x110>
    D += 360;
 8005e00:	edd7 7a07 	vldr	s15, [r7, #28]
 8005e04:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8005e24 <getDirectionAngle+0x124>
 8005e08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e0c:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  return D;
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	ee07 3a90 	vmov	s15, r3
}
 8005e16:	eeb0 0a67 	vmov.f32	s0, s15
 8005e1a:	3720      	adds	r7, #32
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8005e20:	425c0000 	.word	0x425c0000
 8005e24:	43b40000 	.word	0x43b40000
 8005e28:	1a63c1f8 	.word	0x1a63c1f8
 8005e2c:	404ca5dc 	.word	0x404ca5dc

08005e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b094      	sub	sp, #80	; 0x50
 8005e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e36:	f107 0320 	add.w	r3, r7, #32
 8005e3a:	2230      	movs	r2, #48	; 0x30
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f005 f9c3 	bl	800b1ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e44:	f107 030c 	add.w	r3, r7, #12
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	605a      	str	r2, [r3, #4]
 8005e4e:	609a      	str	r2, [r3, #8]
 8005e50:	60da      	str	r2, [r3, #12]
 8005e52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e54:	2300      	movs	r3, #0
 8005e56:	60bb      	str	r3, [r7, #8]
 8005e58:	4b27      	ldr	r3, [pc, #156]	; (8005ef8 <SystemClock_Config+0xc8>)
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5c:	4a26      	ldr	r2, [pc, #152]	; (8005ef8 <SystemClock_Config+0xc8>)
 8005e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e62:	6413      	str	r3, [r2, #64]	; 0x40
 8005e64:	4b24      	ldr	r3, [pc, #144]	; (8005ef8 <SystemClock_Config+0xc8>)
 8005e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e6c:	60bb      	str	r3, [r7, #8]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e70:	2300      	movs	r3, #0
 8005e72:	607b      	str	r3, [r7, #4]
 8005e74:	4b21      	ldr	r3, [pc, #132]	; (8005efc <SystemClock_Config+0xcc>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a20      	ldr	r2, [pc, #128]	; (8005efc <SystemClock_Config+0xcc>)
 8005e7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	4b1e      	ldr	r3, [pc, #120]	; (8005efc <SystemClock_Config+0xcc>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e88:	607b      	str	r3, [r7, #4]
 8005e8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005e90:	2301      	movs	r3, #1
 8005e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005e94:	2310      	movs	r3, #16
 8005e96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e98:	2302      	movs	r3, #2
 8005e9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005ea0:	2308      	movs	r3, #8
 8005ea2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8005ea4:	2348      	movs	r3, #72	; 0x48
 8005ea6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005eac:	2304      	movs	r3, #4
 8005eae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005eb0:	f107 0320 	add.w	r3, r7, #32
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f002 fc15 	bl	80086e4 <HAL_RCC_OscConfig>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005ec0:	f000 f9f6 	bl	80062b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005ec4:	230f      	movs	r3, #15
 8005ec6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ec8:	2302      	movs	r3, #2
 8005eca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ed4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005eda:	f107 030c 	add.w	r3, r7, #12
 8005ede:	2102      	movs	r1, #2
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f002 fe77 	bl	8008bd4 <HAL_RCC_ClockConfig>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005eec:	f000 f9e0 	bl	80062b0 <Error_Handler>
  }
}
 8005ef0:	bf00      	nop
 8005ef2:	3750      	adds	r7, #80	; 0x50
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	40007000 	.word	0x40007000

08005f00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005f06:	463b      	mov	r3, r7
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	605a      	str	r2, [r3, #4]
 8005f0e:	609a      	str	r2, [r3, #8]
 8005f10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005f12:	4b21      	ldr	r3, [pc, #132]	; (8005f98 <MX_ADC1_Init+0x98>)
 8005f14:	4a21      	ldr	r2, [pc, #132]	; (8005f9c <MX_ADC1_Init+0x9c>)
 8005f16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8005f18:	4b1f      	ldr	r3, [pc, #124]	; (8005f98 <MX_ADC1_Init+0x98>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005f1e:	4b1e      	ldr	r3, [pc, #120]	; (8005f98 <MX_ADC1_Init+0x98>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8005f24:	4b1c      	ldr	r3, [pc, #112]	; (8005f98 <MX_ADC1_Init+0x98>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005f2a:	4b1b      	ldr	r3, [pc, #108]	; (8005f98 <MX_ADC1_Init+0x98>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005f30:	4b19      	ldr	r3, [pc, #100]	; (8005f98 <MX_ADC1_Init+0x98>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005f38:	4b17      	ldr	r3, [pc, #92]	; (8005f98 <MX_ADC1_Init+0x98>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005f3e:	4b16      	ldr	r3, [pc, #88]	; (8005f98 <MX_ADC1_Init+0x98>)
 8005f40:	4a17      	ldr	r2, [pc, #92]	; (8005fa0 <MX_ADC1_Init+0xa0>)
 8005f42:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005f44:	4b14      	ldr	r3, [pc, #80]	; (8005f98 <MX_ADC1_Init+0x98>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005f4a:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <MX_ADC1_Init+0x98>)
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005f50:	4b11      	ldr	r3, [pc, #68]	; (8005f98 <MX_ADC1_Init+0x98>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005f58:	4b0f      	ldr	r3, [pc, #60]	; (8005f98 <MX_ADC1_Init+0x98>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005f5e:	480e      	ldr	r0, [pc, #56]	; (8005f98 <MX_ADC1_Init+0x98>)
 8005f60:	f000 fce8 	bl	8006934 <HAL_ADC_Init>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8005f6a:	f000 f9a1 	bl	80062b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005f72:	2301      	movs	r3, #1
 8005f74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005f76:	2300      	movs	r3, #0
 8005f78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005f7a:	463b      	mov	r3, r7
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4806      	ldr	r0, [pc, #24]	; (8005f98 <MX_ADC1_Init+0x98>)
 8005f80:	f000 fe9c 	bl	8006cbc <HAL_ADC_ConfigChannel>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8005f8a:	f000 f991 	bl	80062b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005f8e:	bf00      	nop
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	2000146c 	.word	0x2000146c
 8005f9c:	40012000 	.word	0x40012000
 8005fa0:	0f000001 	.word	0x0f000001

08005fa4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005fa8:	4b12      	ldr	r3, [pc, #72]	; (8005ff4 <MX_I2C1_Init+0x50>)
 8005faa:	4a13      	ldr	r2, [pc, #76]	; (8005ff8 <MX_I2C1_Init+0x54>)
 8005fac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005fae:	4b11      	ldr	r3, [pc, #68]	; (8005ff4 <MX_I2C1_Init+0x50>)
 8005fb0:	4a12      	ldr	r2, [pc, #72]	; (8005ffc <MX_I2C1_Init+0x58>)
 8005fb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005fb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ff4 <MX_I2C1_Init+0x50>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005fba:	4b0e      	ldr	r3, [pc, #56]	; (8005ff4 <MX_I2C1_Init+0x50>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005fc0:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <MX_I2C1_Init+0x50>)
 8005fc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005fc6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005fc8:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <MX_I2C1_Init+0x50>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005fce:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <MX_I2C1_Init+0x50>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005fd4:	4b07      	ldr	r3, [pc, #28]	; (8005ff4 <MX_I2C1_Init+0x50>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005fda:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <MX_I2C1_Init+0x50>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005fe0:	4804      	ldr	r0, [pc, #16]	; (8005ff4 <MX_I2C1_Init+0x50>)
 8005fe2:	f001 fbdb 	bl	800779c <HAL_I2C_Init>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005fec:	f000 f960 	bl	80062b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005ff0:	bf00      	nop
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	200014b4 	.word	0x200014b4
 8005ff8:	40005400 	.word	0x40005400
 8005ffc:	000186a0 	.word	0x000186a0

08006000 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8006004:	4b12      	ldr	r3, [pc, #72]	; (8006050 <MX_I2C3_Init+0x50>)
 8006006:	4a13      	ldr	r2, [pc, #76]	; (8006054 <MX_I2C3_Init+0x54>)
 8006008:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800600a:	4b11      	ldr	r3, [pc, #68]	; (8006050 <MX_I2C3_Init+0x50>)
 800600c:	4a12      	ldr	r2, [pc, #72]	; (8006058 <MX_I2C3_Init+0x58>)
 800600e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006010:	4b0f      	ldr	r3, [pc, #60]	; (8006050 <MX_I2C3_Init+0x50>)
 8006012:	2200      	movs	r2, #0
 8006014:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8006016:	4b0e      	ldr	r3, [pc, #56]	; (8006050 <MX_I2C3_Init+0x50>)
 8006018:	2200      	movs	r2, #0
 800601a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800601c:	4b0c      	ldr	r3, [pc, #48]	; (8006050 <MX_I2C3_Init+0x50>)
 800601e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006022:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006024:	4b0a      	ldr	r3, [pc, #40]	; (8006050 <MX_I2C3_Init+0x50>)
 8006026:	2200      	movs	r2, #0
 8006028:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800602a:	4b09      	ldr	r3, [pc, #36]	; (8006050 <MX_I2C3_Init+0x50>)
 800602c:	2200      	movs	r2, #0
 800602e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006030:	4b07      	ldr	r3, [pc, #28]	; (8006050 <MX_I2C3_Init+0x50>)
 8006032:	2200      	movs	r2, #0
 8006034:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006036:	4b06      	ldr	r3, [pc, #24]	; (8006050 <MX_I2C3_Init+0x50>)
 8006038:	2200      	movs	r2, #0
 800603a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800603c:	4804      	ldr	r0, [pc, #16]	; (8006050 <MX_I2C3_Init+0x50>)
 800603e:	f001 fbad 	bl	800779c <HAL_I2C_Init>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8006048:	f000 f932 	bl	80062b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800604c:	bf00      	nop
 800604e:	bd80      	pop	{r7, pc}
 8006050:	20001508 	.word	0x20001508
 8006054:	40005c00 	.word	0x40005c00
 8006058:	000186a0 	.word	0x000186a0

0800605c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006062:	f107 0308 	add.w	r3, r7, #8
 8006066:	2200      	movs	r2, #0
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	605a      	str	r2, [r3, #4]
 800606c:	609a      	str	r2, [r3, #8]
 800606e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006070:	463b      	mov	r3, r7
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006078:	4b1e      	ldr	r3, [pc, #120]	; (80060f4 <MX_TIM1_Init+0x98>)
 800607a:	4a1f      	ldr	r2, [pc, #124]	; (80060f8 <MX_TIM1_Init+0x9c>)
 800607c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800607e:	4b1d      	ldr	r3, [pc, #116]	; (80060f4 <MX_TIM1_Init+0x98>)
 8006080:	2247      	movs	r2, #71	; 0x47
 8006082:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006084:	4b1b      	ldr	r3, [pc, #108]	; (80060f4 <MX_TIM1_Init+0x98>)
 8006086:	2200      	movs	r2, #0
 8006088:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800608a:	4b1a      	ldr	r3, [pc, #104]	; (80060f4 <MX_TIM1_Init+0x98>)
 800608c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006090:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006092:	4b18      	ldr	r3, [pc, #96]	; (80060f4 <MX_TIM1_Init+0x98>)
 8006094:	2200      	movs	r2, #0
 8006096:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006098:	4b16      	ldr	r3, [pc, #88]	; (80060f4 <MX_TIM1_Init+0x98>)
 800609a:	2200      	movs	r2, #0
 800609c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800609e:	4b15      	ldr	r3, [pc, #84]	; (80060f4 <MX_TIM1_Init+0x98>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80060a4:	4813      	ldr	r0, [pc, #76]	; (80060f4 <MX_TIM1_Init+0x98>)
 80060a6:	f002 ff75 	bl	8008f94 <HAL_TIM_Base_Init>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80060b0:	f000 f8fe 	bl	80062b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80060b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80060ba:	f107 0308 	add.w	r3, r7, #8
 80060be:	4619      	mov	r1, r3
 80060c0:	480c      	ldr	r0, [pc, #48]	; (80060f4 <MX_TIM1_Init+0x98>)
 80060c2:	f003 f811 	bl	80090e8 <HAL_TIM_ConfigClockSource>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80060cc:	f000 f8f0 	bl	80062b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80060d0:	2300      	movs	r3, #0
 80060d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80060d4:	2300      	movs	r3, #0
 80060d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80060d8:	463b      	mov	r3, r7
 80060da:	4619      	mov	r1, r3
 80060dc:	4805      	ldr	r0, [pc, #20]	; (80060f4 <MX_TIM1_Init+0x98>)
 80060de:	f003 f9e5 	bl	80094ac <HAL_TIMEx_MasterConfigSynchronization>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80060e8:	f000 f8e2 	bl	80062b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80060ec:	bf00      	nop
 80060ee:	3718      	adds	r7, #24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	2000155c 	.word	0x2000155c
 80060f8:	40010000 	.word	0x40010000

080060fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006100:	4b11      	ldr	r3, [pc, #68]	; (8006148 <MX_USART1_UART_Init+0x4c>)
 8006102:	4a12      	ldr	r2, [pc, #72]	; (800614c <MX_USART1_UART_Init+0x50>)
 8006104:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006106:	4b10      	ldr	r3, [pc, #64]	; (8006148 <MX_USART1_UART_Init+0x4c>)
 8006108:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800610c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800610e:	4b0e      	ldr	r3, [pc, #56]	; (8006148 <MX_USART1_UART_Init+0x4c>)
 8006110:	2200      	movs	r2, #0
 8006112:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006114:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <MX_USART1_UART_Init+0x4c>)
 8006116:	2200      	movs	r2, #0
 8006118:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800611a:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <MX_USART1_UART_Init+0x4c>)
 800611c:	2200      	movs	r2, #0
 800611e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006120:	4b09      	ldr	r3, [pc, #36]	; (8006148 <MX_USART1_UART_Init+0x4c>)
 8006122:	220c      	movs	r2, #12
 8006124:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006126:	4b08      	ldr	r3, [pc, #32]	; (8006148 <MX_USART1_UART_Init+0x4c>)
 8006128:	2200      	movs	r2, #0
 800612a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800612c:	4b06      	ldr	r3, [pc, #24]	; (8006148 <MX_USART1_UART_Init+0x4c>)
 800612e:	2200      	movs	r2, #0
 8006130:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006132:	4805      	ldr	r0, [pc, #20]	; (8006148 <MX_USART1_UART_Init+0x4c>)
 8006134:	f003 fa28 	bl	8009588 <HAL_UART_Init>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800613e:	f000 f8b7 	bl	80062b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006142:	bf00      	nop
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	200015a4 	.word	0x200015a4
 800614c:	40011000 	.word	0x40011000

08006150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08a      	sub	sp, #40	; 0x28
 8006154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006156:	f107 0314 	add.w	r3, r7, #20
 800615a:	2200      	movs	r2, #0
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	605a      	str	r2, [r3, #4]
 8006160:	609a      	str	r2, [r3, #8]
 8006162:	60da      	str	r2, [r3, #12]
 8006164:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006166:	2300      	movs	r3, #0
 8006168:	613b      	str	r3, [r7, #16]
 800616a:	4b4c      	ldr	r3, [pc, #304]	; (800629c <MX_GPIO_Init+0x14c>)
 800616c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616e:	4a4b      	ldr	r2, [pc, #300]	; (800629c <MX_GPIO_Init+0x14c>)
 8006170:	f043 0304 	orr.w	r3, r3, #4
 8006174:	6313      	str	r3, [r2, #48]	; 0x30
 8006176:	4b49      	ldr	r3, [pc, #292]	; (800629c <MX_GPIO_Init+0x14c>)
 8006178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617a:	f003 0304 	and.w	r3, r3, #4
 800617e:	613b      	str	r3, [r7, #16]
 8006180:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006182:	2300      	movs	r3, #0
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	4b45      	ldr	r3, [pc, #276]	; (800629c <MX_GPIO_Init+0x14c>)
 8006188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618a:	4a44      	ldr	r2, [pc, #272]	; (800629c <MX_GPIO_Init+0x14c>)
 800618c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006190:	6313      	str	r3, [r2, #48]	; 0x30
 8006192:	4b42      	ldr	r3, [pc, #264]	; (800629c <MX_GPIO_Init+0x14c>)
 8006194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800619e:	2300      	movs	r3, #0
 80061a0:	60bb      	str	r3, [r7, #8]
 80061a2:	4b3e      	ldr	r3, [pc, #248]	; (800629c <MX_GPIO_Init+0x14c>)
 80061a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a6:	4a3d      	ldr	r2, [pc, #244]	; (800629c <MX_GPIO_Init+0x14c>)
 80061a8:	f043 0301 	orr.w	r3, r3, #1
 80061ac:	6313      	str	r3, [r2, #48]	; 0x30
 80061ae:	4b3b      	ldr	r3, [pc, #236]	; (800629c <MX_GPIO_Init+0x14c>)
 80061b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	60bb      	str	r3, [r7, #8]
 80061b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80061ba:	2300      	movs	r3, #0
 80061bc:	607b      	str	r3, [r7, #4]
 80061be:	4b37      	ldr	r3, [pc, #220]	; (800629c <MX_GPIO_Init+0x14c>)
 80061c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c2:	4a36      	ldr	r2, [pc, #216]	; (800629c <MX_GPIO_Init+0x14c>)
 80061c4:	f043 0302 	orr.w	r3, r3, #2
 80061c8:	6313      	str	r3, [r2, #48]	; 0x30
 80061ca:	4b34      	ldr	r3, [pc, #208]	; (800629c <MX_GPIO_Init+0x14c>)
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	607b      	str	r3, [r7, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80061d6:	2300      	movs	r3, #0
 80061d8:	603b      	str	r3, [r7, #0]
 80061da:	4b30      	ldr	r3, [pc, #192]	; (800629c <MX_GPIO_Init+0x14c>)
 80061dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061de:	4a2f      	ldr	r2, [pc, #188]	; (800629c <MX_GPIO_Init+0x14c>)
 80061e0:	f043 0308 	orr.w	r3, r3, #8
 80061e4:	6313      	str	r3, [r2, #48]	; 0x30
 80061e6:	4b2d      	ldr	r3, [pc, #180]	; (800629c <MX_GPIO_Init+0x14c>)
 80061e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ea:	f003 0308 	and.w	r3, r3, #8
 80061ee:	603b      	str	r3, [r7, #0]
 80061f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Extra_PC0_Pin|Extra_PC1_Pin|Extra_PC4_Pin|Solar_Panel_Voltage_LED_Pin
 80061f2:	2200      	movs	r2, #0
 80061f4:	f641 5193 	movw	r1, #7571	; 0x1d93
 80061f8:	4829      	ldr	r0, [pc, #164]	; (80062a0 <MX_GPIO_Init+0x150>)
 80061fa:	f001 fab5 	bl	8007768 <HAL_GPIO_WritePin>
                          |Debug_LED_Pin|Step_Rod_Logic_Pin|Direction_Rod_Logic_Pin|Enable_Rod_Logic_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Extra_PA1_Pin|Extra_PA2_Pin|Extra_PA3_Pin|Extra_PA4_Pin, GPIO_PIN_RESET);
 80061fe:	2200      	movs	r2, #0
 8006200:	211e      	movs	r1, #30
 8006202:	4828      	ldr	r0, [pc, #160]	; (80062a4 <MX_GPIO_Init+0x154>)
 8006204:	f001 fab0 	bl	8007768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Extra_PB12_Pin|Extra_PB13_Pin|Extra_PB14_Pin|Extra_PB15_Pin
 8006208:	2200      	movs	r2, #0
 800620a:	f24f 01f8 	movw	r1, #61688	; 0xf0f8
 800620e:	4826      	ldr	r0, [pc, #152]	; (80062a8 <MX_GPIO_Init+0x158>)
 8006210:	f001 faaa 	bl	8007768 <HAL_GPIO_WritePin>
                          |Extra_PB3_Pin|Enable_Susan_Logic_Pin|Step_Susan_Logic_Pin|Direction_Susan_Logic_Pin
                          |nSleep_Susan_Logic_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSleep_Rod_Logic_GPIO_Port, nSleep_Rod_Logic_Pin, GPIO_PIN_RESET);
 8006214:	2200      	movs	r2, #0
 8006216:	2104      	movs	r1, #4
 8006218:	4824      	ldr	r0, [pc, #144]	; (80062ac <MX_GPIO_Init+0x15c>)
 800621a:	f001 faa5 	bl	8007768 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Extra_PC0_Pin Extra_PC1_Pin Extra_PC4_Pin Solar_Panel_Voltage_LED_Pin
                           Debug_LED_Pin Step_Rod_Logic_Pin Direction_Rod_Logic_Pin Enable_Rod_Logic_Pin */
  GPIO_InitStruct.Pin = Extra_PC0_Pin|Extra_PC1_Pin|Extra_PC4_Pin|Solar_Panel_Voltage_LED_Pin
 800621e:	f641 5393 	movw	r3, #7571	; 0x1d93
 8006222:	617b      	str	r3, [r7, #20]
                          |Debug_LED_Pin|Step_Rod_Logic_Pin|Direction_Rod_Logic_Pin|Enable_Rod_Logic_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006224:	2301      	movs	r3, #1
 8006226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006228:	2300      	movs	r3, #0
 800622a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800622c:	2300      	movs	r3, #0
 800622e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006230:	f107 0314 	add.w	r3, r7, #20
 8006234:	4619      	mov	r1, r3
 8006236:	481a      	ldr	r0, [pc, #104]	; (80062a0 <MX_GPIO_Init+0x150>)
 8006238:	f001 f912 	bl	8007460 <HAL_GPIO_Init>

  /*Configure GPIO pins : Extra_PA1_Pin Extra_PA2_Pin Extra_PA3_Pin Extra_PA4_Pin */
  GPIO_InitStruct.Pin = Extra_PA1_Pin|Extra_PA2_Pin|Extra_PA3_Pin|Extra_PA4_Pin;
 800623c:	231e      	movs	r3, #30
 800623e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006240:	2301      	movs	r3, #1
 8006242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006244:	2300      	movs	r3, #0
 8006246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006248:	2300      	movs	r3, #0
 800624a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800624c:	f107 0314 	add.w	r3, r7, #20
 8006250:	4619      	mov	r1, r3
 8006252:	4814      	ldr	r0, [pc, #80]	; (80062a4 <MX_GPIO_Init+0x154>)
 8006254:	f001 f904 	bl	8007460 <HAL_GPIO_Init>

  /*Configure GPIO pins : Extra_PB12_Pin Extra_PB13_Pin Extra_PB14_Pin Extra_PB15_Pin
                           Extra_PB3_Pin Enable_Susan_Logic_Pin Step_Susan_Logic_Pin Direction_Susan_Logic_Pin
                           nSleep_Susan_Logic_Pin */
  GPIO_InitStruct.Pin = Extra_PB12_Pin|Extra_PB13_Pin|Extra_PB14_Pin|Extra_PB15_Pin
 8006258:	f24f 03f8 	movw	r3, #61688	; 0xf0f8
 800625c:	617b      	str	r3, [r7, #20]
                          |Extra_PB3_Pin|Enable_Susan_Logic_Pin|Step_Susan_Logic_Pin|Direction_Susan_Logic_Pin
                          |nSleep_Susan_Logic_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800625e:	2301      	movs	r3, #1
 8006260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006262:	2300      	movs	r3, #0
 8006264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006266:	2300      	movs	r3, #0
 8006268:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800626a:	f107 0314 	add.w	r3, r7, #20
 800626e:	4619      	mov	r1, r3
 8006270:	480d      	ldr	r0, [pc, #52]	; (80062a8 <MX_GPIO_Init+0x158>)
 8006272:	f001 f8f5 	bl	8007460 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSleep_Rod_Logic_Pin */
  GPIO_InitStruct.Pin = nSleep_Rod_Logic_Pin;
 8006276:	2304      	movs	r3, #4
 8006278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800627a:	2301      	movs	r3, #1
 800627c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800627e:	2300      	movs	r3, #0
 8006280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006282:	2300      	movs	r3, #0
 8006284:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nSleep_Rod_Logic_GPIO_Port, &GPIO_InitStruct);
 8006286:	f107 0314 	add.w	r3, r7, #20
 800628a:	4619      	mov	r1, r3
 800628c:	4807      	ldr	r0, [pc, #28]	; (80062ac <MX_GPIO_Init+0x15c>)
 800628e:	f001 f8e7 	bl	8007460 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006292:	bf00      	nop
 8006294:	3728      	adds	r7, #40	; 0x28
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	40023800 	.word	0x40023800
 80062a0:	40020800 	.word	0x40020800
 80062a4:	40020000 	.word	0x40020000
 80062a8:	40020400 	.word	0x40020400
 80062ac:	40020c00 	.word	0x40020c00

080062b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80062b4:	b672      	cpsid	i
}
 80062b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80062b8:	e7fe      	b.n	80062b8 <Error_Handler+0x8>
	...

080062bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062c2:	2300      	movs	r3, #0
 80062c4:	607b      	str	r3, [r7, #4]
 80062c6:	4b10      	ldr	r3, [pc, #64]	; (8006308 <HAL_MspInit+0x4c>)
 80062c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ca:	4a0f      	ldr	r2, [pc, #60]	; (8006308 <HAL_MspInit+0x4c>)
 80062cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062d0:	6453      	str	r3, [r2, #68]	; 0x44
 80062d2:	4b0d      	ldr	r3, [pc, #52]	; (8006308 <HAL_MspInit+0x4c>)
 80062d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062da:	607b      	str	r3, [r7, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80062de:	2300      	movs	r3, #0
 80062e0:	603b      	str	r3, [r7, #0]
 80062e2:	4b09      	ldr	r3, [pc, #36]	; (8006308 <HAL_MspInit+0x4c>)
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	4a08      	ldr	r2, [pc, #32]	; (8006308 <HAL_MspInit+0x4c>)
 80062e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ec:	6413      	str	r3, [r2, #64]	; 0x40
 80062ee:	4b06      	ldr	r3, [pc, #24]	; (8006308 <HAL_MspInit+0x4c>)
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062f6:	603b      	str	r3, [r7, #0]
 80062f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80062fa:	bf00      	nop
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	40023800 	.word	0x40023800

0800630c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08a      	sub	sp, #40	; 0x28
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006314:	f107 0314 	add.w	r3, r7, #20
 8006318:	2200      	movs	r2, #0
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	605a      	str	r2, [r3, #4]
 800631e:	609a      	str	r2, [r3, #8]
 8006320:	60da      	str	r2, [r3, #12]
 8006322:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a17      	ldr	r2, [pc, #92]	; (8006388 <HAL_ADC_MspInit+0x7c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d127      	bne.n	800637e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800632e:	2300      	movs	r3, #0
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	4b16      	ldr	r3, [pc, #88]	; (800638c <HAL_ADC_MspInit+0x80>)
 8006334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006336:	4a15      	ldr	r2, [pc, #84]	; (800638c <HAL_ADC_MspInit+0x80>)
 8006338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800633c:	6453      	str	r3, [r2, #68]	; 0x44
 800633e:	4b13      	ldr	r3, [pc, #76]	; (800638c <HAL_ADC_MspInit+0x80>)
 8006340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006346:	613b      	str	r3, [r7, #16]
 8006348:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800634a:	2300      	movs	r3, #0
 800634c:	60fb      	str	r3, [r7, #12]
 800634e:	4b0f      	ldr	r3, [pc, #60]	; (800638c <HAL_ADC_MspInit+0x80>)
 8006350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006352:	4a0e      	ldr	r2, [pc, #56]	; (800638c <HAL_ADC_MspInit+0x80>)
 8006354:	f043 0301 	orr.w	r3, r3, #1
 8006358:	6313      	str	r3, [r2, #48]	; 0x30
 800635a:	4b0c      	ldr	r3, [pc, #48]	; (800638c <HAL_ADC_MspInit+0x80>)
 800635c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Voltage_Divider_Pin;
 8006366:	2301      	movs	r3, #1
 8006368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800636a:	2303      	movs	r3, #3
 800636c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800636e:	2300      	movs	r3, #0
 8006370:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Voltage_Divider_GPIO_Port, &GPIO_InitStruct);
 8006372:	f107 0314 	add.w	r3, r7, #20
 8006376:	4619      	mov	r1, r3
 8006378:	4805      	ldr	r0, [pc, #20]	; (8006390 <HAL_ADC_MspInit+0x84>)
 800637a:	f001 f871 	bl	8007460 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800637e:	bf00      	nop
 8006380:	3728      	adds	r7, #40	; 0x28
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	40012000 	.word	0x40012000
 800638c:	40023800 	.word	0x40023800
 8006390:	40020000 	.word	0x40020000

08006394 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b08c      	sub	sp, #48	; 0x30
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800639c:	f107 031c 	add.w	r3, r7, #28
 80063a0:	2200      	movs	r2, #0
 80063a2:	601a      	str	r2, [r3, #0]
 80063a4:	605a      	str	r2, [r3, #4]
 80063a6:	609a      	str	r2, [r3, #8]
 80063a8:	60da      	str	r2, [r3, #12]
 80063aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a42      	ldr	r2, [pc, #264]	; (80064bc <HAL_I2C_MspInit+0x128>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d12d      	bne.n	8006412 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063b6:	2300      	movs	r3, #0
 80063b8:	61bb      	str	r3, [r7, #24]
 80063ba:	4b41      	ldr	r3, [pc, #260]	; (80064c0 <HAL_I2C_MspInit+0x12c>)
 80063bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063be:	4a40      	ldr	r2, [pc, #256]	; (80064c0 <HAL_I2C_MspInit+0x12c>)
 80063c0:	f043 0302 	orr.w	r3, r3, #2
 80063c4:	6313      	str	r3, [r2, #48]	; 0x30
 80063c6:	4b3e      	ldr	r3, [pc, #248]	; (80064c0 <HAL_I2C_MspInit+0x12c>)
 80063c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	61bb      	str	r3, [r7, #24]
 80063d0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPS_and_MAG_I2C_SCL_Pin|GPS_and_MAG_I2C_SDA_Pin;
 80063d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80063d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80063d8:	2312      	movs	r3, #18
 80063da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063dc:	2300      	movs	r3, #0
 80063de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063e0:	2303      	movs	r3, #3
 80063e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80063e4:	2304      	movs	r3, #4
 80063e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063e8:	f107 031c 	add.w	r3, r7, #28
 80063ec:	4619      	mov	r1, r3
 80063ee:	4835      	ldr	r0, [pc, #212]	; (80064c4 <HAL_I2C_MspInit+0x130>)
 80063f0:	f001 f836 	bl	8007460 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80063f4:	2300      	movs	r3, #0
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	4b31      	ldr	r3, [pc, #196]	; (80064c0 <HAL_I2C_MspInit+0x12c>)
 80063fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fc:	4a30      	ldr	r2, [pc, #192]	; (80064c0 <HAL_I2C_MspInit+0x12c>)
 80063fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006402:	6413      	str	r3, [r2, #64]	; 0x40
 8006404:	4b2e      	ldr	r3, [pc, #184]	; (80064c0 <HAL_I2C_MspInit+0x12c>)
 8006406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8006410:	e050      	b.n	80064b4 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a2c      	ldr	r2, [pc, #176]	; (80064c8 <HAL_I2C_MspInit+0x134>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d14b      	bne.n	80064b4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800641c:	2300      	movs	r3, #0
 800641e:	613b      	str	r3, [r7, #16]
 8006420:	4b27      	ldr	r3, [pc, #156]	; (80064c0 <HAL_I2C_MspInit+0x12c>)
 8006422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006424:	4a26      	ldr	r2, [pc, #152]	; (80064c0 <HAL_I2C_MspInit+0x12c>)
 8006426:	f043 0304 	orr.w	r3, r3, #4
 800642a:	6313      	str	r3, [r2, #48]	; 0x30
 800642c:	4b24      	ldr	r3, [pc, #144]	; (80064c0 <HAL_I2C_MspInit+0x12c>)
 800642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006430:	f003 0304 	and.w	r3, r3, #4
 8006434:	613b      	str	r3, [r7, #16]
 8006436:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006438:	2300      	movs	r3, #0
 800643a:	60fb      	str	r3, [r7, #12]
 800643c:	4b20      	ldr	r3, [pc, #128]	; (80064c0 <HAL_I2C_MspInit+0x12c>)
 800643e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006440:	4a1f      	ldr	r2, [pc, #124]	; (80064c0 <HAL_I2C_MspInit+0x12c>)
 8006442:	f043 0301 	orr.w	r3, r3, #1
 8006446:	6313      	str	r3, [r2, #48]	; 0x30
 8006448:	4b1d      	ldr	r3, [pc, #116]	; (80064c0 <HAL_I2C_MspInit+0x12c>)
 800644a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C_Light_SDA_Pin;
 8006454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800645a:	2312      	movs	r3, #18
 800645c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800645e:	2300      	movs	r3, #0
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006462:	2303      	movs	r3, #3
 8006464:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006466:	2304      	movs	r3, #4
 8006468:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C_Light_SDA_GPIO_Port, &GPIO_InitStruct);
 800646a:	f107 031c 	add.w	r3, r7, #28
 800646e:	4619      	mov	r1, r3
 8006470:	4816      	ldr	r0, [pc, #88]	; (80064cc <HAL_I2C_MspInit+0x138>)
 8006472:	f000 fff5 	bl	8007460 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C_Light_SCL_Pin;
 8006476:	f44f 7380 	mov.w	r3, #256	; 0x100
 800647a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800647c:	2312      	movs	r3, #18
 800647e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006480:	2300      	movs	r3, #0
 8006482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006484:	2303      	movs	r3, #3
 8006486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006488:	2304      	movs	r3, #4
 800648a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C_Light_SCL_GPIO_Port, &GPIO_InitStruct);
 800648c:	f107 031c 	add.w	r3, r7, #28
 8006490:	4619      	mov	r1, r3
 8006492:	480f      	ldr	r0, [pc, #60]	; (80064d0 <HAL_I2C_MspInit+0x13c>)
 8006494:	f000 ffe4 	bl	8007460 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006498:	2300      	movs	r3, #0
 800649a:	60bb      	str	r3, [r7, #8]
 800649c:	4b08      	ldr	r3, [pc, #32]	; (80064c0 <HAL_I2C_MspInit+0x12c>)
 800649e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a0:	4a07      	ldr	r2, [pc, #28]	; (80064c0 <HAL_I2C_MspInit+0x12c>)
 80064a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80064a6:	6413      	str	r3, [r2, #64]	; 0x40
 80064a8:	4b05      	ldr	r3, [pc, #20]	; (80064c0 <HAL_I2C_MspInit+0x12c>)
 80064aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064b0:	60bb      	str	r3, [r7, #8]
 80064b2:	68bb      	ldr	r3, [r7, #8]
}
 80064b4:	bf00      	nop
 80064b6:	3730      	adds	r7, #48	; 0x30
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	40005400 	.word	0x40005400
 80064c0:	40023800 	.word	0x40023800
 80064c4:	40020400 	.word	0x40020400
 80064c8:	40005c00 	.word	0x40005c00
 80064cc:	40020800 	.word	0x40020800
 80064d0:	40020000 	.word	0x40020000

080064d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a15      	ldr	r2, [pc, #84]	; (8006538 <HAL_TIM_Base_MspInit+0x64>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d10e      	bne.n	8006504 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	4b14      	ldr	r3, [pc, #80]	; (800653c <HAL_TIM_Base_MspInit+0x68>)
 80064ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ee:	4a13      	ldr	r2, [pc, #76]	; (800653c <HAL_TIM_Base_MspInit+0x68>)
 80064f0:	f043 0301 	orr.w	r3, r3, #1
 80064f4:	6453      	str	r3, [r2, #68]	; 0x44
 80064f6:	4b11      	ldr	r3, [pc, #68]	; (800653c <HAL_TIM_Base_MspInit+0x68>)
 80064f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	60fb      	str	r3, [r7, #12]
 8006500:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8006502:	e012      	b.n	800652a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a0d      	ldr	r2, [pc, #52]	; (8006540 <HAL_TIM_Base_MspInit+0x6c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d10d      	bne.n	800652a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800650e:	2300      	movs	r3, #0
 8006510:	60bb      	str	r3, [r7, #8]
 8006512:	4b0a      	ldr	r3, [pc, #40]	; (800653c <HAL_TIM_Base_MspInit+0x68>)
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	4a09      	ldr	r2, [pc, #36]	; (800653c <HAL_TIM_Base_MspInit+0x68>)
 8006518:	f043 0308 	orr.w	r3, r3, #8
 800651c:	6413      	str	r3, [r2, #64]	; 0x40
 800651e:	4b07      	ldr	r3, [pc, #28]	; (800653c <HAL_TIM_Base_MspInit+0x68>)
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	f003 0308 	and.w	r3, r3, #8
 8006526:	60bb      	str	r3, [r7, #8]
 8006528:	68bb      	ldr	r3, [r7, #8]
}
 800652a:	bf00      	nop
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	40010000 	.word	0x40010000
 800653c:	40023800 	.word	0x40023800
 8006540:	40000c00 	.word	0x40000c00

08006544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b08a      	sub	sp, #40	; 0x28
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800654c:	f107 0314 	add.w	r3, r7, #20
 8006550:	2200      	movs	r2, #0
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	605a      	str	r2, [r3, #4]
 8006556:	609a      	str	r2, [r3, #8]
 8006558:	60da      	str	r2, [r3, #12]
 800655a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a1d      	ldr	r2, [pc, #116]	; (80065d8 <HAL_UART_MspInit+0x94>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d134      	bne.n	80065d0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006566:	2300      	movs	r3, #0
 8006568:	613b      	str	r3, [r7, #16]
 800656a:	4b1c      	ldr	r3, [pc, #112]	; (80065dc <HAL_UART_MspInit+0x98>)
 800656c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656e:	4a1b      	ldr	r2, [pc, #108]	; (80065dc <HAL_UART_MspInit+0x98>)
 8006570:	f043 0310 	orr.w	r3, r3, #16
 8006574:	6453      	str	r3, [r2, #68]	; 0x44
 8006576:	4b19      	ldr	r3, [pc, #100]	; (80065dc <HAL_UART_MspInit+0x98>)
 8006578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657a:	f003 0310 	and.w	r3, r3, #16
 800657e:	613b      	str	r3, [r7, #16]
 8006580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006582:	2300      	movs	r3, #0
 8006584:	60fb      	str	r3, [r7, #12]
 8006586:	4b15      	ldr	r3, [pc, #84]	; (80065dc <HAL_UART_MspInit+0x98>)
 8006588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658a:	4a14      	ldr	r2, [pc, #80]	; (80065dc <HAL_UART_MspInit+0x98>)
 800658c:	f043 0301 	orr.w	r3, r3, #1
 8006590:	6313      	str	r3, [r2, #48]	; 0x30
 8006592:	4b12      	ldr	r3, [pc, #72]	; (80065dc <HAL_UART_MspInit+0x98>)
 8006594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_RX_Pin|Bluetooth_TX_Pin;
 800659e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80065a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065a4:	2302      	movs	r3, #2
 80065a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065a8:	2300      	movs	r3, #0
 80065aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065ac:	2303      	movs	r3, #3
 80065ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80065b0:	2307      	movs	r3, #7
 80065b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065b4:	f107 0314 	add.w	r3, r7, #20
 80065b8:	4619      	mov	r1, r3
 80065ba:	4809      	ldr	r0, [pc, #36]	; (80065e0 <HAL_UART_MspInit+0x9c>)
 80065bc:	f000 ff50 	bl	8007460 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80065c0:	2200      	movs	r2, #0
 80065c2:	2100      	movs	r1, #0
 80065c4:	2025      	movs	r0, #37	; 0x25
 80065c6:	f000 fe82 	bl	80072ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80065ca:	2025      	movs	r0, #37	; 0x25
 80065cc:	f000 fe9b 	bl	8007306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80065d0:	bf00      	nop
 80065d2:	3728      	adds	r7, #40	; 0x28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	40011000 	.word	0x40011000
 80065dc:	40023800 	.word	0x40023800
 80065e0:	40020000 	.word	0x40020000

080065e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80065e8:	e7fe      	b.n	80065e8 <NMI_Handler+0x4>

080065ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80065ea:	b480      	push	{r7}
 80065ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80065ee:	e7fe      	b.n	80065ee <HardFault_Handler+0x4>

080065f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80065f0:	b480      	push	{r7}
 80065f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80065f4:	e7fe      	b.n	80065f4 <MemManage_Handler+0x4>

080065f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80065f6:	b480      	push	{r7}
 80065f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80065fa:	e7fe      	b.n	80065fa <BusFault_Handler+0x4>

080065fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006600:	e7fe      	b.n	8006600 <UsageFault_Handler+0x4>

08006602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006602:	b480      	push	{r7}
 8006604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006606:	bf00      	nop
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006614:	bf00      	nop
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800661e:	b480      	push	{r7}
 8006620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006622:	bf00      	nop
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006630:	f000 f960 	bl	80068f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006634:	bf00      	nop
 8006636:	bd80      	pop	{r7, pc}

08006638 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800663c:	4802      	ldr	r0, [pc, #8]	; (8006648 <USART1_IRQHandler+0x10>)
 800663e:	f003 f835 	bl	80096ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006642:	bf00      	nop
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	200015a4 	.word	0x200015a4

0800664c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0
  return 1;
 8006650:	2301      	movs	r3, #1
}
 8006652:	4618      	mov	r0, r3
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <_kill>:

int _kill(int pid, int sig)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006666:	f004 fe81 	bl	800b36c <__errno>
 800666a:	4603      	mov	r3, r0
 800666c:	2216      	movs	r2, #22
 800666e:	601a      	str	r2, [r3, #0]
  return -1;
 8006670:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006674:	4618      	mov	r0, r3
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <_exit>:

void _exit (int status)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006684:	f04f 31ff 	mov.w	r1, #4294967295
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff ffe7 	bl	800665c <_kill>
  while (1) {}    /* Make sure we hang here */
 800668e:	e7fe      	b.n	800668e <_exit+0x12>

08006690 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800669c:	2300      	movs	r3, #0
 800669e:	617b      	str	r3, [r7, #20]
 80066a0:	e00a      	b.n	80066b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80066a2:	f3af 8000 	nop.w
 80066a6:	4601      	mov	r1, r0
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	60ba      	str	r2, [r7, #8]
 80066ae:	b2ca      	uxtb	r2, r1
 80066b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	3301      	adds	r3, #1
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	429a      	cmp	r2, r3
 80066be:	dbf0      	blt.n	80066a2 <_read+0x12>
  }

  return len;
 80066c0:	687b      	ldr	r3, [r7, #4]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3718      	adds	r7, #24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b086      	sub	sp, #24
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066d6:	2300      	movs	r3, #0
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	e009      	b.n	80066f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	1c5a      	adds	r2, r3, #1
 80066e0:	60ba      	str	r2, [r7, #8]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	3301      	adds	r3, #1
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	dbf1      	blt.n	80066dc <_write+0x12>
  }
  return len;
 80066f8:	687b      	ldr	r3, [r7, #4]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <_close>:

int _close(int file)
{
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800670a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800670e:	4618      	mov	r0, r3
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800672a:	605a      	str	r2, [r3, #4]
  return 0;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <_isatty>:

int _isatty(int file)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006742:	2301      	movs	r3, #1
}
 8006744:	4618      	mov	r0, r3
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
	...

0800676c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006774:	4a14      	ldr	r2, [pc, #80]	; (80067c8 <_sbrk+0x5c>)
 8006776:	4b15      	ldr	r3, [pc, #84]	; (80067cc <_sbrk+0x60>)
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006780:	4b13      	ldr	r3, [pc, #76]	; (80067d0 <_sbrk+0x64>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d102      	bne.n	800678e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006788:	4b11      	ldr	r3, [pc, #68]	; (80067d0 <_sbrk+0x64>)
 800678a:	4a12      	ldr	r2, [pc, #72]	; (80067d4 <_sbrk+0x68>)
 800678c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800678e:	4b10      	ldr	r3, [pc, #64]	; (80067d0 <_sbrk+0x64>)
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4413      	add	r3, r2
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	429a      	cmp	r2, r3
 800679a:	d207      	bcs.n	80067ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800679c:	f004 fde6 	bl	800b36c <__errno>
 80067a0:	4603      	mov	r3, r0
 80067a2:	220c      	movs	r2, #12
 80067a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80067a6:	f04f 33ff 	mov.w	r3, #4294967295
 80067aa:	e009      	b.n	80067c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80067ac:	4b08      	ldr	r3, [pc, #32]	; (80067d0 <_sbrk+0x64>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80067b2:	4b07      	ldr	r3, [pc, #28]	; (80067d0 <_sbrk+0x64>)
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4413      	add	r3, r2
 80067ba:	4a05      	ldr	r2, [pc, #20]	; (80067d0 <_sbrk+0x64>)
 80067bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80067be:	68fb      	ldr	r3, [r7, #12]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3718      	adds	r7, #24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	20020000 	.word	0x20020000
 80067cc:	00000400 	.word	0x00000400
 80067d0:	200015e8 	.word	0x200015e8
 80067d4:	20001740 	.word	0x20001740

080067d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80067dc:	4b06      	ldr	r3, [pc, #24]	; (80067f8 <SystemInit+0x20>)
 80067de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e2:	4a05      	ldr	r2, [pc, #20]	; (80067f8 <SystemInit+0x20>)
 80067e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80067ec:	bf00      	nop
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	e000ed00 	.word	0xe000ed00

080067fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80067fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006834 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006800:	480d      	ldr	r0, [pc, #52]	; (8006838 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006802:	490e      	ldr	r1, [pc, #56]	; (800683c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006804:	4a0e      	ldr	r2, [pc, #56]	; (8006840 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006808:	e002      	b.n	8006810 <LoopCopyDataInit>

0800680a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800680a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800680c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800680e:	3304      	adds	r3, #4

08006810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006814:	d3f9      	bcc.n	800680a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006816:	4a0b      	ldr	r2, [pc, #44]	; (8006844 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006818:	4c0b      	ldr	r4, [pc, #44]	; (8006848 <LoopFillZerobss+0x26>)
  movs r3, #0
 800681a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800681c:	e001      	b.n	8006822 <LoopFillZerobss>

0800681e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800681e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006820:	3204      	adds	r2, #4

08006822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006824:	d3fb      	bcc.n	800681e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006826:	f7ff ffd7 	bl	80067d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800682a:	f004 fda5 	bl	800b378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800682e:	f7fd fee3 	bl	80045f8 <main>
  bx  lr    
 8006832:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006834:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800683c:	20001450 	.word	0x20001450
  ldr r2, =_sidata
 8006840:	080113b0 	.word	0x080113b0
  ldr r2, =_sbss
 8006844:	20001450 	.word	0x20001450
  ldr r4, =_ebss
 8006848:	2000173c 	.word	0x2000173c

0800684c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800684c:	e7fe      	b.n	800684c <ADC_IRQHandler>
	...

08006850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006854:	4b0e      	ldr	r3, [pc, #56]	; (8006890 <HAL_Init+0x40>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a0d      	ldr	r2, [pc, #52]	; (8006890 <HAL_Init+0x40>)
 800685a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800685e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006860:	4b0b      	ldr	r3, [pc, #44]	; (8006890 <HAL_Init+0x40>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a0a      	ldr	r2, [pc, #40]	; (8006890 <HAL_Init+0x40>)
 8006866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800686a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800686c:	4b08      	ldr	r3, [pc, #32]	; (8006890 <HAL_Init+0x40>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a07      	ldr	r2, [pc, #28]	; (8006890 <HAL_Init+0x40>)
 8006872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006876:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006878:	2003      	movs	r0, #3
 800687a:	f000 fd1d 	bl	80072b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800687e:	200f      	movs	r0, #15
 8006880:	f000 f808 	bl	8006894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006884:	f7ff fd1a 	bl	80062bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	40023c00 	.word	0x40023c00

08006894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800689c:	4b12      	ldr	r3, [pc, #72]	; (80068e8 <HAL_InitTick+0x54>)
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	4b12      	ldr	r3, [pc, #72]	; (80068ec <HAL_InitTick+0x58>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	4619      	mov	r1, r3
 80068a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80068ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fd35 	bl	8007322 <HAL_SYSTICK_Config>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e00e      	b.n	80068e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b0f      	cmp	r3, #15
 80068c6:	d80a      	bhi.n	80068de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80068c8:	2200      	movs	r2, #0
 80068ca:	6879      	ldr	r1, [r7, #4]
 80068cc:	f04f 30ff 	mov.w	r0, #4294967295
 80068d0:	f000 fcfd 	bl	80072ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80068d4:	4a06      	ldr	r2, [pc, #24]	; (80068f0 <HAL_InitTick+0x5c>)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	e000      	b.n	80068e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	20001268 	.word	0x20001268
 80068ec:	20001270 	.word	0x20001270
 80068f0:	2000126c 	.word	0x2000126c

080068f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80068f8:	4b06      	ldr	r3, [pc, #24]	; (8006914 <HAL_IncTick+0x20>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	461a      	mov	r2, r3
 80068fe:	4b06      	ldr	r3, [pc, #24]	; (8006918 <HAL_IncTick+0x24>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4413      	add	r3, r2
 8006904:	4a04      	ldr	r2, [pc, #16]	; (8006918 <HAL_IncTick+0x24>)
 8006906:	6013      	str	r3, [r2, #0]
}
 8006908:	bf00      	nop
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	20001270 	.word	0x20001270
 8006918:	200015ec 	.word	0x200015ec

0800691c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0
  return uwTick;
 8006920:	4b03      	ldr	r3, [pc, #12]	; (8006930 <HAL_GetTick+0x14>)
 8006922:	681b      	ldr	r3, [r3, #0]
}
 8006924:	4618      	mov	r0, r3
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	200015ec 	.word	0x200015ec

08006934 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e033      	b.n	80069b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	2b00      	cmp	r3, #0
 8006950:	d109      	bne.n	8006966 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7ff fcda 	bl	800630c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	f003 0310 	and.w	r3, r3, #16
 800696e:	2b00      	cmp	r3, #0
 8006970:	d118      	bne.n	80069a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800697a:	f023 0302 	bic.w	r3, r3, #2
 800697e:	f043 0202 	orr.w	r2, r3, #2
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 faca 	bl	8006f20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	f023 0303 	bic.w	r3, r3, #3
 800699a:	f043 0201 	orr.w	r2, r3, #1
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	641a      	str	r2, [r3, #64]	; 0x40
 80069a2:	e001      	b.n	80069a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d101      	bne.n	80069d6 <HAL_ADC_Start+0x1a>
 80069d2:	2302      	movs	r3, #2
 80069d4:	e097      	b.n	8006b06 <HAL_ADC_Start+0x14a>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d018      	beq.n	8006a1e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0201 	orr.w	r2, r2, #1
 80069fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80069fc:	4b45      	ldr	r3, [pc, #276]	; (8006b14 <HAL_ADC_Start+0x158>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a45      	ldr	r2, [pc, #276]	; (8006b18 <HAL_ADC_Start+0x15c>)
 8006a02:	fba2 2303 	umull	r2, r3, r2, r3
 8006a06:	0c9a      	lsrs	r2, r3, #18
 8006a08:	4613      	mov	r3, r2
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	4413      	add	r3, r2
 8006a0e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006a10:	e002      	b.n	8006a18 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	3b01      	subs	r3, #1
 8006a16:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1f9      	bne.n	8006a12 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d15f      	bne.n	8006aec <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006a34:	f023 0301 	bic.w	r3, r3, #1
 8006a38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d007      	beq.n	8006a5e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006a56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6a:	d106      	bne.n	8006a7a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a70:	f023 0206 	bic.w	r2, r3, #6
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	645a      	str	r2, [r3, #68]	; 0x44
 8006a78:	e002      	b.n	8006a80 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a88:	4b24      	ldr	r3, [pc, #144]	; (8006b1c <HAL_ADC_Start+0x160>)
 8006a8a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006a94:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f003 031f 	and.w	r3, r3, #31
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10f      	bne.n	8006ac2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d129      	bne.n	8006b04 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689a      	ldr	r2, [r3, #8]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006abe:	609a      	str	r2, [r3, #8]
 8006ac0:	e020      	b.n	8006b04 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a16      	ldr	r2, [pc, #88]	; (8006b20 <HAL_ADC_Start+0x164>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d11b      	bne.n	8006b04 <HAL_ADC_Start+0x148>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d114      	bne.n	8006b04 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689a      	ldr	r2, [r3, #8]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006ae8:	609a      	str	r2, [r3, #8]
 8006aea:	e00b      	b.n	8006b04 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af0:	f043 0210 	orr.w	r2, r3, #16
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afc:	f043 0201 	orr.w	r2, r3, #1
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	20001268 	.word	0x20001268
 8006b18:	431bde83 	.word	0x431bde83
 8006b1c:	40012300 	.word	0x40012300
 8006b20:	40012000 	.word	0x40012000

08006b24 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d101      	bne.n	8006b3a <HAL_ADC_Stop+0x16>
 8006b36:	2302      	movs	r3, #2
 8006b38:	e021      	b.n	8006b7e <HAL_ADC_Stop+0x5a>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 0201 	bic.w	r2, r2, #1
 8006b50:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d109      	bne.n	8006b74 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006b68:	f023 0301 	bic.w	r3, r3, #1
 8006b6c:	f043 0201 	orr.w	r2, r3, #1
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr

08006b8a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ba6:	d113      	bne.n	8006bd0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bb6:	d10b      	bne.n	8006bd0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbc:	f043 0220 	orr.w	r2, r3, #32
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e063      	b.n	8006c98 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006bd0:	f7ff fea4 	bl	800691c <HAL_GetTick>
 8006bd4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006bd6:	e021      	b.n	8006c1c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bde:	d01d      	beq.n	8006c1c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d007      	beq.n	8006bf6 <HAL_ADC_PollForConversion+0x6c>
 8006be6:	f7ff fe99 	bl	800691c <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d212      	bcs.n	8006c1c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0302 	and.w	r3, r3, #2
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d00b      	beq.n	8006c1c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c08:	f043 0204 	orr.w	r2, r3, #4
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e03d      	b.n	8006c98 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d1d6      	bne.n	8006bd8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f06f 0212 	mvn.w	r2, #18
 8006c32:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d123      	bne.n	8006c96 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d11f      	bne.n	8006c96 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d006      	beq.n	8006c72 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d111      	bne.n	8006c96 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d105      	bne.n	8006c96 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8e:	f043 0201 	orr.w	r2, r3, #1
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
	...

08006cbc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_ADC_ConfigChannel+0x1c>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e113      	b.n	8006f00 <HAL_ADC_ConfigChannel+0x244>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b09      	cmp	r3, #9
 8006ce6:	d925      	bls.n	8006d34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68d9      	ldr	r1, [r3, #12]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	4413      	add	r3, r2
 8006cfc:	3b1e      	subs	r3, #30
 8006cfe:	2207      	movs	r2, #7
 8006d00:	fa02 f303 	lsl.w	r3, r2, r3
 8006d04:	43da      	mvns	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	400a      	ands	r2, r1
 8006d0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68d9      	ldr	r1, [r3, #12]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	4618      	mov	r0, r3
 8006d20:	4603      	mov	r3, r0
 8006d22:	005b      	lsls	r3, r3, #1
 8006d24:	4403      	add	r3, r0
 8006d26:	3b1e      	subs	r3, #30
 8006d28:	409a      	lsls	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	60da      	str	r2, [r3, #12]
 8006d32:	e022      	b.n	8006d7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6919      	ldr	r1, [r3, #16]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	461a      	mov	r2, r3
 8006d42:	4613      	mov	r3, r2
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	4413      	add	r3, r2
 8006d48:	2207      	movs	r2, #7
 8006d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4e:	43da      	mvns	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	400a      	ands	r2, r1
 8006d56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6919      	ldr	r1, [r3, #16]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	689a      	ldr	r2, [r3, #8]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	4618      	mov	r0, r3
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	4403      	add	r3, r0
 8006d70:	409a      	lsls	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2b06      	cmp	r3, #6
 8006d80:	d824      	bhi.n	8006dcc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	3b05      	subs	r3, #5
 8006d94:	221f      	movs	r2, #31
 8006d96:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9a:	43da      	mvns	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	400a      	ands	r2, r1
 8006da2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	4618      	mov	r0, r3
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	4613      	mov	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	3b05      	subs	r3, #5
 8006dbe:	fa00 f203 	lsl.w	r2, r0, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8006dca:	e04c      	b.n	8006e66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	2b0c      	cmp	r3, #12
 8006dd2:	d824      	bhi.n	8006e1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	4613      	mov	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	3b23      	subs	r3, #35	; 0x23
 8006de6:	221f      	movs	r2, #31
 8006de8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dec:	43da      	mvns	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	400a      	ands	r2, r1
 8006df4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	4618      	mov	r0, r3
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	3b23      	subs	r3, #35	; 0x23
 8006e10:	fa00 f203 	lsl.w	r2, r0, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	631a      	str	r2, [r3, #48]	; 0x30
 8006e1c:	e023      	b.n	8006e66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	3b41      	subs	r3, #65	; 0x41
 8006e30:	221f      	movs	r2, #31
 8006e32:	fa02 f303 	lsl.w	r3, r2, r3
 8006e36:	43da      	mvns	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	400a      	ands	r2, r1
 8006e3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	4613      	mov	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	3b41      	subs	r3, #65	; 0x41
 8006e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006e66:	4b29      	ldr	r3, [pc, #164]	; (8006f0c <HAL_ADC_ConfigChannel+0x250>)
 8006e68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a28      	ldr	r2, [pc, #160]	; (8006f10 <HAL_ADC_ConfigChannel+0x254>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d10f      	bne.n	8006e94 <HAL_ADC_ConfigChannel+0x1d8>
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b12      	cmp	r3, #18
 8006e7a:	d10b      	bne.n	8006e94 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a1d      	ldr	r2, [pc, #116]	; (8006f10 <HAL_ADC_ConfigChannel+0x254>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d12b      	bne.n	8006ef6 <HAL_ADC_ConfigChannel+0x23a>
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a1c      	ldr	r2, [pc, #112]	; (8006f14 <HAL_ADC_ConfigChannel+0x258>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d003      	beq.n	8006eb0 <HAL_ADC_ConfigChannel+0x1f4>
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b11      	cmp	r3, #17
 8006eae:	d122      	bne.n	8006ef6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a11      	ldr	r2, [pc, #68]	; (8006f14 <HAL_ADC_ConfigChannel+0x258>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d111      	bne.n	8006ef6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006ed2:	4b11      	ldr	r3, [pc, #68]	; (8006f18 <HAL_ADC_ConfigChannel+0x25c>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a11      	ldr	r2, [pc, #68]	; (8006f1c <HAL_ADC_ConfigChannel+0x260>)
 8006ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8006edc:	0c9a      	lsrs	r2, r3, #18
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006ee8:	e002      	b.n	8006ef0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	3b01      	subs	r3, #1
 8006eee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1f9      	bne.n	8006eea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	40012300 	.word	0x40012300
 8006f10:	40012000 	.word	0x40012000
 8006f14:	10000012 	.word	0x10000012
 8006f18:	20001268 	.word	0x20001268
 8006f1c:	431bde83 	.word	0x431bde83

08006f20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006f28:	4b79      	ldr	r3, [pc, #484]	; (8007110 <ADC_Init+0x1f0>)
 8006f2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	431a      	orrs	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6859      	ldr	r1, [r3, #4]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	021a      	lsls	r2, r3, #8
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	430a      	orrs	r2, r1
 8006f68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006f78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6859      	ldr	r1, [r3, #4]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6899      	ldr	r1, [r3, #8]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb2:	4a58      	ldr	r2, [pc, #352]	; (8007114 <ADC_Init+0x1f4>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d022      	beq.n	8006ffe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006fc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6899      	ldr	r1, [r3, #8]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006fe8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6899      	ldr	r1, [r3, #8]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	609a      	str	r2, [r3, #8]
 8006ffc:	e00f      	b.n	800701e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	689a      	ldr	r2, [r3, #8]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800700c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800701c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 0202 	bic.w	r2, r2, #2
 800702c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6899      	ldr	r1, [r3, #8]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	7e1b      	ldrb	r3, [r3, #24]
 8007038:	005a      	lsls	r2, r3, #1
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d01b      	beq.n	8007084 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800705a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800706a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6859      	ldr	r1, [r3, #4]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007076:	3b01      	subs	r3, #1
 8007078:	035a      	lsls	r2, r3, #13
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	605a      	str	r2, [r3, #4]
 8007082:	e007      	b.n	8007094 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007092:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80070a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	3b01      	subs	r3, #1
 80070b0:	051a      	lsls	r2, r3, #20
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80070c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6899      	ldr	r1, [r3, #8]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80070d6:	025a      	lsls	r2, r3, #9
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	430a      	orrs	r2, r1
 80070de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689a      	ldr	r2, [r3, #8]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6899      	ldr	r1, [r3, #8]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	029a      	lsls	r2, r3, #10
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	609a      	str	r2, [r3, #8]
}
 8007104:	bf00      	nop
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	40012300 	.word	0x40012300
 8007114:	0f000001 	.word	0x0f000001

08007118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007128:	4b0c      	ldr	r3, [pc, #48]	; (800715c <__NVIC_SetPriorityGrouping+0x44>)
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007134:	4013      	ands	r3, r2
 8007136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800714a:	4a04      	ldr	r2, [pc, #16]	; (800715c <__NVIC_SetPriorityGrouping+0x44>)
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	60d3      	str	r3, [r2, #12]
}
 8007150:	bf00      	nop
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	e000ed00 	.word	0xe000ed00

08007160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007164:	4b04      	ldr	r3, [pc, #16]	; (8007178 <__NVIC_GetPriorityGrouping+0x18>)
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	0a1b      	lsrs	r3, r3, #8
 800716a:	f003 0307 	and.w	r3, r3, #7
}
 800716e:	4618      	mov	r0, r3
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	e000ed00 	.word	0xe000ed00

0800717c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	4603      	mov	r3, r0
 8007184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800718a:	2b00      	cmp	r3, #0
 800718c:	db0b      	blt.n	80071a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800718e:	79fb      	ldrb	r3, [r7, #7]
 8007190:	f003 021f 	and.w	r2, r3, #31
 8007194:	4907      	ldr	r1, [pc, #28]	; (80071b4 <__NVIC_EnableIRQ+0x38>)
 8007196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800719a:	095b      	lsrs	r3, r3, #5
 800719c:	2001      	movs	r0, #1
 800719e:	fa00 f202 	lsl.w	r2, r0, r2
 80071a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80071a6:	bf00      	nop
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	e000e100 	.word	0xe000e100

080071b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	4603      	mov	r3, r0
 80071c0:	6039      	str	r1, [r7, #0]
 80071c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	db0a      	blt.n	80071e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	490c      	ldr	r1, [pc, #48]	; (8007204 <__NVIC_SetPriority+0x4c>)
 80071d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071d6:	0112      	lsls	r2, r2, #4
 80071d8:	b2d2      	uxtb	r2, r2
 80071da:	440b      	add	r3, r1
 80071dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80071e0:	e00a      	b.n	80071f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	4908      	ldr	r1, [pc, #32]	; (8007208 <__NVIC_SetPriority+0x50>)
 80071e8:	79fb      	ldrb	r3, [r7, #7]
 80071ea:	f003 030f 	and.w	r3, r3, #15
 80071ee:	3b04      	subs	r3, #4
 80071f0:	0112      	lsls	r2, r2, #4
 80071f2:	b2d2      	uxtb	r2, r2
 80071f4:	440b      	add	r3, r1
 80071f6:	761a      	strb	r2, [r3, #24]
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	e000e100 	.word	0xe000e100
 8007208:	e000ed00 	.word	0xe000ed00

0800720c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800720c:	b480      	push	{r7}
 800720e:	b089      	sub	sp, #36	; 0x24
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	f1c3 0307 	rsb	r3, r3, #7
 8007226:	2b04      	cmp	r3, #4
 8007228:	bf28      	it	cs
 800722a:	2304      	movcs	r3, #4
 800722c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	3304      	adds	r3, #4
 8007232:	2b06      	cmp	r3, #6
 8007234:	d902      	bls.n	800723c <NVIC_EncodePriority+0x30>
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	3b03      	subs	r3, #3
 800723a:	e000      	b.n	800723e <NVIC_EncodePriority+0x32>
 800723c:	2300      	movs	r3, #0
 800723e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007240:	f04f 32ff 	mov.w	r2, #4294967295
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	fa02 f303 	lsl.w	r3, r2, r3
 800724a:	43da      	mvns	r2, r3
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	401a      	ands	r2, r3
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007254:	f04f 31ff 	mov.w	r1, #4294967295
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	fa01 f303 	lsl.w	r3, r1, r3
 800725e:	43d9      	mvns	r1, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007264:	4313      	orrs	r3, r2
         );
}
 8007266:	4618      	mov	r0, r3
 8007268:	3724      	adds	r7, #36	; 0x24
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
	...

08007274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3b01      	subs	r3, #1
 8007280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007284:	d301      	bcc.n	800728a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007286:	2301      	movs	r3, #1
 8007288:	e00f      	b.n	80072aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800728a:	4a0a      	ldr	r2, [pc, #40]	; (80072b4 <SysTick_Config+0x40>)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3b01      	subs	r3, #1
 8007290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007292:	210f      	movs	r1, #15
 8007294:	f04f 30ff 	mov.w	r0, #4294967295
 8007298:	f7ff ff8e 	bl	80071b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800729c:	4b05      	ldr	r3, [pc, #20]	; (80072b4 <SysTick_Config+0x40>)
 800729e:	2200      	movs	r2, #0
 80072a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072a2:	4b04      	ldr	r3, [pc, #16]	; (80072b4 <SysTick_Config+0x40>)
 80072a4:	2207      	movs	r2, #7
 80072a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	e000e010 	.word	0xe000e010

080072b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7ff ff29 	bl	8007118 <__NVIC_SetPriorityGrouping>
}
 80072c6:	bf00      	nop
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b086      	sub	sp, #24
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	4603      	mov	r3, r0
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	607a      	str	r2, [r7, #4]
 80072da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80072dc:	2300      	movs	r3, #0
 80072de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80072e0:	f7ff ff3e 	bl	8007160 <__NVIC_GetPriorityGrouping>
 80072e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	68b9      	ldr	r1, [r7, #8]
 80072ea:	6978      	ldr	r0, [r7, #20]
 80072ec:	f7ff ff8e 	bl	800720c <NVIC_EncodePriority>
 80072f0:	4602      	mov	r2, r0
 80072f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072f6:	4611      	mov	r1, r2
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7ff ff5d 	bl	80071b8 <__NVIC_SetPriority>
}
 80072fe:	bf00      	nop
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b082      	sub	sp, #8
 800730a:	af00      	add	r7, sp, #0
 800730c:	4603      	mov	r3, r0
 800730e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007314:	4618      	mov	r0, r3
 8007316:	f7ff ff31 	bl	800717c <__NVIC_EnableIRQ>
}
 800731a:	bf00      	nop
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b082      	sub	sp, #8
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7ff ffa2 	bl	8007274 <SysTick_Config>
 8007330:	4603      	mov	r3, r0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b084      	sub	sp, #16
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007346:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007348:	f7ff fae8 	bl	800691c <HAL_GetTick>
 800734c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b02      	cmp	r3, #2
 8007358:	d008      	beq.n	800736c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2280      	movs	r2, #128	; 0x80
 800735e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e052      	b.n	8007412 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0216 	bic.w	r2, r2, #22
 800737a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	695a      	ldr	r2, [r3, #20]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800738a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007390:	2b00      	cmp	r3, #0
 8007392:	d103      	bne.n	800739c <HAL_DMA_Abort+0x62>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007398:	2b00      	cmp	r3, #0
 800739a:	d007      	beq.n	80073ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f022 0208 	bic.w	r2, r2, #8
 80073aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 0201 	bic.w	r2, r2, #1
 80073ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073bc:	e013      	b.n	80073e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80073be:	f7ff faad 	bl	800691c <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	2b05      	cmp	r3, #5
 80073ca:	d90c      	bls.n	80073e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2220      	movs	r2, #32
 80073d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2203      	movs	r2, #3
 80073d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e015      	b.n	8007412 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1e4      	bne.n	80073be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f8:	223f      	movs	r2, #63	; 0x3f
 80073fa:	409a      	lsls	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b02      	cmp	r3, #2
 800742c:	d004      	beq.n	8007438 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2280      	movs	r2, #128	; 0x80
 8007432:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e00c      	b.n	8007452 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2205      	movs	r2, #5
 800743c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 0201 	bic.w	r2, r2, #1
 800744e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
	...

08007460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007460:	b480      	push	{r7}
 8007462:	b089      	sub	sp, #36	; 0x24
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800746a:	2300      	movs	r3, #0
 800746c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800746e:	2300      	movs	r3, #0
 8007470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007472:	2300      	movs	r3, #0
 8007474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007476:	2300      	movs	r3, #0
 8007478:	61fb      	str	r3, [r7, #28]
 800747a:	e159      	b.n	8007730 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800747c:	2201      	movs	r2, #1
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	fa02 f303 	lsl.w	r3, r2, r3
 8007484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	4013      	ands	r3, r2
 800748e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	429a      	cmp	r2, r3
 8007496:	f040 8148 	bne.w	800772a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f003 0303 	and.w	r3, r3, #3
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d005      	beq.n	80074b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d130      	bne.n	8007514 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	005b      	lsls	r3, r3, #1
 80074bc:	2203      	movs	r2, #3
 80074be:	fa02 f303 	lsl.w	r3, r2, r3
 80074c2:	43db      	mvns	r3, r3
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	4013      	ands	r3, r2
 80074c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	68da      	ldr	r2, [r3, #12]
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	005b      	lsls	r3, r3, #1
 80074d2:	fa02 f303 	lsl.w	r3, r2, r3
 80074d6:	69ba      	ldr	r2, [r7, #24]
 80074d8:	4313      	orrs	r3, r2
 80074da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	69ba      	ldr	r2, [r7, #24]
 80074e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80074e8:	2201      	movs	r2, #1
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	fa02 f303 	lsl.w	r3, r2, r3
 80074f0:	43db      	mvns	r3, r3
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	4013      	ands	r3, r2
 80074f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	091b      	lsrs	r3, r3, #4
 80074fe:	f003 0201 	and.w	r2, r3, #1
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	fa02 f303 	lsl.w	r3, r2, r3
 8007508:	69ba      	ldr	r2, [r7, #24]
 800750a:	4313      	orrs	r3, r2
 800750c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f003 0303 	and.w	r3, r3, #3
 800751c:	2b03      	cmp	r3, #3
 800751e:	d017      	beq.n	8007550 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	005b      	lsls	r3, r3, #1
 800752a:	2203      	movs	r2, #3
 800752c:	fa02 f303 	lsl.w	r3, r2, r3
 8007530:	43db      	mvns	r3, r3
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	4013      	ands	r3, r2
 8007536:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	689a      	ldr	r2, [r3, #8]
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	005b      	lsls	r3, r3, #1
 8007540:	fa02 f303 	lsl.w	r3, r2, r3
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	4313      	orrs	r3, r2
 8007548:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	69ba      	ldr	r2, [r7, #24]
 800754e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f003 0303 	and.w	r3, r3, #3
 8007558:	2b02      	cmp	r3, #2
 800755a:	d123      	bne.n	80075a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	08da      	lsrs	r2, r3, #3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3208      	adds	r2, #8
 8007564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007568:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	f003 0307 	and.w	r3, r3, #7
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	220f      	movs	r2, #15
 8007574:	fa02 f303 	lsl.w	r3, r2, r3
 8007578:	43db      	mvns	r3, r3
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	4013      	ands	r3, r2
 800757e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	691a      	ldr	r2, [r3, #16]
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	f003 0307 	and.w	r3, r3, #7
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	fa02 f303 	lsl.w	r3, r2, r3
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	4313      	orrs	r3, r2
 8007594:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	08da      	lsrs	r2, r3, #3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	3208      	adds	r2, #8
 800759e:	69b9      	ldr	r1, [r7, #24]
 80075a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	2203      	movs	r2, #3
 80075b0:	fa02 f303 	lsl.w	r3, r2, r3
 80075b4:	43db      	mvns	r3, r3
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	4013      	ands	r3, r2
 80075ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f003 0203 	and.w	r2, r3, #3
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	005b      	lsls	r3, r3, #1
 80075c8:	fa02 f303 	lsl.w	r3, r2, r3
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	69ba      	ldr	r2, [r7, #24]
 80075d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 80a2 	beq.w	800772a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075e6:	2300      	movs	r3, #0
 80075e8:	60fb      	str	r3, [r7, #12]
 80075ea:	4b57      	ldr	r3, [pc, #348]	; (8007748 <HAL_GPIO_Init+0x2e8>)
 80075ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ee:	4a56      	ldr	r2, [pc, #344]	; (8007748 <HAL_GPIO_Init+0x2e8>)
 80075f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075f4:	6453      	str	r3, [r2, #68]	; 0x44
 80075f6:	4b54      	ldr	r3, [pc, #336]	; (8007748 <HAL_GPIO_Init+0x2e8>)
 80075f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007602:	4a52      	ldr	r2, [pc, #328]	; (800774c <HAL_GPIO_Init+0x2ec>)
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	089b      	lsrs	r3, r3, #2
 8007608:	3302      	adds	r3, #2
 800760a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800760e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	f003 0303 	and.w	r3, r3, #3
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	220f      	movs	r2, #15
 800761a:	fa02 f303 	lsl.w	r3, r2, r3
 800761e:	43db      	mvns	r3, r3
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	4013      	ands	r3, r2
 8007624:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a49      	ldr	r2, [pc, #292]	; (8007750 <HAL_GPIO_Init+0x2f0>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d019      	beq.n	8007662 <HAL_GPIO_Init+0x202>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a48      	ldr	r2, [pc, #288]	; (8007754 <HAL_GPIO_Init+0x2f4>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d013      	beq.n	800765e <HAL_GPIO_Init+0x1fe>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a47      	ldr	r2, [pc, #284]	; (8007758 <HAL_GPIO_Init+0x2f8>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d00d      	beq.n	800765a <HAL_GPIO_Init+0x1fa>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a46      	ldr	r2, [pc, #280]	; (800775c <HAL_GPIO_Init+0x2fc>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d007      	beq.n	8007656 <HAL_GPIO_Init+0x1f6>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a45      	ldr	r2, [pc, #276]	; (8007760 <HAL_GPIO_Init+0x300>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d101      	bne.n	8007652 <HAL_GPIO_Init+0x1f2>
 800764e:	2304      	movs	r3, #4
 8007650:	e008      	b.n	8007664 <HAL_GPIO_Init+0x204>
 8007652:	2307      	movs	r3, #7
 8007654:	e006      	b.n	8007664 <HAL_GPIO_Init+0x204>
 8007656:	2303      	movs	r3, #3
 8007658:	e004      	b.n	8007664 <HAL_GPIO_Init+0x204>
 800765a:	2302      	movs	r3, #2
 800765c:	e002      	b.n	8007664 <HAL_GPIO_Init+0x204>
 800765e:	2301      	movs	r3, #1
 8007660:	e000      	b.n	8007664 <HAL_GPIO_Init+0x204>
 8007662:	2300      	movs	r3, #0
 8007664:	69fa      	ldr	r2, [r7, #28]
 8007666:	f002 0203 	and.w	r2, r2, #3
 800766a:	0092      	lsls	r2, r2, #2
 800766c:	4093      	lsls	r3, r2
 800766e:	69ba      	ldr	r2, [r7, #24]
 8007670:	4313      	orrs	r3, r2
 8007672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007674:	4935      	ldr	r1, [pc, #212]	; (800774c <HAL_GPIO_Init+0x2ec>)
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	089b      	lsrs	r3, r3, #2
 800767a:	3302      	adds	r3, #2
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007682:	4b38      	ldr	r3, [pc, #224]	; (8007764 <HAL_GPIO_Init+0x304>)
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	43db      	mvns	r3, r3
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	4013      	ands	r3, r2
 8007690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800769e:	69ba      	ldr	r2, [r7, #24]
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80076a6:	4a2f      	ldr	r2, [pc, #188]	; (8007764 <HAL_GPIO_Init+0x304>)
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80076ac:	4b2d      	ldr	r3, [pc, #180]	; (8007764 <HAL_GPIO_Init+0x304>)
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	43db      	mvns	r3, r3
 80076b6:	69ba      	ldr	r2, [r7, #24]
 80076b8:	4013      	ands	r3, r2
 80076ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d003      	beq.n	80076d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80076d0:	4a24      	ldr	r2, [pc, #144]	; (8007764 <HAL_GPIO_Init+0x304>)
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80076d6:	4b23      	ldr	r3, [pc, #140]	; (8007764 <HAL_GPIO_Init+0x304>)
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	43db      	mvns	r3, r3
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	4013      	ands	r3, r2
 80076e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80076fa:	4a1a      	ldr	r2, [pc, #104]	; (8007764 <HAL_GPIO_Init+0x304>)
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007700:	4b18      	ldr	r3, [pc, #96]	; (8007764 <HAL_GPIO_Init+0x304>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	43db      	mvns	r3, r3
 800770a:	69ba      	ldr	r2, [r7, #24]
 800770c:	4013      	ands	r3, r2
 800770e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	4313      	orrs	r3, r2
 8007722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007724:	4a0f      	ldr	r2, [pc, #60]	; (8007764 <HAL_GPIO_Init+0x304>)
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	3301      	adds	r3, #1
 800772e:	61fb      	str	r3, [r7, #28]
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	2b0f      	cmp	r3, #15
 8007734:	f67f aea2 	bls.w	800747c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007738:	bf00      	nop
 800773a:	bf00      	nop
 800773c:	3724      	adds	r7, #36	; 0x24
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	40023800 	.word	0x40023800
 800774c:	40013800 	.word	0x40013800
 8007750:	40020000 	.word	0x40020000
 8007754:	40020400 	.word	0x40020400
 8007758:	40020800 	.word	0x40020800
 800775c:	40020c00 	.word	0x40020c00
 8007760:	40021000 	.word	0x40021000
 8007764:	40013c00 	.word	0x40013c00

08007768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	807b      	strh	r3, [r7, #2]
 8007774:	4613      	mov	r3, r2
 8007776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007778:	787b      	ldrb	r3, [r7, #1]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800777e:	887a      	ldrh	r2, [r7, #2]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007784:	e003      	b.n	800778e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007786:	887b      	ldrh	r3, [r7, #2]
 8007788:	041a      	lsls	r2, r3, #16
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	619a      	str	r2, [r3, #24]
}
 800778e:	bf00      	nop
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
	...

0800779c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e12b      	b.n	8007a06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d106      	bne.n	80077c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7fe fde6 	bl	8006394 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2224      	movs	r2, #36	; 0x24
 80077cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f022 0201 	bic.w	r2, r2, #1
 80077de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007800:	f001 fba0 	bl	8008f44 <HAL_RCC_GetPCLK1Freq>
 8007804:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	4a81      	ldr	r2, [pc, #516]	; (8007a10 <HAL_I2C_Init+0x274>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d807      	bhi.n	8007820 <HAL_I2C_Init+0x84>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4a80      	ldr	r2, [pc, #512]	; (8007a14 <HAL_I2C_Init+0x278>)
 8007814:	4293      	cmp	r3, r2
 8007816:	bf94      	ite	ls
 8007818:	2301      	movls	r3, #1
 800781a:	2300      	movhi	r3, #0
 800781c:	b2db      	uxtb	r3, r3
 800781e:	e006      	b.n	800782e <HAL_I2C_Init+0x92>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4a7d      	ldr	r2, [pc, #500]	; (8007a18 <HAL_I2C_Init+0x27c>)
 8007824:	4293      	cmp	r3, r2
 8007826:	bf94      	ite	ls
 8007828:	2301      	movls	r3, #1
 800782a:	2300      	movhi	r3, #0
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e0e7      	b.n	8007a06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	4a78      	ldr	r2, [pc, #480]	; (8007a1c <HAL_I2C_Init+0x280>)
 800783a:	fba2 2303 	umull	r2, r3, r2, r3
 800783e:	0c9b      	lsrs	r3, r3, #18
 8007840:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	430a      	orrs	r2, r1
 8007854:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6a1b      	ldr	r3, [r3, #32]
 800785c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	4a6a      	ldr	r2, [pc, #424]	; (8007a10 <HAL_I2C_Init+0x274>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d802      	bhi.n	8007870 <HAL_I2C_Init+0xd4>
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	3301      	adds	r3, #1
 800786e:	e009      	b.n	8007884 <HAL_I2C_Init+0xe8>
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007876:	fb02 f303 	mul.w	r3, r2, r3
 800787a:	4a69      	ldr	r2, [pc, #420]	; (8007a20 <HAL_I2C_Init+0x284>)
 800787c:	fba2 2303 	umull	r2, r3, r2, r3
 8007880:	099b      	lsrs	r3, r3, #6
 8007882:	3301      	adds	r3, #1
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	6812      	ldr	r2, [r2, #0]
 8007888:	430b      	orrs	r3, r1
 800788a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	69db      	ldr	r3, [r3, #28]
 8007892:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007896:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	495c      	ldr	r1, [pc, #368]	; (8007a10 <HAL_I2C_Init+0x274>)
 80078a0:	428b      	cmp	r3, r1
 80078a2:	d819      	bhi.n	80078d8 <HAL_I2C_Init+0x13c>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	1e59      	subs	r1, r3, #1
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	005b      	lsls	r3, r3, #1
 80078ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80078b2:	1c59      	adds	r1, r3, #1
 80078b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80078b8:	400b      	ands	r3, r1
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00a      	beq.n	80078d4 <HAL_I2C_Init+0x138>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	1e59      	subs	r1, r3, #1
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	005b      	lsls	r3, r3, #1
 80078c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80078cc:	3301      	adds	r3, #1
 80078ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078d2:	e051      	b.n	8007978 <HAL_I2C_Init+0x1dc>
 80078d4:	2304      	movs	r3, #4
 80078d6:	e04f      	b.n	8007978 <HAL_I2C_Init+0x1dc>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d111      	bne.n	8007904 <HAL_I2C_Init+0x168>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	1e58      	subs	r0, r3, #1
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6859      	ldr	r1, [r3, #4]
 80078e8:	460b      	mov	r3, r1
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	440b      	add	r3, r1
 80078ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80078f2:	3301      	adds	r3, #1
 80078f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	bf0c      	ite	eq
 80078fc:	2301      	moveq	r3, #1
 80078fe:	2300      	movne	r3, #0
 8007900:	b2db      	uxtb	r3, r3
 8007902:	e012      	b.n	800792a <HAL_I2C_Init+0x18e>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	1e58      	subs	r0, r3, #1
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6859      	ldr	r1, [r3, #4]
 800790c:	460b      	mov	r3, r1
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	440b      	add	r3, r1
 8007912:	0099      	lsls	r1, r3, #2
 8007914:	440b      	add	r3, r1
 8007916:	fbb0 f3f3 	udiv	r3, r0, r3
 800791a:	3301      	adds	r3, #1
 800791c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007920:	2b00      	cmp	r3, #0
 8007922:	bf0c      	ite	eq
 8007924:	2301      	moveq	r3, #1
 8007926:	2300      	movne	r3, #0
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <HAL_I2C_Init+0x196>
 800792e:	2301      	movs	r3, #1
 8007930:	e022      	b.n	8007978 <HAL_I2C_Init+0x1dc>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10e      	bne.n	8007958 <HAL_I2C_Init+0x1bc>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	1e58      	subs	r0, r3, #1
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6859      	ldr	r1, [r3, #4]
 8007942:	460b      	mov	r3, r1
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	440b      	add	r3, r1
 8007948:	fbb0 f3f3 	udiv	r3, r0, r3
 800794c:	3301      	adds	r3, #1
 800794e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007956:	e00f      	b.n	8007978 <HAL_I2C_Init+0x1dc>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	1e58      	subs	r0, r3, #1
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6859      	ldr	r1, [r3, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	440b      	add	r3, r1
 8007966:	0099      	lsls	r1, r3, #2
 8007968:	440b      	add	r3, r1
 800796a:	fbb0 f3f3 	udiv	r3, r0, r3
 800796e:	3301      	adds	r3, #1
 8007970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007978:	6879      	ldr	r1, [r7, #4]
 800797a:	6809      	ldr	r1, [r1, #0]
 800797c:	4313      	orrs	r3, r2
 800797e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	69da      	ldr	r2, [r3, #28]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	431a      	orrs	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	430a      	orrs	r2, r1
 800799a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80079a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	6911      	ldr	r1, [r2, #16]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	68d2      	ldr	r2, [r2, #12]
 80079b2:	4311      	orrs	r1, r2
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	6812      	ldr	r2, [r2, #0]
 80079b8:	430b      	orrs	r3, r1
 80079ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	695a      	ldr	r2, [r3, #20]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	431a      	orrs	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f042 0201 	orr.w	r2, r2, #1
 80079e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2220      	movs	r2, #32
 80079f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	000186a0 	.word	0x000186a0
 8007a14:	001e847f 	.word	0x001e847f
 8007a18:	003d08ff 	.word	0x003d08ff
 8007a1c:	431bde83 	.word	0x431bde83
 8007a20:	10624dd3 	.word	0x10624dd3

08007a24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b088      	sub	sp, #32
 8007a28:	af02      	add	r7, sp, #8
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	607a      	str	r2, [r7, #4]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	460b      	mov	r3, r1
 8007a32:	817b      	strh	r3, [r7, #10]
 8007a34:	4613      	mov	r3, r2
 8007a36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007a38:	f7fe ff70 	bl	800691c <HAL_GetTick>
 8007a3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b20      	cmp	r3, #32
 8007a48:	f040 80e0 	bne.w	8007c0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	2319      	movs	r3, #25
 8007a52:	2201      	movs	r2, #1
 8007a54:	4970      	ldr	r1, [pc, #448]	; (8007c18 <HAL_I2C_Master_Transmit+0x1f4>)
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f000 fc66 	bl	8008328 <I2C_WaitOnFlagUntilTimeout>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007a62:	2302      	movs	r3, #2
 8007a64:	e0d3      	b.n	8007c0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d101      	bne.n	8007a74 <HAL_I2C_Master_Transmit+0x50>
 8007a70:	2302      	movs	r3, #2
 8007a72:	e0cc      	b.n	8007c0e <HAL_I2C_Master_Transmit+0x1ea>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d007      	beq.n	8007a9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f042 0201 	orr.w	r2, r2, #1
 8007a98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007aa8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2221      	movs	r2, #33	; 0x21
 8007aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2210      	movs	r2, #16
 8007ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	893a      	ldrh	r2, [r7, #8]
 8007aca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	4a50      	ldr	r2, [pc, #320]	; (8007c1c <HAL_I2C_Master_Transmit+0x1f8>)
 8007ada:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007adc:	8979      	ldrh	r1, [r7, #10]
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	6a3a      	ldr	r2, [r7, #32]
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 fad0 	bl	8008088 <I2C_MasterRequestWrite>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e08d      	b.n	8007c0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007af2:	2300      	movs	r3, #0
 8007af4:	613b      	str	r3, [r7, #16]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	613b      	str	r3, [r7, #16]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	613b      	str	r3, [r7, #16]
 8007b06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007b08:	e066      	b.n	8007bd8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	6a39      	ldr	r1, [r7, #32]
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 fce0 	bl	80084d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00d      	beq.n	8007b36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1e:	2b04      	cmp	r3, #4
 8007b20:	d107      	bne.n	8007b32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e06b      	b.n	8007c0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3a:	781a      	ldrb	r2, [r3, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b46:	1c5a      	adds	r2, r3, #1
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	3b01      	subs	r3, #1
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	f003 0304 	and.w	r3, r3, #4
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	d11b      	bne.n	8007bac <HAL_I2C_Master_Transmit+0x188>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d017      	beq.n	8007bac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b80:	781a      	ldrb	r2, [r3, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8c:	1c5a      	adds	r2, r3, #1
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bac:	697a      	ldr	r2, [r7, #20]
 8007bae:	6a39      	ldr	r1, [r7, #32]
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 fcd0 	bl	8008556 <I2C_WaitOnBTFFlagUntilTimeout>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00d      	beq.n	8007bd8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc0:	2b04      	cmp	r3, #4
 8007bc2:	d107      	bne.n	8007bd4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bd2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e01a      	b.n	8007c0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d194      	bne.n	8007b0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	e000      	b.n	8007c0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007c0c:	2302      	movs	r3, #2
  }
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	00100002 	.word	0x00100002
 8007c1c:	ffff0000 	.word	0xffff0000

08007c20 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b08c      	sub	sp, #48	; 0x30
 8007c24:	af02      	add	r7, sp, #8
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	607a      	str	r2, [r7, #4]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	817b      	strh	r3, [r7, #10]
 8007c30:	4613      	mov	r3, r2
 8007c32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007c34:	f7fe fe72 	bl	800691c <HAL_GetTick>
 8007c38:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	2b20      	cmp	r3, #32
 8007c44:	f040 820b 	bne.w	800805e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	2319      	movs	r3, #25
 8007c4e:	2201      	movs	r2, #1
 8007c50:	497c      	ldr	r1, [pc, #496]	; (8007e44 <HAL_I2C_Master_Receive+0x224>)
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f000 fb68 	bl	8008328 <I2C_WaitOnFlagUntilTimeout>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007c5e:	2302      	movs	r3, #2
 8007c60:	e1fe      	b.n	8008060 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d101      	bne.n	8007c70 <HAL_I2C_Master_Receive+0x50>
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e1f7      	b.n	8008060 <HAL_I2C_Master_Receive+0x440>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0301 	and.w	r3, r3, #1
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d007      	beq.n	8007c96 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f042 0201 	orr.w	r2, r2, #1
 8007c94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ca4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2222      	movs	r2, #34	; 0x22
 8007caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2210      	movs	r2, #16
 8007cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	893a      	ldrh	r2, [r7, #8]
 8007cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	4a5c      	ldr	r2, [pc, #368]	; (8007e48 <HAL_I2C_Master_Receive+0x228>)
 8007cd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007cd8:	8979      	ldrh	r1, [r7, #10]
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 fa54 	bl	800818c <I2C_MasterRequestRead>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d001      	beq.n	8007cee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e1b8      	b.n	8008060 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d113      	bne.n	8007d1e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	623b      	str	r3, [r7, #32]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	623b      	str	r3, [r7, #32]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	623b      	str	r3, [r7, #32]
 8007d0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	e18c      	b.n	8008038 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d11b      	bne.n	8007d5e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d36:	2300      	movs	r3, #0
 8007d38:	61fb      	str	r3, [r7, #28]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	695b      	ldr	r3, [r3, #20]
 8007d40:	61fb      	str	r3, [r7, #28]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	61fb      	str	r3, [r7, #28]
 8007d4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d5a:	601a      	str	r2, [r3, #0]
 8007d5c:	e16c      	b.n	8008038 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d11b      	bne.n	8007d9e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d86:	2300      	movs	r3, #0
 8007d88:	61bb      	str	r3, [r7, #24]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	61bb      	str	r3, [r7, #24]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	61bb      	str	r3, [r7, #24]
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	e14c      	b.n	8008038 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dae:	2300      	movs	r3, #0
 8007db0:	617b      	str	r3, [r7, #20]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	695b      	ldr	r3, [r3, #20]
 8007db8:	617b      	str	r3, [r7, #20]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	617b      	str	r3, [r7, #20]
 8007dc2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007dc4:	e138      	b.n	8008038 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	f200 80f1 	bhi.w	8007fb2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d123      	bne.n	8007e20 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 fbfb 	bl	80085d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d001      	beq.n	8007dec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e139      	b.n	8008060 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	691a      	ldr	r2, [r3, #16]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df6:	b2d2      	uxtb	r2, r2
 8007df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	1c5a      	adds	r2, r3, #1
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	3b01      	subs	r3, #1
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e1e:	e10b      	b.n	8008038 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d14e      	bne.n	8007ec6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2e:	2200      	movs	r2, #0
 8007e30:	4906      	ldr	r1, [pc, #24]	; (8007e4c <HAL_I2C_Master_Receive+0x22c>)
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f000 fa78 	bl	8008328 <I2C_WaitOnFlagUntilTimeout>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d008      	beq.n	8007e50 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e10e      	b.n	8008060 <HAL_I2C_Master_Receive+0x440>
 8007e42:	bf00      	nop
 8007e44:	00100002 	.word	0x00100002
 8007e48:	ffff0000 	.word	0xffff0000
 8007e4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	691a      	ldr	r2, [r3, #16]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	b2d2      	uxtb	r2, r2
 8007e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	1c5a      	adds	r2, r3, #1
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	691a      	ldr	r2, [r3, #16]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9c:	b2d2      	uxtb	r2, r2
 8007e9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea4:	1c5a      	adds	r2, r3, #1
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ec4:	e0b8      	b.n	8008038 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ecc:	2200      	movs	r2, #0
 8007ece:	4966      	ldr	r1, [pc, #408]	; (8008068 <HAL_I2C_Master_Receive+0x448>)
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f000 fa29 	bl	8008328 <I2C_WaitOnFlagUntilTimeout>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d001      	beq.n	8007ee0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e0bf      	b.n	8008060 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	691a      	ldr	r2, [r3, #16]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efa:	b2d2      	uxtb	r2, r2
 8007efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f02:	1c5a      	adds	r2, r3, #1
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f24:	9300      	str	r3, [sp, #0]
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	2200      	movs	r2, #0
 8007f2a:	494f      	ldr	r1, [pc, #316]	; (8008068 <HAL_I2C_Master_Receive+0x448>)
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 f9fb 	bl	8008328 <I2C_WaitOnFlagUntilTimeout>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e091      	b.n	8008060 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	691a      	ldr	r2, [r3, #16]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f56:	b2d2      	uxtb	r2, r2
 8007f58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5e:	1c5a      	adds	r2, r3, #1
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	3b01      	subs	r3, #1
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	691a      	ldr	r2, [r3, #16]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f88:	b2d2      	uxtb	r2, r2
 8007f8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f90:	1c5a      	adds	r2, r3, #1
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007fb0:	e042      	b.n	8008038 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f000 fb0e 	bl	80085d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d001      	beq.n	8007fc6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e04c      	b.n	8008060 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	691a      	ldr	r2, [r3, #16]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd0:	b2d2      	uxtb	r2, r2
 8007fd2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd8:	1c5a      	adds	r2, r3, #1
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	f003 0304 	and.w	r3, r3, #4
 8008002:	2b04      	cmp	r3, #4
 8008004:	d118      	bne.n	8008038 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	691a      	ldr	r2, [r3, #16]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008010:	b2d2      	uxtb	r2, r2
 8008012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008022:	3b01      	subs	r3, #1
 8008024:	b29a      	uxth	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800802e:	b29b      	uxth	r3, r3
 8008030:	3b01      	subs	r3, #1
 8008032:	b29a      	uxth	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800803c:	2b00      	cmp	r3, #0
 800803e:	f47f aec2 	bne.w	8007dc6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2220      	movs	r2, #32
 8008046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	e000      	b.n	8008060 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800805e:	2302      	movs	r3, #2
  }
}
 8008060:	4618      	mov	r0, r3
 8008062:	3728      	adds	r7, #40	; 0x28
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	00010004 	.word	0x00010004

0800806c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800807a:	b2db      	uxtb	r3, r3
}
 800807c:	4618      	mov	r0, r3
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b088      	sub	sp, #32
 800808c:	af02      	add	r7, sp, #8
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	607a      	str	r2, [r7, #4]
 8008092:	603b      	str	r3, [r7, #0]
 8008094:	460b      	mov	r3, r1
 8008096:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2b08      	cmp	r3, #8
 80080a2:	d006      	beq.n	80080b2 <I2C_MasterRequestWrite+0x2a>
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d003      	beq.n	80080b2 <I2C_MasterRequestWrite+0x2a>
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80080b0:	d108      	bne.n	80080c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080c0:	601a      	str	r2, [r3, #0]
 80080c2:	e00b      	b.n	80080dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c8:	2b12      	cmp	r3, #18
 80080ca:	d107      	bne.n	80080dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f000 f91d 	bl	8008328 <I2C_WaitOnFlagUntilTimeout>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00d      	beq.n	8008110 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008102:	d103      	bne.n	800810c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f44f 7200 	mov.w	r2, #512	; 0x200
 800810a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e035      	b.n	800817c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008118:	d108      	bne.n	800812c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800811a:	897b      	ldrh	r3, [r7, #10]
 800811c:	b2db      	uxtb	r3, r3
 800811e:	461a      	mov	r2, r3
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008128:	611a      	str	r2, [r3, #16]
 800812a:	e01b      	b.n	8008164 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800812c:	897b      	ldrh	r3, [r7, #10]
 800812e:	11db      	asrs	r3, r3, #7
 8008130:	b2db      	uxtb	r3, r3
 8008132:	f003 0306 	and.w	r3, r3, #6
 8008136:	b2db      	uxtb	r3, r3
 8008138:	f063 030f 	orn	r3, r3, #15
 800813c:	b2da      	uxtb	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	490e      	ldr	r1, [pc, #56]	; (8008184 <I2C_MasterRequestWrite+0xfc>)
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f000 f943 	bl	80083d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e010      	b.n	800817c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800815a:	897b      	ldrh	r3, [r7, #10]
 800815c:	b2da      	uxtb	r2, r3
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	4907      	ldr	r1, [pc, #28]	; (8008188 <I2C_MasterRequestWrite+0x100>)
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 f933 	bl	80083d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e000      	b.n	800817c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	00010008 	.word	0x00010008
 8008188:	00010002 	.word	0x00010002

0800818c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b088      	sub	sp, #32
 8008190:	af02      	add	r7, sp, #8
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	607a      	str	r2, [r7, #4]
 8008196:	603b      	str	r3, [r7, #0]
 8008198:	460b      	mov	r3, r1
 800819a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80081b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	2b08      	cmp	r3, #8
 80081b6:	d006      	beq.n	80081c6 <I2C_MasterRequestRead+0x3a>
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d003      	beq.n	80081c6 <I2C_MasterRequestRead+0x3a>
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80081c4:	d108      	bne.n	80081d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081d4:	601a      	str	r2, [r3, #0]
 80081d6:	e00b      	b.n	80081f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081dc:	2b11      	cmp	r3, #17
 80081de:	d107      	bne.n	80081f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 f893 	bl	8008328 <I2C_WaitOnFlagUntilTimeout>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00d      	beq.n	8008224 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008216:	d103      	bne.n	8008220 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800821e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008220:	2303      	movs	r3, #3
 8008222:	e079      	b.n	8008318 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800822c:	d108      	bne.n	8008240 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800822e:	897b      	ldrh	r3, [r7, #10]
 8008230:	b2db      	uxtb	r3, r3
 8008232:	f043 0301 	orr.w	r3, r3, #1
 8008236:	b2da      	uxtb	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	611a      	str	r2, [r3, #16]
 800823e:	e05f      	b.n	8008300 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008240:	897b      	ldrh	r3, [r7, #10]
 8008242:	11db      	asrs	r3, r3, #7
 8008244:	b2db      	uxtb	r3, r3
 8008246:	f003 0306 	and.w	r3, r3, #6
 800824a:	b2db      	uxtb	r3, r3
 800824c:	f063 030f 	orn	r3, r3, #15
 8008250:	b2da      	uxtb	r2, r3
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	4930      	ldr	r1, [pc, #192]	; (8008320 <I2C_MasterRequestRead+0x194>)
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f000 f8b9 	bl	80083d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e054      	b.n	8008318 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800826e:	897b      	ldrh	r3, [r7, #10]
 8008270:	b2da      	uxtb	r2, r3
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	4929      	ldr	r1, [pc, #164]	; (8008324 <I2C_MasterRequestRead+0x198>)
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f000 f8a9 	bl	80083d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e044      	b.n	8008318 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800828e:	2300      	movs	r3, #0
 8008290:	613b      	str	r3, [r7, #16]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	613b      	str	r3, [r7, #16]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	613b      	str	r3, [r7, #16]
 80082a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f000 f831 	bl	8008328 <I2C_WaitOnFlagUntilTimeout>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00d      	beq.n	80082e8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082da:	d103      	bne.n	80082e4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082e2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e017      	b.n	8008318 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80082e8:	897b      	ldrh	r3, [r7, #10]
 80082ea:	11db      	asrs	r3, r3, #7
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	f003 0306 	and.w	r3, r3, #6
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	f063 030e 	orn	r3, r3, #14
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	4907      	ldr	r1, [pc, #28]	; (8008324 <I2C_MasterRequestRead+0x198>)
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 f865 	bl	80083d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d001      	beq.n	8008316 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e000      	b.n	8008318 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3718      	adds	r7, #24
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	00010008 	.word	0x00010008
 8008324:	00010002 	.word	0x00010002

08008328 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	603b      	str	r3, [r7, #0]
 8008334:	4613      	mov	r3, r2
 8008336:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008338:	e025      	b.n	8008386 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008340:	d021      	beq.n	8008386 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008342:	f7fe faeb 	bl	800691c <HAL_GetTick>
 8008346:	4602      	mov	r2, r0
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	683a      	ldr	r2, [r7, #0]
 800834e:	429a      	cmp	r2, r3
 8008350:	d302      	bcc.n	8008358 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d116      	bne.n	8008386 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2220      	movs	r2, #32
 8008362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008372:	f043 0220 	orr.w	r2, r3, #32
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e023      	b.n	80083ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	0c1b      	lsrs	r3, r3, #16
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2b01      	cmp	r3, #1
 800838e:	d10d      	bne.n	80083ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	43da      	mvns	r2, r3
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	4013      	ands	r3, r2
 800839c:	b29b      	uxth	r3, r3
 800839e:	2b00      	cmp	r3, #0
 80083a0:	bf0c      	ite	eq
 80083a2:	2301      	moveq	r3, #1
 80083a4:	2300      	movne	r3, #0
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	461a      	mov	r2, r3
 80083aa:	e00c      	b.n	80083c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	43da      	mvns	r2, r3
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	4013      	ands	r3, r2
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	bf0c      	ite	eq
 80083be:	2301      	moveq	r3, #1
 80083c0:	2300      	movne	r3, #0
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	461a      	mov	r2, r3
 80083c6:	79fb      	ldrb	r3, [r7, #7]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d0b6      	beq.n	800833a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	60f8      	str	r0, [r7, #12]
 80083de:	60b9      	str	r1, [r7, #8]
 80083e0:	607a      	str	r2, [r7, #4]
 80083e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80083e4:	e051      	b.n	800848a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083f4:	d123      	bne.n	800843e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008404:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800840e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2220      	movs	r2, #32
 800841a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842a:	f043 0204 	orr.w	r2, r3, #4
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e046      	b.n	80084cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008444:	d021      	beq.n	800848a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008446:	f7fe fa69 	bl	800691c <HAL_GetTick>
 800844a:	4602      	mov	r2, r0
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	429a      	cmp	r2, r3
 8008454:	d302      	bcc.n	800845c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d116      	bne.n	800848a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2220      	movs	r2, #32
 8008466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008476:	f043 0220 	orr.w	r2, r3, #32
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e020      	b.n	80084cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	0c1b      	lsrs	r3, r3, #16
 800848e:	b2db      	uxtb	r3, r3
 8008490:	2b01      	cmp	r3, #1
 8008492:	d10c      	bne.n	80084ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	695b      	ldr	r3, [r3, #20]
 800849a:	43da      	mvns	r2, r3
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	4013      	ands	r3, r2
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	bf14      	ite	ne
 80084a6:	2301      	movne	r3, #1
 80084a8:	2300      	moveq	r3, #0
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	e00b      	b.n	80084c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	43da      	mvns	r2, r3
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	4013      	ands	r3, r2
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	2b00      	cmp	r3, #0
 80084be:	bf14      	ite	ne
 80084c0:	2301      	movne	r3, #1
 80084c2:	2300      	moveq	r3, #0
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d18d      	bne.n	80083e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084e0:	e02d      	b.n	800853e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f000 f8ce 	bl	8008684 <I2C_IsAcknowledgeFailed>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e02d      	b.n	800854e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f8:	d021      	beq.n	800853e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084fa:	f7fe fa0f 	bl	800691c <HAL_GetTick>
 80084fe:	4602      	mov	r2, r0
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	68ba      	ldr	r2, [r7, #8]
 8008506:	429a      	cmp	r2, r3
 8008508:	d302      	bcc.n	8008510 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d116      	bne.n	800853e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2220      	movs	r2, #32
 800851a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852a:	f043 0220 	orr.w	r2, r3, #32
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e007      	b.n	800854e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	695b      	ldr	r3, [r3, #20]
 8008544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008548:	2b80      	cmp	r3, #128	; 0x80
 800854a:	d1ca      	bne.n	80084e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	60f8      	str	r0, [r7, #12]
 800855e:	60b9      	str	r1, [r7, #8]
 8008560:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008562:	e02d      	b.n	80085c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f000 f88d 	bl	8008684 <I2C_IsAcknowledgeFailed>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d001      	beq.n	8008574 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e02d      	b.n	80085d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800857a:	d021      	beq.n	80085c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800857c:	f7fe f9ce 	bl	800691c <HAL_GetTick>
 8008580:	4602      	mov	r2, r0
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	68ba      	ldr	r2, [r7, #8]
 8008588:	429a      	cmp	r2, r3
 800858a:	d302      	bcc.n	8008592 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d116      	bne.n	80085c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2220      	movs	r2, #32
 800859c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ac:	f043 0220 	orr.w	r2, r3, #32
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e007      	b.n	80085d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	f003 0304 	and.w	r3, r3, #4
 80085ca:	2b04      	cmp	r3, #4
 80085cc:	d1ca      	bne.n	8008564 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80085e4:	e042      	b.n	800866c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	695b      	ldr	r3, [r3, #20]
 80085ec:	f003 0310 	and.w	r3, r3, #16
 80085f0:	2b10      	cmp	r3, #16
 80085f2:	d119      	bne.n	8008628 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f06f 0210 	mvn.w	r2, #16
 80085fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2220      	movs	r2, #32
 8008608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e029      	b.n	800867c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008628:	f7fe f978 	bl	800691c <HAL_GetTick>
 800862c:	4602      	mov	r2, r0
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	429a      	cmp	r2, r3
 8008636:	d302      	bcc.n	800863e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d116      	bne.n	800866c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2220      	movs	r2, #32
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008658:	f043 0220 	orr.w	r2, r3, #32
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e007      	b.n	800867c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008676:	2b40      	cmp	r3, #64	; 0x40
 8008678:	d1b5      	bne.n	80085e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800869a:	d11b      	bne.n	80086d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80086a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2220      	movs	r2, #32
 80086b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c0:	f043 0204 	orr.w	r2, r3, #4
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e000      	b.n	80086d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
	...

080086e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d101      	bne.n	80086f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e267      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 0301 	and.w	r3, r3, #1
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d075      	beq.n	80087ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008702:	4b88      	ldr	r3, [pc, #544]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f003 030c 	and.w	r3, r3, #12
 800870a:	2b04      	cmp	r3, #4
 800870c:	d00c      	beq.n	8008728 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800870e:	4b85      	ldr	r3, [pc, #532]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008716:	2b08      	cmp	r3, #8
 8008718:	d112      	bne.n	8008740 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800871a:	4b82      	ldr	r3, [pc, #520]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008726:	d10b      	bne.n	8008740 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008728:	4b7e      	ldr	r3, [pc, #504]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d05b      	beq.n	80087ec <HAL_RCC_OscConfig+0x108>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d157      	bne.n	80087ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e242      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008748:	d106      	bne.n	8008758 <HAL_RCC_OscConfig+0x74>
 800874a:	4b76      	ldr	r3, [pc, #472]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a75      	ldr	r2, [pc, #468]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 8008750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	e01d      	b.n	8008794 <HAL_RCC_OscConfig+0xb0>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008760:	d10c      	bne.n	800877c <HAL_RCC_OscConfig+0x98>
 8008762:	4b70      	ldr	r3, [pc, #448]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a6f      	ldr	r2, [pc, #444]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 8008768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800876c:	6013      	str	r3, [r2, #0]
 800876e:	4b6d      	ldr	r3, [pc, #436]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a6c      	ldr	r2, [pc, #432]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 8008774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008778:	6013      	str	r3, [r2, #0]
 800877a:	e00b      	b.n	8008794 <HAL_RCC_OscConfig+0xb0>
 800877c:	4b69      	ldr	r3, [pc, #420]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a68      	ldr	r2, [pc, #416]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 8008782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008786:	6013      	str	r3, [r2, #0]
 8008788:	4b66      	ldr	r3, [pc, #408]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a65      	ldr	r2, [pc, #404]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 800878e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d013      	beq.n	80087c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800879c:	f7fe f8be 	bl	800691c <HAL_GetTick>
 80087a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087a2:	e008      	b.n	80087b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087a4:	f7fe f8ba 	bl	800691c <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	2b64      	cmp	r3, #100	; 0x64
 80087b0:	d901      	bls.n	80087b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	e207      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087b6:	4b5b      	ldr	r3, [pc, #364]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d0f0      	beq.n	80087a4 <HAL_RCC_OscConfig+0xc0>
 80087c2:	e014      	b.n	80087ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087c4:	f7fe f8aa 	bl	800691c <HAL_GetTick>
 80087c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087ca:	e008      	b.n	80087de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087cc:	f7fe f8a6 	bl	800691c <HAL_GetTick>
 80087d0:	4602      	mov	r2, r0
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	2b64      	cmp	r3, #100	; 0x64
 80087d8:	d901      	bls.n	80087de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e1f3      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087de:	4b51      	ldr	r3, [pc, #324]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1f0      	bne.n	80087cc <HAL_RCC_OscConfig+0xe8>
 80087ea:	e000      	b.n	80087ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d063      	beq.n	80088c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80087fa:	4b4a      	ldr	r3, [pc, #296]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f003 030c 	and.w	r3, r3, #12
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00b      	beq.n	800881e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008806:	4b47      	ldr	r3, [pc, #284]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800880e:	2b08      	cmp	r3, #8
 8008810:	d11c      	bne.n	800884c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008812:	4b44      	ldr	r3, [pc, #272]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d116      	bne.n	800884c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800881e:	4b41      	ldr	r3, [pc, #260]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 0302 	and.w	r3, r3, #2
 8008826:	2b00      	cmp	r3, #0
 8008828:	d005      	beq.n	8008836 <HAL_RCC_OscConfig+0x152>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d001      	beq.n	8008836 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e1c7      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008836:	4b3b      	ldr	r3, [pc, #236]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	00db      	lsls	r3, r3, #3
 8008844:	4937      	ldr	r1, [pc, #220]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 8008846:	4313      	orrs	r3, r2
 8008848:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800884a:	e03a      	b.n	80088c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d020      	beq.n	8008896 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008854:	4b34      	ldr	r3, [pc, #208]	; (8008928 <HAL_RCC_OscConfig+0x244>)
 8008856:	2201      	movs	r2, #1
 8008858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800885a:	f7fe f85f 	bl	800691c <HAL_GetTick>
 800885e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008860:	e008      	b.n	8008874 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008862:	f7fe f85b 	bl	800691c <HAL_GetTick>
 8008866:	4602      	mov	r2, r0
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	2b02      	cmp	r3, #2
 800886e:	d901      	bls.n	8008874 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008870:	2303      	movs	r3, #3
 8008872:	e1a8      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008874:	4b2b      	ldr	r3, [pc, #172]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0302 	and.w	r3, r3, #2
 800887c:	2b00      	cmp	r3, #0
 800887e:	d0f0      	beq.n	8008862 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008880:	4b28      	ldr	r3, [pc, #160]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	00db      	lsls	r3, r3, #3
 800888e:	4925      	ldr	r1, [pc, #148]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 8008890:	4313      	orrs	r3, r2
 8008892:	600b      	str	r3, [r1, #0]
 8008894:	e015      	b.n	80088c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008896:	4b24      	ldr	r3, [pc, #144]	; (8008928 <HAL_RCC_OscConfig+0x244>)
 8008898:	2200      	movs	r2, #0
 800889a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800889c:	f7fe f83e 	bl	800691c <HAL_GetTick>
 80088a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088a2:	e008      	b.n	80088b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088a4:	f7fe f83a 	bl	800691c <HAL_GetTick>
 80088a8:	4602      	mov	r2, r0
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d901      	bls.n	80088b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e187      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088b6:	4b1b      	ldr	r3, [pc, #108]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 0302 	and.w	r3, r3, #2
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1f0      	bne.n	80088a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 0308 	and.w	r3, r3, #8
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d036      	beq.n	800893c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d016      	beq.n	8008904 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088d6:	4b15      	ldr	r3, [pc, #84]	; (800892c <HAL_RCC_OscConfig+0x248>)
 80088d8:	2201      	movs	r2, #1
 80088da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088dc:	f7fe f81e 	bl	800691c <HAL_GetTick>
 80088e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088e2:	e008      	b.n	80088f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088e4:	f7fe f81a 	bl	800691c <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d901      	bls.n	80088f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e167      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088f6:	4b0b      	ldr	r3, [pc, #44]	; (8008924 <HAL_RCC_OscConfig+0x240>)
 80088f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088fa:	f003 0302 	and.w	r3, r3, #2
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d0f0      	beq.n	80088e4 <HAL_RCC_OscConfig+0x200>
 8008902:	e01b      	b.n	800893c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008904:	4b09      	ldr	r3, [pc, #36]	; (800892c <HAL_RCC_OscConfig+0x248>)
 8008906:	2200      	movs	r2, #0
 8008908:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800890a:	f7fe f807 	bl	800691c <HAL_GetTick>
 800890e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008910:	e00e      	b.n	8008930 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008912:	f7fe f803 	bl	800691c <HAL_GetTick>
 8008916:	4602      	mov	r2, r0
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	2b02      	cmp	r3, #2
 800891e:	d907      	bls.n	8008930 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008920:	2303      	movs	r3, #3
 8008922:	e150      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
 8008924:	40023800 	.word	0x40023800
 8008928:	42470000 	.word	0x42470000
 800892c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008930:	4b88      	ldr	r3, [pc, #544]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008934:	f003 0302 	and.w	r3, r3, #2
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1ea      	bne.n	8008912 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0304 	and.w	r3, r3, #4
 8008944:	2b00      	cmp	r3, #0
 8008946:	f000 8097 	beq.w	8008a78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800894a:	2300      	movs	r3, #0
 800894c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800894e:	4b81      	ldr	r3, [pc, #516]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10f      	bne.n	800897a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800895a:	2300      	movs	r3, #0
 800895c:	60bb      	str	r3, [r7, #8]
 800895e:	4b7d      	ldr	r3, [pc, #500]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008962:	4a7c      	ldr	r2, [pc, #496]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008968:	6413      	str	r3, [r2, #64]	; 0x40
 800896a:	4b7a      	ldr	r3, [pc, #488]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 800896c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008972:	60bb      	str	r3, [r7, #8]
 8008974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008976:	2301      	movs	r3, #1
 8008978:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800897a:	4b77      	ldr	r3, [pc, #476]	; (8008b58 <HAL_RCC_OscConfig+0x474>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008982:	2b00      	cmp	r3, #0
 8008984:	d118      	bne.n	80089b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008986:	4b74      	ldr	r3, [pc, #464]	; (8008b58 <HAL_RCC_OscConfig+0x474>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a73      	ldr	r2, [pc, #460]	; (8008b58 <HAL_RCC_OscConfig+0x474>)
 800898c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008992:	f7fd ffc3 	bl	800691c <HAL_GetTick>
 8008996:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008998:	e008      	b.n	80089ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800899a:	f7fd ffbf 	bl	800691c <HAL_GetTick>
 800899e:	4602      	mov	r2, r0
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d901      	bls.n	80089ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e10c      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089ac:	4b6a      	ldr	r3, [pc, #424]	; (8008b58 <HAL_RCC_OscConfig+0x474>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d0f0      	beq.n	800899a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d106      	bne.n	80089ce <HAL_RCC_OscConfig+0x2ea>
 80089c0:	4b64      	ldr	r3, [pc, #400]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 80089c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c4:	4a63      	ldr	r2, [pc, #396]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 80089c6:	f043 0301 	orr.w	r3, r3, #1
 80089ca:	6713      	str	r3, [r2, #112]	; 0x70
 80089cc:	e01c      	b.n	8008a08 <HAL_RCC_OscConfig+0x324>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	2b05      	cmp	r3, #5
 80089d4:	d10c      	bne.n	80089f0 <HAL_RCC_OscConfig+0x30c>
 80089d6:	4b5f      	ldr	r3, [pc, #380]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 80089d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089da:	4a5e      	ldr	r2, [pc, #376]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 80089dc:	f043 0304 	orr.w	r3, r3, #4
 80089e0:	6713      	str	r3, [r2, #112]	; 0x70
 80089e2:	4b5c      	ldr	r3, [pc, #368]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 80089e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e6:	4a5b      	ldr	r2, [pc, #364]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 80089e8:	f043 0301 	orr.w	r3, r3, #1
 80089ec:	6713      	str	r3, [r2, #112]	; 0x70
 80089ee:	e00b      	b.n	8008a08 <HAL_RCC_OscConfig+0x324>
 80089f0:	4b58      	ldr	r3, [pc, #352]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 80089f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f4:	4a57      	ldr	r2, [pc, #348]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 80089f6:	f023 0301 	bic.w	r3, r3, #1
 80089fa:	6713      	str	r3, [r2, #112]	; 0x70
 80089fc:	4b55      	ldr	r3, [pc, #340]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 80089fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a00:	4a54      	ldr	r2, [pc, #336]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008a02:	f023 0304 	bic.w	r3, r3, #4
 8008a06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d015      	beq.n	8008a3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a10:	f7fd ff84 	bl	800691c <HAL_GetTick>
 8008a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a16:	e00a      	b.n	8008a2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a18:	f7fd ff80 	bl	800691c <HAL_GetTick>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d901      	bls.n	8008a2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008a2a:	2303      	movs	r3, #3
 8008a2c:	e0cb      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a2e:	4b49      	ldr	r3, [pc, #292]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a32:	f003 0302 	and.w	r3, r3, #2
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d0ee      	beq.n	8008a18 <HAL_RCC_OscConfig+0x334>
 8008a3a:	e014      	b.n	8008a66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a3c:	f7fd ff6e 	bl	800691c <HAL_GetTick>
 8008a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a42:	e00a      	b.n	8008a5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a44:	f7fd ff6a 	bl	800691c <HAL_GetTick>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d901      	bls.n	8008a5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e0b5      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a5a:	4b3e      	ldr	r3, [pc, #248]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a5e:	f003 0302 	and.w	r3, r3, #2
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1ee      	bne.n	8008a44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a66:	7dfb      	ldrb	r3, [r7, #23]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d105      	bne.n	8008a78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a6c:	4b39      	ldr	r3, [pc, #228]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a70:	4a38      	ldr	r2, [pc, #224]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f000 80a1 	beq.w	8008bc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a82:	4b34      	ldr	r3, [pc, #208]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f003 030c 	and.w	r3, r3, #12
 8008a8a:	2b08      	cmp	r3, #8
 8008a8c:	d05c      	beq.n	8008b48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d141      	bne.n	8008b1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a96:	4b31      	ldr	r3, [pc, #196]	; (8008b5c <HAL_RCC_OscConfig+0x478>)
 8008a98:	2200      	movs	r2, #0
 8008a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a9c:	f7fd ff3e 	bl	800691c <HAL_GetTick>
 8008aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008aa2:	e008      	b.n	8008ab6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008aa4:	f7fd ff3a 	bl	800691c <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d901      	bls.n	8008ab6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e087      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ab6:	4b27      	ldr	r3, [pc, #156]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1f0      	bne.n	8008aa4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	69da      	ldr	r2, [r3, #28]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	431a      	orrs	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad0:	019b      	lsls	r3, r3, #6
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad8:	085b      	lsrs	r3, r3, #1
 8008ada:	3b01      	subs	r3, #1
 8008adc:	041b      	lsls	r3, r3, #16
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae4:	061b      	lsls	r3, r3, #24
 8008ae6:	491b      	ldr	r1, [pc, #108]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008aec:	4b1b      	ldr	r3, [pc, #108]	; (8008b5c <HAL_RCC_OscConfig+0x478>)
 8008aee:	2201      	movs	r2, #1
 8008af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008af2:	f7fd ff13 	bl	800691c <HAL_GetTick>
 8008af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008af8:	e008      	b.n	8008b0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008afa:	f7fd ff0f 	bl	800691c <HAL_GetTick>
 8008afe:	4602      	mov	r2, r0
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d901      	bls.n	8008b0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e05c      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b0c:	4b11      	ldr	r3, [pc, #68]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d0f0      	beq.n	8008afa <HAL_RCC_OscConfig+0x416>
 8008b18:	e054      	b.n	8008bc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b1a:	4b10      	ldr	r3, [pc, #64]	; (8008b5c <HAL_RCC_OscConfig+0x478>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b20:	f7fd fefc 	bl	800691c <HAL_GetTick>
 8008b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b26:	e008      	b.n	8008b3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b28:	f7fd fef8 	bl	800691c <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d901      	bls.n	8008b3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e045      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b3a:	4b06      	ldr	r3, [pc, #24]	; (8008b54 <HAL_RCC_OscConfig+0x470>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1f0      	bne.n	8008b28 <HAL_RCC_OscConfig+0x444>
 8008b46:	e03d      	b.n	8008bc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d107      	bne.n	8008b60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e038      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
 8008b54:	40023800 	.word	0x40023800
 8008b58:	40007000 	.word	0x40007000
 8008b5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008b60:	4b1b      	ldr	r3, [pc, #108]	; (8008bd0 <HAL_RCC_OscConfig+0x4ec>)
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	699b      	ldr	r3, [r3, #24]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d028      	beq.n	8008bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d121      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d11a      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008b90:	4013      	ands	r3, r2
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008b96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d111      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba6:	085b      	lsrs	r3, r3, #1
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d107      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d001      	beq.n	8008bc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	40023800 	.word	0x40023800

08008bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e0cc      	b.n	8008d82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008be8:	4b68      	ldr	r3, [pc, #416]	; (8008d8c <HAL_RCC_ClockConfig+0x1b8>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0307 	and.w	r3, r3, #7
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d90c      	bls.n	8008c10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bf6:	4b65      	ldr	r3, [pc, #404]	; (8008d8c <HAL_RCC_ClockConfig+0x1b8>)
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	b2d2      	uxtb	r2, r2
 8008bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bfe:	4b63      	ldr	r3, [pc, #396]	; (8008d8c <HAL_RCC_ClockConfig+0x1b8>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f003 0307 	and.w	r3, r3, #7
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d001      	beq.n	8008c10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e0b8      	b.n	8008d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0302 	and.w	r3, r3, #2
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d020      	beq.n	8008c5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 0304 	and.w	r3, r3, #4
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d005      	beq.n	8008c34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c28:	4b59      	ldr	r3, [pc, #356]	; (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	4a58      	ldr	r2, [pc, #352]	; (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008c2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008c32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0308 	and.w	r3, r3, #8
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d005      	beq.n	8008c4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c40:	4b53      	ldr	r3, [pc, #332]	; (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	4a52      	ldr	r2, [pc, #328]	; (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008c46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008c4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c4c:	4b50      	ldr	r3, [pc, #320]	; (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	494d      	ldr	r1, [pc, #308]	; (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0301 	and.w	r3, r3, #1
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d044      	beq.n	8008cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d107      	bne.n	8008c82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c72:	4b47      	ldr	r3, [pc, #284]	; (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d119      	bne.n	8008cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e07f      	b.n	8008d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d003      	beq.n	8008c92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c8e:	2b03      	cmp	r3, #3
 8008c90:	d107      	bne.n	8008ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c92:	4b3f      	ldr	r3, [pc, #252]	; (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d109      	bne.n	8008cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e06f      	b.n	8008d82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ca2:	4b3b      	ldr	r3, [pc, #236]	; (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0302 	and.w	r3, r3, #2
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d101      	bne.n	8008cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e067      	b.n	8008d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008cb2:	4b37      	ldr	r3, [pc, #220]	; (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	f023 0203 	bic.w	r2, r3, #3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	4934      	ldr	r1, [pc, #208]	; (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008cc4:	f7fd fe2a 	bl	800691c <HAL_GetTick>
 8008cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cca:	e00a      	b.n	8008ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ccc:	f7fd fe26 	bl	800691c <HAL_GetTick>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d901      	bls.n	8008ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e04f      	b.n	8008d82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ce2:	4b2b      	ldr	r3, [pc, #172]	; (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	f003 020c 	and.w	r2, r3, #12
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d1eb      	bne.n	8008ccc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008cf4:	4b25      	ldr	r3, [pc, #148]	; (8008d8c <HAL_RCC_ClockConfig+0x1b8>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 0307 	and.w	r3, r3, #7
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d20c      	bcs.n	8008d1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d02:	4b22      	ldr	r3, [pc, #136]	; (8008d8c <HAL_RCC_ClockConfig+0x1b8>)
 8008d04:	683a      	ldr	r2, [r7, #0]
 8008d06:	b2d2      	uxtb	r2, r2
 8008d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d0a:	4b20      	ldr	r3, [pc, #128]	; (8008d8c <HAL_RCC_ClockConfig+0x1b8>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0307 	and.w	r3, r3, #7
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d001      	beq.n	8008d1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e032      	b.n	8008d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 0304 	and.w	r3, r3, #4
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d008      	beq.n	8008d3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d28:	4b19      	ldr	r3, [pc, #100]	; (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	4916      	ldr	r1, [pc, #88]	; (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008d36:	4313      	orrs	r3, r2
 8008d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 0308 	and.w	r3, r3, #8
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d009      	beq.n	8008d5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d46:	4b12      	ldr	r3, [pc, #72]	; (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	00db      	lsls	r3, r3, #3
 8008d54:	490e      	ldr	r1, [pc, #56]	; (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008d56:	4313      	orrs	r3, r2
 8008d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008d5a:	f000 f821 	bl	8008da0 <HAL_RCC_GetSysClockFreq>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	4b0b      	ldr	r3, [pc, #44]	; (8008d90 <HAL_RCC_ClockConfig+0x1bc>)
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	091b      	lsrs	r3, r3, #4
 8008d66:	f003 030f 	and.w	r3, r3, #15
 8008d6a:	490a      	ldr	r1, [pc, #40]	; (8008d94 <HAL_RCC_ClockConfig+0x1c0>)
 8008d6c:	5ccb      	ldrb	r3, [r1, r3]
 8008d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d72:	4a09      	ldr	r2, [pc, #36]	; (8008d98 <HAL_RCC_ClockConfig+0x1c4>)
 8008d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008d76:	4b09      	ldr	r3, [pc, #36]	; (8008d9c <HAL_RCC_ClockConfig+0x1c8>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fd fd8a 	bl	8006894 <HAL_InitTick>

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	40023c00 	.word	0x40023c00
 8008d90:	40023800 	.word	0x40023800
 8008d94:	08010d44 	.word	0x08010d44
 8008d98:	20001268 	.word	0x20001268
 8008d9c:	2000126c 	.word	0x2000126c

08008da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008da4:	b090      	sub	sp, #64	; 0x40
 8008da6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008da8:	2300      	movs	r3, #0
 8008daa:	637b      	str	r3, [r7, #52]	; 0x34
 8008dac:	2300      	movs	r3, #0
 8008dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008db0:	2300      	movs	r3, #0
 8008db2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008db4:	2300      	movs	r3, #0
 8008db6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008db8:	4b59      	ldr	r3, [pc, #356]	; (8008f20 <HAL_RCC_GetSysClockFreq+0x180>)
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f003 030c 	and.w	r3, r3, #12
 8008dc0:	2b08      	cmp	r3, #8
 8008dc2:	d00d      	beq.n	8008de0 <HAL_RCC_GetSysClockFreq+0x40>
 8008dc4:	2b08      	cmp	r3, #8
 8008dc6:	f200 80a1 	bhi.w	8008f0c <HAL_RCC_GetSysClockFreq+0x16c>
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d002      	beq.n	8008dd4 <HAL_RCC_GetSysClockFreq+0x34>
 8008dce:	2b04      	cmp	r3, #4
 8008dd0:	d003      	beq.n	8008dda <HAL_RCC_GetSysClockFreq+0x3a>
 8008dd2:	e09b      	b.n	8008f0c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008dd4:	4b53      	ldr	r3, [pc, #332]	; (8008f24 <HAL_RCC_GetSysClockFreq+0x184>)
 8008dd6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008dd8:	e09b      	b.n	8008f12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008dda:	4b53      	ldr	r3, [pc, #332]	; (8008f28 <HAL_RCC_GetSysClockFreq+0x188>)
 8008ddc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008dde:	e098      	b.n	8008f12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008de0:	4b4f      	ldr	r3, [pc, #316]	; (8008f20 <HAL_RCC_GetSysClockFreq+0x180>)
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008de8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008dea:	4b4d      	ldr	r3, [pc, #308]	; (8008f20 <HAL_RCC_GetSysClockFreq+0x180>)
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d028      	beq.n	8008e48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008df6:	4b4a      	ldr	r3, [pc, #296]	; (8008f20 <HAL_RCC_GetSysClockFreq+0x180>)
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	099b      	lsrs	r3, r3, #6
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	623b      	str	r3, [r7, #32]
 8008e00:	627a      	str	r2, [r7, #36]	; 0x24
 8008e02:	6a3b      	ldr	r3, [r7, #32]
 8008e04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008e08:	2100      	movs	r1, #0
 8008e0a:	4b47      	ldr	r3, [pc, #284]	; (8008f28 <HAL_RCC_GetSysClockFreq+0x188>)
 8008e0c:	fb03 f201 	mul.w	r2, r3, r1
 8008e10:	2300      	movs	r3, #0
 8008e12:	fb00 f303 	mul.w	r3, r0, r3
 8008e16:	4413      	add	r3, r2
 8008e18:	4a43      	ldr	r2, [pc, #268]	; (8008f28 <HAL_RCC_GetSysClockFreq+0x188>)
 8008e1a:	fba0 1202 	umull	r1, r2, r0, r2
 8008e1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e20:	460a      	mov	r2, r1
 8008e22:	62ba      	str	r2, [r7, #40]	; 0x28
 8008e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e26:	4413      	add	r3, r2
 8008e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	61bb      	str	r3, [r7, #24]
 8008e30:	61fa      	str	r2, [r7, #28]
 8008e32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008e3a:	f7f7 ff0d 	bl	8000c58 <__aeabi_uldivmod>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	460b      	mov	r3, r1
 8008e42:	4613      	mov	r3, r2
 8008e44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e46:	e053      	b.n	8008ef0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e48:	4b35      	ldr	r3, [pc, #212]	; (8008f20 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	099b      	lsrs	r3, r3, #6
 8008e4e:	2200      	movs	r2, #0
 8008e50:	613b      	str	r3, [r7, #16]
 8008e52:	617a      	str	r2, [r7, #20]
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008e5a:	f04f 0b00 	mov.w	fp, #0
 8008e5e:	4652      	mov	r2, sl
 8008e60:	465b      	mov	r3, fp
 8008e62:	f04f 0000 	mov.w	r0, #0
 8008e66:	f04f 0100 	mov.w	r1, #0
 8008e6a:	0159      	lsls	r1, r3, #5
 8008e6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e70:	0150      	lsls	r0, r2, #5
 8008e72:	4602      	mov	r2, r0
 8008e74:	460b      	mov	r3, r1
 8008e76:	ebb2 080a 	subs.w	r8, r2, sl
 8008e7a:	eb63 090b 	sbc.w	r9, r3, fp
 8008e7e:	f04f 0200 	mov.w	r2, #0
 8008e82:	f04f 0300 	mov.w	r3, #0
 8008e86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008e8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008e8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008e92:	ebb2 0408 	subs.w	r4, r2, r8
 8008e96:	eb63 0509 	sbc.w	r5, r3, r9
 8008e9a:	f04f 0200 	mov.w	r2, #0
 8008e9e:	f04f 0300 	mov.w	r3, #0
 8008ea2:	00eb      	lsls	r3, r5, #3
 8008ea4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ea8:	00e2      	lsls	r2, r4, #3
 8008eaa:	4614      	mov	r4, r2
 8008eac:	461d      	mov	r5, r3
 8008eae:	eb14 030a 	adds.w	r3, r4, sl
 8008eb2:	603b      	str	r3, [r7, #0]
 8008eb4:	eb45 030b 	adc.w	r3, r5, fp
 8008eb8:	607b      	str	r3, [r7, #4]
 8008eba:	f04f 0200 	mov.w	r2, #0
 8008ebe:	f04f 0300 	mov.w	r3, #0
 8008ec2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	028b      	lsls	r3, r1, #10
 8008eca:	4621      	mov	r1, r4
 8008ecc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	028a      	lsls	r2, r1, #10
 8008ed4:	4610      	mov	r0, r2
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eda:	2200      	movs	r2, #0
 8008edc:	60bb      	str	r3, [r7, #8]
 8008ede:	60fa      	str	r2, [r7, #12]
 8008ee0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ee4:	f7f7 feb8 	bl	8000c58 <__aeabi_uldivmod>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	460b      	mov	r3, r1
 8008eec:	4613      	mov	r3, r2
 8008eee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008ef0:	4b0b      	ldr	r3, [pc, #44]	; (8008f20 <HAL_RCC_GetSysClockFreq+0x180>)
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	0c1b      	lsrs	r3, r3, #16
 8008ef6:	f003 0303 	and.w	r3, r3, #3
 8008efa:	3301      	adds	r3, #1
 8008efc:	005b      	lsls	r3, r3, #1
 8008efe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008f00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008f0a:	e002      	b.n	8008f12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f0c:	4b05      	ldr	r3, [pc, #20]	; (8008f24 <HAL_RCC_GetSysClockFreq+0x184>)
 8008f0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3740      	adds	r7, #64	; 0x40
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f1e:	bf00      	nop
 8008f20:	40023800 	.word	0x40023800
 8008f24:	00f42400 	.word	0x00f42400
 8008f28:	017d7840 	.word	0x017d7840

08008f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f30:	4b03      	ldr	r3, [pc, #12]	; (8008f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f32:	681b      	ldr	r3, [r3, #0]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	20001268 	.word	0x20001268

08008f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008f48:	f7ff fff0 	bl	8008f2c <HAL_RCC_GetHCLKFreq>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	4b05      	ldr	r3, [pc, #20]	; (8008f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	0a9b      	lsrs	r3, r3, #10
 8008f54:	f003 0307 	and.w	r3, r3, #7
 8008f58:	4903      	ldr	r1, [pc, #12]	; (8008f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f5a:	5ccb      	ldrb	r3, [r1, r3]
 8008f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	40023800 	.word	0x40023800
 8008f68:	08010d54 	.word	0x08010d54

08008f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008f70:	f7ff ffdc 	bl	8008f2c <HAL_RCC_GetHCLKFreq>
 8008f74:	4602      	mov	r2, r0
 8008f76:	4b05      	ldr	r3, [pc, #20]	; (8008f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	0b5b      	lsrs	r3, r3, #13
 8008f7c:	f003 0307 	and.w	r3, r3, #7
 8008f80:	4903      	ldr	r1, [pc, #12]	; (8008f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f82:	5ccb      	ldrb	r3, [r1, r3]
 8008f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	40023800 	.word	0x40023800
 8008f90:	08010d54 	.word	0x08010d54

08008f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d101      	bne.n	8008fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e041      	b.n	800902a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d106      	bne.n	8008fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7fd fa8a 	bl	80064d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2202      	movs	r2, #2
 8008fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	3304      	adds	r3, #4
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	f000 f950 	bl	8009278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
	...

08009034 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b01      	cmp	r3, #1
 8009046:	d001      	beq.n	800904c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e03c      	b.n	80090c6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2202      	movs	r2, #2
 8009050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a1e      	ldr	r2, [pc, #120]	; (80090d4 <HAL_TIM_Base_Start+0xa0>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d018      	beq.n	8009090 <HAL_TIM_Base_Start+0x5c>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009066:	d013      	beq.n	8009090 <HAL_TIM_Base_Start+0x5c>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a1a      	ldr	r2, [pc, #104]	; (80090d8 <HAL_TIM_Base_Start+0xa4>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d00e      	beq.n	8009090 <HAL_TIM_Base_Start+0x5c>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a19      	ldr	r2, [pc, #100]	; (80090dc <HAL_TIM_Base_Start+0xa8>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d009      	beq.n	8009090 <HAL_TIM_Base_Start+0x5c>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a17      	ldr	r2, [pc, #92]	; (80090e0 <HAL_TIM_Base_Start+0xac>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d004      	beq.n	8009090 <HAL_TIM_Base_Start+0x5c>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a16      	ldr	r2, [pc, #88]	; (80090e4 <HAL_TIM_Base_Start+0xb0>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d111      	bne.n	80090b4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2b06      	cmp	r3, #6
 80090a0:	d010      	beq.n	80090c4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f042 0201 	orr.w	r2, r2, #1
 80090b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090b2:	e007      	b.n	80090c4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f042 0201 	orr.w	r2, r2, #1
 80090c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	40010000 	.word	0x40010000
 80090d8:	40000400 	.word	0x40000400
 80090dc:	40000800 	.word	0x40000800
 80090e0:	40000c00 	.word	0x40000c00
 80090e4:	40014000 	.word	0x40014000

080090e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d101      	bne.n	8009104 <HAL_TIM_ConfigClockSource+0x1c>
 8009100:	2302      	movs	r3, #2
 8009102:	e0b4      	b.n	800926e <HAL_TIM_ConfigClockSource+0x186>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2202      	movs	r2, #2
 8009110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009122:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800912a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800913c:	d03e      	beq.n	80091bc <HAL_TIM_ConfigClockSource+0xd4>
 800913e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009142:	f200 8087 	bhi.w	8009254 <HAL_TIM_ConfigClockSource+0x16c>
 8009146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800914a:	f000 8086 	beq.w	800925a <HAL_TIM_ConfigClockSource+0x172>
 800914e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009152:	d87f      	bhi.n	8009254 <HAL_TIM_ConfigClockSource+0x16c>
 8009154:	2b70      	cmp	r3, #112	; 0x70
 8009156:	d01a      	beq.n	800918e <HAL_TIM_ConfigClockSource+0xa6>
 8009158:	2b70      	cmp	r3, #112	; 0x70
 800915a:	d87b      	bhi.n	8009254 <HAL_TIM_ConfigClockSource+0x16c>
 800915c:	2b60      	cmp	r3, #96	; 0x60
 800915e:	d050      	beq.n	8009202 <HAL_TIM_ConfigClockSource+0x11a>
 8009160:	2b60      	cmp	r3, #96	; 0x60
 8009162:	d877      	bhi.n	8009254 <HAL_TIM_ConfigClockSource+0x16c>
 8009164:	2b50      	cmp	r3, #80	; 0x50
 8009166:	d03c      	beq.n	80091e2 <HAL_TIM_ConfigClockSource+0xfa>
 8009168:	2b50      	cmp	r3, #80	; 0x50
 800916a:	d873      	bhi.n	8009254 <HAL_TIM_ConfigClockSource+0x16c>
 800916c:	2b40      	cmp	r3, #64	; 0x40
 800916e:	d058      	beq.n	8009222 <HAL_TIM_ConfigClockSource+0x13a>
 8009170:	2b40      	cmp	r3, #64	; 0x40
 8009172:	d86f      	bhi.n	8009254 <HAL_TIM_ConfigClockSource+0x16c>
 8009174:	2b30      	cmp	r3, #48	; 0x30
 8009176:	d064      	beq.n	8009242 <HAL_TIM_ConfigClockSource+0x15a>
 8009178:	2b30      	cmp	r3, #48	; 0x30
 800917a:	d86b      	bhi.n	8009254 <HAL_TIM_ConfigClockSource+0x16c>
 800917c:	2b20      	cmp	r3, #32
 800917e:	d060      	beq.n	8009242 <HAL_TIM_ConfigClockSource+0x15a>
 8009180:	2b20      	cmp	r3, #32
 8009182:	d867      	bhi.n	8009254 <HAL_TIM_ConfigClockSource+0x16c>
 8009184:	2b00      	cmp	r3, #0
 8009186:	d05c      	beq.n	8009242 <HAL_TIM_ConfigClockSource+0x15a>
 8009188:	2b10      	cmp	r3, #16
 800918a:	d05a      	beq.n	8009242 <HAL_TIM_ConfigClockSource+0x15a>
 800918c:	e062      	b.n	8009254 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6818      	ldr	r0, [r3, #0]
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	6899      	ldr	r1, [r3, #8]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	685a      	ldr	r2, [r3, #4]
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	f000 f965 	bl	800946c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80091b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68ba      	ldr	r2, [r7, #8]
 80091b8:	609a      	str	r2, [r3, #8]
      break;
 80091ba:	e04f      	b.n	800925c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6818      	ldr	r0, [r3, #0]
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	6899      	ldr	r1, [r3, #8]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	685a      	ldr	r2, [r3, #4]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	f000 f94e 	bl	800946c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	689a      	ldr	r2, [r3, #8]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80091de:	609a      	str	r2, [r3, #8]
      break;
 80091e0:	e03c      	b.n	800925c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6818      	ldr	r0, [r3, #0]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	6859      	ldr	r1, [r3, #4]
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	461a      	mov	r2, r3
 80091f0:	f000 f8c2 	bl	8009378 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2150      	movs	r1, #80	; 0x50
 80091fa:	4618      	mov	r0, r3
 80091fc:	f000 f91b 	bl	8009436 <TIM_ITRx_SetConfig>
      break;
 8009200:	e02c      	b.n	800925c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6818      	ldr	r0, [r3, #0]
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	6859      	ldr	r1, [r3, #4]
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	461a      	mov	r2, r3
 8009210:	f000 f8e1 	bl	80093d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2160      	movs	r1, #96	; 0x60
 800921a:	4618      	mov	r0, r3
 800921c:	f000 f90b 	bl	8009436 <TIM_ITRx_SetConfig>
      break;
 8009220:	e01c      	b.n	800925c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6818      	ldr	r0, [r3, #0]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	6859      	ldr	r1, [r3, #4]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	461a      	mov	r2, r3
 8009230:	f000 f8a2 	bl	8009378 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2140      	movs	r1, #64	; 0x40
 800923a:	4618      	mov	r0, r3
 800923c:	f000 f8fb 	bl	8009436 <TIM_ITRx_SetConfig>
      break;
 8009240:	e00c      	b.n	800925c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4619      	mov	r1, r3
 800924c:	4610      	mov	r0, r2
 800924e:	f000 f8f2 	bl	8009436 <TIM_ITRx_SetConfig>
      break;
 8009252:	e003      	b.n	800925c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	73fb      	strb	r3, [r7, #15]
      break;
 8009258:	e000      	b.n	800925c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800925a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800926c:	7bfb      	ldrb	r3, [r7, #15]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
	...

08009278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a34      	ldr	r2, [pc, #208]	; (800935c <TIM_Base_SetConfig+0xe4>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d00f      	beq.n	80092b0 <TIM_Base_SetConfig+0x38>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009296:	d00b      	beq.n	80092b0 <TIM_Base_SetConfig+0x38>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a31      	ldr	r2, [pc, #196]	; (8009360 <TIM_Base_SetConfig+0xe8>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d007      	beq.n	80092b0 <TIM_Base_SetConfig+0x38>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a30      	ldr	r2, [pc, #192]	; (8009364 <TIM_Base_SetConfig+0xec>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d003      	beq.n	80092b0 <TIM_Base_SetConfig+0x38>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a2f      	ldr	r2, [pc, #188]	; (8009368 <TIM_Base_SetConfig+0xf0>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d108      	bne.n	80092c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	4313      	orrs	r3, r2
 80092c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4a25      	ldr	r2, [pc, #148]	; (800935c <TIM_Base_SetConfig+0xe4>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d01b      	beq.n	8009302 <TIM_Base_SetConfig+0x8a>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092d0:	d017      	beq.n	8009302 <TIM_Base_SetConfig+0x8a>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a22      	ldr	r2, [pc, #136]	; (8009360 <TIM_Base_SetConfig+0xe8>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d013      	beq.n	8009302 <TIM_Base_SetConfig+0x8a>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4a21      	ldr	r2, [pc, #132]	; (8009364 <TIM_Base_SetConfig+0xec>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d00f      	beq.n	8009302 <TIM_Base_SetConfig+0x8a>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4a20      	ldr	r2, [pc, #128]	; (8009368 <TIM_Base_SetConfig+0xf0>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d00b      	beq.n	8009302 <TIM_Base_SetConfig+0x8a>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a1f      	ldr	r2, [pc, #124]	; (800936c <TIM_Base_SetConfig+0xf4>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d007      	beq.n	8009302 <TIM_Base_SetConfig+0x8a>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a1e      	ldr	r2, [pc, #120]	; (8009370 <TIM_Base_SetConfig+0xf8>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d003      	beq.n	8009302 <TIM_Base_SetConfig+0x8a>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a1d      	ldr	r2, [pc, #116]	; (8009374 <TIM_Base_SetConfig+0xfc>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d108      	bne.n	8009314 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	4313      	orrs	r3, r2
 8009312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	695b      	ldr	r3, [r3, #20]
 800931e:	4313      	orrs	r3, r2
 8009320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	689a      	ldr	r2, [r3, #8]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a08      	ldr	r2, [pc, #32]	; (800935c <TIM_Base_SetConfig+0xe4>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d103      	bne.n	8009348 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	691a      	ldr	r2, [r3, #16]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	615a      	str	r2, [r3, #20]
}
 800934e:	bf00      	nop
 8009350:	3714      	adds	r7, #20
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop
 800935c:	40010000 	.word	0x40010000
 8009360:	40000400 	.word	0x40000400
 8009364:	40000800 	.word	0x40000800
 8009368:	40000c00 	.word	0x40000c00
 800936c:	40014000 	.word	0x40014000
 8009370:	40014400 	.word	0x40014400
 8009374:	40014800 	.word	0x40014800

08009378 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009378:	b480      	push	{r7}
 800937a:	b087      	sub	sp, #28
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6a1b      	ldr	r3, [r3, #32]
 8009388:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6a1b      	ldr	r3, [r3, #32]
 800938e:	f023 0201 	bic.w	r2, r3, #1
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	699b      	ldr	r3, [r3, #24]
 800939a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80093a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	011b      	lsls	r3, r3, #4
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	f023 030a 	bic.w	r3, r3, #10
 80093b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093b6:	697a      	ldr	r2, [r7, #20]
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	4313      	orrs	r3, r2
 80093bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	693a      	ldr	r2, [r7, #16]
 80093c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	697a      	ldr	r2, [r7, #20]
 80093c8:	621a      	str	r2, [r3, #32]
}
 80093ca:	bf00      	nop
 80093cc:	371c      	adds	r7, #28
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr

080093d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093d6:	b480      	push	{r7}
 80093d8:	b087      	sub	sp, #28
 80093da:	af00      	add	r7, sp, #0
 80093dc:	60f8      	str	r0, [r7, #12]
 80093de:	60b9      	str	r1, [r7, #8]
 80093e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6a1b      	ldr	r3, [r3, #32]
 80093e6:	f023 0210 	bic.w	r2, r3, #16
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6a1b      	ldr	r3, [r3, #32]
 80093f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009400:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	031b      	lsls	r3, r3, #12
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	4313      	orrs	r3, r2
 800940a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009412:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	011b      	lsls	r3, r3, #4
 8009418:	693a      	ldr	r2, [r7, #16]
 800941a:	4313      	orrs	r3, r2
 800941c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	697a      	ldr	r2, [r7, #20]
 8009422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	693a      	ldr	r2, [r7, #16]
 8009428:	621a      	str	r2, [r3, #32]
}
 800942a:	bf00      	nop
 800942c:	371c      	adds	r7, #28
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009436:	b480      	push	{r7}
 8009438:	b085      	sub	sp, #20
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800944c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	4313      	orrs	r3, r2
 8009454:	f043 0307 	orr.w	r3, r3, #7
 8009458:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	609a      	str	r2, [r3, #8]
}
 8009460:	bf00      	nop
 8009462:	3714      	adds	r7, #20
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800946c:	b480      	push	{r7}
 800946e:	b087      	sub	sp, #28
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	607a      	str	r2, [r7, #4]
 8009478:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009486:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	021a      	lsls	r2, r3, #8
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	431a      	orrs	r2, r3
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	4313      	orrs	r3, r2
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	4313      	orrs	r3, r2
 8009498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	697a      	ldr	r2, [r7, #20]
 800949e:	609a      	str	r2, [r3, #8]
}
 80094a0:	bf00      	nop
 80094a2:	371c      	adds	r7, #28
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d101      	bne.n	80094c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094c0:	2302      	movs	r3, #2
 80094c2:	e050      	b.n	8009566 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2202      	movs	r2, #2
 80094d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a1c      	ldr	r2, [pc, #112]	; (8009574 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d018      	beq.n	800953a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009510:	d013      	beq.n	800953a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a18      	ldr	r2, [pc, #96]	; (8009578 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d00e      	beq.n	800953a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a16      	ldr	r2, [pc, #88]	; (800957c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d009      	beq.n	800953a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a15      	ldr	r2, [pc, #84]	; (8009580 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d004      	beq.n	800953a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a13      	ldr	r2, [pc, #76]	; (8009584 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d10c      	bne.n	8009554 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	4313      	orrs	r3, r2
 800954a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68ba      	ldr	r2, [r7, #8]
 8009552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3714      	adds	r7, #20
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	40010000 	.word	0x40010000
 8009578:	40000400 	.word	0x40000400
 800957c:	40000800 	.word	0x40000800
 8009580:	40000c00 	.word	0x40000c00
 8009584:	40014000 	.word	0x40014000

08009588 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d101      	bne.n	800959a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e03f      	b.n	800961a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d106      	bne.n	80095b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7fc ffc8 	bl	8006544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2224      	movs	r2, #36	; 0x24
 80095b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68da      	ldr	r2, [r3, #12]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fcbf 	bl	8009f50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	691a      	ldr	r2, [r3, #16]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	695a      	ldr	r2, [r3, #20]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68da      	ldr	r2, [r3, #12]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009600:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2220      	movs	r2, #32
 800960c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2220      	movs	r2, #32
 8009614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009622:	b480      	push	{r7}
 8009624:	b085      	sub	sp, #20
 8009626:	af00      	add	r7, sp, #0
 8009628:	60f8      	str	r0, [r7, #12]
 800962a:	60b9      	str	r1, [r7, #8]
 800962c:	4613      	mov	r3, r2
 800962e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009636:	b2db      	uxtb	r3, r3
 8009638:	2b20      	cmp	r3, #32
 800963a:	d130      	bne.n	800969e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d002      	beq.n	8009648 <HAL_UART_Transmit_IT+0x26>
 8009642:	88fb      	ldrh	r3, [r7, #6]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d101      	bne.n	800964c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	e029      	b.n	80096a0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009652:	2b01      	cmp	r3, #1
 8009654:	d101      	bne.n	800965a <HAL_UART_Transmit_IT+0x38>
 8009656:	2302      	movs	r3, #2
 8009658:	e022      	b.n	80096a0 <HAL_UART_Transmit_IT+0x7e>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2201      	movs	r2, #1
 800965e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	88fa      	ldrh	r2, [r7, #6]
 800966c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	88fa      	ldrh	r2, [r7, #6]
 8009672:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2221      	movs	r2, #33	; 0x21
 800967e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68da      	ldr	r2, [r3, #12]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009698:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	e000      	b.n	80096a0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800969e:	2302      	movs	r3, #2
  }
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3714      	adds	r7, #20
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b0ba      	sub	sp, #232	; 0xe8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	695b      	ldr	r3, [r3, #20]
 80096ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80096d2:	2300      	movs	r3, #0
 80096d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80096d8:	2300      	movs	r3, #0
 80096da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80096de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096e2:	f003 030f 	and.w	r3, r3, #15
 80096e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80096ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10f      	bne.n	8009712 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80096f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096f6:	f003 0320 	and.w	r3, r3, #32
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d009      	beq.n	8009712 <HAL_UART_IRQHandler+0x66>
 80096fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009702:	f003 0320 	and.w	r3, r3, #32
 8009706:	2b00      	cmp	r3, #0
 8009708:	d003      	beq.n	8009712 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fb65 	bl	8009dda <UART_Receive_IT>
      return;
 8009710:	e256      	b.n	8009bc0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009712:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009716:	2b00      	cmp	r3, #0
 8009718:	f000 80de 	beq.w	80098d8 <HAL_UART_IRQHandler+0x22c>
 800971c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009720:	f003 0301 	and.w	r3, r3, #1
 8009724:	2b00      	cmp	r3, #0
 8009726:	d106      	bne.n	8009736 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800972c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 80d1 	beq.w	80098d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800973a:	f003 0301 	and.w	r3, r3, #1
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00b      	beq.n	800975a <HAL_UART_IRQHandler+0xae>
 8009742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800974a:	2b00      	cmp	r3, #0
 800974c:	d005      	beq.n	800975a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009752:	f043 0201 	orr.w	r2, r3, #1
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800975a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800975e:	f003 0304 	and.w	r3, r3, #4
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00b      	beq.n	800977e <HAL_UART_IRQHandler+0xd2>
 8009766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	2b00      	cmp	r3, #0
 8009770:	d005      	beq.n	800977e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009776:	f043 0202 	orr.w	r2, r3, #2
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800977e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009782:	f003 0302 	and.w	r3, r3, #2
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00b      	beq.n	80097a2 <HAL_UART_IRQHandler+0xf6>
 800978a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	2b00      	cmp	r3, #0
 8009794:	d005      	beq.n	80097a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979a:	f043 0204 	orr.w	r2, r3, #4
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80097a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097a6:	f003 0308 	and.w	r3, r3, #8
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d011      	beq.n	80097d2 <HAL_UART_IRQHandler+0x126>
 80097ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097b2:	f003 0320 	and.w	r3, r3, #32
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d105      	bne.n	80097c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80097ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097be:	f003 0301 	and.w	r3, r3, #1
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d005      	beq.n	80097d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ca:	f043 0208 	orr.w	r2, r3, #8
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f000 81ed 	beq.w	8009bb6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80097dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097e0:	f003 0320 	and.w	r3, r3, #32
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d008      	beq.n	80097fa <HAL_UART_IRQHandler+0x14e>
 80097e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097ec:	f003 0320 	and.w	r3, r3, #32
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d002      	beq.n	80097fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 faf0 	bl	8009dda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	695b      	ldr	r3, [r3, #20]
 8009800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009804:	2b40      	cmp	r3, #64	; 0x40
 8009806:	bf0c      	ite	eq
 8009808:	2301      	moveq	r3, #1
 800980a:	2300      	movne	r3, #0
 800980c:	b2db      	uxtb	r3, r3
 800980e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009816:	f003 0308 	and.w	r3, r3, #8
 800981a:	2b00      	cmp	r3, #0
 800981c:	d103      	bne.n	8009826 <HAL_UART_IRQHandler+0x17a>
 800981e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009822:	2b00      	cmp	r3, #0
 8009824:	d04f      	beq.n	80098c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f9f8 	bl	8009c1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	695b      	ldr	r3, [r3, #20]
 8009832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009836:	2b40      	cmp	r3, #64	; 0x40
 8009838:	d141      	bne.n	80098be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	3314      	adds	r3, #20
 8009840:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009844:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009848:	e853 3f00 	ldrex	r3, [r3]
 800984c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009850:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3314      	adds	r3, #20
 8009862:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009866:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800986a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009872:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009876:	e841 2300 	strex	r3, r2, [r1]
 800987a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800987e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1d9      	bne.n	800983a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988a:	2b00      	cmp	r3, #0
 800988c:	d013      	beq.n	80098b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009892:	4a7d      	ldr	r2, [pc, #500]	; (8009a88 <HAL_UART_IRQHandler+0x3dc>)
 8009894:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989a:	4618      	mov	r0, r3
 800989c:	f7fd fdbd 	bl	800741a <HAL_DMA_Abort_IT>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d016      	beq.n	80098d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80098b0:	4610      	mov	r0, r2
 80098b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098b4:	e00e      	b.n	80098d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 f99a 	bl	8009bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098bc:	e00a      	b.n	80098d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f996 	bl	8009bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098c4:	e006      	b.n	80098d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f992 	bl	8009bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80098d2:	e170      	b.n	8009bb6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098d4:	bf00      	nop
    return;
 80098d6:	e16e      	b.n	8009bb6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098dc:	2b01      	cmp	r3, #1
 80098de:	f040 814a 	bne.w	8009b76 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80098e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098e6:	f003 0310 	and.w	r3, r3, #16
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 8143 	beq.w	8009b76 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80098f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098f4:	f003 0310 	and.w	r3, r3, #16
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 813c 	beq.w	8009b76 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80098fe:	2300      	movs	r3, #0
 8009900:	60bb      	str	r3, [r7, #8]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	60bb      	str	r3, [r7, #8]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	60bb      	str	r3, [r7, #8]
 8009912:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800991e:	2b40      	cmp	r3, #64	; 0x40
 8009920:	f040 80b4 	bne.w	8009a8c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009930:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009934:	2b00      	cmp	r3, #0
 8009936:	f000 8140 	beq.w	8009bba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800993e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009942:	429a      	cmp	r2, r3
 8009944:	f080 8139 	bcs.w	8009bba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800994e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800995a:	f000 8088 	beq.w	8009a6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	330c      	adds	r3, #12
 8009964:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009968:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800996c:	e853 3f00 	ldrex	r3, [r3]
 8009970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009974:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800997c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	330c      	adds	r3, #12
 8009986:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800998a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800998e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009992:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009996:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800999a:	e841 2300 	strex	r3, r2, [r1]
 800999e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80099a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1d9      	bne.n	800995e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3314      	adds	r3, #20
 80099b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099b4:	e853 3f00 	ldrex	r3, [r3]
 80099b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80099ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80099bc:	f023 0301 	bic.w	r3, r3, #1
 80099c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3314      	adds	r3, #20
 80099ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80099ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80099d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80099d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80099da:	e841 2300 	strex	r3, r2, [r1]
 80099de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80099e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1e1      	bne.n	80099aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3314      	adds	r3, #20
 80099ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099f0:	e853 3f00 	ldrex	r3, [r3]
 80099f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80099f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	3314      	adds	r3, #20
 8009a06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009a0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009a0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009a10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009a12:	e841 2300 	strex	r3, r2, [r1]
 8009a16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1e3      	bne.n	80099e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2220      	movs	r2, #32
 8009a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	330c      	adds	r3, #12
 8009a32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a36:	e853 3f00 	ldrex	r3, [r3]
 8009a3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a3e:	f023 0310 	bic.w	r3, r3, #16
 8009a42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	330c      	adds	r3, #12
 8009a4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009a50:	65ba      	str	r2, [r7, #88]	; 0x58
 8009a52:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a58:	e841 2300 	strex	r3, r2, [r1]
 8009a5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1e3      	bne.n	8009a2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7fd fc66 	bl	800733a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	1ad3      	subs	r3, r2, r3
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 f8c0 	bl	8009c04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a84:	e099      	b.n	8009bba <HAL_UART_IRQHandler+0x50e>
 8009a86:	bf00      	nop
 8009a88:	08009ce3 	.word	0x08009ce3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	1ad3      	subs	r3, r2, r3
 8009a98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	f000 808b 	beq.w	8009bbe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009aa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f000 8086 	beq.w	8009bbe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	330c      	adds	r3, #12
 8009ab8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abc:	e853 3f00 	ldrex	r3, [r3]
 8009ac0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ac4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ac8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	330c      	adds	r3, #12
 8009ad2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009ad6:	647a      	str	r2, [r7, #68]	; 0x44
 8009ad8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ada:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009adc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ade:	e841 2300 	strex	r3, r2, [r1]
 8009ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1e3      	bne.n	8009ab2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	3314      	adds	r3, #20
 8009af0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af4:	e853 3f00 	ldrex	r3, [r3]
 8009af8:	623b      	str	r3, [r7, #32]
   return(result);
 8009afa:	6a3b      	ldr	r3, [r7, #32]
 8009afc:	f023 0301 	bic.w	r3, r3, #1
 8009b00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	3314      	adds	r3, #20
 8009b0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009b0e:	633a      	str	r2, [r7, #48]	; 0x30
 8009b10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b16:	e841 2300 	strex	r3, r2, [r1]
 8009b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1e3      	bne.n	8009aea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2220      	movs	r2, #32
 8009b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	330c      	adds	r3, #12
 8009b36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	e853 3f00 	ldrex	r3, [r3]
 8009b3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f023 0310 	bic.w	r3, r3, #16
 8009b46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	330c      	adds	r3, #12
 8009b50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009b54:	61fa      	str	r2, [r7, #28]
 8009b56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b58:	69b9      	ldr	r1, [r7, #24]
 8009b5a:	69fa      	ldr	r2, [r7, #28]
 8009b5c:	e841 2300 	strex	r3, r2, [r1]
 8009b60:	617b      	str	r3, [r7, #20]
   return(result);
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1e3      	bne.n	8009b30 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009b68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f848 	bl	8009c04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009b74:	e023      	b.n	8009bbe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d009      	beq.n	8009b96 <HAL_UART_IRQHandler+0x4ea>
 8009b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d003      	beq.n	8009b96 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f8bb 	bl	8009d0a <UART_Transmit_IT>
    return;
 8009b94:	e014      	b.n	8009bc0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00e      	beq.n	8009bc0 <HAL_UART_IRQHandler+0x514>
 8009ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d008      	beq.n	8009bc0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f8fb 	bl	8009daa <UART_EndTransmit_IT>
    return;
 8009bb4:	e004      	b.n	8009bc0 <HAL_UART_IRQHandler+0x514>
    return;
 8009bb6:	bf00      	nop
 8009bb8:	e002      	b.n	8009bc0 <HAL_UART_IRQHandler+0x514>
      return;
 8009bba:	bf00      	nop
 8009bbc:	e000      	b.n	8009bc0 <HAL_UART_IRQHandler+0x514>
      return;
 8009bbe:	bf00      	nop
  }
}
 8009bc0:	37e8      	adds	r7, #232	; 0xe8
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop

08009bc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009be4:	bf00      	nop
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009bf8:	bf00      	nop
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c10:	bf00      	nop
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b095      	sub	sp, #84	; 0x54
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	330c      	adds	r3, #12
 8009c2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c2e:	e853 3f00 	ldrex	r3, [r3]
 8009c32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	330c      	adds	r3, #12
 8009c42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c44:	643a      	str	r2, [r7, #64]	; 0x40
 8009c46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c4c:	e841 2300 	strex	r3, r2, [r1]
 8009c50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d1e5      	bne.n	8009c24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	3314      	adds	r3, #20
 8009c5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c60:	6a3b      	ldr	r3, [r7, #32]
 8009c62:	e853 3f00 	ldrex	r3, [r3]
 8009c66:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	f023 0301 	bic.w	r3, r3, #1
 8009c6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3314      	adds	r3, #20
 8009c76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c80:	e841 2300 	strex	r3, r2, [r1]
 8009c84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1e5      	bne.n	8009c58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d119      	bne.n	8009cc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	330c      	adds	r3, #12
 8009c9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	e853 3f00 	ldrex	r3, [r3]
 8009ca2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	f023 0310 	bic.w	r3, r3, #16
 8009caa:	647b      	str	r3, [r7, #68]	; 0x44
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	330c      	adds	r3, #12
 8009cb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cb4:	61ba      	str	r2, [r7, #24]
 8009cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb8:	6979      	ldr	r1, [r7, #20]
 8009cba:	69ba      	ldr	r2, [r7, #24]
 8009cbc:	e841 2300 	strex	r3, r2, [r1]
 8009cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1e5      	bne.n	8009c94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2220      	movs	r2, #32
 8009ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009cd6:	bf00      	nop
 8009cd8:	3754      	adds	r7, #84	; 0x54
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr

08009ce2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b084      	sub	sp, #16
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009cfc:	68f8      	ldr	r0, [r7, #12]
 8009cfe:	f7ff ff77 	bl	8009bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d02:	bf00      	nop
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	b085      	sub	sp, #20
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b21      	cmp	r3, #33	; 0x21
 8009d1c:	d13e      	bne.n	8009d9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d26:	d114      	bne.n	8009d52 <UART_Transmit_IT+0x48>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	691b      	ldr	r3, [r3, #16]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d110      	bne.n	8009d52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a1b      	ldr	r3, [r3, #32]
 8009d34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	881b      	ldrh	r3, [r3, #0]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a1b      	ldr	r3, [r3, #32]
 8009d4a:	1c9a      	adds	r2, r3, #2
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	621a      	str	r2, [r3, #32]
 8009d50:	e008      	b.n	8009d64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a1b      	ldr	r3, [r3, #32]
 8009d56:	1c59      	adds	r1, r3, #1
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	6211      	str	r1, [r2, #32]
 8009d5c:	781a      	ldrb	r2, [r3, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	4619      	mov	r1, r3
 8009d72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d10f      	bne.n	8009d98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	68da      	ldr	r2, [r3, #12]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	68da      	ldr	r2, [r3, #12]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	e000      	b.n	8009d9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009d9c:	2302      	movs	r3, #2
  }
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3714      	adds	r7, #20
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr

08009daa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b082      	sub	sp, #8
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68da      	ldr	r2, [r3, #12]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009dc0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2220      	movs	r2, #32
 8009dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f7ff fefc 	bl	8009bc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3708      	adds	r7, #8
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b08c      	sub	sp, #48	; 0x30
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	2b22      	cmp	r3, #34	; 0x22
 8009dec:	f040 80ab 	bne.w	8009f46 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009df8:	d117      	bne.n	8009e2a <UART_Receive_IT+0x50>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d113      	bne.n	8009e2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009e02:	2300      	movs	r3, #0
 8009e04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e18:	b29a      	uxth	r2, r3
 8009e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e22:	1c9a      	adds	r2, r3, #2
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	629a      	str	r2, [r3, #40]	; 0x28
 8009e28:	e026      	b.n	8009e78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009e30:	2300      	movs	r3, #0
 8009e32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e3c:	d007      	beq.n	8009e4e <UART_Receive_IT+0x74>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10a      	bne.n	8009e5c <UART_Receive_IT+0x82>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d106      	bne.n	8009e5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e58:	701a      	strb	r2, [r3, #0]
 8009e5a:	e008      	b.n	8009e6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e68:	b2da      	uxtb	r2, r3
 8009e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e72:	1c5a      	adds	r2, r3, #1
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	4619      	mov	r1, r3
 8009e86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d15a      	bne.n	8009f42 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68da      	ldr	r2, [r3, #12]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f022 0220 	bic.w	r2, r2, #32
 8009e9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68da      	ldr	r2, [r3, #12]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009eaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	695a      	ldr	r2, [r3, #20]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f022 0201 	bic.w	r2, r2, #1
 8009eba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2220      	movs	r2, #32
 8009ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d135      	bne.n	8009f38 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	330c      	adds	r3, #12
 8009ed8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	e853 3f00 	ldrex	r3, [r3]
 8009ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	f023 0310 	bic.w	r3, r3, #16
 8009ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	330c      	adds	r3, #12
 8009ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ef2:	623a      	str	r2, [r7, #32]
 8009ef4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef6:	69f9      	ldr	r1, [r7, #28]
 8009ef8:	6a3a      	ldr	r2, [r7, #32]
 8009efa:	e841 2300 	strex	r3, r2, [r1]
 8009efe:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1e5      	bne.n	8009ed2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f003 0310 	and.w	r3, r3, #16
 8009f10:	2b10      	cmp	r3, #16
 8009f12:	d10a      	bne.n	8009f2a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f14:	2300      	movs	r3, #0
 8009f16:	60fb      	str	r3, [r7, #12]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	60fb      	str	r3, [r7, #12]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	60fb      	str	r3, [r7, #12]
 8009f28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f2e:	4619      	mov	r1, r3
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f7ff fe67 	bl	8009c04 <HAL_UARTEx_RxEventCallback>
 8009f36:	e002      	b.n	8009f3e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f7ff fe4f 	bl	8009bdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	e002      	b.n	8009f48 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009f42:	2300      	movs	r3, #0
 8009f44:	e000      	b.n	8009f48 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009f46:	2302      	movs	r3, #2
  }
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3730      	adds	r7, #48	; 0x30
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f54:	b0c0      	sub	sp, #256	; 0x100
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	691b      	ldr	r3, [r3, #16]
 8009f64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f6c:	68d9      	ldr	r1, [r3, #12]
 8009f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	ea40 0301 	orr.w	r3, r0, r1
 8009f78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f7e:	689a      	ldr	r2, [r3, #8]
 8009f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	431a      	orrs	r2, r3
 8009f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	431a      	orrs	r2, r3
 8009f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f94:	69db      	ldr	r3, [r3, #28]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009fa8:	f021 010c 	bic.w	r1, r1, #12
 8009fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009fb6:	430b      	orrs	r3, r1
 8009fb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	695b      	ldr	r3, [r3, #20]
 8009fc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fca:	6999      	ldr	r1, [r3, #24]
 8009fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	ea40 0301 	orr.w	r3, r0, r1
 8009fd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	4b8f      	ldr	r3, [pc, #572]	; (800a21c <UART_SetConfig+0x2cc>)
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d005      	beq.n	8009ff0 <UART_SetConfig+0xa0>
 8009fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	4b8d      	ldr	r3, [pc, #564]	; (800a220 <UART_SetConfig+0x2d0>)
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d104      	bne.n	8009ffa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ff0:	f7fe ffbc 	bl	8008f6c <HAL_RCC_GetPCLK2Freq>
 8009ff4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009ff8:	e003      	b.n	800a002 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009ffa:	f7fe ffa3 	bl	8008f44 <HAL_RCC_GetPCLK1Freq>
 8009ffe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a006:	69db      	ldr	r3, [r3, #28]
 800a008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a00c:	f040 810c 	bne.w	800a228 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a014:	2200      	movs	r2, #0
 800a016:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a01a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a01e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a022:	4622      	mov	r2, r4
 800a024:	462b      	mov	r3, r5
 800a026:	1891      	adds	r1, r2, r2
 800a028:	65b9      	str	r1, [r7, #88]	; 0x58
 800a02a:	415b      	adcs	r3, r3
 800a02c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a02e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a032:	4621      	mov	r1, r4
 800a034:	eb12 0801 	adds.w	r8, r2, r1
 800a038:	4629      	mov	r1, r5
 800a03a:	eb43 0901 	adc.w	r9, r3, r1
 800a03e:	f04f 0200 	mov.w	r2, #0
 800a042:	f04f 0300 	mov.w	r3, #0
 800a046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a04a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a04e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a052:	4690      	mov	r8, r2
 800a054:	4699      	mov	r9, r3
 800a056:	4623      	mov	r3, r4
 800a058:	eb18 0303 	adds.w	r3, r8, r3
 800a05c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a060:	462b      	mov	r3, r5
 800a062:	eb49 0303 	adc.w	r3, r9, r3
 800a066:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a06a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a076:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a07a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a07e:	460b      	mov	r3, r1
 800a080:	18db      	adds	r3, r3, r3
 800a082:	653b      	str	r3, [r7, #80]	; 0x50
 800a084:	4613      	mov	r3, r2
 800a086:	eb42 0303 	adc.w	r3, r2, r3
 800a08a:	657b      	str	r3, [r7, #84]	; 0x54
 800a08c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a090:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a094:	f7f6 fde0 	bl	8000c58 <__aeabi_uldivmod>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	4b61      	ldr	r3, [pc, #388]	; (800a224 <UART_SetConfig+0x2d4>)
 800a09e:	fba3 2302 	umull	r2, r3, r3, r2
 800a0a2:	095b      	lsrs	r3, r3, #5
 800a0a4:	011c      	lsls	r4, r3, #4
 800a0a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a0b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a0b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a0b8:	4642      	mov	r2, r8
 800a0ba:	464b      	mov	r3, r9
 800a0bc:	1891      	adds	r1, r2, r2
 800a0be:	64b9      	str	r1, [r7, #72]	; 0x48
 800a0c0:	415b      	adcs	r3, r3
 800a0c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a0c8:	4641      	mov	r1, r8
 800a0ca:	eb12 0a01 	adds.w	sl, r2, r1
 800a0ce:	4649      	mov	r1, r9
 800a0d0:	eb43 0b01 	adc.w	fp, r3, r1
 800a0d4:	f04f 0200 	mov.w	r2, #0
 800a0d8:	f04f 0300 	mov.w	r3, #0
 800a0dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a0e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a0e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a0e8:	4692      	mov	sl, r2
 800a0ea:	469b      	mov	fp, r3
 800a0ec:	4643      	mov	r3, r8
 800a0ee:	eb1a 0303 	adds.w	r3, sl, r3
 800a0f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a0f6:	464b      	mov	r3, r9
 800a0f8:	eb4b 0303 	adc.w	r3, fp, r3
 800a0fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a10c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a110:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a114:	460b      	mov	r3, r1
 800a116:	18db      	adds	r3, r3, r3
 800a118:	643b      	str	r3, [r7, #64]	; 0x40
 800a11a:	4613      	mov	r3, r2
 800a11c:	eb42 0303 	adc.w	r3, r2, r3
 800a120:	647b      	str	r3, [r7, #68]	; 0x44
 800a122:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a126:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a12a:	f7f6 fd95 	bl	8000c58 <__aeabi_uldivmod>
 800a12e:	4602      	mov	r2, r0
 800a130:	460b      	mov	r3, r1
 800a132:	4611      	mov	r1, r2
 800a134:	4b3b      	ldr	r3, [pc, #236]	; (800a224 <UART_SetConfig+0x2d4>)
 800a136:	fba3 2301 	umull	r2, r3, r3, r1
 800a13a:	095b      	lsrs	r3, r3, #5
 800a13c:	2264      	movs	r2, #100	; 0x64
 800a13e:	fb02 f303 	mul.w	r3, r2, r3
 800a142:	1acb      	subs	r3, r1, r3
 800a144:	00db      	lsls	r3, r3, #3
 800a146:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a14a:	4b36      	ldr	r3, [pc, #216]	; (800a224 <UART_SetConfig+0x2d4>)
 800a14c:	fba3 2302 	umull	r2, r3, r3, r2
 800a150:	095b      	lsrs	r3, r3, #5
 800a152:	005b      	lsls	r3, r3, #1
 800a154:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a158:	441c      	add	r4, r3
 800a15a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a15e:	2200      	movs	r2, #0
 800a160:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a164:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a168:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a16c:	4642      	mov	r2, r8
 800a16e:	464b      	mov	r3, r9
 800a170:	1891      	adds	r1, r2, r2
 800a172:	63b9      	str	r1, [r7, #56]	; 0x38
 800a174:	415b      	adcs	r3, r3
 800a176:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a17c:	4641      	mov	r1, r8
 800a17e:	1851      	adds	r1, r2, r1
 800a180:	6339      	str	r1, [r7, #48]	; 0x30
 800a182:	4649      	mov	r1, r9
 800a184:	414b      	adcs	r3, r1
 800a186:	637b      	str	r3, [r7, #52]	; 0x34
 800a188:	f04f 0200 	mov.w	r2, #0
 800a18c:	f04f 0300 	mov.w	r3, #0
 800a190:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a194:	4659      	mov	r1, fp
 800a196:	00cb      	lsls	r3, r1, #3
 800a198:	4651      	mov	r1, sl
 800a19a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a19e:	4651      	mov	r1, sl
 800a1a0:	00ca      	lsls	r2, r1, #3
 800a1a2:	4610      	mov	r0, r2
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	4642      	mov	r2, r8
 800a1aa:	189b      	adds	r3, r3, r2
 800a1ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a1b0:	464b      	mov	r3, r9
 800a1b2:	460a      	mov	r2, r1
 800a1b4:	eb42 0303 	adc.w	r3, r2, r3
 800a1b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a1bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a1c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a1cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	18db      	adds	r3, r3, r3
 800a1d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	eb42 0303 	adc.w	r3, r2, r3
 800a1dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a1e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a1e6:	f7f6 fd37 	bl	8000c58 <__aeabi_uldivmod>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	4b0d      	ldr	r3, [pc, #52]	; (800a224 <UART_SetConfig+0x2d4>)
 800a1f0:	fba3 1302 	umull	r1, r3, r3, r2
 800a1f4:	095b      	lsrs	r3, r3, #5
 800a1f6:	2164      	movs	r1, #100	; 0x64
 800a1f8:	fb01 f303 	mul.w	r3, r1, r3
 800a1fc:	1ad3      	subs	r3, r2, r3
 800a1fe:	00db      	lsls	r3, r3, #3
 800a200:	3332      	adds	r3, #50	; 0x32
 800a202:	4a08      	ldr	r2, [pc, #32]	; (800a224 <UART_SetConfig+0x2d4>)
 800a204:	fba2 2303 	umull	r2, r3, r2, r3
 800a208:	095b      	lsrs	r3, r3, #5
 800a20a:	f003 0207 	and.w	r2, r3, #7
 800a20e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4422      	add	r2, r4
 800a216:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a218:	e106      	b.n	800a428 <UART_SetConfig+0x4d8>
 800a21a:	bf00      	nop
 800a21c:	40011000 	.word	0x40011000
 800a220:	40011400 	.word	0x40011400
 800a224:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a22c:	2200      	movs	r2, #0
 800a22e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a232:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a236:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a23a:	4642      	mov	r2, r8
 800a23c:	464b      	mov	r3, r9
 800a23e:	1891      	adds	r1, r2, r2
 800a240:	6239      	str	r1, [r7, #32]
 800a242:	415b      	adcs	r3, r3
 800a244:	627b      	str	r3, [r7, #36]	; 0x24
 800a246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a24a:	4641      	mov	r1, r8
 800a24c:	1854      	adds	r4, r2, r1
 800a24e:	4649      	mov	r1, r9
 800a250:	eb43 0501 	adc.w	r5, r3, r1
 800a254:	f04f 0200 	mov.w	r2, #0
 800a258:	f04f 0300 	mov.w	r3, #0
 800a25c:	00eb      	lsls	r3, r5, #3
 800a25e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a262:	00e2      	lsls	r2, r4, #3
 800a264:	4614      	mov	r4, r2
 800a266:	461d      	mov	r5, r3
 800a268:	4643      	mov	r3, r8
 800a26a:	18e3      	adds	r3, r4, r3
 800a26c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a270:	464b      	mov	r3, r9
 800a272:	eb45 0303 	adc.w	r3, r5, r3
 800a276:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a27a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a286:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a28a:	f04f 0200 	mov.w	r2, #0
 800a28e:	f04f 0300 	mov.w	r3, #0
 800a292:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a296:	4629      	mov	r1, r5
 800a298:	008b      	lsls	r3, r1, #2
 800a29a:	4621      	mov	r1, r4
 800a29c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	008a      	lsls	r2, r1, #2
 800a2a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a2a8:	f7f6 fcd6 	bl	8000c58 <__aeabi_uldivmod>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	4b60      	ldr	r3, [pc, #384]	; (800a434 <UART_SetConfig+0x4e4>)
 800a2b2:	fba3 2302 	umull	r2, r3, r3, r2
 800a2b6:	095b      	lsrs	r3, r3, #5
 800a2b8:	011c      	lsls	r4, r3, #4
 800a2ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a2c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a2c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a2cc:	4642      	mov	r2, r8
 800a2ce:	464b      	mov	r3, r9
 800a2d0:	1891      	adds	r1, r2, r2
 800a2d2:	61b9      	str	r1, [r7, #24]
 800a2d4:	415b      	adcs	r3, r3
 800a2d6:	61fb      	str	r3, [r7, #28]
 800a2d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a2dc:	4641      	mov	r1, r8
 800a2de:	1851      	adds	r1, r2, r1
 800a2e0:	6139      	str	r1, [r7, #16]
 800a2e2:	4649      	mov	r1, r9
 800a2e4:	414b      	adcs	r3, r1
 800a2e6:	617b      	str	r3, [r7, #20]
 800a2e8:	f04f 0200 	mov.w	r2, #0
 800a2ec:	f04f 0300 	mov.w	r3, #0
 800a2f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a2f4:	4659      	mov	r1, fp
 800a2f6:	00cb      	lsls	r3, r1, #3
 800a2f8:	4651      	mov	r1, sl
 800a2fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2fe:	4651      	mov	r1, sl
 800a300:	00ca      	lsls	r2, r1, #3
 800a302:	4610      	mov	r0, r2
 800a304:	4619      	mov	r1, r3
 800a306:	4603      	mov	r3, r0
 800a308:	4642      	mov	r2, r8
 800a30a:	189b      	adds	r3, r3, r2
 800a30c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a310:	464b      	mov	r3, r9
 800a312:	460a      	mov	r2, r1
 800a314:	eb42 0303 	adc.w	r3, r2, r3
 800a318:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a31c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	67bb      	str	r3, [r7, #120]	; 0x78
 800a326:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a328:	f04f 0200 	mov.w	r2, #0
 800a32c:	f04f 0300 	mov.w	r3, #0
 800a330:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a334:	4649      	mov	r1, r9
 800a336:	008b      	lsls	r3, r1, #2
 800a338:	4641      	mov	r1, r8
 800a33a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a33e:	4641      	mov	r1, r8
 800a340:	008a      	lsls	r2, r1, #2
 800a342:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a346:	f7f6 fc87 	bl	8000c58 <__aeabi_uldivmod>
 800a34a:	4602      	mov	r2, r0
 800a34c:	460b      	mov	r3, r1
 800a34e:	4611      	mov	r1, r2
 800a350:	4b38      	ldr	r3, [pc, #224]	; (800a434 <UART_SetConfig+0x4e4>)
 800a352:	fba3 2301 	umull	r2, r3, r3, r1
 800a356:	095b      	lsrs	r3, r3, #5
 800a358:	2264      	movs	r2, #100	; 0x64
 800a35a:	fb02 f303 	mul.w	r3, r2, r3
 800a35e:	1acb      	subs	r3, r1, r3
 800a360:	011b      	lsls	r3, r3, #4
 800a362:	3332      	adds	r3, #50	; 0x32
 800a364:	4a33      	ldr	r2, [pc, #204]	; (800a434 <UART_SetConfig+0x4e4>)
 800a366:	fba2 2303 	umull	r2, r3, r2, r3
 800a36a:	095b      	lsrs	r3, r3, #5
 800a36c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a370:	441c      	add	r4, r3
 800a372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a376:	2200      	movs	r2, #0
 800a378:	673b      	str	r3, [r7, #112]	; 0x70
 800a37a:	677a      	str	r2, [r7, #116]	; 0x74
 800a37c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a380:	4642      	mov	r2, r8
 800a382:	464b      	mov	r3, r9
 800a384:	1891      	adds	r1, r2, r2
 800a386:	60b9      	str	r1, [r7, #8]
 800a388:	415b      	adcs	r3, r3
 800a38a:	60fb      	str	r3, [r7, #12]
 800a38c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a390:	4641      	mov	r1, r8
 800a392:	1851      	adds	r1, r2, r1
 800a394:	6039      	str	r1, [r7, #0]
 800a396:	4649      	mov	r1, r9
 800a398:	414b      	adcs	r3, r1
 800a39a:	607b      	str	r3, [r7, #4]
 800a39c:	f04f 0200 	mov.w	r2, #0
 800a3a0:	f04f 0300 	mov.w	r3, #0
 800a3a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a3a8:	4659      	mov	r1, fp
 800a3aa:	00cb      	lsls	r3, r1, #3
 800a3ac:	4651      	mov	r1, sl
 800a3ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a3b2:	4651      	mov	r1, sl
 800a3b4:	00ca      	lsls	r2, r1, #3
 800a3b6:	4610      	mov	r0, r2
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	4642      	mov	r2, r8
 800a3be:	189b      	adds	r3, r3, r2
 800a3c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3c2:	464b      	mov	r3, r9
 800a3c4:	460a      	mov	r2, r1
 800a3c6:	eb42 0303 	adc.w	r3, r2, r3
 800a3ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a3cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	663b      	str	r3, [r7, #96]	; 0x60
 800a3d6:	667a      	str	r2, [r7, #100]	; 0x64
 800a3d8:	f04f 0200 	mov.w	r2, #0
 800a3dc:	f04f 0300 	mov.w	r3, #0
 800a3e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a3e4:	4649      	mov	r1, r9
 800a3e6:	008b      	lsls	r3, r1, #2
 800a3e8:	4641      	mov	r1, r8
 800a3ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3ee:	4641      	mov	r1, r8
 800a3f0:	008a      	lsls	r2, r1, #2
 800a3f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a3f6:	f7f6 fc2f 	bl	8000c58 <__aeabi_uldivmod>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	4b0d      	ldr	r3, [pc, #52]	; (800a434 <UART_SetConfig+0x4e4>)
 800a400:	fba3 1302 	umull	r1, r3, r3, r2
 800a404:	095b      	lsrs	r3, r3, #5
 800a406:	2164      	movs	r1, #100	; 0x64
 800a408:	fb01 f303 	mul.w	r3, r1, r3
 800a40c:	1ad3      	subs	r3, r2, r3
 800a40e:	011b      	lsls	r3, r3, #4
 800a410:	3332      	adds	r3, #50	; 0x32
 800a412:	4a08      	ldr	r2, [pc, #32]	; (800a434 <UART_SetConfig+0x4e4>)
 800a414:	fba2 2303 	umull	r2, r3, r2, r3
 800a418:	095b      	lsrs	r3, r3, #5
 800a41a:	f003 020f 	and.w	r2, r3, #15
 800a41e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4422      	add	r2, r4
 800a426:	609a      	str	r2, [r3, #8]
}
 800a428:	bf00      	nop
 800a42a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a42e:	46bd      	mov	sp, r7
 800a430:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a434:	51eb851f 	.word	0x51eb851f

0800a438 <abs>:
 800a438:	2800      	cmp	r0, #0
 800a43a:	bfb8      	it	lt
 800a43c:	4240      	neglt	r0, r0
 800a43e:	4770      	bx	lr

0800a440 <atoi>:
 800a440:	220a      	movs	r2, #10
 800a442:	2100      	movs	r1, #0
 800a444:	f000 b93e 	b.w	800a6c4 <strtol>

0800a448 <malloc>:
 800a448:	4b02      	ldr	r3, [pc, #8]	; (800a454 <malloc+0xc>)
 800a44a:	4601      	mov	r1, r0
 800a44c:	6818      	ldr	r0, [r3, #0]
 800a44e:	f000 b82b 	b.w	800a4a8 <_malloc_r>
 800a452:	bf00      	nop
 800a454:	200012cc 	.word	0x200012cc

0800a458 <free>:
 800a458:	4b02      	ldr	r3, [pc, #8]	; (800a464 <free+0xc>)
 800a45a:	4601      	mov	r1, r0
 800a45c:	6818      	ldr	r0, [r3, #0]
 800a45e:	f001 be61 	b.w	800c124 <_free_r>
 800a462:	bf00      	nop
 800a464:	200012cc 	.word	0x200012cc

0800a468 <sbrk_aligned>:
 800a468:	b570      	push	{r4, r5, r6, lr}
 800a46a:	4e0e      	ldr	r6, [pc, #56]	; (800a4a4 <sbrk_aligned+0x3c>)
 800a46c:	460c      	mov	r4, r1
 800a46e:	6831      	ldr	r1, [r6, #0]
 800a470:	4605      	mov	r5, r0
 800a472:	b911      	cbnz	r1, 800a47a <sbrk_aligned+0x12>
 800a474:	f000 ff58 	bl	800b328 <_sbrk_r>
 800a478:	6030      	str	r0, [r6, #0]
 800a47a:	4621      	mov	r1, r4
 800a47c:	4628      	mov	r0, r5
 800a47e:	f000 ff53 	bl	800b328 <_sbrk_r>
 800a482:	1c43      	adds	r3, r0, #1
 800a484:	d00a      	beq.n	800a49c <sbrk_aligned+0x34>
 800a486:	1cc4      	adds	r4, r0, #3
 800a488:	f024 0403 	bic.w	r4, r4, #3
 800a48c:	42a0      	cmp	r0, r4
 800a48e:	d007      	beq.n	800a4a0 <sbrk_aligned+0x38>
 800a490:	1a21      	subs	r1, r4, r0
 800a492:	4628      	mov	r0, r5
 800a494:	f000 ff48 	bl	800b328 <_sbrk_r>
 800a498:	3001      	adds	r0, #1
 800a49a:	d101      	bne.n	800a4a0 <sbrk_aligned+0x38>
 800a49c:	f04f 34ff 	mov.w	r4, #4294967295
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	bd70      	pop	{r4, r5, r6, pc}
 800a4a4:	200015f4 	.word	0x200015f4

0800a4a8 <_malloc_r>:
 800a4a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4ac:	1ccd      	adds	r5, r1, #3
 800a4ae:	f025 0503 	bic.w	r5, r5, #3
 800a4b2:	3508      	adds	r5, #8
 800a4b4:	2d0c      	cmp	r5, #12
 800a4b6:	bf38      	it	cc
 800a4b8:	250c      	movcc	r5, #12
 800a4ba:	2d00      	cmp	r5, #0
 800a4bc:	4607      	mov	r7, r0
 800a4be:	db01      	blt.n	800a4c4 <_malloc_r+0x1c>
 800a4c0:	42a9      	cmp	r1, r5
 800a4c2:	d905      	bls.n	800a4d0 <_malloc_r+0x28>
 800a4c4:	230c      	movs	r3, #12
 800a4c6:	603b      	str	r3, [r7, #0]
 800a4c8:	2600      	movs	r6, #0
 800a4ca:	4630      	mov	r0, r6
 800a4cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a5a4 <_malloc_r+0xfc>
 800a4d4:	f000 f868 	bl	800a5a8 <__malloc_lock>
 800a4d8:	f8d8 3000 	ldr.w	r3, [r8]
 800a4dc:	461c      	mov	r4, r3
 800a4de:	bb5c      	cbnz	r4, 800a538 <_malloc_r+0x90>
 800a4e0:	4629      	mov	r1, r5
 800a4e2:	4638      	mov	r0, r7
 800a4e4:	f7ff ffc0 	bl	800a468 <sbrk_aligned>
 800a4e8:	1c43      	adds	r3, r0, #1
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	d155      	bne.n	800a59a <_malloc_r+0xf2>
 800a4ee:	f8d8 4000 	ldr.w	r4, [r8]
 800a4f2:	4626      	mov	r6, r4
 800a4f4:	2e00      	cmp	r6, #0
 800a4f6:	d145      	bne.n	800a584 <_malloc_r+0xdc>
 800a4f8:	2c00      	cmp	r4, #0
 800a4fa:	d048      	beq.n	800a58e <_malloc_r+0xe6>
 800a4fc:	6823      	ldr	r3, [r4, #0]
 800a4fe:	4631      	mov	r1, r6
 800a500:	4638      	mov	r0, r7
 800a502:	eb04 0903 	add.w	r9, r4, r3
 800a506:	f000 ff0f 	bl	800b328 <_sbrk_r>
 800a50a:	4581      	cmp	r9, r0
 800a50c:	d13f      	bne.n	800a58e <_malloc_r+0xe6>
 800a50e:	6821      	ldr	r1, [r4, #0]
 800a510:	1a6d      	subs	r5, r5, r1
 800a512:	4629      	mov	r1, r5
 800a514:	4638      	mov	r0, r7
 800a516:	f7ff ffa7 	bl	800a468 <sbrk_aligned>
 800a51a:	3001      	adds	r0, #1
 800a51c:	d037      	beq.n	800a58e <_malloc_r+0xe6>
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	442b      	add	r3, r5
 800a522:	6023      	str	r3, [r4, #0]
 800a524:	f8d8 3000 	ldr.w	r3, [r8]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d038      	beq.n	800a59e <_malloc_r+0xf6>
 800a52c:	685a      	ldr	r2, [r3, #4]
 800a52e:	42a2      	cmp	r2, r4
 800a530:	d12b      	bne.n	800a58a <_malloc_r+0xe2>
 800a532:	2200      	movs	r2, #0
 800a534:	605a      	str	r2, [r3, #4]
 800a536:	e00f      	b.n	800a558 <_malloc_r+0xb0>
 800a538:	6822      	ldr	r2, [r4, #0]
 800a53a:	1b52      	subs	r2, r2, r5
 800a53c:	d41f      	bmi.n	800a57e <_malloc_r+0xd6>
 800a53e:	2a0b      	cmp	r2, #11
 800a540:	d917      	bls.n	800a572 <_malloc_r+0xca>
 800a542:	1961      	adds	r1, r4, r5
 800a544:	42a3      	cmp	r3, r4
 800a546:	6025      	str	r5, [r4, #0]
 800a548:	bf18      	it	ne
 800a54a:	6059      	strne	r1, [r3, #4]
 800a54c:	6863      	ldr	r3, [r4, #4]
 800a54e:	bf08      	it	eq
 800a550:	f8c8 1000 	streq.w	r1, [r8]
 800a554:	5162      	str	r2, [r4, r5]
 800a556:	604b      	str	r3, [r1, #4]
 800a558:	4638      	mov	r0, r7
 800a55a:	f104 060b 	add.w	r6, r4, #11
 800a55e:	f000 f829 	bl	800a5b4 <__malloc_unlock>
 800a562:	f026 0607 	bic.w	r6, r6, #7
 800a566:	1d23      	adds	r3, r4, #4
 800a568:	1af2      	subs	r2, r6, r3
 800a56a:	d0ae      	beq.n	800a4ca <_malloc_r+0x22>
 800a56c:	1b9b      	subs	r3, r3, r6
 800a56e:	50a3      	str	r3, [r4, r2]
 800a570:	e7ab      	b.n	800a4ca <_malloc_r+0x22>
 800a572:	42a3      	cmp	r3, r4
 800a574:	6862      	ldr	r2, [r4, #4]
 800a576:	d1dd      	bne.n	800a534 <_malloc_r+0x8c>
 800a578:	f8c8 2000 	str.w	r2, [r8]
 800a57c:	e7ec      	b.n	800a558 <_malloc_r+0xb0>
 800a57e:	4623      	mov	r3, r4
 800a580:	6864      	ldr	r4, [r4, #4]
 800a582:	e7ac      	b.n	800a4de <_malloc_r+0x36>
 800a584:	4634      	mov	r4, r6
 800a586:	6876      	ldr	r6, [r6, #4]
 800a588:	e7b4      	b.n	800a4f4 <_malloc_r+0x4c>
 800a58a:	4613      	mov	r3, r2
 800a58c:	e7cc      	b.n	800a528 <_malloc_r+0x80>
 800a58e:	230c      	movs	r3, #12
 800a590:	603b      	str	r3, [r7, #0]
 800a592:	4638      	mov	r0, r7
 800a594:	f000 f80e 	bl	800a5b4 <__malloc_unlock>
 800a598:	e797      	b.n	800a4ca <_malloc_r+0x22>
 800a59a:	6025      	str	r5, [r4, #0]
 800a59c:	e7dc      	b.n	800a558 <_malloc_r+0xb0>
 800a59e:	605b      	str	r3, [r3, #4]
 800a5a0:	deff      	udf	#255	; 0xff
 800a5a2:	bf00      	nop
 800a5a4:	200015f0 	.word	0x200015f0

0800a5a8 <__malloc_lock>:
 800a5a8:	4801      	ldr	r0, [pc, #4]	; (800a5b0 <__malloc_lock+0x8>)
 800a5aa:	f000 bf09 	b.w	800b3c0 <__retarget_lock_acquire_recursive>
 800a5ae:	bf00      	nop
 800a5b0:	20001738 	.word	0x20001738

0800a5b4 <__malloc_unlock>:
 800a5b4:	4801      	ldr	r0, [pc, #4]	; (800a5bc <__malloc_unlock+0x8>)
 800a5b6:	f000 bf04 	b.w	800b3c2 <__retarget_lock_release_recursive>
 800a5ba:	bf00      	nop
 800a5bc:	20001738 	.word	0x20001738

0800a5c0 <_strtol_l.constprop.0>:
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c6:	d001      	beq.n	800a5cc <_strtol_l.constprop.0+0xc>
 800a5c8:	2b24      	cmp	r3, #36	; 0x24
 800a5ca:	d906      	bls.n	800a5da <_strtol_l.constprop.0+0x1a>
 800a5cc:	f000 fece 	bl	800b36c <__errno>
 800a5d0:	2316      	movs	r3, #22
 800a5d2:	6003      	str	r3, [r0, #0]
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a6c0 <_strtol_l.constprop.0+0x100>
 800a5de:	460d      	mov	r5, r1
 800a5e0:	462e      	mov	r6, r5
 800a5e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5e6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a5ea:	f017 0708 	ands.w	r7, r7, #8
 800a5ee:	d1f7      	bne.n	800a5e0 <_strtol_l.constprop.0+0x20>
 800a5f0:	2c2d      	cmp	r4, #45	; 0x2d
 800a5f2:	d132      	bne.n	800a65a <_strtol_l.constprop.0+0x9a>
 800a5f4:	782c      	ldrb	r4, [r5, #0]
 800a5f6:	2701      	movs	r7, #1
 800a5f8:	1cb5      	adds	r5, r6, #2
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d05b      	beq.n	800a6b6 <_strtol_l.constprop.0+0xf6>
 800a5fe:	2b10      	cmp	r3, #16
 800a600:	d109      	bne.n	800a616 <_strtol_l.constprop.0+0x56>
 800a602:	2c30      	cmp	r4, #48	; 0x30
 800a604:	d107      	bne.n	800a616 <_strtol_l.constprop.0+0x56>
 800a606:	782c      	ldrb	r4, [r5, #0]
 800a608:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a60c:	2c58      	cmp	r4, #88	; 0x58
 800a60e:	d14d      	bne.n	800a6ac <_strtol_l.constprop.0+0xec>
 800a610:	786c      	ldrb	r4, [r5, #1]
 800a612:	2310      	movs	r3, #16
 800a614:	3502      	adds	r5, #2
 800a616:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a61a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a61e:	f04f 0e00 	mov.w	lr, #0
 800a622:	fbb8 f9f3 	udiv	r9, r8, r3
 800a626:	4676      	mov	r6, lr
 800a628:	fb03 8a19 	mls	sl, r3, r9, r8
 800a62c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a630:	f1bc 0f09 	cmp.w	ip, #9
 800a634:	d816      	bhi.n	800a664 <_strtol_l.constprop.0+0xa4>
 800a636:	4664      	mov	r4, ip
 800a638:	42a3      	cmp	r3, r4
 800a63a:	dd24      	ble.n	800a686 <_strtol_l.constprop.0+0xc6>
 800a63c:	f1be 3fff 	cmp.w	lr, #4294967295
 800a640:	d008      	beq.n	800a654 <_strtol_l.constprop.0+0x94>
 800a642:	45b1      	cmp	r9, r6
 800a644:	d31c      	bcc.n	800a680 <_strtol_l.constprop.0+0xc0>
 800a646:	d101      	bne.n	800a64c <_strtol_l.constprop.0+0x8c>
 800a648:	45a2      	cmp	sl, r4
 800a64a:	db19      	blt.n	800a680 <_strtol_l.constprop.0+0xc0>
 800a64c:	fb06 4603 	mla	r6, r6, r3, r4
 800a650:	f04f 0e01 	mov.w	lr, #1
 800a654:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a658:	e7e8      	b.n	800a62c <_strtol_l.constprop.0+0x6c>
 800a65a:	2c2b      	cmp	r4, #43	; 0x2b
 800a65c:	bf04      	itt	eq
 800a65e:	782c      	ldrbeq	r4, [r5, #0]
 800a660:	1cb5      	addeq	r5, r6, #2
 800a662:	e7ca      	b.n	800a5fa <_strtol_l.constprop.0+0x3a>
 800a664:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a668:	f1bc 0f19 	cmp.w	ip, #25
 800a66c:	d801      	bhi.n	800a672 <_strtol_l.constprop.0+0xb2>
 800a66e:	3c37      	subs	r4, #55	; 0x37
 800a670:	e7e2      	b.n	800a638 <_strtol_l.constprop.0+0x78>
 800a672:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a676:	f1bc 0f19 	cmp.w	ip, #25
 800a67a:	d804      	bhi.n	800a686 <_strtol_l.constprop.0+0xc6>
 800a67c:	3c57      	subs	r4, #87	; 0x57
 800a67e:	e7db      	b.n	800a638 <_strtol_l.constprop.0+0x78>
 800a680:	f04f 3eff 	mov.w	lr, #4294967295
 800a684:	e7e6      	b.n	800a654 <_strtol_l.constprop.0+0x94>
 800a686:	f1be 3fff 	cmp.w	lr, #4294967295
 800a68a:	d105      	bne.n	800a698 <_strtol_l.constprop.0+0xd8>
 800a68c:	2322      	movs	r3, #34	; 0x22
 800a68e:	6003      	str	r3, [r0, #0]
 800a690:	4646      	mov	r6, r8
 800a692:	b942      	cbnz	r2, 800a6a6 <_strtol_l.constprop.0+0xe6>
 800a694:	4630      	mov	r0, r6
 800a696:	e79e      	b.n	800a5d6 <_strtol_l.constprop.0+0x16>
 800a698:	b107      	cbz	r7, 800a69c <_strtol_l.constprop.0+0xdc>
 800a69a:	4276      	negs	r6, r6
 800a69c:	2a00      	cmp	r2, #0
 800a69e:	d0f9      	beq.n	800a694 <_strtol_l.constprop.0+0xd4>
 800a6a0:	f1be 0f00 	cmp.w	lr, #0
 800a6a4:	d000      	beq.n	800a6a8 <_strtol_l.constprop.0+0xe8>
 800a6a6:	1e69      	subs	r1, r5, #1
 800a6a8:	6011      	str	r1, [r2, #0]
 800a6aa:	e7f3      	b.n	800a694 <_strtol_l.constprop.0+0xd4>
 800a6ac:	2430      	movs	r4, #48	; 0x30
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d1b1      	bne.n	800a616 <_strtol_l.constprop.0+0x56>
 800a6b2:	2308      	movs	r3, #8
 800a6b4:	e7af      	b.n	800a616 <_strtol_l.constprop.0+0x56>
 800a6b6:	2c30      	cmp	r4, #48	; 0x30
 800a6b8:	d0a5      	beq.n	800a606 <_strtol_l.constprop.0+0x46>
 800a6ba:	230a      	movs	r3, #10
 800a6bc:	e7ab      	b.n	800a616 <_strtol_l.constprop.0+0x56>
 800a6be:	bf00      	nop
 800a6c0:	08010d5d 	.word	0x08010d5d

0800a6c4 <strtol>:
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	460a      	mov	r2, r1
 800a6c8:	4601      	mov	r1, r0
 800a6ca:	4802      	ldr	r0, [pc, #8]	; (800a6d4 <strtol+0x10>)
 800a6cc:	6800      	ldr	r0, [r0, #0]
 800a6ce:	f7ff bf77 	b.w	800a5c0 <_strtol_l.constprop.0>
 800a6d2:	bf00      	nop
 800a6d4:	200012cc 	.word	0x200012cc

0800a6d8 <__cvt>:
 800a6d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6dc:	ec55 4b10 	vmov	r4, r5, d0
 800a6e0:	2d00      	cmp	r5, #0
 800a6e2:	460e      	mov	r6, r1
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	462b      	mov	r3, r5
 800a6e8:	bfbb      	ittet	lt
 800a6ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a6ee:	461d      	movlt	r5, r3
 800a6f0:	2300      	movge	r3, #0
 800a6f2:	232d      	movlt	r3, #45	; 0x2d
 800a6f4:	700b      	strb	r3, [r1, #0]
 800a6f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a6fc:	4691      	mov	r9, r2
 800a6fe:	f023 0820 	bic.w	r8, r3, #32
 800a702:	bfbc      	itt	lt
 800a704:	4622      	movlt	r2, r4
 800a706:	4614      	movlt	r4, r2
 800a708:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a70c:	d005      	beq.n	800a71a <__cvt+0x42>
 800a70e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a712:	d100      	bne.n	800a716 <__cvt+0x3e>
 800a714:	3601      	adds	r6, #1
 800a716:	2102      	movs	r1, #2
 800a718:	e000      	b.n	800a71c <__cvt+0x44>
 800a71a:	2103      	movs	r1, #3
 800a71c:	ab03      	add	r3, sp, #12
 800a71e:	9301      	str	r3, [sp, #4]
 800a720:	ab02      	add	r3, sp, #8
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	ec45 4b10 	vmov	d0, r4, r5
 800a728:	4653      	mov	r3, sl
 800a72a:	4632      	mov	r2, r6
 800a72c:	f000 ff08 	bl	800b540 <_dtoa_r>
 800a730:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a734:	4607      	mov	r7, r0
 800a736:	d102      	bne.n	800a73e <__cvt+0x66>
 800a738:	f019 0f01 	tst.w	r9, #1
 800a73c:	d022      	beq.n	800a784 <__cvt+0xac>
 800a73e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a742:	eb07 0906 	add.w	r9, r7, r6
 800a746:	d110      	bne.n	800a76a <__cvt+0x92>
 800a748:	783b      	ldrb	r3, [r7, #0]
 800a74a:	2b30      	cmp	r3, #48	; 0x30
 800a74c:	d10a      	bne.n	800a764 <__cvt+0x8c>
 800a74e:	2200      	movs	r2, #0
 800a750:	2300      	movs	r3, #0
 800a752:	4620      	mov	r0, r4
 800a754:	4629      	mov	r1, r5
 800a756:	f7f6 f9bf 	bl	8000ad8 <__aeabi_dcmpeq>
 800a75a:	b918      	cbnz	r0, 800a764 <__cvt+0x8c>
 800a75c:	f1c6 0601 	rsb	r6, r6, #1
 800a760:	f8ca 6000 	str.w	r6, [sl]
 800a764:	f8da 3000 	ldr.w	r3, [sl]
 800a768:	4499      	add	r9, r3
 800a76a:	2200      	movs	r2, #0
 800a76c:	2300      	movs	r3, #0
 800a76e:	4620      	mov	r0, r4
 800a770:	4629      	mov	r1, r5
 800a772:	f7f6 f9b1 	bl	8000ad8 <__aeabi_dcmpeq>
 800a776:	b108      	cbz	r0, 800a77c <__cvt+0xa4>
 800a778:	f8cd 900c 	str.w	r9, [sp, #12]
 800a77c:	2230      	movs	r2, #48	; 0x30
 800a77e:	9b03      	ldr	r3, [sp, #12]
 800a780:	454b      	cmp	r3, r9
 800a782:	d307      	bcc.n	800a794 <__cvt+0xbc>
 800a784:	9b03      	ldr	r3, [sp, #12]
 800a786:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a788:	1bdb      	subs	r3, r3, r7
 800a78a:	4638      	mov	r0, r7
 800a78c:	6013      	str	r3, [r2, #0]
 800a78e:	b004      	add	sp, #16
 800a790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a794:	1c59      	adds	r1, r3, #1
 800a796:	9103      	str	r1, [sp, #12]
 800a798:	701a      	strb	r2, [r3, #0]
 800a79a:	e7f0      	b.n	800a77e <__cvt+0xa6>

0800a79c <__exponent>:
 800a79c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2900      	cmp	r1, #0
 800a7a2:	bfb8      	it	lt
 800a7a4:	4249      	neglt	r1, r1
 800a7a6:	f803 2b02 	strb.w	r2, [r3], #2
 800a7aa:	bfb4      	ite	lt
 800a7ac:	222d      	movlt	r2, #45	; 0x2d
 800a7ae:	222b      	movge	r2, #43	; 0x2b
 800a7b0:	2909      	cmp	r1, #9
 800a7b2:	7042      	strb	r2, [r0, #1]
 800a7b4:	dd2a      	ble.n	800a80c <__exponent+0x70>
 800a7b6:	f10d 0207 	add.w	r2, sp, #7
 800a7ba:	4617      	mov	r7, r2
 800a7bc:	260a      	movs	r6, #10
 800a7be:	4694      	mov	ip, r2
 800a7c0:	fb91 f5f6 	sdiv	r5, r1, r6
 800a7c4:	fb06 1415 	mls	r4, r6, r5, r1
 800a7c8:	3430      	adds	r4, #48	; 0x30
 800a7ca:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a7ce:	460c      	mov	r4, r1
 800a7d0:	2c63      	cmp	r4, #99	; 0x63
 800a7d2:	f102 32ff 	add.w	r2, r2, #4294967295
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	dcf1      	bgt.n	800a7be <__exponent+0x22>
 800a7da:	3130      	adds	r1, #48	; 0x30
 800a7dc:	f1ac 0402 	sub.w	r4, ip, #2
 800a7e0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a7e4:	1c41      	adds	r1, r0, #1
 800a7e6:	4622      	mov	r2, r4
 800a7e8:	42ba      	cmp	r2, r7
 800a7ea:	d30a      	bcc.n	800a802 <__exponent+0x66>
 800a7ec:	f10d 0209 	add.w	r2, sp, #9
 800a7f0:	eba2 020c 	sub.w	r2, r2, ip
 800a7f4:	42bc      	cmp	r4, r7
 800a7f6:	bf88      	it	hi
 800a7f8:	2200      	movhi	r2, #0
 800a7fa:	4413      	add	r3, r2
 800a7fc:	1a18      	subs	r0, r3, r0
 800a7fe:	b003      	add	sp, #12
 800a800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a802:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a806:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a80a:	e7ed      	b.n	800a7e8 <__exponent+0x4c>
 800a80c:	2330      	movs	r3, #48	; 0x30
 800a80e:	3130      	adds	r1, #48	; 0x30
 800a810:	7083      	strb	r3, [r0, #2]
 800a812:	70c1      	strb	r1, [r0, #3]
 800a814:	1d03      	adds	r3, r0, #4
 800a816:	e7f1      	b.n	800a7fc <__exponent+0x60>

0800a818 <_printf_float>:
 800a818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a81c:	ed2d 8b02 	vpush	{d8}
 800a820:	b08d      	sub	sp, #52	; 0x34
 800a822:	460c      	mov	r4, r1
 800a824:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a828:	4616      	mov	r6, r2
 800a82a:	461f      	mov	r7, r3
 800a82c:	4605      	mov	r5, r0
 800a82e:	f000 fd43 	bl	800b2b8 <_localeconv_r>
 800a832:	f8d0 a000 	ldr.w	sl, [r0]
 800a836:	4650      	mov	r0, sl
 800a838:	f7f5 fd22 	bl	8000280 <strlen>
 800a83c:	2300      	movs	r3, #0
 800a83e:	930a      	str	r3, [sp, #40]	; 0x28
 800a840:	6823      	ldr	r3, [r4, #0]
 800a842:	9305      	str	r3, [sp, #20]
 800a844:	f8d8 3000 	ldr.w	r3, [r8]
 800a848:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a84c:	3307      	adds	r3, #7
 800a84e:	f023 0307 	bic.w	r3, r3, #7
 800a852:	f103 0208 	add.w	r2, r3, #8
 800a856:	f8c8 2000 	str.w	r2, [r8]
 800a85a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a85e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a862:	9307      	str	r3, [sp, #28]
 800a864:	f8cd 8018 	str.w	r8, [sp, #24]
 800a868:	ee08 0a10 	vmov	s16, r0
 800a86c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a870:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a874:	4b9e      	ldr	r3, [pc, #632]	; (800aaf0 <_printf_float+0x2d8>)
 800a876:	f04f 32ff 	mov.w	r2, #4294967295
 800a87a:	f7f6 f95f 	bl	8000b3c <__aeabi_dcmpun>
 800a87e:	bb88      	cbnz	r0, 800a8e4 <_printf_float+0xcc>
 800a880:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a884:	4b9a      	ldr	r3, [pc, #616]	; (800aaf0 <_printf_float+0x2d8>)
 800a886:	f04f 32ff 	mov.w	r2, #4294967295
 800a88a:	f7f6 f939 	bl	8000b00 <__aeabi_dcmple>
 800a88e:	bb48      	cbnz	r0, 800a8e4 <_printf_float+0xcc>
 800a890:	2200      	movs	r2, #0
 800a892:	2300      	movs	r3, #0
 800a894:	4640      	mov	r0, r8
 800a896:	4649      	mov	r1, r9
 800a898:	f7f6 f928 	bl	8000aec <__aeabi_dcmplt>
 800a89c:	b110      	cbz	r0, 800a8a4 <_printf_float+0x8c>
 800a89e:	232d      	movs	r3, #45	; 0x2d
 800a8a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8a4:	4a93      	ldr	r2, [pc, #588]	; (800aaf4 <_printf_float+0x2dc>)
 800a8a6:	4b94      	ldr	r3, [pc, #592]	; (800aaf8 <_printf_float+0x2e0>)
 800a8a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a8ac:	bf94      	ite	ls
 800a8ae:	4690      	movls	r8, r2
 800a8b0:	4698      	movhi	r8, r3
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	6123      	str	r3, [r4, #16]
 800a8b6:	9b05      	ldr	r3, [sp, #20]
 800a8b8:	f023 0304 	bic.w	r3, r3, #4
 800a8bc:	6023      	str	r3, [r4, #0]
 800a8be:	f04f 0900 	mov.w	r9, #0
 800a8c2:	9700      	str	r7, [sp, #0]
 800a8c4:	4633      	mov	r3, r6
 800a8c6:	aa0b      	add	r2, sp, #44	; 0x2c
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	f000 f9da 	bl	800ac84 <_printf_common>
 800a8d0:	3001      	adds	r0, #1
 800a8d2:	f040 8090 	bne.w	800a9f6 <_printf_float+0x1de>
 800a8d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8da:	b00d      	add	sp, #52	; 0x34
 800a8dc:	ecbd 8b02 	vpop	{d8}
 800a8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e4:	4642      	mov	r2, r8
 800a8e6:	464b      	mov	r3, r9
 800a8e8:	4640      	mov	r0, r8
 800a8ea:	4649      	mov	r1, r9
 800a8ec:	f7f6 f926 	bl	8000b3c <__aeabi_dcmpun>
 800a8f0:	b140      	cbz	r0, 800a904 <_printf_float+0xec>
 800a8f2:	464b      	mov	r3, r9
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	bfbc      	itt	lt
 800a8f8:	232d      	movlt	r3, #45	; 0x2d
 800a8fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a8fe:	4a7f      	ldr	r2, [pc, #508]	; (800aafc <_printf_float+0x2e4>)
 800a900:	4b7f      	ldr	r3, [pc, #508]	; (800ab00 <_printf_float+0x2e8>)
 800a902:	e7d1      	b.n	800a8a8 <_printf_float+0x90>
 800a904:	6863      	ldr	r3, [r4, #4]
 800a906:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a90a:	9206      	str	r2, [sp, #24]
 800a90c:	1c5a      	adds	r2, r3, #1
 800a90e:	d13f      	bne.n	800a990 <_printf_float+0x178>
 800a910:	2306      	movs	r3, #6
 800a912:	6063      	str	r3, [r4, #4]
 800a914:	9b05      	ldr	r3, [sp, #20]
 800a916:	6861      	ldr	r1, [r4, #4]
 800a918:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a91c:	2300      	movs	r3, #0
 800a91e:	9303      	str	r3, [sp, #12]
 800a920:	ab0a      	add	r3, sp, #40	; 0x28
 800a922:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a926:	ab09      	add	r3, sp, #36	; 0x24
 800a928:	ec49 8b10 	vmov	d0, r8, r9
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	6022      	str	r2, [r4, #0]
 800a930:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a934:	4628      	mov	r0, r5
 800a936:	f7ff fecf 	bl	800a6d8 <__cvt>
 800a93a:	9b06      	ldr	r3, [sp, #24]
 800a93c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a93e:	2b47      	cmp	r3, #71	; 0x47
 800a940:	4680      	mov	r8, r0
 800a942:	d108      	bne.n	800a956 <_printf_float+0x13e>
 800a944:	1cc8      	adds	r0, r1, #3
 800a946:	db02      	blt.n	800a94e <_printf_float+0x136>
 800a948:	6863      	ldr	r3, [r4, #4]
 800a94a:	4299      	cmp	r1, r3
 800a94c:	dd41      	ble.n	800a9d2 <_printf_float+0x1ba>
 800a94e:	f1ab 0302 	sub.w	r3, fp, #2
 800a952:	fa5f fb83 	uxtb.w	fp, r3
 800a956:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a95a:	d820      	bhi.n	800a99e <_printf_float+0x186>
 800a95c:	3901      	subs	r1, #1
 800a95e:	465a      	mov	r2, fp
 800a960:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a964:	9109      	str	r1, [sp, #36]	; 0x24
 800a966:	f7ff ff19 	bl	800a79c <__exponent>
 800a96a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a96c:	1813      	adds	r3, r2, r0
 800a96e:	2a01      	cmp	r2, #1
 800a970:	4681      	mov	r9, r0
 800a972:	6123      	str	r3, [r4, #16]
 800a974:	dc02      	bgt.n	800a97c <_printf_float+0x164>
 800a976:	6822      	ldr	r2, [r4, #0]
 800a978:	07d2      	lsls	r2, r2, #31
 800a97a:	d501      	bpl.n	800a980 <_printf_float+0x168>
 800a97c:	3301      	adds	r3, #1
 800a97e:	6123      	str	r3, [r4, #16]
 800a980:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a984:	2b00      	cmp	r3, #0
 800a986:	d09c      	beq.n	800a8c2 <_printf_float+0xaa>
 800a988:	232d      	movs	r3, #45	; 0x2d
 800a98a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a98e:	e798      	b.n	800a8c2 <_printf_float+0xaa>
 800a990:	9a06      	ldr	r2, [sp, #24]
 800a992:	2a47      	cmp	r2, #71	; 0x47
 800a994:	d1be      	bne.n	800a914 <_printf_float+0xfc>
 800a996:	2b00      	cmp	r3, #0
 800a998:	d1bc      	bne.n	800a914 <_printf_float+0xfc>
 800a99a:	2301      	movs	r3, #1
 800a99c:	e7b9      	b.n	800a912 <_printf_float+0xfa>
 800a99e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a9a2:	d118      	bne.n	800a9d6 <_printf_float+0x1be>
 800a9a4:	2900      	cmp	r1, #0
 800a9a6:	6863      	ldr	r3, [r4, #4]
 800a9a8:	dd0b      	ble.n	800a9c2 <_printf_float+0x1aa>
 800a9aa:	6121      	str	r1, [r4, #16]
 800a9ac:	b913      	cbnz	r3, 800a9b4 <_printf_float+0x19c>
 800a9ae:	6822      	ldr	r2, [r4, #0]
 800a9b0:	07d0      	lsls	r0, r2, #31
 800a9b2:	d502      	bpl.n	800a9ba <_printf_float+0x1a2>
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	440b      	add	r3, r1
 800a9b8:	6123      	str	r3, [r4, #16]
 800a9ba:	65a1      	str	r1, [r4, #88]	; 0x58
 800a9bc:	f04f 0900 	mov.w	r9, #0
 800a9c0:	e7de      	b.n	800a980 <_printf_float+0x168>
 800a9c2:	b913      	cbnz	r3, 800a9ca <_printf_float+0x1b2>
 800a9c4:	6822      	ldr	r2, [r4, #0]
 800a9c6:	07d2      	lsls	r2, r2, #31
 800a9c8:	d501      	bpl.n	800a9ce <_printf_float+0x1b6>
 800a9ca:	3302      	adds	r3, #2
 800a9cc:	e7f4      	b.n	800a9b8 <_printf_float+0x1a0>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e7f2      	b.n	800a9b8 <_printf_float+0x1a0>
 800a9d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a9d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d8:	4299      	cmp	r1, r3
 800a9da:	db05      	blt.n	800a9e8 <_printf_float+0x1d0>
 800a9dc:	6823      	ldr	r3, [r4, #0]
 800a9de:	6121      	str	r1, [r4, #16]
 800a9e0:	07d8      	lsls	r0, r3, #31
 800a9e2:	d5ea      	bpl.n	800a9ba <_printf_float+0x1a2>
 800a9e4:	1c4b      	adds	r3, r1, #1
 800a9e6:	e7e7      	b.n	800a9b8 <_printf_float+0x1a0>
 800a9e8:	2900      	cmp	r1, #0
 800a9ea:	bfd4      	ite	le
 800a9ec:	f1c1 0202 	rsble	r2, r1, #2
 800a9f0:	2201      	movgt	r2, #1
 800a9f2:	4413      	add	r3, r2
 800a9f4:	e7e0      	b.n	800a9b8 <_printf_float+0x1a0>
 800a9f6:	6823      	ldr	r3, [r4, #0]
 800a9f8:	055a      	lsls	r2, r3, #21
 800a9fa:	d407      	bmi.n	800aa0c <_printf_float+0x1f4>
 800a9fc:	6923      	ldr	r3, [r4, #16]
 800a9fe:	4642      	mov	r2, r8
 800aa00:	4631      	mov	r1, r6
 800aa02:	4628      	mov	r0, r5
 800aa04:	47b8      	blx	r7
 800aa06:	3001      	adds	r0, #1
 800aa08:	d12c      	bne.n	800aa64 <_printf_float+0x24c>
 800aa0a:	e764      	b.n	800a8d6 <_printf_float+0xbe>
 800aa0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aa10:	f240 80e0 	bls.w	800abd4 <_printf_float+0x3bc>
 800aa14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa18:	2200      	movs	r2, #0
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	f7f6 f85c 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	d034      	beq.n	800aa8e <_printf_float+0x276>
 800aa24:	4a37      	ldr	r2, [pc, #220]	; (800ab04 <_printf_float+0x2ec>)
 800aa26:	2301      	movs	r3, #1
 800aa28:	4631      	mov	r1, r6
 800aa2a:	4628      	mov	r0, r5
 800aa2c:	47b8      	blx	r7
 800aa2e:	3001      	adds	r0, #1
 800aa30:	f43f af51 	beq.w	800a8d6 <_printf_float+0xbe>
 800aa34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	db02      	blt.n	800aa42 <_printf_float+0x22a>
 800aa3c:	6823      	ldr	r3, [r4, #0]
 800aa3e:	07d8      	lsls	r0, r3, #31
 800aa40:	d510      	bpl.n	800aa64 <_printf_float+0x24c>
 800aa42:	ee18 3a10 	vmov	r3, s16
 800aa46:	4652      	mov	r2, sl
 800aa48:	4631      	mov	r1, r6
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	47b8      	blx	r7
 800aa4e:	3001      	adds	r0, #1
 800aa50:	f43f af41 	beq.w	800a8d6 <_printf_float+0xbe>
 800aa54:	f04f 0800 	mov.w	r8, #0
 800aa58:	f104 091a 	add.w	r9, r4, #26
 800aa5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	4543      	cmp	r3, r8
 800aa62:	dc09      	bgt.n	800aa78 <_printf_float+0x260>
 800aa64:	6823      	ldr	r3, [r4, #0]
 800aa66:	079b      	lsls	r3, r3, #30
 800aa68:	f100 8107 	bmi.w	800ac7a <_printf_float+0x462>
 800aa6c:	68e0      	ldr	r0, [r4, #12]
 800aa6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa70:	4298      	cmp	r0, r3
 800aa72:	bfb8      	it	lt
 800aa74:	4618      	movlt	r0, r3
 800aa76:	e730      	b.n	800a8da <_printf_float+0xc2>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	464a      	mov	r2, r9
 800aa7c:	4631      	mov	r1, r6
 800aa7e:	4628      	mov	r0, r5
 800aa80:	47b8      	blx	r7
 800aa82:	3001      	adds	r0, #1
 800aa84:	f43f af27 	beq.w	800a8d6 <_printf_float+0xbe>
 800aa88:	f108 0801 	add.w	r8, r8, #1
 800aa8c:	e7e6      	b.n	800aa5c <_printf_float+0x244>
 800aa8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	dc39      	bgt.n	800ab08 <_printf_float+0x2f0>
 800aa94:	4a1b      	ldr	r2, [pc, #108]	; (800ab04 <_printf_float+0x2ec>)
 800aa96:	2301      	movs	r3, #1
 800aa98:	4631      	mov	r1, r6
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	47b8      	blx	r7
 800aa9e:	3001      	adds	r0, #1
 800aaa0:	f43f af19 	beq.w	800a8d6 <_printf_float+0xbe>
 800aaa4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	d102      	bne.n	800aab2 <_printf_float+0x29a>
 800aaac:	6823      	ldr	r3, [r4, #0]
 800aaae:	07d9      	lsls	r1, r3, #31
 800aab0:	d5d8      	bpl.n	800aa64 <_printf_float+0x24c>
 800aab2:	ee18 3a10 	vmov	r3, s16
 800aab6:	4652      	mov	r2, sl
 800aab8:	4631      	mov	r1, r6
 800aaba:	4628      	mov	r0, r5
 800aabc:	47b8      	blx	r7
 800aabe:	3001      	adds	r0, #1
 800aac0:	f43f af09 	beq.w	800a8d6 <_printf_float+0xbe>
 800aac4:	f04f 0900 	mov.w	r9, #0
 800aac8:	f104 0a1a 	add.w	sl, r4, #26
 800aacc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aace:	425b      	negs	r3, r3
 800aad0:	454b      	cmp	r3, r9
 800aad2:	dc01      	bgt.n	800aad8 <_printf_float+0x2c0>
 800aad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aad6:	e792      	b.n	800a9fe <_printf_float+0x1e6>
 800aad8:	2301      	movs	r3, #1
 800aada:	4652      	mov	r2, sl
 800aadc:	4631      	mov	r1, r6
 800aade:	4628      	mov	r0, r5
 800aae0:	47b8      	blx	r7
 800aae2:	3001      	adds	r0, #1
 800aae4:	f43f aef7 	beq.w	800a8d6 <_printf_float+0xbe>
 800aae8:	f109 0901 	add.w	r9, r9, #1
 800aaec:	e7ee      	b.n	800aacc <_printf_float+0x2b4>
 800aaee:	bf00      	nop
 800aaf0:	7fefffff 	.word	0x7fefffff
 800aaf4:	08010e5d 	.word	0x08010e5d
 800aaf8:	08010e61 	.word	0x08010e61
 800aafc:	08010e65 	.word	0x08010e65
 800ab00:	08010e69 	.word	0x08010e69
 800ab04:	08010e6d 	.word	0x08010e6d
 800ab08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	bfa8      	it	ge
 800ab10:	461a      	movge	r2, r3
 800ab12:	2a00      	cmp	r2, #0
 800ab14:	4691      	mov	r9, r2
 800ab16:	dc37      	bgt.n	800ab88 <_printf_float+0x370>
 800ab18:	f04f 0b00 	mov.w	fp, #0
 800ab1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab20:	f104 021a 	add.w	r2, r4, #26
 800ab24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab26:	9305      	str	r3, [sp, #20]
 800ab28:	eba3 0309 	sub.w	r3, r3, r9
 800ab2c:	455b      	cmp	r3, fp
 800ab2e:	dc33      	bgt.n	800ab98 <_printf_float+0x380>
 800ab30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab34:	429a      	cmp	r2, r3
 800ab36:	db3b      	blt.n	800abb0 <_printf_float+0x398>
 800ab38:	6823      	ldr	r3, [r4, #0]
 800ab3a:	07da      	lsls	r2, r3, #31
 800ab3c:	d438      	bmi.n	800abb0 <_printf_float+0x398>
 800ab3e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ab42:	eba2 0903 	sub.w	r9, r2, r3
 800ab46:	9b05      	ldr	r3, [sp, #20]
 800ab48:	1ad2      	subs	r2, r2, r3
 800ab4a:	4591      	cmp	r9, r2
 800ab4c:	bfa8      	it	ge
 800ab4e:	4691      	movge	r9, r2
 800ab50:	f1b9 0f00 	cmp.w	r9, #0
 800ab54:	dc35      	bgt.n	800abc2 <_printf_float+0x3aa>
 800ab56:	f04f 0800 	mov.w	r8, #0
 800ab5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab5e:	f104 0a1a 	add.w	sl, r4, #26
 800ab62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab66:	1a9b      	subs	r3, r3, r2
 800ab68:	eba3 0309 	sub.w	r3, r3, r9
 800ab6c:	4543      	cmp	r3, r8
 800ab6e:	f77f af79 	ble.w	800aa64 <_printf_float+0x24c>
 800ab72:	2301      	movs	r3, #1
 800ab74:	4652      	mov	r2, sl
 800ab76:	4631      	mov	r1, r6
 800ab78:	4628      	mov	r0, r5
 800ab7a:	47b8      	blx	r7
 800ab7c:	3001      	adds	r0, #1
 800ab7e:	f43f aeaa 	beq.w	800a8d6 <_printf_float+0xbe>
 800ab82:	f108 0801 	add.w	r8, r8, #1
 800ab86:	e7ec      	b.n	800ab62 <_printf_float+0x34a>
 800ab88:	4613      	mov	r3, r2
 800ab8a:	4631      	mov	r1, r6
 800ab8c:	4642      	mov	r2, r8
 800ab8e:	4628      	mov	r0, r5
 800ab90:	47b8      	blx	r7
 800ab92:	3001      	adds	r0, #1
 800ab94:	d1c0      	bne.n	800ab18 <_printf_float+0x300>
 800ab96:	e69e      	b.n	800a8d6 <_printf_float+0xbe>
 800ab98:	2301      	movs	r3, #1
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	9205      	str	r2, [sp, #20]
 800aba0:	47b8      	blx	r7
 800aba2:	3001      	adds	r0, #1
 800aba4:	f43f ae97 	beq.w	800a8d6 <_printf_float+0xbe>
 800aba8:	9a05      	ldr	r2, [sp, #20]
 800abaa:	f10b 0b01 	add.w	fp, fp, #1
 800abae:	e7b9      	b.n	800ab24 <_printf_float+0x30c>
 800abb0:	ee18 3a10 	vmov	r3, s16
 800abb4:	4652      	mov	r2, sl
 800abb6:	4631      	mov	r1, r6
 800abb8:	4628      	mov	r0, r5
 800abba:	47b8      	blx	r7
 800abbc:	3001      	adds	r0, #1
 800abbe:	d1be      	bne.n	800ab3e <_printf_float+0x326>
 800abc0:	e689      	b.n	800a8d6 <_printf_float+0xbe>
 800abc2:	9a05      	ldr	r2, [sp, #20]
 800abc4:	464b      	mov	r3, r9
 800abc6:	4442      	add	r2, r8
 800abc8:	4631      	mov	r1, r6
 800abca:	4628      	mov	r0, r5
 800abcc:	47b8      	blx	r7
 800abce:	3001      	adds	r0, #1
 800abd0:	d1c1      	bne.n	800ab56 <_printf_float+0x33e>
 800abd2:	e680      	b.n	800a8d6 <_printf_float+0xbe>
 800abd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abd6:	2a01      	cmp	r2, #1
 800abd8:	dc01      	bgt.n	800abde <_printf_float+0x3c6>
 800abda:	07db      	lsls	r3, r3, #31
 800abdc:	d53a      	bpl.n	800ac54 <_printf_float+0x43c>
 800abde:	2301      	movs	r3, #1
 800abe0:	4642      	mov	r2, r8
 800abe2:	4631      	mov	r1, r6
 800abe4:	4628      	mov	r0, r5
 800abe6:	47b8      	blx	r7
 800abe8:	3001      	adds	r0, #1
 800abea:	f43f ae74 	beq.w	800a8d6 <_printf_float+0xbe>
 800abee:	ee18 3a10 	vmov	r3, s16
 800abf2:	4652      	mov	r2, sl
 800abf4:	4631      	mov	r1, r6
 800abf6:	4628      	mov	r0, r5
 800abf8:	47b8      	blx	r7
 800abfa:	3001      	adds	r0, #1
 800abfc:	f43f ae6b 	beq.w	800a8d6 <_printf_float+0xbe>
 800ac00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac04:	2200      	movs	r2, #0
 800ac06:	2300      	movs	r3, #0
 800ac08:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ac0c:	f7f5 ff64 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac10:	b9d8      	cbnz	r0, 800ac4a <_printf_float+0x432>
 800ac12:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ac16:	f108 0201 	add.w	r2, r8, #1
 800ac1a:	4631      	mov	r1, r6
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	47b8      	blx	r7
 800ac20:	3001      	adds	r0, #1
 800ac22:	d10e      	bne.n	800ac42 <_printf_float+0x42a>
 800ac24:	e657      	b.n	800a8d6 <_printf_float+0xbe>
 800ac26:	2301      	movs	r3, #1
 800ac28:	4652      	mov	r2, sl
 800ac2a:	4631      	mov	r1, r6
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	47b8      	blx	r7
 800ac30:	3001      	adds	r0, #1
 800ac32:	f43f ae50 	beq.w	800a8d6 <_printf_float+0xbe>
 800ac36:	f108 0801 	add.w	r8, r8, #1
 800ac3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	4543      	cmp	r3, r8
 800ac40:	dcf1      	bgt.n	800ac26 <_printf_float+0x40e>
 800ac42:	464b      	mov	r3, r9
 800ac44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ac48:	e6da      	b.n	800aa00 <_printf_float+0x1e8>
 800ac4a:	f04f 0800 	mov.w	r8, #0
 800ac4e:	f104 0a1a 	add.w	sl, r4, #26
 800ac52:	e7f2      	b.n	800ac3a <_printf_float+0x422>
 800ac54:	2301      	movs	r3, #1
 800ac56:	4642      	mov	r2, r8
 800ac58:	e7df      	b.n	800ac1a <_printf_float+0x402>
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	464a      	mov	r2, r9
 800ac5e:	4631      	mov	r1, r6
 800ac60:	4628      	mov	r0, r5
 800ac62:	47b8      	blx	r7
 800ac64:	3001      	adds	r0, #1
 800ac66:	f43f ae36 	beq.w	800a8d6 <_printf_float+0xbe>
 800ac6a:	f108 0801 	add.w	r8, r8, #1
 800ac6e:	68e3      	ldr	r3, [r4, #12]
 800ac70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac72:	1a5b      	subs	r3, r3, r1
 800ac74:	4543      	cmp	r3, r8
 800ac76:	dcf0      	bgt.n	800ac5a <_printf_float+0x442>
 800ac78:	e6f8      	b.n	800aa6c <_printf_float+0x254>
 800ac7a:	f04f 0800 	mov.w	r8, #0
 800ac7e:	f104 0919 	add.w	r9, r4, #25
 800ac82:	e7f4      	b.n	800ac6e <_printf_float+0x456>

0800ac84 <_printf_common>:
 800ac84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac88:	4616      	mov	r6, r2
 800ac8a:	4699      	mov	r9, r3
 800ac8c:	688a      	ldr	r2, [r1, #8]
 800ac8e:	690b      	ldr	r3, [r1, #16]
 800ac90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac94:	4293      	cmp	r3, r2
 800ac96:	bfb8      	it	lt
 800ac98:	4613      	movlt	r3, r2
 800ac9a:	6033      	str	r3, [r6, #0]
 800ac9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aca0:	4607      	mov	r7, r0
 800aca2:	460c      	mov	r4, r1
 800aca4:	b10a      	cbz	r2, 800acaa <_printf_common+0x26>
 800aca6:	3301      	adds	r3, #1
 800aca8:	6033      	str	r3, [r6, #0]
 800acaa:	6823      	ldr	r3, [r4, #0]
 800acac:	0699      	lsls	r1, r3, #26
 800acae:	bf42      	ittt	mi
 800acb0:	6833      	ldrmi	r3, [r6, #0]
 800acb2:	3302      	addmi	r3, #2
 800acb4:	6033      	strmi	r3, [r6, #0]
 800acb6:	6825      	ldr	r5, [r4, #0]
 800acb8:	f015 0506 	ands.w	r5, r5, #6
 800acbc:	d106      	bne.n	800accc <_printf_common+0x48>
 800acbe:	f104 0a19 	add.w	sl, r4, #25
 800acc2:	68e3      	ldr	r3, [r4, #12]
 800acc4:	6832      	ldr	r2, [r6, #0]
 800acc6:	1a9b      	subs	r3, r3, r2
 800acc8:	42ab      	cmp	r3, r5
 800acca:	dc26      	bgt.n	800ad1a <_printf_common+0x96>
 800accc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800acd0:	1e13      	subs	r3, r2, #0
 800acd2:	6822      	ldr	r2, [r4, #0]
 800acd4:	bf18      	it	ne
 800acd6:	2301      	movne	r3, #1
 800acd8:	0692      	lsls	r2, r2, #26
 800acda:	d42b      	bmi.n	800ad34 <_printf_common+0xb0>
 800acdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ace0:	4649      	mov	r1, r9
 800ace2:	4638      	mov	r0, r7
 800ace4:	47c0      	blx	r8
 800ace6:	3001      	adds	r0, #1
 800ace8:	d01e      	beq.n	800ad28 <_printf_common+0xa4>
 800acea:	6823      	ldr	r3, [r4, #0]
 800acec:	6922      	ldr	r2, [r4, #16]
 800acee:	f003 0306 	and.w	r3, r3, #6
 800acf2:	2b04      	cmp	r3, #4
 800acf4:	bf02      	ittt	eq
 800acf6:	68e5      	ldreq	r5, [r4, #12]
 800acf8:	6833      	ldreq	r3, [r6, #0]
 800acfa:	1aed      	subeq	r5, r5, r3
 800acfc:	68a3      	ldr	r3, [r4, #8]
 800acfe:	bf0c      	ite	eq
 800ad00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad04:	2500      	movne	r5, #0
 800ad06:	4293      	cmp	r3, r2
 800ad08:	bfc4      	itt	gt
 800ad0a:	1a9b      	subgt	r3, r3, r2
 800ad0c:	18ed      	addgt	r5, r5, r3
 800ad0e:	2600      	movs	r6, #0
 800ad10:	341a      	adds	r4, #26
 800ad12:	42b5      	cmp	r5, r6
 800ad14:	d11a      	bne.n	800ad4c <_printf_common+0xc8>
 800ad16:	2000      	movs	r0, #0
 800ad18:	e008      	b.n	800ad2c <_printf_common+0xa8>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	4652      	mov	r2, sl
 800ad1e:	4649      	mov	r1, r9
 800ad20:	4638      	mov	r0, r7
 800ad22:	47c0      	blx	r8
 800ad24:	3001      	adds	r0, #1
 800ad26:	d103      	bne.n	800ad30 <_printf_common+0xac>
 800ad28:	f04f 30ff 	mov.w	r0, #4294967295
 800ad2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad30:	3501      	adds	r5, #1
 800ad32:	e7c6      	b.n	800acc2 <_printf_common+0x3e>
 800ad34:	18e1      	adds	r1, r4, r3
 800ad36:	1c5a      	adds	r2, r3, #1
 800ad38:	2030      	movs	r0, #48	; 0x30
 800ad3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad3e:	4422      	add	r2, r4
 800ad40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad48:	3302      	adds	r3, #2
 800ad4a:	e7c7      	b.n	800acdc <_printf_common+0x58>
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	4622      	mov	r2, r4
 800ad50:	4649      	mov	r1, r9
 800ad52:	4638      	mov	r0, r7
 800ad54:	47c0      	blx	r8
 800ad56:	3001      	adds	r0, #1
 800ad58:	d0e6      	beq.n	800ad28 <_printf_common+0xa4>
 800ad5a:	3601      	adds	r6, #1
 800ad5c:	e7d9      	b.n	800ad12 <_printf_common+0x8e>
	...

0800ad60 <_printf_i>:
 800ad60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad64:	7e0f      	ldrb	r7, [r1, #24]
 800ad66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad68:	2f78      	cmp	r7, #120	; 0x78
 800ad6a:	4691      	mov	r9, r2
 800ad6c:	4680      	mov	r8, r0
 800ad6e:	460c      	mov	r4, r1
 800ad70:	469a      	mov	sl, r3
 800ad72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad76:	d807      	bhi.n	800ad88 <_printf_i+0x28>
 800ad78:	2f62      	cmp	r7, #98	; 0x62
 800ad7a:	d80a      	bhi.n	800ad92 <_printf_i+0x32>
 800ad7c:	2f00      	cmp	r7, #0
 800ad7e:	f000 80d4 	beq.w	800af2a <_printf_i+0x1ca>
 800ad82:	2f58      	cmp	r7, #88	; 0x58
 800ad84:	f000 80c0 	beq.w	800af08 <_printf_i+0x1a8>
 800ad88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad90:	e03a      	b.n	800ae08 <_printf_i+0xa8>
 800ad92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad96:	2b15      	cmp	r3, #21
 800ad98:	d8f6      	bhi.n	800ad88 <_printf_i+0x28>
 800ad9a:	a101      	add	r1, pc, #4	; (adr r1, 800ada0 <_printf_i+0x40>)
 800ad9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ada0:	0800adf9 	.word	0x0800adf9
 800ada4:	0800ae0d 	.word	0x0800ae0d
 800ada8:	0800ad89 	.word	0x0800ad89
 800adac:	0800ad89 	.word	0x0800ad89
 800adb0:	0800ad89 	.word	0x0800ad89
 800adb4:	0800ad89 	.word	0x0800ad89
 800adb8:	0800ae0d 	.word	0x0800ae0d
 800adbc:	0800ad89 	.word	0x0800ad89
 800adc0:	0800ad89 	.word	0x0800ad89
 800adc4:	0800ad89 	.word	0x0800ad89
 800adc8:	0800ad89 	.word	0x0800ad89
 800adcc:	0800af11 	.word	0x0800af11
 800add0:	0800ae39 	.word	0x0800ae39
 800add4:	0800aecb 	.word	0x0800aecb
 800add8:	0800ad89 	.word	0x0800ad89
 800addc:	0800ad89 	.word	0x0800ad89
 800ade0:	0800af33 	.word	0x0800af33
 800ade4:	0800ad89 	.word	0x0800ad89
 800ade8:	0800ae39 	.word	0x0800ae39
 800adec:	0800ad89 	.word	0x0800ad89
 800adf0:	0800ad89 	.word	0x0800ad89
 800adf4:	0800aed3 	.word	0x0800aed3
 800adf8:	682b      	ldr	r3, [r5, #0]
 800adfa:	1d1a      	adds	r2, r3, #4
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	602a      	str	r2, [r5, #0]
 800ae00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e09f      	b.n	800af4c <_printf_i+0x1ec>
 800ae0c:	6820      	ldr	r0, [r4, #0]
 800ae0e:	682b      	ldr	r3, [r5, #0]
 800ae10:	0607      	lsls	r7, r0, #24
 800ae12:	f103 0104 	add.w	r1, r3, #4
 800ae16:	6029      	str	r1, [r5, #0]
 800ae18:	d501      	bpl.n	800ae1e <_printf_i+0xbe>
 800ae1a:	681e      	ldr	r6, [r3, #0]
 800ae1c:	e003      	b.n	800ae26 <_printf_i+0xc6>
 800ae1e:	0646      	lsls	r6, r0, #25
 800ae20:	d5fb      	bpl.n	800ae1a <_printf_i+0xba>
 800ae22:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ae26:	2e00      	cmp	r6, #0
 800ae28:	da03      	bge.n	800ae32 <_printf_i+0xd2>
 800ae2a:	232d      	movs	r3, #45	; 0x2d
 800ae2c:	4276      	negs	r6, r6
 800ae2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae32:	485a      	ldr	r0, [pc, #360]	; (800af9c <_printf_i+0x23c>)
 800ae34:	230a      	movs	r3, #10
 800ae36:	e012      	b.n	800ae5e <_printf_i+0xfe>
 800ae38:	682b      	ldr	r3, [r5, #0]
 800ae3a:	6820      	ldr	r0, [r4, #0]
 800ae3c:	1d19      	adds	r1, r3, #4
 800ae3e:	6029      	str	r1, [r5, #0]
 800ae40:	0605      	lsls	r5, r0, #24
 800ae42:	d501      	bpl.n	800ae48 <_printf_i+0xe8>
 800ae44:	681e      	ldr	r6, [r3, #0]
 800ae46:	e002      	b.n	800ae4e <_printf_i+0xee>
 800ae48:	0641      	lsls	r1, r0, #25
 800ae4a:	d5fb      	bpl.n	800ae44 <_printf_i+0xe4>
 800ae4c:	881e      	ldrh	r6, [r3, #0]
 800ae4e:	4853      	ldr	r0, [pc, #332]	; (800af9c <_printf_i+0x23c>)
 800ae50:	2f6f      	cmp	r7, #111	; 0x6f
 800ae52:	bf0c      	ite	eq
 800ae54:	2308      	moveq	r3, #8
 800ae56:	230a      	movne	r3, #10
 800ae58:	2100      	movs	r1, #0
 800ae5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae5e:	6865      	ldr	r5, [r4, #4]
 800ae60:	60a5      	str	r5, [r4, #8]
 800ae62:	2d00      	cmp	r5, #0
 800ae64:	bfa2      	ittt	ge
 800ae66:	6821      	ldrge	r1, [r4, #0]
 800ae68:	f021 0104 	bicge.w	r1, r1, #4
 800ae6c:	6021      	strge	r1, [r4, #0]
 800ae6e:	b90e      	cbnz	r6, 800ae74 <_printf_i+0x114>
 800ae70:	2d00      	cmp	r5, #0
 800ae72:	d04b      	beq.n	800af0c <_printf_i+0x1ac>
 800ae74:	4615      	mov	r5, r2
 800ae76:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae7a:	fb03 6711 	mls	r7, r3, r1, r6
 800ae7e:	5dc7      	ldrb	r7, [r0, r7]
 800ae80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae84:	4637      	mov	r7, r6
 800ae86:	42bb      	cmp	r3, r7
 800ae88:	460e      	mov	r6, r1
 800ae8a:	d9f4      	bls.n	800ae76 <_printf_i+0x116>
 800ae8c:	2b08      	cmp	r3, #8
 800ae8e:	d10b      	bne.n	800aea8 <_printf_i+0x148>
 800ae90:	6823      	ldr	r3, [r4, #0]
 800ae92:	07de      	lsls	r6, r3, #31
 800ae94:	d508      	bpl.n	800aea8 <_printf_i+0x148>
 800ae96:	6923      	ldr	r3, [r4, #16]
 800ae98:	6861      	ldr	r1, [r4, #4]
 800ae9a:	4299      	cmp	r1, r3
 800ae9c:	bfde      	ittt	le
 800ae9e:	2330      	movle	r3, #48	; 0x30
 800aea0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aea4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aea8:	1b52      	subs	r2, r2, r5
 800aeaa:	6122      	str	r2, [r4, #16]
 800aeac:	f8cd a000 	str.w	sl, [sp]
 800aeb0:	464b      	mov	r3, r9
 800aeb2:	aa03      	add	r2, sp, #12
 800aeb4:	4621      	mov	r1, r4
 800aeb6:	4640      	mov	r0, r8
 800aeb8:	f7ff fee4 	bl	800ac84 <_printf_common>
 800aebc:	3001      	adds	r0, #1
 800aebe:	d14a      	bne.n	800af56 <_printf_i+0x1f6>
 800aec0:	f04f 30ff 	mov.w	r0, #4294967295
 800aec4:	b004      	add	sp, #16
 800aec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeca:	6823      	ldr	r3, [r4, #0]
 800aecc:	f043 0320 	orr.w	r3, r3, #32
 800aed0:	6023      	str	r3, [r4, #0]
 800aed2:	4833      	ldr	r0, [pc, #204]	; (800afa0 <_printf_i+0x240>)
 800aed4:	2778      	movs	r7, #120	; 0x78
 800aed6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aeda:	6823      	ldr	r3, [r4, #0]
 800aedc:	6829      	ldr	r1, [r5, #0]
 800aede:	061f      	lsls	r7, r3, #24
 800aee0:	f851 6b04 	ldr.w	r6, [r1], #4
 800aee4:	d402      	bmi.n	800aeec <_printf_i+0x18c>
 800aee6:	065f      	lsls	r7, r3, #25
 800aee8:	bf48      	it	mi
 800aeea:	b2b6      	uxthmi	r6, r6
 800aeec:	07df      	lsls	r7, r3, #31
 800aeee:	bf48      	it	mi
 800aef0:	f043 0320 	orrmi.w	r3, r3, #32
 800aef4:	6029      	str	r1, [r5, #0]
 800aef6:	bf48      	it	mi
 800aef8:	6023      	strmi	r3, [r4, #0]
 800aefa:	b91e      	cbnz	r6, 800af04 <_printf_i+0x1a4>
 800aefc:	6823      	ldr	r3, [r4, #0]
 800aefe:	f023 0320 	bic.w	r3, r3, #32
 800af02:	6023      	str	r3, [r4, #0]
 800af04:	2310      	movs	r3, #16
 800af06:	e7a7      	b.n	800ae58 <_printf_i+0xf8>
 800af08:	4824      	ldr	r0, [pc, #144]	; (800af9c <_printf_i+0x23c>)
 800af0a:	e7e4      	b.n	800aed6 <_printf_i+0x176>
 800af0c:	4615      	mov	r5, r2
 800af0e:	e7bd      	b.n	800ae8c <_printf_i+0x12c>
 800af10:	682b      	ldr	r3, [r5, #0]
 800af12:	6826      	ldr	r6, [r4, #0]
 800af14:	6961      	ldr	r1, [r4, #20]
 800af16:	1d18      	adds	r0, r3, #4
 800af18:	6028      	str	r0, [r5, #0]
 800af1a:	0635      	lsls	r5, r6, #24
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	d501      	bpl.n	800af24 <_printf_i+0x1c4>
 800af20:	6019      	str	r1, [r3, #0]
 800af22:	e002      	b.n	800af2a <_printf_i+0x1ca>
 800af24:	0670      	lsls	r0, r6, #25
 800af26:	d5fb      	bpl.n	800af20 <_printf_i+0x1c0>
 800af28:	8019      	strh	r1, [r3, #0]
 800af2a:	2300      	movs	r3, #0
 800af2c:	6123      	str	r3, [r4, #16]
 800af2e:	4615      	mov	r5, r2
 800af30:	e7bc      	b.n	800aeac <_printf_i+0x14c>
 800af32:	682b      	ldr	r3, [r5, #0]
 800af34:	1d1a      	adds	r2, r3, #4
 800af36:	602a      	str	r2, [r5, #0]
 800af38:	681d      	ldr	r5, [r3, #0]
 800af3a:	6862      	ldr	r2, [r4, #4]
 800af3c:	2100      	movs	r1, #0
 800af3e:	4628      	mov	r0, r5
 800af40:	f7f5 f94e 	bl	80001e0 <memchr>
 800af44:	b108      	cbz	r0, 800af4a <_printf_i+0x1ea>
 800af46:	1b40      	subs	r0, r0, r5
 800af48:	6060      	str	r0, [r4, #4]
 800af4a:	6863      	ldr	r3, [r4, #4]
 800af4c:	6123      	str	r3, [r4, #16]
 800af4e:	2300      	movs	r3, #0
 800af50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af54:	e7aa      	b.n	800aeac <_printf_i+0x14c>
 800af56:	6923      	ldr	r3, [r4, #16]
 800af58:	462a      	mov	r2, r5
 800af5a:	4649      	mov	r1, r9
 800af5c:	4640      	mov	r0, r8
 800af5e:	47d0      	blx	sl
 800af60:	3001      	adds	r0, #1
 800af62:	d0ad      	beq.n	800aec0 <_printf_i+0x160>
 800af64:	6823      	ldr	r3, [r4, #0]
 800af66:	079b      	lsls	r3, r3, #30
 800af68:	d413      	bmi.n	800af92 <_printf_i+0x232>
 800af6a:	68e0      	ldr	r0, [r4, #12]
 800af6c:	9b03      	ldr	r3, [sp, #12]
 800af6e:	4298      	cmp	r0, r3
 800af70:	bfb8      	it	lt
 800af72:	4618      	movlt	r0, r3
 800af74:	e7a6      	b.n	800aec4 <_printf_i+0x164>
 800af76:	2301      	movs	r3, #1
 800af78:	4632      	mov	r2, r6
 800af7a:	4649      	mov	r1, r9
 800af7c:	4640      	mov	r0, r8
 800af7e:	47d0      	blx	sl
 800af80:	3001      	adds	r0, #1
 800af82:	d09d      	beq.n	800aec0 <_printf_i+0x160>
 800af84:	3501      	adds	r5, #1
 800af86:	68e3      	ldr	r3, [r4, #12]
 800af88:	9903      	ldr	r1, [sp, #12]
 800af8a:	1a5b      	subs	r3, r3, r1
 800af8c:	42ab      	cmp	r3, r5
 800af8e:	dcf2      	bgt.n	800af76 <_printf_i+0x216>
 800af90:	e7eb      	b.n	800af6a <_printf_i+0x20a>
 800af92:	2500      	movs	r5, #0
 800af94:	f104 0619 	add.w	r6, r4, #25
 800af98:	e7f5      	b.n	800af86 <_printf_i+0x226>
 800af9a:	bf00      	nop
 800af9c:	08010e6f 	.word	0x08010e6f
 800afa0:	08010e80 	.word	0x08010e80

0800afa4 <std>:
 800afa4:	2300      	movs	r3, #0
 800afa6:	b510      	push	{r4, lr}
 800afa8:	4604      	mov	r4, r0
 800afaa:	e9c0 3300 	strd	r3, r3, [r0]
 800afae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afb2:	6083      	str	r3, [r0, #8]
 800afb4:	8181      	strh	r1, [r0, #12]
 800afb6:	6643      	str	r3, [r0, #100]	; 0x64
 800afb8:	81c2      	strh	r2, [r0, #14]
 800afba:	6183      	str	r3, [r0, #24]
 800afbc:	4619      	mov	r1, r3
 800afbe:	2208      	movs	r2, #8
 800afc0:	305c      	adds	r0, #92	; 0x5c
 800afc2:	f000 f902 	bl	800b1ca <memset>
 800afc6:	4b05      	ldr	r3, [pc, #20]	; (800afdc <std+0x38>)
 800afc8:	6263      	str	r3, [r4, #36]	; 0x24
 800afca:	4b05      	ldr	r3, [pc, #20]	; (800afe0 <std+0x3c>)
 800afcc:	62a3      	str	r3, [r4, #40]	; 0x28
 800afce:	4b05      	ldr	r3, [pc, #20]	; (800afe4 <std+0x40>)
 800afd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afd2:	4b05      	ldr	r3, [pc, #20]	; (800afe8 <std+0x44>)
 800afd4:	6224      	str	r4, [r4, #32]
 800afd6:	6323      	str	r3, [r4, #48]	; 0x30
 800afd8:	bd10      	pop	{r4, pc}
 800afda:	bf00      	nop
 800afdc:	0800b145 	.word	0x0800b145
 800afe0:	0800b167 	.word	0x0800b167
 800afe4:	0800b19f 	.word	0x0800b19f
 800afe8:	0800b1c3 	.word	0x0800b1c3

0800afec <stdio_exit_handler>:
 800afec:	4a02      	ldr	r2, [pc, #8]	; (800aff8 <stdio_exit_handler+0xc>)
 800afee:	4903      	ldr	r1, [pc, #12]	; (800affc <stdio_exit_handler+0x10>)
 800aff0:	4803      	ldr	r0, [pc, #12]	; (800b000 <stdio_exit_handler+0x14>)
 800aff2:	f000 b869 	b.w	800b0c8 <_fwalk_sglue>
 800aff6:	bf00      	nop
 800aff8:	20001274 	.word	0x20001274
 800affc:	0800cc71 	.word	0x0800cc71
 800b000:	20001280 	.word	0x20001280

0800b004 <cleanup_stdio>:
 800b004:	6841      	ldr	r1, [r0, #4]
 800b006:	4b0c      	ldr	r3, [pc, #48]	; (800b038 <cleanup_stdio+0x34>)
 800b008:	4299      	cmp	r1, r3
 800b00a:	b510      	push	{r4, lr}
 800b00c:	4604      	mov	r4, r0
 800b00e:	d001      	beq.n	800b014 <cleanup_stdio+0x10>
 800b010:	f001 fe2e 	bl	800cc70 <_fflush_r>
 800b014:	68a1      	ldr	r1, [r4, #8]
 800b016:	4b09      	ldr	r3, [pc, #36]	; (800b03c <cleanup_stdio+0x38>)
 800b018:	4299      	cmp	r1, r3
 800b01a:	d002      	beq.n	800b022 <cleanup_stdio+0x1e>
 800b01c:	4620      	mov	r0, r4
 800b01e:	f001 fe27 	bl	800cc70 <_fflush_r>
 800b022:	68e1      	ldr	r1, [r4, #12]
 800b024:	4b06      	ldr	r3, [pc, #24]	; (800b040 <cleanup_stdio+0x3c>)
 800b026:	4299      	cmp	r1, r3
 800b028:	d004      	beq.n	800b034 <cleanup_stdio+0x30>
 800b02a:	4620      	mov	r0, r4
 800b02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b030:	f001 be1e 	b.w	800cc70 <_fflush_r>
 800b034:	bd10      	pop	{r4, pc}
 800b036:	bf00      	nop
 800b038:	200015f8 	.word	0x200015f8
 800b03c:	20001660 	.word	0x20001660
 800b040:	200016c8 	.word	0x200016c8

0800b044 <global_stdio_init.part.0>:
 800b044:	b510      	push	{r4, lr}
 800b046:	4b0b      	ldr	r3, [pc, #44]	; (800b074 <global_stdio_init.part.0+0x30>)
 800b048:	4c0b      	ldr	r4, [pc, #44]	; (800b078 <global_stdio_init.part.0+0x34>)
 800b04a:	4a0c      	ldr	r2, [pc, #48]	; (800b07c <global_stdio_init.part.0+0x38>)
 800b04c:	601a      	str	r2, [r3, #0]
 800b04e:	4620      	mov	r0, r4
 800b050:	2200      	movs	r2, #0
 800b052:	2104      	movs	r1, #4
 800b054:	f7ff ffa6 	bl	800afa4 <std>
 800b058:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b05c:	2201      	movs	r2, #1
 800b05e:	2109      	movs	r1, #9
 800b060:	f7ff ffa0 	bl	800afa4 <std>
 800b064:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b068:	2202      	movs	r2, #2
 800b06a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b06e:	2112      	movs	r1, #18
 800b070:	f7ff bf98 	b.w	800afa4 <std>
 800b074:	20001730 	.word	0x20001730
 800b078:	200015f8 	.word	0x200015f8
 800b07c:	0800afed 	.word	0x0800afed

0800b080 <__sfp_lock_acquire>:
 800b080:	4801      	ldr	r0, [pc, #4]	; (800b088 <__sfp_lock_acquire+0x8>)
 800b082:	f000 b99d 	b.w	800b3c0 <__retarget_lock_acquire_recursive>
 800b086:	bf00      	nop
 800b088:	20001739 	.word	0x20001739

0800b08c <__sfp_lock_release>:
 800b08c:	4801      	ldr	r0, [pc, #4]	; (800b094 <__sfp_lock_release+0x8>)
 800b08e:	f000 b998 	b.w	800b3c2 <__retarget_lock_release_recursive>
 800b092:	bf00      	nop
 800b094:	20001739 	.word	0x20001739

0800b098 <__sinit>:
 800b098:	b510      	push	{r4, lr}
 800b09a:	4604      	mov	r4, r0
 800b09c:	f7ff fff0 	bl	800b080 <__sfp_lock_acquire>
 800b0a0:	6a23      	ldr	r3, [r4, #32]
 800b0a2:	b11b      	cbz	r3, 800b0ac <__sinit+0x14>
 800b0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0a8:	f7ff bff0 	b.w	800b08c <__sfp_lock_release>
 800b0ac:	4b04      	ldr	r3, [pc, #16]	; (800b0c0 <__sinit+0x28>)
 800b0ae:	6223      	str	r3, [r4, #32]
 800b0b0:	4b04      	ldr	r3, [pc, #16]	; (800b0c4 <__sinit+0x2c>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d1f5      	bne.n	800b0a4 <__sinit+0xc>
 800b0b8:	f7ff ffc4 	bl	800b044 <global_stdio_init.part.0>
 800b0bc:	e7f2      	b.n	800b0a4 <__sinit+0xc>
 800b0be:	bf00      	nop
 800b0c0:	0800b005 	.word	0x0800b005
 800b0c4:	20001730 	.word	0x20001730

0800b0c8 <_fwalk_sglue>:
 800b0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0cc:	4607      	mov	r7, r0
 800b0ce:	4688      	mov	r8, r1
 800b0d0:	4614      	mov	r4, r2
 800b0d2:	2600      	movs	r6, #0
 800b0d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0d8:	f1b9 0901 	subs.w	r9, r9, #1
 800b0dc:	d505      	bpl.n	800b0ea <_fwalk_sglue+0x22>
 800b0de:	6824      	ldr	r4, [r4, #0]
 800b0e0:	2c00      	cmp	r4, #0
 800b0e2:	d1f7      	bne.n	800b0d4 <_fwalk_sglue+0xc>
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0ea:	89ab      	ldrh	r3, [r5, #12]
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d907      	bls.n	800b100 <_fwalk_sglue+0x38>
 800b0f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	d003      	beq.n	800b100 <_fwalk_sglue+0x38>
 800b0f8:	4629      	mov	r1, r5
 800b0fa:	4638      	mov	r0, r7
 800b0fc:	47c0      	blx	r8
 800b0fe:	4306      	orrs	r6, r0
 800b100:	3568      	adds	r5, #104	; 0x68
 800b102:	e7e9      	b.n	800b0d8 <_fwalk_sglue+0x10>

0800b104 <siprintf>:
 800b104:	b40e      	push	{r1, r2, r3}
 800b106:	b500      	push	{lr}
 800b108:	b09c      	sub	sp, #112	; 0x70
 800b10a:	ab1d      	add	r3, sp, #116	; 0x74
 800b10c:	9002      	str	r0, [sp, #8]
 800b10e:	9006      	str	r0, [sp, #24]
 800b110:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b114:	4809      	ldr	r0, [pc, #36]	; (800b13c <siprintf+0x38>)
 800b116:	9107      	str	r1, [sp, #28]
 800b118:	9104      	str	r1, [sp, #16]
 800b11a:	4909      	ldr	r1, [pc, #36]	; (800b140 <siprintf+0x3c>)
 800b11c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b120:	9105      	str	r1, [sp, #20]
 800b122:	6800      	ldr	r0, [r0, #0]
 800b124:	9301      	str	r3, [sp, #4]
 800b126:	a902      	add	r1, sp, #8
 800b128:	f001 fc1e 	bl	800c968 <_svfiprintf_r>
 800b12c:	9b02      	ldr	r3, [sp, #8]
 800b12e:	2200      	movs	r2, #0
 800b130:	701a      	strb	r2, [r3, #0]
 800b132:	b01c      	add	sp, #112	; 0x70
 800b134:	f85d eb04 	ldr.w	lr, [sp], #4
 800b138:	b003      	add	sp, #12
 800b13a:	4770      	bx	lr
 800b13c:	200012cc 	.word	0x200012cc
 800b140:	ffff0208 	.word	0xffff0208

0800b144 <__sread>:
 800b144:	b510      	push	{r4, lr}
 800b146:	460c      	mov	r4, r1
 800b148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b14c:	f000 f8da 	bl	800b304 <_read_r>
 800b150:	2800      	cmp	r0, #0
 800b152:	bfab      	itete	ge
 800b154:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b156:	89a3      	ldrhlt	r3, [r4, #12]
 800b158:	181b      	addge	r3, r3, r0
 800b15a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b15e:	bfac      	ite	ge
 800b160:	6563      	strge	r3, [r4, #84]	; 0x54
 800b162:	81a3      	strhlt	r3, [r4, #12]
 800b164:	bd10      	pop	{r4, pc}

0800b166 <__swrite>:
 800b166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b16a:	461f      	mov	r7, r3
 800b16c:	898b      	ldrh	r3, [r1, #12]
 800b16e:	05db      	lsls	r3, r3, #23
 800b170:	4605      	mov	r5, r0
 800b172:	460c      	mov	r4, r1
 800b174:	4616      	mov	r6, r2
 800b176:	d505      	bpl.n	800b184 <__swrite+0x1e>
 800b178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b17c:	2302      	movs	r3, #2
 800b17e:	2200      	movs	r2, #0
 800b180:	f000 f8ae 	bl	800b2e0 <_lseek_r>
 800b184:	89a3      	ldrh	r3, [r4, #12]
 800b186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b18a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b18e:	81a3      	strh	r3, [r4, #12]
 800b190:	4632      	mov	r2, r6
 800b192:	463b      	mov	r3, r7
 800b194:	4628      	mov	r0, r5
 800b196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b19a:	f000 b8d5 	b.w	800b348 <_write_r>

0800b19e <__sseek>:
 800b19e:	b510      	push	{r4, lr}
 800b1a0:	460c      	mov	r4, r1
 800b1a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1a6:	f000 f89b 	bl	800b2e0 <_lseek_r>
 800b1aa:	1c43      	adds	r3, r0, #1
 800b1ac:	89a3      	ldrh	r3, [r4, #12]
 800b1ae:	bf15      	itete	ne
 800b1b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b1b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b1b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b1ba:	81a3      	strheq	r3, [r4, #12]
 800b1bc:	bf18      	it	ne
 800b1be:	81a3      	strhne	r3, [r4, #12]
 800b1c0:	bd10      	pop	{r4, pc}

0800b1c2 <__sclose>:
 800b1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1c6:	f000 b87b 	b.w	800b2c0 <_close_r>

0800b1ca <memset>:
 800b1ca:	4402      	add	r2, r0
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d100      	bne.n	800b1d4 <memset+0xa>
 800b1d2:	4770      	bx	lr
 800b1d4:	f803 1b01 	strb.w	r1, [r3], #1
 800b1d8:	e7f9      	b.n	800b1ce <memset+0x4>

0800b1da <strncmp>:
 800b1da:	b510      	push	{r4, lr}
 800b1dc:	b16a      	cbz	r2, 800b1fa <strncmp+0x20>
 800b1de:	3901      	subs	r1, #1
 800b1e0:	1884      	adds	r4, r0, r2
 800b1e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1e6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d103      	bne.n	800b1f6 <strncmp+0x1c>
 800b1ee:	42a0      	cmp	r0, r4
 800b1f0:	d001      	beq.n	800b1f6 <strncmp+0x1c>
 800b1f2:	2a00      	cmp	r2, #0
 800b1f4:	d1f5      	bne.n	800b1e2 <strncmp+0x8>
 800b1f6:	1ad0      	subs	r0, r2, r3
 800b1f8:	bd10      	pop	{r4, pc}
 800b1fa:	4610      	mov	r0, r2
 800b1fc:	e7fc      	b.n	800b1f8 <strncmp+0x1e>
	...

0800b200 <strtok>:
 800b200:	4b16      	ldr	r3, [pc, #88]	; (800b25c <strtok+0x5c>)
 800b202:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b204:	681e      	ldr	r6, [r3, #0]
 800b206:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800b208:	4605      	mov	r5, r0
 800b20a:	b9fc      	cbnz	r4, 800b24c <strtok+0x4c>
 800b20c:	2050      	movs	r0, #80	; 0x50
 800b20e:	9101      	str	r1, [sp, #4]
 800b210:	f7ff f91a 	bl	800a448 <malloc>
 800b214:	9901      	ldr	r1, [sp, #4]
 800b216:	6470      	str	r0, [r6, #68]	; 0x44
 800b218:	4602      	mov	r2, r0
 800b21a:	b920      	cbnz	r0, 800b226 <strtok+0x26>
 800b21c:	4b10      	ldr	r3, [pc, #64]	; (800b260 <strtok+0x60>)
 800b21e:	4811      	ldr	r0, [pc, #68]	; (800b264 <strtok+0x64>)
 800b220:	215b      	movs	r1, #91	; 0x5b
 800b222:	f000 f8e5 	bl	800b3f0 <__assert_func>
 800b226:	e9c0 4400 	strd	r4, r4, [r0]
 800b22a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b22e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b232:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b236:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b23a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b23e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b242:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b246:	6184      	str	r4, [r0, #24]
 800b248:	7704      	strb	r4, [r0, #28]
 800b24a:	6244      	str	r4, [r0, #36]	; 0x24
 800b24c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800b24e:	2301      	movs	r3, #1
 800b250:	4628      	mov	r0, r5
 800b252:	b002      	add	sp, #8
 800b254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b258:	f000 b806 	b.w	800b268 <__strtok_r>
 800b25c:	200012cc 	.word	0x200012cc
 800b260:	08010e91 	.word	0x08010e91
 800b264:	08010ea8 	.word	0x08010ea8

0800b268 <__strtok_r>:
 800b268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b26a:	b908      	cbnz	r0, 800b270 <__strtok_r+0x8>
 800b26c:	6810      	ldr	r0, [r2, #0]
 800b26e:	b188      	cbz	r0, 800b294 <__strtok_r+0x2c>
 800b270:	4604      	mov	r4, r0
 800b272:	4620      	mov	r0, r4
 800b274:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b278:	460f      	mov	r7, r1
 800b27a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b27e:	b91e      	cbnz	r6, 800b288 <__strtok_r+0x20>
 800b280:	b965      	cbnz	r5, 800b29c <__strtok_r+0x34>
 800b282:	6015      	str	r5, [r2, #0]
 800b284:	4628      	mov	r0, r5
 800b286:	e005      	b.n	800b294 <__strtok_r+0x2c>
 800b288:	42b5      	cmp	r5, r6
 800b28a:	d1f6      	bne.n	800b27a <__strtok_r+0x12>
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1f0      	bne.n	800b272 <__strtok_r+0xa>
 800b290:	6014      	str	r4, [r2, #0]
 800b292:	7003      	strb	r3, [r0, #0]
 800b294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b296:	461c      	mov	r4, r3
 800b298:	e00c      	b.n	800b2b4 <__strtok_r+0x4c>
 800b29a:	b915      	cbnz	r5, 800b2a2 <__strtok_r+0x3a>
 800b29c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b2a0:	460e      	mov	r6, r1
 800b2a2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b2a6:	42ab      	cmp	r3, r5
 800b2a8:	d1f7      	bne.n	800b29a <__strtok_r+0x32>
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d0f3      	beq.n	800b296 <__strtok_r+0x2e>
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b2b4:	6014      	str	r4, [r2, #0]
 800b2b6:	e7ed      	b.n	800b294 <__strtok_r+0x2c>

0800b2b8 <_localeconv_r>:
 800b2b8:	4800      	ldr	r0, [pc, #0]	; (800b2bc <_localeconv_r+0x4>)
 800b2ba:	4770      	bx	lr
 800b2bc:	200013c0 	.word	0x200013c0

0800b2c0 <_close_r>:
 800b2c0:	b538      	push	{r3, r4, r5, lr}
 800b2c2:	4d06      	ldr	r5, [pc, #24]	; (800b2dc <_close_r+0x1c>)
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	4608      	mov	r0, r1
 800b2ca:	602b      	str	r3, [r5, #0]
 800b2cc:	f7fb fa19 	bl	8006702 <_close>
 800b2d0:	1c43      	adds	r3, r0, #1
 800b2d2:	d102      	bne.n	800b2da <_close_r+0x1a>
 800b2d4:	682b      	ldr	r3, [r5, #0]
 800b2d6:	b103      	cbz	r3, 800b2da <_close_r+0x1a>
 800b2d8:	6023      	str	r3, [r4, #0]
 800b2da:	bd38      	pop	{r3, r4, r5, pc}
 800b2dc:	20001734 	.word	0x20001734

0800b2e0 <_lseek_r>:
 800b2e0:	b538      	push	{r3, r4, r5, lr}
 800b2e2:	4d07      	ldr	r5, [pc, #28]	; (800b300 <_lseek_r+0x20>)
 800b2e4:	4604      	mov	r4, r0
 800b2e6:	4608      	mov	r0, r1
 800b2e8:	4611      	mov	r1, r2
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	602a      	str	r2, [r5, #0]
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	f7fb fa2e 	bl	8006750 <_lseek>
 800b2f4:	1c43      	adds	r3, r0, #1
 800b2f6:	d102      	bne.n	800b2fe <_lseek_r+0x1e>
 800b2f8:	682b      	ldr	r3, [r5, #0]
 800b2fa:	b103      	cbz	r3, 800b2fe <_lseek_r+0x1e>
 800b2fc:	6023      	str	r3, [r4, #0]
 800b2fe:	bd38      	pop	{r3, r4, r5, pc}
 800b300:	20001734 	.word	0x20001734

0800b304 <_read_r>:
 800b304:	b538      	push	{r3, r4, r5, lr}
 800b306:	4d07      	ldr	r5, [pc, #28]	; (800b324 <_read_r+0x20>)
 800b308:	4604      	mov	r4, r0
 800b30a:	4608      	mov	r0, r1
 800b30c:	4611      	mov	r1, r2
 800b30e:	2200      	movs	r2, #0
 800b310:	602a      	str	r2, [r5, #0]
 800b312:	461a      	mov	r2, r3
 800b314:	f7fb f9bc 	bl	8006690 <_read>
 800b318:	1c43      	adds	r3, r0, #1
 800b31a:	d102      	bne.n	800b322 <_read_r+0x1e>
 800b31c:	682b      	ldr	r3, [r5, #0]
 800b31e:	b103      	cbz	r3, 800b322 <_read_r+0x1e>
 800b320:	6023      	str	r3, [r4, #0]
 800b322:	bd38      	pop	{r3, r4, r5, pc}
 800b324:	20001734 	.word	0x20001734

0800b328 <_sbrk_r>:
 800b328:	b538      	push	{r3, r4, r5, lr}
 800b32a:	4d06      	ldr	r5, [pc, #24]	; (800b344 <_sbrk_r+0x1c>)
 800b32c:	2300      	movs	r3, #0
 800b32e:	4604      	mov	r4, r0
 800b330:	4608      	mov	r0, r1
 800b332:	602b      	str	r3, [r5, #0]
 800b334:	f7fb fa1a 	bl	800676c <_sbrk>
 800b338:	1c43      	adds	r3, r0, #1
 800b33a:	d102      	bne.n	800b342 <_sbrk_r+0x1a>
 800b33c:	682b      	ldr	r3, [r5, #0]
 800b33e:	b103      	cbz	r3, 800b342 <_sbrk_r+0x1a>
 800b340:	6023      	str	r3, [r4, #0]
 800b342:	bd38      	pop	{r3, r4, r5, pc}
 800b344:	20001734 	.word	0x20001734

0800b348 <_write_r>:
 800b348:	b538      	push	{r3, r4, r5, lr}
 800b34a:	4d07      	ldr	r5, [pc, #28]	; (800b368 <_write_r+0x20>)
 800b34c:	4604      	mov	r4, r0
 800b34e:	4608      	mov	r0, r1
 800b350:	4611      	mov	r1, r2
 800b352:	2200      	movs	r2, #0
 800b354:	602a      	str	r2, [r5, #0]
 800b356:	461a      	mov	r2, r3
 800b358:	f7fb f9b7 	bl	80066ca <_write>
 800b35c:	1c43      	adds	r3, r0, #1
 800b35e:	d102      	bne.n	800b366 <_write_r+0x1e>
 800b360:	682b      	ldr	r3, [r5, #0]
 800b362:	b103      	cbz	r3, 800b366 <_write_r+0x1e>
 800b364:	6023      	str	r3, [r4, #0]
 800b366:	bd38      	pop	{r3, r4, r5, pc}
 800b368:	20001734 	.word	0x20001734

0800b36c <__errno>:
 800b36c:	4b01      	ldr	r3, [pc, #4]	; (800b374 <__errno+0x8>)
 800b36e:	6818      	ldr	r0, [r3, #0]
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	200012cc 	.word	0x200012cc

0800b378 <__libc_init_array>:
 800b378:	b570      	push	{r4, r5, r6, lr}
 800b37a:	4d0d      	ldr	r5, [pc, #52]	; (800b3b0 <__libc_init_array+0x38>)
 800b37c:	4c0d      	ldr	r4, [pc, #52]	; (800b3b4 <__libc_init_array+0x3c>)
 800b37e:	1b64      	subs	r4, r4, r5
 800b380:	10a4      	asrs	r4, r4, #2
 800b382:	2600      	movs	r6, #0
 800b384:	42a6      	cmp	r6, r4
 800b386:	d109      	bne.n	800b39c <__libc_init_array+0x24>
 800b388:	4d0b      	ldr	r5, [pc, #44]	; (800b3b8 <__libc_init_array+0x40>)
 800b38a:	4c0c      	ldr	r4, [pc, #48]	; (800b3bc <__libc_init_array+0x44>)
 800b38c:	f004 fe1c 	bl	800ffc8 <_init>
 800b390:	1b64      	subs	r4, r4, r5
 800b392:	10a4      	asrs	r4, r4, #2
 800b394:	2600      	movs	r6, #0
 800b396:	42a6      	cmp	r6, r4
 800b398:	d105      	bne.n	800b3a6 <__libc_init_array+0x2e>
 800b39a:	bd70      	pop	{r4, r5, r6, pc}
 800b39c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3a0:	4798      	blx	r3
 800b3a2:	3601      	adds	r6, #1
 800b3a4:	e7ee      	b.n	800b384 <__libc_init_array+0xc>
 800b3a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3aa:	4798      	blx	r3
 800b3ac:	3601      	adds	r6, #1
 800b3ae:	e7f2      	b.n	800b396 <__libc_init_array+0x1e>
 800b3b0:	080113a8 	.word	0x080113a8
 800b3b4:	080113a8 	.word	0x080113a8
 800b3b8:	080113a8 	.word	0x080113a8
 800b3bc:	080113ac 	.word	0x080113ac

0800b3c0 <__retarget_lock_acquire_recursive>:
 800b3c0:	4770      	bx	lr

0800b3c2 <__retarget_lock_release_recursive>:
 800b3c2:	4770      	bx	lr

0800b3c4 <strcpy>:
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3ca:	f803 2b01 	strb.w	r2, [r3], #1
 800b3ce:	2a00      	cmp	r2, #0
 800b3d0:	d1f9      	bne.n	800b3c6 <strcpy+0x2>
 800b3d2:	4770      	bx	lr

0800b3d4 <memcpy>:
 800b3d4:	440a      	add	r2, r1
 800b3d6:	4291      	cmp	r1, r2
 800b3d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3dc:	d100      	bne.n	800b3e0 <memcpy+0xc>
 800b3de:	4770      	bx	lr
 800b3e0:	b510      	push	{r4, lr}
 800b3e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3ea:	4291      	cmp	r1, r2
 800b3ec:	d1f9      	bne.n	800b3e2 <memcpy+0xe>
 800b3ee:	bd10      	pop	{r4, pc}

0800b3f0 <__assert_func>:
 800b3f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3f2:	4614      	mov	r4, r2
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	4b09      	ldr	r3, [pc, #36]	; (800b41c <__assert_func+0x2c>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4605      	mov	r5, r0
 800b3fc:	68d8      	ldr	r0, [r3, #12]
 800b3fe:	b14c      	cbz	r4, 800b414 <__assert_func+0x24>
 800b400:	4b07      	ldr	r3, [pc, #28]	; (800b420 <__assert_func+0x30>)
 800b402:	9100      	str	r1, [sp, #0]
 800b404:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b408:	4906      	ldr	r1, [pc, #24]	; (800b424 <__assert_func+0x34>)
 800b40a:	462b      	mov	r3, r5
 800b40c:	f001 fc58 	bl	800ccc0 <fiprintf>
 800b410:	f001 fc82 	bl	800cd18 <abort>
 800b414:	4b04      	ldr	r3, [pc, #16]	; (800b428 <__assert_func+0x38>)
 800b416:	461c      	mov	r4, r3
 800b418:	e7f3      	b.n	800b402 <__assert_func+0x12>
 800b41a:	bf00      	nop
 800b41c:	200012cc 	.word	0x200012cc
 800b420:	08010f02 	.word	0x08010f02
 800b424:	08010f0f 	.word	0x08010f0f
 800b428:	08010f3d 	.word	0x08010f3d

0800b42c <quorem>:
 800b42c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b430:	6903      	ldr	r3, [r0, #16]
 800b432:	690c      	ldr	r4, [r1, #16]
 800b434:	42a3      	cmp	r3, r4
 800b436:	4607      	mov	r7, r0
 800b438:	db7e      	blt.n	800b538 <quorem+0x10c>
 800b43a:	3c01      	subs	r4, #1
 800b43c:	f101 0814 	add.w	r8, r1, #20
 800b440:	f100 0514 	add.w	r5, r0, #20
 800b444:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b448:	9301      	str	r3, [sp, #4]
 800b44a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b44e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b452:	3301      	adds	r3, #1
 800b454:	429a      	cmp	r2, r3
 800b456:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b45a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b45e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b462:	d331      	bcc.n	800b4c8 <quorem+0x9c>
 800b464:	f04f 0e00 	mov.w	lr, #0
 800b468:	4640      	mov	r0, r8
 800b46a:	46ac      	mov	ip, r5
 800b46c:	46f2      	mov	sl, lr
 800b46e:	f850 2b04 	ldr.w	r2, [r0], #4
 800b472:	b293      	uxth	r3, r2
 800b474:	fb06 e303 	mla	r3, r6, r3, lr
 800b478:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b47c:	0c1a      	lsrs	r2, r3, #16
 800b47e:	b29b      	uxth	r3, r3
 800b480:	ebaa 0303 	sub.w	r3, sl, r3
 800b484:	f8dc a000 	ldr.w	sl, [ip]
 800b488:	fa13 f38a 	uxtah	r3, r3, sl
 800b48c:	fb06 220e 	mla	r2, r6, lr, r2
 800b490:	9300      	str	r3, [sp, #0]
 800b492:	9b00      	ldr	r3, [sp, #0]
 800b494:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b498:	b292      	uxth	r2, r2
 800b49a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b49e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4a2:	f8bd 3000 	ldrh.w	r3, [sp]
 800b4a6:	4581      	cmp	r9, r0
 800b4a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4ac:	f84c 3b04 	str.w	r3, [ip], #4
 800b4b0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b4b4:	d2db      	bcs.n	800b46e <quorem+0x42>
 800b4b6:	f855 300b 	ldr.w	r3, [r5, fp]
 800b4ba:	b92b      	cbnz	r3, 800b4c8 <quorem+0x9c>
 800b4bc:	9b01      	ldr	r3, [sp, #4]
 800b4be:	3b04      	subs	r3, #4
 800b4c0:	429d      	cmp	r5, r3
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	d32c      	bcc.n	800b520 <quorem+0xf4>
 800b4c6:	613c      	str	r4, [r7, #16]
 800b4c8:	4638      	mov	r0, r7
 800b4ca:	f001 f8f3 	bl	800c6b4 <__mcmp>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	db22      	blt.n	800b518 <quorem+0xec>
 800b4d2:	3601      	adds	r6, #1
 800b4d4:	4629      	mov	r1, r5
 800b4d6:	2000      	movs	r0, #0
 800b4d8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b4dc:	f8d1 c000 	ldr.w	ip, [r1]
 800b4e0:	b293      	uxth	r3, r2
 800b4e2:	1ac3      	subs	r3, r0, r3
 800b4e4:	0c12      	lsrs	r2, r2, #16
 800b4e6:	fa13 f38c 	uxtah	r3, r3, ip
 800b4ea:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b4ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4f8:	45c1      	cmp	r9, r8
 800b4fa:	f841 3b04 	str.w	r3, [r1], #4
 800b4fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b502:	d2e9      	bcs.n	800b4d8 <quorem+0xac>
 800b504:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b508:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b50c:	b922      	cbnz	r2, 800b518 <quorem+0xec>
 800b50e:	3b04      	subs	r3, #4
 800b510:	429d      	cmp	r5, r3
 800b512:	461a      	mov	r2, r3
 800b514:	d30a      	bcc.n	800b52c <quorem+0x100>
 800b516:	613c      	str	r4, [r7, #16]
 800b518:	4630      	mov	r0, r6
 800b51a:	b003      	add	sp, #12
 800b51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b520:	6812      	ldr	r2, [r2, #0]
 800b522:	3b04      	subs	r3, #4
 800b524:	2a00      	cmp	r2, #0
 800b526:	d1ce      	bne.n	800b4c6 <quorem+0x9a>
 800b528:	3c01      	subs	r4, #1
 800b52a:	e7c9      	b.n	800b4c0 <quorem+0x94>
 800b52c:	6812      	ldr	r2, [r2, #0]
 800b52e:	3b04      	subs	r3, #4
 800b530:	2a00      	cmp	r2, #0
 800b532:	d1f0      	bne.n	800b516 <quorem+0xea>
 800b534:	3c01      	subs	r4, #1
 800b536:	e7eb      	b.n	800b510 <quorem+0xe4>
 800b538:	2000      	movs	r0, #0
 800b53a:	e7ee      	b.n	800b51a <quorem+0xee>
 800b53c:	0000      	movs	r0, r0
	...

0800b540 <_dtoa_r>:
 800b540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b544:	ed2d 8b04 	vpush	{d8-d9}
 800b548:	69c5      	ldr	r5, [r0, #28]
 800b54a:	b093      	sub	sp, #76	; 0x4c
 800b54c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b550:	ec57 6b10 	vmov	r6, r7, d0
 800b554:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b558:	9107      	str	r1, [sp, #28]
 800b55a:	4604      	mov	r4, r0
 800b55c:	920a      	str	r2, [sp, #40]	; 0x28
 800b55e:	930d      	str	r3, [sp, #52]	; 0x34
 800b560:	b975      	cbnz	r5, 800b580 <_dtoa_r+0x40>
 800b562:	2010      	movs	r0, #16
 800b564:	f7fe ff70 	bl	800a448 <malloc>
 800b568:	4602      	mov	r2, r0
 800b56a:	61e0      	str	r0, [r4, #28]
 800b56c:	b920      	cbnz	r0, 800b578 <_dtoa_r+0x38>
 800b56e:	4bae      	ldr	r3, [pc, #696]	; (800b828 <_dtoa_r+0x2e8>)
 800b570:	21ef      	movs	r1, #239	; 0xef
 800b572:	48ae      	ldr	r0, [pc, #696]	; (800b82c <_dtoa_r+0x2ec>)
 800b574:	f7ff ff3c 	bl	800b3f0 <__assert_func>
 800b578:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b57c:	6005      	str	r5, [r0, #0]
 800b57e:	60c5      	str	r5, [r0, #12]
 800b580:	69e3      	ldr	r3, [r4, #28]
 800b582:	6819      	ldr	r1, [r3, #0]
 800b584:	b151      	cbz	r1, 800b59c <_dtoa_r+0x5c>
 800b586:	685a      	ldr	r2, [r3, #4]
 800b588:	604a      	str	r2, [r1, #4]
 800b58a:	2301      	movs	r3, #1
 800b58c:	4093      	lsls	r3, r2
 800b58e:	608b      	str	r3, [r1, #8]
 800b590:	4620      	mov	r0, r4
 800b592:	f000 fe53 	bl	800c23c <_Bfree>
 800b596:	69e3      	ldr	r3, [r4, #28]
 800b598:	2200      	movs	r2, #0
 800b59a:	601a      	str	r2, [r3, #0]
 800b59c:	1e3b      	subs	r3, r7, #0
 800b59e:	bfbb      	ittet	lt
 800b5a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b5a4:	9303      	strlt	r3, [sp, #12]
 800b5a6:	2300      	movge	r3, #0
 800b5a8:	2201      	movlt	r2, #1
 800b5aa:	bfac      	ite	ge
 800b5ac:	f8c8 3000 	strge.w	r3, [r8]
 800b5b0:	f8c8 2000 	strlt.w	r2, [r8]
 800b5b4:	4b9e      	ldr	r3, [pc, #632]	; (800b830 <_dtoa_r+0x2f0>)
 800b5b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b5ba:	ea33 0308 	bics.w	r3, r3, r8
 800b5be:	d11b      	bne.n	800b5f8 <_dtoa_r+0xb8>
 800b5c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800b5c6:	6013      	str	r3, [r2, #0]
 800b5c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b5cc:	4333      	orrs	r3, r6
 800b5ce:	f000 8593 	beq.w	800c0f8 <_dtoa_r+0xbb8>
 800b5d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5d4:	b963      	cbnz	r3, 800b5f0 <_dtoa_r+0xb0>
 800b5d6:	4b97      	ldr	r3, [pc, #604]	; (800b834 <_dtoa_r+0x2f4>)
 800b5d8:	e027      	b.n	800b62a <_dtoa_r+0xea>
 800b5da:	4b97      	ldr	r3, [pc, #604]	; (800b838 <_dtoa_r+0x2f8>)
 800b5dc:	9300      	str	r3, [sp, #0]
 800b5de:	3308      	adds	r3, #8
 800b5e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b5e2:	6013      	str	r3, [r2, #0]
 800b5e4:	9800      	ldr	r0, [sp, #0]
 800b5e6:	b013      	add	sp, #76	; 0x4c
 800b5e8:	ecbd 8b04 	vpop	{d8-d9}
 800b5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f0:	4b90      	ldr	r3, [pc, #576]	; (800b834 <_dtoa_r+0x2f4>)
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	3303      	adds	r3, #3
 800b5f6:	e7f3      	b.n	800b5e0 <_dtoa_r+0xa0>
 800b5f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	ec51 0b17 	vmov	r0, r1, d7
 800b602:	eeb0 8a47 	vmov.f32	s16, s14
 800b606:	eef0 8a67 	vmov.f32	s17, s15
 800b60a:	2300      	movs	r3, #0
 800b60c:	f7f5 fa64 	bl	8000ad8 <__aeabi_dcmpeq>
 800b610:	4681      	mov	r9, r0
 800b612:	b160      	cbz	r0, 800b62e <_dtoa_r+0xee>
 800b614:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b616:	2301      	movs	r3, #1
 800b618:	6013      	str	r3, [r2, #0]
 800b61a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	f000 8568 	beq.w	800c0f2 <_dtoa_r+0xbb2>
 800b622:	4b86      	ldr	r3, [pc, #536]	; (800b83c <_dtoa_r+0x2fc>)
 800b624:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b626:	6013      	str	r3, [r2, #0]
 800b628:	3b01      	subs	r3, #1
 800b62a:	9300      	str	r3, [sp, #0]
 800b62c:	e7da      	b.n	800b5e4 <_dtoa_r+0xa4>
 800b62e:	aa10      	add	r2, sp, #64	; 0x40
 800b630:	a911      	add	r1, sp, #68	; 0x44
 800b632:	4620      	mov	r0, r4
 800b634:	eeb0 0a48 	vmov.f32	s0, s16
 800b638:	eef0 0a68 	vmov.f32	s1, s17
 800b63c:	f001 f8e0 	bl	800c800 <__d2b>
 800b640:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b644:	4682      	mov	sl, r0
 800b646:	2d00      	cmp	r5, #0
 800b648:	d07f      	beq.n	800b74a <_dtoa_r+0x20a>
 800b64a:	ee18 3a90 	vmov	r3, s17
 800b64e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b652:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b656:	ec51 0b18 	vmov	r0, r1, d8
 800b65a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b65e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b662:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b666:	4619      	mov	r1, r3
 800b668:	2200      	movs	r2, #0
 800b66a:	4b75      	ldr	r3, [pc, #468]	; (800b840 <_dtoa_r+0x300>)
 800b66c:	f7f4 fe14 	bl	8000298 <__aeabi_dsub>
 800b670:	a367      	add	r3, pc, #412	; (adr r3, 800b810 <_dtoa_r+0x2d0>)
 800b672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b676:	f7f4 ffc7 	bl	8000608 <__aeabi_dmul>
 800b67a:	a367      	add	r3, pc, #412	; (adr r3, 800b818 <_dtoa_r+0x2d8>)
 800b67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b680:	f7f4 fe0c 	bl	800029c <__adddf3>
 800b684:	4606      	mov	r6, r0
 800b686:	4628      	mov	r0, r5
 800b688:	460f      	mov	r7, r1
 800b68a:	f7f4 ff53 	bl	8000534 <__aeabi_i2d>
 800b68e:	a364      	add	r3, pc, #400	; (adr r3, 800b820 <_dtoa_r+0x2e0>)
 800b690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b694:	f7f4 ffb8 	bl	8000608 <__aeabi_dmul>
 800b698:	4602      	mov	r2, r0
 800b69a:	460b      	mov	r3, r1
 800b69c:	4630      	mov	r0, r6
 800b69e:	4639      	mov	r1, r7
 800b6a0:	f7f4 fdfc 	bl	800029c <__adddf3>
 800b6a4:	4606      	mov	r6, r0
 800b6a6:	460f      	mov	r7, r1
 800b6a8:	f7f5 fa5e 	bl	8000b68 <__aeabi_d2iz>
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	4683      	mov	fp, r0
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	4639      	mov	r1, r7
 800b6b6:	f7f5 fa19 	bl	8000aec <__aeabi_dcmplt>
 800b6ba:	b148      	cbz	r0, 800b6d0 <_dtoa_r+0x190>
 800b6bc:	4658      	mov	r0, fp
 800b6be:	f7f4 ff39 	bl	8000534 <__aeabi_i2d>
 800b6c2:	4632      	mov	r2, r6
 800b6c4:	463b      	mov	r3, r7
 800b6c6:	f7f5 fa07 	bl	8000ad8 <__aeabi_dcmpeq>
 800b6ca:	b908      	cbnz	r0, 800b6d0 <_dtoa_r+0x190>
 800b6cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b6d0:	f1bb 0f16 	cmp.w	fp, #22
 800b6d4:	d857      	bhi.n	800b786 <_dtoa_r+0x246>
 800b6d6:	4b5b      	ldr	r3, [pc, #364]	; (800b844 <_dtoa_r+0x304>)
 800b6d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e0:	ec51 0b18 	vmov	r0, r1, d8
 800b6e4:	f7f5 fa02 	bl	8000aec <__aeabi_dcmplt>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	d04e      	beq.n	800b78a <_dtoa_r+0x24a>
 800b6ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	930c      	str	r3, [sp, #48]	; 0x30
 800b6f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b6f6:	1b5b      	subs	r3, r3, r5
 800b6f8:	1e5a      	subs	r2, r3, #1
 800b6fa:	bf45      	ittet	mi
 800b6fc:	f1c3 0301 	rsbmi	r3, r3, #1
 800b700:	9305      	strmi	r3, [sp, #20]
 800b702:	2300      	movpl	r3, #0
 800b704:	2300      	movmi	r3, #0
 800b706:	9206      	str	r2, [sp, #24]
 800b708:	bf54      	ite	pl
 800b70a:	9305      	strpl	r3, [sp, #20]
 800b70c:	9306      	strmi	r3, [sp, #24]
 800b70e:	f1bb 0f00 	cmp.w	fp, #0
 800b712:	db3c      	blt.n	800b78e <_dtoa_r+0x24e>
 800b714:	9b06      	ldr	r3, [sp, #24]
 800b716:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b71a:	445b      	add	r3, fp
 800b71c:	9306      	str	r3, [sp, #24]
 800b71e:	2300      	movs	r3, #0
 800b720:	9308      	str	r3, [sp, #32]
 800b722:	9b07      	ldr	r3, [sp, #28]
 800b724:	2b09      	cmp	r3, #9
 800b726:	d868      	bhi.n	800b7fa <_dtoa_r+0x2ba>
 800b728:	2b05      	cmp	r3, #5
 800b72a:	bfc4      	itt	gt
 800b72c:	3b04      	subgt	r3, #4
 800b72e:	9307      	strgt	r3, [sp, #28]
 800b730:	9b07      	ldr	r3, [sp, #28]
 800b732:	f1a3 0302 	sub.w	r3, r3, #2
 800b736:	bfcc      	ite	gt
 800b738:	2500      	movgt	r5, #0
 800b73a:	2501      	movle	r5, #1
 800b73c:	2b03      	cmp	r3, #3
 800b73e:	f200 8085 	bhi.w	800b84c <_dtoa_r+0x30c>
 800b742:	e8df f003 	tbb	[pc, r3]
 800b746:	3b2e      	.short	0x3b2e
 800b748:	5839      	.short	0x5839
 800b74a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b74e:	441d      	add	r5, r3
 800b750:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b754:	2b20      	cmp	r3, #32
 800b756:	bfc1      	itttt	gt
 800b758:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b75c:	fa08 f803 	lslgt.w	r8, r8, r3
 800b760:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b764:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b768:	bfd6      	itet	le
 800b76a:	f1c3 0320 	rsble	r3, r3, #32
 800b76e:	ea48 0003 	orrgt.w	r0, r8, r3
 800b772:	fa06 f003 	lslle.w	r0, r6, r3
 800b776:	f7f4 fecd 	bl	8000514 <__aeabi_ui2d>
 800b77a:	2201      	movs	r2, #1
 800b77c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b780:	3d01      	subs	r5, #1
 800b782:	920e      	str	r2, [sp, #56]	; 0x38
 800b784:	e76f      	b.n	800b666 <_dtoa_r+0x126>
 800b786:	2301      	movs	r3, #1
 800b788:	e7b3      	b.n	800b6f2 <_dtoa_r+0x1b2>
 800b78a:	900c      	str	r0, [sp, #48]	; 0x30
 800b78c:	e7b2      	b.n	800b6f4 <_dtoa_r+0x1b4>
 800b78e:	9b05      	ldr	r3, [sp, #20]
 800b790:	eba3 030b 	sub.w	r3, r3, fp
 800b794:	9305      	str	r3, [sp, #20]
 800b796:	f1cb 0300 	rsb	r3, fp, #0
 800b79a:	9308      	str	r3, [sp, #32]
 800b79c:	2300      	movs	r3, #0
 800b79e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7a0:	e7bf      	b.n	800b722 <_dtoa_r+0x1e2>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	dc52      	bgt.n	800b852 <_dtoa_r+0x312>
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	9301      	str	r3, [sp, #4]
 800b7b0:	9304      	str	r3, [sp, #16]
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	920a      	str	r2, [sp, #40]	; 0x28
 800b7b6:	e00b      	b.n	800b7d0 <_dtoa_r+0x290>
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e7f3      	b.n	800b7a4 <_dtoa_r+0x264>
 800b7bc:	2300      	movs	r3, #0
 800b7be:	9309      	str	r3, [sp, #36]	; 0x24
 800b7c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7c2:	445b      	add	r3, fp
 800b7c4:	9301      	str	r3, [sp, #4]
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	9304      	str	r3, [sp, #16]
 800b7cc:	bfb8      	it	lt
 800b7ce:	2301      	movlt	r3, #1
 800b7d0:	69e0      	ldr	r0, [r4, #28]
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	2204      	movs	r2, #4
 800b7d6:	f102 0614 	add.w	r6, r2, #20
 800b7da:	429e      	cmp	r6, r3
 800b7dc:	d93d      	bls.n	800b85a <_dtoa_r+0x31a>
 800b7de:	6041      	str	r1, [r0, #4]
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	f000 fceb 	bl	800c1bc <_Balloc>
 800b7e6:	9000      	str	r0, [sp, #0]
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	d139      	bne.n	800b860 <_dtoa_r+0x320>
 800b7ec:	4b16      	ldr	r3, [pc, #88]	; (800b848 <_dtoa_r+0x308>)
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	f240 11af 	movw	r1, #431	; 0x1af
 800b7f4:	e6bd      	b.n	800b572 <_dtoa_r+0x32>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e7e1      	b.n	800b7be <_dtoa_r+0x27e>
 800b7fa:	2501      	movs	r5, #1
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	9307      	str	r3, [sp, #28]
 800b800:	9509      	str	r5, [sp, #36]	; 0x24
 800b802:	f04f 33ff 	mov.w	r3, #4294967295
 800b806:	9301      	str	r3, [sp, #4]
 800b808:	9304      	str	r3, [sp, #16]
 800b80a:	2200      	movs	r2, #0
 800b80c:	2312      	movs	r3, #18
 800b80e:	e7d1      	b.n	800b7b4 <_dtoa_r+0x274>
 800b810:	636f4361 	.word	0x636f4361
 800b814:	3fd287a7 	.word	0x3fd287a7
 800b818:	8b60c8b3 	.word	0x8b60c8b3
 800b81c:	3fc68a28 	.word	0x3fc68a28
 800b820:	509f79fb 	.word	0x509f79fb
 800b824:	3fd34413 	.word	0x3fd34413
 800b828:	08010e91 	.word	0x08010e91
 800b82c:	08010f4b 	.word	0x08010f4b
 800b830:	7ff00000 	.word	0x7ff00000
 800b834:	08010f47 	.word	0x08010f47
 800b838:	08010f3e 	.word	0x08010f3e
 800b83c:	08010e6e 	.word	0x08010e6e
 800b840:	3ff80000 	.word	0x3ff80000
 800b844:	08011038 	.word	0x08011038
 800b848:	08010fa3 	.word	0x08010fa3
 800b84c:	2301      	movs	r3, #1
 800b84e:	9309      	str	r3, [sp, #36]	; 0x24
 800b850:	e7d7      	b.n	800b802 <_dtoa_r+0x2c2>
 800b852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b854:	9301      	str	r3, [sp, #4]
 800b856:	9304      	str	r3, [sp, #16]
 800b858:	e7ba      	b.n	800b7d0 <_dtoa_r+0x290>
 800b85a:	3101      	adds	r1, #1
 800b85c:	0052      	lsls	r2, r2, #1
 800b85e:	e7ba      	b.n	800b7d6 <_dtoa_r+0x296>
 800b860:	69e3      	ldr	r3, [r4, #28]
 800b862:	9a00      	ldr	r2, [sp, #0]
 800b864:	601a      	str	r2, [r3, #0]
 800b866:	9b04      	ldr	r3, [sp, #16]
 800b868:	2b0e      	cmp	r3, #14
 800b86a:	f200 80a8 	bhi.w	800b9be <_dtoa_r+0x47e>
 800b86e:	2d00      	cmp	r5, #0
 800b870:	f000 80a5 	beq.w	800b9be <_dtoa_r+0x47e>
 800b874:	f1bb 0f00 	cmp.w	fp, #0
 800b878:	dd38      	ble.n	800b8ec <_dtoa_r+0x3ac>
 800b87a:	4bc0      	ldr	r3, [pc, #768]	; (800bb7c <_dtoa_r+0x63c>)
 800b87c:	f00b 020f 	and.w	r2, fp, #15
 800b880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b884:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b888:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b88c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b890:	d019      	beq.n	800b8c6 <_dtoa_r+0x386>
 800b892:	4bbb      	ldr	r3, [pc, #748]	; (800bb80 <_dtoa_r+0x640>)
 800b894:	ec51 0b18 	vmov	r0, r1, d8
 800b898:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b89c:	f7f4 ffde 	bl	800085c <__aeabi_ddiv>
 800b8a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8a4:	f008 080f 	and.w	r8, r8, #15
 800b8a8:	2503      	movs	r5, #3
 800b8aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bb80 <_dtoa_r+0x640>
 800b8ae:	f1b8 0f00 	cmp.w	r8, #0
 800b8b2:	d10a      	bne.n	800b8ca <_dtoa_r+0x38a>
 800b8b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8b8:	4632      	mov	r2, r6
 800b8ba:	463b      	mov	r3, r7
 800b8bc:	f7f4 ffce 	bl	800085c <__aeabi_ddiv>
 800b8c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8c4:	e02b      	b.n	800b91e <_dtoa_r+0x3de>
 800b8c6:	2502      	movs	r5, #2
 800b8c8:	e7ef      	b.n	800b8aa <_dtoa_r+0x36a>
 800b8ca:	f018 0f01 	tst.w	r8, #1
 800b8ce:	d008      	beq.n	800b8e2 <_dtoa_r+0x3a2>
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	4639      	mov	r1, r7
 800b8d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b8d8:	f7f4 fe96 	bl	8000608 <__aeabi_dmul>
 800b8dc:	3501      	adds	r5, #1
 800b8de:	4606      	mov	r6, r0
 800b8e0:	460f      	mov	r7, r1
 800b8e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b8e6:	f109 0908 	add.w	r9, r9, #8
 800b8ea:	e7e0      	b.n	800b8ae <_dtoa_r+0x36e>
 800b8ec:	f000 809f 	beq.w	800ba2e <_dtoa_r+0x4ee>
 800b8f0:	f1cb 0600 	rsb	r6, fp, #0
 800b8f4:	4ba1      	ldr	r3, [pc, #644]	; (800bb7c <_dtoa_r+0x63c>)
 800b8f6:	4fa2      	ldr	r7, [pc, #648]	; (800bb80 <_dtoa_r+0x640>)
 800b8f8:	f006 020f 	and.w	r2, r6, #15
 800b8fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b904:	ec51 0b18 	vmov	r0, r1, d8
 800b908:	f7f4 fe7e 	bl	8000608 <__aeabi_dmul>
 800b90c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b910:	1136      	asrs	r6, r6, #4
 800b912:	2300      	movs	r3, #0
 800b914:	2502      	movs	r5, #2
 800b916:	2e00      	cmp	r6, #0
 800b918:	d17e      	bne.n	800ba18 <_dtoa_r+0x4d8>
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1d0      	bne.n	800b8c0 <_dtoa_r+0x380>
 800b91e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b920:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b924:	2b00      	cmp	r3, #0
 800b926:	f000 8084 	beq.w	800ba32 <_dtoa_r+0x4f2>
 800b92a:	4b96      	ldr	r3, [pc, #600]	; (800bb84 <_dtoa_r+0x644>)
 800b92c:	2200      	movs	r2, #0
 800b92e:	4640      	mov	r0, r8
 800b930:	4649      	mov	r1, r9
 800b932:	f7f5 f8db 	bl	8000aec <__aeabi_dcmplt>
 800b936:	2800      	cmp	r0, #0
 800b938:	d07b      	beq.n	800ba32 <_dtoa_r+0x4f2>
 800b93a:	9b04      	ldr	r3, [sp, #16]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d078      	beq.n	800ba32 <_dtoa_r+0x4f2>
 800b940:	9b01      	ldr	r3, [sp, #4]
 800b942:	2b00      	cmp	r3, #0
 800b944:	dd39      	ble.n	800b9ba <_dtoa_r+0x47a>
 800b946:	4b90      	ldr	r3, [pc, #576]	; (800bb88 <_dtoa_r+0x648>)
 800b948:	2200      	movs	r2, #0
 800b94a:	4640      	mov	r0, r8
 800b94c:	4649      	mov	r1, r9
 800b94e:	f7f4 fe5b 	bl	8000608 <__aeabi_dmul>
 800b952:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b956:	9e01      	ldr	r6, [sp, #4]
 800b958:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b95c:	3501      	adds	r5, #1
 800b95e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b962:	4628      	mov	r0, r5
 800b964:	f7f4 fde6 	bl	8000534 <__aeabi_i2d>
 800b968:	4642      	mov	r2, r8
 800b96a:	464b      	mov	r3, r9
 800b96c:	f7f4 fe4c 	bl	8000608 <__aeabi_dmul>
 800b970:	4b86      	ldr	r3, [pc, #536]	; (800bb8c <_dtoa_r+0x64c>)
 800b972:	2200      	movs	r2, #0
 800b974:	f7f4 fc92 	bl	800029c <__adddf3>
 800b978:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b97c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b980:	9303      	str	r3, [sp, #12]
 800b982:	2e00      	cmp	r6, #0
 800b984:	d158      	bne.n	800ba38 <_dtoa_r+0x4f8>
 800b986:	4b82      	ldr	r3, [pc, #520]	; (800bb90 <_dtoa_r+0x650>)
 800b988:	2200      	movs	r2, #0
 800b98a:	4640      	mov	r0, r8
 800b98c:	4649      	mov	r1, r9
 800b98e:	f7f4 fc83 	bl	8000298 <__aeabi_dsub>
 800b992:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b996:	4680      	mov	r8, r0
 800b998:	4689      	mov	r9, r1
 800b99a:	f7f5 f8c5 	bl	8000b28 <__aeabi_dcmpgt>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	f040 8296 	bne.w	800bed0 <_dtoa_r+0x990>
 800b9a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b9a8:	4640      	mov	r0, r8
 800b9aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9ae:	4649      	mov	r1, r9
 800b9b0:	f7f5 f89c 	bl	8000aec <__aeabi_dcmplt>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	f040 8289 	bne.w	800becc <_dtoa_r+0x98c>
 800b9ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b9be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f2c0 814e 	blt.w	800bc62 <_dtoa_r+0x722>
 800b9c6:	f1bb 0f0e 	cmp.w	fp, #14
 800b9ca:	f300 814a 	bgt.w	800bc62 <_dtoa_r+0x722>
 800b9ce:	4b6b      	ldr	r3, [pc, #428]	; (800bb7c <_dtoa_r+0x63c>)
 800b9d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b9d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b9d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	f280 80dc 	bge.w	800bb98 <_dtoa_r+0x658>
 800b9e0:	9b04      	ldr	r3, [sp, #16]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	f300 80d8 	bgt.w	800bb98 <_dtoa_r+0x658>
 800b9e8:	f040 826f 	bne.w	800beca <_dtoa_r+0x98a>
 800b9ec:	4b68      	ldr	r3, [pc, #416]	; (800bb90 <_dtoa_r+0x650>)
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	4640      	mov	r0, r8
 800b9f2:	4649      	mov	r1, r9
 800b9f4:	f7f4 fe08 	bl	8000608 <__aeabi_dmul>
 800b9f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9fc:	f7f5 f88a 	bl	8000b14 <__aeabi_dcmpge>
 800ba00:	9e04      	ldr	r6, [sp, #16]
 800ba02:	4637      	mov	r7, r6
 800ba04:	2800      	cmp	r0, #0
 800ba06:	f040 8245 	bne.w	800be94 <_dtoa_r+0x954>
 800ba0a:	9d00      	ldr	r5, [sp, #0]
 800ba0c:	2331      	movs	r3, #49	; 0x31
 800ba0e:	f805 3b01 	strb.w	r3, [r5], #1
 800ba12:	f10b 0b01 	add.w	fp, fp, #1
 800ba16:	e241      	b.n	800be9c <_dtoa_r+0x95c>
 800ba18:	07f2      	lsls	r2, r6, #31
 800ba1a:	d505      	bpl.n	800ba28 <_dtoa_r+0x4e8>
 800ba1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba20:	f7f4 fdf2 	bl	8000608 <__aeabi_dmul>
 800ba24:	3501      	adds	r5, #1
 800ba26:	2301      	movs	r3, #1
 800ba28:	1076      	asrs	r6, r6, #1
 800ba2a:	3708      	adds	r7, #8
 800ba2c:	e773      	b.n	800b916 <_dtoa_r+0x3d6>
 800ba2e:	2502      	movs	r5, #2
 800ba30:	e775      	b.n	800b91e <_dtoa_r+0x3de>
 800ba32:	9e04      	ldr	r6, [sp, #16]
 800ba34:	465f      	mov	r7, fp
 800ba36:	e792      	b.n	800b95e <_dtoa_r+0x41e>
 800ba38:	9900      	ldr	r1, [sp, #0]
 800ba3a:	4b50      	ldr	r3, [pc, #320]	; (800bb7c <_dtoa_r+0x63c>)
 800ba3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba40:	4431      	add	r1, r6
 800ba42:	9102      	str	r1, [sp, #8]
 800ba44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba46:	eeb0 9a47 	vmov.f32	s18, s14
 800ba4a:	eef0 9a67 	vmov.f32	s19, s15
 800ba4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ba52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ba56:	2900      	cmp	r1, #0
 800ba58:	d044      	beq.n	800bae4 <_dtoa_r+0x5a4>
 800ba5a:	494e      	ldr	r1, [pc, #312]	; (800bb94 <_dtoa_r+0x654>)
 800ba5c:	2000      	movs	r0, #0
 800ba5e:	f7f4 fefd 	bl	800085c <__aeabi_ddiv>
 800ba62:	ec53 2b19 	vmov	r2, r3, d9
 800ba66:	f7f4 fc17 	bl	8000298 <__aeabi_dsub>
 800ba6a:	9d00      	ldr	r5, [sp, #0]
 800ba6c:	ec41 0b19 	vmov	d9, r0, r1
 800ba70:	4649      	mov	r1, r9
 800ba72:	4640      	mov	r0, r8
 800ba74:	f7f5 f878 	bl	8000b68 <__aeabi_d2iz>
 800ba78:	4606      	mov	r6, r0
 800ba7a:	f7f4 fd5b 	bl	8000534 <__aeabi_i2d>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	460b      	mov	r3, r1
 800ba82:	4640      	mov	r0, r8
 800ba84:	4649      	mov	r1, r9
 800ba86:	f7f4 fc07 	bl	8000298 <__aeabi_dsub>
 800ba8a:	3630      	adds	r6, #48	; 0x30
 800ba8c:	f805 6b01 	strb.w	r6, [r5], #1
 800ba90:	ec53 2b19 	vmov	r2, r3, d9
 800ba94:	4680      	mov	r8, r0
 800ba96:	4689      	mov	r9, r1
 800ba98:	f7f5 f828 	bl	8000aec <__aeabi_dcmplt>
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	d164      	bne.n	800bb6a <_dtoa_r+0x62a>
 800baa0:	4642      	mov	r2, r8
 800baa2:	464b      	mov	r3, r9
 800baa4:	4937      	ldr	r1, [pc, #220]	; (800bb84 <_dtoa_r+0x644>)
 800baa6:	2000      	movs	r0, #0
 800baa8:	f7f4 fbf6 	bl	8000298 <__aeabi_dsub>
 800baac:	ec53 2b19 	vmov	r2, r3, d9
 800bab0:	f7f5 f81c 	bl	8000aec <__aeabi_dcmplt>
 800bab4:	2800      	cmp	r0, #0
 800bab6:	f040 80b6 	bne.w	800bc26 <_dtoa_r+0x6e6>
 800baba:	9b02      	ldr	r3, [sp, #8]
 800babc:	429d      	cmp	r5, r3
 800babe:	f43f af7c 	beq.w	800b9ba <_dtoa_r+0x47a>
 800bac2:	4b31      	ldr	r3, [pc, #196]	; (800bb88 <_dtoa_r+0x648>)
 800bac4:	ec51 0b19 	vmov	r0, r1, d9
 800bac8:	2200      	movs	r2, #0
 800baca:	f7f4 fd9d 	bl	8000608 <__aeabi_dmul>
 800bace:	4b2e      	ldr	r3, [pc, #184]	; (800bb88 <_dtoa_r+0x648>)
 800bad0:	ec41 0b19 	vmov	d9, r0, r1
 800bad4:	2200      	movs	r2, #0
 800bad6:	4640      	mov	r0, r8
 800bad8:	4649      	mov	r1, r9
 800bada:	f7f4 fd95 	bl	8000608 <__aeabi_dmul>
 800bade:	4680      	mov	r8, r0
 800bae0:	4689      	mov	r9, r1
 800bae2:	e7c5      	b.n	800ba70 <_dtoa_r+0x530>
 800bae4:	ec51 0b17 	vmov	r0, r1, d7
 800bae8:	f7f4 fd8e 	bl	8000608 <__aeabi_dmul>
 800baec:	9b02      	ldr	r3, [sp, #8]
 800baee:	9d00      	ldr	r5, [sp, #0]
 800baf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800baf2:	ec41 0b19 	vmov	d9, r0, r1
 800baf6:	4649      	mov	r1, r9
 800baf8:	4640      	mov	r0, r8
 800bafa:	f7f5 f835 	bl	8000b68 <__aeabi_d2iz>
 800bafe:	4606      	mov	r6, r0
 800bb00:	f7f4 fd18 	bl	8000534 <__aeabi_i2d>
 800bb04:	3630      	adds	r6, #48	; 0x30
 800bb06:	4602      	mov	r2, r0
 800bb08:	460b      	mov	r3, r1
 800bb0a:	4640      	mov	r0, r8
 800bb0c:	4649      	mov	r1, r9
 800bb0e:	f7f4 fbc3 	bl	8000298 <__aeabi_dsub>
 800bb12:	f805 6b01 	strb.w	r6, [r5], #1
 800bb16:	9b02      	ldr	r3, [sp, #8]
 800bb18:	429d      	cmp	r5, r3
 800bb1a:	4680      	mov	r8, r0
 800bb1c:	4689      	mov	r9, r1
 800bb1e:	f04f 0200 	mov.w	r2, #0
 800bb22:	d124      	bne.n	800bb6e <_dtoa_r+0x62e>
 800bb24:	4b1b      	ldr	r3, [pc, #108]	; (800bb94 <_dtoa_r+0x654>)
 800bb26:	ec51 0b19 	vmov	r0, r1, d9
 800bb2a:	f7f4 fbb7 	bl	800029c <__adddf3>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	460b      	mov	r3, r1
 800bb32:	4640      	mov	r0, r8
 800bb34:	4649      	mov	r1, r9
 800bb36:	f7f4 fff7 	bl	8000b28 <__aeabi_dcmpgt>
 800bb3a:	2800      	cmp	r0, #0
 800bb3c:	d173      	bne.n	800bc26 <_dtoa_r+0x6e6>
 800bb3e:	ec53 2b19 	vmov	r2, r3, d9
 800bb42:	4914      	ldr	r1, [pc, #80]	; (800bb94 <_dtoa_r+0x654>)
 800bb44:	2000      	movs	r0, #0
 800bb46:	f7f4 fba7 	bl	8000298 <__aeabi_dsub>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	4640      	mov	r0, r8
 800bb50:	4649      	mov	r1, r9
 800bb52:	f7f4 ffcb 	bl	8000aec <__aeabi_dcmplt>
 800bb56:	2800      	cmp	r0, #0
 800bb58:	f43f af2f 	beq.w	800b9ba <_dtoa_r+0x47a>
 800bb5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bb5e:	1e6b      	subs	r3, r5, #1
 800bb60:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bb66:	2b30      	cmp	r3, #48	; 0x30
 800bb68:	d0f8      	beq.n	800bb5c <_dtoa_r+0x61c>
 800bb6a:	46bb      	mov	fp, r7
 800bb6c:	e04a      	b.n	800bc04 <_dtoa_r+0x6c4>
 800bb6e:	4b06      	ldr	r3, [pc, #24]	; (800bb88 <_dtoa_r+0x648>)
 800bb70:	f7f4 fd4a 	bl	8000608 <__aeabi_dmul>
 800bb74:	4680      	mov	r8, r0
 800bb76:	4689      	mov	r9, r1
 800bb78:	e7bd      	b.n	800baf6 <_dtoa_r+0x5b6>
 800bb7a:	bf00      	nop
 800bb7c:	08011038 	.word	0x08011038
 800bb80:	08011010 	.word	0x08011010
 800bb84:	3ff00000 	.word	0x3ff00000
 800bb88:	40240000 	.word	0x40240000
 800bb8c:	401c0000 	.word	0x401c0000
 800bb90:	40140000 	.word	0x40140000
 800bb94:	3fe00000 	.word	0x3fe00000
 800bb98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bb9c:	9d00      	ldr	r5, [sp, #0]
 800bb9e:	4642      	mov	r2, r8
 800bba0:	464b      	mov	r3, r9
 800bba2:	4630      	mov	r0, r6
 800bba4:	4639      	mov	r1, r7
 800bba6:	f7f4 fe59 	bl	800085c <__aeabi_ddiv>
 800bbaa:	f7f4 ffdd 	bl	8000b68 <__aeabi_d2iz>
 800bbae:	9001      	str	r0, [sp, #4]
 800bbb0:	f7f4 fcc0 	bl	8000534 <__aeabi_i2d>
 800bbb4:	4642      	mov	r2, r8
 800bbb6:	464b      	mov	r3, r9
 800bbb8:	f7f4 fd26 	bl	8000608 <__aeabi_dmul>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	4630      	mov	r0, r6
 800bbc2:	4639      	mov	r1, r7
 800bbc4:	f7f4 fb68 	bl	8000298 <__aeabi_dsub>
 800bbc8:	9e01      	ldr	r6, [sp, #4]
 800bbca:	9f04      	ldr	r7, [sp, #16]
 800bbcc:	3630      	adds	r6, #48	; 0x30
 800bbce:	f805 6b01 	strb.w	r6, [r5], #1
 800bbd2:	9e00      	ldr	r6, [sp, #0]
 800bbd4:	1bae      	subs	r6, r5, r6
 800bbd6:	42b7      	cmp	r7, r6
 800bbd8:	4602      	mov	r2, r0
 800bbda:	460b      	mov	r3, r1
 800bbdc:	d134      	bne.n	800bc48 <_dtoa_r+0x708>
 800bbde:	f7f4 fb5d 	bl	800029c <__adddf3>
 800bbe2:	4642      	mov	r2, r8
 800bbe4:	464b      	mov	r3, r9
 800bbe6:	4606      	mov	r6, r0
 800bbe8:	460f      	mov	r7, r1
 800bbea:	f7f4 ff9d 	bl	8000b28 <__aeabi_dcmpgt>
 800bbee:	b9c8      	cbnz	r0, 800bc24 <_dtoa_r+0x6e4>
 800bbf0:	4642      	mov	r2, r8
 800bbf2:	464b      	mov	r3, r9
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	4639      	mov	r1, r7
 800bbf8:	f7f4 ff6e 	bl	8000ad8 <__aeabi_dcmpeq>
 800bbfc:	b110      	cbz	r0, 800bc04 <_dtoa_r+0x6c4>
 800bbfe:	9b01      	ldr	r3, [sp, #4]
 800bc00:	07db      	lsls	r3, r3, #31
 800bc02:	d40f      	bmi.n	800bc24 <_dtoa_r+0x6e4>
 800bc04:	4651      	mov	r1, sl
 800bc06:	4620      	mov	r0, r4
 800bc08:	f000 fb18 	bl	800c23c <_Bfree>
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc10:	702b      	strb	r3, [r5, #0]
 800bc12:	f10b 0301 	add.w	r3, fp, #1
 800bc16:	6013      	str	r3, [r2, #0]
 800bc18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	f43f ace2 	beq.w	800b5e4 <_dtoa_r+0xa4>
 800bc20:	601d      	str	r5, [r3, #0]
 800bc22:	e4df      	b.n	800b5e4 <_dtoa_r+0xa4>
 800bc24:	465f      	mov	r7, fp
 800bc26:	462b      	mov	r3, r5
 800bc28:	461d      	mov	r5, r3
 800bc2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc2e:	2a39      	cmp	r2, #57	; 0x39
 800bc30:	d106      	bne.n	800bc40 <_dtoa_r+0x700>
 800bc32:	9a00      	ldr	r2, [sp, #0]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d1f7      	bne.n	800bc28 <_dtoa_r+0x6e8>
 800bc38:	9900      	ldr	r1, [sp, #0]
 800bc3a:	2230      	movs	r2, #48	; 0x30
 800bc3c:	3701      	adds	r7, #1
 800bc3e:	700a      	strb	r2, [r1, #0]
 800bc40:	781a      	ldrb	r2, [r3, #0]
 800bc42:	3201      	adds	r2, #1
 800bc44:	701a      	strb	r2, [r3, #0]
 800bc46:	e790      	b.n	800bb6a <_dtoa_r+0x62a>
 800bc48:	4ba3      	ldr	r3, [pc, #652]	; (800bed8 <_dtoa_r+0x998>)
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f7f4 fcdc 	bl	8000608 <__aeabi_dmul>
 800bc50:	2200      	movs	r2, #0
 800bc52:	2300      	movs	r3, #0
 800bc54:	4606      	mov	r6, r0
 800bc56:	460f      	mov	r7, r1
 800bc58:	f7f4 ff3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	d09e      	beq.n	800bb9e <_dtoa_r+0x65e>
 800bc60:	e7d0      	b.n	800bc04 <_dtoa_r+0x6c4>
 800bc62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc64:	2a00      	cmp	r2, #0
 800bc66:	f000 80ca 	beq.w	800bdfe <_dtoa_r+0x8be>
 800bc6a:	9a07      	ldr	r2, [sp, #28]
 800bc6c:	2a01      	cmp	r2, #1
 800bc6e:	f300 80ad 	bgt.w	800bdcc <_dtoa_r+0x88c>
 800bc72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc74:	2a00      	cmp	r2, #0
 800bc76:	f000 80a5 	beq.w	800bdc4 <_dtoa_r+0x884>
 800bc7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bc7e:	9e08      	ldr	r6, [sp, #32]
 800bc80:	9d05      	ldr	r5, [sp, #20]
 800bc82:	9a05      	ldr	r2, [sp, #20]
 800bc84:	441a      	add	r2, r3
 800bc86:	9205      	str	r2, [sp, #20]
 800bc88:	9a06      	ldr	r2, [sp, #24]
 800bc8a:	2101      	movs	r1, #1
 800bc8c:	441a      	add	r2, r3
 800bc8e:	4620      	mov	r0, r4
 800bc90:	9206      	str	r2, [sp, #24]
 800bc92:	f000 fb89 	bl	800c3a8 <__i2b>
 800bc96:	4607      	mov	r7, r0
 800bc98:	b165      	cbz	r5, 800bcb4 <_dtoa_r+0x774>
 800bc9a:	9b06      	ldr	r3, [sp, #24]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	dd09      	ble.n	800bcb4 <_dtoa_r+0x774>
 800bca0:	42ab      	cmp	r3, r5
 800bca2:	9a05      	ldr	r2, [sp, #20]
 800bca4:	bfa8      	it	ge
 800bca6:	462b      	movge	r3, r5
 800bca8:	1ad2      	subs	r2, r2, r3
 800bcaa:	9205      	str	r2, [sp, #20]
 800bcac:	9a06      	ldr	r2, [sp, #24]
 800bcae:	1aed      	subs	r5, r5, r3
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	9306      	str	r3, [sp, #24]
 800bcb4:	9b08      	ldr	r3, [sp, #32]
 800bcb6:	b1f3      	cbz	r3, 800bcf6 <_dtoa_r+0x7b6>
 800bcb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	f000 80a3 	beq.w	800be06 <_dtoa_r+0x8c6>
 800bcc0:	2e00      	cmp	r6, #0
 800bcc2:	dd10      	ble.n	800bce6 <_dtoa_r+0x7a6>
 800bcc4:	4639      	mov	r1, r7
 800bcc6:	4632      	mov	r2, r6
 800bcc8:	4620      	mov	r0, r4
 800bcca:	f000 fc2d 	bl	800c528 <__pow5mult>
 800bcce:	4652      	mov	r2, sl
 800bcd0:	4601      	mov	r1, r0
 800bcd2:	4607      	mov	r7, r0
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	f000 fb7d 	bl	800c3d4 <__multiply>
 800bcda:	4651      	mov	r1, sl
 800bcdc:	4680      	mov	r8, r0
 800bcde:	4620      	mov	r0, r4
 800bce0:	f000 faac 	bl	800c23c <_Bfree>
 800bce4:	46c2      	mov	sl, r8
 800bce6:	9b08      	ldr	r3, [sp, #32]
 800bce8:	1b9a      	subs	r2, r3, r6
 800bcea:	d004      	beq.n	800bcf6 <_dtoa_r+0x7b6>
 800bcec:	4651      	mov	r1, sl
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f000 fc1a 	bl	800c528 <__pow5mult>
 800bcf4:	4682      	mov	sl, r0
 800bcf6:	2101      	movs	r1, #1
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	f000 fb55 	bl	800c3a8 <__i2b>
 800bcfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	4606      	mov	r6, r0
 800bd04:	f340 8081 	ble.w	800be0a <_dtoa_r+0x8ca>
 800bd08:	461a      	mov	r2, r3
 800bd0a:	4601      	mov	r1, r0
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	f000 fc0b 	bl	800c528 <__pow5mult>
 800bd12:	9b07      	ldr	r3, [sp, #28]
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	4606      	mov	r6, r0
 800bd18:	dd7a      	ble.n	800be10 <_dtoa_r+0x8d0>
 800bd1a:	f04f 0800 	mov.w	r8, #0
 800bd1e:	6933      	ldr	r3, [r6, #16]
 800bd20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bd24:	6918      	ldr	r0, [r3, #16]
 800bd26:	f000 faf1 	bl	800c30c <__hi0bits>
 800bd2a:	f1c0 0020 	rsb	r0, r0, #32
 800bd2e:	9b06      	ldr	r3, [sp, #24]
 800bd30:	4418      	add	r0, r3
 800bd32:	f010 001f 	ands.w	r0, r0, #31
 800bd36:	f000 8094 	beq.w	800be62 <_dtoa_r+0x922>
 800bd3a:	f1c0 0320 	rsb	r3, r0, #32
 800bd3e:	2b04      	cmp	r3, #4
 800bd40:	f340 8085 	ble.w	800be4e <_dtoa_r+0x90e>
 800bd44:	9b05      	ldr	r3, [sp, #20]
 800bd46:	f1c0 001c 	rsb	r0, r0, #28
 800bd4a:	4403      	add	r3, r0
 800bd4c:	9305      	str	r3, [sp, #20]
 800bd4e:	9b06      	ldr	r3, [sp, #24]
 800bd50:	4403      	add	r3, r0
 800bd52:	4405      	add	r5, r0
 800bd54:	9306      	str	r3, [sp, #24]
 800bd56:	9b05      	ldr	r3, [sp, #20]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	dd05      	ble.n	800bd68 <_dtoa_r+0x828>
 800bd5c:	4651      	mov	r1, sl
 800bd5e:	461a      	mov	r2, r3
 800bd60:	4620      	mov	r0, r4
 800bd62:	f000 fc3b 	bl	800c5dc <__lshift>
 800bd66:	4682      	mov	sl, r0
 800bd68:	9b06      	ldr	r3, [sp, #24]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	dd05      	ble.n	800bd7a <_dtoa_r+0x83a>
 800bd6e:	4631      	mov	r1, r6
 800bd70:	461a      	mov	r2, r3
 800bd72:	4620      	mov	r0, r4
 800bd74:	f000 fc32 	bl	800c5dc <__lshift>
 800bd78:	4606      	mov	r6, r0
 800bd7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d072      	beq.n	800be66 <_dtoa_r+0x926>
 800bd80:	4631      	mov	r1, r6
 800bd82:	4650      	mov	r0, sl
 800bd84:	f000 fc96 	bl	800c6b4 <__mcmp>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	da6c      	bge.n	800be66 <_dtoa_r+0x926>
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	4651      	mov	r1, sl
 800bd90:	220a      	movs	r2, #10
 800bd92:	4620      	mov	r0, r4
 800bd94:	f000 fa74 	bl	800c280 <__multadd>
 800bd98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd9e:	4682      	mov	sl, r0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f000 81b0 	beq.w	800c106 <_dtoa_r+0xbc6>
 800bda6:	2300      	movs	r3, #0
 800bda8:	4639      	mov	r1, r7
 800bdaa:	220a      	movs	r2, #10
 800bdac:	4620      	mov	r0, r4
 800bdae:	f000 fa67 	bl	800c280 <__multadd>
 800bdb2:	9b01      	ldr	r3, [sp, #4]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	4607      	mov	r7, r0
 800bdb8:	f300 8096 	bgt.w	800bee8 <_dtoa_r+0x9a8>
 800bdbc:	9b07      	ldr	r3, [sp, #28]
 800bdbe:	2b02      	cmp	r3, #2
 800bdc0:	dc59      	bgt.n	800be76 <_dtoa_r+0x936>
 800bdc2:	e091      	b.n	800bee8 <_dtoa_r+0x9a8>
 800bdc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bdc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bdca:	e758      	b.n	800bc7e <_dtoa_r+0x73e>
 800bdcc:	9b04      	ldr	r3, [sp, #16]
 800bdce:	1e5e      	subs	r6, r3, #1
 800bdd0:	9b08      	ldr	r3, [sp, #32]
 800bdd2:	42b3      	cmp	r3, r6
 800bdd4:	bfbf      	itttt	lt
 800bdd6:	9b08      	ldrlt	r3, [sp, #32]
 800bdd8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bdda:	9608      	strlt	r6, [sp, #32]
 800bddc:	1af3      	sublt	r3, r6, r3
 800bdde:	bfb4      	ite	lt
 800bde0:	18d2      	addlt	r2, r2, r3
 800bde2:	1b9e      	subge	r6, r3, r6
 800bde4:	9b04      	ldr	r3, [sp, #16]
 800bde6:	bfbc      	itt	lt
 800bde8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bdea:	2600      	movlt	r6, #0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	bfb7      	itett	lt
 800bdf0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800bdf4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800bdf8:	1a9d      	sublt	r5, r3, r2
 800bdfa:	2300      	movlt	r3, #0
 800bdfc:	e741      	b.n	800bc82 <_dtoa_r+0x742>
 800bdfe:	9e08      	ldr	r6, [sp, #32]
 800be00:	9d05      	ldr	r5, [sp, #20]
 800be02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800be04:	e748      	b.n	800bc98 <_dtoa_r+0x758>
 800be06:	9a08      	ldr	r2, [sp, #32]
 800be08:	e770      	b.n	800bcec <_dtoa_r+0x7ac>
 800be0a:	9b07      	ldr	r3, [sp, #28]
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	dc19      	bgt.n	800be44 <_dtoa_r+0x904>
 800be10:	9b02      	ldr	r3, [sp, #8]
 800be12:	b9bb      	cbnz	r3, 800be44 <_dtoa_r+0x904>
 800be14:	9b03      	ldr	r3, [sp, #12]
 800be16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be1a:	b99b      	cbnz	r3, 800be44 <_dtoa_r+0x904>
 800be1c:	9b03      	ldr	r3, [sp, #12]
 800be1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be22:	0d1b      	lsrs	r3, r3, #20
 800be24:	051b      	lsls	r3, r3, #20
 800be26:	b183      	cbz	r3, 800be4a <_dtoa_r+0x90a>
 800be28:	9b05      	ldr	r3, [sp, #20]
 800be2a:	3301      	adds	r3, #1
 800be2c:	9305      	str	r3, [sp, #20]
 800be2e:	9b06      	ldr	r3, [sp, #24]
 800be30:	3301      	adds	r3, #1
 800be32:	9306      	str	r3, [sp, #24]
 800be34:	f04f 0801 	mov.w	r8, #1
 800be38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	f47f af6f 	bne.w	800bd1e <_dtoa_r+0x7de>
 800be40:	2001      	movs	r0, #1
 800be42:	e774      	b.n	800bd2e <_dtoa_r+0x7ee>
 800be44:	f04f 0800 	mov.w	r8, #0
 800be48:	e7f6      	b.n	800be38 <_dtoa_r+0x8f8>
 800be4a:	4698      	mov	r8, r3
 800be4c:	e7f4      	b.n	800be38 <_dtoa_r+0x8f8>
 800be4e:	d082      	beq.n	800bd56 <_dtoa_r+0x816>
 800be50:	9a05      	ldr	r2, [sp, #20]
 800be52:	331c      	adds	r3, #28
 800be54:	441a      	add	r2, r3
 800be56:	9205      	str	r2, [sp, #20]
 800be58:	9a06      	ldr	r2, [sp, #24]
 800be5a:	441a      	add	r2, r3
 800be5c:	441d      	add	r5, r3
 800be5e:	9206      	str	r2, [sp, #24]
 800be60:	e779      	b.n	800bd56 <_dtoa_r+0x816>
 800be62:	4603      	mov	r3, r0
 800be64:	e7f4      	b.n	800be50 <_dtoa_r+0x910>
 800be66:	9b04      	ldr	r3, [sp, #16]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	dc37      	bgt.n	800bedc <_dtoa_r+0x99c>
 800be6c:	9b07      	ldr	r3, [sp, #28]
 800be6e:	2b02      	cmp	r3, #2
 800be70:	dd34      	ble.n	800bedc <_dtoa_r+0x99c>
 800be72:	9b04      	ldr	r3, [sp, #16]
 800be74:	9301      	str	r3, [sp, #4]
 800be76:	9b01      	ldr	r3, [sp, #4]
 800be78:	b963      	cbnz	r3, 800be94 <_dtoa_r+0x954>
 800be7a:	4631      	mov	r1, r6
 800be7c:	2205      	movs	r2, #5
 800be7e:	4620      	mov	r0, r4
 800be80:	f000 f9fe 	bl	800c280 <__multadd>
 800be84:	4601      	mov	r1, r0
 800be86:	4606      	mov	r6, r0
 800be88:	4650      	mov	r0, sl
 800be8a:	f000 fc13 	bl	800c6b4 <__mcmp>
 800be8e:	2800      	cmp	r0, #0
 800be90:	f73f adbb 	bgt.w	800ba0a <_dtoa_r+0x4ca>
 800be94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be96:	9d00      	ldr	r5, [sp, #0]
 800be98:	ea6f 0b03 	mvn.w	fp, r3
 800be9c:	f04f 0800 	mov.w	r8, #0
 800bea0:	4631      	mov	r1, r6
 800bea2:	4620      	mov	r0, r4
 800bea4:	f000 f9ca 	bl	800c23c <_Bfree>
 800bea8:	2f00      	cmp	r7, #0
 800beaa:	f43f aeab 	beq.w	800bc04 <_dtoa_r+0x6c4>
 800beae:	f1b8 0f00 	cmp.w	r8, #0
 800beb2:	d005      	beq.n	800bec0 <_dtoa_r+0x980>
 800beb4:	45b8      	cmp	r8, r7
 800beb6:	d003      	beq.n	800bec0 <_dtoa_r+0x980>
 800beb8:	4641      	mov	r1, r8
 800beba:	4620      	mov	r0, r4
 800bebc:	f000 f9be 	bl	800c23c <_Bfree>
 800bec0:	4639      	mov	r1, r7
 800bec2:	4620      	mov	r0, r4
 800bec4:	f000 f9ba 	bl	800c23c <_Bfree>
 800bec8:	e69c      	b.n	800bc04 <_dtoa_r+0x6c4>
 800beca:	2600      	movs	r6, #0
 800becc:	4637      	mov	r7, r6
 800bece:	e7e1      	b.n	800be94 <_dtoa_r+0x954>
 800bed0:	46bb      	mov	fp, r7
 800bed2:	4637      	mov	r7, r6
 800bed4:	e599      	b.n	800ba0a <_dtoa_r+0x4ca>
 800bed6:	bf00      	nop
 800bed8:	40240000 	.word	0x40240000
 800bedc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bede:	2b00      	cmp	r3, #0
 800bee0:	f000 80c8 	beq.w	800c074 <_dtoa_r+0xb34>
 800bee4:	9b04      	ldr	r3, [sp, #16]
 800bee6:	9301      	str	r3, [sp, #4]
 800bee8:	2d00      	cmp	r5, #0
 800beea:	dd05      	ble.n	800bef8 <_dtoa_r+0x9b8>
 800beec:	4639      	mov	r1, r7
 800beee:	462a      	mov	r2, r5
 800bef0:	4620      	mov	r0, r4
 800bef2:	f000 fb73 	bl	800c5dc <__lshift>
 800bef6:	4607      	mov	r7, r0
 800bef8:	f1b8 0f00 	cmp.w	r8, #0
 800befc:	d05b      	beq.n	800bfb6 <_dtoa_r+0xa76>
 800befe:	6879      	ldr	r1, [r7, #4]
 800bf00:	4620      	mov	r0, r4
 800bf02:	f000 f95b 	bl	800c1bc <_Balloc>
 800bf06:	4605      	mov	r5, r0
 800bf08:	b928      	cbnz	r0, 800bf16 <_dtoa_r+0x9d6>
 800bf0a:	4b83      	ldr	r3, [pc, #524]	; (800c118 <_dtoa_r+0xbd8>)
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bf12:	f7ff bb2e 	b.w	800b572 <_dtoa_r+0x32>
 800bf16:	693a      	ldr	r2, [r7, #16]
 800bf18:	3202      	adds	r2, #2
 800bf1a:	0092      	lsls	r2, r2, #2
 800bf1c:	f107 010c 	add.w	r1, r7, #12
 800bf20:	300c      	adds	r0, #12
 800bf22:	f7ff fa57 	bl	800b3d4 <memcpy>
 800bf26:	2201      	movs	r2, #1
 800bf28:	4629      	mov	r1, r5
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	f000 fb56 	bl	800c5dc <__lshift>
 800bf30:	9b00      	ldr	r3, [sp, #0]
 800bf32:	3301      	adds	r3, #1
 800bf34:	9304      	str	r3, [sp, #16]
 800bf36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf3a:	4413      	add	r3, r2
 800bf3c:	9308      	str	r3, [sp, #32]
 800bf3e:	9b02      	ldr	r3, [sp, #8]
 800bf40:	f003 0301 	and.w	r3, r3, #1
 800bf44:	46b8      	mov	r8, r7
 800bf46:	9306      	str	r3, [sp, #24]
 800bf48:	4607      	mov	r7, r0
 800bf4a:	9b04      	ldr	r3, [sp, #16]
 800bf4c:	4631      	mov	r1, r6
 800bf4e:	3b01      	subs	r3, #1
 800bf50:	4650      	mov	r0, sl
 800bf52:	9301      	str	r3, [sp, #4]
 800bf54:	f7ff fa6a 	bl	800b42c <quorem>
 800bf58:	4641      	mov	r1, r8
 800bf5a:	9002      	str	r0, [sp, #8]
 800bf5c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bf60:	4650      	mov	r0, sl
 800bf62:	f000 fba7 	bl	800c6b4 <__mcmp>
 800bf66:	463a      	mov	r2, r7
 800bf68:	9005      	str	r0, [sp, #20]
 800bf6a:	4631      	mov	r1, r6
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	f000 fbbd 	bl	800c6ec <__mdiff>
 800bf72:	68c2      	ldr	r2, [r0, #12]
 800bf74:	4605      	mov	r5, r0
 800bf76:	bb02      	cbnz	r2, 800bfba <_dtoa_r+0xa7a>
 800bf78:	4601      	mov	r1, r0
 800bf7a:	4650      	mov	r0, sl
 800bf7c:	f000 fb9a 	bl	800c6b4 <__mcmp>
 800bf80:	4602      	mov	r2, r0
 800bf82:	4629      	mov	r1, r5
 800bf84:	4620      	mov	r0, r4
 800bf86:	9209      	str	r2, [sp, #36]	; 0x24
 800bf88:	f000 f958 	bl	800c23c <_Bfree>
 800bf8c:	9b07      	ldr	r3, [sp, #28]
 800bf8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf90:	9d04      	ldr	r5, [sp, #16]
 800bf92:	ea43 0102 	orr.w	r1, r3, r2
 800bf96:	9b06      	ldr	r3, [sp, #24]
 800bf98:	4319      	orrs	r1, r3
 800bf9a:	d110      	bne.n	800bfbe <_dtoa_r+0xa7e>
 800bf9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bfa0:	d029      	beq.n	800bff6 <_dtoa_r+0xab6>
 800bfa2:	9b05      	ldr	r3, [sp, #20]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	dd02      	ble.n	800bfae <_dtoa_r+0xa6e>
 800bfa8:	9b02      	ldr	r3, [sp, #8]
 800bfaa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800bfae:	9b01      	ldr	r3, [sp, #4]
 800bfb0:	f883 9000 	strb.w	r9, [r3]
 800bfb4:	e774      	b.n	800bea0 <_dtoa_r+0x960>
 800bfb6:	4638      	mov	r0, r7
 800bfb8:	e7ba      	b.n	800bf30 <_dtoa_r+0x9f0>
 800bfba:	2201      	movs	r2, #1
 800bfbc:	e7e1      	b.n	800bf82 <_dtoa_r+0xa42>
 800bfbe:	9b05      	ldr	r3, [sp, #20]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	db04      	blt.n	800bfce <_dtoa_r+0xa8e>
 800bfc4:	9907      	ldr	r1, [sp, #28]
 800bfc6:	430b      	orrs	r3, r1
 800bfc8:	9906      	ldr	r1, [sp, #24]
 800bfca:	430b      	orrs	r3, r1
 800bfcc:	d120      	bne.n	800c010 <_dtoa_r+0xad0>
 800bfce:	2a00      	cmp	r2, #0
 800bfd0:	dded      	ble.n	800bfae <_dtoa_r+0xa6e>
 800bfd2:	4651      	mov	r1, sl
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	f000 fb00 	bl	800c5dc <__lshift>
 800bfdc:	4631      	mov	r1, r6
 800bfde:	4682      	mov	sl, r0
 800bfe0:	f000 fb68 	bl	800c6b4 <__mcmp>
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	dc03      	bgt.n	800bff0 <_dtoa_r+0xab0>
 800bfe8:	d1e1      	bne.n	800bfae <_dtoa_r+0xa6e>
 800bfea:	f019 0f01 	tst.w	r9, #1
 800bfee:	d0de      	beq.n	800bfae <_dtoa_r+0xa6e>
 800bff0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bff4:	d1d8      	bne.n	800bfa8 <_dtoa_r+0xa68>
 800bff6:	9a01      	ldr	r2, [sp, #4]
 800bff8:	2339      	movs	r3, #57	; 0x39
 800bffa:	7013      	strb	r3, [r2, #0]
 800bffc:	462b      	mov	r3, r5
 800bffe:	461d      	mov	r5, r3
 800c000:	3b01      	subs	r3, #1
 800c002:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c006:	2a39      	cmp	r2, #57	; 0x39
 800c008:	d06c      	beq.n	800c0e4 <_dtoa_r+0xba4>
 800c00a:	3201      	adds	r2, #1
 800c00c:	701a      	strb	r2, [r3, #0]
 800c00e:	e747      	b.n	800bea0 <_dtoa_r+0x960>
 800c010:	2a00      	cmp	r2, #0
 800c012:	dd07      	ble.n	800c024 <_dtoa_r+0xae4>
 800c014:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c018:	d0ed      	beq.n	800bff6 <_dtoa_r+0xab6>
 800c01a:	9a01      	ldr	r2, [sp, #4]
 800c01c:	f109 0301 	add.w	r3, r9, #1
 800c020:	7013      	strb	r3, [r2, #0]
 800c022:	e73d      	b.n	800bea0 <_dtoa_r+0x960>
 800c024:	9b04      	ldr	r3, [sp, #16]
 800c026:	9a08      	ldr	r2, [sp, #32]
 800c028:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d043      	beq.n	800c0b8 <_dtoa_r+0xb78>
 800c030:	4651      	mov	r1, sl
 800c032:	2300      	movs	r3, #0
 800c034:	220a      	movs	r2, #10
 800c036:	4620      	mov	r0, r4
 800c038:	f000 f922 	bl	800c280 <__multadd>
 800c03c:	45b8      	cmp	r8, r7
 800c03e:	4682      	mov	sl, r0
 800c040:	f04f 0300 	mov.w	r3, #0
 800c044:	f04f 020a 	mov.w	r2, #10
 800c048:	4641      	mov	r1, r8
 800c04a:	4620      	mov	r0, r4
 800c04c:	d107      	bne.n	800c05e <_dtoa_r+0xb1e>
 800c04e:	f000 f917 	bl	800c280 <__multadd>
 800c052:	4680      	mov	r8, r0
 800c054:	4607      	mov	r7, r0
 800c056:	9b04      	ldr	r3, [sp, #16]
 800c058:	3301      	adds	r3, #1
 800c05a:	9304      	str	r3, [sp, #16]
 800c05c:	e775      	b.n	800bf4a <_dtoa_r+0xa0a>
 800c05e:	f000 f90f 	bl	800c280 <__multadd>
 800c062:	4639      	mov	r1, r7
 800c064:	4680      	mov	r8, r0
 800c066:	2300      	movs	r3, #0
 800c068:	220a      	movs	r2, #10
 800c06a:	4620      	mov	r0, r4
 800c06c:	f000 f908 	bl	800c280 <__multadd>
 800c070:	4607      	mov	r7, r0
 800c072:	e7f0      	b.n	800c056 <_dtoa_r+0xb16>
 800c074:	9b04      	ldr	r3, [sp, #16]
 800c076:	9301      	str	r3, [sp, #4]
 800c078:	9d00      	ldr	r5, [sp, #0]
 800c07a:	4631      	mov	r1, r6
 800c07c:	4650      	mov	r0, sl
 800c07e:	f7ff f9d5 	bl	800b42c <quorem>
 800c082:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c086:	9b00      	ldr	r3, [sp, #0]
 800c088:	f805 9b01 	strb.w	r9, [r5], #1
 800c08c:	1aea      	subs	r2, r5, r3
 800c08e:	9b01      	ldr	r3, [sp, #4]
 800c090:	4293      	cmp	r3, r2
 800c092:	dd07      	ble.n	800c0a4 <_dtoa_r+0xb64>
 800c094:	4651      	mov	r1, sl
 800c096:	2300      	movs	r3, #0
 800c098:	220a      	movs	r2, #10
 800c09a:	4620      	mov	r0, r4
 800c09c:	f000 f8f0 	bl	800c280 <__multadd>
 800c0a0:	4682      	mov	sl, r0
 800c0a2:	e7ea      	b.n	800c07a <_dtoa_r+0xb3a>
 800c0a4:	9b01      	ldr	r3, [sp, #4]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	bfc8      	it	gt
 800c0aa:	461d      	movgt	r5, r3
 800c0ac:	9b00      	ldr	r3, [sp, #0]
 800c0ae:	bfd8      	it	le
 800c0b0:	2501      	movle	r5, #1
 800c0b2:	441d      	add	r5, r3
 800c0b4:	f04f 0800 	mov.w	r8, #0
 800c0b8:	4651      	mov	r1, sl
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	4620      	mov	r0, r4
 800c0be:	f000 fa8d 	bl	800c5dc <__lshift>
 800c0c2:	4631      	mov	r1, r6
 800c0c4:	4682      	mov	sl, r0
 800c0c6:	f000 faf5 	bl	800c6b4 <__mcmp>
 800c0ca:	2800      	cmp	r0, #0
 800c0cc:	dc96      	bgt.n	800bffc <_dtoa_r+0xabc>
 800c0ce:	d102      	bne.n	800c0d6 <_dtoa_r+0xb96>
 800c0d0:	f019 0f01 	tst.w	r9, #1
 800c0d4:	d192      	bne.n	800bffc <_dtoa_r+0xabc>
 800c0d6:	462b      	mov	r3, r5
 800c0d8:	461d      	mov	r5, r3
 800c0da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0de:	2a30      	cmp	r2, #48	; 0x30
 800c0e0:	d0fa      	beq.n	800c0d8 <_dtoa_r+0xb98>
 800c0e2:	e6dd      	b.n	800bea0 <_dtoa_r+0x960>
 800c0e4:	9a00      	ldr	r2, [sp, #0]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d189      	bne.n	800bffe <_dtoa_r+0xabe>
 800c0ea:	f10b 0b01 	add.w	fp, fp, #1
 800c0ee:	2331      	movs	r3, #49	; 0x31
 800c0f0:	e796      	b.n	800c020 <_dtoa_r+0xae0>
 800c0f2:	4b0a      	ldr	r3, [pc, #40]	; (800c11c <_dtoa_r+0xbdc>)
 800c0f4:	f7ff ba99 	b.w	800b62a <_dtoa_r+0xea>
 800c0f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f47f aa6d 	bne.w	800b5da <_dtoa_r+0x9a>
 800c100:	4b07      	ldr	r3, [pc, #28]	; (800c120 <_dtoa_r+0xbe0>)
 800c102:	f7ff ba92 	b.w	800b62a <_dtoa_r+0xea>
 800c106:	9b01      	ldr	r3, [sp, #4]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	dcb5      	bgt.n	800c078 <_dtoa_r+0xb38>
 800c10c:	9b07      	ldr	r3, [sp, #28]
 800c10e:	2b02      	cmp	r3, #2
 800c110:	f73f aeb1 	bgt.w	800be76 <_dtoa_r+0x936>
 800c114:	e7b0      	b.n	800c078 <_dtoa_r+0xb38>
 800c116:	bf00      	nop
 800c118:	08010fa3 	.word	0x08010fa3
 800c11c:	08010e6d 	.word	0x08010e6d
 800c120:	08010f3e 	.word	0x08010f3e

0800c124 <_free_r>:
 800c124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c126:	2900      	cmp	r1, #0
 800c128:	d044      	beq.n	800c1b4 <_free_r+0x90>
 800c12a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c12e:	9001      	str	r0, [sp, #4]
 800c130:	2b00      	cmp	r3, #0
 800c132:	f1a1 0404 	sub.w	r4, r1, #4
 800c136:	bfb8      	it	lt
 800c138:	18e4      	addlt	r4, r4, r3
 800c13a:	f7fe fa35 	bl	800a5a8 <__malloc_lock>
 800c13e:	4a1e      	ldr	r2, [pc, #120]	; (800c1b8 <_free_r+0x94>)
 800c140:	9801      	ldr	r0, [sp, #4]
 800c142:	6813      	ldr	r3, [r2, #0]
 800c144:	b933      	cbnz	r3, 800c154 <_free_r+0x30>
 800c146:	6063      	str	r3, [r4, #4]
 800c148:	6014      	str	r4, [r2, #0]
 800c14a:	b003      	add	sp, #12
 800c14c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c150:	f7fe ba30 	b.w	800a5b4 <__malloc_unlock>
 800c154:	42a3      	cmp	r3, r4
 800c156:	d908      	bls.n	800c16a <_free_r+0x46>
 800c158:	6825      	ldr	r5, [r4, #0]
 800c15a:	1961      	adds	r1, r4, r5
 800c15c:	428b      	cmp	r3, r1
 800c15e:	bf01      	itttt	eq
 800c160:	6819      	ldreq	r1, [r3, #0]
 800c162:	685b      	ldreq	r3, [r3, #4]
 800c164:	1949      	addeq	r1, r1, r5
 800c166:	6021      	streq	r1, [r4, #0]
 800c168:	e7ed      	b.n	800c146 <_free_r+0x22>
 800c16a:	461a      	mov	r2, r3
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	b10b      	cbz	r3, 800c174 <_free_r+0x50>
 800c170:	42a3      	cmp	r3, r4
 800c172:	d9fa      	bls.n	800c16a <_free_r+0x46>
 800c174:	6811      	ldr	r1, [r2, #0]
 800c176:	1855      	adds	r5, r2, r1
 800c178:	42a5      	cmp	r5, r4
 800c17a:	d10b      	bne.n	800c194 <_free_r+0x70>
 800c17c:	6824      	ldr	r4, [r4, #0]
 800c17e:	4421      	add	r1, r4
 800c180:	1854      	adds	r4, r2, r1
 800c182:	42a3      	cmp	r3, r4
 800c184:	6011      	str	r1, [r2, #0]
 800c186:	d1e0      	bne.n	800c14a <_free_r+0x26>
 800c188:	681c      	ldr	r4, [r3, #0]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	6053      	str	r3, [r2, #4]
 800c18e:	440c      	add	r4, r1
 800c190:	6014      	str	r4, [r2, #0]
 800c192:	e7da      	b.n	800c14a <_free_r+0x26>
 800c194:	d902      	bls.n	800c19c <_free_r+0x78>
 800c196:	230c      	movs	r3, #12
 800c198:	6003      	str	r3, [r0, #0]
 800c19a:	e7d6      	b.n	800c14a <_free_r+0x26>
 800c19c:	6825      	ldr	r5, [r4, #0]
 800c19e:	1961      	adds	r1, r4, r5
 800c1a0:	428b      	cmp	r3, r1
 800c1a2:	bf04      	itt	eq
 800c1a4:	6819      	ldreq	r1, [r3, #0]
 800c1a6:	685b      	ldreq	r3, [r3, #4]
 800c1a8:	6063      	str	r3, [r4, #4]
 800c1aa:	bf04      	itt	eq
 800c1ac:	1949      	addeq	r1, r1, r5
 800c1ae:	6021      	streq	r1, [r4, #0]
 800c1b0:	6054      	str	r4, [r2, #4]
 800c1b2:	e7ca      	b.n	800c14a <_free_r+0x26>
 800c1b4:	b003      	add	sp, #12
 800c1b6:	bd30      	pop	{r4, r5, pc}
 800c1b8:	200015f0 	.word	0x200015f0

0800c1bc <_Balloc>:
 800c1bc:	b570      	push	{r4, r5, r6, lr}
 800c1be:	69c6      	ldr	r6, [r0, #28]
 800c1c0:	4604      	mov	r4, r0
 800c1c2:	460d      	mov	r5, r1
 800c1c4:	b976      	cbnz	r6, 800c1e4 <_Balloc+0x28>
 800c1c6:	2010      	movs	r0, #16
 800c1c8:	f7fe f93e 	bl	800a448 <malloc>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	61e0      	str	r0, [r4, #28]
 800c1d0:	b920      	cbnz	r0, 800c1dc <_Balloc+0x20>
 800c1d2:	4b18      	ldr	r3, [pc, #96]	; (800c234 <_Balloc+0x78>)
 800c1d4:	4818      	ldr	r0, [pc, #96]	; (800c238 <_Balloc+0x7c>)
 800c1d6:	216b      	movs	r1, #107	; 0x6b
 800c1d8:	f7ff f90a 	bl	800b3f0 <__assert_func>
 800c1dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1e0:	6006      	str	r6, [r0, #0]
 800c1e2:	60c6      	str	r6, [r0, #12]
 800c1e4:	69e6      	ldr	r6, [r4, #28]
 800c1e6:	68f3      	ldr	r3, [r6, #12]
 800c1e8:	b183      	cbz	r3, 800c20c <_Balloc+0x50>
 800c1ea:	69e3      	ldr	r3, [r4, #28]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c1f2:	b9b8      	cbnz	r0, 800c224 <_Balloc+0x68>
 800c1f4:	2101      	movs	r1, #1
 800c1f6:	fa01 f605 	lsl.w	r6, r1, r5
 800c1fa:	1d72      	adds	r2, r6, #5
 800c1fc:	0092      	lsls	r2, r2, #2
 800c1fe:	4620      	mov	r0, r4
 800c200:	f000 fd91 	bl	800cd26 <_calloc_r>
 800c204:	b160      	cbz	r0, 800c220 <_Balloc+0x64>
 800c206:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c20a:	e00e      	b.n	800c22a <_Balloc+0x6e>
 800c20c:	2221      	movs	r2, #33	; 0x21
 800c20e:	2104      	movs	r1, #4
 800c210:	4620      	mov	r0, r4
 800c212:	f000 fd88 	bl	800cd26 <_calloc_r>
 800c216:	69e3      	ldr	r3, [r4, #28]
 800c218:	60f0      	str	r0, [r6, #12]
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d1e4      	bne.n	800c1ea <_Balloc+0x2e>
 800c220:	2000      	movs	r0, #0
 800c222:	bd70      	pop	{r4, r5, r6, pc}
 800c224:	6802      	ldr	r2, [r0, #0]
 800c226:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c22a:	2300      	movs	r3, #0
 800c22c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c230:	e7f7      	b.n	800c222 <_Balloc+0x66>
 800c232:	bf00      	nop
 800c234:	08010e91 	.word	0x08010e91
 800c238:	08010fb4 	.word	0x08010fb4

0800c23c <_Bfree>:
 800c23c:	b570      	push	{r4, r5, r6, lr}
 800c23e:	69c6      	ldr	r6, [r0, #28]
 800c240:	4605      	mov	r5, r0
 800c242:	460c      	mov	r4, r1
 800c244:	b976      	cbnz	r6, 800c264 <_Bfree+0x28>
 800c246:	2010      	movs	r0, #16
 800c248:	f7fe f8fe 	bl	800a448 <malloc>
 800c24c:	4602      	mov	r2, r0
 800c24e:	61e8      	str	r0, [r5, #28]
 800c250:	b920      	cbnz	r0, 800c25c <_Bfree+0x20>
 800c252:	4b09      	ldr	r3, [pc, #36]	; (800c278 <_Bfree+0x3c>)
 800c254:	4809      	ldr	r0, [pc, #36]	; (800c27c <_Bfree+0x40>)
 800c256:	218f      	movs	r1, #143	; 0x8f
 800c258:	f7ff f8ca 	bl	800b3f0 <__assert_func>
 800c25c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c260:	6006      	str	r6, [r0, #0]
 800c262:	60c6      	str	r6, [r0, #12]
 800c264:	b13c      	cbz	r4, 800c276 <_Bfree+0x3a>
 800c266:	69eb      	ldr	r3, [r5, #28]
 800c268:	6862      	ldr	r2, [r4, #4]
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c270:	6021      	str	r1, [r4, #0]
 800c272:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c276:	bd70      	pop	{r4, r5, r6, pc}
 800c278:	08010e91 	.word	0x08010e91
 800c27c:	08010fb4 	.word	0x08010fb4

0800c280 <__multadd>:
 800c280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c284:	690d      	ldr	r5, [r1, #16]
 800c286:	4607      	mov	r7, r0
 800c288:	460c      	mov	r4, r1
 800c28a:	461e      	mov	r6, r3
 800c28c:	f101 0c14 	add.w	ip, r1, #20
 800c290:	2000      	movs	r0, #0
 800c292:	f8dc 3000 	ldr.w	r3, [ip]
 800c296:	b299      	uxth	r1, r3
 800c298:	fb02 6101 	mla	r1, r2, r1, r6
 800c29c:	0c1e      	lsrs	r6, r3, #16
 800c29e:	0c0b      	lsrs	r3, r1, #16
 800c2a0:	fb02 3306 	mla	r3, r2, r6, r3
 800c2a4:	b289      	uxth	r1, r1
 800c2a6:	3001      	adds	r0, #1
 800c2a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c2ac:	4285      	cmp	r5, r0
 800c2ae:	f84c 1b04 	str.w	r1, [ip], #4
 800c2b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c2b6:	dcec      	bgt.n	800c292 <__multadd+0x12>
 800c2b8:	b30e      	cbz	r6, 800c2fe <__multadd+0x7e>
 800c2ba:	68a3      	ldr	r3, [r4, #8]
 800c2bc:	42ab      	cmp	r3, r5
 800c2be:	dc19      	bgt.n	800c2f4 <__multadd+0x74>
 800c2c0:	6861      	ldr	r1, [r4, #4]
 800c2c2:	4638      	mov	r0, r7
 800c2c4:	3101      	adds	r1, #1
 800c2c6:	f7ff ff79 	bl	800c1bc <_Balloc>
 800c2ca:	4680      	mov	r8, r0
 800c2cc:	b928      	cbnz	r0, 800c2da <__multadd+0x5a>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	4b0c      	ldr	r3, [pc, #48]	; (800c304 <__multadd+0x84>)
 800c2d2:	480d      	ldr	r0, [pc, #52]	; (800c308 <__multadd+0x88>)
 800c2d4:	21ba      	movs	r1, #186	; 0xba
 800c2d6:	f7ff f88b 	bl	800b3f0 <__assert_func>
 800c2da:	6922      	ldr	r2, [r4, #16]
 800c2dc:	3202      	adds	r2, #2
 800c2de:	f104 010c 	add.w	r1, r4, #12
 800c2e2:	0092      	lsls	r2, r2, #2
 800c2e4:	300c      	adds	r0, #12
 800c2e6:	f7ff f875 	bl	800b3d4 <memcpy>
 800c2ea:	4621      	mov	r1, r4
 800c2ec:	4638      	mov	r0, r7
 800c2ee:	f7ff ffa5 	bl	800c23c <_Bfree>
 800c2f2:	4644      	mov	r4, r8
 800c2f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c2f8:	3501      	adds	r5, #1
 800c2fa:	615e      	str	r6, [r3, #20]
 800c2fc:	6125      	str	r5, [r4, #16]
 800c2fe:	4620      	mov	r0, r4
 800c300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c304:	08010fa3 	.word	0x08010fa3
 800c308:	08010fb4 	.word	0x08010fb4

0800c30c <__hi0bits>:
 800c30c:	0c03      	lsrs	r3, r0, #16
 800c30e:	041b      	lsls	r3, r3, #16
 800c310:	b9d3      	cbnz	r3, 800c348 <__hi0bits+0x3c>
 800c312:	0400      	lsls	r0, r0, #16
 800c314:	2310      	movs	r3, #16
 800c316:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c31a:	bf04      	itt	eq
 800c31c:	0200      	lsleq	r0, r0, #8
 800c31e:	3308      	addeq	r3, #8
 800c320:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c324:	bf04      	itt	eq
 800c326:	0100      	lsleq	r0, r0, #4
 800c328:	3304      	addeq	r3, #4
 800c32a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c32e:	bf04      	itt	eq
 800c330:	0080      	lsleq	r0, r0, #2
 800c332:	3302      	addeq	r3, #2
 800c334:	2800      	cmp	r0, #0
 800c336:	db05      	blt.n	800c344 <__hi0bits+0x38>
 800c338:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c33c:	f103 0301 	add.w	r3, r3, #1
 800c340:	bf08      	it	eq
 800c342:	2320      	moveq	r3, #32
 800c344:	4618      	mov	r0, r3
 800c346:	4770      	bx	lr
 800c348:	2300      	movs	r3, #0
 800c34a:	e7e4      	b.n	800c316 <__hi0bits+0xa>

0800c34c <__lo0bits>:
 800c34c:	6803      	ldr	r3, [r0, #0]
 800c34e:	f013 0207 	ands.w	r2, r3, #7
 800c352:	d00c      	beq.n	800c36e <__lo0bits+0x22>
 800c354:	07d9      	lsls	r1, r3, #31
 800c356:	d422      	bmi.n	800c39e <__lo0bits+0x52>
 800c358:	079a      	lsls	r2, r3, #30
 800c35a:	bf49      	itett	mi
 800c35c:	085b      	lsrmi	r3, r3, #1
 800c35e:	089b      	lsrpl	r3, r3, #2
 800c360:	6003      	strmi	r3, [r0, #0]
 800c362:	2201      	movmi	r2, #1
 800c364:	bf5c      	itt	pl
 800c366:	6003      	strpl	r3, [r0, #0]
 800c368:	2202      	movpl	r2, #2
 800c36a:	4610      	mov	r0, r2
 800c36c:	4770      	bx	lr
 800c36e:	b299      	uxth	r1, r3
 800c370:	b909      	cbnz	r1, 800c376 <__lo0bits+0x2a>
 800c372:	0c1b      	lsrs	r3, r3, #16
 800c374:	2210      	movs	r2, #16
 800c376:	b2d9      	uxtb	r1, r3
 800c378:	b909      	cbnz	r1, 800c37e <__lo0bits+0x32>
 800c37a:	3208      	adds	r2, #8
 800c37c:	0a1b      	lsrs	r3, r3, #8
 800c37e:	0719      	lsls	r1, r3, #28
 800c380:	bf04      	itt	eq
 800c382:	091b      	lsreq	r3, r3, #4
 800c384:	3204      	addeq	r2, #4
 800c386:	0799      	lsls	r1, r3, #30
 800c388:	bf04      	itt	eq
 800c38a:	089b      	lsreq	r3, r3, #2
 800c38c:	3202      	addeq	r2, #2
 800c38e:	07d9      	lsls	r1, r3, #31
 800c390:	d403      	bmi.n	800c39a <__lo0bits+0x4e>
 800c392:	085b      	lsrs	r3, r3, #1
 800c394:	f102 0201 	add.w	r2, r2, #1
 800c398:	d003      	beq.n	800c3a2 <__lo0bits+0x56>
 800c39a:	6003      	str	r3, [r0, #0]
 800c39c:	e7e5      	b.n	800c36a <__lo0bits+0x1e>
 800c39e:	2200      	movs	r2, #0
 800c3a0:	e7e3      	b.n	800c36a <__lo0bits+0x1e>
 800c3a2:	2220      	movs	r2, #32
 800c3a4:	e7e1      	b.n	800c36a <__lo0bits+0x1e>
	...

0800c3a8 <__i2b>:
 800c3a8:	b510      	push	{r4, lr}
 800c3aa:	460c      	mov	r4, r1
 800c3ac:	2101      	movs	r1, #1
 800c3ae:	f7ff ff05 	bl	800c1bc <_Balloc>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	b928      	cbnz	r0, 800c3c2 <__i2b+0x1a>
 800c3b6:	4b05      	ldr	r3, [pc, #20]	; (800c3cc <__i2b+0x24>)
 800c3b8:	4805      	ldr	r0, [pc, #20]	; (800c3d0 <__i2b+0x28>)
 800c3ba:	f240 1145 	movw	r1, #325	; 0x145
 800c3be:	f7ff f817 	bl	800b3f0 <__assert_func>
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	6144      	str	r4, [r0, #20]
 800c3c6:	6103      	str	r3, [r0, #16]
 800c3c8:	bd10      	pop	{r4, pc}
 800c3ca:	bf00      	nop
 800c3cc:	08010fa3 	.word	0x08010fa3
 800c3d0:	08010fb4 	.word	0x08010fb4

0800c3d4 <__multiply>:
 800c3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d8:	4691      	mov	r9, r2
 800c3da:	690a      	ldr	r2, [r1, #16]
 800c3dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	bfb8      	it	lt
 800c3e4:	460b      	movlt	r3, r1
 800c3e6:	460c      	mov	r4, r1
 800c3e8:	bfbc      	itt	lt
 800c3ea:	464c      	movlt	r4, r9
 800c3ec:	4699      	movlt	r9, r3
 800c3ee:	6927      	ldr	r7, [r4, #16]
 800c3f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c3f4:	68a3      	ldr	r3, [r4, #8]
 800c3f6:	6861      	ldr	r1, [r4, #4]
 800c3f8:	eb07 060a 	add.w	r6, r7, sl
 800c3fc:	42b3      	cmp	r3, r6
 800c3fe:	b085      	sub	sp, #20
 800c400:	bfb8      	it	lt
 800c402:	3101      	addlt	r1, #1
 800c404:	f7ff feda 	bl	800c1bc <_Balloc>
 800c408:	b930      	cbnz	r0, 800c418 <__multiply+0x44>
 800c40a:	4602      	mov	r2, r0
 800c40c:	4b44      	ldr	r3, [pc, #272]	; (800c520 <__multiply+0x14c>)
 800c40e:	4845      	ldr	r0, [pc, #276]	; (800c524 <__multiply+0x150>)
 800c410:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c414:	f7fe ffec 	bl	800b3f0 <__assert_func>
 800c418:	f100 0514 	add.w	r5, r0, #20
 800c41c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c420:	462b      	mov	r3, r5
 800c422:	2200      	movs	r2, #0
 800c424:	4543      	cmp	r3, r8
 800c426:	d321      	bcc.n	800c46c <__multiply+0x98>
 800c428:	f104 0314 	add.w	r3, r4, #20
 800c42c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c430:	f109 0314 	add.w	r3, r9, #20
 800c434:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c438:	9202      	str	r2, [sp, #8]
 800c43a:	1b3a      	subs	r2, r7, r4
 800c43c:	3a15      	subs	r2, #21
 800c43e:	f022 0203 	bic.w	r2, r2, #3
 800c442:	3204      	adds	r2, #4
 800c444:	f104 0115 	add.w	r1, r4, #21
 800c448:	428f      	cmp	r7, r1
 800c44a:	bf38      	it	cc
 800c44c:	2204      	movcc	r2, #4
 800c44e:	9201      	str	r2, [sp, #4]
 800c450:	9a02      	ldr	r2, [sp, #8]
 800c452:	9303      	str	r3, [sp, #12]
 800c454:	429a      	cmp	r2, r3
 800c456:	d80c      	bhi.n	800c472 <__multiply+0x9e>
 800c458:	2e00      	cmp	r6, #0
 800c45a:	dd03      	ble.n	800c464 <__multiply+0x90>
 800c45c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c460:	2b00      	cmp	r3, #0
 800c462:	d05b      	beq.n	800c51c <__multiply+0x148>
 800c464:	6106      	str	r6, [r0, #16]
 800c466:	b005      	add	sp, #20
 800c468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c46c:	f843 2b04 	str.w	r2, [r3], #4
 800c470:	e7d8      	b.n	800c424 <__multiply+0x50>
 800c472:	f8b3 a000 	ldrh.w	sl, [r3]
 800c476:	f1ba 0f00 	cmp.w	sl, #0
 800c47a:	d024      	beq.n	800c4c6 <__multiply+0xf2>
 800c47c:	f104 0e14 	add.w	lr, r4, #20
 800c480:	46a9      	mov	r9, r5
 800c482:	f04f 0c00 	mov.w	ip, #0
 800c486:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c48a:	f8d9 1000 	ldr.w	r1, [r9]
 800c48e:	fa1f fb82 	uxth.w	fp, r2
 800c492:	b289      	uxth	r1, r1
 800c494:	fb0a 110b 	mla	r1, sl, fp, r1
 800c498:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c49c:	f8d9 2000 	ldr.w	r2, [r9]
 800c4a0:	4461      	add	r1, ip
 800c4a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c4a6:	fb0a c20b 	mla	r2, sl, fp, ip
 800c4aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c4ae:	b289      	uxth	r1, r1
 800c4b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c4b4:	4577      	cmp	r7, lr
 800c4b6:	f849 1b04 	str.w	r1, [r9], #4
 800c4ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c4be:	d8e2      	bhi.n	800c486 <__multiply+0xb2>
 800c4c0:	9a01      	ldr	r2, [sp, #4]
 800c4c2:	f845 c002 	str.w	ip, [r5, r2]
 800c4c6:	9a03      	ldr	r2, [sp, #12]
 800c4c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c4cc:	3304      	adds	r3, #4
 800c4ce:	f1b9 0f00 	cmp.w	r9, #0
 800c4d2:	d021      	beq.n	800c518 <__multiply+0x144>
 800c4d4:	6829      	ldr	r1, [r5, #0]
 800c4d6:	f104 0c14 	add.w	ip, r4, #20
 800c4da:	46ae      	mov	lr, r5
 800c4dc:	f04f 0a00 	mov.w	sl, #0
 800c4e0:	f8bc b000 	ldrh.w	fp, [ip]
 800c4e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c4e8:	fb09 220b 	mla	r2, r9, fp, r2
 800c4ec:	4452      	add	r2, sl
 800c4ee:	b289      	uxth	r1, r1
 800c4f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c4f4:	f84e 1b04 	str.w	r1, [lr], #4
 800c4f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c4fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c500:	f8be 1000 	ldrh.w	r1, [lr]
 800c504:	fb09 110a 	mla	r1, r9, sl, r1
 800c508:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c50c:	4567      	cmp	r7, ip
 800c50e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c512:	d8e5      	bhi.n	800c4e0 <__multiply+0x10c>
 800c514:	9a01      	ldr	r2, [sp, #4]
 800c516:	50a9      	str	r1, [r5, r2]
 800c518:	3504      	adds	r5, #4
 800c51a:	e799      	b.n	800c450 <__multiply+0x7c>
 800c51c:	3e01      	subs	r6, #1
 800c51e:	e79b      	b.n	800c458 <__multiply+0x84>
 800c520:	08010fa3 	.word	0x08010fa3
 800c524:	08010fb4 	.word	0x08010fb4

0800c528 <__pow5mult>:
 800c528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c52c:	4615      	mov	r5, r2
 800c52e:	f012 0203 	ands.w	r2, r2, #3
 800c532:	4606      	mov	r6, r0
 800c534:	460f      	mov	r7, r1
 800c536:	d007      	beq.n	800c548 <__pow5mult+0x20>
 800c538:	4c25      	ldr	r4, [pc, #148]	; (800c5d0 <__pow5mult+0xa8>)
 800c53a:	3a01      	subs	r2, #1
 800c53c:	2300      	movs	r3, #0
 800c53e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c542:	f7ff fe9d 	bl	800c280 <__multadd>
 800c546:	4607      	mov	r7, r0
 800c548:	10ad      	asrs	r5, r5, #2
 800c54a:	d03d      	beq.n	800c5c8 <__pow5mult+0xa0>
 800c54c:	69f4      	ldr	r4, [r6, #28]
 800c54e:	b97c      	cbnz	r4, 800c570 <__pow5mult+0x48>
 800c550:	2010      	movs	r0, #16
 800c552:	f7fd ff79 	bl	800a448 <malloc>
 800c556:	4602      	mov	r2, r0
 800c558:	61f0      	str	r0, [r6, #28]
 800c55a:	b928      	cbnz	r0, 800c568 <__pow5mult+0x40>
 800c55c:	4b1d      	ldr	r3, [pc, #116]	; (800c5d4 <__pow5mult+0xac>)
 800c55e:	481e      	ldr	r0, [pc, #120]	; (800c5d8 <__pow5mult+0xb0>)
 800c560:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c564:	f7fe ff44 	bl	800b3f0 <__assert_func>
 800c568:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c56c:	6004      	str	r4, [r0, #0]
 800c56e:	60c4      	str	r4, [r0, #12]
 800c570:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c574:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c578:	b94c      	cbnz	r4, 800c58e <__pow5mult+0x66>
 800c57a:	f240 2171 	movw	r1, #625	; 0x271
 800c57e:	4630      	mov	r0, r6
 800c580:	f7ff ff12 	bl	800c3a8 <__i2b>
 800c584:	2300      	movs	r3, #0
 800c586:	f8c8 0008 	str.w	r0, [r8, #8]
 800c58a:	4604      	mov	r4, r0
 800c58c:	6003      	str	r3, [r0, #0]
 800c58e:	f04f 0900 	mov.w	r9, #0
 800c592:	07eb      	lsls	r3, r5, #31
 800c594:	d50a      	bpl.n	800c5ac <__pow5mult+0x84>
 800c596:	4639      	mov	r1, r7
 800c598:	4622      	mov	r2, r4
 800c59a:	4630      	mov	r0, r6
 800c59c:	f7ff ff1a 	bl	800c3d4 <__multiply>
 800c5a0:	4639      	mov	r1, r7
 800c5a2:	4680      	mov	r8, r0
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	f7ff fe49 	bl	800c23c <_Bfree>
 800c5aa:	4647      	mov	r7, r8
 800c5ac:	106d      	asrs	r5, r5, #1
 800c5ae:	d00b      	beq.n	800c5c8 <__pow5mult+0xa0>
 800c5b0:	6820      	ldr	r0, [r4, #0]
 800c5b2:	b938      	cbnz	r0, 800c5c4 <__pow5mult+0x9c>
 800c5b4:	4622      	mov	r2, r4
 800c5b6:	4621      	mov	r1, r4
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	f7ff ff0b 	bl	800c3d4 <__multiply>
 800c5be:	6020      	str	r0, [r4, #0]
 800c5c0:	f8c0 9000 	str.w	r9, [r0]
 800c5c4:	4604      	mov	r4, r0
 800c5c6:	e7e4      	b.n	800c592 <__pow5mult+0x6a>
 800c5c8:	4638      	mov	r0, r7
 800c5ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5ce:	bf00      	nop
 800c5d0:	08011100 	.word	0x08011100
 800c5d4:	08010e91 	.word	0x08010e91
 800c5d8:	08010fb4 	.word	0x08010fb4

0800c5dc <__lshift>:
 800c5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5e0:	460c      	mov	r4, r1
 800c5e2:	6849      	ldr	r1, [r1, #4]
 800c5e4:	6923      	ldr	r3, [r4, #16]
 800c5e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c5ea:	68a3      	ldr	r3, [r4, #8]
 800c5ec:	4607      	mov	r7, r0
 800c5ee:	4691      	mov	r9, r2
 800c5f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c5f4:	f108 0601 	add.w	r6, r8, #1
 800c5f8:	42b3      	cmp	r3, r6
 800c5fa:	db0b      	blt.n	800c614 <__lshift+0x38>
 800c5fc:	4638      	mov	r0, r7
 800c5fe:	f7ff fddd 	bl	800c1bc <_Balloc>
 800c602:	4605      	mov	r5, r0
 800c604:	b948      	cbnz	r0, 800c61a <__lshift+0x3e>
 800c606:	4602      	mov	r2, r0
 800c608:	4b28      	ldr	r3, [pc, #160]	; (800c6ac <__lshift+0xd0>)
 800c60a:	4829      	ldr	r0, [pc, #164]	; (800c6b0 <__lshift+0xd4>)
 800c60c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c610:	f7fe feee 	bl	800b3f0 <__assert_func>
 800c614:	3101      	adds	r1, #1
 800c616:	005b      	lsls	r3, r3, #1
 800c618:	e7ee      	b.n	800c5f8 <__lshift+0x1c>
 800c61a:	2300      	movs	r3, #0
 800c61c:	f100 0114 	add.w	r1, r0, #20
 800c620:	f100 0210 	add.w	r2, r0, #16
 800c624:	4618      	mov	r0, r3
 800c626:	4553      	cmp	r3, sl
 800c628:	db33      	blt.n	800c692 <__lshift+0xb6>
 800c62a:	6920      	ldr	r0, [r4, #16]
 800c62c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c630:	f104 0314 	add.w	r3, r4, #20
 800c634:	f019 091f 	ands.w	r9, r9, #31
 800c638:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c63c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c640:	d02b      	beq.n	800c69a <__lshift+0xbe>
 800c642:	f1c9 0e20 	rsb	lr, r9, #32
 800c646:	468a      	mov	sl, r1
 800c648:	2200      	movs	r2, #0
 800c64a:	6818      	ldr	r0, [r3, #0]
 800c64c:	fa00 f009 	lsl.w	r0, r0, r9
 800c650:	4310      	orrs	r0, r2
 800c652:	f84a 0b04 	str.w	r0, [sl], #4
 800c656:	f853 2b04 	ldr.w	r2, [r3], #4
 800c65a:	459c      	cmp	ip, r3
 800c65c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c660:	d8f3      	bhi.n	800c64a <__lshift+0x6e>
 800c662:	ebac 0304 	sub.w	r3, ip, r4
 800c666:	3b15      	subs	r3, #21
 800c668:	f023 0303 	bic.w	r3, r3, #3
 800c66c:	3304      	adds	r3, #4
 800c66e:	f104 0015 	add.w	r0, r4, #21
 800c672:	4584      	cmp	ip, r0
 800c674:	bf38      	it	cc
 800c676:	2304      	movcc	r3, #4
 800c678:	50ca      	str	r2, [r1, r3]
 800c67a:	b10a      	cbz	r2, 800c680 <__lshift+0xa4>
 800c67c:	f108 0602 	add.w	r6, r8, #2
 800c680:	3e01      	subs	r6, #1
 800c682:	4638      	mov	r0, r7
 800c684:	612e      	str	r6, [r5, #16]
 800c686:	4621      	mov	r1, r4
 800c688:	f7ff fdd8 	bl	800c23c <_Bfree>
 800c68c:	4628      	mov	r0, r5
 800c68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c692:	f842 0f04 	str.w	r0, [r2, #4]!
 800c696:	3301      	adds	r3, #1
 800c698:	e7c5      	b.n	800c626 <__lshift+0x4a>
 800c69a:	3904      	subs	r1, #4
 800c69c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c6a4:	459c      	cmp	ip, r3
 800c6a6:	d8f9      	bhi.n	800c69c <__lshift+0xc0>
 800c6a8:	e7ea      	b.n	800c680 <__lshift+0xa4>
 800c6aa:	bf00      	nop
 800c6ac:	08010fa3 	.word	0x08010fa3
 800c6b0:	08010fb4 	.word	0x08010fb4

0800c6b4 <__mcmp>:
 800c6b4:	b530      	push	{r4, r5, lr}
 800c6b6:	6902      	ldr	r2, [r0, #16]
 800c6b8:	690c      	ldr	r4, [r1, #16]
 800c6ba:	1b12      	subs	r2, r2, r4
 800c6bc:	d10e      	bne.n	800c6dc <__mcmp+0x28>
 800c6be:	f100 0314 	add.w	r3, r0, #20
 800c6c2:	3114      	adds	r1, #20
 800c6c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c6c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c6cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c6d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c6d4:	42a5      	cmp	r5, r4
 800c6d6:	d003      	beq.n	800c6e0 <__mcmp+0x2c>
 800c6d8:	d305      	bcc.n	800c6e6 <__mcmp+0x32>
 800c6da:	2201      	movs	r2, #1
 800c6dc:	4610      	mov	r0, r2
 800c6de:	bd30      	pop	{r4, r5, pc}
 800c6e0:	4283      	cmp	r3, r0
 800c6e2:	d3f3      	bcc.n	800c6cc <__mcmp+0x18>
 800c6e4:	e7fa      	b.n	800c6dc <__mcmp+0x28>
 800c6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ea:	e7f7      	b.n	800c6dc <__mcmp+0x28>

0800c6ec <__mdiff>:
 800c6ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f0:	460c      	mov	r4, r1
 800c6f2:	4606      	mov	r6, r0
 800c6f4:	4611      	mov	r1, r2
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	4690      	mov	r8, r2
 800c6fa:	f7ff ffdb 	bl	800c6b4 <__mcmp>
 800c6fe:	1e05      	subs	r5, r0, #0
 800c700:	d110      	bne.n	800c724 <__mdiff+0x38>
 800c702:	4629      	mov	r1, r5
 800c704:	4630      	mov	r0, r6
 800c706:	f7ff fd59 	bl	800c1bc <_Balloc>
 800c70a:	b930      	cbnz	r0, 800c71a <__mdiff+0x2e>
 800c70c:	4b3a      	ldr	r3, [pc, #232]	; (800c7f8 <__mdiff+0x10c>)
 800c70e:	4602      	mov	r2, r0
 800c710:	f240 2137 	movw	r1, #567	; 0x237
 800c714:	4839      	ldr	r0, [pc, #228]	; (800c7fc <__mdiff+0x110>)
 800c716:	f7fe fe6b 	bl	800b3f0 <__assert_func>
 800c71a:	2301      	movs	r3, #1
 800c71c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c720:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c724:	bfa4      	itt	ge
 800c726:	4643      	movge	r3, r8
 800c728:	46a0      	movge	r8, r4
 800c72a:	4630      	mov	r0, r6
 800c72c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c730:	bfa6      	itte	ge
 800c732:	461c      	movge	r4, r3
 800c734:	2500      	movge	r5, #0
 800c736:	2501      	movlt	r5, #1
 800c738:	f7ff fd40 	bl	800c1bc <_Balloc>
 800c73c:	b920      	cbnz	r0, 800c748 <__mdiff+0x5c>
 800c73e:	4b2e      	ldr	r3, [pc, #184]	; (800c7f8 <__mdiff+0x10c>)
 800c740:	4602      	mov	r2, r0
 800c742:	f240 2145 	movw	r1, #581	; 0x245
 800c746:	e7e5      	b.n	800c714 <__mdiff+0x28>
 800c748:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c74c:	6926      	ldr	r6, [r4, #16]
 800c74e:	60c5      	str	r5, [r0, #12]
 800c750:	f104 0914 	add.w	r9, r4, #20
 800c754:	f108 0514 	add.w	r5, r8, #20
 800c758:	f100 0e14 	add.w	lr, r0, #20
 800c75c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c760:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c764:	f108 0210 	add.w	r2, r8, #16
 800c768:	46f2      	mov	sl, lr
 800c76a:	2100      	movs	r1, #0
 800c76c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c770:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c774:	fa11 f88b 	uxtah	r8, r1, fp
 800c778:	b299      	uxth	r1, r3
 800c77a:	0c1b      	lsrs	r3, r3, #16
 800c77c:	eba8 0801 	sub.w	r8, r8, r1
 800c780:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c784:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c788:	fa1f f888 	uxth.w	r8, r8
 800c78c:	1419      	asrs	r1, r3, #16
 800c78e:	454e      	cmp	r6, r9
 800c790:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c794:	f84a 3b04 	str.w	r3, [sl], #4
 800c798:	d8e8      	bhi.n	800c76c <__mdiff+0x80>
 800c79a:	1b33      	subs	r3, r6, r4
 800c79c:	3b15      	subs	r3, #21
 800c79e:	f023 0303 	bic.w	r3, r3, #3
 800c7a2:	3304      	adds	r3, #4
 800c7a4:	3415      	adds	r4, #21
 800c7a6:	42a6      	cmp	r6, r4
 800c7a8:	bf38      	it	cc
 800c7aa:	2304      	movcc	r3, #4
 800c7ac:	441d      	add	r5, r3
 800c7ae:	4473      	add	r3, lr
 800c7b0:	469e      	mov	lr, r3
 800c7b2:	462e      	mov	r6, r5
 800c7b4:	4566      	cmp	r6, ip
 800c7b6:	d30e      	bcc.n	800c7d6 <__mdiff+0xea>
 800c7b8:	f10c 0203 	add.w	r2, ip, #3
 800c7bc:	1b52      	subs	r2, r2, r5
 800c7be:	f022 0203 	bic.w	r2, r2, #3
 800c7c2:	3d03      	subs	r5, #3
 800c7c4:	45ac      	cmp	ip, r5
 800c7c6:	bf38      	it	cc
 800c7c8:	2200      	movcc	r2, #0
 800c7ca:	4413      	add	r3, r2
 800c7cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c7d0:	b17a      	cbz	r2, 800c7f2 <__mdiff+0x106>
 800c7d2:	6107      	str	r7, [r0, #16]
 800c7d4:	e7a4      	b.n	800c720 <__mdiff+0x34>
 800c7d6:	f856 8b04 	ldr.w	r8, [r6], #4
 800c7da:	fa11 f288 	uxtah	r2, r1, r8
 800c7de:	1414      	asrs	r4, r2, #16
 800c7e0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c7e4:	b292      	uxth	r2, r2
 800c7e6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c7ea:	f84e 2b04 	str.w	r2, [lr], #4
 800c7ee:	1421      	asrs	r1, r4, #16
 800c7f0:	e7e0      	b.n	800c7b4 <__mdiff+0xc8>
 800c7f2:	3f01      	subs	r7, #1
 800c7f4:	e7ea      	b.n	800c7cc <__mdiff+0xe0>
 800c7f6:	bf00      	nop
 800c7f8:	08010fa3 	.word	0x08010fa3
 800c7fc:	08010fb4 	.word	0x08010fb4

0800c800 <__d2b>:
 800c800:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c804:	460f      	mov	r7, r1
 800c806:	2101      	movs	r1, #1
 800c808:	ec59 8b10 	vmov	r8, r9, d0
 800c80c:	4616      	mov	r6, r2
 800c80e:	f7ff fcd5 	bl	800c1bc <_Balloc>
 800c812:	4604      	mov	r4, r0
 800c814:	b930      	cbnz	r0, 800c824 <__d2b+0x24>
 800c816:	4602      	mov	r2, r0
 800c818:	4b24      	ldr	r3, [pc, #144]	; (800c8ac <__d2b+0xac>)
 800c81a:	4825      	ldr	r0, [pc, #148]	; (800c8b0 <__d2b+0xb0>)
 800c81c:	f240 310f 	movw	r1, #783	; 0x30f
 800c820:	f7fe fde6 	bl	800b3f0 <__assert_func>
 800c824:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c828:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c82c:	bb2d      	cbnz	r5, 800c87a <__d2b+0x7a>
 800c82e:	9301      	str	r3, [sp, #4]
 800c830:	f1b8 0300 	subs.w	r3, r8, #0
 800c834:	d026      	beq.n	800c884 <__d2b+0x84>
 800c836:	4668      	mov	r0, sp
 800c838:	9300      	str	r3, [sp, #0]
 800c83a:	f7ff fd87 	bl	800c34c <__lo0bits>
 800c83e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c842:	b1e8      	cbz	r0, 800c880 <__d2b+0x80>
 800c844:	f1c0 0320 	rsb	r3, r0, #32
 800c848:	fa02 f303 	lsl.w	r3, r2, r3
 800c84c:	430b      	orrs	r3, r1
 800c84e:	40c2      	lsrs	r2, r0
 800c850:	6163      	str	r3, [r4, #20]
 800c852:	9201      	str	r2, [sp, #4]
 800c854:	9b01      	ldr	r3, [sp, #4]
 800c856:	61a3      	str	r3, [r4, #24]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	bf14      	ite	ne
 800c85c:	2202      	movne	r2, #2
 800c85e:	2201      	moveq	r2, #1
 800c860:	6122      	str	r2, [r4, #16]
 800c862:	b1bd      	cbz	r5, 800c894 <__d2b+0x94>
 800c864:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c868:	4405      	add	r5, r0
 800c86a:	603d      	str	r5, [r7, #0]
 800c86c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c870:	6030      	str	r0, [r6, #0]
 800c872:	4620      	mov	r0, r4
 800c874:	b003      	add	sp, #12
 800c876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c87a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c87e:	e7d6      	b.n	800c82e <__d2b+0x2e>
 800c880:	6161      	str	r1, [r4, #20]
 800c882:	e7e7      	b.n	800c854 <__d2b+0x54>
 800c884:	a801      	add	r0, sp, #4
 800c886:	f7ff fd61 	bl	800c34c <__lo0bits>
 800c88a:	9b01      	ldr	r3, [sp, #4]
 800c88c:	6163      	str	r3, [r4, #20]
 800c88e:	3020      	adds	r0, #32
 800c890:	2201      	movs	r2, #1
 800c892:	e7e5      	b.n	800c860 <__d2b+0x60>
 800c894:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c898:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c89c:	6038      	str	r0, [r7, #0]
 800c89e:	6918      	ldr	r0, [r3, #16]
 800c8a0:	f7ff fd34 	bl	800c30c <__hi0bits>
 800c8a4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c8a8:	e7e2      	b.n	800c870 <__d2b+0x70>
 800c8aa:	bf00      	nop
 800c8ac:	08010fa3 	.word	0x08010fa3
 800c8b0:	08010fb4 	.word	0x08010fb4

0800c8b4 <__ssputs_r>:
 800c8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8b8:	688e      	ldr	r6, [r1, #8]
 800c8ba:	461f      	mov	r7, r3
 800c8bc:	42be      	cmp	r6, r7
 800c8be:	680b      	ldr	r3, [r1, #0]
 800c8c0:	4682      	mov	sl, r0
 800c8c2:	460c      	mov	r4, r1
 800c8c4:	4690      	mov	r8, r2
 800c8c6:	d82c      	bhi.n	800c922 <__ssputs_r+0x6e>
 800c8c8:	898a      	ldrh	r2, [r1, #12]
 800c8ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c8ce:	d026      	beq.n	800c91e <__ssputs_r+0x6a>
 800c8d0:	6965      	ldr	r5, [r4, #20]
 800c8d2:	6909      	ldr	r1, [r1, #16]
 800c8d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8d8:	eba3 0901 	sub.w	r9, r3, r1
 800c8dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8e0:	1c7b      	adds	r3, r7, #1
 800c8e2:	444b      	add	r3, r9
 800c8e4:	106d      	asrs	r5, r5, #1
 800c8e6:	429d      	cmp	r5, r3
 800c8e8:	bf38      	it	cc
 800c8ea:	461d      	movcc	r5, r3
 800c8ec:	0553      	lsls	r3, r2, #21
 800c8ee:	d527      	bpl.n	800c940 <__ssputs_r+0x8c>
 800c8f0:	4629      	mov	r1, r5
 800c8f2:	f7fd fdd9 	bl	800a4a8 <_malloc_r>
 800c8f6:	4606      	mov	r6, r0
 800c8f8:	b360      	cbz	r0, 800c954 <__ssputs_r+0xa0>
 800c8fa:	6921      	ldr	r1, [r4, #16]
 800c8fc:	464a      	mov	r2, r9
 800c8fe:	f7fe fd69 	bl	800b3d4 <memcpy>
 800c902:	89a3      	ldrh	r3, [r4, #12]
 800c904:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c90c:	81a3      	strh	r3, [r4, #12]
 800c90e:	6126      	str	r6, [r4, #16]
 800c910:	6165      	str	r5, [r4, #20]
 800c912:	444e      	add	r6, r9
 800c914:	eba5 0509 	sub.w	r5, r5, r9
 800c918:	6026      	str	r6, [r4, #0]
 800c91a:	60a5      	str	r5, [r4, #8]
 800c91c:	463e      	mov	r6, r7
 800c91e:	42be      	cmp	r6, r7
 800c920:	d900      	bls.n	800c924 <__ssputs_r+0x70>
 800c922:	463e      	mov	r6, r7
 800c924:	6820      	ldr	r0, [r4, #0]
 800c926:	4632      	mov	r2, r6
 800c928:	4641      	mov	r1, r8
 800c92a:	f000 f9db 	bl	800cce4 <memmove>
 800c92e:	68a3      	ldr	r3, [r4, #8]
 800c930:	1b9b      	subs	r3, r3, r6
 800c932:	60a3      	str	r3, [r4, #8]
 800c934:	6823      	ldr	r3, [r4, #0]
 800c936:	4433      	add	r3, r6
 800c938:	6023      	str	r3, [r4, #0]
 800c93a:	2000      	movs	r0, #0
 800c93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c940:	462a      	mov	r2, r5
 800c942:	f000 fa18 	bl	800cd76 <_realloc_r>
 800c946:	4606      	mov	r6, r0
 800c948:	2800      	cmp	r0, #0
 800c94a:	d1e0      	bne.n	800c90e <__ssputs_r+0x5a>
 800c94c:	6921      	ldr	r1, [r4, #16]
 800c94e:	4650      	mov	r0, sl
 800c950:	f7ff fbe8 	bl	800c124 <_free_r>
 800c954:	230c      	movs	r3, #12
 800c956:	f8ca 3000 	str.w	r3, [sl]
 800c95a:	89a3      	ldrh	r3, [r4, #12]
 800c95c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c960:	81a3      	strh	r3, [r4, #12]
 800c962:	f04f 30ff 	mov.w	r0, #4294967295
 800c966:	e7e9      	b.n	800c93c <__ssputs_r+0x88>

0800c968 <_svfiprintf_r>:
 800c968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c96c:	4698      	mov	r8, r3
 800c96e:	898b      	ldrh	r3, [r1, #12]
 800c970:	061b      	lsls	r3, r3, #24
 800c972:	b09d      	sub	sp, #116	; 0x74
 800c974:	4607      	mov	r7, r0
 800c976:	460d      	mov	r5, r1
 800c978:	4614      	mov	r4, r2
 800c97a:	d50e      	bpl.n	800c99a <_svfiprintf_r+0x32>
 800c97c:	690b      	ldr	r3, [r1, #16]
 800c97e:	b963      	cbnz	r3, 800c99a <_svfiprintf_r+0x32>
 800c980:	2140      	movs	r1, #64	; 0x40
 800c982:	f7fd fd91 	bl	800a4a8 <_malloc_r>
 800c986:	6028      	str	r0, [r5, #0]
 800c988:	6128      	str	r0, [r5, #16]
 800c98a:	b920      	cbnz	r0, 800c996 <_svfiprintf_r+0x2e>
 800c98c:	230c      	movs	r3, #12
 800c98e:	603b      	str	r3, [r7, #0]
 800c990:	f04f 30ff 	mov.w	r0, #4294967295
 800c994:	e0d0      	b.n	800cb38 <_svfiprintf_r+0x1d0>
 800c996:	2340      	movs	r3, #64	; 0x40
 800c998:	616b      	str	r3, [r5, #20]
 800c99a:	2300      	movs	r3, #0
 800c99c:	9309      	str	r3, [sp, #36]	; 0x24
 800c99e:	2320      	movs	r3, #32
 800c9a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9a8:	2330      	movs	r3, #48	; 0x30
 800c9aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cb50 <_svfiprintf_r+0x1e8>
 800c9ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9b2:	f04f 0901 	mov.w	r9, #1
 800c9b6:	4623      	mov	r3, r4
 800c9b8:	469a      	mov	sl, r3
 800c9ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9be:	b10a      	cbz	r2, 800c9c4 <_svfiprintf_r+0x5c>
 800c9c0:	2a25      	cmp	r2, #37	; 0x25
 800c9c2:	d1f9      	bne.n	800c9b8 <_svfiprintf_r+0x50>
 800c9c4:	ebba 0b04 	subs.w	fp, sl, r4
 800c9c8:	d00b      	beq.n	800c9e2 <_svfiprintf_r+0x7a>
 800c9ca:	465b      	mov	r3, fp
 800c9cc:	4622      	mov	r2, r4
 800c9ce:	4629      	mov	r1, r5
 800c9d0:	4638      	mov	r0, r7
 800c9d2:	f7ff ff6f 	bl	800c8b4 <__ssputs_r>
 800c9d6:	3001      	adds	r0, #1
 800c9d8:	f000 80a9 	beq.w	800cb2e <_svfiprintf_r+0x1c6>
 800c9dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9de:	445a      	add	r2, fp
 800c9e0:	9209      	str	r2, [sp, #36]	; 0x24
 800c9e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	f000 80a1 	beq.w	800cb2e <_svfiprintf_r+0x1c6>
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c9f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9f6:	f10a 0a01 	add.w	sl, sl, #1
 800c9fa:	9304      	str	r3, [sp, #16]
 800c9fc:	9307      	str	r3, [sp, #28]
 800c9fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca02:	931a      	str	r3, [sp, #104]	; 0x68
 800ca04:	4654      	mov	r4, sl
 800ca06:	2205      	movs	r2, #5
 800ca08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca0c:	4850      	ldr	r0, [pc, #320]	; (800cb50 <_svfiprintf_r+0x1e8>)
 800ca0e:	f7f3 fbe7 	bl	80001e0 <memchr>
 800ca12:	9a04      	ldr	r2, [sp, #16]
 800ca14:	b9d8      	cbnz	r0, 800ca4e <_svfiprintf_r+0xe6>
 800ca16:	06d0      	lsls	r0, r2, #27
 800ca18:	bf44      	itt	mi
 800ca1a:	2320      	movmi	r3, #32
 800ca1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca20:	0711      	lsls	r1, r2, #28
 800ca22:	bf44      	itt	mi
 800ca24:	232b      	movmi	r3, #43	; 0x2b
 800ca26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca2a:	f89a 3000 	ldrb.w	r3, [sl]
 800ca2e:	2b2a      	cmp	r3, #42	; 0x2a
 800ca30:	d015      	beq.n	800ca5e <_svfiprintf_r+0xf6>
 800ca32:	9a07      	ldr	r2, [sp, #28]
 800ca34:	4654      	mov	r4, sl
 800ca36:	2000      	movs	r0, #0
 800ca38:	f04f 0c0a 	mov.w	ip, #10
 800ca3c:	4621      	mov	r1, r4
 800ca3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca42:	3b30      	subs	r3, #48	; 0x30
 800ca44:	2b09      	cmp	r3, #9
 800ca46:	d94d      	bls.n	800cae4 <_svfiprintf_r+0x17c>
 800ca48:	b1b0      	cbz	r0, 800ca78 <_svfiprintf_r+0x110>
 800ca4a:	9207      	str	r2, [sp, #28]
 800ca4c:	e014      	b.n	800ca78 <_svfiprintf_r+0x110>
 800ca4e:	eba0 0308 	sub.w	r3, r0, r8
 800ca52:	fa09 f303 	lsl.w	r3, r9, r3
 800ca56:	4313      	orrs	r3, r2
 800ca58:	9304      	str	r3, [sp, #16]
 800ca5a:	46a2      	mov	sl, r4
 800ca5c:	e7d2      	b.n	800ca04 <_svfiprintf_r+0x9c>
 800ca5e:	9b03      	ldr	r3, [sp, #12]
 800ca60:	1d19      	adds	r1, r3, #4
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	9103      	str	r1, [sp, #12]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	bfbb      	ittet	lt
 800ca6a:	425b      	neglt	r3, r3
 800ca6c:	f042 0202 	orrlt.w	r2, r2, #2
 800ca70:	9307      	strge	r3, [sp, #28]
 800ca72:	9307      	strlt	r3, [sp, #28]
 800ca74:	bfb8      	it	lt
 800ca76:	9204      	strlt	r2, [sp, #16]
 800ca78:	7823      	ldrb	r3, [r4, #0]
 800ca7a:	2b2e      	cmp	r3, #46	; 0x2e
 800ca7c:	d10c      	bne.n	800ca98 <_svfiprintf_r+0x130>
 800ca7e:	7863      	ldrb	r3, [r4, #1]
 800ca80:	2b2a      	cmp	r3, #42	; 0x2a
 800ca82:	d134      	bne.n	800caee <_svfiprintf_r+0x186>
 800ca84:	9b03      	ldr	r3, [sp, #12]
 800ca86:	1d1a      	adds	r2, r3, #4
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	9203      	str	r2, [sp, #12]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	bfb8      	it	lt
 800ca90:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca94:	3402      	adds	r4, #2
 800ca96:	9305      	str	r3, [sp, #20]
 800ca98:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cb60 <_svfiprintf_r+0x1f8>
 800ca9c:	7821      	ldrb	r1, [r4, #0]
 800ca9e:	2203      	movs	r2, #3
 800caa0:	4650      	mov	r0, sl
 800caa2:	f7f3 fb9d 	bl	80001e0 <memchr>
 800caa6:	b138      	cbz	r0, 800cab8 <_svfiprintf_r+0x150>
 800caa8:	9b04      	ldr	r3, [sp, #16]
 800caaa:	eba0 000a 	sub.w	r0, r0, sl
 800caae:	2240      	movs	r2, #64	; 0x40
 800cab0:	4082      	lsls	r2, r0
 800cab2:	4313      	orrs	r3, r2
 800cab4:	3401      	adds	r4, #1
 800cab6:	9304      	str	r3, [sp, #16]
 800cab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cabc:	4825      	ldr	r0, [pc, #148]	; (800cb54 <_svfiprintf_r+0x1ec>)
 800cabe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cac2:	2206      	movs	r2, #6
 800cac4:	f7f3 fb8c 	bl	80001e0 <memchr>
 800cac8:	2800      	cmp	r0, #0
 800caca:	d038      	beq.n	800cb3e <_svfiprintf_r+0x1d6>
 800cacc:	4b22      	ldr	r3, [pc, #136]	; (800cb58 <_svfiprintf_r+0x1f0>)
 800cace:	bb1b      	cbnz	r3, 800cb18 <_svfiprintf_r+0x1b0>
 800cad0:	9b03      	ldr	r3, [sp, #12]
 800cad2:	3307      	adds	r3, #7
 800cad4:	f023 0307 	bic.w	r3, r3, #7
 800cad8:	3308      	adds	r3, #8
 800cada:	9303      	str	r3, [sp, #12]
 800cadc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cade:	4433      	add	r3, r6
 800cae0:	9309      	str	r3, [sp, #36]	; 0x24
 800cae2:	e768      	b.n	800c9b6 <_svfiprintf_r+0x4e>
 800cae4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cae8:	460c      	mov	r4, r1
 800caea:	2001      	movs	r0, #1
 800caec:	e7a6      	b.n	800ca3c <_svfiprintf_r+0xd4>
 800caee:	2300      	movs	r3, #0
 800caf0:	3401      	adds	r4, #1
 800caf2:	9305      	str	r3, [sp, #20]
 800caf4:	4619      	mov	r1, r3
 800caf6:	f04f 0c0a 	mov.w	ip, #10
 800cafa:	4620      	mov	r0, r4
 800cafc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb00:	3a30      	subs	r2, #48	; 0x30
 800cb02:	2a09      	cmp	r2, #9
 800cb04:	d903      	bls.n	800cb0e <_svfiprintf_r+0x1a6>
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d0c6      	beq.n	800ca98 <_svfiprintf_r+0x130>
 800cb0a:	9105      	str	r1, [sp, #20]
 800cb0c:	e7c4      	b.n	800ca98 <_svfiprintf_r+0x130>
 800cb0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb12:	4604      	mov	r4, r0
 800cb14:	2301      	movs	r3, #1
 800cb16:	e7f0      	b.n	800cafa <_svfiprintf_r+0x192>
 800cb18:	ab03      	add	r3, sp, #12
 800cb1a:	9300      	str	r3, [sp, #0]
 800cb1c:	462a      	mov	r2, r5
 800cb1e:	4b0f      	ldr	r3, [pc, #60]	; (800cb5c <_svfiprintf_r+0x1f4>)
 800cb20:	a904      	add	r1, sp, #16
 800cb22:	4638      	mov	r0, r7
 800cb24:	f7fd fe78 	bl	800a818 <_printf_float>
 800cb28:	1c42      	adds	r2, r0, #1
 800cb2a:	4606      	mov	r6, r0
 800cb2c:	d1d6      	bne.n	800cadc <_svfiprintf_r+0x174>
 800cb2e:	89ab      	ldrh	r3, [r5, #12]
 800cb30:	065b      	lsls	r3, r3, #25
 800cb32:	f53f af2d 	bmi.w	800c990 <_svfiprintf_r+0x28>
 800cb36:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb38:	b01d      	add	sp, #116	; 0x74
 800cb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb3e:	ab03      	add	r3, sp, #12
 800cb40:	9300      	str	r3, [sp, #0]
 800cb42:	462a      	mov	r2, r5
 800cb44:	4b05      	ldr	r3, [pc, #20]	; (800cb5c <_svfiprintf_r+0x1f4>)
 800cb46:	a904      	add	r1, sp, #16
 800cb48:	4638      	mov	r0, r7
 800cb4a:	f7fe f909 	bl	800ad60 <_printf_i>
 800cb4e:	e7eb      	b.n	800cb28 <_svfiprintf_r+0x1c0>
 800cb50:	0801110c 	.word	0x0801110c
 800cb54:	08011116 	.word	0x08011116
 800cb58:	0800a819 	.word	0x0800a819
 800cb5c:	0800c8b5 	.word	0x0800c8b5
 800cb60:	08011112 	.word	0x08011112

0800cb64 <__sflush_r>:
 800cb64:	898a      	ldrh	r2, [r1, #12]
 800cb66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb6a:	4605      	mov	r5, r0
 800cb6c:	0710      	lsls	r0, r2, #28
 800cb6e:	460c      	mov	r4, r1
 800cb70:	d458      	bmi.n	800cc24 <__sflush_r+0xc0>
 800cb72:	684b      	ldr	r3, [r1, #4]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	dc05      	bgt.n	800cb84 <__sflush_r+0x20>
 800cb78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	dc02      	bgt.n	800cb84 <__sflush_r+0x20>
 800cb7e:	2000      	movs	r0, #0
 800cb80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb86:	2e00      	cmp	r6, #0
 800cb88:	d0f9      	beq.n	800cb7e <__sflush_r+0x1a>
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb90:	682f      	ldr	r7, [r5, #0]
 800cb92:	6a21      	ldr	r1, [r4, #32]
 800cb94:	602b      	str	r3, [r5, #0]
 800cb96:	d032      	beq.n	800cbfe <__sflush_r+0x9a>
 800cb98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb9a:	89a3      	ldrh	r3, [r4, #12]
 800cb9c:	075a      	lsls	r2, r3, #29
 800cb9e:	d505      	bpl.n	800cbac <__sflush_r+0x48>
 800cba0:	6863      	ldr	r3, [r4, #4]
 800cba2:	1ac0      	subs	r0, r0, r3
 800cba4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cba6:	b10b      	cbz	r3, 800cbac <__sflush_r+0x48>
 800cba8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cbaa:	1ac0      	subs	r0, r0, r3
 800cbac:	2300      	movs	r3, #0
 800cbae:	4602      	mov	r2, r0
 800cbb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbb2:	6a21      	ldr	r1, [r4, #32]
 800cbb4:	4628      	mov	r0, r5
 800cbb6:	47b0      	blx	r6
 800cbb8:	1c43      	adds	r3, r0, #1
 800cbba:	89a3      	ldrh	r3, [r4, #12]
 800cbbc:	d106      	bne.n	800cbcc <__sflush_r+0x68>
 800cbbe:	6829      	ldr	r1, [r5, #0]
 800cbc0:	291d      	cmp	r1, #29
 800cbc2:	d82b      	bhi.n	800cc1c <__sflush_r+0xb8>
 800cbc4:	4a29      	ldr	r2, [pc, #164]	; (800cc6c <__sflush_r+0x108>)
 800cbc6:	410a      	asrs	r2, r1
 800cbc8:	07d6      	lsls	r6, r2, #31
 800cbca:	d427      	bmi.n	800cc1c <__sflush_r+0xb8>
 800cbcc:	2200      	movs	r2, #0
 800cbce:	6062      	str	r2, [r4, #4]
 800cbd0:	04d9      	lsls	r1, r3, #19
 800cbd2:	6922      	ldr	r2, [r4, #16]
 800cbd4:	6022      	str	r2, [r4, #0]
 800cbd6:	d504      	bpl.n	800cbe2 <__sflush_r+0x7e>
 800cbd8:	1c42      	adds	r2, r0, #1
 800cbda:	d101      	bne.n	800cbe0 <__sflush_r+0x7c>
 800cbdc:	682b      	ldr	r3, [r5, #0]
 800cbde:	b903      	cbnz	r3, 800cbe2 <__sflush_r+0x7e>
 800cbe0:	6560      	str	r0, [r4, #84]	; 0x54
 800cbe2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbe4:	602f      	str	r7, [r5, #0]
 800cbe6:	2900      	cmp	r1, #0
 800cbe8:	d0c9      	beq.n	800cb7e <__sflush_r+0x1a>
 800cbea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbee:	4299      	cmp	r1, r3
 800cbf0:	d002      	beq.n	800cbf8 <__sflush_r+0x94>
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	f7ff fa96 	bl	800c124 <_free_r>
 800cbf8:	2000      	movs	r0, #0
 800cbfa:	6360      	str	r0, [r4, #52]	; 0x34
 800cbfc:	e7c0      	b.n	800cb80 <__sflush_r+0x1c>
 800cbfe:	2301      	movs	r3, #1
 800cc00:	4628      	mov	r0, r5
 800cc02:	47b0      	blx	r6
 800cc04:	1c41      	adds	r1, r0, #1
 800cc06:	d1c8      	bne.n	800cb9a <__sflush_r+0x36>
 800cc08:	682b      	ldr	r3, [r5, #0]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d0c5      	beq.n	800cb9a <__sflush_r+0x36>
 800cc0e:	2b1d      	cmp	r3, #29
 800cc10:	d001      	beq.n	800cc16 <__sflush_r+0xb2>
 800cc12:	2b16      	cmp	r3, #22
 800cc14:	d101      	bne.n	800cc1a <__sflush_r+0xb6>
 800cc16:	602f      	str	r7, [r5, #0]
 800cc18:	e7b1      	b.n	800cb7e <__sflush_r+0x1a>
 800cc1a:	89a3      	ldrh	r3, [r4, #12]
 800cc1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc20:	81a3      	strh	r3, [r4, #12]
 800cc22:	e7ad      	b.n	800cb80 <__sflush_r+0x1c>
 800cc24:	690f      	ldr	r7, [r1, #16]
 800cc26:	2f00      	cmp	r7, #0
 800cc28:	d0a9      	beq.n	800cb7e <__sflush_r+0x1a>
 800cc2a:	0793      	lsls	r3, r2, #30
 800cc2c:	680e      	ldr	r6, [r1, #0]
 800cc2e:	bf08      	it	eq
 800cc30:	694b      	ldreq	r3, [r1, #20]
 800cc32:	600f      	str	r7, [r1, #0]
 800cc34:	bf18      	it	ne
 800cc36:	2300      	movne	r3, #0
 800cc38:	eba6 0807 	sub.w	r8, r6, r7
 800cc3c:	608b      	str	r3, [r1, #8]
 800cc3e:	f1b8 0f00 	cmp.w	r8, #0
 800cc42:	dd9c      	ble.n	800cb7e <__sflush_r+0x1a>
 800cc44:	6a21      	ldr	r1, [r4, #32]
 800cc46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc48:	4643      	mov	r3, r8
 800cc4a:	463a      	mov	r2, r7
 800cc4c:	4628      	mov	r0, r5
 800cc4e:	47b0      	blx	r6
 800cc50:	2800      	cmp	r0, #0
 800cc52:	dc06      	bgt.n	800cc62 <__sflush_r+0xfe>
 800cc54:	89a3      	ldrh	r3, [r4, #12]
 800cc56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc5a:	81a3      	strh	r3, [r4, #12]
 800cc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc60:	e78e      	b.n	800cb80 <__sflush_r+0x1c>
 800cc62:	4407      	add	r7, r0
 800cc64:	eba8 0800 	sub.w	r8, r8, r0
 800cc68:	e7e9      	b.n	800cc3e <__sflush_r+0xda>
 800cc6a:	bf00      	nop
 800cc6c:	dfbffffe 	.word	0xdfbffffe

0800cc70 <_fflush_r>:
 800cc70:	b538      	push	{r3, r4, r5, lr}
 800cc72:	690b      	ldr	r3, [r1, #16]
 800cc74:	4605      	mov	r5, r0
 800cc76:	460c      	mov	r4, r1
 800cc78:	b913      	cbnz	r3, 800cc80 <_fflush_r+0x10>
 800cc7a:	2500      	movs	r5, #0
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	bd38      	pop	{r3, r4, r5, pc}
 800cc80:	b118      	cbz	r0, 800cc8a <_fflush_r+0x1a>
 800cc82:	6a03      	ldr	r3, [r0, #32]
 800cc84:	b90b      	cbnz	r3, 800cc8a <_fflush_r+0x1a>
 800cc86:	f7fe fa07 	bl	800b098 <__sinit>
 800cc8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d0f3      	beq.n	800cc7a <_fflush_r+0xa>
 800cc92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc94:	07d0      	lsls	r0, r2, #31
 800cc96:	d404      	bmi.n	800cca2 <_fflush_r+0x32>
 800cc98:	0599      	lsls	r1, r3, #22
 800cc9a:	d402      	bmi.n	800cca2 <_fflush_r+0x32>
 800cc9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc9e:	f7fe fb8f 	bl	800b3c0 <__retarget_lock_acquire_recursive>
 800cca2:	4628      	mov	r0, r5
 800cca4:	4621      	mov	r1, r4
 800cca6:	f7ff ff5d 	bl	800cb64 <__sflush_r>
 800ccaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ccac:	07da      	lsls	r2, r3, #31
 800ccae:	4605      	mov	r5, r0
 800ccb0:	d4e4      	bmi.n	800cc7c <_fflush_r+0xc>
 800ccb2:	89a3      	ldrh	r3, [r4, #12]
 800ccb4:	059b      	lsls	r3, r3, #22
 800ccb6:	d4e1      	bmi.n	800cc7c <_fflush_r+0xc>
 800ccb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccba:	f7fe fb82 	bl	800b3c2 <__retarget_lock_release_recursive>
 800ccbe:	e7dd      	b.n	800cc7c <_fflush_r+0xc>

0800ccc0 <fiprintf>:
 800ccc0:	b40e      	push	{r1, r2, r3}
 800ccc2:	b503      	push	{r0, r1, lr}
 800ccc4:	4601      	mov	r1, r0
 800ccc6:	ab03      	add	r3, sp, #12
 800ccc8:	4805      	ldr	r0, [pc, #20]	; (800cce0 <fiprintf+0x20>)
 800ccca:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccce:	6800      	ldr	r0, [r0, #0]
 800ccd0:	9301      	str	r3, [sp, #4]
 800ccd2:	f000 f8b5 	bl	800ce40 <_vfiprintf_r>
 800ccd6:	b002      	add	sp, #8
 800ccd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccdc:	b003      	add	sp, #12
 800ccde:	4770      	bx	lr
 800cce0:	200012cc 	.word	0x200012cc

0800cce4 <memmove>:
 800cce4:	4288      	cmp	r0, r1
 800cce6:	b510      	push	{r4, lr}
 800cce8:	eb01 0402 	add.w	r4, r1, r2
 800ccec:	d902      	bls.n	800ccf4 <memmove+0x10>
 800ccee:	4284      	cmp	r4, r0
 800ccf0:	4623      	mov	r3, r4
 800ccf2:	d807      	bhi.n	800cd04 <memmove+0x20>
 800ccf4:	1e43      	subs	r3, r0, #1
 800ccf6:	42a1      	cmp	r1, r4
 800ccf8:	d008      	beq.n	800cd0c <memmove+0x28>
 800ccfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd02:	e7f8      	b.n	800ccf6 <memmove+0x12>
 800cd04:	4402      	add	r2, r0
 800cd06:	4601      	mov	r1, r0
 800cd08:	428a      	cmp	r2, r1
 800cd0a:	d100      	bne.n	800cd0e <memmove+0x2a>
 800cd0c:	bd10      	pop	{r4, pc}
 800cd0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd16:	e7f7      	b.n	800cd08 <memmove+0x24>

0800cd18 <abort>:
 800cd18:	b508      	push	{r3, lr}
 800cd1a:	2006      	movs	r0, #6
 800cd1c:	f000 fa68 	bl	800d1f0 <raise>
 800cd20:	2001      	movs	r0, #1
 800cd22:	f7f9 fcab 	bl	800667c <_exit>

0800cd26 <_calloc_r>:
 800cd26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd28:	fba1 2402 	umull	r2, r4, r1, r2
 800cd2c:	b94c      	cbnz	r4, 800cd42 <_calloc_r+0x1c>
 800cd2e:	4611      	mov	r1, r2
 800cd30:	9201      	str	r2, [sp, #4]
 800cd32:	f7fd fbb9 	bl	800a4a8 <_malloc_r>
 800cd36:	9a01      	ldr	r2, [sp, #4]
 800cd38:	4605      	mov	r5, r0
 800cd3a:	b930      	cbnz	r0, 800cd4a <_calloc_r+0x24>
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	b003      	add	sp, #12
 800cd40:	bd30      	pop	{r4, r5, pc}
 800cd42:	220c      	movs	r2, #12
 800cd44:	6002      	str	r2, [r0, #0]
 800cd46:	2500      	movs	r5, #0
 800cd48:	e7f8      	b.n	800cd3c <_calloc_r+0x16>
 800cd4a:	4621      	mov	r1, r4
 800cd4c:	f7fe fa3d 	bl	800b1ca <memset>
 800cd50:	e7f4      	b.n	800cd3c <_calloc_r+0x16>

0800cd52 <__ascii_mbtowc>:
 800cd52:	b082      	sub	sp, #8
 800cd54:	b901      	cbnz	r1, 800cd58 <__ascii_mbtowc+0x6>
 800cd56:	a901      	add	r1, sp, #4
 800cd58:	b142      	cbz	r2, 800cd6c <__ascii_mbtowc+0x1a>
 800cd5a:	b14b      	cbz	r3, 800cd70 <__ascii_mbtowc+0x1e>
 800cd5c:	7813      	ldrb	r3, [r2, #0]
 800cd5e:	600b      	str	r3, [r1, #0]
 800cd60:	7812      	ldrb	r2, [r2, #0]
 800cd62:	1e10      	subs	r0, r2, #0
 800cd64:	bf18      	it	ne
 800cd66:	2001      	movne	r0, #1
 800cd68:	b002      	add	sp, #8
 800cd6a:	4770      	bx	lr
 800cd6c:	4610      	mov	r0, r2
 800cd6e:	e7fb      	b.n	800cd68 <__ascii_mbtowc+0x16>
 800cd70:	f06f 0001 	mvn.w	r0, #1
 800cd74:	e7f8      	b.n	800cd68 <__ascii_mbtowc+0x16>

0800cd76 <_realloc_r>:
 800cd76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd7a:	4680      	mov	r8, r0
 800cd7c:	4614      	mov	r4, r2
 800cd7e:	460e      	mov	r6, r1
 800cd80:	b921      	cbnz	r1, 800cd8c <_realloc_r+0x16>
 800cd82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd86:	4611      	mov	r1, r2
 800cd88:	f7fd bb8e 	b.w	800a4a8 <_malloc_r>
 800cd8c:	b92a      	cbnz	r2, 800cd9a <_realloc_r+0x24>
 800cd8e:	f7ff f9c9 	bl	800c124 <_free_r>
 800cd92:	4625      	mov	r5, r4
 800cd94:	4628      	mov	r0, r5
 800cd96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd9a:	f000 fa45 	bl	800d228 <_malloc_usable_size_r>
 800cd9e:	4284      	cmp	r4, r0
 800cda0:	4607      	mov	r7, r0
 800cda2:	d802      	bhi.n	800cdaa <_realloc_r+0x34>
 800cda4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cda8:	d812      	bhi.n	800cdd0 <_realloc_r+0x5a>
 800cdaa:	4621      	mov	r1, r4
 800cdac:	4640      	mov	r0, r8
 800cdae:	f7fd fb7b 	bl	800a4a8 <_malloc_r>
 800cdb2:	4605      	mov	r5, r0
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	d0ed      	beq.n	800cd94 <_realloc_r+0x1e>
 800cdb8:	42bc      	cmp	r4, r7
 800cdba:	4622      	mov	r2, r4
 800cdbc:	4631      	mov	r1, r6
 800cdbe:	bf28      	it	cs
 800cdc0:	463a      	movcs	r2, r7
 800cdc2:	f7fe fb07 	bl	800b3d4 <memcpy>
 800cdc6:	4631      	mov	r1, r6
 800cdc8:	4640      	mov	r0, r8
 800cdca:	f7ff f9ab 	bl	800c124 <_free_r>
 800cdce:	e7e1      	b.n	800cd94 <_realloc_r+0x1e>
 800cdd0:	4635      	mov	r5, r6
 800cdd2:	e7df      	b.n	800cd94 <_realloc_r+0x1e>

0800cdd4 <__ascii_wctomb>:
 800cdd4:	b149      	cbz	r1, 800cdea <__ascii_wctomb+0x16>
 800cdd6:	2aff      	cmp	r2, #255	; 0xff
 800cdd8:	bf85      	ittet	hi
 800cdda:	238a      	movhi	r3, #138	; 0x8a
 800cddc:	6003      	strhi	r3, [r0, #0]
 800cdde:	700a      	strbls	r2, [r1, #0]
 800cde0:	f04f 30ff 	movhi.w	r0, #4294967295
 800cde4:	bf98      	it	ls
 800cde6:	2001      	movls	r0, #1
 800cde8:	4770      	bx	lr
 800cdea:	4608      	mov	r0, r1
 800cdec:	4770      	bx	lr

0800cdee <__sfputc_r>:
 800cdee:	6893      	ldr	r3, [r2, #8]
 800cdf0:	3b01      	subs	r3, #1
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	b410      	push	{r4}
 800cdf6:	6093      	str	r3, [r2, #8]
 800cdf8:	da08      	bge.n	800ce0c <__sfputc_r+0x1e>
 800cdfa:	6994      	ldr	r4, [r2, #24]
 800cdfc:	42a3      	cmp	r3, r4
 800cdfe:	db01      	blt.n	800ce04 <__sfputc_r+0x16>
 800ce00:	290a      	cmp	r1, #10
 800ce02:	d103      	bne.n	800ce0c <__sfputc_r+0x1e>
 800ce04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce08:	f000 b934 	b.w	800d074 <__swbuf_r>
 800ce0c:	6813      	ldr	r3, [r2, #0]
 800ce0e:	1c58      	adds	r0, r3, #1
 800ce10:	6010      	str	r0, [r2, #0]
 800ce12:	7019      	strb	r1, [r3, #0]
 800ce14:	4608      	mov	r0, r1
 800ce16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce1a:	4770      	bx	lr

0800ce1c <__sfputs_r>:
 800ce1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce1e:	4606      	mov	r6, r0
 800ce20:	460f      	mov	r7, r1
 800ce22:	4614      	mov	r4, r2
 800ce24:	18d5      	adds	r5, r2, r3
 800ce26:	42ac      	cmp	r4, r5
 800ce28:	d101      	bne.n	800ce2e <__sfputs_r+0x12>
 800ce2a:	2000      	movs	r0, #0
 800ce2c:	e007      	b.n	800ce3e <__sfputs_r+0x22>
 800ce2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce32:	463a      	mov	r2, r7
 800ce34:	4630      	mov	r0, r6
 800ce36:	f7ff ffda 	bl	800cdee <__sfputc_r>
 800ce3a:	1c43      	adds	r3, r0, #1
 800ce3c:	d1f3      	bne.n	800ce26 <__sfputs_r+0xa>
 800ce3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ce40 <_vfiprintf_r>:
 800ce40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce44:	460d      	mov	r5, r1
 800ce46:	b09d      	sub	sp, #116	; 0x74
 800ce48:	4614      	mov	r4, r2
 800ce4a:	4698      	mov	r8, r3
 800ce4c:	4606      	mov	r6, r0
 800ce4e:	b118      	cbz	r0, 800ce58 <_vfiprintf_r+0x18>
 800ce50:	6a03      	ldr	r3, [r0, #32]
 800ce52:	b90b      	cbnz	r3, 800ce58 <_vfiprintf_r+0x18>
 800ce54:	f7fe f920 	bl	800b098 <__sinit>
 800ce58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce5a:	07d9      	lsls	r1, r3, #31
 800ce5c:	d405      	bmi.n	800ce6a <_vfiprintf_r+0x2a>
 800ce5e:	89ab      	ldrh	r3, [r5, #12]
 800ce60:	059a      	lsls	r2, r3, #22
 800ce62:	d402      	bmi.n	800ce6a <_vfiprintf_r+0x2a>
 800ce64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce66:	f7fe faab 	bl	800b3c0 <__retarget_lock_acquire_recursive>
 800ce6a:	89ab      	ldrh	r3, [r5, #12]
 800ce6c:	071b      	lsls	r3, r3, #28
 800ce6e:	d501      	bpl.n	800ce74 <_vfiprintf_r+0x34>
 800ce70:	692b      	ldr	r3, [r5, #16]
 800ce72:	b99b      	cbnz	r3, 800ce9c <_vfiprintf_r+0x5c>
 800ce74:	4629      	mov	r1, r5
 800ce76:	4630      	mov	r0, r6
 800ce78:	f000 f93a 	bl	800d0f0 <__swsetup_r>
 800ce7c:	b170      	cbz	r0, 800ce9c <_vfiprintf_r+0x5c>
 800ce7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce80:	07dc      	lsls	r4, r3, #31
 800ce82:	d504      	bpl.n	800ce8e <_vfiprintf_r+0x4e>
 800ce84:	f04f 30ff 	mov.w	r0, #4294967295
 800ce88:	b01d      	add	sp, #116	; 0x74
 800ce8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce8e:	89ab      	ldrh	r3, [r5, #12]
 800ce90:	0598      	lsls	r0, r3, #22
 800ce92:	d4f7      	bmi.n	800ce84 <_vfiprintf_r+0x44>
 800ce94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce96:	f7fe fa94 	bl	800b3c2 <__retarget_lock_release_recursive>
 800ce9a:	e7f3      	b.n	800ce84 <_vfiprintf_r+0x44>
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	9309      	str	r3, [sp, #36]	; 0x24
 800cea0:	2320      	movs	r3, #32
 800cea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cea6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ceaa:	2330      	movs	r3, #48	; 0x30
 800ceac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d060 <_vfiprintf_r+0x220>
 800ceb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ceb4:	f04f 0901 	mov.w	r9, #1
 800ceb8:	4623      	mov	r3, r4
 800ceba:	469a      	mov	sl, r3
 800cebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cec0:	b10a      	cbz	r2, 800cec6 <_vfiprintf_r+0x86>
 800cec2:	2a25      	cmp	r2, #37	; 0x25
 800cec4:	d1f9      	bne.n	800ceba <_vfiprintf_r+0x7a>
 800cec6:	ebba 0b04 	subs.w	fp, sl, r4
 800ceca:	d00b      	beq.n	800cee4 <_vfiprintf_r+0xa4>
 800cecc:	465b      	mov	r3, fp
 800cece:	4622      	mov	r2, r4
 800ced0:	4629      	mov	r1, r5
 800ced2:	4630      	mov	r0, r6
 800ced4:	f7ff ffa2 	bl	800ce1c <__sfputs_r>
 800ced8:	3001      	adds	r0, #1
 800ceda:	f000 80a9 	beq.w	800d030 <_vfiprintf_r+0x1f0>
 800cede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cee0:	445a      	add	r2, fp
 800cee2:	9209      	str	r2, [sp, #36]	; 0x24
 800cee4:	f89a 3000 	ldrb.w	r3, [sl]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	f000 80a1 	beq.w	800d030 <_vfiprintf_r+0x1f0>
 800ceee:	2300      	movs	r3, #0
 800cef0:	f04f 32ff 	mov.w	r2, #4294967295
 800cef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cef8:	f10a 0a01 	add.w	sl, sl, #1
 800cefc:	9304      	str	r3, [sp, #16]
 800cefe:	9307      	str	r3, [sp, #28]
 800cf00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf04:	931a      	str	r3, [sp, #104]	; 0x68
 800cf06:	4654      	mov	r4, sl
 800cf08:	2205      	movs	r2, #5
 800cf0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf0e:	4854      	ldr	r0, [pc, #336]	; (800d060 <_vfiprintf_r+0x220>)
 800cf10:	f7f3 f966 	bl	80001e0 <memchr>
 800cf14:	9a04      	ldr	r2, [sp, #16]
 800cf16:	b9d8      	cbnz	r0, 800cf50 <_vfiprintf_r+0x110>
 800cf18:	06d1      	lsls	r1, r2, #27
 800cf1a:	bf44      	itt	mi
 800cf1c:	2320      	movmi	r3, #32
 800cf1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf22:	0713      	lsls	r3, r2, #28
 800cf24:	bf44      	itt	mi
 800cf26:	232b      	movmi	r3, #43	; 0x2b
 800cf28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf2c:	f89a 3000 	ldrb.w	r3, [sl]
 800cf30:	2b2a      	cmp	r3, #42	; 0x2a
 800cf32:	d015      	beq.n	800cf60 <_vfiprintf_r+0x120>
 800cf34:	9a07      	ldr	r2, [sp, #28]
 800cf36:	4654      	mov	r4, sl
 800cf38:	2000      	movs	r0, #0
 800cf3a:	f04f 0c0a 	mov.w	ip, #10
 800cf3e:	4621      	mov	r1, r4
 800cf40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf44:	3b30      	subs	r3, #48	; 0x30
 800cf46:	2b09      	cmp	r3, #9
 800cf48:	d94d      	bls.n	800cfe6 <_vfiprintf_r+0x1a6>
 800cf4a:	b1b0      	cbz	r0, 800cf7a <_vfiprintf_r+0x13a>
 800cf4c:	9207      	str	r2, [sp, #28]
 800cf4e:	e014      	b.n	800cf7a <_vfiprintf_r+0x13a>
 800cf50:	eba0 0308 	sub.w	r3, r0, r8
 800cf54:	fa09 f303 	lsl.w	r3, r9, r3
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	9304      	str	r3, [sp, #16]
 800cf5c:	46a2      	mov	sl, r4
 800cf5e:	e7d2      	b.n	800cf06 <_vfiprintf_r+0xc6>
 800cf60:	9b03      	ldr	r3, [sp, #12]
 800cf62:	1d19      	adds	r1, r3, #4
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	9103      	str	r1, [sp, #12]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	bfbb      	ittet	lt
 800cf6c:	425b      	neglt	r3, r3
 800cf6e:	f042 0202 	orrlt.w	r2, r2, #2
 800cf72:	9307      	strge	r3, [sp, #28]
 800cf74:	9307      	strlt	r3, [sp, #28]
 800cf76:	bfb8      	it	lt
 800cf78:	9204      	strlt	r2, [sp, #16]
 800cf7a:	7823      	ldrb	r3, [r4, #0]
 800cf7c:	2b2e      	cmp	r3, #46	; 0x2e
 800cf7e:	d10c      	bne.n	800cf9a <_vfiprintf_r+0x15a>
 800cf80:	7863      	ldrb	r3, [r4, #1]
 800cf82:	2b2a      	cmp	r3, #42	; 0x2a
 800cf84:	d134      	bne.n	800cff0 <_vfiprintf_r+0x1b0>
 800cf86:	9b03      	ldr	r3, [sp, #12]
 800cf88:	1d1a      	adds	r2, r3, #4
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	9203      	str	r2, [sp, #12]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	bfb8      	it	lt
 800cf92:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf96:	3402      	adds	r4, #2
 800cf98:	9305      	str	r3, [sp, #20]
 800cf9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d070 <_vfiprintf_r+0x230>
 800cf9e:	7821      	ldrb	r1, [r4, #0]
 800cfa0:	2203      	movs	r2, #3
 800cfa2:	4650      	mov	r0, sl
 800cfa4:	f7f3 f91c 	bl	80001e0 <memchr>
 800cfa8:	b138      	cbz	r0, 800cfba <_vfiprintf_r+0x17a>
 800cfaa:	9b04      	ldr	r3, [sp, #16]
 800cfac:	eba0 000a 	sub.w	r0, r0, sl
 800cfb0:	2240      	movs	r2, #64	; 0x40
 800cfb2:	4082      	lsls	r2, r0
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	3401      	adds	r4, #1
 800cfb8:	9304      	str	r3, [sp, #16]
 800cfba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfbe:	4829      	ldr	r0, [pc, #164]	; (800d064 <_vfiprintf_r+0x224>)
 800cfc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfc4:	2206      	movs	r2, #6
 800cfc6:	f7f3 f90b 	bl	80001e0 <memchr>
 800cfca:	2800      	cmp	r0, #0
 800cfcc:	d03f      	beq.n	800d04e <_vfiprintf_r+0x20e>
 800cfce:	4b26      	ldr	r3, [pc, #152]	; (800d068 <_vfiprintf_r+0x228>)
 800cfd0:	bb1b      	cbnz	r3, 800d01a <_vfiprintf_r+0x1da>
 800cfd2:	9b03      	ldr	r3, [sp, #12]
 800cfd4:	3307      	adds	r3, #7
 800cfd6:	f023 0307 	bic.w	r3, r3, #7
 800cfda:	3308      	adds	r3, #8
 800cfdc:	9303      	str	r3, [sp, #12]
 800cfde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfe0:	443b      	add	r3, r7
 800cfe2:	9309      	str	r3, [sp, #36]	; 0x24
 800cfe4:	e768      	b.n	800ceb8 <_vfiprintf_r+0x78>
 800cfe6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfea:	460c      	mov	r4, r1
 800cfec:	2001      	movs	r0, #1
 800cfee:	e7a6      	b.n	800cf3e <_vfiprintf_r+0xfe>
 800cff0:	2300      	movs	r3, #0
 800cff2:	3401      	adds	r4, #1
 800cff4:	9305      	str	r3, [sp, #20]
 800cff6:	4619      	mov	r1, r3
 800cff8:	f04f 0c0a 	mov.w	ip, #10
 800cffc:	4620      	mov	r0, r4
 800cffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d002:	3a30      	subs	r2, #48	; 0x30
 800d004:	2a09      	cmp	r2, #9
 800d006:	d903      	bls.n	800d010 <_vfiprintf_r+0x1d0>
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d0c6      	beq.n	800cf9a <_vfiprintf_r+0x15a>
 800d00c:	9105      	str	r1, [sp, #20]
 800d00e:	e7c4      	b.n	800cf9a <_vfiprintf_r+0x15a>
 800d010:	fb0c 2101 	mla	r1, ip, r1, r2
 800d014:	4604      	mov	r4, r0
 800d016:	2301      	movs	r3, #1
 800d018:	e7f0      	b.n	800cffc <_vfiprintf_r+0x1bc>
 800d01a:	ab03      	add	r3, sp, #12
 800d01c:	9300      	str	r3, [sp, #0]
 800d01e:	462a      	mov	r2, r5
 800d020:	4b12      	ldr	r3, [pc, #72]	; (800d06c <_vfiprintf_r+0x22c>)
 800d022:	a904      	add	r1, sp, #16
 800d024:	4630      	mov	r0, r6
 800d026:	f7fd fbf7 	bl	800a818 <_printf_float>
 800d02a:	4607      	mov	r7, r0
 800d02c:	1c78      	adds	r0, r7, #1
 800d02e:	d1d6      	bne.n	800cfde <_vfiprintf_r+0x19e>
 800d030:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d032:	07d9      	lsls	r1, r3, #31
 800d034:	d405      	bmi.n	800d042 <_vfiprintf_r+0x202>
 800d036:	89ab      	ldrh	r3, [r5, #12]
 800d038:	059a      	lsls	r2, r3, #22
 800d03a:	d402      	bmi.n	800d042 <_vfiprintf_r+0x202>
 800d03c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d03e:	f7fe f9c0 	bl	800b3c2 <__retarget_lock_release_recursive>
 800d042:	89ab      	ldrh	r3, [r5, #12]
 800d044:	065b      	lsls	r3, r3, #25
 800d046:	f53f af1d 	bmi.w	800ce84 <_vfiprintf_r+0x44>
 800d04a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d04c:	e71c      	b.n	800ce88 <_vfiprintf_r+0x48>
 800d04e:	ab03      	add	r3, sp, #12
 800d050:	9300      	str	r3, [sp, #0]
 800d052:	462a      	mov	r2, r5
 800d054:	4b05      	ldr	r3, [pc, #20]	; (800d06c <_vfiprintf_r+0x22c>)
 800d056:	a904      	add	r1, sp, #16
 800d058:	4630      	mov	r0, r6
 800d05a:	f7fd fe81 	bl	800ad60 <_printf_i>
 800d05e:	e7e4      	b.n	800d02a <_vfiprintf_r+0x1ea>
 800d060:	0801110c 	.word	0x0801110c
 800d064:	08011116 	.word	0x08011116
 800d068:	0800a819 	.word	0x0800a819
 800d06c:	0800ce1d 	.word	0x0800ce1d
 800d070:	08011112 	.word	0x08011112

0800d074 <__swbuf_r>:
 800d074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d076:	460e      	mov	r6, r1
 800d078:	4614      	mov	r4, r2
 800d07a:	4605      	mov	r5, r0
 800d07c:	b118      	cbz	r0, 800d086 <__swbuf_r+0x12>
 800d07e:	6a03      	ldr	r3, [r0, #32]
 800d080:	b90b      	cbnz	r3, 800d086 <__swbuf_r+0x12>
 800d082:	f7fe f809 	bl	800b098 <__sinit>
 800d086:	69a3      	ldr	r3, [r4, #24]
 800d088:	60a3      	str	r3, [r4, #8]
 800d08a:	89a3      	ldrh	r3, [r4, #12]
 800d08c:	071a      	lsls	r2, r3, #28
 800d08e:	d525      	bpl.n	800d0dc <__swbuf_r+0x68>
 800d090:	6923      	ldr	r3, [r4, #16]
 800d092:	b31b      	cbz	r3, 800d0dc <__swbuf_r+0x68>
 800d094:	6823      	ldr	r3, [r4, #0]
 800d096:	6922      	ldr	r2, [r4, #16]
 800d098:	1a98      	subs	r0, r3, r2
 800d09a:	6963      	ldr	r3, [r4, #20]
 800d09c:	b2f6      	uxtb	r6, r6
 800d09e:	4283      	cmp	r3, r0
 800d0a0:	4637      	mov	r7, r6
 800d0a2:	dc04      	bgt.n	800d0ae <__swbuf_r+0x3a>
 800d0a4:	4621      	mov	r1, r4
 800d0a6:	4628      	mov	r0, r5
 800d0a8:	f7ff fde2 	bl	800cc70 <_fflush_r>
 800d0ac:	b9e0      	cbnz	r0, 800d0e8 <__swbuf_r+0x74>
 800d0ae:	68a3      	ldr	r3, [r4, #8]
 800d0b0:	3b01      	subs	r3, #1
 800d0b2:	60a3      	str	r3, [r4, #8]
 800d0b4:	6823      	ldr	r3, [r4, #0]
 800d0b6:	1c5a      	adds	r2, r3, #1
 800d0b8:	6022      	str	r2, [r4, #0]
 800d0ba:	701e      	strb	r6, [r3, #0]
 800d0bc:	6962      	ldr	r2, [r4, #20]
 800d0be:	1c43      	adds	r3, r0, #1
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d004      	beq.n	800d0ce <__swbuf_r+0x5a>
 800d0c4:	89a3      	ldrh	r3, [r4, #12]
 800d0c6:	07db      	lsls	r3, r3, #31
 800d0c8:	d506      	bpl.n	800d0d8 <__swbuf_r+0x64>
 800d0ca:	2e0a      	cmp	r6, #10
 800d0cc:	d104      	bne.n	800d0d8 <__swbuf_r+0x64>
 800d0ce:	4621      	mov	r1, r4
 800d0d0:	4628      	mov	r0, r5
 800d0d2:	f7ff fdcd 	bl	800cc70 <_fflush_r>
 800d0d6:	b938      	cbnz	r0, 800d0e8 <__swbuf_r+0x74>
 800d0d8:	4638      	mov	r0, r7
 800d0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0dc:	4621      	mov	r1, r4
 800d0de:	4628      	mov	r0, r5
 800d0e0:	f000 f806 	bl	800d0f0 <__swsetup_r>
 800d0e4:	2800      	cmp	r0, #0
 800d0e6:	d0d5      	beq.n	800d094 <__swbuf_r+0x20>
 800d0e8:	f04f 37ff 	mov.w	r7, #4294967295
 800d0ec:	e7f4      	b.n	800d0d8 <__swbuf_r+0x64>
	...

0800d0f0 <__swsetup_r>:
 800d0f0:	b538      	push	{r3, r4, r5, lr}
 800d0f2:	4b2a      	ldr	r3, [pc, #168]	; (800d19c <__swsetup_r+0xac>)
 800d0f4:	4605      	mov	r5, r0
 800d0f6:	6818      	ldr	r0, [r3, #0]
 800d0f8:	460c      	mov	r4, r1
 800d0fa:	b118      	cbz	r0, 800d104 <__swsetup_r+0x14>
 800d0fc:	6a03      	ldr	r3, [r0, #32]
 800d0fe:	b90b      	cbnz	r3, 800d104 <__swsetup_r+0x14>
 800d100:	f7fd ffca 	bl	800b098 <__sinit>
 800d104:	89a3      	ldrh	r3, [r4, #12]
 800d106:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d10a:	0718      	lsls	r0, r3, #28
 800d10c:	d422      	bmi.n	800d154 <__swsetup_r+0x64>
 800d10e:	06d9      	lsls	r1, r3, #27
 800d110:	d407      	bmi.n	800d122 <__swsetup_r+0x32>
 800d112:	2309      	movs	r3, #9
 800d114:	602b      	str	r3, [r5, #0]
 800d116:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d11a:	81a3      	strh	r3, [r4, #12]
 800d11c:	f04f 30ff 	mov.w	r0, #4294967295
 800d120:	e034      	b.n	800d18c <__swsetup_r+0x9c>
 800d122:	0758      	lsls	r0, r3, #29
 800d124:	d512      	bpl.n	800d14c <__swsetup_r+0x5c>
 800d126:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d128:	b141      	cbz	r1, 800d13c <__swsetup_r+0x4c>
 800d12a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d12e:	4299      	cmp	r1, r3
 800d130:	d002      	beq.n	800d138 <__swsetup_r+0x48>
 800d132:	4628      	mov	r0, r5
 800d134:	f7fe fff6 	bl	800c124 <_free_r>
 800d138:	2300      	movs	r3, #0
 800d13a:	6363      	str	r3, [r4, #52]	; 0x34
 800d13c:	89a3      	ldrh	r3, [r4, #12]
 800d13e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d142:	81a3      	strh	r3, [r4, #12]
 800d144:	2300      	movs	r3, #0
 800d146:	6063      	str	r3, [r4, #4]
 800d148:	6923      	ldr	r3, [r4, #16]
 800d14a:	6023      	str	r3, [r4, #0]
 800d14c:	89a3      	ldrh	r3, [r4, #12]
 800d14e:	f043 0308 	orr.w	r3, r3, #8
 800d152:	81a3      	strh	r3, [r4, #12]
 800d154:	6923      	ldr	r3, [r4, #16]
 800d156:	b94b      	cbnz	r3, 800d16c <__swsetup_r+0x7c>
 800d158:	89a3      	ldrh	r3, [r4, #12]
 800d15a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d15e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d162:	d003      	beq.n	800d16c <__swsetup_r+0x7c>
 800d164:	4621      	mov	r1, r4
 800d166:	4628      	mov	r0, r5
 800d168:	f000 f88c 	bl	800d284 <__smakebuf_r>
 800d16c:	89a0      	ldrh	r0, [r4, #12]
 800d16e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d172:	f010 0301 	ands.w	r3, r0, #1
 800d176:	d00a      	beq.n	800d18e <__swsetup_r+0x9e>
 800d178:	2300      	movs	r3, #0
 800d17a:	60a3      	str	r3, [r4, #8]
 800d17c:	6963      	ldr	r3, [r4, #20]
 800d17e:	425b      	negs	r3, r3
 800d180:	61a3      	str	r3, [r4, #24]
 800d182:	6923      	ldr	r3, [r4, #16]
 800d184:	b943      	cbnz	r3, 800d198 <__swsetup_r+0xa8>
 800d186:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d18a:	d1c4      	bne.n	800d116 <__swsetup_r+0x26>
 800d18c:	bd38      	pop	{r3, r4, r5, pc}
 800d18e:	0781      	lsls	r1, r0, #30
 800d190:	bf58      	it	pl
 800d192:	6963      	ldrpl	r3, [r4, #20]
 800d194:	60a3      	str	r3, [r4, #8]
 800d196:	e7f4      	b.n	800d182 <__swsetup_r+0x92>
 800d198:	2000      	movs	r0, #0
 800d19a:	e7f7      	b.n	800d18c <__swsetup_r+0x9c>
 800d19c:	200012cc 	.word	0x200012cc

0800d1a0 <_raise_r>:
 800d1a0:	291f      	cmp	r1, #31
 800d1a2:	b538      	push	{r3, r4, r5, lr}
 800d1a4:	4604      	mov	r4, r0
 800d1a6:	460d      	mov	r5, r1
 800d1a8:	d904      	bls.n	800d1b4 <_raise_r+0x14>
 800d1aa:	2316      	movs	r3, #22
 800d1ac:	6003      	str	r3, [r0, #0]
 800d1ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b2:	bd38      	pop	{r3, r4, r5, pc}
 800d1b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d1b6:	b112      	cbz	r2, 800d1be <_raise_r+0x1e>
 800d1b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1bc:	b94b      	cbnz	r3, 800d1d2 <_raise_r+0x32>
 800d1be:	4620      	mov	r0, r4
 800d1c0:	f000 f830 	bl	800d224 <_getpid_r>
 800d1c4:	462a      	mov	r2, r5
 800d1c6:	4601      	mov	r1, r0
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1ce:	f000 b817 	b.w	800d200 <_kill_r>
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	d00a      	beq.n	800d1ec <_raise_r+0x4c>
 800d1d6:	1c59      	adds	r1, r3, #1
 800d1d8:	d103      	bne.n	800d1e2 <_raise_r+0x42>
 800d1da:	2316      	movs	r3, #22
 800d1dc:	6003      	str	r3, [r0, #0]
 800d1de:	2001      	movs	r0, #1
 800d1e0:	e7e7      	b.n	800d1b2 <_raise_r+0x12>
 800d1e2:	2400      	movs	r4, #0
 800d1e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d1e8:	4628      	mov	r0, r5
 800d1ea:	4798      	blx	r3
 800d1ec:	2000      	movs	r0, #0
 800d1ee:	e7e0      	b.n	800d1b2 <_raise_r+0x12>

0800d1f0 <raise>:
 800d1f0:	4b02      	ldr	r3, [pc, #8]	; (800d1fc <raise+0xc>)
 800d1f2:	4601      	mov	r1, r0
 800d1f4:	6818      	ldr	r0, [r3, #0]
 800d1f6:	f7ff bfd3 	b.w	800d1a0 <_raise_r>
 800d1fa:	bf00      	nop
 800d1fc:	200012cc 	.word	0x200012cc

0800d200 <_kill_r>:
 800d200:	b538      	push	{r3, r4, r5, lr}
 800d202:	4d07      	ldr	r5, [pc, #28]	; (800d220 <_kill_r+0x20>)
 800d204:	2300      	movs	r3, #0
 800d206:	4604      	mov	r4, r0
 800d208:	4608      	mov	r0, r1
 800d20a:	4611      	mov	r1, r2
 800d20c:	602b      	str	r3, [r5, #0]
 800d20e:	f7f9 fa25 	bl	800665c <_kill>
 800d212:	1c43      	adds	r3, r0, #1
 800d214:	d102      	bne.n	800d21c <_kill_r+0x1c>
 800d216:	682b      	ldr	r3, [r5, #0]
 800d218:	b103      	cbz	r3, 800d21c <_kill_r+0x1c>
 800d21a:	6023      	str	r3, [r4, #0]
 800d21c:	bd38      	pop	{r3, r4, r5, pc}
 800d21e:	bf00      	nop
 800d220:	20001734 	.word	0x20001734

0800d224 <_getpid_r>:
 800d224:	f7f9 ba12 	b.w	800664c <_getpid>

0800d228 <_malloc_usable_size_r>:
 800d228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d22c:	1f18      	subs	r0, r3, #4
 800d22e:	2b00      	cmp	r3, #0
 800d230:	bfbc      	itt	lt
 800d232:	580b      	ldrlt	r3, [r1, r0]
 800d234:	18c0      	addlt	r0, r0, r3
 800d236:	4770      	bx	lr

0800d238 <__swhatbuf_r>:
 800d238:	b570      	push	{r4, r5, r6, lr}
 800d23a:	460c      	mov	r4, r1
 800d23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d240:	2900      	cmp	r1, #0
 800d242:	b096      	sub	sp, #88	; 0x58
 800d244:	4615      	mov	r5, r2
 800d246:	461e      	mov	r6, r3
 800d248:	da0d      	bge.n	800d266 <__swhatbuf_r+0x2e>
 800d24a:	89a3      	ldrh	r3, [r4, #12]
 800d24c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d250:	f04f 0100 	mov.w	r1, #0
 800d254:	bf0c      	ite	eq
 800d256:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d25a:	2340      	movne	r3, #64	; 0x40
 800d25c:	2000      	movs	r0, #0
 800d25e:	6031      	str	r1, [r6, #0]
 800d260:	602b      	str	r3, [r5, #0]
 800d262:	b016      	add	sp, #88	; 0x58
 800d264:	bd70      	pop	{r4, r5, r6, pc}
 800d266:	466a      	mov	r2, sp
 800d268:	f000 f848 	bl	800d2fc <_fstat_r>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	dbec      	blt.n	800d24a <__swhatbuf_r+0x12>
 800d270:	9901      	ldr	r1, [sp, #4]
 800d272:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d276:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d27a:	4259      	negs	r1, r3
 800d27c:	4159      	adcs	r1, r3
 800d27e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d282:	e7eb      	b.n	800d25c <__swhatbuf_r+0x24>

0800d284 <__smakebuf_r>:
 800d284:	898b      	ldrh	r3, [r1, #12]
 800d286:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d288:	079d      	lsls	r5, r3, #30
 800d28a:	4606      	mov	r6, r0
 800d28c:	460c      	mov	r4, r1
 800d28e:	d507      	bpl.n	800d2a0 <__smakebuf_r+0x1c>
 800d290:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d294:	6023      	str	r3, [r4, #0]
 800d296:	6123      	str	r3, [r4, #16]
 800d298:	2301      	movs	r3, #1
 800d29a:	6163      	str	r3, [r4, #20]
 800d29c:	b002      	add	sp, #8
 800d29e:	bd70      	pop	{r4, r5, r6, pc}
 800d2a0:	ab01      	add	r3, sp, #4
 800d2a2:	466a      	mov	r2, sp
 800d2a4:	f7ff ffc8 	bl	800d238 <__swhatbuf_r>
 800d2a8:	9900      	ldr	r1, [sp, #0]
 800d2aa:	4605      	mov	r5, r0
 800d2ac:	4630      	mov	r0, r6
 800d2ae:	f7fd f8fb 	bl	800a4a8 <_malloc_r>
 800d2b2:	b948      	cbnz	r0, 800d2c8 <__smakebuf_r+0x44>
 800d2b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2b8:	059a      	lsls	r2, r3, #22
 800d2ba:	d4ef      	bmi.n	800d29c <__smakebuf_r+0x18>
 800d2bc:	f023 0303 	bic.w	r3, r3, #3
 800d2c0:	f043 0302 	orr.w	r3, r3, #2
 800d2c4:	81a3      	strh	r3, [r4, #12]
 800d2c6:	e7e3      	b.n	800d290 <__smakebuf_r+0xc>
 800d2c8:	89a3      	ldrh	r3, [r4, #12]
 800d2ca:	6020      	str	r0, [r4, #0]
 800d2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2d0:	81a3      	strh	r3, [r4, #12]
 800d2d2:	9b00      	ldr	r3, [sp, #0]
 800d2d4:	6163      	str	r3, [r4, #20]
 800d2d6:	9b01      	ldr	r3, [sp, #4]
 800d2d8:	6120      	str	r0, [r4, #16]
 800d2da:	b15b      	cbz	r3, 800d2f4 <__smakebuf_r+0x70>
 800d2dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2e0:	4630      	mov	r0, r6
 800d2e2:	f000 f81d 	bl	800d320 <_isatty_r>
 800d2e6:	b128      	cbz	r0, 800d2f4 <__smakebuf_r+0x70>
 800d2e8:	89a3      	ldrh	r3, [r4, #12]
 800d2ea:	f023 0303 	bic.w	r3, r3, #3
 800d2ee:	f043 0301 	orr.w	r3, r3, #1
 800d2f2:	81a3      	strh	r3, [r4, #12]
 800d2f4:	89a3      	ldrh	r3, [r4, #12]
 800d2f6:	431d      	orrs	r5, r3
 800d2f8:	81a5      	strh	r5, [r4, #12]
 800d2fa:	e7cf      	b.n	800d29c <__smakebuf_r+0x18>

0800d2fc <_fstat_r>:
 800d2fc:	b538      	push	{r3, r4, r5, lr}
 800d2fe:	4d07      	ldr	r5, [pc, #28]	; (800d31c <_fstat_r+0x20>)
 800d300:	2300      	movs	r3, #0
 800d302:	4604      	mov	r4, r0
 800d304:	4608      	mov	r0, r1
 800d306:	4611      	mov	r1, r2
 800d308:	602b      	str	r3, [r5, #0]
 800d30a:	f7f9 fa06 	bl	800671a <_fstat>
 800d30e:	1c43      	adds	r3, r0, #1
 800d310:	d102      	bne.n	800d318 <_fstat_r+0x1c>
 800d312:	682b      	ldr	r3, [r5, #0]
 800d314:	b103      	cbz	r3, 800d318 <_fstat_r+0x1c>
 800d316:	6023      	str	r3, [r4, #0]
 800d318:	bd38      	pop	{r3, r4, r5, pc}
 800d31a:	bf00      	nop
 800d31c:	20001734 	.word	0x20001734

0800d320 <_isatty_r>:
 800d320:	b538      	push	{r3, r4, r5, lr}
 800d322:	4d06      	ldr	r5, [pc, #24]	; (800d33c <_isatty_r+0x1c>)
 800d324:	2300      	movs	r3, #0
 800d326:	4604      	mov	r4, r0
 800d328:	4608      	mov	r0, r1
 800d32a:	602b      	str	r3, [r5, #0]
 800d32c:	f7f9 fa05 	bl	800673a <_isatty>
 800d330:	1c43      	adds	r3, r0, #1
 800d332:	d102      	bne.n	800d33a <_isatty_r+0x1a>
 800d334:	682b      	ldr	r3, [r5, #0]
 800d336:	b103      	cbz	r3, 800d33a <_isatty_r+0x1a>
 800d338:	6023      	str	r3, [r4, #0]
 800d33a:	bd38      	pop	{r3, r4, r5, pc}
 800d33c:	20001734 	.word	0x20001734

0800d340 <asin>:
 800d340:	b538      	push	{r3, r4, r5, lr}
 800d342:	ed2d 8b02 	vpush	{d8}
 800d346:	ec55 4b10 	vmov	r4, r5, d0
 800d34a:	f000 fed5 	bl	800e0f8 <__ieee754_asin>
 800d34e:	4622      	mov	r2, r4
 800d350:	462b      	mov	r3, r5
 800d352:	4620      	mov	r0, r4
 800d354:	4629      	mov	r1, r5
 800d356:	eeb0 8a40 	vmov.f32	s16, s0
 800d35a:	eef0 8a60 	vmov.f32	s17, s1
 800d35e:	f7f3 fbed 	bl	8000b3c <__aeabi_dcmpun>
 800d362:	b9a8      	cbnz	r0, 800d390 <asin+0x50>
 800d364:	ec45 4b10 	vmov	d0, r4, r5
 800d368:	f000 fa86 	bl	800d878 <fabs>
 800d36c:	4b0c      	ldr	r3, [pc, #48]	; (800d3a0 <asin+0x60>)
 800d36e:	ec51 0b10 	vmov	r0, r1, d0
 800d372:	2200      	movs	r2, #0
 800d374:	f7f3 fbd8 	bl	8000b28 <__aeabi_dcmpgt>
 800d378:	b150      	cbz	r0, 800d390 <asin+0x50>
 800d37a:	f7fd fff7 	bl	800b36c <__errno>
 800d37e:	ecbd 8b02 	vpop	{d8}
 800d382:	2321      	movs	r3, #33	; 0x21
 800d384:	6003      	str	r3, [r0, #0]
 800d386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d38a:	4806      	ldr	r0, [pc, #24]	; (800d3a4 <asin+0x64>)
 800d38c:	f000 bb18 	b.w	800d9c0 <nan>
 800d390:	eeb0 0a48 	vmov.f32	s0, s16
 800d394:	eef0 0a68 	vmov.f32	s1, s17
 800d398:	ecbd 8b02 	vpop	{d8}
 800d39c:	bd38      	pop	{r3, r4, r5, pc}
 800d39e:	bf00      	nop
 800d3a0:	3ff00000 	.word	0x3ff00000
 800d3a4:	08010f3d 	.word	0x08010f3d

0800d3a8 <atan2>:
 800d3a8:	f001 b8ba 	b.w	800e520 <__ieee754_atan2>

0800d3ac <pow>:
 800d3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ae:	ed2d 8b02 	vpush	{d8}
 800d3b2:	eeb0 8a40 	vmov.f32	s16, s0
 800d3b6:	eef0 8a60 	vmov.f32	s17, s1
 800d3ba:	ec55 4b11 	vmov	r4, r5, d1
 800d3be:	f001 f977 	bl	800e6b0 <__ieee754_pow>
 800d3c2:	4622      	mov	r2, r4
 800d3c4:	462b      	mov	r3, r5
 800d3c6:	4620      	mov	r0, r4
 800d3c8:	4629      	mov	r1, r5
 800d3ca:	ec57 6b10 	vmov	r6, r7, d0
 800d3ce:	f7f3 fbb5 	bl	8000b3c <__aeabi_dcmpun>
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	d13b      	bne.n	800d44e <pow+0xa2>
 800d3d6:	ec51 0b18 	vmov	r0, r1, d8
 800d3da:	2200      	movs	r2, #0
 800d3dc:	2300      	movs	r3, #0
 800d3de:	f7f3 fb7b 	bl	8000ad8 <__aeabi_dcmpeq>
 800d3e2:	b1b8      	cbz	r0, 800d414 <pow+0x68>
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	4629      	mov	r1, r5
 800d3ec:	f7f3 fb74 	bl	8000ad8 <__aeabi_dcmpeq>
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	d146      	bne.n	800d482 <pow+0xd6>
 800d3f4:	ec45 4b10 	vmov	d0, r4, r5
 800d3f8:	f000 fad6 	bl	800d9a8 <finite>
 800d3fc:	b338      	cbz	r0, 800d44e <pow+0xa2>
 800d3fe:	2200      	movs	r2, #0
 800d400:	2300      	movs	r3, #0
 800d402:	4620      	mov	r0, r4
 800d404:	4629      	mov	r1, r5
 800d406:	f7f3 fb71 	bl	8000aec <__aeabi_dcmplt>
 800d40a:	b300      	cbz	r0, 800d44e <pow+0xa2>
 800d40c:	f7fd ffae 	bl	800b36c <__errno>
 800d410:	2322      	movs	r3, #34	; 0x22
 800d412:	e01b      	b.n	800d44c <pow+0xa0>
 800d414:	ec47 6b10 	vmov	d0, r6, r7
 800d418:	f000 fac6 	bl	800d9a8 <finite>
 800d41c:	b9e0      	cbnz	r0, 800d458 <pow+0xac>
 800d41e:	eeb0 0a48 	vmov.f32	s0, s16
 800d422:	eef0 0a68 	vmov.f32	s1, s17
 800d426:	f000 fabf 	bl	800d9a8 <finite>
 800d42a:	b1a8      	cbz	r0, 800d458 <pow+0xac>
 800d42c:	ec45 4b10 	vmov	d0, r4, r5
 800d430:	f000 faba 	bl	800d9a8 <finite>
 800d434:	b180      	cbz	r0, 800d458 <pow+0xac>
 800d436:	4632      	mov	r2, r6
 800d438:	463b      	mov	r3, r7
 800d43a:	4630      	mov	r0, r6
 800d43c:	4639      	mov	r1, r7
 800d43e:	f7f3 fb7d 	bl	8000b3c <__aeabi_dcmpun>
 800d442:	2800      	cmp	r0, #0
 800d444:	d0e2      	beq.n	800d40c <pow+0x60>
 800d446:	f7fd ff91 	bl	800b36c <__errno>
 800d44a:	2321      	movs	r3, #33	; 0x21
 800d44c:	6003      	str	r3, [r0, #0]
 800d44e:	ecbd 8b02 	vpop	{d8}
 800d452:	ec47 6b10 	vmov	d0, r6, r7
 800d456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d458:	2200      	movs	r2, #0
 800d45a:	2300      	movs	r3, #0
 800d45c:	4630      	mov	r0, r6
 800d45e:	4639      	mov	r1, r7
 800d460:	f7f3 fb3a 	bl	8000ad8 <__aeabi_dcmpeq>
 800d464:	2800      	cmp	r0, #0
 800d466:	d0f2      	beq.n	800d44e <pow+0xa2>
 800d468:	eeb0 0a48 	vmov.f32	s0, s16
 800d46c:	eef0 0a68 	vmov.f32	s1, s17
 800d470:	f000 fa9a 	bl	800d9a8 <finite>
 800d474:	2800      	cmp	r0, #0
 800d476:	d0ea      	beq.n	800d44e <pow+0xa2>
 800d478:	ec45 4b10 	vmov	d0, r4, r5
 800d47c:	f000 fa94 	bl	800d9a8 <finite>
 800d480:	e7c3      	b.n	800d40a <pow+0x5e>
 800d482:	4f01      	ldr	r7, [pc, #4]	; (800d488 <pow+0xdc>)
 800d484:	2600      	movs	r6, #0
 800d486:	e7e2      	b.n	800d44e <pow+0xa2>
 800d488:	3ff00000 	.word	0x3ff00000
 800d48c:	00000000 	.word	0x00000000

0800d490 <atan>:
 800d490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d494:	ec55 4b10 	vmov	r4, r5, d0
 800d498:	4bc3      	ldr	r3, [pc, #780]	; (800d7a8 <atan+0x318>)
 800d49a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d49e:	429e      	cmp	r6, r3
 800d4a0:	46ab      	mov	fp, r5
 800d4a2:	dd18      	ble.n	800d4d6 <atan+0x46>
 800d4a4:	4bc1      	ldr	r3, [pc, #772]	; (800d7ac <atan+0x31c>)
 800d4a6:	429e      	cmp	r6, r3
 800d4a8:	dc01      	bgt.n	800d4ae <atan+0x1e>
 800d4aa:	d109      	bne.n	800d4c0 <atan+0x30>
 800d4ac:	b144      	cbz	r4, 800d4c0 <atan+0x30>
 800d4ae:	4622      	mov	r2, r4
 800d4b0:	462b      	mov	r3, r5
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	4629      	mov	r1, r5
 800d4b6:	f7f2 fef1 	bl	800029c <__adddf3>
 800d4ba:	4604      	mov	r4, r0
 800d4bc:	460d      	mov	r5, r1
 800d4be:	e006      	b.n	800d4ce <atan+0x3e>
 800d4c0:	f1bb 0f00 	cmp.w	fp, #0
 800d4c4:	f300 8131 	bgt.w	800d72a <atan+0x29a>
 800d4c8:	a59b      	add	r5, pc, #620	; (adr r5, 800d738 <atan+0x2a8>)
 800d4ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d4ce:	ec45 4b10 	vmov	d0, r4, r5
 800d4d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4d6:	4bb6      	ldr	r3, [pc, #728]	; (800d7b0 <atan+0x320>)
 800d4d8:	429e      	cmp	r6, r3
 800d4da:	dc14      	bgt.n	800d506 <atan+0x76>
 800d4dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d4e0:	429e      	cmp	r6, r3
 800d4e2:	dc0d      	bgt.n	800d500 <atan+0x70>
 800d4e4:	a396      	add	r3, pc, #600	; (adr r3, 800d740 <atan+0x2b0>)
 800d4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ea:	ee10 0a10 	vmov	r0, s0
 800d4ee:	4629      	mov	r1, r5
 800d4f0:	f7f2 fed4 	bl	800029c <__adddf3>
 800d4f4:	4baf      	ldr	r3, [pc, #700]	; (800d7b4 <atan+0x324>)
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f7f3 fb16 	bl	8000b28 <__aeabi_dcmpgt>
 800d4fc:	2800      	cmp	r0, #0
 800d4fe:	d1e6      	bne.n	800d4ce <atan+0x3e>
 800d500:	f04f 3aff 	mov.w	sl, #4294967295
 800d504:	e02b      	b.n	800d55e <atan+0xce>
 800d506:	f000 f9b7 	bl	800d878 <fabs>
 800d50a:	4bab      	ldr	r3, [pc, #684]	; (800d7b8 <atan+0x328>)
 800d50c:	429e      	cmp	r6, r3
 800d50e:	ec55 4b10 	vmov	r4, r5, d0
 800d512:	f300 80bf 	bgt.w	800d694 <atan+0x204>
 800d516:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d51a:	429e      	cmp	r6, r3
 800d51c:	f300 80a0 	bgt.w	800d660 <atan+0x1d0>
 800d520:	ee10 2a10 	vmov	r2, s0
 800d524:	ee10 0a10 	vmov	r0, s0
 800d528:	462b      	mov	r3, r5
 800d52a:	4629      	mov	r1, r5
 800d52c:	f7f2 feb6 	bl	800029c <__adddf3>
 800d530:	4ba0      	ldr	r3, [pc, #640]	; (800d7b4 <atan+0x324>)
 800d532:	2200      	movs	r2, #0
 800d534:	f7f2 feb0 	bl	8000298 <__aeabi_dsub>
 800d538:	2200      	movs	r2, #0
 800d53a:	4606      	mov	r6, r0
 800d53c:	460f      	mov	r7, r1
 800d53e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d542:	4620      	mov	r0, r4
 800d544:	4629      	mov	r1, r5
 800d546:	f7f2 fea9 	bl	800029c <__adddf3>
 800d54a:	4602      	mov	r2, r0
 800d54c:	460b      	mov	r3, r1
 800d54e:	4630      	mov	r0, r6
 800d550:	4639      	mov	r1, r7
 800d552:	f7f3 f983 	bl	800085c <__aeabi_ddiv>
 800d556:	f04f 0a00 	mov.w	sl, #0
 800d55a:	4604      	mov	r4, r0
 800d55c:	460d      	mov	r5, r1
 800d55e:	4622      	mov	r2, r4
 800d560:	462b      	mov	r3, r5
 800d562:	4620      	mov	r0, r4
 800d564:	4629      	mov	r1, r5
 800d566:	f7f3 f84f 	bl	8000608 <__aeabi_dmul>
 800d56a:	4602      	mov	r2, r0
 800d56c:	460b      	mov	r3, r1
 800d56e:	4680      	mov	r8, r0
 800d570:	4689      	mov	r9, r1
 800d572:	f7f3 f849 	bl	8000608 <__aeabi_dmul>
 800d576:	a374      	add	r3, pc, #464	; (adr r3, 800d748 <atan+0x2b8>)
 800d578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57c:	4606      	mov	r6, r0
 800d57e:	460f      	mov	r7, r1
 800d580:	f7f3 f842 	bl	8000608 <__aeabi_dmul>
 800d584:	a372      	add	r3, pc, #456	; (adr r3, 800d750 <atan+0x2c0>)
 800d586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58a:	f7f2 fe87 	bl	800029c <__adddf3>
 800d58e:	4632      	mov	r2, r6
 800d590:	463b      	mov	r3, r7
 800d592:	f7f3 f839 	bl	8000608 <__aeabi_dmul>
 800d596:	a370      	add	r3, pc, #448	; (adr r3, 800d758 <atan+0x2c8>)
 800d598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59c:	f7f2 fe7e 	bl	800029c <__adddf3>
 800d5a0:	4632      	mov	r2, r6
 800d5a2:	463b      	mov	r3, r7
 800d5a4:	f7f3 f830 	bl	8000608 <__aeabi_dmul>
 800d5a8:	a36d      	add	r3, pc, #436	; (adr r3, 800d760 <atan+0x2d0>)
 800d5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ae:	f7f2 fe75 	bl	800029c <__adddf3>
 800d5b2:	4632      	mov	r2, r6
 800d5b4:	463b      	mov	r3, r7
 800d5b6:	f7f3 f827 	bl	8000608 <__aeabi_dmul>
 800d5ba:	a36b      	add	r3, pc, #428	; (adr r3, 800d768 <atan+0x2d8>)
 800d5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c0:	f7f2 fe6c 	bl	800029c <__adddf3>
 800d5c4:	4632      	mov	r2, r6
 800d5c6:	463b      	mov	r3, r7
 800d5c8:	f7f3 f81e 	bl	8000608 <__aeabi_dmul>
 800d5cc:	a368      	add	r3, pc, #416	; (adr r3, 800d770 <atan+0x2e0>)
 800d5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d2:	f7f2 fe63 	bl	800029c <__adddf3>
 800d5d6:	4642      	mov	r2, r8
 800d5d8:	464b      	mov	r3, r9
 800d5da:	f7f3 f815 	bl	8000608 <__aeabi_dmul>
 800d5de:	a366      	add	r3, pc, #408	; (adr r3, 800d778 <atan+0x2e8>)
 800d5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e4:	4680      	mov	r8, r0
 800d5e6:	4689      	mov	r9, r1
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	4639      	mov	r1, r7
 800d5ec:	f7f3 f80c 	bl	8000608 <__aeabi_dmul>
 800d5f0:	a363      	add	r3, pc, #396	; (adr r3, 800d780 <atan+0x2f0>)
 800d5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f6:	f7f2 fe4f 	bl	8000298 <__aeabi_dsub>
 800d5fa:	4632      	mov	r2, r6
 800d5fc:	463b      	mov	r3, r7
 800d5fe:	f7f3 f803 	bl	8000608 <__aeabi_dmul>
 800d602:	a361      	add	r3, pc, #388	; (adr r3, 800d788 <atan+0x2f8>)
 800d604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d608:	f7f2 fe46 	bl	8000298 <__aeabi_dsub>
 800d60c:	4632      	mov	r2, r6
 800d60e:	463b      	mov	r3, r7
 800d610:	f7f2 fffa 	bl	8000608 <__aeabi_dmul>
 800d614:	a35e      	add	r3, pc, #376	; (adr r3, 800d790 <atan+0x300>)
 800d616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d61a:	f7f2 fe3d 	bl	8000298 <__aeabi_dsub>
 800d61e:	4632      	mov	r2, r6
 800d620:	463b      	mov	r3, r7
 800d622:	f7f2 fff1 	bl	8000608 <__aeabi_dmul>
 800d626:	a35c      	add	r3, pc, #368	; (adr r3, 800d798 <atan+0x308>)
 800d628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62c:	f7f2 fe34 	bl	8000298 <__aeabi_dsub>
 800d630:	4632      	mov	r2, r6
 800d632:	463b      	mov	r3, r7
 800d634:	f7f2 ffe8 	bl	8000608 <__aeabi_dmul>
 800d638:	4602      	mov	r2, r0
 800d63a:	460b      	mov	r3, r1
 800d63c:	4640      	mov	r0, r8
 800d63e:	4649      	mov	r1, r9
 800d640:	f7f2 fe2c 	bl	800029c <__adddf3>
 800d644:	4622      	mov	r2, r4
 800d646:	462b      	mov	r3, r5
 800d648:	f7f2 ffde 	bl	8000608 <__aeabi_dmul>
 800d64c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d650:	4602      	mov	r2, r0
 800d652:	460b      	mov	r3, r1
 800d654:	d14b      	bne.n	800d6ee <atan+0x25e>
 800d656:	4620      	mov	r0, r4
 800d658:	4629      	mov	r1, r5
 800d65a:	f7f2 fe1d 	bl	8000298 <__aeabi_dsub>
 800d65e:	e72c      	b.n	800d4ba <atan+0x2a>
 800d660:	ee10 0a10 	vmov	r0, s0
 800d664:	4b53      	ldr	r3, [pc, #332]	; (800d7b4 <atan+0x324>)
 800d666:	2200      	movs	r2, #0
 800d668:	4629      	mov	r1, r5
 800d66a:	f7f2 fe15 	bl	8000298 <__aeabi_dsub>
 800d66e:	4b51      	ldr	r3, [pc, #324]	; (800d7b4 <atan+0x324>)
 800d670:	4606      	mov	r6, r0
 800d672:	460f      	mov	r7, r1
 800d674:	2200      	movs	r2, #0
 800d676:	4620      	mov	r0, r4
 800d678:	4629      	mov	r1, r5
 800d67a:	f7f2 fe0f 	bl	800029c <__adddf3>
 800d67e:	4602      	mov	r2, r0
 800d680:	460b      	mov	r3, r1
 800d682:	4630      	mov	r0, r6
 800d684:	4639      	mov	r1, r7
 800d686:	f7f3 f8e9 	bl	800085c <__aeabi_ddiv>
 800d68a:	f04f 0a01 	mov.w	sl, #1
 800d68e:	4604      	mov	r4, r0
 800d690:	460d      	mov	r5, r1
 800d692:	e764      	b.n	800d55e <atan+0xce>
 800d694:	4b49      	ldr	r3, [pc, #292]	; (800d7bc <atan+0x32c>)
 800d696:	429e      	cmp	r6, r3
 800d698:	da1d      	bge.n	800d6d6 <atan+0x246>
 800d69a:	ee10 0a10 	vmov	r0, s0
 800d69e:	4b48      	ldr	r3, [pc, #288]	; (800d7c0 <atan+0x330>)
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	4629      	mov	r1, r5
 800d6a4:	f7f2 fdf8 	bl	8000298 <__aeabi_dsub>
 800d6a8:	4b45      	ldr	r3, [pc, #276]	; (800d7c0 <atan+0x330>)
 800d6aa:	4606      	mov	r6, r0
 800d6ac:	460f      	mov	r7, r1
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	4629      	mov	r1, r5
 800d6b4:	f7f2 ffa8 	bl	8000608 <__aeabi_dmul>
 800d6b8:	4b3e      	ldr	r3, [pc, #248]	; (800d7b4 <atan+0x324>)
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	f7f2 fdee 	bl	800029c <__adddf3>
 800d6c0:	4602      	mov	r2, r0
 800d6c2:	460b      	mov	r3, r1
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	4639      	mov	r1, r7
 800d6c8:	f7f3 f8c8 	bl	800085c <__aeabi_ddiv>
 800d6cc:	f04f 0a02 	mov.w	sl, #2
 800d6d0:	4604      	mov	r4, r0
 800d6d2:	460d      	mov	r5, r1
 800d6d4:	e743      	b.n	800d55e <atan+0xce>
 800d6d6:	462b      	mov	r3, r5
 800d6d8:	ee10 2a10 	vmov	r2, s0
 800d6dc:	4939      	ldr	r1, [pc, #228]	; (800d7c4 <atan+0x334>)
 800d6de:	2000      	movs	r0, #0
 800d6e0:	f7f3 f8bc 	bl	800085c <__aeabi_ddiv>
 800d6e4:	f04f 0a03 	mov.w	sl, #3
 800d6e8:	4604      	mov	r4, r0
 800d6ea:	460d      	mov	r5, r1
 800d6ec:	e737      	b.n	800d55e <atan+0xce>
 800d6ee:	4b36      	ldr	r3, [pc, #216]	; (800d7c8 <atan+0x338>)
 800d6f0:	4e36      	ldr	r6, [pc, #216]	; (800d7cc <atan+0x33c>)
 800d6f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fa:	f7f2 fdcd 	bl	8000298 <__aeabi_dsub>
 800d6fe:	4622      	mov	r2, r4
 800d700:	462b      	mov	r3, r5
 800d702:	f7f2 fdc9 	bl	8000298 <__aeabi_dsub>
 800d706:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d70a:	4602      	mov	r2, r0
 800d70c:	460b      	mov	r3, r1
 800d70e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d712:	f7f2 fdc1 	bl	8000298 <__aeabi_dsub>
 800d716:	f1bb 0f00 	cmp.w	fp, #0
 800d71a:	4604      	mov	r4, r0
 800d71c:	460d      	mov	r5, r1
 800d71e:	f6bf aed6 	bge.w	800d4ce <atan+0x3e>
 800d722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d726:	461d      	mov	r5, r3
 800d728:	e6d1      	b.n	800d4ce <atan+0x3e>
 800d72a:	a51d      	add	r5, pc, #116	; (adr r5, 800d7a0 <atan+0x310>)
 800d72c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d730:	e6cd      	b.n	800d4ce <atan+0x3e>
 800d732:	bf00      	nop
 800d734:	f3af 8000 	nop.w
 800d738:	54442d18 	.word	0x54442d18
 800d73c:	bff921fb 	.word	0xbff921fb
 800d740:	8800759c 	.word	0x8800759c
 800d744:	7e37e43c 	.word	0x7e37e43c
 800d748:	e322da11 	.word	0xe322da11
 800d74c:	3f90ad3a 	.word	0x3f90ad3a
 800d750:	24760deb 	.word	0x24760deb
 800d754:	3fa97b4b 	.word	0x3fa97b4b
 800d758:	a0d03d51 	.word	0xa0d03d51
 800d75c:	3fb10d66 	.word	0x3fb10d66
 800d760:	c54c206e 	.word	0xc54c206e
 800d764:	3fb745cd 	.word	0x3fb745cd
 800d768:	920083ff 	.word	0x920083ff
 800d76c:	3fc24924 	.word	0x3fc24924
 800d770:	5555550d 	.word	0x5555550d
 800d774:	3fd55555 	.word	0x3fd55555
 800d778:	2c6a6c2f 	.word	0x2c6a6c2f
 800d77c:	bfa2b444 	.word	0xbfa2b444
 800d780:	52defd9a 	.word	0x52defd9a
 800d784:	3fadde2d 	.word	0x3fadde2d
 800d788:	af749a6d 	.word	0xaf749a6d
 800d78c:	3fb3b0f2 	.word	0x3fb3b0f2
 800d790:	fe231671 	.word	0xfe231671
 800d794:	3fbc71c6 	.word	0x3fbc71c6
 800d798:	9998ebc4 	.word	0x9998ebc4
 800d79c:	3fc99999 	.word	0x3fc99999
 800d7a0:	54442d18 	.word	0x54442d18
 800d7a4:	3ff921fb 	.word	0x3ff921fb
 800d7a8:	440fffff 	.word	0x440fffff
 800d7ac:	7ff00000 	.word	0x7ff00000
 800d7b0:	3fdbffff 	.word	0x3fdbffff
 800d7b4:	3ff00000 	.word	0x3ff00000
 800d7b8:	3ff2ffff 	.word	0x3ff2ffff
 800d7bc:	40038000 	.word	0x40038000
 800d7c0:	3ff80000 	.word	0x3ff80000
 800d7c4:	bff00000 	.word	0xbff00000
 800d7c8:	08011148 	.word	0x08011148
 800d7cc:	08011128 	.word	0x08011128

0800d7d0 <cos>:
 800d7d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7d2:	ec53 2b10 	vmov	r2, r3, d0
 800d7d6:	4826      	ldr	r0, [pc, #152]	; (800d870 <cos+0xa0>)
 800d7d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d7dc:	4281      	cmp	r1, r0
 800d7de:	dc06      	bgt.n	800d7ee <cos+0x1e>
 800d7e0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d868 <cos+0x98>
 800d7e4:	b005      	add	sp, #20
 800d7e6:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7ea:	f000 b8f1 	b.w	800d9d0 <__kernel_cos>
 800d7ee:	4821      	ldr	r0, [pc, #132]	; (800d874 <cos+0xa4>)
 800d7f0:	4281      	cmp	r1, r0
 800d7f2:	dd09      	ble.n	800d808 <cos+0x38>
 800d7f4:	ee10 0a10 	vmov	r0, s0
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	f7f2 fd4d 	bl	8000298 <__aeabi_dsub>
 800d7fe:	ec41 0b10 	vmov	d0, r0, r1
 800d802:	b005      	add	sp, #20
 800d804:	f85d fb04 	ldr.w	pc, [sp], #4
 800d808:	4668      	mov	r0, sp
 800d80a:	f001 fc7d 	bl	800f108 <__ieee754_rem_pio2>
 800d80e:	f000 0003 	and.w	r0, r0, #3
 800d812:	2801      	cmp	r0, #1
 800d814:	d00b      	beq.n	800d82e <cos+0x5e>
 800d816:	2802      	cmp	r0, #2
 800d818:	d016      	beq.n	800d848 <cos+0x78>
 800d81a:	b9e0      	cbnz	r0, 800d856 <cos+0x86>
 800d81c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d820:	ed9d 0b00 	vldr	d0, [sp]
 800d824:	f000 f8d4 	bl	800d9d0 <__kernel_cos>
 800d828:	ec51 0b10 	vmov	r0, r1, d0
 800d82c:	e7e7      	b.n	800d7fe <cos+0x2e>
 800d82e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d832:	ed9d 0b00 	vldr	d0, [sp]
 800d836:	f000 f993 	bl	800db60 <__kernel_sin>
 800d83a:	ec53 2b10 	vmov	r2, r3, d0
 800d83e:	ee10 0a10 	vmov	r0, s0
 800d842:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d846:	e7da      	b.n	800d7fe <cos+0x2e>
 800d848:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d84c:	ed9d 0b00 	vldr	d0, [sp]
 800d850:	f000 f8be 	bl	800d9d0 <__kernel_cos>
 800d854:	e7f1      	b.n	800d83a <cos+0x6a>
 800d856:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d85a:	ed9d 0b00 	vldr	d0, [sp]
 800d85e:	2001      	movs	r0, #1
 800d860:	f000 f97e 	bl	800db60 <__kernel_sin>
 800d864:	e7e0      	b.n	800d828 <cos+0x58>
 800d866:	bf00      	nop
	...
 800d870:	3fe921fb 	.word	0x3fe921fb
 800d874:	7fefffff 	.word	0x7fefffff

0800d878 <fabs>:
 800d878:	ec51 0b10 	vmov	r0, r1, d0
 800d87c:	ee10 2a10 	vmov	r2, s0
 800d880:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d884:	ec43 2b10 	vmov	d0, r2, r3
 800d888:	4770      	bx	lr
 800d88a:	0000      	movs	r0, r0
 800d88c:	0000      	movs	r0, r0
	...

0800d890 <sin>:
 800d890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d892:	ec53 2b10 	vmov	r2, r3, d0
 800d896:	4828      	ldr	r0, [pc, #160]	; (800d938 <sin+0xa8>)
 800d898:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d89c:	4281      	cmp	r1, r0
 800d89e:	dc07      	bgt.n	800d8b0 <sin+0x20>
 800d8a0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d930 <sin+0xa0>
 800d8a4:	2000      	movs	r0, #0
 800d8a6:	b005      	add	sp, #20
 800d8a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8ac:	f000 b958 	b.w	800db60 <__kernel_sin>
 800d8b0:	4822      	ldr	r0, [pc, #136]	; (800d93c <sin+0xac>)
 800d8b2:	4281      	cmp	r1, r0
 800d8b4:	dd09      	ble.n	800d8ca <sin+0x3a>
 800d8b6:	ee10 0a10 	vmov	r0, s0
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	f7f2 fcec 	bl	8000298 <__aeabi_dsub>
 800d8c0:	ec41 0b10 	vmov	d0, r0, r1
 800d8c4:	b005      	add	sp, #20
 800d8c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d8ca:	4668      	mov	r0, sp
 800d8cc:	f001 fc1c 	bl	800f108 <__ieee754_rem_pio2>
 800d8d0:	f000 0003 	and.w	r0, r0, #3
 800d8d4:	2801      	cmp	r0, #1
 800d8d6:	d00c      	beq.n	800d8f2 <sin+0x62>
 800d8d8:	2802      	cmp	r0, #2
 800d8da:	d011      	beq.n	800d900 <sin+0x70>
 800d8dc:	b9f0      	cbnz	r0, 800d91c <sin+0x8c>
 800d8de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8e2:	ed9d 0b00 	vldr	d0, [sp]
 800d8e6:	2001      	movs	r0, #1
 800d8e8:	f000 f93a 	bl	800db60 <__kernel_sin>
 800d8ec:	ec51 0b10 	vmov	r0, r1, d0
 800d8f0:	e7e6      	b.n	800d8c0 <sin+0x30>
 800d8f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8f6:	ed9d 0b00 	vldr	d0, [sp]
 800d8fa:	f000 f869 	bl	800d9d0 <__kernel_cos>
 800d8fe:	e7f5      	b.n	800d8ec <sin+0x5c>
 800d900:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d904:	ed9d 0b00 	vldr	d0, [sp]
 800d908:	2001      	movs	r0, #1
 800d90a:	f000 f929 	bl	800db60 <__kernel_sin>
 800d90e:	ec53 2b10 	vmov	r2, r3, d0
 800d912:	ee10 0a10 	vmov	r0, s0
 800d916:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d91a:	e7d1      	b.n	800d8c0 <sin+0x30>
 800d91c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d920:	ed9d 0b00 	vldr	d0, [sp]
 800d924:	f000 f854 	bl	800d9d0 <__kernel_cos>
 800d928:	e7f1      	b.n	800d90e <sin+0x7e>
 800d92a:	bf00      	nop
 800d92c:	f3af 8000 	nop.w
	...
 800d938:	3fe921fb 	.word	0x3fe921fb
 800d93c:	7fefffff 	.word	0x7fefffff

0800d940 <tan>:
 800d940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d942:	ec53 2b10 	vmov	r2, r3, d0
 800d946:	4816      	ldr	r0, [pc, #88]	; (800d9a0 <tan+0x60>)
 800d948:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d94c:	4281      	cmp	r1, r0
 800d94e:	dc07      	bgt.n	800d960 <tan+0x20>
 800d950:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800d998 <tan+0x58>
 800d954:	2001      	movs	r0, #1
 800d956:	b005      	add	sp, #20
 800d958:	f85d eb04 	ldr.w	lr, [sp], #4
 800d95c:	f000 b9c0 	b.w	800dce0 <__kernel_tan>
 800d960:	4810      	ldr	r0, [pc, #64]	; (800d9a4 <tan+0x64>)
 800d962:	4281      	cmp	r1, r0
 800d964:	dd09      	ble.n	800d97a <tan+0x3a>
 800d966:	ee10 0a10 	vmov	r0, s0
 800d96a:	4619      	mov	r1, r3
 800d96c:	f7f2 fc94 	bl	8000298 <__aeabi_dsub>
 800d970:	ec41 0b10 	vmov	d0, r0, r1
 800d974:	b005      	add	sp, #20
 800d976:	f85d fb04 	ldr.w	pc, [sp], #4
 800d97a:	4668      	mov	r0, sp
 800d97c:	f001 fbc4 	bl	800f108 <__ieee754_rem_pio2>
 800d980:	0040      	lsls	r0, r0, #1
 800d982:	f000 0002 	and.w	r0, r0, #2
 800d986:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d98a:	ed9d 0b00 	vldr	d0, [sp]
 800d98e:	f1c0 0001 	rsb	r0, r0, #1
 800d992:	f000 f9a5 	bl	800dce0 <__kernel_tan>
 800d996:	e7ed      	b.n	800d974 <tan+0x34>
	...
 800d9a0:	3fe921fb 	.word	0x3fe921fb
 800d9a4:	7fefffff 	.word	0x7fefffff

0800d9a8 <finite>:
 800d9a8:	b082      	sub	sp, #8
 800d9aa:	ed8d 0b00 	vstr	d0, [sp]
 800d9ae:	9801      	ldr	r0, [sp, #4]
 800d9b0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d9b4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d9b8:	0fc0      	lsrs	r0, r0, #31
 800d9ba:	b002      	add	sp, #8
 800d9bc:	4770      	bx	lr
	...

0800d9c0 <nan>:
 800d9c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d9c8 <nan+0x8>
 800d9c4:	4770      	bx	lr
 800d9c6:	bf00      	nop
 800d9c8:	00000000 	.word	0x00000000
 800d9cc:	7ff80000 	.word	0x7ff80000

0800d9d0 <__kernel_cos>:
 800d9d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d4:	ec57 6b10 	vmov	r6, r7, d0
 800d9d8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d9dc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d9e0:	ed8d 1b00 	vstr	d1, [sp]
 800d9e4:	da07      	bge.n	800d9f6 <__kernel_cos+0x26>
 800d9e6:	ee10 0a10 	vmov	r0, s0
 800d9ea:	4639      	mov	r1, r7
 800d9ec:	f7f3 f8bc 	bl	8000b68 <__aeabi_d2iz>
 800d9f0:	2800      	cmp	r0, #0
 800d9f2:	f000 8088 	beq.w	800db06 <__kernel_cos+0x136>
 800d9f6:	4632      	mov	r2, r6
 800d9f8:	463b      	mov	r3, r7
 800d9fa:	4630      	mov	r0, r6
 800d9fc:	4639      	mov	r1, r7
 800d9fe:	f7f2 fe03 	bl	8000608 <__aeabi_dmul>
 800da02:	4b51      	ldr	r3, [pc, #324]	; (800db48 <__kernel_cos+0x178>)
 800da04:	2200      	movs	r2, #0
 800da06:	4604      	mov	r4, r0
 800da08:	460d      	mov	r5, r1
 800da0a:	f7f2 fdfd 	bl	8000608 <__aeabi_dmul>
 800da0e:	a340      	add	r3, pc, #256	; (adr r3, 800db10 <__kernel_cos+0x140>)
 800da10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da14:	4682      	mov	sl, r0
 800da16:	468b      	mov	fp, r1
 800da18:	4620      	mov	r0, r4
 800da1a:	4629      	mov	r1, r5
 800da1c:	f7f2 fdf4 	bl	8000608 <__aeabi_dmul>
 800da20:	a33d      	add	r3, pc, #244	; (adr r3, 800db18 <__kernel_cos+0x148>)
 800da22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da26:	f7f2 fc39 	bl	800029c <__adddf3>
 800da2a:	4622      	mov	r2, r4
 800da2c:	462b      	mov	r3, r5
 800da2e:	f7f2 fdeb 	bl	8000608 <__aeabi_dmul>
 800da32:	a33b      	add	r3, pc, #236	; (adr r3, 800db20 <__kernel_cos+0x150>)
 800da34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da38:	f7f2 fc2e 	bl	8000298 <__aeabi_dsub>
 800da3c:	4622      	mov	r2, r4
 800da3e:	462b      	mov	r3, r5
 800da40:	f7f2 fde2 	bl	8000608 <__aeabi_dmul>
 800da44:	a338      	add	r3, pc, #224	; (adr r3, 800db28 <__kernel_cos+0x158>)
 800da46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4a:	f7f2 fc27 	bl	800029c <__adddf3>
 800da4e:	4622      	mov	r2, r4
 800da50:	462b      	mov	r3, r5
 800da52:	f7f2 fdd9 	bl	8000608 <__aeabi_dmul>
 800da56:	a336      	add	r3, pc, #216	; (adr r3, 800db30 <__kernel_cos+0x160>)
 800da58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da5c:	f7f2 fc1c 	bl	8000298 <__aeabi_dsub>
 800da60:	4622      	mov	r2, r4
 800da62:	462b      	mov	r3, r5
 800da64:	f7f2 fdd0 	bl	8000608 <__aeabi_dmul>
 800da68:	a333      	add	r3, pc, #204	; (adr r3, 800db38 <__kernel_cos+0x168>)
 800da6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6e:	f7f2 fc15 	bl	800029c <__adddf3>
 800da72:	4622      	mov	r2, r4
 800da74:	462b      	mov	r3, r5
 800da76:	f7f2 fdc7 	bl	8000608 <__aeabi_dmul>
 800da7a:	4622      	mov	r2, r4
 800da7c:	462b      	mov	r3, r5
 800da7e:	f7f2 fdc3 	bl	8000608 <__aeabi_dmul>
 800da82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da86:	4604      	mov	r4, r0
 800da88:	460d      	mov	r5, r1
 800da8a:	4630      	mov	r0, r6
 800da8c:	4639      	mov	r1, r7
 800da8e:	f7f2 fdbb 	bl	8000608 <__aeabi_dmul>
 800da92:	460b      	mov	r3, r1
 800da94:	4602      	mov	r2, r0
 800da96:	4629      	mov	r1, r5
 800da98:	4620      	mov	r0, r4
 800da9a:	f7f2 fbfd 	bl	8000298 <__aeabi_dsub>
 800da9e:	4b2b      	ldr	r3, [pc, #172]	; (800db4c <__kernel_cos+0x17c>)
 800daa0:	4598      	cmp	r8, r3
 800daa2:	4606      	mov	r6, r0
 800daa4:	460f      	mov	r7, r1
 800daa6:	dc10      	bgt.n	800daca <__kernel_cos+0xfa>
 800daa8:	4602      	mov	r2, r0
 800daaa:	460b      	mov	r3, r1
 800daac:	4650      	mov	r0, sl
 800daae:	4659      	mov	r1, fp
 800dab0:	f7f2 fbf2 	bl	8000298 <__aeabi_dsub>
 800dab4:	460b      	mov	r3, r1
 800dab6:	4926      	ldr	r1, [pc, #152]	; (800db50 <__kernel_cos+0x180>)
 800dab8:	4602      	mov	r2, r0
 800daba:	2000      	movs	r0, #0
 800dabc:	f7f2 fbec 	bl	8000298 <__aeabi_dsub>
 800dac0:	ec41 0b10 	vmov	d0, r0, r1
 800dac4:	b003      	add	sp, #12
 800dac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daca:	4b22      	ldr	r3, [pc, #136]	; (800db54 <__kernel_cos+0x184>)
 800dacc:	4920      	ldr	r1, [pc, #128]	; (800db50 <__kernel_cos+0x180>)
 800dace:	4598      	cmp	r8, r3
 800dad0:	bfcc      	ite	gt
 800dad2:	4d21      	ldrgt	r5, [pc, #132]	; (800db58 <__kernel_cos+0x188>)
 800dad4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800dad8:	2400      	movs	r4, #0
 800dada:	4622      	mov	r2, r4
 800dadc:	462b      	mov	r3, r5
 800dade:	2000      	movs	r0, #0
 800dae0:	f7f2 fbda 	bl	8000298 <__aeabi_dsub>
 800dae4:	4622      	mov	r2, r4
 800dae6:	4680      	mov	r8, r0
 800dae8:	4689      	mov	r9, r1
 800daea:	462b      	mov	r3, r5
 800daec:	4650      	mov	r0, sl
 800daee:	4659      	mov	r1, fp
 800daf0:	f7f2 fbd2 	bl	8000298 <__aeabi_dsub>
 800daf4:	4632      	mov	r2, r6
 800daf6:	463b      	mov	r3, r7
 800daf8:	f7f2 fbce 	bl	8000298 <__aeabi_dsub>
 800dafc:	4602      	mov	r2, r0
 800dafe:	460b      	mov	r3, r1
 800db00:	4640      	mov	r0, r8
 800db02:	4649      	mov	r1, r9
 800db04:	e7da      	b.n	800dabc <__kernel_cos+0xec>
 800db06:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800db40 <__kernel_cos+0x170>
 800db0a:	e7db      	b.n	800dac4 <__kernel_cos+0xf4>
 800db0c:	f3af 8000 	nop.w
 800db10:	be8838d4 	.word	0xbe8838d4
 800db14:	bda8fae9 	.word	0xbda8fae9
 800db18:	bdb4b1c4 	.word	0xbdb4b1c4
 800db1c:	3e21ee9e 	.word	0x3e21ee9e
 800db20:	809c52ad 	.word	0x809c52ad
 800db24:	3e927e4f 	.word	0x3e927e4f
 800db28:	19cb1590 	.word	0x19cb1590
 800db2c:	3efa01a0 	.word	0x3efa01a0
 800db30:	16c15177 	.word	0x16c15177
 800db34:	3f56c16c 	.word	0x3f56c16c
 800db38:	5555554c 	.word	0x5555554c
 800db3c:	3fa55555 	.word	0x3fa55555
 800db40:	00000000 	.word	0x00000000
 800db44:	3ff00000 	.word	0x3ff00000
 800db48:	3fe00000 	.word	0x3fe00000
 800db4c:	3fd33332 	.word	0x3fd33332
 800db50:	3ff00000 	.word	0x3ff00000
 800db54:	3fe90000 	.word	0x3fe90000
 800db58:	3fd20000 	.word	0x3fd20000
 800db5c:	00000000 	.word	0x00000000

0800db60 <__kernel_sin>:
 800db60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db64:	ed2d 8b04 	vpush	{d8-d9}
 800db68:	eeb0 8a41 	vmov.f32	s16, s2
 800db6c:	eef0 8a61 	vmov.f32	s17, s3
 800db70:	ec55 4b10 	vmov	r4, r5, d0
 800db74:	b083      	sub	sp, #12
 800db76:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800db7a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800db7e:	9001      	str	r0, [sp, #4]
 800db80:	da06      	bge.n	800db90 <__kernel_sin+0x30>
 800db82:	ee10 0a10 	vmov	r0, s0
 800db86:	4629      	mov	r1, r5
 800db88:	f7f2 ffee 	bl	8000b68 <__aeabi_d2iz>
 800db8c:	2800      	cmp	r0, #0
 800db8e:	d051      	beq.n	800dc34 <__kernel_sin+0xd4>
 800db90:	4622      	mov	r2, r4
 800db92:	462b      	mov	r3, r5
 800db94:	4620      	mov	r0, r4
 800db96:	4629      	mov	r1, r5
 800db98:	f7f2 fd36 	bl	8000608 <__aeabi_dmul>
 800db9c:	4682      	mov	sl, r0
 800db9e:	468b      	mov	fp, r1
 800dba0:	4602      	mov	r2, r0
 800dba2:	460b      	mov	r3, r1
 800dba4:	4620      	mov	r0, r4
 800dba6:	4629      	mov	r1, r5
 800dba8:	f7f2 fd2e 	bl	8000608 <__aeabi_dmul>
 800dbac:	a341      	add	r3, pc, #260	; (adr r3, 800dcb4 <__kernel_sin+0x154>)
 800dbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb2:	4680      	mov	r8, r0
 800dbb4:	4689      	mov	r9, r1
 800dbb6:	4650      	mov	r0, sl
 800dbb8:	4659      	mov	r1, fp
 800dbba:	f7f2 fd25 	bl	8000608 <__aeabi_dmul>
 800dbbe:	a33f      	add	r3, pc, #252	; (adr r3, 800dcbc <__kernel_sin+0x15c>)
 800dbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc4:	f7f2 fb68 	bl	8000298 <__aeabi_dsub>
 800dbc8:	4652      	mov	r2, sl
 800dbca:	465b      	mov	r3, fp
 800dbcc:	f7f2 fd1c 	bl	8000608 <__aeabi_dmul>
 800dbd0:	a33c      	add	r3, pc, #240	; (adr r3, 800dcc4 <__kernel_sin+0x164>)
 800dbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd6:	f7f2 fb61 	bl	800029c <__adddf3>
 800dbda:	4652      	mov	r2, sl
 800dbdc:	465b      	mov	r3, fp
 800dbde:	f7f2 fd13 	bl	8000608 <__aeabi_dmul>
 800dbe2:	a33a      	add	r3, pc, #232	; (adr r3, 800dccc <__kernel_sin+0x16c>)
 800dbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe8:	f7f2 fb56 	bl	8000298 <__aeabi_dsub>
 800dbec:	4652      	mov	r2, sl
 800dbee:	465b      	mov	r3, fp
 800dbf0:	f7f2 fd0a 	bl	8000608 <__aeabi_dmul>
 800dbf4:	a337      	add	r3, pc, #220	; (adr r3, 800dcd4 <__kernel_sin+0x174>)
 800dbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfa:	f7f2 fb4f 	bl	800029c <__adddf3>
 800dbfe:	9b01      	ldr	r3, [sp, #4]
 800dc00:	4606      	mov	r6, r0
 800dc02:	460f      	mov	r7, r1
 800dc04:	b9eb      	cbnz	r3, 800dc42 <__kernel_sin+0xe2>
 800dc06:	4602      	mov	r2, r0
 800dc08:	460b      	mov	r3, r1
 800dc0a:	4650      	mov	r0, sl
 800dc0c:	4659      	mov	r1, fp
 800dc0e:	f7f2 fcfb 	bl	8000608 <__aeabi_dmul>
 800dc12:	a325      	add	r3, pc, #148	; (adr r3, 800dca8 <__kernel_sin+0x148>)
 800dc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc18:	f7f2 fb3e 	bl	8000298 <__aeabi_dsub>
 800dc1c:	4642      	mov	r2, r8
 800dc1e:	464b      	mov	r3, r9
 800dc20:	f7f2 fcf2 	bl	8000608 <__aeabi_dmul>
 800dc24:	4602      	mov	r2, r0
 800dc26:	460b      	mov	r3, r1
 800dc28:	4620      	mov	r0, r4
 800dc2a:	4629      	mov	r1, r5
 800dc2c:	f7f2 fb36 	bl	800029c <__adddf3>
 800dc30:	4604      	mov	r4, r0
 800dc32:	460d      	mov	r5, r1
 800dc34:	ec45 4b10 	vmov	d0, r4, r5
 800dc38:	b003      	add	sp, #12
 800dc3a:	ecbd 8b04 	vpop	{d8-d9}
 800dc3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc42:	4b1b      	ldr	r3, [pc, #108]	; (800dcb0 <__kernel_sin+0x150>)
 800dc44:	ec51 0b18 	vmov	r0, r1, d8
 800dc48:	2200      	movs	r2, #0
 800dc4a:	f7f2 fcdd 	bl	8000608 <__aeabi_dmul>
 800dc4e:	4632      	mov	r2, r6
 800dc50:	ec41 0b19 	vmov	d9, r0, r1
 800dc54:	463b      	mov	r3, r7
 800dc56:	4640      	mov	r0, r8
 800dc58:	4649      	mov	r1, r9
 800dc5a:	f7f2 fcd5 	bl	8000608 <__aeabi_dmul>
 800dc5e:	4602      	mov	r2, r0
 800dc60:	460b      	mov	r3, r1
 800dc62:	ec51 0b19 	vmov	r0, r1, d9
 800dc66:	f7f2 fb17 	bl	8000298 <__aeabi_dsub>
 800dc6a:	4652      	mov	r2, sl
 800dc6c:	465b      	mov	r3, fp
 800dc6e:	f7f2 fccb 	bl	8000608 <__aeabi_dmul>
 800dc72:	ec53 2b18 	vmov	r2, r3, d8
 800dc76:	f7f2 fb0f 	bl	8000298 <__aeabi_dsub>
 800dc7a:	a30b      	add	r3, pc, #44	; (adr r3, 800dca8 <__kernel_sin+0x148>)
 800dc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc80:	4606      	mov	r6, r0
 800dc82:	460f      	mov	r7, r1
 800dc84:	4640      	mov	r0, r8
 800dc86:	4649      	mov	r1, r9
 800dc88:	f7f2 fcbe 	bl	8000608 <__aeabi_dmul>
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	460b      	mov	r3, r1
 800dc90:	4630      	mov	r0, r6
 800dc92:	4639      	mov	r1, r7
 800dc94:	f7f2 fb02 	bl	800029c <__adddf3>
 800dc98:	4602      	mov	r2, r0
 800dc9a:	460b      	mov	r3, r1
 800dc9c:	4620      	mov	r0, r4
 800dc9e:	4629      	mov	r1, r5
 800dca0:	f7f2 fafa 	bl	8000298 <__aeabi_dsub>
 800dca4:	e7c4      	b.n	800dc30 <__kernel_sin+0xd0>
 800dca6:	bf00      	nop
 800dca8:	55555549 	.word	0x55555549
 800dcac:	3fc55555 	.word	0x3fc55555
 800dcb0:	3fe00000 	.word	0x3fe00000
 800dcb4:	5acfd57c 	.word	0x5acfd57c
 800dcb8:	3de5d93a 	.word	0x3de5d93a
 800dcbc:	8a2b9ceb 	.word	0x8a2b9ceb
 800dcc0:	3e5ae5e6 	.word	0x3e5ae5e6
 800dcc4:	57b1fe7d 	.word	0x57b1fe7d
 800dcc8:	3ec71de3 	.word	0x3ec71de3
 800dccc:	19c161d5 	.word	0x19c161d5
 800dcd0:	3f2a01a0 	.word	0x3f2a01a0
 800dcd4:	1110f8a6 	.word	0x1110f8a6
 800dcd8:	3f811111 	.word	0x3f811111
 800dcdc:	00000000 	.word	0x00000000

0800dce0 <__kernel_tan>:
 800dce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce4:	ed2d 8b06 	vpush	{d8-d10}
 800dce8:	ec5b ab10 	vmov	sl, fp, d0
 800dcec:	4be0      	ldr	r3, [pc, #896]	; (800e070 <__kernel_tan+0x390>)
 800dcee:	b083      	sub	sp, #12
 800dcf0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800dcf4:	429f      	cmp	r7, r3
 800dcf6:	ec59 8b11 	vmov	r8, r9, d1
 800dcfa:	4606      	mov	r6, r0
 800dcfc:	f8cd b000 	str.w	fp, [sp]
 800dd00:	dc61      	bgt.n	800ddc6 <__kernel_tan+0xe6>
 800dd02:	ee10 0a10 	vmov	r0, s0
 800dd06:	4659      	mov	r1, fp
 800dd08:	f7f2 ff2e 	bl	8000b68 <__aeabi_d2iz>
 800dd0c:	4605      	mov	r5, r0
 800dd0e:	2800      	cmp	r0, #0
 800dd10:	f040 8083 	bne.w	800de1a <__kernel_tan+0x13a>
 800dd14:	1c73      	adds	r3, r6, #1
 800dd16:	4652      	mov	r2, sl
 800dd18:	4313      	orrs	r3, r2
 800dd1a:	433b      	orrs	r3, r7
 800dd1c:	d112      	bne.n	800dd44 <__kernel_tan+0x64>
 800dd1e:	ec4b ab10 	vmov	d0, sl, fp
 800dd22:	f7ff fda9 	bl	800d878 <fabs>
 800dd26:	49d3      	ldr	r1, [pc, #844]	; (800e074 <__kernel_tan+0x394>)
 800dd28:	ec53 2b10 	vmov	r2, r3, d0
 800dd2c:	2000      	movs	r0, #0
 800dd2e:	f7f2 fd95 	bl	800085c <__aeabi_ddiv>
 800dd32:	4682      	mov	sl, r0
 800dd34:	468b      	mov	fp, r1
 800dd36:	ec4b ab10 	vmov	d0, sl, fp
 800dd3a:	b003      	add	sp, #12
 800dd3c:	ecbd 8b06 	vpop	{d8-d10}
 800dd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd44:	2e01      	cmp	r6, #1
 800dd46:	d0f6      	beq.n	800dd36 <__kernel_tan+0x56>
 800dd48:	4642      	mov	r2, r8
 800dd4a:	464b      	mov	r3, r9
 800dd4c:	4650      	mov	r0, sl
 800dd4e:	4659      	mov	r1, fp
 800dd50:	f7f2 faa4 	bl	800029c <__adddf3>
 800dd54:	4602      	mov	r2, r0
 800dd56:	460b      	mov	r3, r1
 800dd58:	460f      	mov	r7, r1
 800dd5a:	2000      	movs	r0, #0
 800dd5c:	49c6      	ldr	r1, [pc, #792]	; (800e078 <__kernel_tan+0x398>)
 800dd5e:	f7f2 fd7d 	bl	800085c <__aeabi_ddiv>
 800dd62:	e9cd 0100 	strd	r0, r1, [sp]
 800dd66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd6a:	462e      	mov	r6, r5
 800dd6c:	4652      	mov	r2, sl
 800dd6e:	462c      	mov	r4, r5
 800dd70:	4630      	mov	r0, r6
 800dd72:	461d      	mov	r5, r3
 800dd74:	4639      	mov	r1, r7
 800dd76:	465b      	mov	r3, fp
 800dd78:	f7f2 fa8e 	bl	8000298 <__aeabi_dsub>
 800dd7c:	4602      	mov	r2, r0
 800dd7e:	460b      	mov	r3, r1
 800dd80:	4640      	mov	r0, r8
 800dd82:	4649      	mov	r1, r9
 800dd84:	f7f2 fa88 	bl	8000298 <__aeabi_dsub>
 800dd88:	4632      	mov	r2, r6
 800dd8a:	462b      	mov	r3, r5
 800dd8c:	f7f2 fc3c 	bl	8000608 <__aeabi_dmul>
 800dd90:	4632      	mov	r2, r6
 800dd92:	4680      	mov	r8, r0
 800dd94:	4689      	mov	r9, r1
 800dd96:	462b      	mov	r3, r5
 800dd98:	4630      	mov	r0, r6
 800dd9a:	4639      	mov	r1, r7
 800dd9c:	f7f2 fc34 	bl	8000608 <__aeabi_dmul>
 800dda0:	4bb4      	ldr	r3, [pc, #720]	; (800e074 <__kernel_tan+0x394>)
 800dda2:	2200      	movs	r2, #0
 800dda4:	f7f2 fa7a 	bl	800029c <__adddf3>
 800dda8:	4602      	mov	r2, r0
 800ddaa:	460b      	mov	r3, r1
 800ddac:	4640      	mov	r0, r8
 800ddae:	4649      	mov	r1, r9
 800ddb0:	f7f2 fa74 	bl	800029c <__adddf3>
 800ddb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddb8:	f7f2 fc26 	bl	8000608 <__aeabi_dmul>
 800ddbc:	4622      	mov	r2, r4
 800ddbe:	462b      	mov	r3, r5
 800ddc0:	f7f2 fa6c 	bl	800029c <__adddf3>
 800ddc4:	e7b5      	b.n	800dd32 <__kernel_tan+0x52>
 800ddc6:	4bad      	ldr	r3, [pc, #692]	; (800e07c <__kernel_tan+0x39c>)
 800ddc8:	429f      	cmp	r7, r3
 800ddca:	dd26      	ble.n	800de1a <__kernel_tan+0x13a>
 800ddcc:	9b00      	ldr	r3, [sp, #0]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	da09      	bge.n	800dde6 <__kernel_tan+0x106>
 800ddd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ddd6:	469b      	mov	fp, r3
 800ddd8:	ee10 aa10 	vmov	sl, s0
 800dddc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dde0:	ee11 8a10 	vmov	r8, s2
 800dde4:	4699      	mov	r9, r3
 800dde6:	4652      	mov	r2, sl
 800dde8:	465b      	mov	r3, fp
 800ddea:	a183      	add	r1, pc, #524	; (adr r1, 800dff8 <__kernel_tan+0x318>)
 800ddec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ddf0:	f7f2 fa52 	bl	8000298 <__aeabi_dsub>
 800ddf4:	4642      	mov	r2, r8
 800ddf6:	464b      	mov	r3, r9
 800ddf8:	4604      	mov	r4, r0
 800ddfa:	460d      	mov	r5, r1
 800ddfc:	a180      	add	r1, pc, #512	; (adr r1, 800e000 <__kernel_tan+0x320>)
 800ddfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de02:	f7f2 fa49 	bl	8000298 <__aeabi_dsub>
 800de06:	4622      	mov	r2, r4
 800de08:	462b      	mov	r3, r5
 800de0a:	f7f2 fa47 	bl	800029c <__adddf3>
 800de0e:	f04f 0800 	mov.w	r8, #0
 800de12:	4682      	mov	sl, r0
 800de14:	468b      	mov	fp, r1
 800de16:	f04f 0900 	mov.w	r9, #0
 800de1a:	4652      	mov	r2, sl
 800de1c:	465b      	mov	r3, fp
 800de1e:	4650      	mov	r0, sl
 800de20:	4659      	mov	r1, fp
 800de22:	f7f2 fbf1 	bl	8000608 <__aeabi_dmul>
 800de26:	4602      	mov	r2, r0
 800de28:	460b      	mov	r3, r1
 800de2a:	ec43 2b18 	vmov	d8, r2, r3
 800de2e:	f7f2 fbeb 	bl	8000608 <__aeabi_dmul>
 800de32:	ec53 2b18 	vmov	r2, r3, d8
 800de36:	4604      	mov	r4, r0
 800de38:	460d      	mov	r5, r1
 800de3a:	4650      	mov	r0, sl
 800de3c:	4659      	mov	r1, fp
 800de3e:	f7f2 fbe3 	bl	8000608 <__aeabi_dmul>
 800de42:	a371      	add	r3, pc, #452	; (adr r3, 800e008 <__kernel_tan+0x328>)
 800de44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de48:	ec41 0b19 	vmov	d9, r0, r1
 800de4c:	4620      	mov	r0, r4
 800de4e:	4629      	mov	r1, r5
 800de50:	f7f2 fbda 	bl	8000608 <__aeabi_dmul>
 800de54:	a36e      	add	r3, pc, #440	; (adr r3, 800e010 <__kernel_tan+0x330>)
 800de56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de5a:	f7f2 fa1f 	bl	800029c <__adddf3>
 800de5e:	4622      	mov	r2, r4
 800de60:	462b      	mov	r3, r5
 800de62:	f7f2 fbd1 	bl	8000608 <__aeabi_dmul>
 800de66:	a36c      	add	r3, pc, #432	; (adr r3, 800e018 <__kernel_tan+0x338>)
 800de68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6c:	f7f2 fa16 	bl	800029c <__adddf3>
 800de70:	4622      	mov	r2, r4
 800de72:	462b      	mov	r3, r5
 800de74:	f7f2 fbc8 	bl	8000608 <__aeabi_dmul>
 800de78:	a369      	add	r3, pc, #420	; (adr r3, 800e020 <__kernel_tan+0x340>)
 800de7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7e:	f7f2 fa0d 	bl	800029c <__adddf3>
 800de82:	4622      	mov	r2, r4
 800de84:	462b      	mov	r3, r5
 800de86:	f7f2 fbbf 	bl	8000608 <__aeabi_dmul>
 800de8a:	a367      	add	r3, pc, #412	; (adr r3, 800e028 <__kernel_tan+0x348>)
 800de8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de90:	f7f2 fa04 	bl	800029c <__adddf3>
 800de94:	4622      	mov	r2, r4
 800de96:	462b      	mov	r3, r5
 800de98:	f7f2 fbb6 	bl	8000608 <__aeabi_dmul>
 800de9c:	a364      	add	r3, pc, #400	; (adr r3, 800e030 <__kernel_tan+0x350>)
 800de9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea2:	f7f2 f9fb 	bl	800029c <__adddf3>
 800dea6:	ec53 2b18 	vmov	r2, r3, d8
 800deaa:	f7f2 fbad 	bl	8000608 <__aeabi_dmul>
 800deae:	a362      	add	r3, pc, #392	; (adr r3, 800e038 <__kernel_tan+0x358>)
 800deb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb4:	ec41 0b1a 	vmov	d10, r0, r1
 800deb8:	4620      	mov	r0, r4
 800deba:	4629      	mov	r1, r5
 800debc:	f7f2 fba4 	bl	8000608 <__aeabi_dmul>
 800dec0:	a35f      	add	r3, pc, #380	; (adr r3, 800e040 <__kernel_tan+0x360>)
 800dec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec6:	f7f2 f9e9 	bl	800029c <__adddf3>
 800deca:	4622      	mov	r2, r4
 800decc:	462b      	mov	r3, r5
 800dece:	f7f2 fb9b 	bl	8000608 <__aeabi_dmul>
 800ded2:	a35d      	add	r3, pc, #372	; (adr r3, 800e048 <__kernel_tan+0x368>)
 800ded4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded8:	f7f2 f9e0 	bl	800029c <__adddf3>
 800dedc:	4622      	mov	r2, r4
 800dede:	462b      	mov	r3, r5
 800dee0:	f7f2 fb92 	bl	8000608 <__aeabi_dmul>
 800dee4:	a35a      	add	r3, pc, #360	; (adr r3, 800e050 <__kernel_tan+0x370>)
 800dee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deea:	f7f2 f9d7 	bl	800029c <__adddf3>
 800deee:	4622      	mov	r2, r4
 800def0:	462b      	mov	r3, r5
 800def2:	f7f2 fb89 	bl	8000608 <__aeabi_dmul>
 800def6:	a358      	add	r3, pc, #352	; (adr r3, 800e058 <__kernel_tan+0x378>)
 800def8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defc:	f7f2 f9ce 	bl	800029c <__adddf3>
 800df00:	4622      	mov	r2, r4
 800df02:	462b      	mov	r3, r5
 800df04:	f7f2 fb80 	bl	8000608 <__aeabi_dmul>
 800df08:	a355      	add	r3, pc, #340	; (adr r3, 800e060 <__kernel_tan+0x380>)
 800df0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0e:	f7f2 f9c5 	bl	800029c <__adddf3>
 800df12:	4602      	mov	r2, r0
 800df14:	460b      	mov	r3, r1
 800df16:	ec51 0b1a 	vmov	r0, r1, d10
 800df1a:	f7f2 f9bf 	bl	800029c <__adddf3>
 800df1e:	ec53 2b19 	vmov	r2, r3, d9
 800df22:	f7f2 fb71 	bl	8000608 <__aeabi_dmul>
 800df26:	4642      	mov	r2, r8
 800df28:	464b      	mov	r3, r9
 800df2a:	f7f2 f9b7 	bl	800029c <__adddf3>
 800df2e:	ec53 2b18 	vmov	r2, r3, d8
 800df32:	f7f2 fb69 	bl	8000608 <__aeabi_dmul>
 800df36:	4642      	mov	r2, r8
 800df38:	464b      	mov	r3, r9
 800df3a:	f7f2 f9af 	bl	800029c <__adddf3>
 800df3e:	a34a      	add	r3, pc, #296	; (adr r3, 800e068 <__kernel_tan+0x388>)
 800df40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df44:	4604      	mov	r4, r0
 800df46:	460d      	mov	r5, r1
 800df48:	ec51 0b19 	vmov	r0, r1, d9
 800df4c:	f7f2 fb5c 	bl	8000608 <__aeabi_dmul>
 800df50:	4622      	mov	r2, r4
 800df52:	462b      	mov	r3, r5
 800df54:	f7f2 f9a2 	bl	800029c <__adddf3>
 800df58:	460b      	mov	r3, r1
 800df5a:	ec41 0b18 	vmov	d8, r0, r1
 800df5e:	4602      	mov	r2, r0
 800df60:	4659      	mov	r1, fp
 800df62:	4650      	mov	r0, sl
 800df64:	f7f2 f99a 	bl	800029c <__adddf3>
 800df68:	4b44      	ldr	r3, [pc, #272]	; (800e07c <__kernel_tan+0x39c>)
 800df6a:	429f      	cmp	r7, r3
 800df6c:	4604      	mov	r4, r0
 800df6e:	460d      	mov	r5, r1
 800df70:	f340 8086 	ble.w	800e080 <__kernel_tan+0x3a0>
 800df74:	4630      	mov	r0, r6
 800df76:	f7f2 fadd 	bl	8000534 <__aeabi_i2d>
 800df7a:	4622      	mov	r2, r4
 800df7c:	4680      	mov	r8, r0
 800df7e:	4689      	mov	r9, r1
 800df80:	462b      	mov	r3, r5
 800df82:	4620      	mov	r0, r4
 800df84:	4629      	mov	r1, r5
 800df86:	f7f2 fb3f 	bl	8000608 <__aeabi_dmul>
 800df8a:	4642      	mov	r2, r8
 800df8c:	4606      	mov	r6, r0
 800df8e:	460f      	mov	r7, r1
 800df90:	464b      	mov	r3, r9
 800df92:	4620      	mov	r0, r4
 800df94:	4629      	mov	r1, r5
 800df96:	f7f2 f981 	bl	800029c <__adddf3>
 800df9a:	4602      	mov	r2, r0
 800df9c:	460b      	mov	r3, r1
 800df9e:	4630      	mov	r0, r6
 800dfa0:	4639      	mov	r1, r7
 800dfa2:	f7f2 fc5b 	bl	800085c <__aeabi_ddiv>
 800dfa6:	ec53 2b18 	vmov	r2, r3, d8
 800dfaa:	f7f2 f975 	bl	8000298 <__aeabi_dsub>
 800dfae:	4602      	mov	r2, r0
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	4650      	mov	r0, sl
 800dfb4:	4659      	mov	r1, fp
 800dfb6:	f7f2 f96f 	bl	8000298 <__aeabi_dsub>
 800dfba:	4602      	mov	r2, r0
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	f7f2 f96d 	bl	800029c <__adddf3>
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	4640      	mov	r0, r8
 800dfc8:	4649      	mov	r1, r9
 800dfca:	f7f2 f965 	bl	8000298 <__aeabi_dsub>
 800dfce:	9b00      	ldr	r3, [sp, #0]
 800dfd0:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800dfd4:	f00a 0a02 	and.w	sl, sl, #2
 800dfd8:	4604      	mov	r4, r0
 800dfda:	f1ca 0001 	rsb	r0, sl, #1
 800dfde:	460d      	mov	r5, r1
 800dfe0:	f7f2 faa8 	bl	8000534 <__aeabi_i2d>
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	460b      	mov	r3, r1
 800dfe8:	4620      	mov	r0, r4
 800dfea:	4629      	mov	r1, r5
 800dfec:	f7f2 fb0c 	bl	8000608 <__aeabi_dmul>
 800dff0:	e69f      	b.n	800dd32 <__kernel_tan+0x52>
 800dff2:	bf00      	nop
 800dff4:	f3af 8000 	nop.w
 800dff8:	54442d18 	.word	0x54442d18
 800dffc:	3fe921fb 	.word	0x3fe921fb
 800e000:	33145c07 	.word	0x33145c07
 800e004:	3c81a626 	.word	0x3c81a626
 800e008:	74bf7ad4 	.word	0x74bf7ad4
 800e00c:	3efb2a70 	.word	0x3efb2a70
 800e010:	32f0a7e9 	.word	0x32f0a7e9
 800e014:	3f12b80f 	.word	0x3f12b80f
 800e018:	1a8d1068 	.word	0x1a8d1068
 800e01c:	3f3026f7 	.word	0x3f3026f7
 800e020:	fee08315 	.word	0xfee08315
 800e024:	3f57dbc8 	.word	0x3f57dbc8
 800e028:	e96e8493 	.word	0xe96e8493
 800e02c:	3f8226e3 	.word	0x3f8226e3
 800e030:	1bb341fe 	.word	0x1bb341fe
 800e034:	3faba1ba 	.word	0x3faba1ba
 800e038:	db605373 	.word	0xdb605373
 800e03c:	bef375cb 	.word	0xbef375cb
 800e040:	a03792a6 	.word	0xa03792a6
 800e044:	3f147e88 	.word	0x3f147e88
 800e048:	f2f26501 	.word	0xf2f26501
 800e04c:	3f4344d8 	.word	0x3f4344d8
 800e050:	c9560328 	.word	0xc9560328
 800e054:	3f6d6d22 	.word	0x3f6d6d22
 800e058:	8406d637 	.word	0x8406d637
 800e05c:	3f9664f4 	.word	0x3f9664f4
 800e060:	1110fe7a 	.word	0x1110fe7a
 800e064:	3fc11111 	.word	0x3fc11111
 800e068:	55555563 	.word	0x55555563
 800e06c:	3fd55555 	.word	0x3fd55555
 800e070:	3e2fffff 	.word	0x3e2fffff
 800e074:	3ff00000 	.word	0x3ff00000
 800e078:	bff00000 	.word	0xbff00000
 800e07c:	3fe59427 	.word	0x3fe59427
 800e080:	2e01      	cmp	r6, #1
 800e082:	d02f      	beq.n	800e0e4 <__kernel_tan+0x404>
 800e084:	460f      	mov	r7, r1
 800e086:	4602      	mov	r2, r0
 800e088:	460b      	mov	r3, r1
 800e08a:	4689      	mov	r9, r1
 800e08c:	2000      	movs	r0, #0
 800e08e:	4917      	ldr	r1, [pc, #92]	; (800e0ec <__kernel_tan+0x40c>)
 800e090:	f7f2 fbe4 	bl	800085c <__aeabi_ddiv>
 800e094:	2600      	movs	r6, #0
 800e096:	e9cd 0100 	strd	r0, r1, [sp]
 800e09a:	4652      	mov	r2, sl
 800e09c:	465b      	mov	r3, fp
 800e09e:	4630      	mov	r0, r6
 800e0a0:	4639      	mov	r1, r7
 800e0a2:	f7f2 f8f9 	bl	8000298 <__aeabi_dsub>
 800e0a6:	e9dd 4500 	ldrd	r4, r5, [sp]
 800e0aa:	4602      	mov	r2, r0
 800e0ac:	460b      	mov	r3, r1
 800e0ae:	ec51 0b18 	vmov	r0, r1, d8
 800e0b2:	f7f2 f8f1 	bl	8000298 <__aeabi_dsub>
 800e0b6:	4632      	mov	r2, r6
 800e0b8:	462b      	mov	r3, r5
 800e0ba:	f7f2 faa5 	bl	8000608 <__aeabi_dmul>
 800e0be:	46b0      	mov	r8, r6
 800e0c0:	460f      	mov	r7, r1
 800e0c2:	4642      	mov	r2, r8
 800e0c4:	462b      	mov	r3, r5
 800e0c6:	4634      	mov	r4, r6
 800e0c8:	4649      	mov	r1, r9
 800e0ca:	4606      	mov	r6, r0
 800e0cc:	4640      	mov	r0, r8
 800e0ce:	f7f2 fa9b 	bl	8000608 <__aeabi_dmul>
 800e0d2:	4b07      	ldr	r3, [pc, #28]	; (800e0f0 <__kernel_tan+0x410>)
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	f7f2 f8e1 	bl	800029c <__adddf3>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	460b      	mov	r3, r1
 800e0de:	4630      	mov	r0, r6
 800e0e0:	4639      	mov	r1, r7
 800e0e2:	e665      	b.n	800ddb0 <__kernel_tan+0xd0>
 800e0e4:	4682      	mov	sl, r0
 800e0e6:	468b      	mov	fp, r1
 800e0e8:	e625      	b.n	800dd36 <__kernel_tan+0x56>
 800e0ea:	bf00      	nop
 800e0ec:	bff00000 	.word	0xbff00000
 800e0f0:	3ff00000 	.word	0x3ff00000
 800e0f4:	00000000 	.word	0x00000000

0800e0f8 <__ieee754_asin>:
 800e0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0fc:	ed2d 8b04 	vpush	{d8-d9}
 800e100:	ec55 4b10 	vmov	r4, r5, d0
 800e104:	4bcc      	ldr	r3, [pc, #816]	; (800e438 <__ieee754_asin+0x340>)
 800e106:	b083      	sub	sp, #12
 800e108:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e10c:	4598      	cmp	r8, r3
 800e10e:	9501      	str	r5, [sp, #4]
 800e110:	dd33      	ble.n	800e17a <__ieee754_asin+0x82>
 800e112:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800e116:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800e11a:	ea58 0804 	orrs.w	r8, r8, r4
 800e11e:	d117      	bne.n	800e150 <__ieee754_asin+0x58>
 800e120:	a3ab      	add	r3, pc, #684	; (adr r3, 800e3d0 <__ieee754_asin+0x2d8>)
 800e122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e126:	ee10 0a10 	vmov	r0, s0
 800e12a:	4629      	mov	r1, r5
 800e12c:	f7f2 fa6c 	bl	8000608 <__aeabi_dmul>
 800e130:	a3a9      	add	r3, pc, #676	; (adr r3, 800e3d8 <__ieee754_asin+0x2e0>)
 800e132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e136:	4606      	mov	r6, r0
 800e138:	460f      	mov	r7, r1
 800e13a:	4620      	mov	r0, r4
 800e13c:	4629      	mov	r1, r5
 800e13e:	f7f2 fa63 	bl	8000608 <__aeabi_dmul>
 800e142:	4602      	mov	r2, r0
 800e144:	460b      	mov	r3, r1
 800e146:	4630      	mov	r0, r6
 800e148:	4639      	mov	r1, r7
 800e14a:	f7f2 f8a7 	bl	800029c <__adddf3>
 800e14e:	e00b      	b.n	800e168 <__ieee754_asin+0x70>
 800e150:	ee10 2a10 	vmov	r2, s0
 800e154:	462b      	mov	r3, r5
 800e156:	ee10 0a10 	vmov	r0, s0
 800e15a:	4629      	mov	r1, r5
 800e15c:	f7f2 f89c 	bl	8000298 <__aeabi_dsub>
 800e160:	4602      	mov	r2, r0
 800e162:	460b      	mov	r3, r1
 800e164:	f7f2 fb7a 	bl	800085c <__aeabi_ddiv>
 800e168:	4604      	mov	r4, r0
 800e16a:	460d      	mov	r5, r1
 800e16c:	ec45 4b10 	vmov	d0, r4, r5
 800e170:	b003      	add	sp, #12
 800e172:	ecbd 8b04 	vpop	{d8-d9}
 800e176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e17a:	4bb0      	ldr	r3, [pc, #704]	; (800e43c <__ieee754_asin+0x344>)
 800e17c:	4598      	cmp	r8, r3
 800e17e:	dc11      	bgt.n	800e1a4 <__ieee754_asin+0xac>
 800e180:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e184:	f280 80ae 	bge.w	800e2e4 <__ieee754_asin+0x1ec>
 800e188:	a395      	add	r3, pc, #596	; (adr r3, 800e3e0 <__ieee754_asin+0x2e8>)
 800e18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18e:	ee10 0a10 	vmov	r0, s0
 800e192:	4629      	mov	r1, r5
 800e194:	f7f2 f882 	bl	800029c <__adddf3>
 800e198:	4ba9      	ldr	r3, [pc, #676]	; (800e440 <__ieee754_asin+0x348>)
 800e19a:	2200      	movs	r2, #0
 800e19c:	f7f2 fcc4 	bl	8000b28 <__aeabi_dcmpgt>
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	d1e3      	bne.n	800e16c <__ieee754_asin+0x74>
 800e1a4:	ec45 4b10 	vmov	d0, r4, r5
 800e1a8:	f7ff fb66 	bl	800d878 <fabs>
 800e1ac:	49a4      	ldr	r1, [pc, #656]	; (800e440 <__ieee754_asin+0x348>)
 800e1ae:	ec53 2b10 	vmov	r2, r3, d0
 800e1b2:	2000      	movs	r0, #0
 800e1b4:	f7f2 f870 	bl	8000298 <__aeabi_dsub>
 800e1b8:	4ba2      	ldr	r3, [pc, #648]	; (800e444 <__ieee754_asin+0x34c>)
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	f7f2 fa24 	bl	8000608 <__aeabi_dmul>
 800e1c0:	a389      	add	r3, pc, #548	; (adr r3, 800e3e8 <__ieee754_asin+0x2f0>)
 800e1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c6:	4604      	mov	r4, r0
 800e1c8:	460d      	mov	r5, r1
 800e1ca:	f7f2 fa1d 	bl	8000608 <__aeabi_dmul>
 800e1ce:	a388      	add	r3, pc, #544	; (adr r3, 800e3f0 <__ieee754_asin+0x2f8>)
 800e1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d4:	f7f2 f862 	bl	800029c <__adddf3>
 800e1d8:	4622      	mov	r2, r4
 800e1da:	462b      	mov	r3, r5
 800e1dc:	f7f2 fa14 	bl	8000608 <__aeabi_dmul>
 800e1e0:	a385      	add	r3, pc, #532	; (adr r3, 800e3f8 <__ieee754_asin+0x300>)
 800e1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e6:	f7f2 f857 	bl	8000298 <__aeabi_dsub>
 800e1ea:	4622      	mov	r2, r4
 800e1ec:	462b      	mov	r3, r5
 800e1ee:	f7f2 fa0b 	bl	8000608 <__aeabi_dmul>
 800e1f2:	a383      	add	r3, pc, #524	; (adr r3, 800e400 <__ieee754_asin+0x308>)
 800e1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f8:	f7f2 f850 	bl	800029c <__adddf3>
 800e1fc:	4622      	mov	r2, r4
 800e1fe:	462b      	mov	r3, r5
 800e200:	f7f2 fa02 	bl	8000608 <__aeabi_dmul>
 800e204:	a380      	add	r3, pc, #512	; (adr r3, 800e408 <__ieee754_asin+0x310>)
 800e206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e20a:	f7f2 f845 	bl	8000298 <__aeabi_dsub>
 800e20e:	4622      	mov	r2, r4
 800e210:	462b      	mov	r3, r5
 800e212:	f7f2 f9f9 	bl	8000608 <__aeabi_dmul>
 800e216:	a37e      	add	r3, pc, #504	; (adr r3, 800e410 <__ieee754_asin+0x318>)
 800e218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21c:	f7f2 f83e 	bl	800029c <__adddf3>
 800e220:	4622      	mov	r2, r4
 800e222:	462b      	mov	r3, r5
 800e224:	f7f2 f9f0 	bl	8000608 <__aeabi_dmul>
 800e228:	a37b      	add	r3, pc, #492	; (adr r3, 800e418 <__ieee754_asin+0x320>)
 800e22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e22e:	ec41 0b18 	vmov	d8, r0, r1
 800e232:	4620      	mov	r0, r4
 800e234:	4629      	mov	r1, r5
 800e236:	f7f2 f9e7 	bl	8000608 <__aeabi_dmul>
 800e23a:	a379      	add	r3, pc, #484	; (adr r3, 800e420 <__ieee754_asin+0x328>)
 800e23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e240:	f7f2 f82a 	bl	8000298 <__aeabi_dsub>
 800e244:	4622      	mov	r2, r4
 800e246:	462b      	mov	r3, r5
 800e248:	f7f2 f9de 	bl	8000608 <__aeabi_dmul>
 800e24c:	a376      	add	r3, pc, #472	; (adr r3, 800e428 <__ieee754_asin+0x330>)
 800e24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e252:	f7f2 f823 	bl	800029c <__adddf3>
 800e256:	4622      	mov	r2, r4
 800e258:	462b      	mov	r3, r5
 800e25a:	f7f2 f9d5 	bl	8000608 <__aeabi_dmul>
 800e25e:	a374      	add	r3, pc, #464	; (adr r3, 800e430 <__ieee754_asin+0x338>)
 800e260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e264:	f7f2 f818 	bl	8000298 <__aeabi_dsub>
 800e268:	4622      	mov	r2, r4
 800e26a:	462b      	mov	r3, r5
 800e26c:	f7f2 f9cc 	bl	8000608 <__aeabi_dmul>
 800e270:	4b73      	ldr	r3, [pc, #460]	; (800e440 <__ieee754_asin+0x348>)
 800e272:	2200      	movs	r2, #0
 800e274:	f7f2 f812 	bl	800029c <__adddf3>
 800e278:	ec45 4b10 	vmov	d0, r4, r5
 800e27c:	4606      	mov	r6, r0
 800e27e:	460f      	mov	r7, r1
 800e280:	f001 f9f8 	bl	800f674 <__ieee754_sqrt>
 800e284:	4b70      	ldr	r3, [pc, #448]	; (800e448 <__ieee754_asin+0x350>)
 800e286:	4598      	cmp	r8, r3
 800e288:	ec5b ab10 	vmov	sl, fp, d0
 800e28c:	f340 80de 	ble.w	800e44c <__ieee754_asin+0x354>
 800e290:	4632      	mov	r2, r6
 800e292:	463b      	mov	r3, r7
 800e294:	ec51 0b18 	vmov	r0, r1, d8
 800e298:	f7f2 fae0 	bl	800085c <__aeabi_ddiv>
 800e29c:	4652      	mov	r2, sl
 800e29e:	465b      	mov	r3, fp
 800e2a0:	f7f2 f9b2 	bl	8000608 <__aeabi_dmul>
 800e2a4:	4652      	mov	r2, sl
 800e2a6:	465b      	mov	r3, fp
 800e2a8:	f7f1 fff8 	bl	800029c <__adddf3>
 800e2ac:	4602      	mov	r2, r0
 800e2ae:	460b      	mov	r3, r1
 800e2b0:	f7f1 fff4 	bl	800029c <__adddf3>
 800e2b4:	a348      	add	r3, pc, #288	; (adr r3, 800e3d8 <__ieee754_asin+0x2e0>)
 800e2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ba:	f7f1 ffed 	bl	8000298 <__aeabi_dsub>
 800e2be:	4602      	mov	r2, r0
 800e2c0:	460b      	mov	r3, r1
 800e2c2:	a143      	add	r1, pc, #268	; (adr r1, 800e3d0 <__ieee754_asin+0x2d8>)
 800e2c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2c8:	f7f1 ffe6 	bl	8000298 <__aeabi_dsub>
 800e2cc:	9b01      	ldr	r3, [sp, #4]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	bfdc      	itt	le
 800e2d2:	4602      	movle	r2, r0
 800e2d4:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800e2d8:	4604      	mov	r4, r0
 800e2da:	460d      	mov	r5, r1
 800e2dc:	bfdc      	itt	le
 800e2de:	4614      	movle	r4, r2
 800e2e0:	461d      	movle	r5, r3
 800e2e2:	e743      	b.n	800e16c <__ieee754_asin+0x74>
 800e2e4:	ee10 2a10 	vmov	r2, s0
 800e2e8:	ee10 0a10 	vmov	r0, s0
 800e2ec:	462b      	mov	r3, r5
 800e2ee:	4629      	mov	r1, r5
 800e2f0:	f7f2 f98a 	bl	8000608 <__aeabi_dmul>
 800e2f4:	a33c      	add	r3, pc, #240	; (adr r3, 800e3e8 <__ieee754_asin+0x2f0>)
 800e2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2fa:	4606      	mov	r6, r0
 800e2fc:	460f      	mov	r7, r1
 800e2fe:	f7f2 f983 	bl	8000608 <__aeabi_dmul>
 800e302:	a33b      	add	r3, pc, #236	; (adr r3, 800e3f0 <__ieee754_asin+0x2f8>)
 800e304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e308:	f7f1 ffc8 	bl	800029c <__adddf3>
 800e30c:	4632      	mov	r2, r6
 800e30e:	463b      	mov	r3, r7
 800e310:	f7f2 f97a 	bl	8000608 <__aeabi_dmul>
 800e314:	a338      	add	r3, pc, #224	; (adr r3, 800e3f8 <__ieee754_asin+0x300>)
 800e316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e31a:	f7f1 ffbd 	bl	8000298 <__aeabi_dsub>
 800e31e:	4632      	mov	r2, r6
 800e320:	463b      	mov	r3, r7
 800e322:	f7f2 f971 	bl	8000608 <__aeabi_dmul>
 800e326:	a336      	add	r3, pc, #216	; (adr r3, 800e400 <__ieee754_asin+0x308>)
 800e328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e32c:	f7f1 ffb6 	bl	800029c <__adddf3>
 800e330:	4632      	mov	r2, r6
 800e332:	463b      	mov	r3, r7
 800e334:	f7f2 f968 	bl	8000608 <__aeabi_dmul>
 800e338:	a333      	add	r3, pc, #204	; (adr r3, 800e408 <__ieee754_asin+0x310>)
 800e33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33e:	f7f1 ffab 	bl	8000298 <__aeabi_dsub>
 800e342:	4632      	mov	r2, r6
 800e344:	463b      	mov	r3, r7
 800e346:	f7f2 f95f 	bl	8000608 <__aeabi_dmul>
 800e34a:	a331      	add	r3, pc, #196	; (adr r3, 800e410 <__ieee754_asin+0x318>)
 800e34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e350:	f7f1 ffa4 	bl	800029c <__adddf3>
 800e354:	4632      	mov	r2, r6
 800e356:	463b      	mov	r3, r7
 800e358:	f7f2 f956 	bl	8000608 <__aeabi_dmul>
 800e35c:	a32e      	add	r3, pc, #184	; (adr r3, 800e418 <__ieee754_asin+0x320>)
 800e35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e362:	4680      	mov	r8, r0
 800e364:	4689      	mov	r9, r1
 800e366:	4630      	mov	r0, r6
 800e368:	4639      	mov	r1, r7
 800e36a:	f7f2 f94d 	bl	8000608 <__aeabi_dmul>
 800e36e:	a32c      	add	r3, pc, #176	; (adr r3, 800e420 <__ieee754_asin+0x328>)
 800e370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e374:	f7f1 ff90 	bl	8000298 <__aeabi_dsub>
 800e378:	4632      	mov	r2, r6
 800e37a:	463b      	mov	r3, r7
 800e37c:	f7f2 f944 	bl	8000608 <__aeabi_dmul>
 800e380:	a329      	add	r3, pc, #164	; (adr r3, 800e428 <__ieee754_asin+0x330>)
 800e382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e386:	f7f1 ff89 	bl	800029c <__adddf3>
 800e38a:	4632      	mov	r2, r6
 800e38c:	463b      	mov	r3, r7
 800e38e:	f7f2 f93b 	bl	8000608 <__aeabi_dmul>
 800e392:	a327      	add	r3, pc, #156	; (adr r3, 800e430 <__ieee754_asin+0x338>)
 800e394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e398:	f7f1 ff7e 	bl	8000298 <__aeabi_dsub>
 800e39c:	4632      	mov	r2, r6
 800e39e:	463b      	mov	r3, r7
 800e3a0:	f7f2 f932 	bl	8000608 <__aeabi_dmul>
 800e3a4:	4b26      	ldr	r3, [pc, #152]	; (800e440 <__ieee754_asin+0x348>)
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	f7f1 ff78 	bl	800029c <__adddf3>
 800e3ac:	4602      	mov	r2, r0
 800e3ae:	460b      	mov	r3, r1
 800e3b0:	4640      	mov	r0, r8
 800e3b2:	4649      	mov	r1, r9
 800e3b4:	f7f2 fa52 	bl	800085c <__aeabi_ddiv>
 800e3b8:	4622      	mov	r2, r4
 800e3ba:	462b      	mov	r3, r5
 800e3bc:	f7f2 f924 	bl	8000608 <__aeabi_dmul>
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	460b      	mov	r3, r1
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	4629      	mov	r1, r5
 800e3c8:	e6bf      	b.n	800e14a <__ieee754_asin+0x52>
 800e3ca:	bf00      	nop
 800e3cc:	f3af 8000 	nop.w
 800e3d0:	54442d18 	.word	0x54442d18
 800e3d4:	3ff921fb 	.word	0x3ff921fb
 800e3d8:	33145c07 	.word	0x33145c07
 800e3dc:	3c91a626 	.word	0x3c91a626
 800e3e0:	8800759c 	.word	0x8800759c
 800e3e4:	7e37e43c 	.word	0x7e37e43c
 800e3e8:	0dfdf709 	.word	0x0dfdf709
 800e3ec:	3f023de1 	.word	0x3f023de1
 800e3f0:	7501b288 	.word	0x7501b288
 800e3f4:	3f49efe0 	.word	0x3f49efe0
 800e3f8:	b5688f3b 	.word	0xb5688f3b
 800e3fc:	3fa48228 	.word	0x3fa48228
 800e400:	0e884455 	.word	0x0e884455
 800e404:	3fc9c155 	.word	0x3fc9c155
 800e408:	03eb6f7d 	.word	0x03eb6f7d
 800e40c:	3fd4d612 	.word	0x3fd4d612
 800e410:	55555555 	.word	0x55555555
 800e414:	3fc55555 	.word	0x3fc55555
 800e418:	b12e9282 	.word	0xb12e9282
 800e41c:	3fb3b8c5 	.word	0x3fb3b8c5
 800e420:	1b8d0159 	.word	0x1b8d0159
 800e424:	3fe6066c 	.word	0x3fe6066c
 800e428:	9c598ac8 	.word	0x9c598ac8
 800e42c:	40002ae5 	.word	0x40002ae5
 800e430:	1c8a2d4b 	.word	0x1c8a2d4b
 800e434:	40033a27 	.word	0x40033a27
 800e438:	3fefffff 	.word	0x3fefffff
 800e43c:	3fdfffff 	.word	0x3fdfffff
 800e440:	3ff00000 	.word	0x3ff00000
 800e444:	3fe00000 	.word	0x3fe00000
 800e448:	3fef3332 	.word	0x3fef3332
 800e44c:	ee10 2a10 	vmov	r2, s0
 800e450:	ee10 0a10 	vmov	r0, s0
 800e454:	465b      	mov	r3, fp
 800e456:	4659      	mov	r1, fp
 800e458:	f7f1 ff20 	bl	800029c <__adddf3>
 800e45c:	4632      	mov	r2, r6
 800e45e:	463b      	mov	r3, r7
 800e460:	ec41 0b19 	vmov	d9, r0, r1
 800e464:	ec51 0b18 	vmov	r0, r1, d8
 800e468:	f7f2 f9f8 	bl	800085c <__aeabi_ddiv>
 800e46c:	4602      	mov	r2, r0
 800e46e:	460b      	mov	r3, r1
 800e470:	ec51 0b19 	vmov	r0, r1, d9
 800e474:	f7f2 f8c8 	bl	8000608 <__aeabi_dmul>
 800e478:	f04f 0800 	mov.w	r8, #0
 800e47c:	4606      	mov	r6, r0
 800e47e:	460f      	mov	r7, r1
 800e480:	4642      	mov	r2, r8
 800e482:	465b      	mov	r3, fp
 800e484:	4640      	mov	r0, r8
 800e486:	4659      	mov	r1, fp
 800e488:	f7f2 f8be 	bl	8000608 <__aeabi_dmul>
 800e48c:	4602      	mov	r2, r0
 800e48e:	460b      	mov	r3, r1
 800e490:	4620      	mov	r0, r4
 800e492:	4629      	mov	r1, r5
 800e494:	f7f1 ff00 	bl	8000298 <__aeabi_dsub>
 800e498:	4642      	mov	r2, r8
 800e49a:	4604      	mov	r4, r0
 800e49c:	460d      	mov	r5, r1
 800e49e:	465b      	mov	r3, fp
 800e4a0:	4650      	mov	r0, sl
 800e4a2:	4659      	mov	r1, fp
 800e4a4:	f7f1 fefa 	bl	800029c <__adddf3>
 800e4a8:	4602      	mov	r2, r0
 800e4aa:	460b      	mov	r3, r1
 800e4ac:	4620      	mov	r0, r4
 800e4ae:	4629      	mov	r1, r5
 800e4b0:	f7f2 f9d4 	bl	800085c <__aeabi_ddiv>
 800e4b4:	4602      	mov	r2, r0
 800e4b6:	460b      	mov	r3, r1
 800e4b8:	f7f1 fef0 	bl	800029c <__adddf3>
 800e4bc:	4602      	mov	r2, r0
 800e4be:	460b      	mov	r3, r1
 800e4c0:	a113      	add	r1, pc, #76	; (adr r1, 800e510 <__ieee754_asin+0x418>)
 800e4c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4c6:	f7f1 fee7 	bl	8000298 <__aeabi_dsub>
 800e4ca:	4602      	mov	r2, r0
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	4630      	mov	r0, r6
 800e4d0:	4639      	mov	r1, r7
 800e4d2:	f7f1 fee1 	bl	8000298 <__aeabi_dsub>
 800e4d6:	4642      	mov	r2, r8
 800e4d8:	4604      	mov	r4, r0
 800e4da:	460d      	mov	r5, r1
 800e4dc:	465b      	mov	r3, fp
 800e4de:	4640      	mov	r0, r8
 800e4e0:	4659      	mov	r1, fp
 800e4e2:	f7f1 fedb 	bl	800029c <__adddf3>
 800e4e6:	4602      	mov	r2, r0
 800e4e8:	460b      	mov	r3, r1
 800e4ea:	a10b      	add	r1, pc, #44	; (adr r1, 800e518 <__ieee754_asin+0x420>)
 800e4ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4f0:	f7f1 fed2 	bl	8000298 <__aeabi_dsub>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	460b      	mov	r3, r1
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	4629      	mov	r1, r5
 800e4fc:	f7f1 fecc 	bl	8000298 <__aeabi_dsub>
 800e500:	4602      	mov	r2, r0
 800e502:	460b      	mov	r3, r1
 800e504:	a104      	add	r1, pc, #16	; (adr r1, 800e518 <__ieee754_asin+0x420>)
 800e506:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e50a:	e6dd      	b.n	800e2c8 <__ieee754_asin+0x1d0>
 800e50c:	f3af 8000 	nop.w
 800e510:	33145c07 	.word	0x33145c07
 800e514:	3c91a626 	.word	0x3c91a626
 800e518:	54442d18 	.word	0x54442d18
 800e51c:	3fe921fb 	.word	0x3fe921fb

0800e520 <__ieee754_atan2>:
 800e520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e524:	ec57 6b11 	vmov	r6, r7, d1
 800e528:	4273      	negs	r3, r6
 800e52a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800e6a8 <__ieee754_atan2+0x188>
 800e52e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e532:	4333      	orrs	r3, r6
 800e534:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e538:	4543      	cmp	r3, r8
 800e53a:	ec51 0b10 	vmov	r0, r1, d0
 800e53e:	ee11 5a10 	vmov	r5, s2
 800e542:	d80a      	bhi.n	800e55a <__ieee754_atan2+0x3a>
 800e544:	4244      	negs	r4, r0
 800e546:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e54a:	4304      	orrs	r4, r0
 800e54c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e550:	4544      	cmp	r4, r8
 800e552:	ee10 9a10 	vmov	r9, s0
 800e556:	468e      	mov	lr, r1
 800e558:	d907      	bls.n	800e56a <__ieee754_atan2+0x4a>
 800e55a:	4632      	mov	r2, r6
 800e55c:	463b      	mov	r3, r7
 800e55e:	f7f1 fe9d 	bl	800029c <__adddf3>
 800e562:	ec41 0b10 	vmov	d0, r0, r1
 800e566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e56a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e56e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e572:	4334      	orrs	r4, r6
 800e574:	d103      	bne.n	800e57e <__ieee754_atan2+0x5e>
 800e576:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e57a:	f7fe bf89 	b.w	800d490 <atan>
 800e57e:	17bc      	asrs	r4, r7, #30
 800e580:	f004 0402 	and.w	r4, r4, #2
 800e584:	ea53 0909 	orrs.w	r9, r3, r9
 800e588:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e58c:	d107      	bne.n	800e59e <__ieee754_atan2+0x7e>
 800e58e:	2c02      	cmp	r4, #2
 800e590:	d05f      	beq.n	800e652 <__ieee754_atan2+0x132>
 800e592:	2c03      	cmp	r4, #3
 800e594:	d1e5      	bne.n	800e562 <__ieee754_atan2+0x42>
 800e596:	a140      	add	r1, pc, #256	; (adr r1, 800e698 <__ieee754_atan2+0x178>)
 800e598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e59c:	e7e1      	b.n	800e562 <__ieee754_atan2+0x42>
 800e59e:	4315      	orrs	r5, r2
 800e5a0:	d106      	bne.n	800e5b0 <__ieee754_atan2+0x90>
 800e5a2:	f1be 0f00 	cmp.w	lr, #0
 800e5a6:	da5f      	bge.n	800e668 <__ieee754_atan2+0x148>
 800e5a8:	a13d      	add	r1, pc, #244	; (adr r1, 800e6a0 <__ieee754_atan2+0x180>)
 800e5aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5ae:	e7d8      	b.n	800e562 <__ieee754_atan2+0x42>
 800e5b0:	4542      	cmp	r2, r8
 800e5b2:	d10f      	bne.n	800e5d4 <__ieee754_atan2+0xb4>
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	f104 34ff 	add.w	r4, r4, #4294967295
 800e5ba:	d107      	bne.n	800e5cc <__ieee754_atan2+0xac>
 800e5bc:	2c02      	cmp	r4, #2
 800e5be:	d84c      	bhi.n	800e65a <__ieee754_atan2+0x13a>
 800e5c0:	4b33      	ldr	r3, [pc, #204]	; (800e690 <__ieee754_atan2+0x170>)
 800e5c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e5c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e5ca:	e7ca      	b.n	800e562 <__ieee754_atan2+0x42>
 800e5cc:	2c02      	cmp	r4, #2
 800e5ce:	d848      	bhi.n	800e662 <__ieee754_atan2+0x142>
 800e5d0:	4b30      	ldr	r3, [pc, #192]	; (800e694 <__ieee754_atan2+0x174>)
 800e5d2:	e7f6      	b.n	800e5c2 <__ieee754_atan2+0xa2>
 800e5d4:	4543      	cmp	r3, r8
 800e5d6:	d0e4      	beq.n	800e5a2 <__ieee754_atan2+0x82>
 800e5d8:	1a9b      	subs	r3, r3, r2
 800e5da:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e5de:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e5e2:	da1e      	bge.n	800e622 <__ieee754_atan2+0x102>
 800e5e4:	2f00      	cmp	r7, #0
 800e5e6:	da01      	bge.n	800e5ec <__ieee754_atan2+0xcc>
 800e5e8:	323c      	adds	r2, #60	; 0x3c
 800e5ea:	db1e      	blt.n	800e62a <__ieee754_atan2+0x10a>
 800e5ec:	4632      	mov	r2, r6
 800e5ee:	463b      	mov	r3, r7
 800e5f0:	f7f2 f934 	bl	800085c <__aeabi_ddiv>
 800e5f4:	ec41 0b10 	vmov	d0, r0, r1
 800e5f8:	f7ff f93e 	bl	800d878 <fabs>
 800e5fc:	f7fe ff48 	bl	800d490 <atan>
 800e600:	ec51 0b10 	vmov	r0, r1, d0
 800e604:	2c01      	cmp	r4, #1
 800e606:	d013      	beq.n	800e630 <__ieee754_atan2+0x110>
 800e608:	2c02      	cmp	r4, #2
 800e60a:	d015      	beq.n	800e638 <__ieee754_atan2+0x118>
 800e60c:	2c00      	cmp	r4, #0
 800e60e:	d0a8      	beq.n	800e562 <__ieee754_atan2+0x42>
 800e610:	a317      	add	r3, pc, #92	; (adr r3, 800e670 <__ieee754_atan2+0x150>)
 800e612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e616:	f7f1 fe3f 	bl	8000298 <__aeabi_dsub>
 800e61a:	a317      	add	r3, pc, #92	; (adr r3, 800e678 <__ieee754_atan2+0x158>)
 800e61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e620:	e014      	b.n	800e64c <__ieee754_atan2+0x12c>
 800e622:	a117      	add	r1, pc, #92	; (adr r1, 800e680 <__ieee754_atan2+0x160>)
 800e624:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e628:	e7ec      	b.n	800e604 <__ieee754_atan2+0xe4>
 800e62a:	2000      	movs	r0, #0
 800e62c:	2100      	movs	r1, #0
 800e62e:	e7e9      	b.n	800e604 <__ieee754_atan2+0xe4>
 800e630:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e634:	4619      	mov	r1, r3
 800e636:	e794      	b.n	800e562 <__ieee754_atan2+0x42>
 800e638:	a30d      	add	r3, pc, #52	; (adr r3, 800e670 <__ieee754_atan2+0x150>)
 800e63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e63e:	f7f1 fe2b 	bl	8000298 <__aeabi_dsub>
 800e642:	4602      	mov	r2, r0
 800e644:	460b      	mov	r3, r1
 800e646:	a10c      	add	r1, pc, #48	; (adr r1, 800e678 <__ieee754_atan2+0x158>)
 800e648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e64c:	f7f1 fe24 	bl	8000298 <__aeabi_dsub>
 800e650:	e787      	b.n	800e562 <__ieee754_atan2+0x42>
 800e652:	a109      	add	r1, pc, #36	; (adr r1, 800e678 <__ieee754_atan2+0x158>)
 800e654:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e658:	e783      	b.n	800e562 <__ieee754_atan2+0x42>
 800e65a:	a10b      	add	r1, pc, #44	; (adr r1, 800e688 <__ieee754_atan2+0x168>)
 800e65c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e660:	e77f      	b.n	800e562 <__ieee754_atan2+0x42>
 800e662:	2000      	movs	r0, #0
 800e664:	2100      	movs	r1, #0
 800e666:	e77c      	b.n	800e562 <__ieee754_atan2+0x42>
 800e668:	a105      	add	r1, pc, #20	; (adr r1, 800e680 <__ieee754_atan2+0x160>)
 800e66a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e66e:	e778      	b.n	800e562 <__ieee754_atan2+0x42>
 800e670:	33145c07 	.word	0x33145c07
 800e674:	3ca1a626 	.word	0x3ca1a626
 800e678:	54442d18 	.word	0x54442d18
 800e67c:	400921fb 	.word	0x400921fb
 800e680:	54442d18 	.word	0x54442d18
 800e684:	3ff921fb 	.word	0x3ff921fb
 800e688:	54442d18 	.word	0x54442d18
 800e68c:	3fe921fb 	.word	0x3fe921fb
 800e690:	08011168 	.word	0x08011168
 800e694:	08011180 	.word	0x08011180
 800e698:	54442d18 	.word	0x54442d18
 800e69c:	c00921fb 	.word	0xc00921fb
 800e6a0:	54442d18 	.word	0x54442d18
 800e6a4:	bff921fb 	.word	0xbff921fb
 800e6a8:	7ff00000 	.word	0x7ff00000
 800e6ac:	00000000 	.word	0x00000000

0800e6b0 <__ieee754_pow>:
 800e6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b4:	ed2d 8b06 	vpush	{d8-d10}
 800e6b8:	b089      	sub	sp, #36	; 0x24
 800e6ba:	ed8d 1b00 	vstr	d1, [sp]
 800e6be:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e6c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e6c6:	ea58 0102 	orrs.w	r1, r8, r2
 800e6ca:	ec57 6b10 	vmov	r6, r7, d0
 800e6ce:	d115      	bne.n	800e6fc <__ieee754_pow+0x4c>
 800e6d0:	19b3      	adds	r3, r6, r6
 800e6d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e6d6:	4152      	adcs	r2, r2
 800e6d8:	4299      	cmp	r1, r3
 800e6da:	4b89      	ldr	r3, [pc, #548]	; (800e900 <__ieee754_pow+0x250>)
 800e6dc:	4193      	sbcs	r3, r2
 800e6de:	f080 84d1 	bcs.w	800f084 <__ieee754_pow+0x9d4>
 800e6e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6e6:	4630      	mov	r0, r6
 800e6e8:	4639      	mov	r1, r7
 800e6ea:	f7f1 fdd7 	bl	800029c <__adddf3>
 800e6ee:	ec41 0b10 	vmov	d0, r0, r1
 800e6f2:	b009      	add	sp, #36	; 0x24
 800e6f4:	ecbd 8b06 	vpop	{d8-d10}
 800e6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6fc:	4b81      	ldr	r3, [pc, #516]	; (800e904 <__ieee754_pow+0x254>)
 800e6fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e702:	429c      	cmp	r4, r3
 800e704:	ee10 aa10 	vmov	sl, s0
 800e708:	463d      	mov	r5, r7
 800e70a:	dc06      	bgt.n	800e71a <__ieee754_pow+0x6a>
 800e70c:	d101      	bne.n	800e712 <__ieee754_pow+0x62>
 800e70e:	2e00      	cmp	r6, #0
 800e710:	d1e7      	bne.n	800e6e2 <__ieee754_pow+0x32>
 800e712:	4598      	cmp	r8, r3
 800e714:	dc01      	bgt.n	800e71a <__ieee754_pow+0x6a>
 800e716:	d10f      	bne.n	800e738 <__ieee754_pow+0x88>
 800e718:	b172      	cbz	r2, 800e738 <__ieee754_pow+0x88>
 800e71a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e71e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e722:	ea55 050a 	orrs.w	r5, r5, sl
 800e726:	d1dc      	bne.n	800e6e2 <__ieee754_pow+0x32>
 800e728:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e72c:	18db      	adds	r3, r3, r3
 800e72e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e732:	4152      	adcs	r2, r2
 800e734:	429d      	cmp	r5, r3
 800e736:	e7d0      	b.n	800e6da <__ieee754_pow+0x2a>
 800e738:	2d00      	cmp	r5, #0
 800e73a:	da3b      	bge.n	800e7b4 <__ieee754_pow+0x104>
 800e73c:	4b72      	ldr	r3, [pc, #456]	; (800e908 <__ieee754_pow+0x258>)
 800e73e:	4598      	cmp	r8, r3
 800e740:	dc51      	bgt.n	800e7e6 <__ieee754_pow+0x136>
 800e742:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e746:	4598      	cmp	r8, r3
 800e748:	f340 84ab 	ble.w	800f0a2 <__ieee754_pow+0x9f2>
 800e74c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e750:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e754:	2b14      	cmp	r3, #20
 800e756:	dd0f      	ble.n	800e778 <__ieee754_pow+0xc8>
 800e758:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e75c:	fa22 f103 	lsr.w	r1, r2, r3
 800e760:	fa01 f303 	lsl.w	r3, r1, r3
 800e764:	4293      	cmp	r3, r2
 800e766:	f040 849c 	bne.w	800f0a2 <__ieee754_pow+0x9f2>
 800e76a:	f001 0101 	and.w	r1, r1, #1
 800e76e:	f1c1 0302 	rsb	r3, r1, #2
 800e772:	9304      	str	r3, [sp, #16]
 800e774:	b182      	cbz	r2, 800e798 <__ieee754_pow+0xe8>
 800e776:	e05f      	b.n	800e838 <__ieee754_pow+0x188>
 800e778:	2a00      	cmp	r2, #0
 800e77a:	d15b      	bne.n	800e834 <__ieee754_pow+0x184>
 800e77c:	f1c3 0314 	rsb	r3, r3, #20
 800e780:	fa48 f103 	asr.w	r1, r8, r3
 800e784:	fa01 f303 	lsl.w	r3, r1, r3
 800e788:	4543      	cmp	r3, r8
 800e78a:	f040 8487 	bne.w	800f09c <__ieee754_pow+0x9ec>
 800e78e:	f001 0101 	and.w	r1, r1, #1
 800e792:	f1c1 0302 	rsb	r3, r1, #2
 800e796:	9304      	str	r3, [sp, #16]
 800e798:	4b5c      	ldr	r3, [pc, #368]	; (800e90c <__ieee754_pow+0x25c>)
 800e79a:	4598      	cmp	r8, r3
 800e79c:	d132      	bne.n	800e804 <__ieee754_pow+0x154>
 800e79e:	f1b9 0f00 	cmp.w	r9, #0
 800e7a2:	f280 8477 	bge.w	800f094 <__ieee754_pow+0x9e4>
 800e7a6:	4959      	ldr	r1, [pc, #356]	; (800e90c <__ieee754_pow+0x25c>)
 800e7a8:	4632      	mov	r2, r6
 800e7aa:	463b      	mov	r3, r7
 800e7ac:	2000      	movs	r0, #0
 800e7ae:	f7f2 f855 	bl	800085c <__aeabi_ddiv>
 800e7b2:	e79c      	b.n	800e6ee <__ieee754_pow+0x3e>
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	9304      	str	r3, [sp, #16]
 800e7b8:	2a00      	cmp	r2, #0
 800e7ba:	d13d      	bne.n	800e838 <__ieee754_pow+0x188>
 800e7bc:	4b51      	ldr	r3, [pc, #324]	; (800e904 <__ieee754_pow+0x254>)
 800e7be:	4598      	cmp	r8, r3
 800e7c0:	d1ea      	bne.n	800e798 <__ieee754_pow+0xe8>
 800e7c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e7c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e7ca:	ea53 030a 	orrs.w	r3, r3, sl
 800e7ce:	f000 8459 	beq.w	800f084 <__ieee754_pow+0x9d4>
 800e7d2:	4b4f      	ldr	r3, [pc, #316]	; (800e910 <__ieee754_pow+0x260>)
 800e7d4:	429c      	cmp	r4, r3
 800e7d6:	dd08      	ble.n	800e7ea <__ieee754_pow+0x13a>
 800e7d8:	f1b9 0f00 	cmp.w	r9, #0
 800e7dc:	f2c0 8456 	blt.w	800f08c <__ieee754_pow+0x9dc>
 800e7e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7e4:	e783      	b.n	800e6ee <__ieee754_pow+0x3e>
 800e7e6:	2302      	movs	r3, #2
 800e7e8:	e7e5      	b.n	800e7b6 <__ieee754_pow+0x106>
 800e7ea:	f1b9 0f00 	cmp.w	r9, #0
 800e7ee:	f04f 0000 	mov.w	r0, #0
 800e7f2:	f04f 0100 	mov.w	r1, #0
 800e7f6:	f6bf af7a 	bge.w	800e6ee <__ieee754_pow+0x3e>
 800e7fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e7fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e802:	e774      	b.n	800e6ee <__ieee754_pow+0x3e>
 800e804:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e808:	d106      	bne.n	800e818 <__ieee754_pow+0x168>
 800e80a:	4632      	mov	r2, r6
 800e80c:	463b      	mov	r3, r7
 800e80e:	4630      	mov	r0, r6
 800e810:	4639      	mov	r1, r7
 800e812:	f7f1 fef9 	bl	8000608 <__aeabi_dmul>
 800e816:	e76a      	b.n	800e6ee <__ieee754_pow+0x3e>
 800e818:	4b3e      	ldr	r3, [pc, #248]	; (800e914 <__ieee754_pow+0x264>)
 800e81a:	4599      	cmp	r9, r3
 800e81c:	d10c      	bne.n	800e838 <__ieee754_pow+0x188>
 800e81e:	2d00      	cmp	r5, #0
 800e820:	db0a      	blt.n	800e838 <__ieee754_pow+0x188>
 800e822:	ec47 6b10 	vmov	d0, r6, r7
 800e826:	b009      	add	sp, #36	; 0x24
 800e828:	ecbd 8b06 	vpop	{d8-d10}
 800e82c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e830:	f000 bf20 	b.w	800f674 <__ieee754_sqrt>
 800e834:	2300      	movs	r3, #0
 800e836:	9304      	str	r3, [sp, #16]
 800e838:	ec47 6b10 	vmov	d0, r6, r7
 800e83c:	f7ff f81c 	bl	800d878 <fabs>
 800e840:	ec51 0b10 	vmov	r0, r1, d0
 800e844:	f1ba 0f00 	cmp.w	sl, #0
 800e848:	d129      	bne.n	800e89e <__ieee754_pow+0x1ee>
 800e84a:	b124      	cbz	r4, 800e856 <__ieee754_pow+0x1a6>
 800e84c:	4b2f      	ldr	r3, [pc, #188]	; (800e90c <__ieee754_pow+0x25c>)
 800e84e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e852:	429a      	cmp	r2, r3
 800e854:	d123      	bne.n	800e89e <__ieee754_pow+0x1ee>
 800e856:	f1b9 0f00 	cmp.w	r9, #0
 800e85a:	da05      	bge.n	800e868 <__ieee754_pow+0x1b8>
 800e85c:	4602      	mov	r2, r0
 800e85e:	460b      	mov	r3, r1
 800e860:	2000      	movs	r0, #0
 800e862:	492a      	ldr	r1, [pc, #168]	; (800e90c <__ieee754_pow+0x25c>)
 800e864:	f7f1 fffa 	bl	800085c <__aeabi_ddiv>
 800e868:	2d00      	cmp	r5, #0
 800e86a:	f6bf af40 	bge.w	800e6ee <__ieee754_pow+0x3e>
 800e86e:	9b04      	ldr	r3, [sp, #16]
 800e870:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e874:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e878:	431c      	orrs	r4, r3
 800e87a:	d108      	bne.n	800e88e <__ieee754_pow+0x1de>
 800e87c:	4602      	mov	r2, r0
 800e87e:	460b      	mov	r3, r1
 800e880:	4610      	mov	r0, r2
 800e882:	4619      	mov	r1, r3
 800e884:	f7f1 fd08 	bl	8000298 <__aeabi_dsub>
 800e888:	4602      	mov	r2, r0
 800e88a:	460b      	mov	r3, r1
 800e88c:	e78f      	b.n	800e7ae <__ieee754_pow+0xfe>
 800e88e:	9b04      	ldr	r3, [sp, #16]
 800e890:	2b01      	cmp	r3, #1
 800e892:	f47f af2c 	bne.w	800e6ee <__ieee754_pow+0x3e>
 800e896:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e89a:	4619      	mov	r1, r3
 800e89c:	e727      	b.n	800e6ee <__ieee754_pow+0x3e>
 800e89e:	0feb      	lsrs	r3, r5, #31
 800e8a0:	3b01      	subs	r3, #1
 800e8a2:	9306      	str	r3, [sp, #24]
 800e8a4:	9a06      	ldr	r2, [sp, #24]
 800e8a6:	9b04      	ldr	r3, [sp, #16]
 800e8a8:	4313      	orrs	r3, r2
 800e8aa:	d102      	bne.n	800e8b2 <__ieee754_pow+0x202>
 800e8ac:	4632      	mov	r2, r6
 800e8ae:	463b      	mov	r3, r7
 800e8b0:	e7e6      	b.n	800e880 <__ieee754_pow+0x1d0>
 800e8b2:	4b19      	ldr	r3, [pc, #100]	; (800e918 <__ieee754_pow+0x268>)
 800e8b4:	4598      	cmp	r8, r3
 800e8b6:	f340 80fb 	ble.w	800eab0 <__ieee754_pow+0x400>
 800e8ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e8be:	4598      	cmp	r8, r3
 800e8c0:	4b13      	ldr	r3, [pc, #76]	; (800e910 <__ieee754_pow+0x260>)
 800e8c2:	dd0c      	ble.n	800e8de <__ieee754_pow+0x22e>
 800e8c4:	429c      	cmp	r4, r3
 800e8c6:	dc0f      	bgt.n	800e8e8 <__ieee754_pow+0x238>
 800e8c8:	f1b9 0f00 	cmp.w	r9, #0
 800e8cc:	da0f      	bge.n	800e8ee <__ieee754_pow+0x23e>
 800e8ce:	2000      	movs	r0, #0
 800e8d0:	b009      	add	sp, #36	; 0x24
 800e8d2:	ecbd 8b06 	vpop	{d8-d10}
 800e8d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8da:	f000 bec2 	b.w	800f662 <__math_oflow>
 800e8de:	429c      	cmp	r4, r3
 800e8e0:	dbf2      	blt.n	800e8c8 <__ieee754_pow+0x218>
 800e8e2:	4b0a      	ldr	r3, [pc, #40]	; (800e90c <__ieee754_pow+0x25c>)
 800e8e4:	429c      	cmp	r4, r3
 800e8e6:	dd19      	ble.n	800e91c <__ieee754_pow+0x26c>
 800e8e8:	f1b9 0f00 	cmp.w	r9, #0
 800e8ec:	dcef      	bgt.n	800e8ce <__ieee754_pow+0x21e>
 800e8ee:	2000      	movs	r0, #0
 800e8f0:	b009      	add	sp, #36	; 0x24
 800e8f2:	ecbd 8b06 	vpop	{d8-d10}
 800e8f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8fa:	f000 bea9 	b.w	800f650 <__math_uflow>
 800e8fe:	bf00      	nop
 800e900:	fff00000 	.word	0xfff00000
 800e904:	7ff00000 	.word	0x7ff00000
 800e908:	433fffff 	.word	0x433fffff
 800e90c:	3ff00000 	.word	0x3ff00000
 800e910:	3fefffff 	.word	0x3fefffff
 800e914:	3fe00000 	.word	0x3fe00000
 800e918:	41e00000 	.word	0x41e00000
 800e91c:	4b60      	ldr	r3, [pc, #384]	; (800eaa0 <__ieee754_pow+0x3f0>)
 800e91e:	2200      	movs	r2, #0
 800e920:	f7f1 fcba 	bl	8000298 <__aeabi_dsub>
 800e924:	a354      	add	r3, pc, #336	; (adr r3, 800ea78 <__ieee754_pow+0x3c8>)
 800e926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e92a:	4604      	mov	r4, r0
 800e92c:	460d      	mov	r5, r1
 800e92e:	f7f1 fe6b 	bl	8000608 <__aeabi_dmul>
 800e932:	a353      	add	r3, pc, #332	; (adr r3, 800ea80 <__ieee754_pow+0x3d0>)
 800e934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e938:	4606      	mov	r6, r0
 800e93a:	460f      	mov	r7, r1
 800e93c:	4620      	mov	r0, r4
 800e93e:	4629      	mov	r1, r5
 800e940:	f7f1 fe62 	bl	8000608 <__aeabi_dmul>
 800e944:	4b57      	ldr	r3, [pc, #348]	; (800eaa4 <__ieee754_pow+0x3f4>)
 800e946:	4682      	mov	sl, r0
 800e948:	468b      	mov	fp, r1
 800e94a:	2200      	movs	r2, #0
 800e94c:	4620      	mov	r0, r4
 800e94e:	4629      	mov	r1, r5
 800e950:	f7f1 fe5a 	bl	8000608 <__aeabi_dmul>
 800e954:	4602      	mov	r2, r0
 800e956:	460b      	mov	r3, r1
 800e958:	a14b      	add	r1, pc, #300	; (adr r1, 800ea88 <__ieee754_pow+0x3d8>)
 800e95a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e95e:	f7f1 fc9b 	bl	8000298 <__aeabi_dsub>
 800e962:	4622      	mov	r2, r4
 800e964:	462b      	mov	r3, r5
 800e966:	f7f1 fe4f 	bl	8000608 <__aeabi_dmul>
 800e96a:	4602      	mov	r2, r0
 800e96c:	460b      	mov	r3, r1
 800e96e:	2000      	movs	r0, #0
 800e970:	494d      	ldr	r1, [pc, #308]	; (800eaa8 <__ieee754_pow+0x3f8>)
 800e972:	f7f1 fc91 	bl	8000298 <__aeabi_dsub>
 800e976:	4622      	mov	r2, r4
 800e978:	4680      	mov	r8, r0
 800e97a:	4689      	mov	r9, r1
 800e97c:	462b      	mov	r3, r5
 800e97e:	4620      	mov	r0, r4
 800e980:	4629      	mov	r1, r5
 800e982:	f7f1 fe41 	bl	8000608 <__aeabi_dmul>
 800e986:	4602      	mov	r2, r0
 800e988:	460b      	mov	r3, r1
 800e98a:	4640      	mov	r0, r8
 800e98c:	4649      	mov	r1, r9
 800e98e:	f7f1 fe3b 	bl	8000608 <__aeabi_dmul>
 800e992:	a33f      	add	r3, pc, #252	; (adr r3, 800ea90 <__ieee754_pow+0x3e0>)
 800e994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e998:	f7f1 fe36 	bl	8000608 <__aeabi_dmul>
 800e99c:	4602      	mov	r2, r0
 800e99e:	460b      	mov	r3, r1
 800e9a0:	4650      	mov	r0, sl
 800e9a2:	4659      	mov	r1, fp
 800e9a4:	f7f1 fc78 	bl	8000298 <__aeabi_dsub>
 800e9a8:	4602      	mov	r2, r0
 800e9aa:	460b      	mov	r3, r1
 800e9ac:	4680      	mov	r8, r0
 800e9ae:	4689      	mov	r9, r1
 800e9b0:	4630      	mov	r0, r6
 800e9b2:	4639      	mov	r1, r7
 800e9b4:	f7f1 fc72 	bl	800029c <__adddf3>
 800e9b8:	2000      	movs	r0, #0
 800e9ba:	4632      	mov	r2, r6
 800e9bc:	463b      	mov	r3, r7
 800e9be:	4604      	mov	r4, r0
 800e9c0:	460d      	mov	r5, r1
 800e9c2:	f7f1 fc69 	bl	8000298 <__aeabi_dsub>
 800e9c6:	4602      	mov	r2, r0
 800e9c8:	460b      	mov	r3, r1
 800e9ca:	4640      	mov	r0, r8
 800e9cc:	4649      	mov	r1, r9
 800e9ce:	f7f1 fc63 	bl	8000298 <__aeabi_dsub>
 800e9d2:	9b04      	ldr	r3, [sp, #16]
 800e9d4:	9a06      	ldr	r2, [sp, #24]
 800e9d6:	3b01      	subs	r3, #1
 800e9d8:	4313      	orrs	r3, r2
 800e9da:	4682      	mov	sl, r0
 800e9dc:	468b      	mov	fp, r1
 800e9de:	f040 81e7 	bne.w	800edb0 <__ieee754_pow+0x700>
 800e9e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ea98 <__ieee754_pow+0x3e8>
 800e9e6:	eeb0 8a47 	vmov.f32	s16, s14
 800e9ea:	eef0 8a67 	vmov.f32	s17, s15
 800e9ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e9f2:	2600      	movs	r6, #0
 800e9f4:	4632      	mov	r2, r6
 800e9f6:	463b      	mov	r3, r7
 800e9f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9fc:	f7f1 fc4c 	bl	8000298 <__aeabi_dsub>
 800ea00:	4622      	mov	r2, r4
 800ea02:	462b      	mov	r3, r5
 800ea04:	f7f1 fe00 	bl	8000608 <__aeabi_dmul>
 800ea08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea0c:	4680      	mov	r8, r0
 800ea0e:	4689      	mov	r9, r1
 800ea10:	4650      	mov	r0, sl
 800ea12:	4659      	mov	r1, fp
 800ea14:	f7f1 fdf8 	bl	8000608 <__aeabi_dmul>
 800ea18:	4602      	mov	r2, r0
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	4640      	mov	r0, r8
 800ea1e:	4649      	mov	r1, r9
 800ea20:	f7f1 fc3c 	bl	800029c <__adddf3>
 800ea24:	4632      	mov	r2, r6
 800ea26:	463b      	mov	r3, r7
 800ea28:	4680      	mov	r8, r0
 800ea2a:	4689      	mov	r9, r1
 800ea2c:	4620      	mov	r0, r4
 800ea2e:	4629      	mov	r1, r5
 800ea30:	f7f1 fdea 	bl	8000608 <__aeabi_dmul>
 800ea34:	460b      	mov	r3, r1
 800ea36:	4604      	mov	r4, r0
 800ea38:	460d      	mov	r5, r1
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	4649      	mov	r1, r9
 800ea3e:	4640      	mov	r0, r8
 800ea40:	f7f1 fc2c 	bl	800029c <__adddf3>
 800ea44:	4b19      	ldr	r3, [pc, #100]	; (800eaac <__ieee754_pow+0x3fc>)
 800ea46:	4299      	cmp	r1, r3
 800ea48:	ec45 4b19 	vmov	d9, r4, r5
 800ea4c:	4606      	mov	r6, r0
 800ea4e:	460f      	mov	r7, r1
 800ea50:	468b      	mov	fp, r1
 800ea52:	f340 82f0 	ble.w	800f036 <__ieee754_pow+0x986>
 800ea56:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ea5a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ea5e:	4303      	orrs	r3, r0
 800ea60:	f000 81e4 	beq.w	800ee2c <__ieee754_pow+0x77c>
 800ea64:	ec51 0b18 	vmov	r0, r1, d8
 800ea68:	2200      	movs	r2, #0
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	f7f2 f83e 	bl	8000aec <__aeabi_dcmplt>
 800ea70:	3800      	subs	r0, #0
 800ea72:	bf18      	it	ne
 800ea74:	2001      	movne	r0, #1
 800ea76:	e72b      	b.n	800e8d0 <__ieee754_pow+0x220>
 800ea78:	60000000 	.word	0x60000000
 800ea7c:	3ff71547 	.word	0x3ff71547
 800ea80:	f85ddf44 	.word	0xf85ddf44
 800ea84:	3e54ae0b 	.word	0x3e54ae0b
 800ea88:	55555555 	.word	0x55555555
 800ea8c:	3fd55555 	.word	0x3fd55555
 800ea90:	652b82fe 	.word	0x652b82fe
 800ea94:	3ff71547 	.word	0x3ff71547
 800ea98:	00000000 	.word	0x00000000
 800ea9c:	bff00000 	.word	0xbff00000
 800eaa0:	3ff00000 	.word	0x3ff00000
 800eaa4:	3fd00000 	.word	0x3fd00000
 800eaa8:	3fe00000 	.word	0x3fe00000
 800eaac:	408fffff 	.word	0x408fffff
 800eab0:	4bd5      	ldr	r3, [pc, #852]	; (800ee08 <__ieee754_pow+0x758>)
 800eab2:	402b      	ands	r3, r5
 800eab4:	2200      	movs	r2, #0
 800eab6:	b92b      	cbnz	r3, 800eac4 <__ieee754_pow+0x414>
 800eab8:	4bd4      	ldr	r3, [pc, #848]	; (800ee0c <__ieee754_pow+0x75c>)
 800eaba:	f7f1 fda5 	bl	8000608 <__aeabi_dmul>
 800eabe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800eac2:	460c      	mov	r4, r1
 800eac4:	1523      	asrs	r3, r4, #20
 800eac6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800eaca:	4413      	add	r3, r2
 800eacc:	9305      	str	r3, [sp, #20]
 800eace:	4bd0      	ldr	r3, [pc, #832]	; (800ee10 <__ieee754_pow+0x760>)
 800ead0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ead4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ead8:	429c      	cmp	r4, r3
 800eada:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800eade:	dd08      	ble.n	800eaf2 <__ieee754_pow+0x442>
 800eae0:	4bcc      	ldr	r3, [pc, #816]	; (800ee14 <__ieee754_pow+0x764>)
 800eae2:	429c      	cmp	r4, r3
 800eae4:	f340 8162 	ble.w	800edac <__ieee754_pow+0x6fc>
 800eae8:	9b05      	ldr	r3, [sp, #20]
 800eaea:	3301      	adds	r3, #1
 800eaec:	9305      	str	r3, [sp, #20]
 800eaee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800eaf2:	2400      	movs	r4, #0
 800eaf4:	00e3      	lsls	r3, r4, #3
 800eaf6:	9307      	str	r3, [sp, #28]
 800eaf8:	4bc7      	ldr	r3, [pc, #796]	; (800ee18 <__ieee754_pow+0x768>)
 800eafa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eafe:	ed93 7b00 	vldr	d7, [r3]
 800eb02:	4629      	mov	r1, r5
 800eb04:	ec53 2b17 	vmov	r2, r3, d7
 800eb08:	eeb0 9a47 	vmov.f32	s18, s14
 800eb0c:	eef0 9a67 	vmov.f32	s19, s15
 800eb10:	4682      	mov	sl, r0
 800eb12:	f7f1 fbc1 	bl	8000298 <__aeabi_dsub>
 800eb16:	4652      	mov	r2, sl
 800eb18:	4606      	mov	r6, r0
 800eb1a:	460f      	mov	r7, r1
 800eb1c:	462b      	mov	r3, r5
 800eb1e:	ec51 0b19 	vmov	r0, r1, d9
 800eb22:	f7f1 fbbb 	bl	800029c <__adddf3>
 800eb26:	4602      	mov	r2, r0
 800eb28:	460b      	mov	r3, r1
 800eb2a:	2000      	movs	r0, #0
 800eb2c:	49bb      	ldr	r1, [pc, #748]	; (800ee1c <__ieee754_pow+0x76c>)
 800eb2e:	f7f1 fe95 	bl	800085c <__aeabi_ddiv>
 800eb32:	ec41 0b1a 	vmov	d10, r0, r1
 800eb36:	4602      	mov	r2, r0
 800eb38:	460b      	mov	r3, r1
 800eb3a:	4630      	mov	r0, r6
 800eb3c:	4639      	mov	r1, r7
 800eb3e:	f7f1 fd63 	bl	8000608 <__aeabi_dmul>
 800eb42:	2300      	movs	r3, #0
 800eb44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb48:	9302      	str	r3, [sp, #8]
 800eb4a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800eb4e:	46ab      	mov	fp, r5
 800eb50:	106d      	asrs	r5, r5, #1
 800eb52:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800eb56:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800eb5a:	ec41 0b18 	vmov	d8, r0, r1
 800eb5e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800eb62:	2200      	movs	r2, #0
 800eb64:	4640      	mov	r0, r8
 800eb66:	4649      	mov	r1, r9
 800eb68:	4614      	mov	r4, r2
 800eb6a:	461d      	mov	r5, r3
 800eb6c:	f7f1 fd4c 	bl	8000608 <__aeabi_dmul>
 800eb70:	4602      	mov	r2, r0
 800eb72:	460b      	mov	r3, r1
 800eb74:	4630      	mov	r0, r6
 800eb76:	4639      	mov	r1, r7
 800eb78:	f7f1 fb8e 	bl	8000298 <__aeabi_dsub>
 800eb7c:	ec53 2b19 	vmov	r2, r3, d9
 800eb80:	4606      	mov	r6, r0
 800eb82:	460f      	mov	r7, r1
 800eb84:	4620      	mov	r0, r4
 800eb86:	4629      	mov	r1, r5
 800eb88:	f7f1 fb86 	bl	8000298 <__aeabi_dsub>
 800eb8c:	4602      	mov	r2, r0
 800eb8e:	460b      	mov	r3, r1
 800eb90:	4650      	mov	r0, sl
 800eb92:	4659      	mov	r1, fp
 800eb94:	f7f1 fb80 	bl	8000298 <__aeabi_dsub>
 800eb98:	4642      	mov	r2, r8
 800eb9a:	464b      	mov	r3, r9
 800eb9c:	f7f1 fd34 	bl	8000608 <__aeabi_dmul>
 800eba0:	4602      	mov	r2, r0
 800eba2:	460b      	mov	r3, r1
 800eba4:	4630      	mov	r0, r6
 800eba6:	4639      	mov	r1, r7
 800eba8:	f7f1 fb76 	bl	8000298 <__aeabi_dsub>
 800ebac:	ec53 2b1a 	vmov	r2, r3, d10
 800ebb0:	f7f1 fd2a 	bl	8000608 <__aeabi_dmul>
 800ebb4:	ec53 2b18 	vmov	r2, r3, d8
 800ebb8:	ec41 0b19 	vmov	d9, r0, r1
 800ebbc:	ec51 0b18 	vmov	r0, r1, d8
 800ebc0:	f7f1 fd22 	bl	8000608 <__aeabi_dmul>
 800ebc4:	a37c      	add	r3, pc, #496	; (adr r3, 800edb8 <__ieee754_pow+0x708>)
 800ebc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebca:	4604      	mov	r4, r0
 800ebcc:	460d      	mov	r5, r1
 800ebce:	f7f1 fd1b 	bl	8000608 <__aeabi_dmul>
 800ebd2:	a37b      	add	r3, pc, #492	; (adr r3, 800edc0 <__ieee754_pow+0x710>)
 800ebd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd8:	f7f1 fb60 	bl	800029c <__adddf3>
 800ebdc:	4622      	mov	r2, r4
 800ebde:	462b      	mov	r3, r5
 800ebe0:	f7f1 fd12 	bl	8000608 <__aeabi_dmul>
 800ebe4:	a378      	add	r3, pc, #480	; (adr r3, 800edc8 <__ieee754_pow+0x718>)
 800ebe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebea:	f7f1 fb57 	bl	800029c <__adddf3>
 800ebee:	4622      	mov	r2, r4
 800ebf0:	462b      	mov	r3, r5
 800ebf2:	f7f1 fd09 	bl	8000608 <__aeabi_dmul>
 800ebf6:	a376      	add	r3, pc, #472	; (adr r3, 800edd0 <__ieee754_pow+0x720>)
 800ebf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfc:	f7f1 fb4e 	bl	800029c <__adddf3>
 800ec00:	4622      	mov	r2, r4
 800ec02:	462b      	mov	r3, r5
 800ec04:	f7f1 fd00 	bl	8000608 <__aeabi_dmul>
 800ec08:	a373      	add	r3, pc, #460	; (adr r3, 800edd8 <__ieee754_pow+0x728>)
 800ec0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0e:	f7f1 fb45 	bl	800029c <__adddf3>
 800ec12:	4622      	mov	r2, r4
 800ec14:	462b      	mov	r3, r5
 800ec16:	f7f1 fcf7 	bl	8000608 <__aeabi_dmul>
 800ec1a:	a371      	add	r3, pc, #452	; (adr r3, 800ede0 <__ieee754_pow+0x730>)
 800ec1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec20:	f7f1 fb3c 	bl	800029c <__adddf3>
 800ec24:	4622      	mov	r2, r4
 800ec26:	4606      	mov	r6, r0
 800ec28:	460f      	mov	r7, r1
 800ec2a:	462b      	mov	r3, r5
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	4629      	mov	r1, r5
 800ec30:	f7f1 fcea 	bl	8000608 <__aeabi_dmul>
 800ec34:	4602      	mov	r2, r0
 800ec36:	460b      	mov	r3, r1
 800ec38:	4630      	mov	r0, r6
 800ec3a:	4639      	mov	r1, r7
 800ec3c:	f7f1 fce4 	bl	8000608 <__aeabi_dmul>
 800ec40:	4642      	mov	r2, r8
 800ec42:	4604      	mov	r4, r0
 800ec44:	460d      	mov	r5, r1
 800ec46:	464b      	mov	r3, r9
 800ec48:	ec51 0b18 	vmov	r0, r1, d8
 800ec4c:	f7f1 fb26 	bl	800029c <__adddf3>
 800ec50:	ec53 2b19 	vmov	r2, r3, d9
 800ec54:	f7f1 fcd8 	bl	8000608 <__aeabi_dmul>
 800ec58:	4622      	mov	r2, r4
 800ec5a:	462b      	mov	r3, r5
 800ec5c:	f7f1 fb1e 	bl	800029c <__adddf3>
 800ec60:	4642      	mov	r2, r8
 800ec62:	4682      	mov	sl, r0
 800ec64:	468b      	mov	fp, r1
 800ec66:	464b      	mov	r3, r9
 800ec68:	4640      	mov	r0, r8
 800ec6a:	4649      	mov	r1, r9
 800ec6c:	f7f1 fccc 	bl	8000608 <__aeabi_dmul>
 800ec70:	4b6b      	ldr	r3, [pc, #428]	; (800ee20 <__ieee754_pow+0x770>)
 800ec72:	2200      	movs	r2, #0
 800ec74:	4606      	mov	r6, r0
 800ec76:	460f      	mov	r7, r1
 800ec78:	f7f1 fb10 	bl	800029c <__adddf3>
 800ec7c:	4652      	mov	r2, sl
 800ec7e:	465b      	mov	r3, fp
 800ec80:	f7f1 fb0c 	bl	800029c <__adddf3>
 800ec84:	2000      	movs	r0, #0
 800ec86:	4604      	mov	r4, r0
 800ec88:	460d      	mov	r5, r1
 800ec8a:	4602      	mov	r2, r0
 800ec8c:	460b      	mov	r3, r1
 800ec8e:	4640      	mov	r0, r8
 800ec90:	4649      	mov	r1, r9
 800ec92:	f7f1 fcb9 	bl	8000608 <__aeabi_dmul>
 800ec96:	4b62      	ldr	r3, [pc, #392]	; (800ee20 <__ieee754_pow+0x770>)
 800ec98:	4680      	mov	r8, r0
 800ec9a:	4689      	mov	r9, r1
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	4620      	mov	r0, r4
 800eca0:	4629      	mov	r1, r5
 800eca2:	f7f1 faf9 	bl	8000298 <__aeabi_dsub>
 800eca6:	4632      	mov	r2, r6
 800eca8:	463b      	mov	r3, r7
 800ecaa:	f7f1 faf5 	bl	8000298 <__aeabi_dsub>
 800ecae:	4602      	mov	r2, r0
 800ecb0:	460b      	mov	r3, r1
 800ecb2:	4650      	mov	r0, sl
 800ecb4:	4659      	mov	r1, fp
 800ecb6:	f7f1 faef 	bl	8000298 <__aeabi_dsub>
 800ecba:	ec53 2b18 	vmov	r2, r3, d8
 800ecbe:	f7f1 fca3 	bl	8000608 <__aeabi_dmul>
 800ecc2:	4622      	mov	r2, r4
 800ecc4:	4606      	mov	r6, r0
 800ecc6:	460f      	mov	r7, r1
 800ecc8:	462b      	mov	r3, r5
 800ecca:	ec51 0b19 	vmov	r0, r1, d9
 800ecce:	f7f1 fc9b 	bl	8000608 <__aeabi_dmul>
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	4630      	mov	r0, r6
 800ecd8:	4639      	mov	r1, r7
 800ecda:	f7f1 fadf 	bl	800029c <__adddf3>
 800ecde:	4606      	mov	r6, r0
 800ece0:	460f      	mov	r7, r1
 800ece2:	4602      	mov	r2, r0
 800ece4:	460b      	mov	r3, r1
 800ece6:	4640      	mov	r0, r8
 800ece8:	4649      	mov	r1, r9
 800ecea:	f7f1 fad7 	bl	800029c <__adddf3>
 800ecee:	a33e      	add	r3, pc, #248	; (adr r3, 800ede8 <__ieee754_pow+0x738>)
 800ecf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf4:	2000      	movs	r0, #0
 800ecf6:	4604      	mov	r4, r0
 800ecf8:	460d      	mov	r5, r1
 800ecfa:	f7f1 fc85 	bl	8000608 <__aeabi_dmul>
 800ecfe:	4642      	mov	r2, r8
 800ed00:	ec41 0b18 	vmov	d8, r0, r1
 800ed04:	464b      	mov	r3, r9
 800ed06:	4620      	mov	r0, r4
 800ed08:	4629      	mov	r1, r5
 800ed0a:	f7f1 fac5 	bl	8000298 <__aeabi_dsub>
 800ed0e:	4602      	mov	r2, r0
 800ed10:	460b      	mov	r3, r1
 800ed12:	4630      	mov	r0, r6
 800ed14:	4639      	mov	r1, r7
 800ed16:	f7f1 fabf 	bl	8000298 <__aeabi_dsub>
 800ed1a:	a335      	add	r3, pc, #212	; (adr r3, 800edf0 <__ieee754_pow+0x740>)
 800ed1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed20:	f7f1 fc72 	bl	8000608 <__aeabi_dmul>
 800ed24:	a334      	add	r3, pc, #208	; (adr r3, 800edf8 <__ieee754_pow+0x748>)
 800ed26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed2a:	4606      	mov	r6, r0
 800ed2c:	460f      	mov	r7, r1
 800ed2e:	4620      	mov	r0, r4
 800ed30:	4629      	mov	r1, r5
 800ed32:	f7f1 fc69 	bl	8000608 <__aeabi_dmul>
 800ed36:	4602      	mov	r2, r0
 800ed38:	460b      	mov	r3, r1
 800ed3a:	4630      	mov	r0, r6
 800ed3c:	4639      	mov	r1, r7
 800ed3e:	f7f1 faad 	bl	800029c <__adddf3>
 800ed42:	9a07      	ldr	r2, [sp, #28]
 800ed44:	4b37      	ldr	r3, [pc, #220]	; (800ee24 <__ieee754_pow+0x774>)
 800ed46:	4413      	add	r3, r2
 800ed48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4c:	f7f1 faa6 	bl	800029c <__adddf3>
 800ed50:	4682      	mov	sl, r0
 800ed52:	9805      	ldr	r0, [sp, #20]
 800ed54:	468b      	mov	fp, r1
 800ed56:	f7f1 fbed 	bl	8000534 <__aeabi_i2d>
 800ed5a:	9a07      	ldr	r2, [sp, #28]
 800ed5c:	4b32      	ldr	r3, [pc, #200]	; (800ee28 <__ieee754_pow+0x778>)
 800ed5e:	4413      	add	r3, r2
 800ed60:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ed64:	4606      	mov	r6, r0
 800ed66:	460f      	mov	r7, r1
 800ed68:	4652      	mov	r2, sl
 800ed6a:	465b      	mov	r3, fp
 800ed6c:	ec51 0b18 	vmov	r0, r1, d8
 800ed70:	f7f1 fa94 	bl	800029c <__adddf3>
 800ed74:	4642      	mov	r2, r8
 800ed76:	464b      	mov	r3, r9
 800ed78:	f7f1 fa90 	bl	800029c <__adddf3>
 800ed7c:	4632      	mov	r2, r6
 800ed7e:	463b      	mov	r3, r7
 800ed80:	f7f1 fa8c 	bl	800029c <__adddf3>
 800ed84:	2000      	movs	r0, #0
 800ed86:	4632      	mov	r2, r6
 800ed88:	463b      	mov	r3, r7
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	460d      	mov	r5, r1
 800ed8e:	f7f1 fa83 	bl	8000298 <__aeabi_dsub>
 800ed92:	4642      	mov	r2, r8
 800ed94:	464b      	mov	r3, r9
 800ed96:	f7f1 fa7f 	bl	8000298 <__aeabi_dsub>
 800ed9a:	ec53 2b18 	vmov	r2, r3, d8
 800ed9e:	f7f1 fa7b 	bl	8000298 <__aeabi_dsub>
 800eda2:	4602      	mov	r2, r0
 800eda4:	460b      	mov	r3, r1
 800eda6:	4650      	mov	r0, sl
 800eda8:	4659      	mov	r1, fp
 800edaa:	e610      	b.n	800e9ce <__ieee754_pow+0x31e>
 800edac:	2401      	movs	r4, #1
 800edae:	e6a1      	b.n	800eaf4 <__ieee754_pow+0x444>
 800edb0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ee00 <__ieee754_pow+0x750>
 800edb4:	e617      	b.n	800e9e6 <__ieee754_pow+0x336>
 800edb6:	bf00      	nop
 800edb8:	4a454eef 	.word	0x4a454eef
 800edbc:	3fca7e28 	.word	0x3fca7e28
 800edc0:	93c9db65 	.word	0x93c9db65
 800edc4:	3fcd864a 	.word	0x3fcd864a
 800edc8:	a91d4101 	.word	0xa91d4101
 800edcc:	3fd17460 	.word	0x3fd17460
 800edd0:	518f264d 	.word	0x518f264d
 800edd4:	3fd55555 	.word	0x3fd55555
 800edd8:	db6fabff 	.word	0xdb6fabff
 800eddc:	3fdb6db6 	.word	0x3fdb6db6
 800ede0:	33333303 	.word	0x33333303
 800ede4:	3fe33333 	.word	0x3fe33333
 800ede8:	e0000000 	.word	0xe0000000
 800edec:	3feec709 	.word	0x3feec709
 800edf0:	dc3a03fd 	.word	0xdc3a03fd
 800edf4:	3feec709 	.word	0x3feec709
 800edf8:	145b01f5 	.word	0x145b01f5
 800edfc:	be3e2fe0 	.word	0xbe3e2fe0
 800ee00:	00000000 	.word	0x00000000
 800ee04:	3ff00000 	.word	0x3ff00000
 800ee08:	7ff00000 	.word	0x7ff00000
 800ee0c:	43400000 	.word	0x43400000
 800ee10:	0003988e 	.word	0x0003988e
 800ee14:	000bb679 	.word	0x000bb679
 800ee18:	08011198 	.word	0x08011198
 800ee1c:	3ff00000 	.word	0x3ff00000
 800ee20:	40080000 	.word	0x40080000
 800ee24:	080111b8 	.word	0x080111b8
 800ee28:	080111a8 	.word	0x080111a8
 800ee2c:	a3b3      	add	r3, pc, #716	; (adr r3, 800f0fc <__ieee754_pow+0xa4c>)
 800ee2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee32:	4640      	mov	r0, r8
 800ee34:	4649      	mov	r1, r9
 800ee36:	f7f1 fa31 	bl	800029c <__adddf3>
 800ee3a:	4622      	mov	r2, r4
 800ee3c:	ec41 0b1a 	vmov	d10, r0, r1
 800ee40:	462b      	mov	r3, r5
 800ee42:	4630      	mov	r0, r6
 800ee44:	4639      	mov	r1, r7
 800ee46:	f7f1 fa27 	bl	8000298 <__aeabi_dsub>
 800ee4a:	4602      	mov	r2, r0
 800ee4c:	460b      	mov	r3, r1
 800ee4e:	ec51 0b1a 	vmov	r0, r1, d10
 800ee52:	f7f1 fe69 	bl	8000b28 <__aeabi_dcmpgt>
 800ee56:	2800      	cmp	r0, #0
 800ee58:	f47f ae04 	bne.w	800ea64 <__ieee754_pow+0x3b4>
 800ee5c:	4aa2      	ldr	r2, [pc, #648]	; (800f0e8 <__ieee754_pow+0xa38>)
 800ee5e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ee62:	4293      	cmp	r3, r2
 800ee64:	f340 8107 	ble.w	800f076 <__ieee754_pow+0x9c6>
 800ee68:	151b      	asrs	r3, r3, #20
 800ee6a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ee6e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ee72:	fa4a fa03 	asr.w	sl, sl, r3
 800ee76:	44da      	add	sl, fp
 800ee78:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800ee7c:	489b      	ldr	r0, [pc, #620]	; (800f0ec <__ieee754_pow+0xa3c>)
 800ee7e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ee82:	4108      	asrs	r0, r1
 800ee84:	ea00 030a 	and.w	r3, r0, sl
 800ee88:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800ee8c:	f1c1 0114 	rsb	r1, r1, #20
 800ee90:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ee94:	fa4a fa01 	asr.w	sl, sl, r1
 800ee98:	f1bb 0f00 	cmp.w	fp, #0
 800ee9c:	f04f 0200 	mov.w	r2, #0
 800eea0:	4620      	mov	r0, r4
 800eea2:	4629      	mov	r1, r5
 800eea4:	bfb8      	it	lt
 800eea6:	f1ca 0a00 	rsblt	sl, sl, #0
 800eeaa:	f7f1 f9f5 	bl	8000298 <__aeabi_dsub>
 800eeae:	ec41 0b19 	vmov	d9, r0, r1
 800eeb2:	4642      	mov	r2, r8
 800eeb4:	464b      	mov	r3, r9
 800eeb6:	ec51 0b19 	vmov	r0, r1, d9
 800eeba:	f7f1 f9ef 	bl	800029c <__adddf3>
 800eebe:	a37a      	add	r3, pc, #488	; (adr r3, 800f0a8 <__ieee754_pow+0x9f8>)
 800eec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec4:	2000      	movs	r0, #0
 800eec6:	4604      	mov	r4, r0
 800eec8:	460d      	mov	r5, r1
 800eeca:	f7f1 fb9d 	bl	8000608 <__aeabi_dmul>
 800eece:	ec53 2b19 	vmov	r2, r3, d9
 800eed2:	4606      	mov	r6, r0
 800eed4:	460f      	mov	r7, r1
 800eed6:	4620      	mov	r0, r4
 800eed8:	4629      	mov	r1, r5
 800eeda:	f7f1 f9dd 	bl	8000298 <__aeabi_dsub>
 800eede:	4602      	mov	r2, r0
 800eee0:	460b      	mov	r3, r1
 800eee2:	4640      	mov	r0, r8
 800eee4:	4649      	mov	r1, r9
 800eee6:	f7f1 f9d7 	bl	8000298 <__aeabi_dsub>
 800eeea:	a371      	add	r3, pc, #452	; (adr r3, 800f0b0 <__ieee754_pow+0xa00>)
 800eeec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef0:	f7f1 fb8a 	bl	8000608 <__aeabi_dmul>
 800eef4:	a370      	add	r3, pc, #448	; (adr r3, 800f0b8 <__ieee754_pow+0xa08>)
 800eef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eefa:	4680      	mov	r8, r0
 800eefc:	4689      	mov	r9, r1
 800eefe:	4620      	mov	r0, r4
 800ef00:	4629      	mov	r1, r5
 800ef02:	f7f1 fb81 	bl	8000608 <__aeabi_dmul>
 800ef06:	4602      	mov	r2, r0
 800ef08:	460b      	mov	r3, r1
 800ef0a:	4640      	mov	r0, r8
 800ef0c:	4649      	mov	r1, r9
 800ef0e:	f7f1 f9c5 	bl	800029c <__adddf3>
 800ef12:	4604      	mov	r4, r0
 800ef14:	460d      	mov	r5, r1
 800ef16:	4602      	mov	r2, r0
 800ef18:	460b      	mov	r3, r1
 800ef1a:	4630      	mov	r0, r6
 800ef1c:	4639      	mov	r1, r7
 800ef1e:	f7f1 f9bd 	bl	800029c <__adddf3>
 800ef22:	4632      	mov	r2, r6
 800ef24:	463b      	mov	r3, r7
 800ef26:	4680      	mov	r8, r0
 800ef28:	4689      	mov	r9, r1
 800ef2a:	f7f1 f9b5 	bl	8000298 <__aeabi_dsub>
 800ef2e:	4602      	mov	r2, r0
 800ef30:	460b      	mov	r3, r1
 800ef32:	4620      	mov	r0, r4
 800ef34:	4629      	mov	r1, r5
 800ef36:	f7f1 f9af 	bl	8000298 <__aeabi_dsub>
 800ef3a:	4642      	mov	r2, r8
 800ef3c:	4606      	mov	r6, r0
 800ef3e:	460f      	mov	r7, r1
 800ef40:	464b      	mov	r3, r9
 800ef42:	4640      	mov	r0, r8
 800ef44:	4649      	mov	r1, r9
 800ef46:	f7f1 fb5f 	bl	8000608 <__aeabi_dmul>
 800ef4a:	a35d      	add	r3, pc, #372	; (adr r3, 800f0c0 <__ieee754_pow+0xa10>)
 800ef4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef50:	4604      	mov	r4, r0
 800ef52:	460d      	mov	r5, r1
 800ef54:	f7f1 fb58 	bl	8000608 <__aeabi_dmul>
 800ef58:	a35b      	add	r3, pc, #364	; (adr r3, 800f0c8 <__ieee754_pow+0xa18>)
 800ef5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef5e:	f7f1 f99b 	bl	8000298 <__aeabi_dsub>
 800ef62:	4622      	mov	r2, r4
 800ef64:	462b      	mov	r3, r5
 800ef66:	f7f1 fb4f 	bl	8000608 <__aeabi_dmul>
 800ef6a:	a359      	add	r3, pc, #356	; (adr r3, 800f0d0 <__ieee754_pow+0xa20>)
 800ef6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef70:	f7f1 f994 	bl	800029c <__adddf3>
 800ef74:	4622      	mov	r2, r4
 800ef76:	462b      	mov	r3, r5
 800ef78:	f7f1 fb46 	bl	8000608 <__aeabi_dmul>
 800ef7c:	a356      	add	r3, pc, #344	; (adr r3, 800f0d8 <__ieee754_pow+0xa28>)
 800ef7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef82:	f7f1 f989 	bl	8000298 <__aeabi_dsub>
 800ef86:	4622      	mov	r2, r4
 800ef88:	462b      	mov	r3, r5
 800ef8a:	f7f1 fb3d 	bl	8000608 <__aeabi_dmul>
 800ef8e:	a354      	add	r3, pc, #336	; (adr r3, 800f0e0 <__ieee754_pow+0xa30>)
 800ef90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef94:	f7f1 f982 	bl	800029c <__adddf3>
 800ef98:	4622      	mov	r2, r4
 800ef9a:	462b      	mov	r3, r5
 800ef9c:	f7f1 fb34 	bl	8000608 <__aeabi_dmul>
 800efa0:	4602      	mov	r2, r0
 800efa2:	460b      	mov	r3, r1
 800efa4:	4640      	mov	r0, r8
 800efa6:	4649      	mov	r1, r9
 800efa8:	f7f1 f976 	bl	8000298 <__aeabi_dsub>
 800efac:	4604      	mov	r4, r0
 800efae:	460d      	mov	r5, r1
 800efb0:	4602      	mov	r2, r0
 800efb2:	460b      	mov	r3, r1
 800efb4:	4640      	mov	r0, r8
 800efb6:	4649      	mov	r1, r9
 800efb8:	f7f1 fb26 	bl	8000608 <__aeabi_dmul>
 800efbc:	2200      	movs	r2, #0
 800efbe:	ec41 0b19 	vmov	d9, r0, r1
 800efc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800efc6:	4620      	mov	r0, r4
 800efc8:	4629      	mov	r1, r5
 800efca:	f7f1 f965 	bl	8000298 <__aeabi_dsub>
 800efce:	4602      	mov	r2, r0
 800efd0:	460b      	mov	r3, r1
 800efd2:	ec51 0b19 	vmov	r0, r1, d9
 800efd6:	f7f1 fc41 	bl	800085c <__aeabi_ddiv>
 800efda:	4632      	mov	r2, r6
 800efdc:	4604      	mov	r4, r0
 800efde:	460d      	mov	r5, r1
 800efe0:	463b      	mov	r3, r7
 800efe2:	4640      	mov	r0, r8
 800efe4:	4649      	mov	r1, r9
 800efe6:	f7f1 fb0f 	bl	8000608 <__aeabi_dmul>
 800efea:	4632      	mov	r2, r6
 800efec:	463b      	mov	r3, r7
 800efee:	f7f1 f955 	bl	800029c <__adddf3>
 800eff2:	4602      	mov	r2, r0
 800eff4:	460b      	mov	r3, r1
 800eff6:	4620      	mov	r0, r4
 800eff8:	4629      	mov	r1, r5
 800effa:	f7f1 f94d 	bl	8000298 <__aeabi_dsub>
 800effe:	4642      	mov	r2, r8
 800f000:	464b      	mov	r3, r9
 800f002:	f7f1 f949 	bl	8000298 <__aeabi_dsub>
 800f006:	460b      	mov	r3, r1
 800f008:	4602      	mov	r2, r0
 800f00a:	4939      	ldr	r1, [pc, #228]	; (800f0f0 <__ieee754_pow+0xa40>)
 800f00c:	2000      	movs	r0, #0
 800f00e:	f7f1 f943 	bl	8000298 <__aeabi_dsub>
 800f012:	ec41 0b10 	vmov	d0, r0, r1
 800f016:	ee10 3a90 	vmov	r3, s1
 800f01a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f01e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f022:	da2b      	bge.n	800f07c <__ieee754_pow+0x9cc>
 800f024:	4650      	mov	r0, sl
 800f026:	f000 fa77 	bl	800f518 <scalbn>
 800f02a:	ec51 0b10 	vmov	r0, r1, d0
 800f02e:	ec53 2b18 	vmov	r2, r3, d8
 800f032:	f7ff bbee 	b.w	800e812 <__ieee754_pow+0x162>
 800f036:	4b2f      	ldr	r3, [pc, #188]	; (800f0f4 <__ieee754_pow+0xa44>)
 800f038:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f03c:	429e      	cmp	r6, r3
 800f03e:	f77f af0d 	ble.w	800ee5c <__ieee754_pow+0x7ac>
 800f042:	4b2d      	ldr	r3, [pc, #180]	; (800f0f8 <__ieee754_pow+0xa48>)
 800f044:	440b      	add	r3, r1
 800f046:	4303      	orrs	r3, r0
 800f048:	d009      	beq.n	800f05e <__ieee754_pow+0x9ae>
 800f04a:	ec51 0b18 	vmov	r0, r1, d8
 800f04e:	2200      	movs	r2, #0
 800f050:	2300      	movs	r3, #0
 800f052:	f7f1 fd4b 	bl	8000aec <__aeabi_dcmplt>
 800f056:	3800      	subs	r0, #0
 800f058:	bf18      	it	ne
 800f05a:	2001      	movne	r0, #1
 800f05c:	e448      	b.n	800e8f0 <__ieee754_pow+0x240>
 800f05e:	4622      	mov	r2, r4
 800f060:	462b      	mov	r3, r5
 800f062:	f7f1 f919 	bl	8000298 <__aeabi_dsub>
 800f066:	4642      	mov	r2, r8
 800f068:	464b      	mov	r3, r9
 800f06a:	f7f1 fd53 	bl	8000b14 <__aeabi_dcmpge>
 800f06e:	2800      	cmp	r0, #0
 800f070:	f43f aef4 	beq.w	800ee5c <__ieee754_pow+0x7ac>
 800f074:	e7e9      	b.n	800f04a <__ieee754_pow+0x99a>
 800f076:	f04f 0a00 	mov.w	sl, #0
 800f07a:	e71a      	b.n	800eeb2 <__ieee754_pow+0x802>
 800f07c:	ec51 0b10 	vmov	r0, r1, d0
 800f080:	4619      	mov	r1, r3
 800f082:	e7d4      	b.n	800f02e <__ieee754_pow+0x97e>
 800f084:	491a      	ldr	r1, [pc, #104]	; (800f0f0 <__ieee754_pow+0xa40>)
 800f086:	2000      	movs	r0, #0
 800f088:	f7ff bb31 	b.w	800e6ee <__ieee754_pow+0x3e>
 800f08c:	2000      	movs	r0, #0
 800f08e:	2100      	movs	r1, #0
 800f090:	f7ff bb2d 	b.w	800e6ee <__ieee754_pow+0x3e>
 800f094:	4630      	mov	r0, r6
 800f096:	4639      	mov	r1, r7
 800f098:	f7ff bb29 	b.w	800e6ee <__ieee754_pow+0x3e>
 800f09c:	9204      	str	r2, [sp, #16]
 800f09e:	f7ff bb7b 	b.w	800e798 <__ieee754_pow+0xe8>
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	f7ff bb65 	b.w	800e772 <__ieee754_pow+0xc2>
 800f0a8:	00000000 	.word	0x00000000
 800f0ac:	3fe62e43 	.word	0x3fe62e43
 800f0b0:	fefa39ef 	.word	0xfefa39ef
 800f0b4:	3fe62e42 	.word	0x3fe62e42
 800f0b8:	0ca86c39 	.word	0x0ca86c39
 800f0bc:	be205c61 	.word	0xbe205c61
 800f0c0:	72bea4d0 	.word	0x72bea4d0
 800f0c4:	3e663769 	.word	0x3e663769
 800f0c8:	c5d26bf1 	.word	0xc5d26bf1
 800f0cc:	3ebbbd41 	.word	0x3ebbbd41
 800f0d0:	af25de2c 	.word	0xaf25de2c
 800f0d4:	3f11566a 	.word	0x3f11566a
 800f0d8:	16bebd93 	.word	0x16bebd93
 800f0dc:	3f66c16c 	.word	0x3f66c16c
 800f0e0:	5555553e 	.word	0x5555553e
 800f0e4:	3fc55555 	.word	0x3fc55555
 800f0e8:	3fe00000 	.word	0x3fe00000
 800f0ec:	fff00000 	.word	0xfff00000
 800f0f0:	3ff00000 	.word	0x3ff00000
 800f0f4:	4090cbff 	.word	0x4090cbff
 800f0f8:	3f6f3400 	.word	0x3f6f3400
 800f0fc:	652b82fe 	.word	0x652b82fe
 800f100:	3c971547 	.word	0x3c971547
 800f104:	00000000 	.word	0x00000000

0800f108 <__ieee754_rem_pio2>:
 800f108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f10c:	ed2d 8b02 	vpush	{d8}
 800f110:	ec55 4b10 	vmov	r4, r5, d0
 800f114:	4bca      	ldr	r3, [pc, #808]	; (800f440 <__ieee754_rem_pio2+0x338>)
 800f116:	b08b      	sub	sp, #44	; 0x2c
 800f118:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f11c:	4598      	cmp	r8, r3
 800f11e:	4682      	mov	sl, r0
 800f120:	9502      	str	r5, [sp, #8]
 800f122:	dc08      	bgt.n	800f136 <__ieee754_rem_pio2+0x2e>
 800f124:	2200      	movs	r2, #0
 800f126:	2300      	movs	r3, #0
 800f128:	ed80 0b00 	vstr	d0, [r0]
 800f12c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f130:	f04f 0b00 	mov.w	fp, #0
 800f134:	e028      	b.n	800f188 <__ieee754_rem_pio2+0x80>
 800f136:	4bc3      	ldr	r3, [pc, #780]	; (800f444 <__ieee754_rem_pio2+0x33c>)
 800f138:	4598      	cmp	r8, r3
 800f13a:	dc78      	bgt.n	800f22e <__ieee754_rem_pio2+0x126>
 800f13c:	9b02      	ldr	r3, [sp, #8]
 800f13e:	4ec2      	ldr	r6, [pc, #776]	; (800f448 <__ieee754_rem_pio2+0x340>)
 800f140:	2b00      	cmp	r3, #0
 800f142:	ee10 0a10 	vmov	r0, s0
 800f146:	a3b0      	add	r3, pc, #704	; (adr r3, 800f408 <__ieee754_rem_pio2+0x300>)
 800f148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f14c:	4629      	mov	r1, r5
 800f14e:	dd39      	ble.n	800f1c4 <__ieee754_rem_pio2+0xbc>
 800f150:	f7f1 f8a2 	bl	8000298 <__aeabi_dsub>
 800f154:	45b0      	cmp	r8, r6
 800f156:	4604      	mov	r4, r0
 800f158:	460d      	mov	r5, r1
 800f15a:	d01b      	beq.n	800f194 <__ieee754_rem_pio2+0x8c>
 800f15c:	a3ac      	add	r3, pc, #688	; (adr r3, 800f410 <__ieee754_rem_pio2+0x308>)
 800f15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f162:	f7f1 f899 	bl	8000298 <__aeabi_dsub>
 800f166:	4602      	mov	r2, r0
 800f168:	460b      	mov	r3, r1
 800f16a:	e9ca 2300 	strd	r2, r3, [sl]
 800f16e:	4620      	mov	r0, r4
 800f170:	4629      	mov	r1, r5
 800f172:	f7f1 f891 	bl	8000298 <__aeabi_dsub>
 800f176:	a3a6      	add	r3, pc, #664	; (adr r3, 800f410 <__ieee754_rem_pio2+0x308>)
 800f178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f17c:	f7f1 f88c 	bl	8000298 <__aeabi_dsub>
 800f180:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f184:	f04f 0b01 	mov.w	fp, #1
 800f188:	4658      	mov	r0, fp
 800f18a:	b00b      	add	sp, #44	; 0x2c
 800f18c:	ecbd 8b02 	vpop	{d8}
 800f190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f194:	a3a0      	add	r3, pc, #640	; (adr r3, 800f418 <__ieee754_rem_pio2+0x310>)
 800f196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19a:	f7f1 f87d 	bl	8000298 <__aeabi_dsub>
 800f19e:	a3a0      	add	r3, pc, #640	; (adr r3, 800f420 <__ieee754_rem_pio2+0x318>)
 800f1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a4:	4604      	mov	r4, r0
 800f1a6:	460d      	mov	r5, r1
 800f1a8:	f7f1 f876 	bl	8000298 <__aeabi_dsub>
 800f1ac:	4602      	mov	r2, r0
 800f1ae:	460b      	mov	r3, r1
 800f1b0:	e9ca 2300 	strd	r2, r3, [sl]
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	4629      	mov	r1, r5
 800f1b8:	f7f1 f86e 	bl	8000298 <__aeabi_dsub>
 800f1bc:	a398      	add	r3, pc, #608	; (adr r3, 800f420 <__ieee754_rem_pio2+0x318>)
 800f1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c2:	e7db      	b.n	800f17c <__ieee754_rem_pio2+0x74>
 800f1c4:	f7f1 f86a 	bl	800029c <__adddf3>
 800f1c8:	45b0      	cmp	r8, r6
 800f1ca:	4604      	mov	r4, r0
 800f1cc:	460d      	mov	r5, r1
 800f1ce:	d016      	beq.n	800f1fe <__ieee754_rem_pio2+0xf6>
 800f1d0:	a38f      	add	r3, pc, #572	; (adr r3, 800f410 <__ieee754_rem_pio2+0x308>)
 800f1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d6:	f7f1 f861 	bl	800029c <__adddf3>
 800f1da:	4602      	mov	r2, r0
 800f1dc:	460b      	mov	r3, r1
 800f1de:	e9ca 2300 	strd	r2, r3, [sl]
 800f1e2:	4620      	mov	r0, r4
 800f1e4:	4629      	mov	r1, r5
 800f1e6:	f7f1 f857 	bl	8000298 <__aeabi_dsub>
 800f1ea:	a389      	add	r3, pc, #548	; (adr r3, 800f410 <__ieee754_rem_pio2+0x308>)
 800f1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f0:	f7f1 f854 	bl	800029c <__adddf3>
 800f1f4:	f04f 3bff 	mov.w	fp, #4294967295
 800f1f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f1fc:	e7c4      	b.n	800f188 <__ieee754_rem_pio2+0x80>
 800f1fe:	a386      	add	r3, pc, #536	; (adr r3, 800f418 <__ieee754_rem_pio2+0x310>)
 800f200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f204:	f7f1 f84a 	bl	800029c <__adddf3>
 800f208:	a385      	add	r3, pc, #532	; (adr r3, 800f420 <__ieee754_rem_pio2+0x318>)
 800f20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20e:	4604      	mov	r4, r0
 800f210:	460d      	mov	r5, r1
 800f212:	f7f1 f843 	bl	800029c <__adddf3>
 800f216:	4602      	mov	r2, r0
 800f218:	460b      	mov	r3, r1
 800f21a:	e9ca 2300 	strd	r2, r3, [sl]
 800f21e:	4620      	mov	r0, r4
 800f220:	4629      	mov	r1, r5
 800f222:	f7f1 f839 	bl	8000298 <__aeabi_dsub>
 800f226:	a37e      	add	r3, pc, #504	; (adr r3, 800f420 <__ieee754_rem_pio2+0x318>)
 800f228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22c:	e7e0      	b.n	800f1f0 <__ieee754_rem_pio2+0xe8>
 800f22e:	4b87      	ldr	r3, [pc, #540]	; (800f44c <__ieee754_rem_pio2+0x344>)
 800f230:	4598      	cmp	r8, r3
 800f232:	f300 80d8 	bgt.w	800f3e6 <__ieee754_rem_pio2+0x2de>
 800f236:	f7fe fb1f 	bl	800d878 <fabs>
 800f23a:	ec55 4b10 	vmov	r4, r5, d0
 800f23e:	ee10 0a10 	vmov	r0, s0
 800f242:	a379      	add	r3, pc, #484	; (adr r3, 800f428 <__ieee754_rem_pio2+0x320>)
 800f244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f248:	4629      	mov	r1, r5
 800f24a:	f7f1 f9dd 	bl	8000608 <__aeabi_dmul>
 800f24e:	4b80      	ldr	r3, [pc, #512]	; (800f450 <__ieee754_rem_pio2+0x348>)
 800f250:	2200      	movs	r2, #0
 800f252:	f7f1 f823 	bl	800029c <__adddf3>
 800f256:	f7f1 fc87 	bl	8000b68 <__aeabi_d2iz>
 800f25a:	4683      	mov	fp, r0
 800f25c:	f7f1 f96a 	bl	8000534 <__aeabi_i2d>
 800f260:	4602      	mov	r2, r0
 800f262:	460b      	mov	r3, r1
 800f264:	ec43 2b18 	vmov	d8, r2, r3
 800f268:	a367      	add	r3, pc, #412	; (adr r3, 800f408 <__ieee754_rem_pio2+0x300>)
 800f26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f26e:	f7f1 f9cb 	bl	8000608 <__aeabi_dmul>
 800f272:	4602      	mov	r2, r0
 800f274:	460b      	mov	r3, r1
 800f276:	4620      	mov	r0, r4
 800f278:	4629      	mov	r1, r5
 800f27a:	f7f1 f80d 	bl	8000298 <__aeabi_dsub>
 800f27e:	a364      	add	r3, pc, #400	; (adr r3, 800f410 <__ieee754_rem_pio2+0x308>)
 800f280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f284:	4606      	mov	r6, r0
 800f286:	460f      	mov	r7, r1
 800f288:	ec51 0b18 	vmov	r0, r1, d8
 800f28c:	f7f1 f9bc 	bl	8000608 <__aeabi_dmul>
 800f290:	f1bb 0f1f 	cmp.w	fp, #31
 800f294:	4604      	mov	r4, r0
 800f296:	460d      	mov	r5, r1
 800f298:	dc0d      	bgt.n	800f2b6 <__ieee754_rem_pio2+0x1ae>
 800f29a:	4b6e      	ldr	r3, [pc, #440]	; (800f454 <__ieee754_rem_pio2+0x34c>)
 800f29c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f2a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2a4:	4543      	cmp	r3, r8
 800f2a6:	d006      	beq.n	800f2b6 <__ieee754_rem_pio2+0x1ae>
 800f2a8:	4622      	mov	r2, r4
 800f2aa:	462b      	mov	r3, r5
 800f2ac:	4630      	mov	r0, r6
 800f2ae:	4639      	mov	r1, r7
 800f2b0:	f7f0 fff2 	bl	8000298 <__aeabi_dsub>
 800f2b4:	e00e      	b.n	800f2d4 <__ieee754_rem_pio2+0x1cc>
 800f2b6:	462b      	mov	r3, r5
 800f2b8:	4622      	mov	r2, r4
 800f2ba:	4630      	mov	r0, r6
 800f2bc:	4639      	mov	r1, r7
 800f2be:	f7f0 ffeb 	bl	8000298 <__aeabi_dsub>
 800f2c2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f2c6:	9303      	str	r3, [sp, #12]
 800f2c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f2cc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800f2d0:	2b10      	cmp	r3, #16
 800f2d2:	dc02      	bgt.n	800f2da <__ieee754_rem_pio2+0x1d2>
 800f2d4:	e9ca 0100 	strd	r0, r1, [sl]
 800f2d8:	e039      	b.n	800f34e <__ieee754_rem_pio2+0x246>
 800f2da:	a34f      	add	r3, pc, #316	; (adr r3, 800f418 <__ieee754_rem_pio2+0x310>)
 800f2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e0:	ec51 0b18 	vmov	r0, r1, d8
 800f2e4:	f7f1 f990 	bl	8000608 <__aeabi_dmul>
 800f2e8:	4604      	mov	r4, r0
 800f2ea:	460d      	mov	r5, r1
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	460b      	mov	r3, r1
 800f2f0:	4630      	mov	r0, r6
 800f2f2:	4639      	mov	r1, r7
 800f2f4:	f7f0 ffd0 	bl	8000298 <__aeabi_dsub>
 800f2f8:	4602      	mov	r2, r0
 800f2fa:	460b      	mov	r3, r1
 800f2fc:	4680      	mov	r8, r0
 800f2fe:	4689      	mov	r9, r1
 800f300:	4630      	mov	r0, r6
 800f302:	4639      	mov	r1, r7
 800f304:	f7f0 ffc8 	bl	8000298 <__aeabi_dsub>
 800f308:	4622      	mov	r2, r4
 800f30a:	462b      	mov	r3, r5
 800f30c:	f7f0 ffc4 	bl	8000298 <__aeabi_dsub>
 800f310:	a343      	add	r3, pc, #268	; (adr r3, 800f420 <__ieee754_rem_pio2+0x318>)
 800f312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f316:	4604      	mov	r4, r0
 800f318:	460d      	mov	r5, r1
 800f31a:	ec51 0b18 	vmov	r0, r1, d8
 800f31e:	f7f1 f973 	bl	8000608 <__aeabi_dmul>
 800f322:	4622      	mov	r2, r4
 800f324:	462b      	mov	r3, r5
 800f326:	f7f0 ffb7 	bl	8000298 <__aeabi_dsub>
 800f32a:	4602      	mov	r2, r0
 800f32c:	460b      	mov	r3, r1
 800f32e:	4604      	mov	r4, r0
 800f330:	460d      	mov	r5, r1
 800f332:	4640      	mov	r0, r8
 800f334:	4649      	mov	r1, r9
 800f336:	f7f0 ffaf 	bl	8000298 <__aeabi_dsub>
 800f33a:	9a03      	ldr	r2, [sp, #12]
 800f33c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f340:	1ad3      	subs	r3, r2, r3
 800f342:	2b31      	cmp	r3, #49	; 0x31
 800f344:	dc24      	bgt.n	800f390 <__ieee754_rem_pio2+0x288>
 800f346:	e9ca 0100 	strd	r0, r1, [sl]
 800f34a:	4646      	mov	r6, r8
 800f34c:	464f      	mov	r7, r9
 800f34e:	e9da 8900 	ldrd	r8, r9, [sl]
 800f352:	4630      	mov	r0, r6
 800f354:	4642      	mov	r2, r8
 800f356:	464b      	mov	r3, r9
 800f358:	4639      	mov	r1, r7
 800f35a:	f7f0 ff9d 	bl	8000298 <__aeabi_dsub>
 800f35e:	462b      	mov	r3, r5
 800f360:	4622      	mov	r2, r4
 800f362:	f7f0 ff99 	bl	8000298 <__aeabi_dsub>
 800f366:	9b02      	ldr	r3, [sp, #8]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f36e:	f6bf af0b 	bge.w	800f188 <__ieee754_rem_pio2+0x80>
 800f372:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f376:	f8ca 3004 	str.w	r3, [sl, #4]
 800f37a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f37e:	f8ca 8000 	str.w	r8, [sl]
 800f382:	f8ca 0008 	str.w	r0, [sl, #8]
 800f386:	f8ca 300c 	str.w	r3, [sl, #12]
 800f38a:	f1cb 0b00 	rsb	fp, fp, #0
 800f38e:	e6fb      	b.n	800f188 <__ieee754_rem_pio2+0x80>
 800f390:	a327      	add	r3, pc, #156	; (adr r3, 800f430 <__ieee754_rem_pio2+0x328>)
 800f392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f396:	ec51 0b18 	vmov	r0, r1, d8
 800f39a:	f7f1 f935 	bl	8000608 <__aeabi_dmul>
 800f39e:	4604      	mov	r4, r0
 800f3a0:	460d      	mov	r5, r1
 800f3a2:	4602      	mov	r2, r0
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	4640      	mov	r0, r8
 800f3a8:	4649      	mov	r1, r9
 800f3aa:	f7f0 ff75 	bl	8000298 <__aeabi_dsub>
 800f3ae:	4602      	mov	r2, r0
 800f3b0:	460b      	mov	r3, r1
 800f3b2:	4606      	mov	r6, r0
 800f3b4:	460f      	mov	r7, r1
 800f3b6:	4640      	mov	r0, r8
 800f3b8:	4649      	mov	r1, r9
 800f3ba:	f7f0 ff6d 	bl	8000298 <__aeabi_dsub>
 800f3be:	4622      	mov	r2, r4
 800f3c0:	462b      	mov	r3, r5
 800f3c2:	f7f0 ff69 	bl	8000298 <__aeabi_dsub>
 800f3c6:	a31c      	add	r3, pc, #112	; (adr r3, 800f438 <__ieee754_rem_pio2+0x330>)
 800f3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3cc:	4604      	mov	r4, r0
 800f3ce:	460d      	mov	r5, r1
 800f3d0:	ec51 0b18 	vmov	r0, r1, d8
 800f3d4:	f7f1 f918 	bl	8000608 <__aeabi_dmul>
 800f3d8:	4622      	mov	r2, r4
 800f3da:	462b      	mov	r3, r5
 800f3dc:	f7f0 ff5c 	bl	8000298 <__aeabi_dsub>
 800f3e0:	4604      	mov	r4, r0
 800f3e2:	460d      	mov	r5, r1
 800f3e4:	e760      	b.n	800f2a8 <__ieee754_rem_pio2+0x1a0>
 800f3e6:	4b1c      	ldr	r3, [pc, #112]	; (800f458 <__ieee754_rem_pio2+0x350>)
 800f3e8:	4598      	cmp	r8, r3
 800f3ea:	dd37      	ble.n	800f45c <__ieee754_rem_pio2+0x354>
 800f3ec:	ee10 2a10 	vmov	r2, s0
 800f3f0:	462b      	mov	r3, r5
 800f3f2:	4620      	mov	r0, r4
 800f3f4:	4629      	mov	r1, r5
 800f3f6:	f7f0 ff4f 	bl	8000298 <__aeabi_dsub>
 800f3fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f3fe:	e9ca 0100 	strd	r0, r1, [sl]
 800f402:	e695      	b.n	800f130 <__ieee754_rem_pio2+0x28>
 800f404:	f3af 8000 	nop.w
 800f408:	54400000 	.word	0x54400000
 800f40c:	3ff921fb 	.word	0x3ff921fb
 800f410:	1a626331 	.word	0x1a626331
 800f414:	3dd0b461 	.word	0x3dd0b461
 800f418:	1a600000 	.word	0x1a600000
 800f41c:	3dd0b461 	.word	0x3dd0b461
 800f420:	2e037073 	.word	0x2e037073
 800f424:	3ba3198a 	.word	0x3ba3198a
 800f428:	6dc9c883 	.word	0x6dc9c883
 800f42c:	3fe45f30 	.word	0x3fe45f30
 800f430:	2e000000 	.word	0x2e000000
 800f434:	3ba3198a 	.word	0x3ba3198a
 800f438:	252049c1 	.word	0x252049c1
 800f43c:	397b839a 	.word	0x397b839a
 800f440:	3fe921fb 	.word	0x3fe921fb
 800f444:	4002d97b 	.word	0x4002d97b
 800f448:	3ff921fb 	.word	0x3ff921fb
 800f44c:	413921fb 	.word	0x413921fb
 800f450:	3fe00000 	.word	0x3fe00000
 800f454:	080111c8 	.word	0x080111c8
 800f458:	7fefffff 	.word	0x7fefffff
 800f45c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800f460:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800f464:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800f468:	4620      	mov	r0, r4
 800f46a:	460d      	mov	r5, r1
 800f46c:	f7f1 fb7c 	bl	8000b68 <__aeabi_d2iz>
 800f470:	f7f1 f860 	bl	8000534 <__aeabi_i2d>
 800f474:	4602      	mov	r2, r0
 800f476:	460b      	mov	r3, r1
 800f478:	4620      	mov	r0, r4
 800f47a:	4629      	mov	r1, r5
 800f47c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f480:	f7f0 ff0a 	bl	8000298 <__aeabi_dsub>
 800f484:	4b21      	ldr	r3, [pc, #132]	; (800f50c <__ieee754_rem_pio2+0x404>)
 800f486:	2200      	movs	r2, #0
 800f488:	f7f1 f8be 	bl	8000608 <__aeabi_dmul>
 800f48c:	460d      	mov	r5, r1
 800f48e:	4604      	mov	r4, r0
 800f490:	f7f1 fb6a 	bl	8000b68 <__aeabi_d2iz>
 800f494:	f7f1 f84e 	bl	8000534 <__aeabi_i2d>
 800f498:	4602      	mov	r2, r0
 800f49a:	460b      	mov	r3, r1
 800f49c:	4620      	mov	r0, r4
 800f49e:	4629      	mov	r1, r5
 800f4a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f4a4:	f7f0 fef8 	bl	8000298 <__aeabi_dsub>
 800f4a8:	4b18      	ldr	r3, [pc, #96]	; (800f50c <__ieee754_rem_pio2+0x404>)
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	f7f1 f8ac 	bl	8000608 <__aeabi_dmul>
 800f4b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f4b4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800f4b8:	2703      	movs	r7, #3
 800f4ba:	2400      	movs	r4, #0
 800f4bc:	2500      	movs	r5, #0
 800f4be:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800f4c2:	4622      	mov	r2, r4
 800f4c4:	462b      	mov	r3, r5
 800f4c6:	46b9      	mov	r9, r7
 800f4c8:	3f01      	subs	r7, #1
 800f4ca:	f7f1 fb05 	bl	8000ad8 <__aeabi_dcmpeq>
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	d1f5      	bne.n	800f4be <__ieee754_rem_pio2+0x3b6>
 800f4d2:	4b0f      	ldr	r3, [pc, #60]	; (800f510 <__ieee754_rem_pio2+0x408>)
 800f4d4:	9301      	str	r3, [sp, #4]
 800f4d6:	2302      	movs	r3, #2
 800f4d8:	9300      	str	r3, [sp, #0]
 800f4da:	4632      	mov	r2, r6
 800f4dc:	464b      	mov	r3, r9
 800f4de:	4651      	mov	r1, sl
 800f4e0:	a804      	add	r0, sp, #16
 800f4e2:	f000 f9a1 	bl	800f828 <__kernel_rem_pio2>
 800f4e6:	9b02      	ldr	r3, [sp, #8]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	4683      	mov	fp, r0
 800f4ec:	f6bf ae4c 	bge.w	800f188 <__ieee754_rem_pio2+0x80>
 800f4f0:	e9da 2100 	ldrd	r2, r1, [sl]
 800f4f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f4f8:	e9ca 2300 	strd	r2, r3, [sl]
 800f4fc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800f500:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f504:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800f508:	e73f      	b.n	800f38a <__ieee754_rem_pio2+0x282>
 800f50a:	bf00      	nop
 800f50c:	41700000 	.word	0x41700000
 800f510:	08011248 	.word	0x08011248
 800f514:	00000000 	.word	0x00000000

0800f518 <scalbn>:
 800f518:	b570      	push	{r4, r5, r6, lr}
 800f51a:	ec55 4b10 	vmov	r4, r5, d0
 800f51e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f522:	4606      	mov	r6, r0
 800f524:	462b      	mov	r3, r5
 800f526:	b999      	cbnz	r1, 800f550 <scalbn+0x38>
 800f528:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f52c:	4323      	orrs	r3, r4
 800f52e:	d03f      	beq.n	800f5b0 <scalbn+0x98>
 800f530:	4b35      	ldr	r3, [pc, #212]	; (800f608 <scalbn+0xf0>)
 800f532:	4629      	mov	r1, r5
 800f534:	ee10 0a10 	vmov	r0, s0
 800f538:	2200      	movs	r2, #0
 800f53a:	f7f1 f865 	bl	8000608 <__aeabi_dmul>
 800f53e:	4b33      	ldr	r3, [pc, #204]	; (800f60c <scalbn+0xf4>)
 800f540:	429e      	cmp	r6, r3
 800f542:	4604      	mov	r4, r0
 800f544:	460d      	mov	r5, r1
 800f546:	da10      	bge.n	800f56a <scalbn+0x52>
 800f548:	a327      	add	r3, pc, #156	; (adr r3, 800f5e8 <scalbn+0xd0>)
 800f54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f54e:	e01f      	b.n	800f590 <scalbn+0x78>
 800f550:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f554:	4291      	cmp	r1, r2
 800f556:	d10c      	bne.n	800f572 <scalbn+0x5a>
 800f558:	ee10 2a10 	vmov	r2, s0
 800f55c:	4620      	mov	r0, r4
 800f55e:	4629      	mov	r1, r5
 800f560:	f7f0 fe9c 	bl	800029c <__adddf3>
 800f564:	4604      	mov	r4, r0
 800f566:	460d      	mov	r5, r1
 800f568:	e022      	b.n	800f5b0 <scalbn+0x98>
 800f56a:	460b      	mov	r3, r1
 800f56c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f570:	3936      	subs	r1, #54	; 0x36
 800f572:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f576:	4296      	cmp	r6, r2
 800f578:	dd0d      	ble.n	800f596 <scalbn+0x7e>
 800f57a:	2d00      	cmp	r5, #0
 800f57c:	a11c      	add	r1, pc, #112	; (adr r1, 800f5f0 <scalbn+0xd8>)
 800f57e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f582:	da02      	bge.n	800f58a <scalbn+0x72>
 800f584:	a11c      	add	r1, pc, #112	; (adr r1, 800f5f8 <scalbn+0xe0>)
 800f586:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f58a:	a319      	add	r3, pc, #100	; (adr r3, 800f5f0 <scalbn+0xd8>)
 800f58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f590:	f7f1 f83a 	bl	8000608 <__aeabi_dmul>
 800f594:	e7e6      	b.n	800f564 <scalbn+0x4c>
 800f596:	1872      	adds	r2, r6, r1
 800f598:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f59c:	428a      	cmp	r2, r1
 800f59e:	dcec      	bgt.n	800f57a <scalbn+0x62>
 800f5a0:	2a00      	cmp	r2, #0
 800f5a2:	dd08      	ble.n	800f5b6 <scalbn+0x9e>
 800f5a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f5a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f5ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f5b0:	ec45 4b10 	vmov	d0, r4, r5
 800f5b4:	bd70      	pop	{r4, r5, r6, pc}
 800f5b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f5ba:	da08      	bge.n	800f5ce <scalbn+0xb6>
 800f5bc:	2d00      	cmp	r5, #0
 800f5be:	a10a      	add	r1, pc, #40	; (adr r1, 800f5e8 <scalbn+0xd0>)
 800f5c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5c4:	dac0      	bge.n	800f548 <scalbn+0x30>
 800f5c6:	a10e      	add	r1, pc, #56	; (adr r1, 800f600 <scalbn+0xe8>)
 800f5c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5cc:	e7bc      	b.n	800f548 <scalbn+0x30>
 800f5ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f5d2:	3236      	adds	r2, #54	; 0x36
 800f5d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f5d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f5dc:	4620      	mov	r0, r4
 800f5de:	4b0c      	ldr	r3, [pc, #48]	; (800f610 <scalbn+0xf8>)
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	e7d5      	b.n	800f590 <scalbn+0x78>
 800f5e4:	f3af 8000 	nop.w
 800f5e8:	c2f8f359 	.word	0xc2f8f359
 800f5ec:	01a56e1f 	.word	0x01a56e1f
 800f5f0:	8800759c 	.word	0x8800759c
 800f5f4:	7e37e43c 	.word	0x7e37e43c
 800f5f8:	8800759c 	.word	0x8800759c
 800f5fc:	fe37e43c 	.word	0xfe37e43c
 800f600:	c2f8f359 	.word	0xc2f8f359
 800f604:	81a56e1f 	.word	0x81a56e1f
 800f608:	43500000 	.word	0x43500000
 800f60c:	ffff3cb0 	.word	0xffff3cb0
 800f610:	3c900000 	.word	0x3c900000

0800f614 <with_errno>:
 800f614:	b570      	push	{r4, r5, r6, lr}
 800f616:	4604      	mov	r4, r0
 800f618:	460d      	mov	r5, r1
 800f61a:	4616      	mov	r6, r2
 800f61c:	f7fb fea6 	bl	800b36c <__errno>
 800f620:	4629      	mov	r1, r5
 800f622:	6006      	str	r6, [r0, #0]
 800f624:	4620      	mov	r0, r4
 800f626:	bd70      	pop	{r4, r5, r6, pc}

0800f628 <xflow>:
 800f628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f62a:	4614      	mov	r4, r2
 800f62c:	461d      	mov	r5, r3
 800f62e:	b108      	cbz	r0, 800f634 <xflow+0xc>
 800f630:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f634:	e9cd 2300 	strd	r2, r3, [sp]
 800f638:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f63c:	4620      	mov	r0, r4
 800f63e:	4629      	mov	r1, r5
 800f640:	f7f0 ffe2 	bl	8000608 <__aeabi_dmul>
 800f644:	2222      	movs	r2, #34	; 0x22
 800f646:	b003      	add	sp, #12
 800f648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f64c:	f7ff bfe2 	b.w	800f614 <with_errno>

0800f650 <__math_uflow>:
 800f650:	b508      	push	{r3, lr}
 800f652:	2200      	movs	r2, #0
 800f654:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f658:	f7ff ffe6 	bl	800f628 <xflow>
 800f65c:	ec41 0b10 	vmov	d0, r0, r1
 800f660:	bd08      	pop	{r3, pc}

0800f662 <__math_oflow>:
 800f662:	b508      	push	{r3, lr}
 800f664:	2200      	movs	r2, #0
 800f666:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f66a:	f7ff ffdd 	bl	800f628 <xflow>
 800f66e:	ec41 0b10 	vmov	d0, r0, r1
 800f672:	bd08      	pop	{r3, pc}

0800f674 <__ieee754_sqrt>:
 800f674:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f678:	ec55 4b10 	vmov	r4, r5, d0
 800f67c:	4e67      	ldr	r6, [pc, #412]	; (800f81c <__ieee754_sqrt+0x1a8>)
 800f67e:	43ae      	bics	r6, r5
 800f680:	ee10 0a10 	vmov	r0, s0
 800f684:	ee10 2a10 	vmov	r2, s0
 800f688:	4629      	mov	r1, r5
 800f68a:	462b      	mov	r3, r5
 800f68c:	d10d      	bne.n	800f6aa <__ieee754_sqrt+0x36>
 800f68e:	f7f0 ffbb 	bl	8000608 <__aeabi_dmul>
 800f692:	4602      	mov	r2, r0
 800f694:	460b      	mov	r3, r1
 800f696:	4620      	mov	r0, r4
 800f698:	4629      	mov	r1, r5
 800f69a:	f7f0 fdff 	bl	800029c <__adddf3>
 800f69e:	4604      	mov	r4, r0
 800f6a0:	460d      	mov	r5, r1
 800f6a2:	ec45 4b10 	vmov	d0, r4, r5
 800f6a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6aa:	2d00      	cmp	r5, #0
 800f6ac:	dc0b      	bgt.n	800f6c6 <__ieee754_sqrt+0x52>
 800f6ae:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f6b2:	4326      	orrs	r6, r4
 800f6b4:	d0f5      	beq.n	800f6a2 <__ieee754_sqrt+0x2e>
 800f6b6:	b135      	cbz	r5, 800f6c6 <__ieee754_sqrt+0x52>
 800f6b8:	f7f0 fdee 	bl	8000298 <__aeabi_dsub>
 800f6bc:	4602      	mov	r2, r0
 800f6be:	460b      	mov	r3, r1
 800f6c0:	f7f1 f8cc 	bl	800085c <__aeabi_ddiv>
 800f6c4:	e7eb      	b.n	800f69e <__ieee754_sqrt+0x2a>
 800f6c6:	1509      	asrs	r1, r1, #20
 800f6c8:	f000 808d 	beq.w	800f7e6 <__ieee754_sqrt+0x172>
 800f6cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f6d0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800f6d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f6d8:	07c9      	lsls	r1, r1, #31
 800f6da:	bf5c      	itt	pl
 800f6dc:	005b      	lslpl	r3, r3, #1
 800f6de:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800f6e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f6e6:	bf58      	it	pl
 800f6e8:	0052      	lslpl	r2, r2, #1
 800f6ea:	2500      	movs	r5, #0
 800f6ec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f6f0:	1076      	asrs	r6, r6, #1
 800f6f2:	0052      	lsls	r2, r2, #1
 800f6f4:	f04f 0e16 	mov.w	lr, #22
 800f6f8:	46ac      	mov	ip, r5
 800f6fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f6fe:	eb0c 0001 	add.w	r0, ip, r1
 800f702:	4298      	cmp	r0, r3
 800f704:	bfde      	ittt	le
 800f706:	1a1b      	suble	r3, r3, r0
 800f708:	eb00 0c01 	addle.w	ip, r0, r1
 800f70c:	186d      	addle	r5, r5, r1
 800f70e:	005b      	lsls	r3, r3, #1
 800f710:	f1be 0e01 	subs.w	lr, lr, #1
 800f714:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f718:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f71c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f720:	d1ed      	bne.n	800f6fe <__ieee754_sqrt+0x8a>
 800f722:	4674      	mov	r4, lr
 800f724:	2720      	movs	r7, #32
 800f726:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f72a:	4563      	cmp	r3, ip
 800f72c:	eb01 000e 	add.w	r0, r1, lr
 800f730:	dc02      	bgt.n	800f738 <__ieee754_sqrt+0xc4>
 800f732:	d113      	bne.n	800f75c <__ieee754_sqrt+0xe8>
 800f734:	4290      	cmp	r0, r2
 800f736:	d811      	bhi.n	800f75c <__ieee754_sqrt+0xe8>
 800f738:	2800      	cmp	r0, #0
 800f73a:	eb00 0e01 	add.w	lr, r0, r1
 800f73e:	da57      	bge.n	800f7f0 <__ieee754_sqrt+0x17c>
 800f740:	f1be 0f00 	cmp.w	lr, #0
 800f744:	db54      	blt.n	800f7f0 <__ieee754_sqrt+0x17c>
 800f746:	f10c 0801 	add.w	r8, ip, #1
 800f74a:	eba3 030c 	sub.w	r3, r3, ip
 800f74e:	4290      	cmp	r0, r2
 800f750:	bf88      	it	hi
 800f752:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f756:	1a12      	subs	r2, r2, r0
 800f758:	440c      	add	r4, r1
 800f75a:	46c4      	mov	ip, r8
 800f75c:	005b      	lsls	r3, r3, #1
 800f75e:	3f01      	subs	r7, #1
 800f760:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f764:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f768:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f76c:	d1dd      	bne.n	800f72a <__ieee754_sqrt+0xb6>
 800f76e:	4313      	orrs	r3, r2
 800f770:	d01b      	beq.n	800f7aa <__ieee754_sqrt+0x136>
 800f772:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800f820 <__ieee754_sqrt+0x1ac>
 800f776:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800f824 <__ieee754_sqrt+0x1b0>
 800f77a:	e9da 0100 	ldrd	r0, r1, [sl]
 800f77e:	e9db 2300 	ldrd	r2, r3, [fp]
 800f782:	f7f0 fd89 	bl	8000298 <__aeabi_dsub>
 800f786:	e9da 8900 	ldrd	r8, r9, [sl]
 800f78a:	4602      	mov	r2, r0
 800f78c:	460b      	mov	r3, r1
 800f78e:	4640      	mov	r0, r8
 800f790:	4649      	mov	r1, r9
 800f792:	f7f1 f9b5 	bl	8000b00 <__aeabi_dcmple>
 800f796:	b140      	cbz	r0, 800f7aa <__ieee754_sqrt+0x136>
 800f798:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f79c:	e9da 0100 	ldrd	r0, r1, [sl]
 800f7a0:	e9db 2300 	ldrd	r2, r3, [fp]
 800f7a4:	d126      	bne.n	800f7f4 <__ieee754_sqrt+0x180>
 800f7a6:	3501      	adds	r5, #1
 800f7a8:	463c      	mov	r4, r7
 800f7aa:	106a      	asrs	r2, r5, #1
 800f7ac:	0863      	lsrs	r3, r4, #1
 800f7ae:	07e9      	lsls	r1, r5, #31
 800f7b0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f7b4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f7b8:	bf48      	it	mi
 800f7ba:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f7be:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800f7c2:	461c      	mov	r4, r3
 800f7c4:	e76d      	b.n	800f6a2 <__ieee754_sqrt+0x2e>
 800f7c6:	0ad3      	lsrs	r3, r2, #11
 800f7c8:	3815      	subs	r0, #21
 800f7ca:	0552      	lsls	r2, r2, #21
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d0fa      	beq.n	800f7c6 <__ieee754_sqrt+0x152>
 800f7d0:	02dc      	lsls	r4, r3, #11
 800f7d2:	d50a      	bpl.n	800f7ea <__ieee754_sqrt+0x176>
 800f7d4:	f1c1 0420 	rsb	r4, r1, #32
 800f7d8:	fa22 f404 	lsr.w	r4, r2, r4
 800f7dc:	1e4d      	subs	r5, r1, #1
 800f7de:	408a      	lsls	r2, r1
 800f7e0:	4323      	orrs	r3, r4
 800f7e2:	1b41      	subs	r1, r0, r5
 800f7e4:	e772      	b.n	800f6cc <__ieee754_sqrt+0x58>
 800f7e6:	4608      	mov	r0, r1
 800f7e8:	e7f0      	b.n	800f7cc <__ieee754_sqrt+0x158>
 800f7ea:	005b      	lsls	r3, r3, #1
 800f7ec:	3101      	adds	r1, #1
 800f7ee:	e7ef      	b.n	800f7d0 <__ieee754_sqrt+0x15c>
 800f7f0:	46e0      	mov	r8, ip
 800f7f2:	e7aa      	b.n	800f74a <__ieee754_sqrt+0xd6>
 800f7f4:	f7f0 fd52 	bl	800029c <__adddf3>
 800f7f8:	e9da 8900 	ldrd	r8, r9, [sl]
 800f7fc:	4602      	mov	r2, r0
 800f7fe:	460b      	mov	r3, r1
 800f800:	4640      	mov	r0, r8
 800f802:	4649      	mov	r1, r9
 800f804:	f7f1 f972 	bl	8000aec <__aeabi_dcmplt>
 800f808:	b120      	cbz	r0, 800f814 <__ieee754_sqrt+0x1a0>
 800f80a:	1ca0      	adds	r0, r4, #2
 800f80c:	bf08      	it	eq
 800f80e:	3501      	addeq	r5, #1
 800f810:	3402      	adds	r4, #2
 800f812:	e7ca      	b.n	800f7aa <__ieee754_sqrt+0x136>
 800f814:	3401      	adds	r4, #1
 800f816:	f024 0401 	bic.w	r4, r4, #1
 800f81a:	e7c6      	b.n	800f7aa <__ieee754_sqrt+0x136>
 800f81c:	7ff00000 	.word	0x7ff00000
 800f820:	20001440 	.word	0x20001440
 800f824:	20001448 	.word	0x20001448

0800f828 <__kernel_rem_pio2>:
 800f828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f82c:	ed2d 8b02 	vpush	{d8}
 800f830:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800f834:	f112 0f14 	cmn.w	r2, #20
 800f838:	9306      	str	r3, [sp, #24]
 800f83a:	9104      	str	r1, [sp, #16]
 800f83c:	4bc2      	ldr	r3, [pc, #776]	; (800fb48 <__kernel_rem_pio2+0x320>)
 800f83e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800f840:	9009      	str	r0, [sp, #36]	; 0x24
 800f842:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f846:	9300      	str	r3, [sp, #0]
 800f848:	9b06      	ldr	r3, [sp, #24]
 800f84a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f84e:	bfa8      	it	ge
 800f850:	1ed4      	subge	r4, r2, #3
 800f852:	9305      	str	r3, [sp, #20]
 800f854:	bfb2      	itee	lt
 800f856:	2400      	movlt	r4, #0
 800f858:	2318      	movge	r3, #24
 800f85a:	fb94 f4f3 	sdivge	r4, r4, r3
 800f85e:	f06f 0317 	mvn.w	r3, #23
 800f862:	fb04 3303 	mla	r3, r4, r3, r3
 800f866:	eb03 0a02 	add.w	sl, r3, r2
 800f86a:	9b00      	ldr	r3, [sp, #0]
 800f86c:	9a05      	ldr	r2, [sp, #20]
 800f86e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800fb38 <__kernel_rem_pio2+0x310>
 800f872:	eb03 0802 	add.w	r8, r3, r2
 800f876:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f878:	1aa7      	subs	r7, r4, r2
 800f87a:	ae20      	add	r6, sp, #128	; 0x80
 800f87c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f880:	2500      	movs	r5, #0
 800f882:	4545      	cmp	r5, r8
 800f884:	dd13      	ble.n	800f8ae <__kernel_rem_pio2+0x86>
 800f886:	9b06      	ldr	r3, [sp, #24]
 800f888:	aa20      	add	r2, sp, #128	; 0x80
 800f88a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f88e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800f892:	f04f 0800 	mov.w	r8, #0
 800f896:	9b00      	ldr	r3, [sp, #0]
 800f898:	4598      	cmp	r8, r3
 800f89a:	dc31      	bgt.n	800f900 <__kernel_rem_pio2+0xd8>
 800f89c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800fb38 <__kernel_rem_pio2+0x310>
 800f8a0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f8a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f8a8:	462f      	mov	r7, r5
 800f8aa:	2600      	movs	r6, #0
 800f8ac:	e01b      	b.n	800f8e6 <__kernel_rem_pio2+0xbe>
 800f8ae:	42ef      	cmn	r7, r5
 800f8b0:	d407      	bmi.n	800f8c2 <__kernel_rem_pio2+0x9a>
 800f8b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f8b6:	f7f0 fe3d 	bl	8000534 <__aeabi_i2d>
 800f8ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f8be:	3501      	adds	r5, #1
 800f8c0:	e7df      	b.n	800f882 <__kernel_rem_pio2+0x5a>
 800f8c2:	ec51 0b18 	vmov	r0, r1, d8
 800f8c6:	e7f8      	b.n	800f8ba <__kernel_rem_pio2+0x92>
 800f8c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f8d0:	f7f0 fe9a 	bl	8000608 <__aeabi_dmul>
 800f8d4:	4602      	mov	r2, r0
 800f8d6:	460b      	mov	r3, r1
 800f8d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8dc:	f7f0 fcde 	bl	800029c <__adddf3>
 800f8e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8e4:	3601      	adds	r6, #1
 800f8e6:	9b05      	ldr	r3, [sp, #20]
 800f8e8:	429e      	cmp	r6, r3
 800f8ea:	f1a7 0708 	sub.w	r7, r7, #8
 800f8ee:	ddeb      	ble.n	800f8c8 <__kernel_rem_pio2+0xa0>
 800f8f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f8f4:	f108 0801 	add.w	r8, r8, #1
 800f8f8:	ecab 7b02 	vstmia	fp!, {d7}
 800f8fc:	3508      	adds	r5, #8
 800f8fe:	e7ca      	b.n	800f896 <__kernel_rem_pio2+0x6e>
 800f900:	9b00      	ldr	r3, [sp, #0]
 800f902:	aa0c      	add	r2, sp, #48	; 0x30
 800f904:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f908:	930b      	str	r3, [sp, #44]	; 0x2c
 800f90a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f90c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f910:	9c00      	ldr	r4, [sp, #0]
 800f912:	930a      	str	r3, [sp, #40]	; 0x28
 800f914:	00e3      	lsls	r3, r4, #3
 800f916:	9308      	str	r3, [sp, #32]
 800f918:	ab98      	add	r3, sp, #608	; 0x260
 800f91a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f91e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f922:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800f926:	ab70      	add	r3, sp, #448	; 0x1c0
 800f928:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800f92c:	46c3      	mov	fp, r8
 800f92e:	46a1      	mov	r9, r4
 800f930:	f1b9 0f00 	cmp.w	r9, #0
 800f934:	f1a5 0508 	sub.w	r5, r5, #8
 800f938:	dc77      	bgt.n	800fa2a <__kernel_rem_pio2+0x202>
 800f93a:	ec47 6b10 	vmov	d0, r6, r7
 800f93e:	4650      	mov	r0, sl
 800f940:	f7ff fdea 	bl	800f518 <scalbn>
 800f944:	ec57 6b10 	vmov	r6, r7, d0
 800f948:	2200      	movs	r2, #0
 800f94a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f94e:	ee10 0a10 	vmov	r0, s0
 800f952:	4639      	mov	r1, r7
 800f954:	f7f0 fe58 	bl	8000608 <__aeabi_dmul>
 800f958:	ec41 0b10 	vmov	d0, r0, r1
 800f95c:	f000 fab4 	bl	800fec8 <floor>
 800f960:	4b7a      	ldr	r3, [pc, #488]	; (800fb4c <__kernel_rem_pio2+0x324>)
 800f962:	ec51 0b10 	vmov	r0, r1, d0
 800f966:	2200      	movs	r2, #0
 800f968:	f7f0 fe4e 	bl	8000608 <__aeabi_dmul>
 800f96c:	4602      	mov	r2, r0
 800f96e:	460b      	mov	r3, r1
 800f970:	4630      	mov	r0, r6
 800f972:	4639      	mov	r1, r7
 800f974:	f7f0 fc90 	bl	8000298 <__aeabi_dsub>
 800f978:	460f      	mov	r7, r1
 800f97a:	4606      	mov	r6, r0
 800f97c:	f7f1 f8f4 	bl	8000b68 <__aeabi_d2iz>
 800f980:	9002      	str	r0, [sp, #8]
 800f982:	f7f0 fdd7 	bl	8000534 <__aeabi_i2d>
 800f986:	4602      	mov	r2, r0
 800f988:	460b      	mov	r3, r1
 800f98a:	4630      	mov	r0, r6
 800f98c:	4639      	mov	r1, r7
 800f98e:	f7f0 fc83 	bl	8000298 <__aeabi_dsub>
 800f992:	f1ba 0f00 	cmp.w	sl, #0
 800f996:	4606      	mov	r6, r0
 800f998:	460f      	mov	r7, r1
 800f99a:	dd6d      	ble.n	800fa78 <__kernel_rem_pio2+0x250>
 800f99c:	1e61      	subs	r1, r4, #1
 800f99e:	ab0c      	add	r3, sp, #48	; 0x30
 800f9a0:	9d02      	ldr	r5, [sp, #8]
 800f9a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f9a6:	f1ca 0018 	rsb	r0, sl, #24
 800f9aa:	fa43 f200 	asr.w	r2, r3, r0
 800f9ae:	4415      	add	r5, r2
 800f9b0:	4082      	lsls	r2, r0
 800f9b2:	1a9b      	subs	r3, r3, r2
 800f9b4:	aa0c      	add	r2, sp, #48	; 0x30
 800f9b6:	9502      	str	r5, [sp, #8]
 800f9b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f9bc:	f1ca 0217 	rsb	r2, sl, #23
 800f9c0:	fa43 fb02 	asr.w	fp, r3, r2
 800f9c4:	f1bb 0f00 	cmp.w	fp, #0
 800f9c8:	dd65      	ble.n	800fa96 <__kernel_rem_pio2+0x26e>
 800f9ca:	9b02      	ldr	r3, [sp, #8]
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	3301      	adds	r3, #1
 800f9d0:	9302      	str	r3, [sp, #8]
 800f9d2:	4615      	mov	r5, r2
 800f9d4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f9d8:	4294      	cmp	r4, r2
 800f9da:	f300 809f 	bgt.w	800fb1c <__kernel_rem_pio2+0x2f4>
 800f9de:	f1ba 0f00 	cmp.w	sl, #0
 800f9e2:	dd07      	ble.n	800f9f4 <__kernel_rem_pio2+0x1cc>
 800f9e4:	f1ba 0f01 	cmp.w	sl, #1
 800f9e8:	f000 80c1 	beq.w	800fb6e <__kernel_rem_pio2+0x346>
 800f9ec:	f1ba 0f02 	cmp.w	sl, #2
 800f9f0:	f000 80c7 	beq.w	800fb82 <__kernel_rem_pio2+0x35a>
 800f9f4:	f1bb 0f02 	cmp.w	fp, #2
 800f9f8:	d14d      	bne.n	800fa96 <__kernel_rem_pio2+0x26e>
 800f9fa:	4632      	mov	r2, r6
 800f9fc:	463b      	mov	r3, r7
 800f9fe:	4954      	ldr	r1, [pc, #336]	; (800fb50 <__kernel_rem_pio2+0x328>)
 800fa00:	2000      	movs	r0, #0
 800fa02:	f7f0 fc49 	bl	8000298 <__aeabi_dsub>
 800fa06:	4606      	mov	r6, r0
 800fa08:	460f      	mov	r7, r1
 800fa0a:	2d00      	cmp	r5, #0
 800fa0c:	d043      	beq.n	800fa96 <__kernel_rem_pio2+0x26e>
 800fa0e:	4650      	mov	r0, sl
 800fa10:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800fb40 <__kernel_rem_pio2+0x318>
 800fa14:	f7ff fd80 	bl	800f518 <scalbn>
 800fa18:	4630      	mov	r0, r6
 800fa1a:	4639      	mov	r1, r7
 800fa1c:	ec53 2b10 	vmov	r2, r3, d0
 800fa20:	f7f0 fc3a 	bl	8000298 <__aeabi_dsub>
 800fa24:	4606      	mov	r6, r0
 800fa26:	460f      	mov	r7, r1
 800fa28:	e035      	b.n	800fa96 <__kernel_rem_pio2+0x26e>
 800fa2a:	4b4a      	ldr	r3, [pc, #296]	; (800fb54 <__kernel_rem_pio2+0x32c>)
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	4630      	mov	r0, r6
 800fa30:	4639      	mov	r1, r7
 800fa32:	f7f0 fde9 	bl	8000608 <__aeabi_dmul>
 800fa36:	f7f1 f897 	bl	8000b68 <__aeabi_d2iz>
 800fa3a:	f7f0 fd7b 	bl	8000534 <__aeabi_i2d>
 800fa3e:	4602      	mov	r2, r0
 800fa40:	460b      	mov	r3, r1
 800fa42:	ec43 2b18 	vmov	d8, r2, r3
 800fa46:	4b44      	ldr	r3, [pc, #272]	; (800fb58 <__kernel_rem_pio2+0x330>)
 800fa48:	2200      	movs	r2, #0
 800fa4a:	f7f0 fddd 	bl	8000608 <__aeabi_dmul>
 800fa4e:	4602      	mov	r2, r0
 800fa50:	460b      	mov	r3, r1
 800fa52:	4630      	mov	r0, r6
 800fa54:	4639      	mov	r1, r7
 800fa56:	f7f0 fc1f 	bl	8000298 <__aeabi_dsub>
 800fa5a:	f7f1 f885 	bl	8000b68 <__aeabi_d2iz>
 800fa5e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fa62:	f84b 0b04 	str.w	r0, [fp], #4
 800fa66:	ec51 0b18 	vmov	r0, r1, d8
 800fa6a:	f7f0 fc17 	bl	800029c <__adddf3>
 800fa6e:	f109 39ff 	add.w	r9, r9, #4294967295
 800fa72:	4606      	mov	r6, r0
 800fa74:	460f      	mov	r7, r1
 800fa76:	e75b      	b.n	800f930 <__kernel_rem_pio2+0x108>
 800fa78:	d106      	bne.n	800fa88 <__kernel_rem_pio2+0x260>
 800fa7a:	1e63      	subs	r3, r4, #1
 800fa7c:	aa0c      	add	r2, sp, #48	; 0x30
 800fa7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa82:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800fa86:	e79d      	b.n	800f9c4 <__kernel_rem_pio2+0x19c>
 800fa88:	4b34      	ldr	r3, [pc, #208]	; (800fb5c <__kernel_rem_pio2+0x334>)
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	f7f1 f842 	bl	8000b14 <__aeabi_dcmpge>
 800fa90:	2800      	cmp	r0, #0
 800fa92:	d140      	bne.n	800fb16 <__kernel_rem_pio2+0x2ee>
 800fa94:	4683      	mov	fp, r0
 800fa96:	2200      	movs	r2, #0
 800fa98:	2300      	movs	r3, #0
 800fa9a:	4630      	mov	r0, r6
 800fa9c:	4639      	mov	r1, r7
 800fa9e:	f7f1 f81b 	bl	8000ad8 <__aeabi_dcmpeq>
 800faa2:	2800      	cmp	r0, #0
 800faa4:	f000 80c1 	beq.w	800fc2a <__kernel_rem_pio2+0x402>
 800faa8:	1e65      	subs	r5, r4, #1
 800faaa:	462b      	mov	r3, r5
 800faac:	2200      	movs	r2, #0
 800faae:	9900      	ldr	r1, [sp, #0]
 800fab0:	428b      	cmp	r3, r1
 800fab2:	da6d      	bge.n	800fb90 <__kernel_rem_pio2+0x368>
 800fab4:	2a00      	cmp	r2, #0
 800fab6:	f000 808a 	beq.w	800fbce <__kernel_rem_pio2+0x3a6>
 800faba:	ab0c      	add	r3, sp, #48	; 0x30
 800fabc:	f1aa 0a18 	sub.w	sl, sl, #24
 800fac0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	f000 80ae 	beq.w	800fc26 <__kernel_rem_pio2+0x3fe>
 800faca:	4650      	mov	r0, sl
 800facc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800fb40 <__kernel_rem_pio2+0x318>
 800fad0:	f7ff fd22 	bl	800f518 <scalbn>
 800fad4:	1c6b      	adds	r3, r5, #1
 800fad6:	00da      	lsls	r2, r3, #3
 800fad8:	9205      	str	r2, [sp, #20]
 800fada:	ec57 6b10 	vmov	r6, r7, d0
 800fade:	aa70      	add	r2, sp, #448	; 0x1c0
 800fae0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800fb54 <__kernel_rem_pio2+0x32c>
 800fae4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800fae8:	462c      	mov	r4, r5
 800faea:	f04f 0800 	mov.w	r8, #0
 800faee:	2c00      	cmp	r4, #0
 800faf0:	f280 80d4 	bge.w	800fc9c <__kernel_rem_pio2+0x474>
 800faf4:	462c      	mov	r4, r5
 800faf6:	2c00      	cmp	r4, #0
 800faf8:	f2c0 8102 	blt.w	800fd00 <__kernel_rem_pio2+0x4d8>
 800fafc:	4b18      	ldr	r3, [pc, #96]	; (800fb60 <__kernel_rem_pio2+0x338>)
 800fafe:	461e      	mov	r6, r3
 800fb00:	ab70      	add	r3, sp, #448	; 0x1c0
 800fb02:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800fb06:	1b2b      	subs	r3, r5, r4
 800fb08:	f04f 0900 	mov.w	r9, #0
 800fb0c:	f04f 0a00 	mov.w	sl, #0
 800fb10:	2700      	movs	r7, #0
 800fb12:	9306      	str	r3, [sp, #24]
 800fb14:	e0e6      	b.n	800fce4 <__kernel_rem_pio2+0x4bc>
 800fb16:	f04f 0b02 	mov.w	fp, #2
 800fb1a:	e756      	b.n	800f9ca <__kernel_rem_pio2+0x1a2>
 800fb1c:	f8d8 3000 	ldr.w	r3, [r8]
 800fb20:	bb05      	cbnz	r5, 800fb64 <__kernel_rem_pio2+0x33c>
 800fb22:	b123      	cbz	r3, 800fb2e <__kernel_rem_pio2+0x306>
 800fb24:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800fb28:	f8c8 3000 	str.w	r3, [r8]
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	3201      	adds	r2, #1
 800fb30:	f108 0804 	add.w	r8, r8, #4
 800fb34:	461d      	mov	r5, r3
 800fb36:	e74f      	b.n	800f9d8 <__kernel_rem_pio2+0x1b0>
	...
 800fb44:	3ff00000 	.word	0x3ff00000
 800fb48:	08011390 	.word	0x08011390
 800fb4c:	40200000 	.word	0x40200000
 800fb50:	3ff00000 	.word	0x3ff00000
 800fb54:	3e700000 	.word	0x3e700000
 800fb58:	41700000 	.word	0x41700000
 800fb5c:	3fe00000 	.word	0x3fe00000
 800fb60:	08011350 	.word	0x08011350
 800fb64:	1acb      	subs	r3, r1, r3
 800fb66:	f8c8 3000 	str.w	r3, [r8]
 800fb6a:	462b      	mov	r3, r5
 800fb6c:	e7df      	b.n	800fb2e <__kernel_rem_pio2+0x306>
 800fb6e:	1e62      	subs	r2, r4, #1
 800fb70:	ab0c      	add	r3, sp, #48	; 0x30
 800fb72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb76:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fb7a:	a90c      	add	r1, sp, #48	; 0x30
 800fb7c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fb80:	e738      	b.n	800f9f4 <__kernel_rem_pio2+0x1cc>
 800fb82:	1e62      	subs	r2, r4, #1
 800fb84:	ab0c      	add	r3, sp, #48	; 0x30
 800fb86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb8a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fb8e:	e7f4      	b.n	800fb7a <__kernel_rem_pio2+0x352>
 800fb90:	a90c      	add	r1, sp, #48	; 0x30
 800fb92:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fb96:	3b01      	subs	r3, #1
 800fb98:	430a      	orrs	r2, r1
 800fb9a:	e788      	b.n	800faae <__kernel_rem_pio2+0x286>
 800fb9c:	3301      	adds	r3, #1
 800fb9e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800fba2:	2900      	cmp	r1, #0
 800fba4:	d0fa      	beq.n	800fb9c <__kernel_rem_pio2+0x374>
 800fba6:	9a08      	ldr	r2, [sp, #32]
 800fba8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800fbac:	446a      	add	r2, sp
 800fbae:	3a98      	subs	r2, #152	; 0x98
 800fbb0:	9208      	str	r2, [sp, #32]
 800fbb2:	9a06      	ldr	r2, [sp, #24]
 800fbb4:	a920      	add	r1, sp, #128	; 0x80
 800fbb6:	18a2      	adds	r2, r4, r2
 800fbb8:	18e3      	adds	r3, r4, r3
 800fbba:	f104 0801 	add.w	r8, r4, #1
 800fbbe:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800fbc2:	9302      	str	r3, [sp, #8]
 800fbc4:	9b02      	ldr	r3, [sp, #8]
 800fbc6:	4543      	cmp	r3, r8
 800fbc8:	da04      	bge.n	800fbd4 <__kernel_rem_pio2+0x3ac>
 800fbca:	461c      	mov	r4, r3
 800fbcc:	e6a2      	b.n	800f914 <__kernel_rem_pio2+0xec>
 800fbce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fbd0:	2301      	movs	r3, #1
 800fbd2:	e7e4      	b.n	800fb9e <__kernel_rem_pio2+0x376>
 800fbd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbd6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800fbda:	f7f0 fcab 	bl	8000534 <__aeabi_i2d>
 800fbde:	e8e5 0102 	strd	r0, r1, [r5], #8
 800fbe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbe4:	46ab      	mov	fp, r5
 800fbe6:	461c      	mov	r4, r3
 800fbe8:	f04f 0900 	mov.w	r9, #0
 800fbec:	2600      	movs	r6, #0
 800fbee:	2700      	movs	r7, #0
 800fbf0:	9b05      	ldr	r3, [sp, #20]
 800fbf2:	4599      	cmp	r9, r3
 800fbf4:	dd06      	ble.n	800fc04 <__kernel_rem_pio2+0x3dc>
 800fbf6:	9b08      	ldr	r3, [sp, #32]
 800fbf8:	e8e3 6702 	strd	r6, r7, [r3], #8
 800fbfc:	f108 0801 	add.w	r8, r8, #1
 800fc00:	9308      	str	r3, [sp, #32]
 800fc02:	e7df      	b.n	800fbc4 <__kernel_rem_pio2+0x39c>
 800fc04:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800fc08:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800fc0c:	f7f0 fcfc 	bl	8000608 <__aeabi_dmul>
 800fc10:	4602      	mov	r2, r0
 800fc12:	460b      	mov	r3, r1
 800fc14:	4630      	mov	r0, r6
 800fc16:	4639      	mov	r1, r7
 800fc18:	f7f0 fb40 	bl	800029c <__adddf3>
 800fc1c:	f109 0901 	add.w	r9, r9, #1
 800fc20:	4606      	mov	r6, r0
 800fc22:	460f      	mov	r7, r1
 800fc24:	e7e4      	b.n	800fbf0 <__kernel_rem_pio2+0x3c8>
 800fc26:	3d01      	subs	r5, #1
 800fc28:	e747      	b.n	800faba <__kernel_rem_pio2+0x292>
 800fc2a:	ec47 6b10 	vmov	d0, r6, r7
 800fc2e:	f1ca 0000 	rsb	r0, sl, #0
 800fc32:	f7ff fc71 	bl	800f518 <scalbn>
 800fc36:	ec57 6b10 	vmov	r6, r7, d0
 800fc3a:	4ba0      	ldr	r3, [pc, #640]	; (800febc <__kernel_rem_pio2+0x694>)
 800fc3c:	ee10 0a10 	vmov	r0, s0
 800fc40:	2200      	movs	r2, #0
 800fc42:	4639      	mov	r1, r7
 800fc44:	f7f0 ff66 	bl	8000b14 <__aeabi_dcmpge>
 800fc48:	b1f8      	cbz	r0, 800fc8a <__kernel_rem_pio2+0x462>
 800fc4a:	4b9d      	ldr	r3, [pc, #628]	; (800fec0 <__kernel_rem_pio2+0x698>)
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	4630      	mov	r0, r6
 800fc50:	4639      	mov	r1, r7
 800fc52:	f7f0 fcd9 	bl	8000608 <__aeabi_dmul>
 800fc56:	f7f0 ff87 	bl	8000b68 <__aeabi_d2iz>
 800fc5a:	4680      	mov	r8, r0
 800fc5c:	f7f0 fc6a 	bl	8000534 <__aeabi_i2d>
 800fc60:	4b96      	ldr	r3, [pc, #600]	; (800febc <__kernel_rem_pio2+0x694>)
 800fc62:	2200      	movs	r2, #0
 800fc64:	f7f0 fcd0 	bl	8000608 <__aeabi_dmul>
 800fc68:	460b      	mov	r3, r1
 800fc6a:	4602      	mov	r2, r0
 800fc6c:	4639      	mov	r1, r7
 800fc6e:	4630      	mov	r0, r6
 800fc70:	f7f0 fb12 	bl	8000298 <__aeabi_dsub>
 800fc74:	f7f0 ff78 	bl	8000b68 <__aeabi_d2iz>
 800fc78:	1c65      	adds	r5, r4, #1
 800fc7a:	ab0c      	add	r3, sp, #48	; 0x30
 800fc7c:	f10a 0a18 	add.w	sl, sl, #24
 800fc80:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fc84:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800fc88:	e71f      	b.n	800faca <__kernel_rem_pio2+0x2a2>
 800fc8a:	4630      	mov	r0, r6
 800fc8c:	4639      	mov	r1, r7
 800fc8e:	f7f0 ff6b 	bl	8000b68 <__aeabi_d2iz>
 800fc92:	ab0c      	add	r3, sp, #48	; 0x30
 800fc94:	4625      	mov	r5, r4
 800fc96:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fc9a:	e716      	b.n	800faca <__kernel_rem_pio2+0x2a2>
 800fc9c:	ab0c      	add	r3, sp, #48	; 0x30
 800fc9e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fca2:	f7f0 fc47 	bl	8000534 <__aeabi_i2d>
 800fca6:	4632      	mov	r2, r6
 800fca8:	463b      	mov	r3, r7
 800fcaa:	f7f0 fcad 	bl	8000608 <__aeabi_dmul>
 800fcae:	4642      	mov	r2, r8
 800fcb0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800fcb4:	464b      	mov	r3, r9
 800fcb6:	4630      	mov	r0, r6
 800fcb8:	4639      	mov	r1, r7
 800fcba:	f7f0 fca5 	bl	8000608 <__aeabi_dmul>
 800fcbe:	3c01      	subs	r4, #1
 800fcc0:	4606      	mov	r6, r0
 800fcc2:	460f      	mov	r7, r1
 800fcc4:	e713      	b.n	800faee <__kernel_rem_pio2+0x2c6>
 800fcc6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800fcca:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800fcce:	f7f0 fc9b 	bl	8000608 <__aeabi_dmul>
 800fcd2:	4602      	mov	r2, r0
 800fcd4:	460b      	mov	r3, r1
 800fcd6:	4648      	mov	r0, r9
 800fcd8:	4651      	mov	r1, sl
 800fcda:	f7f0 fadf 	bl	800029c <__adddf3>
 800fcde:	3701      	adds	r7, #1
 800fce0:	4681      	mov	r9, r0
 800fce2:	468a      	mov	sl, r1
 800fce4:	9b00      	ldr	r3, [sp, #0]
 800fce6:	429f      	cmp	r7, r3
 800fce8:	dc02      	bgt.n	800fcf0 <__kernel_rem_pio2+0x4c8>
 800fcea:	9b06      	ldr	r3, [sp, #24]
 800fcec:	429f      	cmp	r7, r3
 800fcee:	ddea      	ble.n	800fcc6 <__kernel_rem_pio2+0x49e>
 800fcf0:	9a06      	ldr	r2, [sp, #24]
 800fcf2:	ab48      	add	r3, sp, #288	; 0x120
 800fcf4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800fcf8:	e9c6 9a00 	strd	r9, sl, [r6]
 800fcfc:	3c01      	subs	r4, #1
 800fcfe:	e6fa      	b.n	800faf6 <__kernel_rem_pio2+0x2ce>
 800fd00:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800fd02:	2b02      	cmp	r3, #2
 800fd04:	dc0b      	bgt.n	800fd1e <__kernel_rem_pio2+0x4f6>
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	dc39      	bgt.n	800fd7e <__kernel_rem_pio2+0x556>
 800fd0a:	d05d      	beq.n	800fdc8 <__kernel_rem_pio2+0x5a0>
 800fd0c:	9b02      	ldr	r3, [sp, #8]
 800fd0e:	f003 0007 	and.w	r0, r3, #7
 800fd12:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800fd16:	ecbd 8b02 	vpop	{d8}
 800fd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd1e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800fd20:	2b03      	cmp	r3, #3
 800fd22:	d1f3      	bne.n	800fd0c <__kernel_rem_pio2+0x4e4>
 800fd24:	9b05      	ldr	r3, [sp, #20]
 800fd26:	9500      	str	r5, [sp, #0]
 800fd28:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800fd2c:	eb0d 0403 	add.w	r4, sp, r3
 800fd30:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800fd34:	46a2      	mov	sl, r4
 800fd36:	9b00      	ldr	r3, [sp, #0]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	f1aa 0a08 	sub.w	sl, sl, #8
 800fd3e:	dc69      	bgt.n	800fe14 <__kernel_rem_pio2+0x5ec>
 800fd40:	46aa      	mov	sl, r5
 800fd42:	f1ba 0f01 	cmp.w	sl, #1
 800fd46:	f1a4 0408 	sub.w	r4, r4, #8
 800fd4a:	f300 8083 	bgt.w	800fe54 <__kernel_rem_pio2+0x62c>
 800fd4e:	9c05      	ldr	r4, [sp, #20]
 800fd50:	ab48      	add	r3, sp, #288	; 0x120
 800fd52:	441c      	add	r4, r3
 800fd54:	2000      	movs	r0, #0
 800fd56:	2100      	movs	r1, #0
 800fd58:	2d01      	cmp	r5, #1
 800fd5a:	f300 809a 	bgt.w	800fe92 <__kernel_rem_pio2+0x66a>
 800fd5e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800fd62:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800fd66:	f1bb 0f00 	cmp.w	fp, #0
 800fd6a:	f040 8098 	bne.w	800fe9e <__kernel_rem_pio2+0x676>
 800fd6e:	9b04      	ldr	r3, [sp, #16]
 800fd70:	e9c3 7800 	strd	r7, r8, [r3]
 800fd74:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800fd78:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800fd7c:	e7c6      	b.n	800fd0c <__kernel_rem_pio2+0x4e4>
 800fd7e:	9e05      	ldr	r6, [sp, #20]
 800fd80:	ab48      	add	r3, sp, #288	; 0x120
 800fd82:	441e      	add	r6, r3
 800fd84:	462c      	mov	r4, r5
 800fd86:	2000      	movs	r0, #0
 800fd88:	2100      	movs	r1, #0
 800fd8a:	2c00      	cmp	r4, #0
 800fd8c:	da33      	bge.n	800fdf6 <__kernel_rem_pio2+0x5ce>
 800fd8e:	f1bb 0f00 	cmp.w	fp, #0
 800fd92:	d036      	beq.n	800fe02 <__kernel_rem_pio2+0x5da>
 800fd94:	4602      	mov	r2, r0
 800fd96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fd9a:	9c04      	ldr	r4, [sp, #16]
 800fd9c:	e9c4 2300 	strd	r2, r3, [r4]
 800fda0:	4602      	mov	r2, r0
 800fda2:	460b      	mov	r3, r1
 800fda4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800fda8:	f7f0 fa76 	bl	8000298 <__aeabi_dsub>
 800fdac:	ae4a      	add	r6, sp, #296	; 0x128
 800fdae:	2401      	movs	r4, #1
 800fdb0:	42a5      	cmp	r5, r4
 800fdb2:	da29      	bge.n	800fe08 <__kernel_rem_pio2+0x5e0>
 800fdb4:	f1bb 0f00 	cmp.w	fp, #0
 800fdb8:	d002      	beq.n	800fdc0 <__kernel_rem_pio2+0x598>
 800fdba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fdbe:	4619      	mov	r1, r3
 800fdc0:	9b04      	ldr	r3, [sp, #16]
 800fdc2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800fdc6:	e7a1      	b.n	800fd0c <__kernel_rem_pio2+0x4e4>
 800fdc8:	9c05      	ldr	r4, [sp, #20]
 800fdca:	ab48      	add	r3, sp, #288	; 0x120
 800fdcc:	441c      	add	r4, r3
 800fdce:	2000      	movs	r0, #0
 800fdd0:	2100      	movs	r1, #0
 800fdd2:	2d00      	cmp	r5, #0
 800fdd4:	da09      	bge.n	800fdea <__kernel_rem_pio2+0x5c2>
 800fdd6:	f1bb 0f00 	cmp.w	fp, #0
 800fdda:	d002      	beq.n	800fde2 <__kernel_rem_pio2+0x5ba>
 800fddc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fde0:	4619      	mov	r1, r3
 800fde2:	9b04      	ldr	r3, [sp, #16]
 800fde4:	e9c3 0100 	strd	r0, r1, [r3]
 800fde8:	e790      	b.n	800fd0c <__kernel_rem_pio2+0x4e4>
 800fdea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fdee:	f7f0 fa55 	bl	800029c <__adddf3>
 800fdf2:	3d01      	subs	r5, #1
 800fdf4:	e7ed      	b.n	800fdd2 <__kernel_rem_pio2+0x5aa>
 800fdf6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800fdfa:	f7f0 fa4f 	bl	800029c <__adddf3>
 800fdfe:	3c01      	subs	r4, #1
 800fe00:	e7c3      	b.n	800fd8a <__kernel_rem_pio2+0x562>
 800fe02:	4602      	mov	r2, r0
 800fe04:	460b      	mov	r3, r1
 800fe06:	e7c8      	b.n	800fd9a <__kernel_rem_pio2+0x572>
 800fe08:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800fe0c:	f7f0 fa46 	bl	800029c <__adddf3>
 800fe10:	3401      	adds	r4, #1
 800fe12:	e7cd      	b.n	800fdb0 <__kernel_rem_pio2+0x588>
 800fe14:	e9da 8900 	ldrd	r8, r9, [sl]
 800fe18:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800fe1c:	9b00      	ldr	r3, [sp, #0]
 800fe1e:	3b01      	subs	r3, #1
 800fe20:	9300      	str	r3, [sp, #0]
 800fe22:	4632      	mov	r2, r6
 800fe24:	463b      	mov	r3, r7
 800fe26:	4640      	mov	r0, r8
 800fe28:	4649      	mov	r1, r9
 800fe2a:	f7f0 fa37 	bl	800029c <__adddf3>
 800fe2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fe32:	4602      	mov	r2, r0
 800fe34:	460b      	mov	r3, r1
 800fe36:	4640      	mov	r0, r8
 800fe38:	4649      	mov	r1, r9
 800fe3a:	f7f0 fa2d 	bl	8000298 <__aeabi_dsub>
 800fe3e:	4632      	mov	r2, r6
 800fe40:	463b      	mov	r3, r7
 800fe42:	f7f0 fa2b 	bl	800029c <__adddf3>
 800fe46:	ed9d 7b06 	vldr	d7, [sp, #24]
 800fe4a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fe4e:	ed8a 7b00 	vstr	d7, [sl]
 800fe52:	e770      	b.n	800fd36 <__kernel_rem_pio2+0x50e>
 800fe54:	e9d4 8900 	ldrd	r8, r9, [r4]
 800fe58:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800fe5c:	4640      	mov	r0, r8
 800fe5e:	4632      	mov	r2, r6
 800fe60:	463b      	mov	r3, r7
 800fe62:	4649      	mov	r1, r9
 800fe64:	f7f0 fa1a 	bl	800029c <__adddf3>
 800fe68:	e9cd 0100 	strd	r0, r1, [sp]
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	460b      	mov	r3, r1
 800fe70:	4640      	mov	r0, r8
 800fe72:	4649      	mov	r1, r9
 800fe74:	f7f0 fa10 	bl	8000298 <__aeabi_dsub>
 800fe78:	4632      	mov	r2, r6
 800fe7a:	463b      	mov	r3, r7
 800fe7c:	f7f0 fa0e 	bl	800029c <__adddf3>
 800fe80:	ed9d 7b00 	vldr	d7, [sp]
 800fe84:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fe88:	ed84 7b00 	vstr	d7, [r4]
 800fe8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fe90:	e757      	b.n	800fd42 <__kernel_rem_pio2+0x51a>
 800fe92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fe96:	f7f0 fa01 	bl	800029c <__adddf3>
 800fe9a:	3d01      	subs	r5, #1
 800fe9c:	e75c      	b.n	800fd58 <__kernel_rem_pio2+0x530>
 800fe9e:	9b04      	ldr	r3, [sp, #16]
 800fea0:	9a04      	ldr	r2, [sp, #16]
 800fea2:	601f      	str	r7, [r3, #0]
 800fea4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800fea8:	605c      	str	r4, [r3, #4]
 800feaa:	609d      	str	r5, [r3, #8]
 800feac:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800feb0:	60d3      	str	r3, [r2, #12]
 800feb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800feb6:	6110      	str	r0, [r2, #16]
 800feb8:	6153      	str	r3, [r2, #20]
 800feba:	e727      	b.n	800fd0c <__kernel_rem_pio2+0x4e4>
 800febc:	41700000 	.word	0x41700000
 800fec0:	3e700000 	.word	0x3e700000
 800fec4:	00000000 	.word	0x00000000

0800fec8 <floor>:
 800fec8:	ec51 0b10 	vmov	r0, r1, d0
 800fecc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fed4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800fed8:	2e13      	cmp	r6, #19
 800feda:	ee10 5a10 	vmov	r5, s0
 800fede:	ee10 8a10 	vmov	r8, s0
 800fee2:	460c      	mov	r4, r1
 800fee4:	dc31      	bgt.n	800ff4a <floor+0x82>
 800fee6:	2e00      	cmp	r6, #0
 800fee8:	da14      	bge.n	800ff14 <floor+0x4c>
 800feea:	a333      	add	r3, pc, #204	; (adr r3, 800ffb8 <floor+0xf0>)
 800feec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef0:	f7f0 f9d4 	bl	800029c <__adddf3>
 800fef4:	2200      	movs	r2, #0
 800fef6:	2300      	movs	r3, #0
 800fef8:	f7f0 fe16 	bl	8000b28 <__aeabi_dcmpgt>
 800fefc:	b138      	cbz	r0, 800ff0e <floor+0x46>
 800fefe:	2c00      	cmp	r4, #0
 800ff00:	da53      	bge.n	800ffaa <floor+0xe2>
 800ff02:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800ff06:	4325      	orrs	r5, r4
 800ff08:	d052      	beq.n	800ffb0 <floor+0xe8>
 800ff0a:	4c2d      	ldr	r4, [pc, #180]	; (800ffc0 <floor+0xf8>)
 800ff0c:	2500      	movs	r5, #0
 800ff0e:	4621      	mov	r1, r4
 800ff10:	4628      	mov	r0, r5
 800ff12:	e024      	b.n	800ff5e <floor+0x96>
 800ff14:	4f2b      	ldr	r7, [pc, #172]	; (800ffc4 <floor+0xfc>)
 800ff16:	4137      	asrs	r7, r6
 800ff18:	ea01 0307 	and.w	r3, r1, r7
 800ff1c:	4303      	orrs	r3, r0
 800ff1e:	d01e      	beq.n	800ff5e <floor+0x96>
 800ff20:	a325      	add	r3, pc, #148	; (adr r3, 800ffb8 <floor+0xf0>)
 800ff22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff26:	f7f0 f9b9 	bl	800029c <__adddf3>
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	f7f0 fdfb 	bl	8000b28 <__aeabi_dcmpgt>
 800ff32:	2800      	cmp	r0, #0
 800ff34:	d0eb      	beq.n	800ff0e <floor+0x46>
 800ff36:	2c00      	cmp	r4, #0
 800ff38:	bfbe      	ittt	lt
 800ff3a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ff3e:	4133      	asrlt	r3, r6
 800ff40:	18e4      	addlt	r4, r4, r3
 800ff42:	ea24 0407 	bic.w	r4, r4, r7
 800ff46:	2500      	movs	r5, #0
 800ff48:	e7e1      	b.n	800ff0e <floor+0x46>
 800ff4a:	2e33      	cmp	r6, #51	; 0x33
 800ff4c:	dd0b      	ble.n	800ff66 <floor+0x9e>
 800ff4e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ff52:	d104      	bne.n	800ff5e <floor+0x96>
 800ff54:	ee10 2a10 	vmov	r2, s0
 800ff58:	460b      	mov	r3, r1
 800ff5a:	f7f0 f99f 	bl	800029c <__adddf3>
 800ff5e:	ec41 0b10 	vmov	d0, r0, r1
 800ff62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff66:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800ff6a:	f04f 37ff 	mov.w	r7, #4294967295
 800ff6e:	40df      	lsrs	r7, r3
 800ff70:	4238      	tst	r0, r7
 800ff72:	d0f4      	beq.n	800ff5e <floor+0x96>
 800ff74:	a310      	add	r3, pc, #64	; (adr r3, 800ffb8 <floor+0xf0>)
 800ff76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff7a:	f7f0 f98f 	bl	800029c <__adddf3>
 800ff7e:	2200      	movs	r2, #0
 800ff80:	2300      	movs	r3, #0
 800ff82:	f7f0 fdd1 	bl	8000b28 <__aeabi_dcmpgt>
 800ff86:	2800      	cmp	r0, #0
 800ff88:	d0c1      	beq.n	800ff0e <floor+0x46>
 800ff8a:	2c00      	cmp	r4, #0
 800ff8c:	da0a      	bge.n	800ffa4 <floor+0xdc>
 800ff8e:	2e14      	cmp	r6, #20
 800ff90:	d101      	bne.n	800ff96 <floor+0xce>
 800ff92:	3401      	adds	r4, #1
 800ff94:	e006      	b.n	800ffa4 <floor+0xdc>
 800ff96:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	40b3      	lsls	r3, r6
 800ff9e:	441d      	add	r5, r3
 800ffa0:	45a8      	cmp	r8, r5
 800ffa2:	d8f6      	bhi.n	800ff92 <floor+0xca>
 800ffa4:	ea25 0507 	bic.w	r5, r5, r7
 800ffa8:	e7b1      	b.n	800ff0e <floor+0x46>
 800ffaa:	2500      	movs	r5, #0
 800ffac:	462c      	mov	r4, r5
 800ffae:	e7ae      	b.n	800ff0e <floor+0x46>
 800ffb0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ffb4:	e7ab      	b.n	800ff0e <floor+0x46>
 800ffb6:	bf00      	nop
 800ffb8:	8800759c 	.word	0x8800759c
 800ffbc:	7e37e43c 	.word	0x7e37e43c
 800ffc0:	bff00000 	.word	0xbff00000
 800ffc4:	000fffff 	.word	0x000fffff

0800ffc8 <_init>:
 800ffc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffca:	bf00      	nop
 800ffcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffce:	bc08      	pop	{r3}
 800ffd0:	469e      	mov	lr, r3
 800ffd2:	4770      	bx	lr

0800ffd4 <_fini>:
 800ffd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffd6:	bf00      	nop
 800ffd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffda:	bc08      	pop	{r3}
 800ffdc:	469e      	mov	lr, r3
 800ffde:	4770      	bx	lr
