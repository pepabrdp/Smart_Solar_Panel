
MCU_Pins.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dc8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08007f68  08007f68  00017f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008218  08008218  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008218  08008218  00018218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008220  08008220  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008220  08008220  00018220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008224  08008224  00018224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008228  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000090  080082b8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  080082b8  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011fb9  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021b9  00000000  00000000  000320bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  00034278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eb3  00000000  00000000  000354f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d3d  00000000  00000000  000363a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000146d9  00000000  00000000  0004f0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f648  00000000  00000000  000637b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006050  00000000  00000000  00102e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00108e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007f50 	.word	0x08007f50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08007f50 	.word	0x08007f50

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b970 	b.w	8000f00 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	460f      	mov	r7, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	d965      	bls.n	8000d1a <__udivmoddi4+0xe2>
 8000c4e:	fab2 f382 	clz	r3, r2
 8000c52:	b143      	cbz	r3, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c58:	f1c3 0220 	rsb	r2, r3, #32
 8000c5c:	409f      	lsls	r7, r3
 8000c5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c62:	4317      	orrs	r7, r2
 8000c64:	409c      	lsls	r4, r3
 8000c66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c6a:	fa1f f58c 	uxth.w	r5, ip
 8000c6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c72:	0c22      	lsrs	r2, r4, #16
 8000c74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c7c:	fb01 f005 	mul.w	r0, r1, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c8c:	f080 811c 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000c90:	4290      	cmp	r0, r2
 8000c92:	f240 8119 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000c96:	3902      	subs	r1, #2
 8000c98:	4462      	add	r2, ip
 8000c9a:	1a12      	subs	r2, r2, r0
 8000c9c:	b2a4      	uxth	r4, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	fb00 f505 	mul.w	r5, r0, r5
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	d90a      	bls.n	8000cc8 <__udivmoddi4+0x90>
 8000cb2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cba:	f080 8107 	bcs.w	8000ecc <__udivmoddi4+0x294>
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	f240 8104 	bls.w	8000ecc <__udivmoddi4+0x294>
 8000cc4:	4464      	add	r4, ip
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11e      	cbz	r6, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40dc      	lsrs	r4, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0xbc>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80ed 	beq.w	8000ec2 <__udivmoddi4+0x28a>
 8000ce8:	2100      	movs	r1, #0
 8000cea:	e9c6 0500 	strd	r0, r5, [r6]
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf4:	fab3 f183 	clz	r1, r3
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d149      	bne.n	8000d90 <__udivmoddi4+0x158>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	d302      	bcc.n	8000d06 <__udivmoddi4+0xce>
 8000d00:	4282      	cmp	r2, r0
 8000d02:	f200 80f8 	bhi.w	8000ef6 <__udivmoddi4+0x2be>
 8000d06:	1a84      	subs	r4, r0, r2
 8000d08:	eb65 0203 	sbc.w	r2, r5, r3
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	4617      	mov	r7, r2
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d0e2      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	e9c6 4700 	strd	r4, r7, [r6]
 8000d18:	e7df      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d1a:	b902      	cbnz	r2, 8000d1e <__udivmoddi4+0xe6>
 8000d1c:	deff      	udf	#255	; 0xff
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8090 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d28:	1a8a      	subs	r2, r1, r2
 8000d2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2e:	fa1f fe8c 	uxth.w	lr, ip
 8000d32:	2101      	movs	r1, #1
 8000d34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d38:	fb07 2015 	mls	r0, r7, r5, r2
 8000d3c:	0c22      	lsrs	r2, r4, #16
 8000d3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d42:	fb0e f005 	mul.w	r0, lr, r5
 8000d46:	4290      	cmp	r0, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d4e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4290      	cmp	r0, r2
 8000d56:	f200 80cb 	bhi.w	8000ef0 <__udivmoddi4+0x2b8>
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	1a12      	subs	r2, r2, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d64:	fb07 2210 	mls	r2, r7, r0, r2
 8000d68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x14e>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x14c>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f200 80bb 	bhi.w	8000efa <__udivmoddi4+0x2c2>
 8000d84:	4610      	mov	r0, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d8e:	e79f      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d90:	f1c1 0720 	rsb	r7, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000da2:	fa20 f307 	lsr.w	r3, r0, r7
 8000da6:	40fd      	lsrs	r5, r7
 8000da8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dac:	4323      	orrs	r3, r4
 8000dae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dba:	0c1c      	lsrs	r4, r3, #16
 8000dbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dc0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dc4:	42a5      	cmp	r5, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	fa00 f001 	lsl.w	r0, r0, r1
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd8:	f080 8088 	bcs.w	8000eec <__udivmoddi4+0x2b4>
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	f240 8085 	bls.w	8000eec <__udivmoddi4+0x2b4>
 8000de2:	f1a8 0802 	sub.w	r8, r8, #2
 8000de6:	4464      	add	r4, ip
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	b29d      	uxth	r5, r3
 8000dec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df0:	fb09 4413 	mls	r4, r9, r3, r4
 8000df4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000df8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e08:	d26c      	bcs.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	d96a      	bls.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e16:	fba3 9502 	umull	r9, r5, r3, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	42ac      	cmp	r4, r5
 8000e20:	46c8      	mov	r8, r9
 8000e22:	46ae      	mov	lr, r5
 8000e24:	d356      	bcc.n	8000ed4 <__udivmoddi4+0x29c>
 8000e26:	d053      	beq.n	8000ed0 <__udivmoddi4+0x298>
 8000e28:	b156      	cbz	r6, 8000e40 <__udivmoddi4+0x208>
 8000e2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e32:	fa04 f707 	lsl.w	r7, r4, r7
 8000e36:	40ca      	lsrs	r2, r1
 8000e38:	40cc      	lsrs	r4, r1
 8000e3a:	4317      	orrs	r7, r2
 8000e3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e48:	f1c3 0120 	rsb	r1, r3, #32
 8000e4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e50:	fa20 f201 	lsr.w	r2, r0, r1
 8000e54:	fa25 f101 	lsr.w	r1, r5, r1
 8000e58:	409d      	lsls	r5, r3
 8000e5a:	432a      	orrs	r2, r5
 8000e5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1510 	mls	r5, r7, r0, r1
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e72:	fb00 f50e 	mul.w	r5, r0, lr
 8000e76:	428d      	cmp	r5, r1
 8000e78:	fa04 f403 	lsl.w	r4, r4, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x258>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e86:	d22f      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e88:	428d      	cmp	r5, r1
 8000e8a:	d92d      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1b49      	subs	r1, r1, r5
 8000e92:	b292      	uxth	r2, r2
 8000e94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e98:	fb07 1115 	mls	r1, r7, r5, r1
 8000e9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea4:	4291      	cmp	r1, r2
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x282>
 8000ea8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eac:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb0:	d216      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb2:	4291      	cmp	r1, r2
 8000eb4:	d914      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb6:	3d02      	subs	r5, #2
 8000eb8:	4462      	add	r2, ip
 8000eba:	1a52      	subs	r2, r2, r1
 8000ebc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ec0:	e738      	b.n	8000d34 <__udivmoddi4+0xfc>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	e708      	b.n	8000cda <__udivmoddi4+0xa2>
 8000ec8:	4639      	mov	r1, r7
 8000eca:	e6e6      	b.n	8000c9a <__udivmoddi4+0x62>
 8000ecc:	4610      	mov	r0, r2
 8000ece:	e6fb      	b.n	8000cc8 <__udivmoddi4+0x90>
 8000ed0:	4548      	cmp	r0, r9
 8000ed2:	d2a9      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000edc:	3b01      	subs	r3, #1
 8000ede:	e7a3      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ee0:	4645      	mov	r5, r8
 8000ee2:	e7ea      	b.n	8000eba <__udivmoddi4+0x282>
 8000ee4:	462b      	mov	r3, r5
 8000ee6:	e794      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee8:	4640      	mov	r0, r8
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x258>
 8000eec:	46d0      	mov	r8, sl
 8000eee:	e77b      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000ef0:	3d02      	subs	r5, #2
 8000ef2:	4462      	add	r2, ip
 8000ef4:	e732      	b.n	8000d5c <__udivmoddi4+0x124>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e70a      	b.n	8000d10 <__udivmoddi4+0xd8>
 8000efa:	4464      	add	r4, ip
 8000efc:	3802      	subs	r0, #2
 8000efe:	e742      	b.n	8000d86 <__udivmoddi4+0x14e>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <main>:
int stepsPerRev = 200;
float stepAngle = 1.8;
///////////////////////////////////

int main(void)
{
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b097      	sub	sp, #92	; 0x5c
 8000f08:	af02      	add	r7, sp, #8
	HAL_Init();
 8000f0a:	f001 fcf7 	bl	80028fc <HAL_Init>

	SystemClock_Config();
 8000f0e:	f001 f80d 	bl	8001f2c <SystemClock_Config>

	MX_GPIO_Init();
 8000f12:	f001 f99b 	bl	800224c <MX_GPIO_Init>
	MX_ADC1_Init();
 8000f16:	f001 f871 	bl	8001ffc <MX_ADC1_Init>
	MX_I2C1_Init();
 8000f1a:	f001 f8c1 	bl	80020a0 <MX_I2C1_Init>
	MX_I2C3_Init();
 8000f1e:	f001 f8ed 	bl	80020fc <MX_I2C3_Init>
	MX_TIM1_Init();
 8000f22:	f001 f919 	bl	8002158 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8000f26:	f001 f967 	bl	80021f8 <MX_USART1_UART_Init>


	///////////////////////////////////////////////////////////////
	//GPS
	float lat = -1;
 8000f2a:	4b8a      	ldr	r3, [pc, #552]	; (8001154 <main+0x250>)
 8000f2c:	617b      	str	r3, [r7, #20]
	float longi = -1;
 8000f2e:	4b89      	ldr	r3, [pc, #548]	; (8001154 <main+0x250>)
 8000f30:	613b      	str	r3, [r7, #16]
	float time = -1;
 8000f32:	4b88      	ldr	r3, [pc, #544]	; (8001154 <main+0x250>)
 8000f34:	60fb      	str	r3, [r7, #12]
	float date = -1;
 8000f36:	4b87      	ldr	r3, [pc, #540]	; (8001154 <main+0x250>)
 8000f38:	60bb      	str	r3, [r7, #8]
	char longiDir = 'x';
 8000f3a:	2378      	movs	r3, #120	; 0x78
 8000f3c:	71fb      	strb	r3, [r7, #7]
	char latDir = 'x';
 8000f3e:	2378      	movs	r3, #120	; 0x78
 8000f40:	71bb      	strb	r3, [r7, #6]

	for (int i = 0; i < 50; i++) {
 8000f42:	2300      	movs	r3, #0
 8000f44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f46:	e011      	b.n	8000f6c <main+0x68>
	 getGpsData(&lat, &longi, &time, &date, &longiDir, &latDir);
 8000f48:	f107 0408 	add.w	r4, r7, #8
 8000f4c:	f107 020c 	add.w	r2, r7, #12
 8000f50:	f107 0110 	add.w	r1, r7, #16
 8000f54:	f107 0014 	add.w	r0, r7, #20
 8000f58:	1dbb      	adds	r3, r7, #6
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	1dfb      	adds	r3, r7, #7
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	4623      	mov	r3, r4
 8000f62:	f000 fbdf 	bl	8001724 <getGpsData>
	for (int i = 0; i < 50; i++) {
 8000f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f68:	3301      	adds	r3, #1
 8000f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f6e:	2b31      	cmp	r3, #49	; 0x31
 8000f70:	ddea      	ble.n	8000f48 <main+0x44>
	}

	//////////////////////////////////////////////////////////////
	//LIGHT SENSOR
	setupLightSensor(lightAddressGND);
 8000f72:	4b79      	ldr	r3, [pc, #484]	; (8001158 <main+0x254>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fac2 	bl	8001500 <setupLightSensor>
	setupLightSensor(lightAddressVDD);
 8000f7c:	4b77      	ldr	r3, [pc, #476]	; (800115c <main+0x258>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 fabd 	bl	8001500 <setupLightSensor>
	setupLightSensor(lightAddressSDA);
 8000f86:	4b76      	ldr	r3, [pc, #472]	; (8001160 <main+0x25c>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 fab8 	bl	8001500 <setupLightSensor>
	setupLightSensor(lightAddressSCL);
 8000f90:	4b74      	ldr	r3, [pc, #464]	; (8001164 <main+0x260>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 fab3 	bl	8001500 <setupLightSensor>

	//////////////////////////////////////////////////////////////
	//MAGNETOMETER
	float xCal, yCal, zCal;
	xCal = 0;
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	637b      	str	r3, [r7, #52]	; 0x34
	yCal = 0;
 8000fa0:	f04f 0300 	mov.w	r3, #0
 8000fa4:	633b      	str	r3, [r7, #48]	; 0x30
	zCal = 0;
 8000fa6:	f04f 0300 	mov.w	r3, #0
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
//	setupMag();
//	hardIronCal(&xCal, &yCal, &zCal);

	//Direction Angle
	float direction = 0;
 8000fac:	f04f 0300 	mov.w	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
//	float direction = magnetometerData(xCal, yCal, zCal);

	//////////////////////////////////////////////////////////////
	//SOLAR PANEL VOLTAGE
	float solarPanelVoltage = 0;
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24

	//////////////////////////////////////////////////////////////
	//MOTOR CONTROL
	HAL_TIM_Base_Start(&htim1);
 8000fb8:	486b      	ldr	r0, [pc, #428]	; (8001168 <main+0x264>)
 8000fba:	f003 ffd3 	bl	8004f64 <HAL_TIM_Base_Start>
	///////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////
	//If no valid data -> gamer Mode On
	if (lat == '-1' || longi == '-1' || time == '-1' || date == '-1' ||
 8000fbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fc2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800116c <main+0x268>
 8000fc6:	eef4 7a47 	vcmp.f32	s15, s14
 8000fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fce:	d020      	beq.n	8001012 <main+0x10e>
 8000fd0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fd4:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800116c <main+0x268>
 8000fd8:	eef4 7a47 	vcmp.f32	s15, s14
 8000fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe0:	d017      	beq.n	8001012 <main+0x10e>
 8000fe2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fe6:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800116c <main+0x268>
 8000fea:	eef4 7a47 	vcmp.f32	s15, s14
 8000fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff2:	d00e      	beq.n	8001012 <main+0x10e>
 8000ff4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ff8:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800116c <main+0x268>
 8000ffc:	eef4 7a47 	vcmp.f32	s15, s14
 8001000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001004:	d005      	beq.n	8001012 <main+0x10e>
	    longiDir == 'x' || latDir == 'x') {
 8001006:	79fb      	ldrb	r3, [r7, #7]
	if (lat == '-1' || longi == '-1' || time == '-1' || date == '-1' ||
 8001008:	2b78      	cmp	r3, #120	; 0x78
 800100a:	d002      	beq.n	8001012 <main+0x10e>
	    longiDir == 'x' || latDir == 'x') {
 800100c:	79bb      	ldrb	r3, [r7, #6]
 800100e:	2b78      	cmp	r3, #120	; 0x78
 8001010:	d101      	bne.n	8001016 <main+0x112>
		lightFollowOnlyMode();
 8001012:	f000 f8b3 	bl	800117c <lightFollowOnlyMode>
	}
	//////////////////////////////////////////////////////////////

	//Finding Azimuth and Zenith Angles for initialization
	//TODO: incorporate solar algorithm here to calculate azimuth and zenith angles
	float azimuthAngle = 0;
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
	float zenithAngle = 0;
 800101c:	f04f 0300 	mov.w	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]

	//Rotate to match azimuth angle
	//TODO:write code to change direction based on it being positive or negative
	float rotationSusanAngle = azimuthAngle - direction;
 8001022:	ed97 7a08 	vldr	s14, [r7, #32]
 8001026:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800102a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800102e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	if (rotationSusanAngle < 0) {
 8001032:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001036:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800103a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103e:	d508      	bpl.n	8001052 <main+0x14e>
		setCounterClockwiseSusan();
 8001040:	f000 f9fc 	bl	800143c <setCounterClockwiseSusan>
		rotationSusanAngle *= -1;
 8001044:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001048:	eef1 7a67 	vneg.f32	s15, s15
 800104c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 8001050:	e001      	b.n	8001056 <main+0x152>
	}
	else {
		setClockwiseSusan();
 8001052:	f000 f9db 	bl	800140c <setClockwiseSusan>
	}
	rotateMotorSusan(rotationSusanAngle);
 8001056:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 800105a:	f000 f98f 	bl	800137c <rotateMotorSusan>

	//TODO: figure out the necessary direction to set here
	//Have always the same initial state
	float currentPosition = 90;
 800105e:	4b44      	ldr	r3, [pc, #272]	; (8001170 <main+0x26c>)
 8001060:	647b      	str	r3, [r7, #68]	; 0x44
	float newPosition = currentPosition - zenithAngle;
 8001062:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001066:	edd7 7a07 	vldr	s15, [r7, #28]
 800106a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800106e:	edc7 7a06 	vstr	s15, [r7, #24]
	rotateMotorRod(newPosition * 10); //multiply by t10 due to gear ratio
 8001072:	edd7 7a06 	vldr	s15, [r7, #24]
 8001076:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800107a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800107e:	eeb0 0a67 	vmov.f32	s0, s15
 8001082:	f000 f93d 	bl	8001300 <rotateMotorRod>
	setCounterClockwiseRod(); //up
 8001086:	f000 f9cd 	bl	8001424 <setCounterClockwiseRod>

	int counter = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	643b      	str	r3, [r7, #64]	; 0x40
	while (1)
	{
		//Adjust every 5 minutes
		if ((HAL_GetTick() - counter) > 300000) {
 800108e:	f001 fc9b 	bl	80029c8 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	4a36      	ldr	r2, [pc, #216]	; (8001174 <main+0x270>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d9f7      	bls.n	800108e <main+0x18a>
			//Azimuth Angle Change
			//TODO:write code to change direction based on it being positive or negative
			//TODO: recalculate azimuth angle
			direction = magnetometerData(xCal, yCal, zCal);
 800109e:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 80010a2:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 80010a6:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 80010aa:	f000 fe57 	bl	8001d5c <magnetometerData>
 80010ae:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
			azimuthAngle = 0;
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]

			float rotationSusanAngle = azimuthAngle - direction;
 80010b8:	ed97 7a08 	vldr	s14, [r7, #32]
 80010bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80010c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			if (rotationSusanAngle < 0) {
 80010c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80010cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d4:	d508      	bpl.n	80010e8 <main+0x1e4>
				setCounterClockwiseSusan();
 80010d6:	f000 f9b1 	bl	800143c <setCounterClockwiseSusan>
				rotationSusanAngle *= -1;
 80010da:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80010de:	eef1 7a67 	vneg.f32	s15, s15
 80010e2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 80010e6:	e001      	b.n	80010ec <main+0x1e8>
			}
			else {
				setClockwiseSusan();
 80010e8:	f000 f990 	bl	800140c <setClockwiseSusan>
			}
			rotateMotorSusan(rotationSusanAngle);
 80010ec:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80010f0:	f000 f944 	bl	800137c <rotateMotorSusan>


			//Zenith Angle Change
			//TODO: figure out the necessary direction to set here
			//TODO: recalculate zenith angle here
			zenithAngle = 0;
 80010f4:	f04f 0300 	mov.w	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
			newPosition = 90 - zenithAngle;
 80010fa:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001178 <main+0x274>
 80010fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001106:	edc7 7a06 	vstr	s15, [r7, #24]
			//TODO: Find the difference between current position and new position
			float rotationRodAngle = currentPosition - newPosition;
 800110a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800110e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001112:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001116:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			if (rotationRodAngle < 0) {
 800111a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800111e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001126:	d508      	bpl.n	800113a <main+0x236>
				setCounterClockwiseRod();
 8001128:	f000 f97c 	bl	8001424 <setCounterClockwiseRod>
				rotationRodAngle *= -1;
 800112c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001130:	eef1 7a67 	vneg.f32	s15, s15
 8001134:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8001138:	e001      	b.n	800113e <main+0x23a>
			}
			else {
				setClockwiseRod();
 800113a:	f000 f95b 	bl	80013f4 <setClockwiseRod>
			}
			rotateMotorRod(rotationRodAngle);
 800113e:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8001142:	f000 f8dd 	bl	8001300 <rotateMotorRod>
			currentPosition = newPosition;
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	647b      	str	r3, [r7, #68]	; 0x44

			counter = HAL_GetTick();
 800114a:	f001 fc3d 	bl	80029c8 <HAL_GetTick>
 800114e:	4603      	mov	r3, r0
 8001150:	643b      	str	r3, [r7, #64]	; 0x40
		if ((HAL_GetTick() - counter) > 300000) {
 8001152:	e79c      	b.n	800108e <main+0x18a>
 8001154:	bf800000 	.word	0xbf800000
 8001158:	20000004 	.word	0x20000004
 800115c:	20000005 	.word	0x20000005
 8001160:	20000006 	.word	0x20000006
 8001164:	20000007 	.word	0x20000007
 8001168:	2000019c 	.word	0x2000019c
 800116c:	4634c400 	.word	0x4634c400
 8001170:	42b40000 	.word	0x42b40000
 8001174:	000493e0 	.word	0x000493e0
 8001178:	42b40000 	.word	0x42b40000

0800117c <lightFollowOnlyMode>:
		}
	}
}

void lightFollowOnlyMode() {
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
	//Later on, if everything's based on interrupts, we deactivate all interrupts
	int motorCounter = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
	while (1) {
		if ((HAL_GetTick() - motorCounter) > 500) {
 8001186:	f001 fc1f 	bl	80029c8 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001194:	f240 808b 	bls.w	80012ae <lightFollowOnlyMode+0x132>
			HAL_GPIO_WritePin(SMART_PANEL_LED_PORT, SMART_PANEL_LED_PIN, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	484a      	ldr	r0, [pc, #296]	; (80012c8 <lightFollowOnlyMode+0x14c>)
 800119e:	f002 fa7b 	bl	8003698 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DEBUG_LED_PORT, DEBUG_LED_PIN, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a8:	4847      	ldr	r0, [pc, #284]	; (80012c8 <lightFollowOnlyMode+0x14c>)
 80011aa:	f002 fa75 	bl	8003698 <HAL_GPIO_WritePin>

			float lightDataVDD = getLightData(lightAddressVDD);
 80011ae:	4b47      	ldr	r3, [pc, #284]	; (80012cc <lightFollowOnlyMode+0x150>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f9d0 	bl	8001558 <getLightData>
 80011b8:	ed87 0a04 	vstr	s0, [r7, #16]
			float lightDataGND = getLightData(lightAddressGND);
 80011bc:	4b44      	ldr	r3, [pc, #272]	; (80012d0 <lightFollowOnlyMode+0x154>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 f9c9 	bl	8001558 <getLightData>
 80011c6:	ed87 0a03 	vstr	s0, [r7, #12]
			//TODO: integrate sda and scl light sensors
			float lightDataSDA = getLightData(lightAddressSDA);
 80011ca:	4b42      	ldr	r3, [pc, #264]	; (80012d4 <lightFollowOnlyMode+0x158>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f9c2 	bl	8001558 <getLightData>
 80011d4:	ed87 0a02 	vstr	s0, [r7, #8]
			float lightDataSCL = getLightData(lightAddressSCL);
 80011d8:	4b3f      	ldr	r3, [pc, #252]	; (80012d8 <lightFollowOnlyMode+0x15c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 f9bb 	bl	8001558 <getLightData>
 80011e2:	ed87 0a01 	vstr	s0, [r7, #4]

			setupMotorRod();
 80011e6:	f000 f94f 	bl	8001488 <setupMotorRod>

			if ((lightDataSDA - lightDataSCL)  > 60) {
 80011ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80011ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80011f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f6:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80012dc <lightFollowOnlyMode+0x160>
 80011fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001202:	dd06      	ble.n	8001212 <lightFollowOnlyMode+0x96>
				setCounterClockwiseRod(); //up
 8001204:	f000 f90e 	bl	8001424 <setCounterClockwiseRod>
				rotateMotorRod(181);
 8001208:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80012e0 <lightFollowOnlyMode+0x164>
 800120c:	f000 f878 	bl	8001300 <rotateMotorRod>
 8001210:	e012      	b.n	8001238 <lightFollowOnlyMode+0xbc>
			}
			else if ((lightDataSCL - lightDataSDA) > 60) {
 8001212:	ed97 7a01 	vldr	s14, [r7, #4]
 8001216:	edd7 7a02 	vldr	s15, [r7, #8]
 800121a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80012dc <lightFollowOnlyMode+0x160>
 8001222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122a:	dd05      	ble.n	8001238 <lightFollowOnlyMode+0xbc>
				setClockwiseRod(); //down
 800122c:	f000 f8e2 	bl	80013f4 <setClockwiseRod>
				rotateMotorRod(181);
 8001230:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 80012e0 <lightFollowOnlyMode+0x164>
 8001234:	f000 f864 	bl	8001300 <rotateMotorRod>
			}

			turnOffMotorRod();
 8001238:	f000 f94a 	bl	80014d0 <turnOffMotorRod>


			//Figuring our rotational movement
			setupMotorSusan();
 800123c:	f000 f938 	bl	80014b0 <setupMotorSusan>

			if ((lightDataGND - lightDataVDD)  > 60) {
 8001240:	ed97 7a03 	vldr	s14, [r7, #12]
 8001244:	edd7 7a04 	vldr	s15, [r7, #16]
 8001248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800124c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80012dc <lightFollowOnlyMode+0x160>
 8001250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001258:	dd08      	ble.n	800126c <lightFollowOnlyMode+0xf0>
				setCounterClockwiseSusan();
 800125a:	f000 f8ef 	bl	800143c <setCounterClockwiseSusan>
				rotateMotorSusan(181);
 800125e:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80012e0 <lightFollowOnlyMode+0x164>
 8001262:	f000 f88b 	bl	800137c <rotateMotorSusan>
				bluetoothSend();
 8001266:	f000 f83d 	bl	80012e4 <bluetoothSend>
 800126a:	e014      	b.n	8001296 <lightFollowOnlyMode+0x11a>
			}
			else if ((lightDataVDD - lightDataGND) > 60) {
 800126c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001270:	edd7 7a03 	vldr	s15, [r7, #12]
 8001274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001278:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80012dc <lightFollowOnlyMode+0x160>
 800127c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001284:	dd07      	ble.n	8001296 <lightFollowOnlyMode+0x11a>
				setClockwiseSusan();
 8001286:	f000 f8c1 	bl	800140c <setClockwiseSusan>
				rotateMotorSusan(181);
 800128a:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80012e0 <lightFollowOnlyMode+0x164>
 800128e:	f000 f875 	bl	800137c <rotateMotorSusan>
				bluetoothSend();
 8001292:	f000 f827 	bl	80012e4 <bluetoothSend>
			}

			turnOffMotorSusan();
 8001296:	f000 f927 	bl	80014e8 <turnOffMotorSusan>



//			Voltage measurement and sending
			float solarPanelVoltage = getSolarPanelVoltage();
 800129a:	f000 f9e9 	bl	8001670 <getSolarPanelVoltage>
 800129e:	ed87 0a00 	vstr	s0, [r7]
			//TODO: bluetoothSend
			bluetoothSend();
 80012a2:	f000 f81f 	bl	80012e4 <bluetoothSend>

			motorCounter = HAL_GetTick();
 80012a6:	f001 fb8f 	bl	80029c8 <HAL_GetTick>
 80012aa:	4603      	mov	r3, r0
 80012ac:	617b      	str	r3, [r7, #20]
		}

		HAL_GPIO_WritePin(SMART_PANEL_LED_PORT, SMART_PANEL_LED_PIN, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2180      	movs	r1, #128	; 0x80
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <lightFollowOnlyMode+0x14c>)
 80012b4:	f002 f9f0 	bl	8003698 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DEBUG_LED_PORT, DEBUG_LED_PIN, GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012be:	4802      	ldr	r0, [pc, #8]	; (80012c8 <lightFollowOnlyMode+0x14c>)
 80012c0:	f002 f9ea 	bl	8003698 <HAL_GPIO_WritePin>
		if ((HAL_GetTick() - motorCounter) > 500) {
 80012c4:	e75f      	b.n	8001186 <lightFollowOnlyMode+0xa>
 80012c6:	bf00      	nop
 80012c8:	40020800 	.word	0x40020800
 80012cc:	20000005 	.word	0x20000005
 80012d0:	20000004 	.word	0x20000004
 80012d4:	20000006 	.word	0x20000006
 80012d8:	20000007 	.word	0x20000007
 80012dc:	42700000 	.word	0x42700000
 80012e0:	43350000 	.word	0x43350000

080012e4 <bluetoothSend>:

	}
}

char msg[8] = "Hello";
void bluetoothSend() {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&huart1,msg, sizeof(msg));
 80012e8:	2208      	movs	r2, #8
 80012ea:	4903      	ldr	r1, [pc, #12]	; (80012f8 <bluetoothSend+0x14>)
 80012ec:	4803      	ldr	r0, [pc, #12]	; (80012fc <bluetoothSend+0x18>)
 80012ee:	f004 f930 	bl	8005552 <HAL_UART_Transmit_IT>
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000010 	.word	0x20000010
 80012fc:	200001e4 	.word	0x200001e4

08001300 <rotateMotorRod>:

///////////////////////////////////////////////////////////////
//MOTOR CONTROL
void rotateMotorRod(float angle) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	ed87 0a01 	vstr	s0, [r7, #4]

	int steps = (angle / stepAngle);
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <rotateMotorRod+0x70>)
 800130c:	ed93 7a00 	vldr	s14, [r3]
 8001310:	edd7 6a01 	vldr	s13, [r7, #4]
 8001314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800131c:	ee17 3a90 	vmov	r3, s15
 8001320:	60bb      	str	r3, [r7, #8]

	for(int x=0; x < steps; x++)
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	e01a      	b.n	800135e <rotateMotorRod+0x5e>
	{
		HAL_GPIO_WritePin(ROD_STEP_PORT, ROD_STEP_PIN, GPIO_PIN_SET);
 8001328:	2201      	movs	r2, #1
 800132a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800132e:	4811      	ldr	r0, [pc, #68]	; (8001374 <rotateMotorRod+0x74>)
 8001330:	f002 f9b2 	bl	8003698 <HAL_GPIO_WritePin>
		microDelay(stepDelay);
 8001334:	4b10      	ldr	r3, [pc, #64]	; (8001378 <rotateMotorRod+0x78>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	b29b      	uxth	r3, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f88a 	bl	8001454 <microDelay>
		HAL_GPIO_WritePin(ROD_STEP_PORT, ROD_STEP_PIN, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001346:	480b      	ldr	r0, [pc, #44]	; (8001374 <rotateMotorRod+0x74>)
 8001348:	f002 f9a6 	bl	8003698 <HAL_GPIO_WritePin>
		microDelay(stepDelay);
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <rotateMotorRod+0x78>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	b29b      	uxth	r3, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f87e 	bl	8001454 <microDelay>
	for(int x=0; x < steps; x++)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3301      	adds	r3, #1
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	429a      	cmp	r2, r3
 8001364:	dbe0      	blt.n	8001328 <rotateMotorRod+0x28>
	}
}
 8001366:	bf00      	nop
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000000c 	.word	0x2000000c
 8001374:	40020800 	.word	0x40020800
 8001378:	20000008 	.word	0x20000008

0800137c <rotateMotorSusan>:

void rotateMotorSusan(float angle) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	ed87 0a01 	vstr	s0, [r7, #4]

	int steps = (angle / stepAngle);
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <rotateMotorSusan+0x6c>)
 8001388:	ed93 7a00 	vldr	s14, [r3]
 800138c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001394:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001398:	ee17 3a90 	vmov	r3, s15
 800139c:	60bb      	str	r3, [r7, #8]

	for(int x=0; x < steps; x++)
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	e018      	b.n	80013d6 <rotateMotorSusan+0x5a>
	{
		HAL_GPIO_WritePin(SUSAN_STEP_PORT, SUSAN_STEP_PIN, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2120      	movs	r1, #32
 80013a8:	4810      	ldr	r0, [pc, #64]	; (80013ec <rotateMotorSusan+0x70>)
 80013aa:	f002 f975 	bl	8003698 <HAL_GPIO_WritePin>
		microDelay(stepDelay);
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <rotateMotorSusan+0x74>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 f84d 	bl	8001454 <microDelay>
		HAL_GPIO_WritePin(SUSAN_STEP_PORT, SUSAN_STEP_PIN, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2120      	movs	r1, #32
 80013be:	480b      	ldr	r0, [pc, #44]	; (80013ec <rotateMotorSusan+0x70>)
 80013c0:	f002 f96a 	bl	8003698 <HAL_GPIO_WritePin>
		microDelay(stepDelay);
 80013c4:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <rotateMotorSusan+0x74>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f842 	bl	8001454 <microDelay>
	for(int x=0; x < steps; x++)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	3301      	adds	r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	429a      	cmp	r2, r3
 80013dc:	dbe2      	blt.n	80013a4 <rotateMotorSusan+0x28>
	}
}
 80013de:	bf00      	nop
 80013e0:	bf00      	nop
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	2000000c 	.word	0x2000000c
 80013ec:	40020400 	.word	0x40020400
 80013f0:	20000008 	.word	0x20000008

080013f4 <setClockwiseRod>:

void setClockwiseRod() {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ROD_DIR_PORT, ROD_DIR_PIN, GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013fe:	4802      	ldr	r0, [pc, #8]	; (8001408 <setClockwiseRod+0x14>)
 8001400:	f002 f94a 	bl	8003698 <HAL_GPIO_WritePin>
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40020800 	.word	0x40020800

0800140c <setClockwiseSusan>:

void setClockwiseSusan() {
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SUSAN_DIR_PORT, SUSAN_DIR_PIN, GPIO_PIN_SET);
 8001410:	2201      	movs	r2, #1
 8001412:	2140      	movs	r1, #64	; 0x40
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <setClockwiseSusan+0x14>)
 8001416:	f002 f93f 	bl	8003698 <HAL_GPIO_WritePin>
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40020400 	.word	0x40020400

08001424 <setCounterClockwiseRod>:

void setCounterClockwiseRod() {
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ROD_DIR_PORT, ROD_DIR_PIN, GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800142e:	4802      	ldr	r0, [pc, #8]	; (8001438 <setCounterClockwiseRod+0x14>)
 8001430:	f002 f932 	bl	8003698 <HAL_GPIO_WritePin>
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40020800 	.word	0x40020800

0800143c <setCounterClockwiseSusan>:

void setCounterClockwiseSusan() {
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SUSAN_DIR_PORT, SUSAN_DIR_PIN, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	2140      	movs	r1, #64	; 0x40
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <setCounterClockwiseSusan+0x14>)
 8001446:	f002 f927 	bl	8003698 <HAL_GPIO_WritePin>
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40020400 	.word	0x40020400

08001454 <microDelay>:

void microDelay (uint16_t delay)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <microDelay+0x30>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8001466:	bf00      	nop
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <microDelay+0x30>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	429a      	cmp	r2, r3
 8001472:	d3f9      	bcc.n	8001468 <microDelay+0x14>
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	2000019c 	.word	0x2000019c

08001488 <setupMotorRod>:

void setupMotorRod() {
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ROD_SLEEP_PORT, ROD_SLEEP_PIN, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	2104      	movs	r1, #4
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <setupMotorRod+0x20>)
 8001492:	f002 f901 	bl	8003698 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROD_ENABLE_PORT, ROD_ENABLE_PIN, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800149c:	4803      	ldr	r0, [pc, #12]	; (80014ac <setupMotorRod+0x24>)
 800149e:	f002 f8fb 	bl	8003698 <HAL_GPIO_WritePin>
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40020c00 	.word	0x40020c00
 80014ac:	40020800 	.word	0x40020800

080014b0 <setupMotorSusan>:

void setupMotorSusan() {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SUSAN_SLEEP_PORT, SUSAN_SLEEP_PIN, GPIO_PIN_SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	2180      	movs	r1, #128	; 0x80
 80014b8:	4804      	ldr	r0, [pc, #16]	; (80014cc <setupMotorSusan+0x1c>)
 80014ba:	f002 f8ed 	bl	8003698 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SUSAN_ENABLE_PORT, SUSAN_ENABLE_PIN, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	2110      	movs	r1, #16
 80014c2:	4802      	ldr	r0, [pc, #8]	; (80014cc <setupMotorSusan+0x1c>)
 80014c4:	f002 f8e8 	bl	8003698 <HAL_GPIO_WritePin>
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40020400 	.word	0x40020400

080014d0 <turnOffMotorRod>:

void turnOffMotorRod() {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ROD_SLEEP_PORT, ROD_SLEEP_PIN, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2104      	movs	r1, #4
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <turnOffMotorRod+0x14>)
 80014da:	f002 f8dd 	bl	8003698 <HAL_GPIO_WritePin>
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40020c00 	.word	0x40020c00

080014e8 <turnOffMotorSusan>:

void turnOffMotorSusan() {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SUSAN_SLEEP_PORT, SUSAN_SLEEP_PIN, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2180      	movs	r1, #128	; 0x80
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <turnOffMotorSusan+0x14>)
 80014f2:	f002 f8d1 	bl	8003698 <HAL_GPIO_WritePin>
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40020400 	.word	0x40020400

08001500 <setupLightSensor>:
///////////////////////////////////////////////////////////////////

void setupLightSensor(uint8_t lightAddress) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af02      	add	r7, sp, #8
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
	uint8_t data_send[3] = {0};
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <setupLightSensor+0x4c>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	81bb      	strh	r3, [r7, #12]
 8001510:	2300      	movs	r3, #0
 8001512:	73bb      	strb	r3, [r7, #14]
	data_send[0] = 0x0A;
 8001514:	230a      	movs	r3, #10
 8001516:	733b      	strb	r3, [r7, #12]
	data_send[1] = 0x32;
 8001518:	2332      	movs	r3, #50	; 0x32
 800151a:	737b      	strb	r3, [r7, #13]
	data_send[2] = 0xF8;
 800151c:	23f8      	movs	r3, #248	; 0xf8
 800151e:	73bb      	strb	r3, [r7, #14]
	while (HAL_I2C_Master_Transmit(&hi2c3, (lightAddress << 1), data_send, 3, 20) != HAL_OK){}
 8001520:	bf00      	nop
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	b29b      	uxth	r3, r3
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	b299      	uxth	r1, r3
 800152a:	f107 020c 	add.w	r2, r7, #12
 800152e:	2314      	movs	r3, #20
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2303      	movs	r3, #3
 8001534:	4806      	ldr	r0, [pc, #24]	; (8001550 <setupLightSensor+0x50>)
 8001536:	f002 fa0d 	bl	8003954 <HAL_I2C_Master_Transmit>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f0      	bne.n	8001522 <setupLightSensor+0x22>
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	08007f68 	.word	0x08007f68
 8001550:	20000148 	.word	0x20000148
 8001554:	00000000 	.word	0x00000000

08001558 <getLightData>:

float getLightData(uint8_t lightAddress) {
 8001558:	b5b0      	push	{r4, r5, r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af02      	add	r7, sp, #8
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
	uint8_t data_send[4] = {0};
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
	uint8_t data_in [2] = {0};
 8001566:	2300      	movs	r3, #0
 8001568:	81bb      	strh	r3, [r7, #12]
	uint16_t exp;
	uint16_t man;
	uint16_t alldata;
	float ans = 0;
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]

	data_send[0] = 0x00;
 8001570:	2300      	movs	r3, #0
 8001572:	743b      	strb	r3, [r7, #16]
	while (HAL_I2C_GetState(&hi2c3) != HAL_I2C_STATE_READY){}
 8001574:	bf00      	nop
 8001576:	483c      	ldr	r0, [pc, #240]	; (8001668 <getLightData+0x110>)
 8001578:	f002 fd10 	bl	8003f9c <HAL_I2C_GetState>
 800157c:	4603      	mov	r3, r0
 800157e:	2b20      	cmp	r3, #32
 8001580:	d1f9      	bne.n	8001576 <getLightData+0x1e>
	while (HAL_I2C_Master_Transmit(&hi2c3, (lightAddress << 1), data_send, 1, 20) != HAL_OK){}
 8001582:	bf00      	nop
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	b29b      	uxth	r3, r3
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	b299      	uxth	r1, r3
 800158c:	f107 0210 	add.w	r2, r7, #16
 8001590:	2314      	movs	r3, #20
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2301      	movs	r3, #1
 8001596:	4834      	ldr	r0, [pc, #208]	; (8001668 <getLightData+0x110>)
 8001598:	f002 f9dc 	bl	8003954 <HAL_I2C_Master_Transmit>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <getLightData+0x2c>
	while (HAL_I2C_GetState(&hi2c3) != HAL_I2C_STATE_READY){}
 80015a2:	bf00      	nop
 80015a4:	4830      	ldr	r0, [pc, #192]	; (8001668 <getLightData+0x110>)
 80015a6:	f002 fcf9 	bl	8003f9c <HAL_I2C_GetState>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b20      	cmp	r3, #32
 80015ae:	d1f9      	bne.n	80015a4 <getLightData+0x4c>
	while (HAL_I2C_Master_Receive(&hi2c3, (lightAddress << 1 | 1), data_in, 2, HAL_MAX_DELAY)){}
 80015b0:	bf00      	nop
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	b21b      	sxth	r3, r3
 80015be:	b299      	uxth	r1, r3
 80015c0:	f107 020c 	add.w	r2, r7, #12
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2302      	movs	r3, #2
 80015cc:	4826      	ldr	r0, [pc, #152]	; (8001668 <getLightData+0x110>)
 80015ce:	f002 fabf 	bl	8003b50 <HAL_I2C_Master_Receive>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1ec      	bne.n	80015b2 <getLightData+0x5a>

	alldata = data_in[0];
 80015d8:	7b3b      	ldrb	r3, [r7, #12]
 80015da:	837b      	strh	r3, [r7, #26]
	alldata = (alldata << 8) | data_in[1];
 80015dc:	8b7b      	ldrh	r3, [r7, #26]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	b21a      	sxth	r2, r3
 80015e2:	7b7b      	ldrb	r3, [r7, #13]
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	837b      	strh	r3, [r7, #26]
	man = alldata & 0x0FFF;
 80015ec:	8b7b      	ldrh	r3, [r7, #26]
 80015ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f2:	833b      	strh	r3, [r7, #24]
	exp = (alldata & 0xF000) >> 12;
 80015f4:	8b7b      	ldrh	r3, [r7, #26]
 80015f6:	0b1b      	lsrs	r3, r3, #12
 80015f8:	82fb      	strh	r3, [r7, #22]

	ans = man * (0.01 * pow(2,exp));
 80015fa:	8b3b      	ldrh	r3, [r7, #24]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ff99 	bl	8000534 <__aeabi_i2d>
 8001602:	4604      	mov	r4, r0
 8001604:	460d      	mov	r5, r1
 8001606:	8afb      	ldrh	r3, [r7, #22]
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ff83 	bl	8000514 <__aeabi_ui2d>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	ec43 2b11 	vmov	d1, r2, r3
 8001616:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8001658 <getLightData+0x100>
 800161a:	f005 faf7 	bl	8006c0c <pow>
 800161e:	ec51 0b10 	vmov	r0, r1, d0
 8001622:	a30f      	add	r3, pc, #60	; (adr r3, 8001660 <getLightData+0x108>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7fe ffee 	bl	8000608 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4620      	mov	r0, r4
 8001632:	4629      	mov	r1, r5
 8001634:	f7fe ffe8 	bl	8000608 <__aeabi_dmul>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	f7ff fa92 	bl	8000b68 <__aeabi_d2f>
 8001644:	4603      	mov	r3, r0
 8001646:	61fb      	str	r3, [r7, #28]

	return ans;
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	ee07 3a90 	vmov	s15, r3
}
 800164e:	eeb0 0a67 	vmov.f32	s0, s15
 8001652:	3720      	adds	r7, #32
 8001654:	46bd      	mov	sp, r7
 8001656:	bdb0      	pop	{r4, r5, r7, pc}
 8001658:	00000000 	.word	0x00000000
 800165c:	40000000 	.word	0x40000000
 8001660:	47ae147b 	.word	0x47ae147b
 8001664:	3f847ae1 	.word	0x3f847ae1
 8001668:	20000148 	.word	0x20000148
 800166c:	00000000 	.word	0x00000000

08001670 <getSolarPanelVoltage>:


float getSolarPanelVoltage() {
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
	unsigned int analogValue = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]

	HAL_ADC_Start(&hadc1);
 800167a:	4827      	ldr	r0, [pc, #156]	; (8001718 <getSolarPanelVoltage+0xa8>)
 800167c:	f001 f9f4 	bl	8002a68 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 300) == HAL_OK) {
 8001680:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001684:	4824      	ldr	r0, [pc, #144]	; (8001718 <getSolarPanelVoltage+0xa8>)
 8001686:	f001 fad6 	bl	8002c36 <HAL_ADC_PollForConversion>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d103      	bne.n	8001698 <getSolarPanelVoltage+0x28>
		analogValue = HAL_ADC_GetValue(&hadc1);
 8001690:	4821      	ldr	r0, [pc, #132]	; (8001718 <getSolarPanelVoltage+0xa8>)
 8001692:	f001 fb5b 	bl	8002d4c <HAL_ADC_GetValue>
 8001696:	6178      	str	r0, [r7, #20]
	}

	HAL_ADC_Stop(&hadc1);
 8001698:	481f      	ldr	r0, [pc, #124]	; (8001718 <getSolarPanelVoltage+0xa8>)
 800169a:	f001 fa99 	bl	8002bd0 <HAL_ADC_Stop>

	//Value obtained from voltage divider
	int voltageDividerLargeRes = 14;
 800169e:	230e      	movs	r3, #14
 80016a0:	613b      	str	r3, [r7, #16]
	float voltageDividerSmallRes = 3.1;
 80016a2:	4b1e      	ldr	r3, [pc, #120]	; (800171c <getSolarPanelVoltage+0xac>)
 80016a4:	60fb      	str	r3, [r7, #12]
	float measuredVoltage = (analogValue * 3.1 /  4096);
 80016a6:	6978      	ldr	r0, [r7, #20]
 80016a8:	f7fe ff34 	bl	8000514 <__aeabi_ui2d>
 80016ac:	a318      	add	r3, pc, #96	; (adr r3, 8001710 <getSolarPanelVoltage+0xa0>)
 80016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b2:	f7fe ffa9 	bl	8000608 <__aeabi_dmul>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <getSolarPanelVoltage+0xb0>)
 80016c4:	f7ff f8ca 	bl	800085c <__aeabi_ddiv>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff fa4a 	bl	8000b68 <__aeabi_d2f>
 80016d4:	4603      	mov	r3, r0
 80016d6:	60bb      	str	r3, [r7, #8]
	float solarPanelVoltage = (measuredVoltage * (voltageDividerLargeRes + voltageDividerSmallRes) / voltageDividerSmallRes);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80016e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80016ee:	ee67 6a27 	vmul.f32	s13, s14, s15
 80016f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80016f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016fa:	edc7 7a01 	vstr	s15, [r7, #4]

	return solarPanelVoltage;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	ee07 3a90 	vmov	s15, r3
}
 8001704:	eeb0 0a67 	vmov.f32	s0, s15
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	cccccccd 	.word	0xcccccccd
 8001714:	4008cccc 	.word	0x4008cccc
 8001718:	200000ac 	.word	0x200000ac
 800171c:	40466666 	.word	0x40466666
 8001720:	40b00000 	.word	0x40b00000

08001724 <getGpsData>:

void getGpsData(float* lat, float* longi, float* time, float* date, char* longDir, char* latDir) {
 8001724:	b5b0      	push	{r4, r5, r7, lr}
 8001726:	b0b8      	sub	sp, #224	; 0xe0
 8001728:	af02      	add	r7, sp, #8
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	603b      	str	r3, [r7, #0]
	uint8_t gpsDataTx [10] = {0}; //Data to send to GPS module
 8001732:	2300      	movs	r3, #0
 8001734:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001738:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	809a      	strh	r2, [r3, #4]
	uint8_t gpsDataReady [2] = {0}; //Data to check if gps module ready
 8001742:	2300      	movs	r3, #0
 8001744:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	uint8_t gpsDataRx1 [32] = {0}; //Buffer 1
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800174e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]
 800175e:	615a      	str	r2, [r3, #20]
 8001760:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx2 [32] = {0}; //Buffer 2
 8001762:	2300      	movs	r3, #0
 8001764:	667b      	str	r3, [r7, #100]	; 0x64
 8001766:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
 8001774:	611a      	str	r2, [r3, #16]
 8001776:	615a      	str	r2, [r3, #20]
 8001778:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx3 [32] = {0}; //Buffer 3
 800177a:	2300      	movs	r3, #0
 800177c:	647b      	str	r3, [r7, #68]	; 0x44
 800177e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]
 800178e:	615a      	str	r2, [r3, #20]
 8001790:	619a      	str	r2, [r3, #24]
	uint8_t gpsDataRx4 [4] = {0}; //Buffer 4
 8001792:	2300      	movs	r3, #0
 8001794:	643b      	str	r3, [r7, #64]	; 0x40

	//////////////////////////////////////////////////////////////////////////////////////////
	//INITIALIZATION
	gpsDataTx[0] = 0xB5;
 8001796:	23b5      	movs	r3, #181	; 0xb5
 8001798:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	gpsDataTx[1] = 0x62;
 800179c:	2362      	movs	r3, #98	; 0x62
 800179e:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
	gpsDataTx[2] = 0xF0;
 80017a2:	23f0      	movs	r3, #240	; 0xf0
 80017a4:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
	gpsDataTx[3] = 0x04;
 80017a8:	2304      	movs	r3, #4
 80017aa:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80017ae:	bf00      	nop
 80017b0:	480e      	ldr	r0, [pc, #56]	; (80017ec <getGpsData+0xc8>)
 80017b2:	f002 fbf3 	bl	8003f9c <HAL_I2C_GetState>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b20      	cmp	r3, #32
 80017ba:	d1f9      	bne.n	80017b0 <getGpsData+0x8c>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 4, 20) != HAL_OK){}
 80017bc:	bf00      	nop
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <getGpsData+0xcc>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	b299      	uxth	r1, r3
 80017c6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80017ca:	2314      	movs	r3, #20
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2304      	movs	r3, #4
 80017d0:	4806      	ldr	r0, [pc, #24]	; (80017ec <getGpsData+0xc8>)
 80017d2:	f002 f8bf 	bl	8003954 <HAL_I2C_Master_Transmit>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f0      	bne.n	80017be <getGpsData+0x9a>

//		/////////////////////////////////////////////////////////////////////////////////////////
//
//		//WAITING FOR DATA READY
	gpsDataReady[0] = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
	gpsDataReady[1] = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
	while ((gpsDataReady[0] == 0) && (gpsDataReady[1] == 0)) //We leave as soon as read something non zero
 80017e8:	e02b      	b.n	8001842 <getGpsData+0x11e>
 80017ea:	bf00      	nop
 80017ec:	200000f4 	.word	0x200000f4
 80017f0:	20000002 	.word	0x20000002
	{
		gpsDataTx[0] = 0xFD;
 80017f4:	23fd      	movs	r3, #253	; 0xfd
 80017f6:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
		HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, HAL_MAX_DELAY);
 80017fa:	4bb5      	ldr	r3, [pc, #724]	; (8001ad0 <getGpsData+0x3ac>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	b299      	uxth	r1, r3
 8001802:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2301      	movs	r3, #1
 800180e:	48b1      	ldr	r0, [pc, #708]	; (8001ad4 <getGpsData+0x3b0>)
 8001810:	f002 f8a0 	bl	8003954 <HAL_I2C_Master_Transmit>
		gpsDataReady[0] = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
		gpsDataReady[1] = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
		HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataReady, 2, HAL_MAX_DELAY);
 8001820:	4bab      	ldr	r3, [pc, #684]	; (8001ad0 <getGpsData+0x3ac>)
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	b21b      	sxth	r3, r3
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	b21b      	sxth	r3, r3
 800182e:	b299      	uxth	r1, r3
 8001830:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001834:	f04f 33ff 	mov.w	r3, #4294967295
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2302      	movs	r3, #2
 800183c:	48a5      	ldr	r0, [pc, #660]	; (8001ad4 <getGpsData+0x3b0>)
 800183e:	f002 f987 	bl	8003b50 <HAL_I2C_Master_Receive>
	while ((gpsDataReady[0] == 0) && (gpsDataReady[1] == 0)) //We leave as soon as read something non zero
 8001842:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8001846:	2b00      	cmp	r3, #0
 8001848:	d103      	bne.n	8001852 <getGpsData+0x12e>
 800184a:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0d0      	beq.n	80017f4 <getGpsData+0xd0>
	}


//		//Buffer 1
	gpsDataTx[0] = 0xFF;
 8001852:	23ff      	movs	r3, #255	; 0xff
 8001854:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8001858:	bf00      	nop
 800185a:	489e      	ldr	r0, [pc, #632]	; (8001ad4 <getGpsData+0x3b0>)
 800185c:	f002 fb9e 	bl	8003f9c <HAL_I2C_GetState>
 8001860:	4603      	mov	r3, r0
 8001862:	2b20      	cmp	r3, #32
 8001864:	d1f9      	bne.n	800185a <getGpsData+0x136>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 8001866:	bf00      	nop
 8001868:	4b99      	ldr	r3, [pc, #612]	; (8001ad0 <getGpsData+0x3ac>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	b299      	uxth	r1, r3
 8001870:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001874:	2314      	movs	r3, #20
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2301      	movs	r3, #1
 800187a:	4896      	ldr	r0, [pc, #600]	; (8001ad4 <getGpsData+0x3b0>)
 800187c:	f002 f86a 	bl	8003954 <HAL_I2C_Master_Transmit>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <getGpsData+0x144>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8001886:	bf00      	nop
 8001888:	4892      	ldr	r0, [pc, #584]	; (8001ad4 <getGpsData+0x3b0>)
 800188a:	f002 fb87 	bl	8003f9c <HAL_I2C_GetState>
 800188e:	4603      	mov	r3, r0
 8001890:	2b20      	cmp	r3, #32
 8001892:	d1f9      	bne.n	8001888 <getGpsData+0x164>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx1, 32, HAL_MAX_DELAY)){}
 8001894:	bf00      	nop
 8001896:	4b8e      	ldr	r3, [pc, #568]	; (8001ad0 <getGpsData+0x3ac>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	b21b      	sxth	r3, r3
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	b299      	uxth	r1, r3
 80018a6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	2320      	movs	r3, #32
 80018b2:	4888      	ldr	r0, [pc, #544]	; (8001ad4 <getGpsData+0x3b0>)
 80018b4:	f002 f94c 	bl	8003b50 <HAL_I2C_Master_Receive>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1eb      	bne.n	8001896 <getGpsData+0x172>
//
//		//Buffer 2
	gpsDataTx[0] = 0xFF;
 80018be:	23ff      	movs	r3, #255	; 0xff
 80018c0:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80018c4:	bf00      	nop
 80018c6:	4883      	ldr	r0, [pc, #524]	; (8001ad4 <getGpsData+0x3b0>)
 80018c8:	f002 fb68 	bl	8003f9c <HAL_I2C_GetState>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b20      	cmp	r3, #32
 80018d0:	d1f9      	bne.n	80018c6 <getGpsData+0x1a2>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 80018d2:	bf00      	nop
 80018d4:	4b7e      	ldr	r3, [pc, #504]	; (8001ad0 <getGpsData+0x3ac>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	b299      	uxth	r1, r3
 80018dc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80018e0:	2314      	movs	r3, #20
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2301      	movs	r3, #1
 80018e6:	487b      	ldr	r0, [pc, #492]	; (8001ad4 <getGpsData+0x3b0>)
 80018e8:	f002 f834 	bl	8003954 <HAL_I2C_Master_Transmit>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <getGpsData+0x1b0>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80018f2:	bf00      	nop
 80018f4:	4877      	ldr	r0, [pc, #476]	; (8001ad4 <getGpsData+0x3b0>)
 80018f6:	f002 fb51 	bl	8003f9c <HAL_I2C_GetState>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b20      	cmp	r3, #32
 80018fe:	d1f9      	bne.n	80018f4 <getGpsData+0x1d0>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx2, 32, HAL_MAX_DELAY)){}
 8001900:	bf00      	nop
 8001902:	4b73      	ldr	r3, [pc, #460]	; (8001ad0 <getGpsData+0x3ac>)
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	b21b      	sxth	r3, r3
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	b21b      	sxth	r3, r3
 8001910:	b299      	uxth	r1, r3
 8001912:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2320      	movs	r3, #32
 800191e:	486d      	ldr	r0, [pc, #436]	; (8001ad4 <getGpsData+0x3b0>)
 8001920:	f002 f916 	bl	8003b50 <HAL_I2C_Master_Receive>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1eb      	bne.n	8001902 <getGpsData+0x1de>
//
//		//Buffer 3
	gpsDataTx[0] = 0xFF;
 800192a:	23ff      	movs	r3, #255	; 0xff
 800192c:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8001930:	bf00      	nop
 8001932:	4868      	ldr	r0, [pc, #416]	; (8001ad4 <getGpsData+0x3b0>)
 8001934:	f002 fb32 	bl	8003f9c <HAL_I2C_GetState>
 8001938:	4603      	mov	r3, r0
 800193a:	2b20      	cmp	r3, #32
 800193c:	d1f9      	bne.n	8001932 <getGpsData+0x20e>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 800193e:	bf00      	nop
 8001940:	4b63      	ldr	r3, [pc, #396]	; (8001ad0 <getGpsData+0x3ac>)
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	b299      	uxth	r1, r3
 8001948:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800194c:	2314      	movs	r3, #20
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2301      	movs	r3, #1
 8001952:	4860      	ldr	r0, [pc, #384]	; (8001ad4 <getGpsData+0x3b0>)
 8001954:	f001 fffe 	bl	8003954 <HAL_I2C_Master_Transmit>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <getGpsData+0x21c>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800195e:	bf00      	nop
 8001960:	485c      	ldr	r0, [pc, #368]	; (8001ad4 <getGpsData+0x3b0>)
 8001962:	f002 fb1b 	bl	8003f9c <HAL_I2C_GetState>
 8001966:	4603      	mov	r3, r0
 8001968:	2b20      	cmp	r3, #32
 800196a:	d1f9      	bne.n	8001960 <getGpsData+0x23c>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx3, 32, HAL_MAX_DELAY)){}
 800196c:	bf00      	nop
 800196e:	4b58      	ldr	r3, [pc, #352]	; (8001ad0 <getGpsData+0x3ac>)
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	b21b      	sxth	r3, r3
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	b21b      	sxth	r3, r3
 800197c:	b299      	uxth	r1, r3
 800197e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2320      	movs	r3, #32
 800198a:	4852      	ldr	r0, [pc, #328]	; (8001ad4 <getGpsData+0x3b0>)
 800198c:	f002 f8e0 	bl	8003b50 <HAL_I2C_Master_Receive>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1eb      	bne.n	800196e <getGpsData+0x24a>

	//Buffer 4
	gpsDataTx[0] = 0xFF;
 8001996:	23ff      	movs	r3, #255	; 0xff
 8001998:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 800199c:	bf00      	nop
 800199e:	484d      	ldr	r0, [pc, #308]	; (8001ad4 <getGpsData+0x3b0>)
 80019a0:	f002 fafc 	bl	8003f9c <HAL_I2C_GetState>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b20      	cmp	r3, #32
 80019a8:	d1f9      	bne.n	800199e <getGpsData+0x27a>
	while (HAL_I2C_Master_Transmit(&hi2c1, (gpsAddress << 1), gpsDataTx, 1, 20) != HAL_OK){}
 80019aa:	bf00      	nop
 80019ac:	4b48      	ldr	r3, [pc, #288]	; (8001ad0 <getGpsData+0x3ac>)
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	b299      	uxth	r1, r3
 80019b4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80019b8:	2314      	movs	r3, #20
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2301      	movs	r3, #1
 80019be:	4845      	ldr	r0, [pc, #276]	; (8001ad4 <getGpsData+0x3b0>)
 80019c0:	f001 ffc8 	bl	8003954 <HAL_I2C_Master_Transmit>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <getGpsData+0x288>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 80019ca:	bf00      	nop
 80019cc:	4841      	ldr	r0, [pc, #260]	; (8001ad4 <getGpsData+0x3b0>)
 80019ce:	f002 fae5 	bl	8003f9c <HAL_I2C_GetState>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b20      	cmp	r3, #32
 80019d6:	d1f9      	bne.n	80019cc <getGpsData+0x2a8>
	while (HAL_I2C_Master_Receive(&hi2c1, (gpsAddress << 1 | 1), gpsDataRx4, 4, HAL_MAX_DELAY)){}
 80019d8:	bf00      	nop
 80019da:	4b3d      	ldr	r3, [pc, #244]	; (8001ad0 <getGpsData+0x3ac>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	b21b      	sxth	r3, r3
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	b21b      	sxth	r3, r3
 80019e8:	b299      	uxth	r1, r3
 80019ea:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2304      	movs	r3, #4
 80019f6:	4837      	ldr	r0, [pc, #220]	; (8001ad4 <getGpsData+0x3b0>)
 80019f8:	f002 f8aa 	bl	8003b50 <HAL_I2C_Master_Receive>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1eb      	bne.n	80019da <getGpsData+0x2b6>


	//Create concaterated buffer
	 size_t totalSize = sizeof(gpsDataRx1) + sizeof(gpsDataRx2) + sizeof(gpsDataRx3) + sizeof(gpsDataRx4);
 8001a02:	2364      	movs	r3, #100	; 0x64
 8001a04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	// Allocate memory for the concatenated array
	uint8_t *concatenatedArray = (uint8_t *)malloc(totalSize);
 8001a08:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001a0c:	f004 f85e 	bl	8005acc <malloc>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	// Copy the contents of each array into the concatenated array
	size_t offset = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx1, sizeof(gpsDataRx1));
 8001a1c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001a20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a24:	4413      	add	r3, r2
 8001a26:	461d      	mov	r5, r3
 8001a28:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8001a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a2e:	6028      	str	r0, [r5, #0]
 8001a30:	6069      	str	r1, [r5, #4]
 8001a32:	60aa      	str	r2, [r5, #8]
 8001a34:	60eb      	str	r3, [r5, #12]
 8001a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a38:	6128      	str	r0, [r5, #16]
 8001a3a:	6169      	str	r1, [r5, #20]
 8001a3c:	61aa      	str	r2, [r5, #24]
 8001a3e:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx1);
 8001a40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a44:	3320      	adds	r3, #32
 8001a46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx2, sizeof(gpsDataRx2));
 8001a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001a4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a52:	4413      	add	r3, r2
 8001a54:	461d      	mov	r5, r3
 8001a56:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a5c:	6028      	str	r0, [r5, #0]
 8001a5e:	6069      	str	r1, [r5, #4]
 8001a60:	60aa      	str	r2, [r5, #8]
 8001a62:	60eb      	str	r3, [r5, #12]
 8001a64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a66:	6128      	str	r0, [r5, #16]
 8001a68:	6169      	str	r1, [r5, #20]
 8001a6a:	61aa      	str	r2, [r5, #24]
 8001a6c:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx2);
 8001a6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a72:	3320      	adds	r3, #32
 8001a74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx3, sizeof(gpsDataRx3));
 8001a78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001a7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a80:	4413      	add	r3, r2
 8001a82:	461d      	mov	r5, r3
 8001a84:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a8a:	6028      	str	r0, [r5, #0]
 8001a8c:	6069      	str	r1, [r5, #4]
 8001a8e:	60aa      	str	r2, [r5, #8]
 8001a90:	60eb      	str	r3, [r5, #12]
 8001a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a94:	6128      	str	r0, [r5, #16]
 8001a96:	6169      	str	r1, [r5, #20]
 8001a98:	61aa      	str	r2, [r5, #24]
 8001a9a:	61eb      	str	r3, [r5, #28]
	offset += sizeof(gpsDataRx3);
 8001a9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001aa0:	3320      	adds	r3, #32
 8001aa2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	memcpy(concatenatedArray + offset, gpsDataRx4, sizeof(gpsDataRx4));
 8001aa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001aaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001aae:	4413      	add	r3, r2
 8001ab0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ab2:	601a      	str	r2, [r3, #0]


	//String comparisons
	const char* GNRMC = "NRMC,";
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <getGpsData+0x3b4>)
 8001ab6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	const char* minus1 = "-1";
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <getGpsData+0x3b8>)
 8001abc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	const char* comma = ",";
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <getGpsData+0x3bc>)
 8001ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	char* gpsDataList[12];

	for (int i = 0; i < 12; i++) {
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001acc:	e017      	b.n	8001afe <getGpsData+0x3da>
 8001ace:	bf00      	nop
 8001ad0:	20000002 	.word	0x20000002
 8001ad4:	200000f4 	.word	0x200000f4
 8001ad8:	08007f6c 	.word	0x08007f6c
 8001adc:	08007f74 	.word	0x08007f74
 8001ae0:	08007f78 	.word	0x08007f78
	    gpsDataList[i] = "-1";
 8001ae4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	33d8      	adds	r3, #216	; 0xd8
 8001aec:	443b      	add	r3, r7
 8001aee:	4a99      	ldr	r2, [pc, #612]	; (8001d54 <getGpsData+0x630>)
 8001af0:	f843 2cc8 	str.w	r2, [r3, #-200]
	for (int i = 0; i < 12; i++) {
 8001af4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001af8:	3301      	adds	r3, #1
 8001afa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001afe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b02:	2b0b      	cmp	r3, #11
 8001b04:	ddee      	ble.n	8001ae4 <getGpsData+0x3c0>
	}

	//Parsing the data and updating our values

	if (strncmp(concatenatedArray, GNRMC, strlen(GNRMC)) == 0) {
 8001b06:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001b0a:	f7fe fb69 	bl	80001e0 <strlen>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	461a      	mov	r2, r3
 8001b12:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001b16:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001b1a:	f004 fa1a 	bl	8005f52 <strncmp>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d122      	bne.n	8001b6a <getGpsData+0x446>
		char* individualGpsData = strtok(concatenatedArray, ","); // Initialize strtok with the buffer
 8001b24:	498c      	ldr	r1, [pc, #560]	; (8001d58 <getGpsData+0x634>)
 8001b26:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001b2a:	f004 fa25 	bl	8005f78 <strtok>
 8001b2e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		int index = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

		while (individualGpsData != NULL) {
 8001b38:	e013      	b.n	8001b62 <getGpsData+0x43e>
			gpsDataList[index] = individualGpsData; // Store the token in an array
 8001b3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	33d8      	adds	r3, #216	; 0xd8
 8001b42:	443b      	add	r3, r7
 8001b44:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001b48:	f843 2cc8 	str.w	r2, [r3, #-200]
			individualGpsData = strtok(NULL, ","); // Get the next token
 8001b4c:	4982      	ldr	r1, [pc, #520]	; (8001d58 <getGpsData+0x634>)
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f004 fa12 	bl	8005f78 <strtok>
 8001b54:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
			index++;
 8001b58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		while (individualGpsData != NULL) {
 8001b62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1e7      	bne.n	8001b3a <getGpsData+0x416>
		}
	}

	//if the value is different from both -1 and ,, we update our time
	if ((strncmp(gpsDataList[1], minus1, strlen(minus1)) != 0) &&
 8001b6a:	697c      	ldr	r4, [r7, #20]
 8001b6c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001b70:	f7fe fb36 	bl	80001e0 <strlen>
 8001b74:	4603      	mov	r3, r0
 8001b76:	461a      	mov	r2, r3
 8001b78:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	f004 f9e8 	bl	8005f52 <strncmp>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d019      	beq.n	8001bbc <getGpsData+0x498>
	   (strncmp(gpsDataList[1], comma, strlen(comma)) != 0)) {
 8001b88:	697c      	ldr	r4, [r7, #20]
 8001b8a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001b8e:	f7fe fb27 	bl	80001e0 <strlen>
 8001b92:	4603      	mov	r3, r0
 8001b94:	461a      	mov	r2, r3
 8001b96:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	f004 f9d9 	bl	8005f52 <strncmp>
 8001ba0:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[1], minus1, strlen(minus1)) != 0) &&
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00a      	beq.n	8001bbc <getGpsData+0x498>
		*time = atoi(gpsDataList[1]);
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 ff8b 	bl	8005ac4 <atoi>
 8001bae:	ee07 0a90 	vmov	s15, r0
 8001bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((strncmp(gpsDataList[3], minus1, strlen(minus1)) != 0) &&
 8001bbc:	69fc      	ldr	r4, [r7, #28]
 8001bbe:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001bc2:	f7fe fb0d 	bl	80001e0 <strlen>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f004 f9bf 	bl	8005f52 <strncmp>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d019      	beq.n	8001c0e <getGpsData+0x4ea>
	   (strncmp(gpsDataList[3], comma, strlen(comma)) != 0)) {
 8001bda:	69fc      	ldr	r4, [r7, #28]
 8001bdc:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001be0:	f7fe fafe 	bl	80001e0 <strlen>
 8001be4:	4603      	mov	r3, r0
 8001be6:	461a      	mov	r2, r3
 8001be8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001bec:	4620      	mov	r0, r4
 8001bee:	f004 f9b0 	bl	8005f52 <strncmp>
 8001bf2:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[3], minus1, strlen(minus1)) != 0) &&
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00a      	beq.n	8001c0e <getGpsData+0x4ea>
		*lat = atoi(gpsDataList[3]);
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 ff62 	bl	8005ac4 <atoi>
 8001c00:	ee07 0a90 	vmov	s15, r0
 8001c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((strncmp(gpsDataList[4], minus1, strlen(minus1)) != 0) &&
 8001c0e:	6a3c      	ldr	r4, [r7, #32]
 8001c10:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001c14:	f7fe fae4 	bl	80001e0 <strlen>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001c20:	4620      	mov	r0, r4
 8001c22:	f004 f996 	bl	8005f52 <strncmp>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d014      	beq.n	8001c56 <getGpsData+0x532>
	   (strncmp(gpsDataList[4], comma, strlen(comma)) != 0)) {
 8001c2c:	6a3c      	ldr	r4, [r7, #32]
 8001c2e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001c32:	f7fe fad5 	bl	80001e0 <strlen>
 8001c36:	4603      	mov	r3, r0
 8001c38:	461a      	mov	r2, r3
 8001c3a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f004 f987 	bl	8005f52 <strncmp>
 8001c44:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[4], minus1, strlen(minus1)) != 0) &&
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <getGpsData+0x532>
		strcpy(latDir, gpsDataList[4]);
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8001c52:	f004 fa6f 	bl	8006134 <strcpy>
	}

	if ((strncmp(gpsDataList[5], minus1, strlen(minus1)) != 0) &&
 8001c56:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001c58:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001c5c:	f7fe fac0 	bl	80001e0 <strlen>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f004 f972 	bl	8005f52 <strncmp>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d019      	beq.n	8001ca8 <getGpsData+0x584>
	   (strncmp(gpsDataList[5], comma, strlen(comma)) != 0)) {
 8001c74:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001c76:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001c7a:	f7fe fab1 	bl	80001e0 <strlen>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001c86:	4620      	mov	r0, r4
 8001c88:	f004 f963 	bl	8005f52 <strncmp>
 8001c8c:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[5], minus1, strlen(minus1)) != 0) &&
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00a      	beq.n	8001ca8 <getGpsData+0x584>
		*longi = atoi(gpsDataList[5]);
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	4618      	mov	r0, r3
 8001c96:	f003 ff15 	bl	8005ac4 <atoi>
 8001c9a:	ee07 0a90 	vmov	s15, r0
 8001c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	edc3 7a00 	vstr	s15, [r3]
	}

	if ((strncmp(gpsDataList[6], minus1, strlen(minus1)) != 0) &&
 8001ca8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001caa:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001cae:	f7fe fa97 	bl	80001e0 <strlen>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f004 f949 	bl	8005f52 <strncmp>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d014      	beq.n	8001cf0 <getGpsData+0x5cc>
	   (strncmp(gpsDataList[6], comma, strlen(comma)) != 0)) {
 8001cc6:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001cc8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001ccc:	f7fe fa88 	bl	80001e0 <strlen>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001cd8:	4620      	mov	r0, r4
 8001cda:	f004 f93a 	bl	8005f52 <strncmp>
 8001cde:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[6], minus1, strlen(minus1)) != 0) &&
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <getGpsData+0x5cc>
		strcpy(longDir, gpsDataList[6]);
 8001ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001cec:	f004 fa22 	bl	8006134 <strcpy>
	}

	if ((strncmp(gpsDataList[8], minus1, strlen(minus1)) != 0) &&
 8001cf0:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001cf2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001cf6:	f7fe fa73 	bl	80001e0 <strlen>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001d02:	4620      	mov	r0, r4
 8001d04:	f004 f925 	bl	8005f52 <strncmp>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d019      	beq.n	8001d42 <getGpsData+0x61e>
	   (strncmp(gpsDataList[8], comma, strlen(comma)) != 0)) {
 8001d0e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001d10:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001d14:	f7fe fa64 	bl	80001e0 <strlen>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001d20:	4620      	mov	r0, r4
 8001d22:	f004 f916 	bl	8005f52 <strncmp>
 8001d26:	4603      	mov	r3, r0
	if ((strncmp(gpsDataList[8], minus1, strlen(minus1)) != 0) &&
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00a      	beq.n	8001d42 <getGpsData+0x61e>
		*date = atoi(gpsDataList[8]);
 8001d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 fec8 	bl	8005ac4 <atoi>
 8001d34:	ee07 0a90 	vmov	s15, r0
 8001d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	edc3 7a00 	vstr	s15, [r3]
	}

	free(concatenatedArray);
 8001d42:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001d46:	f003 fec9 	bl	8005adc <free>
}
 8001d4a:	bf00      	nop
 8001d4c:	37d8      	adds	r7, #216	; 0xd8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bdb0      	pop	{r4, r5, r7, pc}
 8001d52:	bf00      	nop
 8001d54:	08007f74 	.word	0x08007f74
 8001d58:	08007f78 	.word	0x08007f78

08001d5c <magnetometerData>:

float magnetometerData(float xCal,float yCal,float zCal) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08c      	sub	sp, #48	; 0x30
 8001d60:	af02      	add	r7, sp, #8
 8001d62:	ed87 0a03 	vstr	s0, [r7, #12]
 8001d66:	edc7 0a02 	vstr	s1, [r7, #8]
 8001d6a:	ed87 1a01 	vstr	s2, [r7, #4]
	int16_t magnetometerVal [3] = {0};
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	809a      	strh	r2, [r3, #4]

	while (HAL_I2C_Master_Transmit(&hi2c1, (magAddress << 1), &dataRegister, 1, 20) != HAL_OK){} //send data register address
 8001d78:	bf00      	nop
 8001d7a:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <magnetometerData+0xa4>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	b299      	uxth	r1, r3
 8001d84:	2314      	movs	r3, #20
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2301      	movs	r3, #1
 8001d8a:	4a1e      	ldr	r2, [pc, #120]	; (8001e04 <magnetometerData+0xa8>)
 8001d8c:	481e      	ldr	r0, [pc, #120]	; (8001e08 <magnetometerData+0xac>)
 8001d8e:	f001 fde1 	bl	8003954 <HAL_I2C_Master_Transmit>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f0      	bne.n	8001d7a <magnetometerData+0x1e>
	while (HAL_I2C_Master_Receive(&hi2c1, (magAddress << 1 | 1), magnetometerVal, 6, HAL_MAX_DELAY)){}
 8001d98:	bf00      	nop
 8001d9a:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <magnetometerData+0xa4>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	b21b      	sxth	r3, r3
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	b21b      	sxth	r3, r3
 8001da8:	b299      	uxth	r1, r3
 8001daa:	f107 0214 	add.w	r2, r7, #20
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	2306      	movs	r3, #6
 8001db6:	4814      	ldr	r0, [pc, #80]	; (8001e08 <magnetometerData+0xac>)
 8001db8:	f001 feca 	bl	8003b50 <HAL_I2C_Master_Receive>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1eb      	bne.n	8001d9a <magnetometerData+0x3e>

	int16_t xMag = magnetometerVal[0];
 8001dc2:	8abb      	ldrh	r3, [r7, #20]
 8001dc4:	84fb      	strh	r3, [r7, #38]	; 0x26

	int16_t yMag = magnetometerVal[1];
 8001dc6:	8afb      	ldrh	r3, [r7, #22]
 8001dc8:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t zMag = magnetometerVal[2];
 8001dca:	8b3b      	ldrh	r3, [r7, #24]
 8001dcc:	847b      	strh	r3, [r7, #34]	; 0x22

	float direction = getDirectionAngle(xMag, yMag, zMag, xCal, yCal, zCal);
 8001dce:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8001dd2:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	; 0x24
 8001dd6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001dda:	ed97 1a01 	vldr	s2, [r7, #4]
 8001dde:	edd7 0a02 	vldr	s1, [r7, #8]
 8001de2:	ed97 0a03 	vldr	s0, [r7, #12]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 f812 	bl	8001e10 <getDirectionAngle>
 8001dec:	ed87 0a07 	vstr	s0, [r7, #28]

	return direction;
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	ee07 3a90 	vmov	s15, r3
}
 8001df6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dfa:	3728      	adds	r7, #40	; 0x28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000000 	.word	0x20000000
 8001e04:	20000001 	.word	0x20000001
 8001e08:	200000f4 	.word	0x200000f4
 8001e0c:	00000000 	.word	0x00000000

08001e10 <getDirectionAngle>:
  *xCal = (xMax + xMin) / 2;
  *yCal = (yMax + yMin) / 2;
  *zCal = (zMax + zMin) / 2;
}

float getDirectionAngle(int16_t xMag, int16_t yMag, int16_t zMag, float xCal, float yCal, float zCal){
 8001e10:	b5b0      	push	{r4, r5, r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e1c:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e20:	ed87 1a01 	vstr	s2, [r7, #4]
 8001e24:	82fb      	strh	r3, [r7, #22]
 8001e26:	460b      	mov	r3, r1
 8001e28:	82bb      	strh	r3, [r7, #20]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	827b      	strh	r3, [r7, #18]
  xMag -= xCal;
 8001e2e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e32:	ee07 3a90 	vmov	s15, r3
 8001e36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e46:	ee17 3a90 	vmov	r3, s15
 8001e4a:	82fb      	strh	r3, [r7, #22]
  yMag -= yCal;
 8001e4c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e50:	ee07 3a90 	vmov	s15, r3
 8001e54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e58:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e64:	ee17 3a90 	vmov	r3, s15
 8001e68:	82bb      	strh	r3, [r7, #20]
  zMag -= zCal;
 8001e6a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e6e:	ee07 3a90 	vmov	s15, r3
 8001e72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e82:	ee17 3a90 	vmov	r3, s15
 8001e86:	827b      	strh	r3, [r7, #18]

  float D = atan2(xMag, yMag) * (180 / M_PI);
 8001e88:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe fb51 	bl	8000534 <__aeabi_i2d>
 8001e92:	4604      	mov	r4, r0
 8001e94:	460d      	mov	r5, r1
 8001e96:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fb4a 	bl	8000534 <__aeabi_i2d>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	ec43 2b11 	vmov	d1, r2, r3
 8001ea8:	ec45 4b10 	vmov	d0, r4, r5
 8001eac:	f004 feac 	bl	8006c08 <atan2>
 8001eb0:	ec51 0b10 	vmov	r0, r1, d0
 8001eb4:	a31b      	add	r3, pc, #108	; (adr r3, 8001f24 <getDirectionAngle+0x114>)
 8001eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eba:	f7fe fba5 	bl	8000608 <__aeabi_dmul>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f7fe fe4f 	bl	8000b68 <__aeabi_d2f>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	61fb      	str	r3, [r7, #28]

  if (D > 360) {
 8001ece:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ed2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001f20 <getDirectionAngle+0x110>
 8001ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ede:	dd08      	ble.n	8001ef2 <getDirectionAngle+0xe2>
    D -= 360;
 8001ee0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ee4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001f20 <getDirectionAngle+0x110>
 8001ee8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001eec:	edc7 7a07 	vstr	s15, [r7, #28]
 8001ef0:	e00e      	b.n	8001f10 <getDirectionAngle+0x100>
  }
  else if (D < 0){
 8001ef2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ef6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efe:	d507      	bpl.n	8001f10 <getDirectionAngle+0x100>
    D += 360;
 8001f00:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f04:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001f20 <getDirectionAngle+0x110>
 8001f08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f0c:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  return D;
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	ee07 3a90 	vmov	s15, r3
}
 8001f16:	eeb0 0a67 	vmov.f32	s0, s15
 8001f1a:	3720      	adds	r7, #32
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f20:	43b40000 	.word	0x43b40000
 8001f24:	1a63c1f8 	.word	0x1a63c1f8
 8001f28:	404ca5dc 	.word	0x404ca5dc

08001f2c <SystemClock_Config>:


void SystemClock_Config(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b094      	sub	sp, #80	; 0x50
 8001f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f32:	f107 0320 	add.w	r3, r7, #32
 8001f36:	2230      	movs	r2, #48	; 0x30
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f004 f801 	bl	8005f42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f50:	2300      	movs	r3, #0
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <SystemClock_Config+0xc8>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	4a26      	ldr	r2, [pc, #152]	; (8001ff4 <SystemClock_Config+0xc8>)
 8001f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f60:	4b24      	ldr	r3, [pc, #144]	; (8001ff4 <SystemClock_Config+0xc8>)
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <SystemClock_Config+0xcc>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a20      	ldr	r2, [pc, #128]	; (8001ff8 <SystemClock_Config+0xcc>)
 8001f76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ff8 <SystemClock_Config+0xcc>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f90:	2310      	movs	r3, #16
 8001f92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f94:	2302      	movs	r3, #2
 8001f96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001fa0:	2348      	movs	r3, #72	; 0x48
 8001fa2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001fa8:	2304      	movs	r3, #4
 8001faa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fac:	f107 0320 	add.w	r3, r7, #32
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f002 fb2f 	bl	8004614 <HAL_RCC_OscConfig>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fbc:	f000 f9f6 	bl	80023ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fc0:	230f      	movs	r3, #15
 8001fc2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	2102      	movs	r1, #2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f002 fd91 	bl	8004b04 <HAL_RCC_ClockConfig>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001fe8:	f000 f9e0 	bl	80023ac <Error_Handler>
  }
}
 8001fec:	bf00      	nop
 8001fee:	3750      	adds	r7, #80	; 0x50
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40007000 	.word	0x40007000

08001ffc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002002:	463b      	mov	r3, r7
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800200e:	4b21      	ldr	r3, [pc, #132]	; (8002094 <MX_ADC1_Init+0x98>)
 8002010:	4a21      	ldr	r2, [pc, #132]	; (8002098 <MX_ADC1_Init+0x9c>)
 8002012:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002014:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <MX_ADC1_Init+0x98>)
 8002016:	2200      	movs	r2, #0
 8002018:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800201a:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <MX_ADC1_Init+0x98>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002020:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <MX_ADC1_Init+0x98>)
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <MX_ADC1_Init+0x98>)
 8002028:	2200      	movs	r2, #0
 800202a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800202c:	4b19      	ldr	r3, [pc, #100]	; (8002094 <MX_ADC1_Init+0x98>)
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002034:	4b17      	ldr	r3, [pc, #92]	; (8002094 <MX_ADC1_Init+0x98>)
 8002036:	2200      	movs	r2, #0
 8002038:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800203a:	4b16      	ldr	r3, [pc, #88]	; (8002094 <MX_ADC1_Init+0x98>)
 800203c:	4a17      	ldr	r2, [pc, #92]	; (800209c <MX_ADC1_Init+0xa0>)
 800203e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <MX_ADC1_Init+0x98>)
 8002042:	2200      	movs	r2, #0
 8002044:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <MX_ADC1_Init+0x98>)
 8002048:	2201      	movs	r2, #1
 800204a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_ADC1_Init+0x98>)
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <MX_ADC1_Init+0x98>)
 8002056:	2201      	movs	r2, #1
 8002058:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800205a:	480e      	ldr	r0, [pc, #56]	; (8002094 <MX_ADC1_Init+0x98>)
 800205c:	f000 fcc0 	bl	80029e0 <HAL_ADC_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002066:	f000 f9a1 	bl	80023ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800206a:	2300      	movs	r3, #0
 800206c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800206e:	2301      	movs	r3, #1
 8002070:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002072:	2300      	movs	r3, #0
 8002074:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002076:	463b      	mov	r3, r7
 8002078:	4619      	mov	r1, r3
 800207a:	4806      	ldr	r0, [pc, #24]	; (8002094 <MX_ADC1_Init+0x98>)
 800207c:	f000 fe74 	bl	8002d68 <HAL_ADC_ConfigChannel>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002086:	f000 f991 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200000ac 	.word	0x200000ac
 8002098:	40012000 	.word	0x40012000
 800209c:	0f000001 	.word	0x0f000001

080020a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020a4:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <MX_I2C1_Init+0x50>)
 80020a6:	4a13      	ldr	r2, [pc, #76]	; (80020f4 <MX_I2C1_Init+0x54>)
 80020a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020aa:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <MX_I2C1_Init+0x50>)
 80020ac:	4a12      	ldr	r2, [pc, #72]	; (80020f8 <MX_I2C1_Init+0x58>)
 80020ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <MX_I2C1_Init+0x50>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <MX_I2C1_Init+0x50>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <MX_I2C1_Init+0x50>)
 80020be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020c4:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <MX_I2C1_Init+0x50>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <MX_I2C1_Init+0x50>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020d0:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <MX_I2C1_Init+0x50>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <MX_I2C1_Init+0x50>)
 80020d8:	2200      	movs	r2, #0
 80020da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020dc:	4804      	ldr	r0, [pc, #16]	; (80020f0 <MX_I2C1_Init+0x50>)
 80020de:	f001 faf5 	bl	80036cc <HAL_I2C_Init>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020e8:	f000 f960 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	200000f4 	.word	0x200000f4
 80020f4:	40005400 	.word	0x40005400
 80020f8:	000186a0 	.word	0x000186a0

080020fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <MX_I2C3_Init+0x50>)
 8002102:	4a13      	ldr	r2, [pc, #76]	; (8002150 <MX_I2C3_Init+0x54>)
 8002104:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <MX_I2C3_Init+0x50>)
 8002108:	4a12      	ldr	r2, [pc, #72]	; (8002154 <MX_I2C3_Init+0x58>)
 800210a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <MX_I2C3_Init+0x50>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <MX_I2C3_Init+0x50>)
 8002114:	2200      	movs	r2, #0
 8002116:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <MX_I2C3_Init+0x50>)
 800211a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800211e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <MX_I2C3_Init+0x50>)
 8002122:	2200      	movs	r2, #0
 8002124:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <MX_I2C3_Init+0x50>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <MX_I2C3_Init+0x50>)
 800212e:	2200      	movs	r2, #0
 8002130:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <MX_I2C3_Init+0x50>)
 8002134:	2200      	movs	r2, #0
 8002136:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002138:	4804      	ldr	r0, [pc, #16]	; (800214c <MX_I2C3_Init+0x50>)
 800213a:	f001 fac7 	bl	80036cc <HAL_I2C_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002144:	f000 f932 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000148 	.word	0x20000148
 8002150:	40005c00 	.word	0x40005c00
 8002154:	000186a0 	.word	0x000186a0

08002158 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800215e:	f107 0308 	add.w	r3, r7, #8
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800216c:	463b      	mov	r3, r7
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002174:	4b1e      	ldr	r3, [pc, #120]	; (80021f0 <MX_TIM1_Init+0x98>)
 8002176:	4a1f      	ldr	r2, [pc, #124]	; (80021f4 <MX_TIM1_Init+0x9c>)
 8002178:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800217a:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <MX_TIM1_Init+0x98>)
 800217c:	2247      	movs	r2, #71	; 0x47
 800217e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <MX_TIM1_Init+0x98>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002186:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <MX_TIM1_Init+0x98>)
 8002188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800218c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800218e:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <MX_TIM1_Init+0x98>)
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002194:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <MX_TIM1_Init+0x98>)
 8002196:	2200      	movs	r2, #0
 8002198:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <MX_TIM1_Init+0x98>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021a0:	4813      	ldr	r0, [pc, #76]	; (80021f0 <MX_TIM1_Init+0x98>)
 80021a2:	f002 fe8f 	bl	8004ec4 <HAL_TIM_Base_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80021ac:	f000 f8fe 	bl	80023ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021b6:	f107 0308 	add.w	r3, r7, #8
 80021ba:	4619      	mov	r1, r3
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <MX_TIM1_Init+0x98>)
 80021be:	f002 ff2b 	bl	8005018 <HAL_TIM_ConfigClockSource>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80021c8:	f000 f8f0 	bl	80023ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021cc:	2300      	movs	r3, #0
 80021ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021d4:	463b      	mov	r3, r7
 80021d6:	4619      	mov	r1, r3
 80021d8:	4805      	ldr	r0, [pc, #20]	; (80021f0 <MX_TIM1_Init+0x98>)
 80021da:	f003 f8ff 	bl	80053dc <HAL_TIMEx_MasterConfigSynchronization>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80021e4:	f000 f8e2 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021e8:	bf00      	nop
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	2000019c 	.word	0x2000019c
 80021f4:	40010000 	.word	0x40010000

080021f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <MX_USART1_UART_Init+0x4c>)
 80021fe:	4a12      	ldr	r2, [pc, #72]	; (8002248 <MX_USART1_UART_Init+0x50>)
 8002200:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <MX_USART1_UART_Init+0x4c>)
 8002204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002208:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <MX_USART1_UART_Init+0x4c>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <MX_USART1_UART_Init+0x4c>)
 8002212:	2200      	movs	r2, #0
 8002214:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <MX_USART1_UART_Init+0x4c>)
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <MX_USART1_UART_Init+0x4c>)
 800221e:	220c      	movs	r2, #12
 8002220:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <MX_USART1_UART_Init+0x4c>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <MX_USART1_UART_Init+0x4c>)
 800222a:	2200      	movs	r2, #0
 800222c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800222e:	4805      	ldr	r0, [pc, #20]	; (8002244 <MX_USART1_UART_Init+0x4c>)
 8002230:	f003 f942 	bl	80054b8 <HAL_UART_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800223a:	f000 f8b7 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200001e4 	.word	0x200001e4
 8002248:	40011000 	.word	0x40011000

0800224c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	; 0x28
 8002250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
 8002260:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	4b4c      	ldr	r3, [pc, #304]	; (8002398 <MX_GPIO_Init+0x14c>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a4b      	ldr	r2, [pc, #300]	; (8002398 <MX_GPIO_Init+0x14c>)
 800226c:	f043 0304 	orr.w	r3, r3, #4
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b49      	ldr	r3, [pc, #292]	; (8002398 <MX_GPIO_Init+0x14c>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	4b45      	ldr	r3, [pc, #276]	; (8002398 <MX_GPIO_Init+0x14c>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a44      	ldr	r2, [pc, #272]	; (8002398 <MX_GPIO_Init+0x14c>)
 8002288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b42      	ldr	r3, [pc, #264]	; (8002398 <MX_GPIO_Init+0x14c>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	4b3e      	ldr	r3, [pc, #248]	; (8002398 <MX_GPIO_Init+0x14c>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a3d      	ldr	r2, [pc, #244]	; (8002398 <MX_GPIO_Init+0x14c>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b3b      	ldr	r3, [pc, #236]	; (8002398 <MX_GPIO_Init+0x14c>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	4b37      	ldr	r3, [pc, #220]	; (8002398 <MX_GPIO_Init+0x14c>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a36      	ldr	r2, [pc, #216]	; (8002398 <MX_GPIO_Init+0x14c>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b34      	ldr	r3, [pc, #208]	; (8002398 <MX_GPIO_Init+0x14c>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	603b      	str	r3, [r7, #0]
 80022d6:	4b30      	ldr	r3, [pc, #192]	; (8002398 <MX_GPIO_Init+0x14c>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a2f      	ldr	r2, [pc, #188]	; (8002398 <MX_GPIO_Init+0x14c>)
 80022dc:	f043 0308 	orr.w	r3, r3, #8
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <MX_GPIO_Init+0x14c>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Extra_PC0_Pin|Extra_PC1_Pin|Extra_PC4_Pin|Solar_Panel_Voltage_LED_Pin
 80022ee:	2200      	movs	r2, #0
 80022f0:	f641 5193 	movw	r1, #7571	; 0x1d93
 80022f4:	4829      	ldr	r0, [pc, #164]	; (800239c <MX_GPIO_Init+0x150>)
 80022f6:	f001 f9cf 	bl	8003698 <HAL_GPIO_WritePin>
                          |Debug_LED_Pin|Step_Rod_Logic_Pin|Direction_Rod_Logic_Pin|Enable_Rod_Logic_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Extra_PA1_Pin|Extra_PA2_Pin|Extra_PA3_Pin|Extra_PA4_Pin, GPIO_PIN_RESET);
 80022fa:	2200      	movs	r2, #0
 80022fc:	211e      	movs	r1, #30
 80022fe:	4828      	ldr	r0, [pc, #160]	; (80023a0 <MX_GPIO_Init+0x154>)
 8002300:	f001 f9ca 	bl	8003698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Extra_PB12_Pin|Extra_PB13_Pin|Extra_PB14_Pin|Extra_PB15_Pin
 8002304:	2200      	movs	r2, #0
 8002306:	f24f 01f8 	movw	r1, #61688	; 0xf0f8
 800230a:	4826      	ldr	r0, [pc, #152]	; (80023a4 <MX_GPIO_Init+0x158>)
 800230c:	f001 f9c4 	bl	8003698 <HAL_GPIO_WritePin>
                          |Extra_PB3_Pin|Enable_Susan_Logic_Pin|Step_Susan_Logic_Pin|Direction_Susan_Logic_Pin
                          |nSleep_Susan_Logic_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSleep_Rod_Logic_GPIO_Port, nSleep_Rod_Logic_Pin, GPIO_PIN_RESET);
 8002310:	2200      	movs	r2, #0
 8002312:	2104      	movs	r1, #4
 8002314:	4824      	ldr	r0, [pc, #144]	; (80023a8 <MX_GPIO_Init+0x15c>)
 8002316:	f001 f9bf 	bl	8003698 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Extra_PC0_Pin Extra_PC1_Pin Extra_PC4_Pin Solar_Panel_Voltage_LED_Pin
                           Debug_LED_Pin Step_Rod_Logic_Pin Direction_Rod_Logic_Pin Enable_Rod_Logic_Pin */
  GPIO_InitStruct.Pin = Extra_PC0_Pin|Extra_PC1_Pin|Extra_PC4_Pin|Solar_Panel_Voltage_LED_Pin
 800231a:	f641 5393 	movw	r3, #7571	; 0x1d93
 800231e:	617b      	str	r3, [r7, #20]
                          |Debug_LED_Pin|Step_Rod_Logic_Pin|Direction_Rod_Logic_Pin|Enable_Rod_Logic_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002320:	2301      	movs	r3, #1
 8002322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002328:	2300      	movs	r3, #0
 800232a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	4619      	mov	r1, r3
 8002332:	481a      	ldr	r0, [pc, #104]	; (800239c <MX_GPIO_Init+0x150>)
 8002334:	f001 f82c 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pins : Extra_PA1_Pin Extra_PA2_Pin Extra_PA3_Pin Extra_PA4_Pin */
  GPIO_InitStruct.Pin = Extra_PA1_Pin|Extra_PA2_Pin|Extra_PA3_Pin|Extra_PA4_Pin;
 8002338:	231e      	movs	r3, #30
 800233a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233c:	2301      	movs	r3, #1
 800233e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002344:	2300      	movs	r3, #0
 8002346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	4619      	mov	r1, r3
 800234e:	4814      	ldr	r0, [pc, #80]	; (80023a0 <MX_GPIO_Init+0x154>)
 8002350:	f001 f81e 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pins : Extra_PB12_Pin Extra_PB13_Pin Extra_PB14_Pin Extra_PB15_Pin
                           Extra_PB3_Pin Enable_Susan_Logic_Pin Step_Susan_Logic_Pin Direction_Susan_Logic_Pin
                           nSleep_Susan_Logic_Pin */
  GPIO_InitStruct.Pin = Extra_PB12_Pin|Extra_PB13_Pin|Extra_PB14_Pin|Extra_PB15_Pin
 8002354:	f24f 03f8 	movw	r3, #61688	; 0xf0f8
 8002358:	617b      	str	r3, [r7, #20]
                          |Extra_PB3_Pin|Enable_Susan_Logic_Pin|Step_Susan_Logic_Pin|Direction_Susan_Logic_Pin
                          |nSleep_Susan_Logic_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235a:	2301      	movs	r3, #1
 800235c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	4619      	mov	r1, r3
 800236c:	480d      	ldr	r0, [pc, #52]	; (80023a4 <MX_GPIO_Init+0x158>)
 800236e:	f001 f80f 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSleep_Rod_Logic_Pin */
  GPIO_InitStruct.Pin = nSleep_Rod_Logic_Pin;
 8002372:	2304      	movs	r3, #4
 8002374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002376:	2301      	movs	r3, #1
 8002378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	2300      	movs	r3, #0
 8002380:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nSleep_Rod_Logic_GPIO_Port, &GPIO_InitStruct);
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	4619      	mov	r1, r3
 8002388:	4807      	ldr	r0, [pc, #28]	; (80023a8 <MX_GPIO_Init+0x15c>)
 800238a:	f001 f801 	bl	8003390 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800238e:	bf00      	nop
 8002390:	3728      	adds	r7, #40	; 0x28
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800
 800239c:	40020800 	.word	0x40020800
 80023a0:	40020000 	.word	0x40020000
 80023a4:	40020400 	.word	0x40020400
 80023a8:	40020c00 	.word	0x40020c00

080023ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023b0:	b672      	cpsid	i
}
 80023b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <Error_Handler+0x8>
	...

080023b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <HAL_MspInit+0x4c>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	4a0f      	ldr	r2, [pc, #60]	; (8002404 <HAL_MspInit+0x4c>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023cc:	6453      	str	r3, [r2, #68]	; 0x44
 80023ce:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <HAL_MspInit+0x4c>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_MspInit+0x4c>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	4a08      	ldr	r2, [pc, #32]	; (8002404 <HAL_MspInit+0x4c>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_MspInit+0x4c>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800

08002408 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	; 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a17      	ldr	r2, [pc, #92]	; (8002484 <HAL_ADC_MspInit+0x7c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d127      	bne.n	800247a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	4b16      	ldr	r3, [pc, #88]	; (8002488 <HAL_ADC_MspInit+0x80>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	4a15      	ldr	r2, [pc, #84]	; (8002488 <HAL_ADC_MspInit+0x80>)
 8002434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002438:	6453      	str	r3, [r2, #68]	; 0x44
 800243a:	4b13      	ldr	r3, [pc, #76]	; (8002488 <HAL_ADC_MspInit+0x80>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <HAL_ADC_MspInit+0x80>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a0e      	ldr	r2, [pc, #56]	; (8002488 <HAL_ADC_MspInit+0x80>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <HAL_ADC_MspInit+0x80>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Voltage_Divider_Pin;
 8002462:	2301      	movs	r3, #1
 8002464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002466:	2303      	movs	r3, #3
 8002468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Voltage_Divider_GPIO_Port, &GPIO_InitStruct);
 800246e:	f107 0314 	add.w	r3, r7, #20
 8002472:	4619      	mov	r1, r3
 8002474:	4805      	ldr	r0, [pc, #20]	; (800248c <HAL_ADC_MspInit+0x84>)
 8002476:	f000 ff8b 	bl	8003390 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800247a:	bf00      	nop
 800247c:	3728      	adds	r7, #40	; 0x28
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40012000 	.word	0x40012000
 8002488:	40023800 	.word	0x40023800
 800248c:	40020000 	.word	0x40020000

08002490 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08c      	sub	sp, #48	; 0x30
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 031c 	add.w	r3, r7, #28
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a42      	ldr	r2, [pc, #264]	; (80025b8 <HAL_I2C_MspInit+0x128>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d12d      	bne.n	800250e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	4b41      	ldr	r3, [pc, #260]	; (80025bc <HAL_I2C_MspInit+0x12c>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a40      	ldr	r2, [pc, #256]	; (80025bc <HAL_I2C_MspInit+0x12c>)
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b3e      	ldr	r3, [pc, #248]	; (80025bc <HAL_I2C_MspInit+0x12c>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	61bb      	str	r3, [r7, #24]
 80024cc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPS_and_MAG_I2C_SCL_Pin|GPS_and_MAG_I2C_SDA_Pin;
 80024ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024d4:	2312      	movs	r3, #18
 80024d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024dc:	2303      	movs	r3, #3
 80024de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024e0:	2304      	movs	r3, #4
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e4:	f107 031c 	add.w	r3, r7, #28
 80024e8:	4619      	mov	r1, r3
 80024ea:	4835      	ldr	r0, [pc, #212]	; (80025c0 <HAL_I2C_MspInit+0x130>)
 80024ec:	f000 ff50 	bl	8003390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	4b31      	ldr	r3, [pc, #196]	; (80025bc <HAL_I2C_MspInit+0x12c>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	4a30      	ldr	r2, [pc, #192]	; (80025bc <HAL_I2C_MspInit+0x12c>)
 80024fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002500:	4b2e      	ldr	r3, [pc, #184]	; (80025bc <HAL_I2C_MspInit+0x12c>)
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800250c:	e050      	b.n	80025b0 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a2c      	ldr	r2, [pc, #176]	; (80025c4 <HAL_I2C_MspInit+0x134>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d14b      	bne.n	80025b0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002518:	2300      	movs	r3, #0
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	4b27      	ldr	r3, [pc, #156]	; (80025bc <HAL_I2C_MspInit+0x12c>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	4a26      	ldr	r2, [pc, #152]	; (80025bc <HAL_I2C_MspInit+0x12c>)
 8002522:	f043 0304 	orr.w	r3, r3, #4
 8002526:	6313      	str	r3, [r2, #48]	; 0x30
 8002528:	4b24      	ldr	r3, [pc, #144]	; (80025bc <HAL_I2C_MspInit+0x12c>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	4b20      	ldr	r3, [pc, #128]	; (80025bc <HAL_I2C_MspInit+0x12c>)
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	4a1f      	ldr	r2, [pc, #124]	; (80025bc <HAL_I2C_MspInit+0x12c>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6313      	str	r3, [r2, #48]	; 0x30
 8002544:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <HAL_I2C_MspInit+0x12c>)
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C_Light_SDA_Pin;
 8002550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002556:	2312      	movs	r3, #18
 8002558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255e:	2303      	movs	r3, #3
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002562:	2304      	movs	r3, #4
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C_Light_SDA_GPIO_Port, &GPIO_InitStruct);
 8002566:	f107 031c 	add.w	r3, r7, #28
 800256a:	4619      	mov	r1, r3
 800256c:	4816      	ldr	r0, [pc, #88]	; (80025c8 <HAL_I2C_MspInit+0x138>)
 800256e:	f000 ff0f 	bl	8003390 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C_Light_SCL_Pin;
 8002572:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002578:	2312      	movs	r3, #18
 800257a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002580:	2303      	movs	r3, #3
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002584:	2304      	movs	r3, #4
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C_Light_SCL_GPIO_Port, &GPIO_InitStruct);
 8002588:	f107 031c 	add.w	r3, r7, #28
 800258c:	4619      	mov	r1, r3
 800258e:	480f      	ldr	r0, [pc, #60]	; (80025cc <HAL_I2C_MspInit+0x13c>)
 8002590:	f000 fefe 	bl	8003390 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002594:	2300      	movs	r3, #0
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	4b08      	ldr	r3, [pc, #32]	; (80025bc <HAL_I2C_MspInit+0x12c>)
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	4a07      	ldr	r2, [pc, #28]	; (80025bc <HAL_I2C_MspInit+0x12c>)
 800259e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025a2:	6413      	str	r3, [r2, #64]	; 0x40
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_I2C_MspInit+0x12c>)
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	68bb      	ldr	r3, [r7, #8]
}
 80025b0:	bf00      	nop
 80025b2:	3730      	adds	r7, #48	; 0x30
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40005400 	.word	0x40005400
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40020400 	.word	0x40020400
 80025c4:	40005c00 	.word	0x40005c00
 80025c8:	40020800 	.word	0x40020800
 80025cc:	40020000 	.word	0x40020000

080025d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a0b      	ldr	r2, [pc, #44]	; (800260c <HAL_TIM_Base_MspInit+0x3c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d10d      	bne.n	80025fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_TIM_Base_MspInit+0x40>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	4a09      	ldr	r2, [pc, #36]	; (8002610 <HAL_TIM_Base_MspInit+0x40>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6453      	str	r3, [r2, #68]	; 0x44
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <HAL_TIM_Base_MspInit+0x40>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40010000 	.word	0x40010000
 8002610:	40023800 	.word	0x40023800

08002614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08a      	sub	sp, #40	; 0x28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a19      	ldr	r2, [pc, #100]	; (8002698 <HAL_UART_MspInit+0x84>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d12c      	bne.n	8002690 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	4b18      	ldr	r3, [pc, #96]	; (800269c <HAL_UART_MspInit+0x88>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	4a17      	ldr	r2, [pc, #92]	; (800269c <HAL_UART_MspInit+0x88>)
 8002640:	f043 0310 	orr.w	r3, r3, #16
 8002644:	6453      	str	r3, [r2, #68]	; 0x44
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <HAL_UART_MspInit+0x88>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <HAL_UART_MspInit+0x88>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a10      	ldr	r2, [pc, #64]	; (800269c <HAL_UART_MspInit+0x88>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b0e      	ldr	r3, [pc, #56]	; (800269c <HAL_UART_MspInit+0x88>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_RX_Pin|Bluetooth_TX_Pin;
 800266e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267c:	2303      	movs	r3, #3
 800267e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002680:	2307      	movs	r3, #7
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	4619      	mov	r1, r3
 800268a:	4805      	ldr	r0, [pc, #20]	; (80026a0 <HAL_UART_MspInit+0x8c>)
 800268c:	f000 fe80 	bl	8003390 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002690:	bf00      	nop
 8002692:	3728      	adds	r7, #40	; 0x28
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40011000 	.word	0x40011000
 800269c:	40023800 	.word	0x40023800
 80026a0:	40020000 	.word	0x40020000

080026a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026a8:	e7fe      	b.n	80026a8 <NMI_Handler+0x4>

080026aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026aa:	b480      	push	{r7}
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ae:	e7fe      	b.n	80026ae <HardFault_Handler+0x4>

080026b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b4:	e7fe      	b.n	80026b4 <MemManage_Handler+0x4>

080026b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026b6:	b480      	push	{r7}
 80026b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ba:	e7fe      	b.n	80026ba <BusFault_Handler+0x4>

080026bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c0:	e7fe      	b.n	80026c0 <UsageFault_Handler+0x4>

080026c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026f0:	f000 f956 	bl	80029a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return 1;
 80026fc:	2301      	movs	r3, #1
}
 80026fe:	4618      	mov	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <_kill>:

int _kill(int pid, int sig)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002712:	f003 fce3 	bl	80060dc <__errno>
 8002716:	4603      	mov	r3, r0
 8002718:	2216      	movs	r2, #22
 800271a:	601a      	str	r2, [r3, #0]
  return -1;
 800271c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <_exit>:

void _exit (int status)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002730:	f04f 31ff 	mov.w	r1, #4294967295
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff ffe7 	bl	8002708 <_kill>
  while (1) {}    /* Make sure we hang here */
 800273a:	e7fe      	b.n	800273a <_exit+0x12>

0800273c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	e00a      	b.n	8002764 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800274e:	f3af 8000 	nop.w
 8002752:	4601      	mov	r1, r0
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	60ba      	str	r2, [r7, #8]
 800275a:	b2ca      	uxtb	r2, r1
 800275c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	3301      	adds	r3, #1
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	429a      	cmp	r2, r3
 800276a:	dbf0      	blt.n	800274e <_read+0x12>
  }

  return len;
 800276c:	687b      	ldr	r3, [r7, #4]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b086      	sub	sp, #24
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	e009      	b.n	800279c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	60ba      	str	r2, [r7, #8]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	3301      	adds	r3, #1
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	dbf1      	blt.n	8002788 <_write+0x12>
  }
  return len;
 80027a4:	687b      	ldr	r3, [r7, #4]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <_close>:

int _close(int file)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027d6:	605a      	str	r2, [r3, #4]
  return 0;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <_isatty>:

int _isatty(int file)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027ee:	2301      	movs	r3, #1
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002820:	4a14      	ldr	r2, [pc, #80]	; (8002874 <_sbrk+0x5c>)
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <_sbrk+0x60>)
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800282c:	4b13      	ldr	r3, [pc, #76]	; (800287c <_sbrk+0x64>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d102      	bne.n	800283a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <_sbrk+0x64>)
 8002836:	4a12      	ldr	r2, [pc, #72]	; (8002880 <_sbrk+0x68>)
 8002838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <_sbrk+0x64>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	429a      	cmp	r2, r3
 8002846:	d207      	bcs.n	8002858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002848:	f003 fc48 	bl	80060dc <__errno>
 800284c:	4603      	mov	r3, r0
 800284e:	220c      	movs	r2, #12
 8002850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002852:	f04f 33ff 	mov.w	r3, #4294967295
 8002856:	e009      	b.n	800286c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <_sbrk+0x64>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <_sbrk+0x64>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	4a05      	ldr	r2, [pc, #20]	; (800287c <_sbrk+0x64>)
 8002868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800286a:	68fb      	ldr	r3, [r7, #12]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20020000 	.word	0x20020000
 8002878:	00000400 	.word	0x00000400
 800287c:	20000228 	.word	0x20000228
 8002880:	20000380 	.word	0x20000380

08002884 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <SystemInit+0x20>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	4a05      	ldr	r2, [pc, #20]	; (80028a4 <SystemInit+0x20>)
 8002890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80028a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028ac:	480d      	ldr	r0, [pc, #52]	; (80028e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028ae:	490e      	ldr	r1, [pc, #56]	; (80028e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028b0:	4a0e      	ldr	r2, [pc, #56]	; (80028ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028b4:	e002      	b.n	80028bc <LoopCopyDataInit>

080028b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ba:	3304      	adds	r3, #4

080028bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c0:	d3f9      	bcc.n	80028b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028c2:	4a0b      	ldr	r2, [pc, #44]	; (80028f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028c4:	4c0b      	ldr	r4, [pc, #44]	; (80028f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028c8:	e001      	b.n	80028ce <LoopFillZerobss>

080028ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028cc:	3204      	adds	r2, #4

080028ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d0:	d3fb      	bcc.n	80028ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028d2:	f7ff ffd7 	bl	8002884 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028d6:	f003 fc07 	bl	80060e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028da:	f7fe fb13 	bl	8000f04 <main>
  bx  lr    
 80028de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80028e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028e8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80028ec:	08008228 	.word	0x08008228
  ldr r2, =_sbss
 80028f0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80028f4:	2000037c 	.word	0x2000037c

080028f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028f8:	e7fe      	b.n	80028f8 <ADC_IRQHandler>
	...

080028fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002900:	4b0e      	ldr	r3, [pc, #56]	; (800293c <HAL_Init+0x40>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0d      	ldr	r2, [pc, #52]	; (800293c <HAL_Init+0x40>)
 8002906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800290a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_Init+0x40>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0a      	ldr	r2, [pc, #40]	; (800293c <HAL_Init+0x40>)
 8002912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002916:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002918:	4b08      	ldr	r3, [pc, #32]	; (800293c <HAL_Init+0x40>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a07      	ldr	r2, [pc, #28]	; (800293c <HAL_Init+0x40>)
 800291e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002922:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002924:	2003      	movs	r0, #3
 8002926:	f000 fcff 	bl	8003328 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800292a:	200f      	movs	r0, #15
 800292c:	f000 f808 	bl	8002940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002930:	f7ff fd42 	bl	80023b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40023c00 	.word	0x40023c00

08002940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002948:	4b12      	ldr	r3, [pc, #72]	; (8002994 <HAL_InitTick+0x54>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b12      	ldr	r3, [pc, #72]	; (8002998 <HAL_InitTick+0x58>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	4619      	mov	r1, r3
 8002952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002956:	fbb3 f3f1 	udiv	r3, r3, r1
 800295a:	fbb2 f3f3 	udiv	r3, r2, r3
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fd09 	bl	8003376 <HAL_SYSTICK_Config>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e00e      	b.n	800298c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b0f      	cmp	r3, #15
 8002972:	d80a      	bhi.n	800298a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002974:	2200      	movs	r2, #0
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	f04f 30ff 	mov.w	r0, #4294967295
 800297c:	f000 fcdf 	bl	800333e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002980:	4a06      	ldr	r2, [pc, #24]	; (800299c <HAL_InitTick+0x5c>)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	e000      	b.n	800298c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000018 	.word	0x20000018
 8002998:	20000020 	.word	0x20000020
 800299c:	2000001c 	.word	0x2000001c

080029a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029a4:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_IncTick+0x20>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	461a      	mov	r2, r3
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_IncTick+0x24>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4413      	add	r3, r2
 80029b0:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <HAL_IncTick+0x24>)
 80029b2:	6013      	str	r3, [r2, #0]
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20000020 	.word	0x20000020
 80029c4:	2000022c 	.word	0x2000022c

080029c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return uwTick;
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <HAL_GetTick+0x14>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	2000022c 	.word	0x2000022c

080029e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e033      	b.n	8002a5e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d109      	bne.n	8002a12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff fd02 	bl	8002408 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d118      	bne.n	8002a50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a26:	f023 0302 	bic.w	r3, r3, #2
 8002a2a:	f043 0202 	orr.w	r2, r3, #2
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 faca 	bl	8002fcc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f023 0303 	bic.w	r3, r3, #3
 8002a46:	f043 0201 	orr.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
 8002a4e:	e001      	b.n	8002a54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_ADC_Start+0x1a>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e097      	b.n	8002bb2 <HAL_ADC_Start+0x14a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d018      	beq.n	8002aca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002aa8:	4b45      	ldr	r3, [pc, #276]	; (8002bc0 <HAL_ADC_Start+0x158>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a45      	ldr	r2, [pc, #276]	; (8002bc4 <HAL_ADC_Start+0x15c>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	0c9a      	lsrs	r2, r3, #18
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	4413      	add	r3, r2
 8002aba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002abc:	e002      	b.n	8002ac4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f9      	bne.n	8002abe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d15f      	bne.n	8002b98 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d007      	beq.n	8002b0a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b16:	d106      	bne.n	8002b26 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1c:	f023 0206 	bic.w	r2, r3, #6
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	645a      	str	r2, [r3, #68]	; 0x44
 8002b24:	e002      	b.n	8002b2c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b34:	4b24      	ldr	r3, [pc, #144]	; (8002bc8 <HAL_ADC_Start+0x160>)
 8002b36:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b40:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 031f 	and.w	r3, r3, #31
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10f      	bne.n	8002b6e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d129      	bne.n	8002bb0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	e020      	b.n	8002bb0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a16      	ldr	r2, [pc, #88]	; (8002bcc <HAL_ADC_Start+0x164>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d11b      	bne.n	8002bb0 <HAL_ADC_Start+0x148>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d114      	bne.n	8002bb0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b94:	609a      	str	r2, [r3, #8]
 8002b96:	e00b      	b.n	8002bb0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	f043 0210 	orr.w	r2, r3, #16
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba8:	f043 0201 	orr.w	r2, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000018 	.word	0x20000018
 8002bc4:	431bde83 	.word	0x431bde83
 8002bc8:	40012300 	.word	0x40012300
 8002bcc:	40012000 	.word	0x40012000

08002bd0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_ADC_Stop+0x16>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e021      	b.n	8002c2a <HAL_ADC_Stop+0x5a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0201 	bic.w	r2, r2, #1
 8002bfc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d109      	bne.n	8002c20 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c14:	f023 0301 	bic.w	r3, r3, #1
 8002c18:	f043 0201 	orr.w	r2, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c52:	d113      	bne.n	8002c7c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c62:	d10b      	bne.n	8002c7c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f043 0220 	orr.w	r2, r3, #32
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e063      	b.n	8002d44 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002c7c:	f7ff fea4 	bl	80029c8 <HAL_GetTick>
 8002c80:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c82:	e021      	b.n	8002cc8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8a:	d01d      	beq.n	8002cc8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d007      	beq.n	8002ca2 <HAL_ADC_PollForConversion+0x6c>
 8002c92:	f7ff fe99 	bl	80029c8 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d212      	bcs.n	8002cc8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d00b      	beq.n	8002cc8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	f043 0204 	orr.w	r2, r3, #4
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e03d      	b.n	8002d44 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d1d6      	bne.n	8002c84 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f06f 0212 	mvn.w	r2, #18
 8002cde:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d123      	bne.n	8002d42 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d11f      	bne.n	8002d42 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d006      	beq.n	8002d1e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d111      	bne.n	8002d42 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d105      	bne.n	8002d42 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f043 0201 	orr.w	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x1c>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e113      	b.n	8002fac <HAL_ADC_ConfigChannel+0x244>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b09      	cmp	r3, #9
 8002d92:	d925      	bls.n	8002de0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68d9      	ldr	r1, [r3, #12]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	461a      	mov	r2, r3
 8002da2:	4613      	mov	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	4413      	add	r3, r2
 8002da8:	3b1e      	subs	r3, #30
 8002daa:	2207      	movs	r2, #7
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43da      	mvns	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	400a      	ands	r2, r1
 8002db8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68d9      	ldr	r1, [r3, #12]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	4618      	mov	r0, r3
 8002dcc:	4603      	mov	r3, r0
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	4403      	add	r3, r0
 8002dd2:	3b1e      	subs	r3, #30
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	e022      	b.n	8002e26 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6919      	ldr	r1, [r3, #16]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	4613      	mov	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4413      	add	r3, r2
 8002df4:	2207      	movs	r2, #7
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	400a      	ands	r2, r1
 8002e02:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6919      	ldr	r1, [r3, #16]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	4618      	mov	r0, r3
 8002e16:	4603      	mov	r3, r0
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4403      	add	r3, r0
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b06      	cmp	r3, #6
 8002e2c:	d824      	bhi.n	8002e78 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3b05      	subs	r3, #5
 8002e40:	221f      	movs	r2, #31
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43da      	mvns	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	400a      	ands	r2, r1
 8002e4e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	3b05      	subs	r3, #5
 8002e6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	635a      	str	r2, [r3, #52]	; 0x34
 8002e76:	e04c      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b0c      	cmp	r3, #12
 8002e7e:	d824      	bhi.n	8002eca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	3b23      	subs	r3, #35	; 0x23
 8002e92:	221f      	movs	r2, #31
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43da      	mvns	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	400a      	ands	r2, r1
 8002ea0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	4618      	mov	r0, r3
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	3b23      	subs	r3, #35	; 0x23
 8002ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ec8:	e023      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	3b41      	subs	r3, #65	; 0x41
 8002edc:	221f      	movs	r2, #31
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43da      	mvns	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	400a      	ands	r2, r1
 8002eea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	4618      	mov	r0, r3
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	3b41      	subs	r3, #65	; 0x41
 8002f06:	fa00 f203 	lsl.w	r2, r0, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f12:	4b29      	ldr	r3, [pc, #164]	; (8002fb8 <HAL_ADC_ConfigChannel+0x250>)
 8002f14:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a28      	ldr	r2, [pc, #160]	; (8002fbc <HAL_ADC_ConfigChannel+0x254>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d10f      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x1d8>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b12      	cmp	r3, #18
 8002f26:	d10b      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1d      	ldr	r2, [pc, #116]	; (8002fbc <HAL_ADC_ConfigChannel+0x254>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d12b      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x23a>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a1c      	ldr	r2, [pc, #112]	; (8002fc0 <HAL_ADC_ConfigChannel+0x258>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d003      	beq.n	8002f5c <HAL_ADC_ConfigChannel+0x1f4>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b11      	cmp	r3, #17
 8002f5a:	d122      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a11      	ldr	r2, [pc, #68]	; (8002fc0 <HAL_ADC_ConfigChannel+0x258>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d111      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <HAL_ADC_ConfigChannel+0x25c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a11      	ldr	r2, [pc, #68]	; (8002fc8 <HAL_ADC_ConfigChannel+0x260>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	0c9a      	lsrs	r2, r3, #18
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f94:	e002      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f9      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	40012300 	.word	0x40012300
 8002fbc:	40012000 	.word	0x40012000
 8002fc0:	10000012 	.word	0x10000012
 8002fc4:	20000018 	.word	0x20000018
 8002fc8:	431bde83 	.word	0x431bde83

08002fcc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fd4:	4b79      	ldr	r3, [pc, #484]	; (80031bc <ADC_Init+0x1f0>)
 8002fd6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	431a      	orrs	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003000:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	021a      	lsls	r2, r3, #8
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003024:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003046:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6899      	ldr	r1, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	4a58      	ldr	r2, [pc, #352]	; (80031c0 <ADC_Init+0x1f4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d022      	beq.n	80030aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003072:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6899      	ldr	r1, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003094:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6899      	ldr	r1, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	e00f      	b.n	80030ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0202 	bic.w	r2, r2, #2
 80030d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6899      	ldr	r1, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	7e1b      	ldrb	r3, [r3, #24]
 80030e4:	005a      	lsls	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d01b      	beq.n	8003130 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003106:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003116:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6859      	ldr	r1, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	3b01      	subs	r3, #1
 8003124:	035a      	lsls	r2, r3, #13
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	e007      	b.n	8003140 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800313e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800314e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	3b01      	subs	r3, #1
 800315c:	051a      	lsls	r2, r3, #20
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003174:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6899      	ldr	r1, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003182:	025a      	lsls	r2, r3, #9
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800319a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6899      	ldr	r1, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	029a      	lsls	r2, r3, #10
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	609a      	str	r2, [r3, #8]
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	40012300 	.word	0x40012300
 80031c0:	0f000001 	.word	0x0f000001

080031c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031d4:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <__NVIC_SetPriorityGrouping+0x44>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031e0:	4013      	ands	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031f6:	4a04      	ldr	r2, [pc, #16]	; (8003208 <__NVIC_SetPriorityGrouping+0x44>)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	60d3      	str	r3, [r2, #12]
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003210:	4b04      	ldr	r3, [pc, #16]	; (8003224 <__NVIC_GetPriorityGrouping+0x18>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	0a1b      	lsrs	r3, r3, #8
 8003216:	f003 0307 	and.w	r3, r3, #7
}
 800321a:	4618      	mov	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	6039      	str	r1, [r7, #0]
 8003232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003238:	2b00      	cmp	r3, #0
 800323a:	db0a      	blt.n	8003252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	b2da      	uxtb	r2, r3
 8003240:	490c      	ldr	r1, [pc, #48]	; (8003274 <__NVIC_SetPriority+0x4c>)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	0112      	lsls	r2, r2, #4
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	440b      	add	r3, r1
 800324c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003250:	e00a      	b.n	8003268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	b2da      	uxtb	r2, r3
 8003256:	4908      	ldr	r1, [pc, #32]	; (8003278 <__NVIC_SetPriority+0x50>)
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	3b04      	subs	r3, #4
 8003260:	0112      	lsls	r2, r2, #4
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	440b      	add	r3, r1
 8003266:	761a      	strb	r2, [r3, #24]
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	e000e100 	.word	0xe000e100
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800327c:	b480      	push	{r7}
 800327e:	b089      	sub	sp, #36	; 0x24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f1c3 0307 	rsb	r3, r3, #7
 8003296:	2b04      	cmp	r3, #4
 8003298:	bf28      	it	cs
 800329a:	2304      	movcs	r3, #4
 800329c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	3304      	adds	r3, #4
 80032a2:	2b06      	cmp	r3, #6
 80032a4:	d902      	bls.n	80032ac <NVIC_EncodePriority+0x30>
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	3b03      	subs	r3, #3
 80032aa:	e000      	b.n	80032ae <NVIC_EncodePriority+0x32>
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b0:	f04f 32ff 	mov.w	r2, #4294967295
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43da      	mvns	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	401a      	ands	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032c4:	f04f 31ff 	mov.w	r1, #4294967295
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	fa01 f303 	lsl.w	r3, r1, r3
 80032ce:	43d9      	mvns	r1, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d4:	4313      	orrs	r3, r2
         );
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3724      	adds	r7, #36	; 0x24
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032f4:	d301      	bcc.n	80032fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032f6:	2301      	movs	r3, #1
 80032f8:	e00f      	b.n	800331a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032fa:	4a0a      	ldr	r2, [pc, #40]	; (8003324 <SysTick_Config+0x40>)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3b01      	subs	r3, #1
 8003300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003302:	210f      	movs	r1, #15
 8003304:	f04f 30ff 	mov.w	r0, #4294967295
 8003308:	f7ff ff8e 	bl	8003228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <SysTick_Config+0x40>)
 800330e:	2200      	movs	r2, #0
 8003310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003312:	4b04      	ldr	r3, [pc, #16]	; (8003324 <SysTick_Config+0x40>)
 8003314:	2207      	movs	r2, #7
 8003316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	e000e010 	.word	0xe000e010

08003328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7ff ff47 	bl	80031c4 <__NVIC_SetPriorityGrouping>
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800333e:	b580      	push	{r7, lr}
 8003340:	b086      	sub	sp, #24
 8003342:	af00      	add	r7, sp, #0
 8003344:	4603      	mov	r3, r0
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	607a      	str	r2, [r7, #4]
 800334a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003350:	f7ff ff5c 	bl	800320c <__NVIC_GetPriorityGrouping>
 8003354:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68b9      	ldr	r1, [r7, #8]
 800335a:	6978      	ldr	r0, [r7, #20]
 800335c:	f7ff ff8e 	bl	800327c <NVIC_EncodePriority>
 8003360:	4602      	mov	r2, r0
 8003362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff ff5d 	bl	8003228 <__NVIC_SetPriority>
}
 800336e:	bf00      	nop
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff ffb0 	bl	80032e4 <SysTick_Config>
 8003384:	4603      	mov	r3, r0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003390:	b480      	push	{r7}
 8003392:	b089      	sub	sp, #36	; 0x24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	e159      	b.n	8003660 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033ac:	2201      	movs	r2, #1
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4013      	ands	r3, r2
 80033be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	f040 8148 	bne.w	800365a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d005      	beq.n	80033e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d130      	bne.n	8003444 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	2203      	movs	r2, #3
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003418:	2201      	movs	r2, #1
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	f003 0201 	and.w	r2, r3, #1
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	2b03      	cmp	r3, #3
 800344e:	d017      	beq.n	8003480 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	2203      	movs	r2, #3
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d123      	bne.n	80034d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	08da      	lsrs	r2, r3, #3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3208      	adds	r2, #8
 8003494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003498:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	220f      	movs	r2, #15
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	08da      	lsrs	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3208      	adds	r2, #8
 80034ce:	69b9      	ldr	r1, [r7, #24]
 80034d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	2203      	movs	r2, #3
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 0203 	and.w	r2, r3, #3
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80a2 	beq.w	800365a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	4b57      	ldr	r3, [pc, #348]	; (8003678 <HAL_GPIO_Init+0x2e8>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	4a56      	ldr	r2, [pc, #344]	; (8003678 <HAL_GPIO_Init+0x2e8>)
 8003520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003524:	6453      	str	r3, [r2, #68]	; 0x44
 8003526:	4b54      	ldr	r3, [pc, #336]	; (8003678 <HAL_GPIO_Init+0x2e8>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003532:	4a52      	ldr	r2, [pc, #328]	; (800367c <HAL_GPIO_Init+0x2ec>)
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	089b      	lsrs	r3, r3, #2
 8003538:	3302      	adds	r3, #2
 800353a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	220f      	movs	r2, #15
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a49      	ldr	r2, [pc, #292]	; (8003680 <HAL_GPIO_Init+0x2f0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d019      	beq.n	8003592 <HAL_GPIO_Init+0x202>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a48      	ldr	r2, [pc, #288]	; (8003684 <HAL_GPIO_Init+0x2f4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d013      	beq.n	800358e <HAL_GPIO_Init+0x1fe>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a47      	ldr	r2, [pc, #284]	; (8003688 <HAL_GPIO_Init+0x2f8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00d      	beq.n	800358a <HAL_GPIO_Init+0x1fa>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a46      	ldr	r2, [pc, #280]	; (800368c <HAL_GPIO_Init+0x2fc>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d007      	beq.n	8003586 <HAL_GPIO_Init+0x1f6>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a45      	ldr	r2, [pc, #276]	; (8003690 <HAL_GPIO_Init+0x300>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d101      	bne.n	8003582 <HAL_GPIO_Init+0x1f2>
 800357e:	2304      	movs	r3, #4
 8003580:	e008      	b.n	8003594 <HAL_GPIO_Init+0x204>
 8003582:	2307      	movs	r3, #7
 8003584:	e006      	b.n	8003594 <HAL_GPIO_Init+0x204>
 8003586:	2303      	movs	r3, #3
 8003588:	e004      	b.n	8003594 <HAL_GPIO_Init+0x204>
 800358a:	2302      	movs	r3, #2
 800358c:	e002      	b.n	8003594 <HAL_GPIO_Init+0x204>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <HAL_GPIO_Init+0x204>
 8003592:	2300      	movs	r3, #0
 8003594:	69fa      	ldr	r2, [r7, #28]
 8003596:	f002 0203 	and.w	r2, r2, #3
 800359a:	0092      	lsls	r2, r2, #2
 800359c:	4093      	lsls	r3, r2
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035a4:	4935      	ldr	r1, [pc, #212]	; (800367c <HAL_GPIO_Init+0x2ec>)
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	089b      	lsrs	r3, r3, #2
 80035aa:	3302      	adds	r3, #2
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035b2:	4b38      	ldr	r3, [pc, #224]	; (8003694 <HAL_GPIO_Init+0x304>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	43db      	mvns	r3, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4013      	ands	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035d6:	4a2f      	ldr	r2, [pc, #188]	; (8003694 <HAL_GPIO_Init+0x304>)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035dc:	4b2d      	ldr	r3, [pc, #180]	; (8003694 <HAL_GPIO_Init+0x304>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	43db      	mvns	r3, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4013      	ands	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003600:	4a24      	ldr	r2, [pc, #144]	; (8003694 <HAL_GPIO_Init+0x304>)
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003606:	4b23      	ldr	r3, [pc, #140]	; (8003694 <HAL_GPIO_Init+0x304>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800362a:	4a1a      	ldr	r2, [pc, #104]	; (8003694 <HAL_GPIO_Init+0x304>)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003630:	4b18      	ldr	r3, [pc, #96]	; (8003694 <HAL_GPIO_Init+0x304>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003654:	4a0f      	ldr	r2, [pc, #60]	; (8003694 <HAL_GPIO_Init+0x304>)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	3301      	adds	r3, #1
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	2b0f      	cmp	r3, #15
 8003664:	f67f aea2 	bls.w	80033ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003668:	bf00      	nop
 800366a:	bf00      	nop
 800366c:	3724      	adds	r7, #36	; 0x24
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800
 800367c:	40013800 	.word	0x40013800
 8003680:	40020000 	.word	0x40020000
 8003684:	40020400 	.word	0x40020400
 8003688:	40020800 	.word	0x40020800
 800368c:	40020c00 	.word	0x40020c00
 8003690:	40021000 	.word	0x40021000
 8003694:	40013c00 	.word	0x40013c00

08003698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	807b      	strh	r3, [r7, #2]
 80036a4:	4613      	mov	r3, r2
 80036a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036a8:	787b      	ldrb	r3, [r7, #1]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ae:	887a      	ldrh	r2, [r7, #2]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036b4:	e003      	b.n	80036be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036b6:	887b      	ldrh	r3, [r7, #2]
 80036b8:	041a      	lsls	r2, r3, #16
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	619a      	str	r2, [r3, #24]
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
	...

080036cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e12b      	b.n	8003936 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fe fecc 	bl	8002490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2224      	movs	r2, #36	; 0x24
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0201 	bic.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800371e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800372e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003730:	f001 fba0 	bl	8004e74 <HAL_RCC_GetPCLK1Freq>
 8003734:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	4a81      	ldr	r2, [pc, #516]	; (8003940 <HAL_I2C_Init+0x274>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d807      	bhi.n	8003750 <HAL_I2C_Init+0x84>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4a80      	ldr	r2, [pc, #512]	; (8003944 <HAL_I2C_Init+0x278>)
 8003744:	4293      	cmp	r3, r2
 8003746:	bf94      	ite	ls
 8003748:	2301      	movls	r3, #1
 800374a:	2300      	movhi	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	e006      	b.n	800375e <HAL_I2C_Init+0x92>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4a7d      	ldr	r2, [pc, #500]	; (8003948 <HAL_I2C_Init+0x27c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	bf94      	ite	ls
 8003758:	2301      	movls	r3, #1
 800375a:	2300      	movhi	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e0e7      	b.n	8003936 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4a78      	ldr	r2, [pc, #480]	; (800394c <HAL_I2C_Init+0x280>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	0c9b      	lsrs	r3, r3, #18
 8003770:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	4a6a      	ldr	r2, [pc, #424]	; (8003940 <HAL_I2C_Init+0x274>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d802      	bhi.n	80037a0 <HAL_I2C_Init+0xd4>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	3301      	adds	r3, #1
 800379e:	e009      	b.n	80037b4 <HAL_I2C_Init+0xe8>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037a6:	fb02 f303 	mul.w	r3, r2, r3
 80037aa:	4a69      	ldr	r2, [pc, #420]	; (8003950 <HAL_I2C_Init+0x284>)
 80037ac:	fba2 2303 	umull	r2, r3, r2, r3
 80037b0:	099b      	lsrs	r3, r3, #6
 80037b2:	3301      	adds	r3, #1
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	430b      	orrs	r3, r1
 80037ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	495c      	ldr	r1, [pc, #368]	; (8003940 <HAL_I2C_Init+0x274>)
 80037d0:	428b      	cmp	r3, r1
 80037d2:	d819      	bhi.n	8003808 <HAL_I2C_Init+0x13c>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	1e59      	subs	r1, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	fbb1 f3f3 	udiv	r3, r1, r3
 80037e2:	1c59      	adds	r1, r3, #1
 80037e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037e8:	400b      	ands	r3, r1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_I2C_Init+0x138>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	1e59      	subs	r1, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80037fc:	3301      	adds	r3, #1
 80037fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003802:	e051      	b.n	80038a8 <HAL_I2C_Init+0x1dc>
 8003804:	2304      	movs	r3, #4
 8003806:	e04f      	b.n	80038a8 <HAL_I2C_Init+0x1dc>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d111      	bne.n	8003834 <HAL_I2C_Init+0x168>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	1e58      	subs	r0, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6859      	ldr	r1, [r3, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	440b      	add	r3, r1
 800381e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003822:	3301      	adds	r3, #1
 8003824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf0c      	ite	eq
 800382c:	2301      	moveq	r3, #1
 800382e:	2300      	movne	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	e012      	b.n	800385a <HAL_I2C_Init+0x18e>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	1e58      	subs	r0, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6859      	ldr	r1, [r3, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	0099      	lsls	r1, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	fbb0 f3f3 	udiv	r3, r0, r3
 800384a:	3301      	adds	r3, #1
 800384c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf0c      	ite	eq
 8003854:	2301      	moveq	r3, #1
 8003856:	2300      	movne	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_I2C_Init+0x196>
 800385e:	2301      	movs	r3, #1
 8003860:	e022      	b.n	80038a8 <HAL_I2C_Init+0x1dc>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10e      	bne.n	8003888 <HAL_I2C_Init+0x1bc>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	1e58      	subs	r0, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6859      	ldr	r1, [r3, #4]
 8003872:	460b      	mov	r3, r1
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	440b      	add	r3, r1
 8003878:	fbb0 f3f3 	udiv	r3, r0, r3
 800387c:	3301      	adds	r3, #1
 800387e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003886:	e00f      	b.n	80038a8 <HAL_I2C_Init+0x1dc>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1e58      	subs	r0, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6859      	ldr	r1, [r3, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	0099      	lsls	r1, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	fbb0 f3f3 	udiv	r3, r0, r3
 800389e:	3301      	adds	r3, #1
 80038a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	6809      	ldr	r1, [r1, #0]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69da      	ldr	r2, [r3, #28]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6911      	ldr	r1, [r2, #16]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68d2      	ldr	r2, [r2, #12]
 80038e2:	4311      	orrs	r1, r2
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	430b      	orrs	r3, r1
 80038ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695a      	ldr	r2, [r3, #20]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	000186a0 	.word	0x000186a0
 8003944:	001e847f 	.word	0x001e847f
 8003948:	003d08ff 	.word	0x003d08ff
 800394c:	431bde83 	.word	0x431bde83
 8003950:	10624dd3 	.word	0x10624dd3

08003954 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af02      	add	r7, sp, #8
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	607a      	str	r2, [r7, #4]
 800395e:	461a      	mov	r2, r3
 8003960:	460b      	mov	r3, r1
 8003962:	817b      	strh	r3, [r7, #10]
 8003964:	4613      	mov	r3, r2
 8003966:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003968:	f7ff f82e 	bl	80029c8 <HAL_GetTick>
 800396c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b20      	cmp	r3, #32
 8003978:	f040 80e0 	bne.w	8003b3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	2319      	movs	r3, #25
 8003982:	2201      	movs	r2, #1
 8003984:	4970      	ldr	r1, [pc, #448]	; (8003b48 <HAL_I2C_Master_Transmit+0x1f4>)
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 fc66 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003992:	2302      	movs	r3, #2
 8003994:	e0d3      	b.n	8003b3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_I2C_Master_Transmit+0x50>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e0cc      	b.n	8003b3e <HAL_I2C_Master_Transmit+0x1ea>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d007      	beq.n	80039ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0201 	orr.w	r2, r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2221      	movs	r2, #33	; 0x21
 80039de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2210      	movs	r2, #16
 80039e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	893a      	ldrh	r2, [r7, #8]
 80039fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4a50      	ldr	r2, [pc, #320]	; (8003b4c <HAL_I2C_Master_Transmit+0x1f8>)
 8003a0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a0c:	8979      	ldrh	r1, [r7, #10]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	6a3a      	ldr	r2, [r7, #32]
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 fad0 	bl	8003fb8 <I2C_MasterRequestWrite>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e08d      	b.n	8003b3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a22:	2300      	movs	r3, #0
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a38:	e066      	b.n	8003b08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	6a39      	ldr	r1, [r7, #32]
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 fce0 	bl	8004404 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00d      	beq.n	8003a66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d107      	bne.n	8003a62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e06b      	b.n	8003b3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	781a      	ldrb	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d11b      	bne.n	8003adc <HAL_I2C_Master_Transmit+0x188>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d017      	beq.n	8003adc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	781a      	ldrb	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	6a39      	ldr	r1, [r7, #32]
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 fcd0 	bl	8004486 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00d      	beq.n	8003b08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d107      	bne.n	8003b04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e01a      	b.n	8003b3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d194      	bne.n	8003a3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	e000      	b.n	8003b3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b3c:	2302      	movs	r3, #2
  }
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	00100002 	.word	0x00100002
 8003b4c:	ffff0000 	.word	0xffff0000

08003b50 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08c      	sub	sp, #48	; 0x30
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	607a      	str	r2, [r7, #4]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	817b      	strh	r3, [r7, #10]
 8003b60:	4613      	mov	r3, r2
 8003b62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b64:	f7fe ff30 	bl	80029c8 <HAL_GetTick>
 8003b68:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	f040 820b 	bne.w	8003f8e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	2319      	movs	r3, #25
 8003b7e:	2201      	movs	r2, #1
 8003b80:	497c      	ldr	r1, [pc, #496]	; (8003d74 <HAL_I2C_Master_Receive+0x224>)
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 fb68 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e1fe      	b.n	8003f90 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_I2C_Master_Receive+0x50>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e1f7      	b.n	8003f90 <HAL_I2C_Master_Receive+0x440>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d007      	beq.n	8003bc6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 0201 	orr.w	r2, r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2222      	movs	r2, #34	; 0x22
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2210      	movs	r2, #16
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	893a      	ldrh	r2, [r7, #8]
 8003bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4a5c      	ldr	r2, [pc, #368]	; (8003d78 <HAL_I2C_Master_Receive+0x228>)
 8003c06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c08:	8979      	ldrh	r1, [r7, #10]
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fa54 	bl	80040bc <I2C_MasterRequestRead>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e1b8      	b.n	8003f90 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d113      	bne.n	8003c4e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c26:	2300      	movs	r3, #0
 8003c28:	623b      	str	r3, [r7, #32]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	623b      	str	r3, [r7, #32]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	623b      	str	r3, [r7, #32]
 8003c3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	e18c      	b.n	8003f68 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d11b      	bne.n	8003c8e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c66:	2300      	movs	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	61fb      	str	r3, [r7, #28]
 8003c7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	e16c      	b.n	8003f68 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d11b      	bne.n	8003cce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	61bb      	str	r3, [r7, #24]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	61bb      	str	r3, [r7, #24]
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	e14c      	b.n	8003f68 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003cf4:	e138      	b.n	8003f68 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	f200 80f1 	bhi.w	8003ee2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d123      	bne.n	8003d50 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fbfb 	bl	8004508 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e139      	b.n	8003f90 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691a      	ldr	r2, [r3, #16]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d4e:	e10b      	b.n	8003f68 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d14e      	bne.n	8003df6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5e:	2200      	movs	r2, #0
 8003d60:	4906      	ldr	r1, [pc, #24]	; (8003d7c <HAL_I2C_Master_Receive+0x22c>)
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 fa78 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d008      	beq.n	8003d80 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e10e      	b.n	8003f90 <HAL_I2C_Master_Receive+0x440>
 8003d72:	bf00      	nop
 8003d74:	00100002 	.word	0x00100002
 8003d78:	ffff0000 	.word	0xffff0000
 8003d7c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691a      	ldr	r2, [r3, #16]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003df4:	e0b8      	b.n	8003f68 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	4966      	ldr	r1, [pc, #408]	; (8003f98 <HAL_I2C_Master_Receive+0x448>)
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 fa29 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0bf      	b.n	8003f90 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e58:	2200      	movs	r2, #0
 8003e5a:	494f      	ldr	r1, [pc, #316]	; (8003f98 <HAL_I2C_Master_Receive+0x448>)
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f9fb 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e091      	b.n	8003f90 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691a      	ldr	r2, [r3, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ee0:	e042      	b.n	8003f68 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 fb0e 	bl	8004508 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e04c      	b.n	8003f90 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d118      	bne.n	8003f68 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f47f aec2 	bne.w	8003cf6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	e000      	b.n	8003f90 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003f8e:	2302      	movs	r3, #2
  }
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3728      	adds	r7, #40	; 0x28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	00010004 	.word	0x00010004

08003f9c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003faa:	b2db      	uxtb	r3, r3
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	607a      	str	r2, [r7, #4]
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d006      	beq.n	8003fe2 <I2C_MasterRequestWrite+0x2a>
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d003      	beq.n	8003fe2 <I2C_MasterRequestWrite+0x2a>
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fe0:	d108      	bne.n	8003ff4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	e00b      	b.n	800400c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	2b12      	cmp	r3, #18
 8003ffa:	d107      	bne.n	800400c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800400a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 f91d 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00d      	beq.n	8004040 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004032:	d103      	bne.n	800403c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800403a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e035      	b.n	80040ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004048:	d108      	bne.n	800405c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800404a:	897b      	ldrh	r3, [r7, #10]
 800404c:	b2db      	uxtb	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004058:	611a      	str	r2, [r3, #16]
 800405a:	e01b      	b.n	8004094 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800405c:	897b      	ldrh	r3, [r7, #10]
 800405e:	11db      	asrs	r3, r3, #7
 8004060:	b2db      	uxtb	r3, r3
 8004062:	f003 0306 	and.w	r3, r3, #6
 8004066:	b2db      	uxtb	r3, r3
 8004068:	f063 030f 	orn	r3, r3, #15
 800406c:	b2da      	uxtb	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	490e      	ldr	r1, [pc, #56]	; (80040b4 <I2C_MasterRequestWrite+0xfc>)
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f943 	bl	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e010      	b.n	80040ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800408a:	897b      	ldrh	r3, [r7, #10]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	4907      	ldr	r1, [pc, #28]	; (80040b8 <I2C_MasterRequestWrite+0x100>)
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f933 	bl	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	00010008 	.word	0x00010008
 80040b8:	00010002 	.word	0x00010002

080040bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	607a      	str	r2, [r7, #4]
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	460b      	mov	r3, r1
 80040ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d006      	beq.n	80040f6 <I2C_MasterRequestRead+0x3a>
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d003      	beq.n	80040f6 <I2C_MasterRequestRead+0x3a>
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040f4:	d108      	bne.n	8004108 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	e00b      	b.n	8004120 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410c:	2b11      	cmp	r3, #17
 800410e:	d107      	bne.n	8004120 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800411e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f893 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00d      	beq.n	8004154 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004146:	d103      	bne.n	8004150 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800414e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e079      	b.n	8004248 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800415c:	d108      	bne.n	8004170 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800415e:	897b      	ldrh	r3, [r7, #10]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	b2da      	uxtb	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	611a      	str	r2, [r3, #16]
 800416e:	e05f      	b.n	8004230 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004170:	897b      	ldrh	r3, [r7, #10]
 8004172:	11db      	asrs	r3, r3, #7
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f003 0306 	and.w	r3, r3, #6
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f063 030f 	orn	r3, r3, #15
 8004180:	b2da      	uxtb	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	4930      	ldr	r1, [pc, #192]	; (8004250 <I2C_MasterRequestRead+0x194>)
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 f8b9 	bl	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e054      	b.n	8004248 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800419e:	897b      	ldrh	r3, [r7, #10]
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	4929      	ldr	r1, [pc, #164]	; (8004254 <I2C_MasterRequestRead+0x198>)
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f8a9 	bl	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e044      	b.n	8004248 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041be:	2300      	movs	r3, #0
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 f831 	bl	8004258 <I2C_WaitOnFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00d      	beq.n	8004218 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800420a:	d103      	bne.n	8004214 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004212:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e017      	b.n	8004248 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004218:	897b      	ldrh	r3, [r7, #10]
 800421a:	11db      	asrs	r3, r3, #7
 800421c:	b2db      	uxtb	r3, r3
 800421e:	f003 0306 	and.w	r3, r3, #6
 8004222:	b2db      	uxtb	r3, r3
 8004224:	f063 030e 	orn	r3, r3, #14
 8004228:	b2da      	uxtb	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	4907      	ldr	r1, [pc, #28]	; (8004254 <I2C_MasterRequestRead+0x198>)
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f865 	bl	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	00010008 	.word	0x00010008
 8004254:	00010002 	.word	0x00010002

08004258 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	4613      	mov	r3, r2
 8004266:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004268:	e025      	b.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004270:	d021      	beq.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004272:	f7fe fba9 	bl	80029c8 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d302      	bcc.n	8004288 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d116      	bne.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2220      	movs	r2, #32
 8004292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f043 0220 	orr.w	r2, r3, #32
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e023      	b.n	80042fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	0c1b      	lsrs	r3, r3, #16
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d10d      	bne.n	80042dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	43da      	mvns	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4013      	ands	r3, r2
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	bf0c      	ite	eq
 80042d2:	2301      	moveq	r3, #1
 80042d4:	2300      	movne	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	e00c      	b.n	80042f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	43da      	mvns	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4013      	ands	r3, r2
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	bf0c      	ite	eq
 80042ee:	2301      	moveq	r3, #1
 80042f0:	2300      	movne	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d0b6      	beq.n	800426a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	607a      	str	r2, [r7, #4]
 8004312:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004314:	e051      	b.n	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004324:	d123      	bne.n	800436e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004334:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800433e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f043 0204 	orr.w	r2, r3, #4
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e046      	b.n	80043fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004374:	d021      	beq.n	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004376:	f7fe fb27 	bl	80029c8 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	429a      	cmp	r2, r3
 8004384:	d302      	bcc.n	800438c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d116      	bne.n	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2220      	movs	r2, #32
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f043 0220 	orr.w	r2, r3, #32
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e020      	b.n	80043fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d10c      	bne.n	80043de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	43da      	mvns	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4013      	ands	r3, r2
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	bf14      	ite	ne
 80043d6:	2301      	movne	r3, #1
 80043d8:	2300      	moveq	r3, #0
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	e00b      	b.n	80043f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	43da      	mvns	r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	4013      	ands	r3, r2
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	bf14      	ite	ne
 80043f0:	2301      	movne	r3, #1
 80043f2:	2300      	moveq	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d18d      	bne.n	8004316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004410:	e02d      	b.n	800446e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f8ce 	bl	80045b4 <I2C_IsAcknowledgeFailed>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e02d      	b.n	800447e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004428:	d021      	beq.n	800446e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442a:	f7fe facd 	bl	80029c8 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	429a      	cmp	r2, r3
 8004438:	d302      	bcc.n	8004440 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d116      	bne.n	800446e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f043 0220 	orr.w	r2, r3, #32
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e007      	b.n	800447e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	2b80      	cmp	r3, #128	; 0x80
 800447a:	d1ca      	bne.n	8004412 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004492:	e02d      	b.n	80044f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f88d 	bl	80045b4 <I2C_IsAcknowledgeFailed>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e02d      	b.n	8004500 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044aa:	d021      	beq.n	80044f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ac:	f7fe fa8c 	bl	80029c8 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d302      	bcc.n	80044c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d116      	bne.n	80044f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	f043 0220 	orr.w	r2, r3, #32
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e007      	b.n	8004500 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d1ca      	bne.n	8004494 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004514:	e042      	b.n	800459c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b10      	cmp	r3, #16
 8004522:	d119      	bne.n	8004558 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f06f 0210 	mvn.w	r2, #16
 800452c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e029      	b.n	80045ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004558:	f7fe fa36 	bl	80029c8 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	429a      	cmp	r2, r3
 8004566:	d302      	bcc.n	800456e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d116      	bne.n	800459c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	f043 0220 	orr.w	r2, r3, #32
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e007      	b.n	80045ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a6:	2b40      	cmp	r3, #64	; 0x40
 80045a8:	d1b5      	bne.n	8004516 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ca:	d11b      	bne.n	8004604 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	f043 0204 	orr.w	r2, r3, #4
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
	...

08004614 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e267      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d075      	beq.n	800471e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004632:	4b88      	ldr	r3, [pc, #544]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 030c 	and.w	r3, r3, #12
 800463a:	2b04      	cmp	r3, #4
 800463c:	d00c      	beq.n	8004658 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800463e:	4b85      	ldr	r3, [pc, #532]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004646:	2b08      	cmp	r3, #8
 8004648:	d112      	bne.n	8004670 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800464a:	4b82      	ldr	r3, [pc, #520]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004656:	d10b      	bne.n	8004670 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004658:	4b7e      	ldr	r3, [pc, #504]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d05b      	beq.n	800471c <HAL_RCC_OscConfig+0x108>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d157      	bne.n	800471c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e242      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004678:	d106      	bne.n	8004688 <HAL_RCC_OscConfig+0x74>
 800467a:	4b76      	ldr	r3, [pc, #472]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a75      	ldr	r2, [pc, #468]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 8004680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	e01d      	b.n	80046c4 <HAL_RCC_OscConfig+0xb0>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004690:	d10c      	bne.n	80046ac <HAL_RCC_OscConfig+0x98>
 8004692:	4b70      	ldr	r3, [pc, #448]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a6f      	ldr	r2, [pc, #444]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 8004698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	4b6d      	ldr	r3, [pc, #436]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a6c      	ldr	r2, [pc, #432]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 80046a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	e00b      	b.n	80046c4 <HAL_RCC_OscConfig+0xb0>
 80046ac:	4b69      	ldr	r3, [pc, #420]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a68      	ldr	r2, [pc, #416]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 80046b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	4b66      	ldr	r3, [pc, #408]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a65      	ldr	r2, [pc, #404]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 80046be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d013      	beq.n	80046f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046cc:	f7fe f97c 	bl	80029c8 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046d4:	f7fe f978 	bl	80029c8 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b64      	cmp	r3, #100	; 0x64
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e207      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e6:	4b5b      	ldr	r3, [pc, #364]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCC_OscConfig+0xc0>
 80046f2:	e014      	b.n	800471e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f4:	f7fe f968 	bl	80029c8 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046fc:	f7fe f964 	bl	80029c8 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b64      	cmp	r3, #100	; 0x64
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e1f3      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800470e:	4b51      	ldr	r3, [pc, #324]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f0      	bne.n	80046fc <HAL_RCC_OscConfig+0xe8>
 800471a:	e000      	b.n	800471e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800471c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d063      	beq.n	80047f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800472a:	4b4a      	ldr	r3, [pc, #296]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 030c 	and.w	r3, r3, #12
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00b      	beq.n	800474e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004736:	4b47      	ldr	r3, [pc, #284]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800473e:	2b08      	cmp	r3, #8
 8004740:	d11c      	bne.n	800477c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004742:	4b44      	ldr	r3, [pc, #272]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d116      	bne.n	800477c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800474e:	4b41      	ldr	r3, [pc, #260]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <HAL_RCC_OscConfig+0x152>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d001      	beq.n	8004766 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e1c7      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004766:	4b3b      	ldr	r3, [pc, #236]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4937      	ldr	r1, [pc, #220]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 8004776:	4313      	orrs	r3, r2
 8004778:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800477a:	e03a      	b.n	80047f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d020      	beq.n	80047c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004784:	4b34      	ldr	r3, [pc, #208]	; (8004858 <HAL_RCC_OscConfig+0x244>)
 8004786:	2201      	movs	r2, #1
 8004788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478a:	f7fe f91d 	bl	80029c8 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004792:	f7fe f919 	bl	80029c8 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e1a8      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a4:	4b2b      	ldr	r3, [pc, #172]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0f0      	beq.n	8004792 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b0:	4b28      	ldr	r3, [pc, #160]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	4925      	ldr	r1, [pc, #148]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	600b      	str	r3, [r1, #0]
 80047c4:	e015      	b.n	80047f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047c6:	4b24      	ldr	r3, [pc, #144]	; (8004858 <HAL_RCC_OscConfig+0x244>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047cc:	f7fe f8fc 	bl	80029c8 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047d4:	f7fe f8f8 	bl	80029c8 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e187      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047e6:	4b1b      	ldr	r3, [pc, #108]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d036      	beq.n	800486c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d016      	beq.n	8004834 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004806:	4b15      	ldr	r3, [pc, #84]	; (800485c <HAL_RCC_OscConfig+0x248>)
 8004808:	2201      	movs	r2, #1
 800480a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480c:	f7fe f8dc 	bl	80029c8 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004814:	f7fe f8d8 	bl	80029c8 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e167      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004826:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <HAL_RCC_OscConfig+0x240>)
 8004828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0x200>
 8004832:	e01b      	b.n	800486c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004834:	4b09      	ldr	r3, [pc, #36]	; (800485c <HAL_RCC_OscConfig+0x248>)
 8004836:	2200      	movs	r2, #0
 8004838:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800483a:	f7fe f8c5 	bl	80029c8 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004840:	e00e      	b.n	8004860 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004842:	f7fe f8c1 	bl	80029c8 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d907      	bls.n	8004860 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e150      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
 8004854:	40023800 	.word	0x40023800
 8004858:	42470000 	.word	0x42470000
 800485c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004860:	4b88      	ldr	r3, [pc, #544]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1ea      	bne.n	8004842 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 8097 	beq.w	80049a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800487a:	2300      	movs	r3, #0
 800487c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800487e:	4b81      	ldr	r3, [pc, #516]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10f      	bne.n	80048aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800488a:	2300      	movs	r3, #0
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	4b7d      	ldr	r3, [pc, #500]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	4a7c      	ldr	r2, [pc, #496]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004898:	6413      	str	r3, [r2, #64]	; 0x40
 800489a:	4b7a      	ldr	r3, [pc, #488]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a2:	60bb      	str	r3, [r7, #8]
 80048a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048a6:	2301      	movs	r3, #1
 80048a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048aa:	4b77      	ldr	r3, [pc, #476]	; (8004a88 <HAL_RCC_OscConfig+0x474>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d118      	bne.n	80048e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048b6:	4b74      	ldr	r3, [pc, #464]	; (8004a88 <HAL_RCC_OscConfig+0x474>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a73      	ldr	r2, [pc, #460]	; (8004a88 <HAL_RCC_OscConfig+0x474>)
 80048bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048c2:	f7fe f881 	bl	80029c8 <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ca:	f7fe f87d 	bl	80029c8 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e10c      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048dc:	4b6a      	ldr	r3, [pc, #424]	; (8004a88 <HAL_RCC_OscConfig+0x474>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0f0      	beq.n	80048ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d106      	bne.n	80048fe <HAL_RCC_OscConfig+0x2ea>
 80048f0:	4b64      	ldr	r3, [pc, #400]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 80048f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f4:	4a63      	ldr	r2, [pc, #396]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 80048f6:	f043 0301 	orr.w	r3, r3, #1
 80048fa:	6713      	str	r3, [r2, #112]	; 0x70
 80048fc:	e01c      	b.n	8004938 <HAL_RCC_OscConfig+0x324>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	2b05      	cmp	r3, #5
 8004904:	d10c      	bne.n	8004920 <HAL_RCC_OscConfig+0x30c>
 8004906:	4b5f      	ldr	r3, [pc, #380]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490a:	4a5e      	ldr	r2, [pc, #376]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 800490c:	f043 0304 	orr.w	r3, r3, #4
 8004910:	6713      	str	r3, [r2, #112]	; 0x70
 8004912:	4b5c      	ldr	r3, [pc, #368]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004916:	4a5b      	ldr	r2, [pc, #364]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004918:	f043 0301 	orr.w	r3, r3, #1
 800491c:	6713      	str	r3, [r2, #112]	; 0x70
 800491e:	e00b      	b.n	8004938 <HAL_RCC_OscConfig+0x324>
 8004920:	4b58      	ldr	r3, [pc, #352]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004924:	4a57      	ldr	r2, [pc, #348]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004926:	f023 0301 	bic.w	r3, r3, #1
 800492a:	6713      	str	r3, [r2, #112]	; 0x70
 800492c:	4b55      	ldr	r3, [pc, #340]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 800492e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004930:	4a54      	ldr	r2, [pc, #336]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004932:	f023 0304 	bic.w	r3, r3, #4
 8004936:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d015      	beq.n	800496c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004940:	f7fe f842 	bl	80029c8 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004946:	e00a      	b.n	800495e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004948:	f7fe f83e 	bl	80029c8 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f241 3288 	movw	r2, #5000	; 0x1388
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e0cb      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800495e:	4b49      	ldr	r3, [pc, #292]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0ee      	beq.n	8004948 <HAL_RCC_OscConfig+0x334>
 800496a:	e014      	b.n	8004996 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800496c:	f7fe f82c 	bl	80029c8 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004972:	e00a      	b.n	800498a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004974:	f7fe f828 	bl	80029c8 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004982:	4293      	cmp	r3, r2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e0b5      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800498a:	4b3e      	ldr	r3, [pc, #248]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1ee      	bne.n	8004974 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004996:	7dfb      	ldrb	r3, [r7, #23]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d105      	bne.n	80049a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800499c:	4b39      	ldr	r3, [pc, #228]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	4a38      	ldr	r2, [pc, #224]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 80049a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 80a1 	beq.w	8004af4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049b2:	4b34      	ldr	r3, [pc, #208]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d05c      	beq.n	8004a78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d141      	bne.n	8004a4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c6:	4b31      	ldr	r3, [pc, #196]	; (8004a8c <HAL_RCC_OscConfig+0x478>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049cc:	f7fd fffc 	bl	80029c8 <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049d4:	f7fd fff8 	bl	80029c8 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e087      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e6:	4b27      	ldr	r3, [pc, #156]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1f0      	bne.n	80049d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69da      	ldr	r2, [r3, #28]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	019b      	lsls	r3, r3, #6
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	085b      	lsrs	r3, r3, #1
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	041b      	lsls	r3, r3, #16
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	061b      	lsls	r3, r3, #24
 8004a16:	491b      	ldr	r1, [pc, #108]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a1c:	4b1b      	ldr	r3, [pc, #108]	; (8004a8c <HAL_RCC_OscConfig+0x478>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a22:	f7fd ffd1 	bl	80029c8 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a2a:	f7fd ffcd 	bl	80029c8 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e05c      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a3c:	4b11      	ldr	r3, [pc, #68]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0f0      	beq.n	8004a2a <HAL_RCC_OscConfig+0x416>
 8004a48:	e054      	b.n	8004af4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a4a:	4b10      	ldr	r3, [pc, #64]	; (8004a8c <HAL_RCC_OscConfig+0x478>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a50:	f7fd ffba 	bl	80029c8 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a58:	f7fd ffb6 	bl	80029c8 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e045      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a6a:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <HAL_RCC_OscConfig+0x470>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0x444>
 8004a76:	e03d      	b.n	8004af4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d107      	bne.n	8004a90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e038      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
 8004a84:	40023800 	.word	0x40023800
 8004a88:	40007000 	.word	0x40007000
 8004a8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a90:	4b1b      	ldr	r3, [pc, #108]	; (8004b00 <HAL_RCC_OscConfig+0x4ec>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d028      	beq.n	8004af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d121      	bne.n	8004af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d11a      	bne.n	8004af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ac6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d111      	bne.n	8004af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	085b      	lsrs	r3, r3, #1
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d107      	bne.n	8004af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d001      	beq.n	8004af4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e000      	b.n	8004af6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	40023800 	.word	0x40023800

08004b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e0cc      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b18:	4b68      	ldr	r3, [pc, #416]	; (8004cbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d90c      	bls.n	8004b40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b26:	4b65      	ldr	r3, [pc, #404]	; (8004cbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2e:	4b63      	ldr	r3, [pc, #396]	; (8004cbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d001      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e0b8      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d020      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b58:	4b59      	ldr	r3, [pc, #356]	; (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	4a58      	ldr	r2, [pc, #352]	; (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d005      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b70:	4b53      	ldr	r3, [pc, #332]	; (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	4a52      	ldr	r2, [pc, #328]	; (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b7c:	4b50      	ldr	r3, [pc, #320]	; (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	494d      	ldr	r1, [pc, #308]	; (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d044      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d107      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba2:	4b47      	ldr	r3, [pc, #284]	; (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d119      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e07f      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d003      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bbe:	2b03      	cmp	r3, #3
 8004bc0:	d107      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bc2:	4b3f      	ldr	r3, [pc, #252]	; (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d109      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e06f      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd2:	4b3b      	ldr	r3, [pc, #236]	; (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e067      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004be2:	4b37      	ldr	r3, [pc, #220]	; (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f023 0203 	bic.w	r2, r3, #3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	4934      	ldr	r1, [pc, #208]	; (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bf4:	f7fd fee8 	bl	80029c8 <HAL_GetTick>
 8004bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfa:	e00a      	b.n	8004c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bfc:	f7fd fee4 	bl	80029c8 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e04f      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c12:	4b2b      	ldr	r3, [pc, #172]	; (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 020c 	and.w	r2, r3, #12
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d1eb      	bne.n	8004bfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c24:	4b25      	ldr	r3, [pc, #148]	; (8004cbc <HAL_RCC_ClockConfig+0x1b8>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d20c      	bcs.n	8004c4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c32:	4b22      	ldr	r3, [pc, #136]	; (8004cbc <HAL_RCC_ClockConfig+0x1b8>)
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c3a:	4b20      	ldr	r3, [pc, #128]	; (8004cbc <HAL_RCC_ClockConfig+0x1b8>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d001      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e032      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d008      	beq.n	8004c6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c58:	4b19      	ldr	r3, [pc, #100]	; (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	4916      	ldr	r1, [pc, #88]	; (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d009      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c76:	4b12      	ldr	r3, [pc, #72]	; (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	490e      	ldr	r1, [pc, #56]	; (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c8a:	f000 f821 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	091b      	lsrs	r3, r3, #4
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	490a      	ldr	r1, [pc, #40]	; (8004cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c9c:	5ccb      	ldrb	r3, [r1, r3]
 8004c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca2:	4a09      	ldr	r2, [pc, #36]	; (8004cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ca6:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <HAL_RCC_ClockConfig+0x1c8>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fd fe48 	bl	8002940 <HAL_InitTick>

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	40023c00 	.word	0x40023c00
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	08007f7c 	.word	0x08007f7c
 8004cc8:	20000018 	.word	0x20000018
 8004ccc:	2000001c 	.word	0x2000001c

08004cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cd4:	b090      	sub	sp, #64	; 0x40
 8004cd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	637b      	str	r3, [r7, #52]	; 0x34
 8004cdc:	2300      	movs	r3, #0
 8004cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ce8:	4b59      	ldr	r3, [pc, #356]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 030c 	and.w	r3, r3, #12
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d00d      	beq.n	8004d10 <HAL_RCC_GetSysClockFreq+0x40>
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	f200 80a1 	bhi.w	8004e3c <HAL_RCC_GetSysClockFreq+0x16c>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <HAL_RCC_GetSysClockFreq+0x34>
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d003      	beq.n	8004d0a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d02:	e09b      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d04:	4b53      	ldr	r3, [pc, #332]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d06:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004d08:	e09b      	b.n	8004e42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d0a:	4b53      	ldr	r3, [pc, #332]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d0e:	e098      	b.n	8004e42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d10:	4b4f      	ldr	r3, [pc, #316]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d18:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d1a:	4b4d      	ldr	r3, [pc, #308]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d028      	beq.n	8004d78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d26:	4b4a      	ldr	r3, [pc, #296]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	099b      	lsrs	r3, r3, #6
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	623b      	str	r3, [r7, #32]
 8004d30:	627a      	str	r2, [r7, #36]	; 0x24
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d38:	2100      	movs	r1, #0
 8004d3a:	4b47      	ldr	r3, [pc, #284]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d3c:	fb03 f201 	mul.w	r2, r3, r1
 8004d40:	2300      	movs	r3, #0
 8004d42:	fb00 f303 	mul.w	r3, r0, r3
 8004d46:	4413      	add	r3, r2
 8004d48:	4a43      	ldr	r2, [pc, #268]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d4a:	fba0 1202 	umull	r1, r2, r0, r2
 8004d4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d50:	460a      	mov	r2, r1
 8004d52:	62ba      	str	r2, [r7, #40]	; 0x28
 8004d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d56:	4413      	add	r3, r2
 8004d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	61bb      	str	r3, [r7, #24]
 8004d60:	61fa      	str	r2, [r7, #28]
 8004d62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004d6a:	f7fb ff4d 	bl	8000c08 <__aeabi_uldivmod>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4613      	mov	r3, r2
 8004d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d76:	e053      	b.n	8004e20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d78:	4b35      	ldr	r3, [pc, #212]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	099b      	lsrs	r3, r3, #6
 8004d7e:	2200      	movs	r2, #0
 8004d80:	613b      	str	r3, [r7, #16]
 8004d82:	617a      	str	r2, [r7, #20]
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004d8a:	f04f 0b00 	mov.w	fp, #0
 8004d8e:	4652      	mov	r2, sl
 8004d90:	465b      	mov	r3, fp
 8004d92:	f04f 0000 	mov.w	r0, #0
 8004d96:	f04f 0100 	mov.w	r1, #0
 8004d9a:	0159      	lsls	r1, r3, #5
 8004d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004da0:	0150      	lsls	r0, r2, #5
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	ebb2 080a 	subs.w	r8, r2, sl
 8004daa:	eb63 090b 	sbc.w	r9, r3, fp
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004dba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004dbe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004dc2:	ebb2 0408 	subs.w	r4, r2, r8
 8004dc6:	eb63 0509 	sbc.w	r5, r3, r9
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	00eb      	lsls	r3, r5, #3
 8004dd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dd8:	00e2      	lsls	r2, r4, #3
 8004dda:	4614      	mov	r4, r2
 8004ddc:	461d      	mov	r5, r3
 8004dde:	eb14 030a 	adds.w	r3, r4, sl
 8004de2:	603b      	str	r3, [r7, #0]
 8004de4:	eb45 030b 	adc.w	r3, r5, fp
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004df6:	4629      	mov	r1, r5
 8004df8:	028b      	lsls	r3, r1, #10
 8004dfa:	4621      	mov	r1, r4
 8004dfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e00:	4621      	mov	r1, r4
 8004e02:	028a      	lsls	r2, r1, #10
 8004e04:	4610      	mov	r0, r2
 8004e06:	4619      	mov	r1, r3
 8004e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	60fa      	str	r2, [r7, #12]
 8004e10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e14:	f7fb fef8 	bl	8000c08 <__aeabi_uldivmod>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e20:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	0c1b      	lsrs	r3, r3, #16
 8004e26:	f003 0303 	and.w	r3, r3, #3
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004e30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e3a:	e002      	b.n	8004e42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e3c:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3740      	adds	r7, #64	; 0x40
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e4e:	bf00      	nop
 8004e50:	40023800 	.word	0x40023800
 8004e54:	00f42400 	.word	0x00f42400
 8004e58:	017d7840 	.word	0x017d7840

08004e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e60:	4b03      	ldr	r3, [pc, #12]	; (8004e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e62:	681b      	ldr	r3, [r3, #0]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	20000018 	.word	0x20000018

08004e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e78:	f7ff fff0 	bl	8004e5c <HAL_RCC_GetHCLKFreq>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	0a9b      	lsrs	r3, r3, #10
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	4903      	ldr	r1, [pc, #12]	; (8004e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e8a:	5ccb      	ldrb	r3, [r1, r3]
 8004e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40023800 	.word	0x40023800
 8004e98:	08007f8c 	.word	0x08007f8c

08004e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ea0:	f7ff ffdc 	bl	8004e5c <HAL_RCC_GetHCLKFreq>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	0b5b      	lsrs	r3, r3, #13
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	4903      	ldr	r1, [pc, #12]	; (8004ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eb2:	5ccb      	ldrb	r3, [r1, r3]
 8004eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	08007f8c 	.word	0x08007f8c

08004ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e041      	b.n	8004f5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d106      	bne.n	8004ef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7fd fb70 	bl	80025d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3304      	adds	r3, #4
 8004f00:	4619      	mov	r1, r3
 8004f02:	4610      	mov	r0, r2
 8004f04:	f000 f950 	bl	80051a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d001      	beq.n	8004f7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e03c      	b.n	8004ff6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a1e      	ldr	r2, [pc, #120]	; (8005004 <HAL_TIM_Base_Start+0xa0>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d018      	beq.n	8004fc0 <HAL_TIM_Base_Start+0x5c>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f96:	d013      	beq.n	8004fc0 <HAL_TIM_Base_Start+0x5c>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a1a      	ldr	r2, [pc, #104]	; (8005008 <HAL_TIM_Base_Start+0xa4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00e      	beq.n	8004fc0 <HAL_TIM_Base_Start+0x5c>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a19      	ldr	r2, [pc, #100]	; (800500c <HAL_TIM_Base_Start+0xa8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d009      	beq.n	8004fc0 <HAL_TIM_Base_Start+0x5c>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a17      	ldr	r2, [pc, #92]	; (8005010 <HAL_TIM_Base_Start+0xac>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d004      	beq.n	8004fc0 <HAL_TIM_Base_Start+0x5c>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a16      	ldr	r2, [pc, #88]	; (8005014 <HAL_TIM_Base_Start+0xb0>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d111      	bne.n	8004fe4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b06      	cmp	r3, #6
 8004fd0:	d010      	beq.n	8004ff4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0201 	orr.w	r2, r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe2:	e007      	b.n	8004ff4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0201 	orr.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40010000 	.word	0x40010000
 8005008:	40000400 	.word	0x40000400
 800500c:	40000800 	.word	0x40000800
 8005010:	40000c00 	.word	0x40000c00
 8005014:	40014000 	.word	0x40014000

08005018 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800502c:	2b01      	cmp	r3, #1
 800502e:	d101      	bne.n	8005034 <HAL_TIM_ConfigClockSource+0x1c>
 8005030:	2302      	movs	r3, #2
 8005032:	e0b4      	b.n	800519e <HAL_TIM_ConfigClockSource+0x186>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800505a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800506c:	d03e      	beq.n	80050ec <HAL_TIM_ConfigClockSource+0xd4>
 800506e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005072:	f200 8087 	bhi.w	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 8005076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800507a:	f000 8086 	beq.w	800518a <HAL_TIM_ConfigClockSource+0x172>
 800507e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005082:	d87f      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 8005084:	2b70      	cmp	r3, #112	; 0x70
 8005086:	d01a      	beq.n	80050be <HAL_TIM_ConfigClockSource+0xa6>
 8005088:	2b70      	cmp	r3, #112	; 0x70
 800508a:	d87b      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 800508c:	2b60      	cmp	r3, #96	; 0x60
 800508e:	d050      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0x11a>
 8005090:	2b60      	cmp	r3, #96	; 0x60
 8005092:	d877      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 8005094:	2b50      	cmp	r3, #80	; 0x50
 8005096:	d03c      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0xfa>
 8005098:	2b50      	cmp	r3, #80	; 0x50
 800509a:	d873      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 800509c:	2b40      	cmp	r3, #64	; 0x40
 800509e:	d058      	beq.n	8005152 <HAL_TIM_ConfigClockSource+0x13a>
 80050a0:	2b40      	cmp	r3, #64	; 0x40
 80050a2:	d86f      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 80050a4:	2b30      	cmp	r3, #48	; 0x30
 80050a6:	d064      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0x15a>
 80050a8:	2b30      	cmp	r3, #48	; 0x30
 80050aa:	d86b      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	d060      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0x15a>
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	d867      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d05c      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0x15a>
 80050b8:	2b10      	cmp	r3, #16
 80050ba:	d05a      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0x15a>
 80050bc:	e062      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6818      	ldr	r0, [r3, #0]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6899      	ldr	r1, [r3, #8]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f000 f965 	bl	800539c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	609a      	str	r2, [r3, #8]
      break;
 80050ea:	e04f      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6818      	ldr	r0, [r3, #0]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	6899      	ldr	r1, [r3, #8]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f000 f94e 	bl	800539c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800510e:	609a      	str	r2, [r3, #8]
      break;
 8005110:	e03c      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6818      	ldr	r0, [r3, #0]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	6859      	ldr	r1, [r3, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	461a      	mov	r2, r3
 8005120:	f000 f8c2 	bl	80052a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2150      	movs	r1, #80	; 0x50
 800512a:	4618      	mov	r0, r3
 800512c:	f000 f91b 	bl	8005366 <TIM_ITRx_SetConfig>
      break;
 8005130:	e02c      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	6859      	ldr	r1, [r3, #4]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	461a      	mov	r2, r3
 8005140:	f000 f8e1 	bl	8005306 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2160      	movs	r1, #96	; 0x60
 800514a:	4618      	mov	r0, r3
 800514c:	f000 f90b 	bl	8005366 <TIM_ITRx_SetConfig>
      break;
 8005150:	e01c      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6818      	ldr	r0, [r3, #0]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	6859      	ldr	r1, [r3, #4]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	461a      	mov	r2, r3
 8005160:	f000 f8a2 	bl	80052a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2140      	movs	r1, #64	; 0x40
 800516a:	4618      	mov	r0, r3
 800516c:	f000 f8fb 	bl	8005366 <TIM_ITRx_SetConfig>
      break;
 8005170:	e00c      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4619      	mov	r1, r3
 800517c:	4610      	mov	r0, r2
 800517e:	f000 f8f2 	bl	8005366 <TIM_ITRx_SetConfig>
      break;
 8005182:	e003      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	73fb      	strb	r3, [r7, #15]
      break;
 8005188:	e000      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800518a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800519c:	7bfb      	ldrb	r3, [r7, #15]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a34      	ldr	r2, [pc, #208]	; (800528c <TIM_Base_SetConfig+0xe4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00f      	beq.n	80051e0 <TIM_Base_SetConfig+0x38>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c6:	d00b      	beq.n	80051e0 <TIM_Base_SetConfig+0x38>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a31      	ldr	r2, [pc, #196]	; (8005290 <TIM_Base_SetConfig+0xe8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d007      	beq.n	80051e0 <TIM_Base_SetConfig+0x38>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a30      	ldr	r2, [pc, #192]	; (8005294 <TIM_Base_SetConfig+0xec>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d003      	beq.n	80051e0 <TIM_Base_SetConfig+0x38>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a2f      	ldr	r2, [pc, #188]	; (8005298 <TIM_Base_SetConfig+0xf0>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d108      	bne.n	80051f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a25      	ldr	r2, [pc, #148]	; (800528c <TIM_Base_SetConfig+0xe4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d01b      	beq.n	8005232 <TIM_Base_SetConfig+0x8a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005200:	d017      	beq.n	8005232 <TIM_Base_SetConfig+0x8a>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a22      	ldr	r2, [pc, #136]	; (8005290 <TIM_Base_SetConfig+0xe8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d013      	beq.n	8005232 <TIM_Base_SetConfig+0x8a>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a21      	ldr	r2, [pc, #132]	; (8005294 <TIM_Base_SetConfig+0xec>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00f      	beq.n	8005232 <TIM_Base_SetConfig+0x8a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a20      	ldr	r2, [pc, #128]	; (8005298 <TIM_Base_SetConfig+0xf0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00b      	beq.n	8005232 <TIM_Base_SetConfig+0x8a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a1f      	ldr	r2, [pc, #124]	; (800529c <TIM_Base_SetConfig+0xf4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d007      	beq.n	8005232 <TIM_Base_SetConfig+0x8a>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a1e      	ldr	r2, [pc, #120]	; (80052a0 <TIM_Base_SetConfig+0xf8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d003      	beq.n	8005232 <TIM_Base_SetConfig+0x8a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a1d      	ldr	r2, [pc, #116]	; (80052a4 <TIM_Base_SetConfig+0xfc>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d108      	bne.n	8005244 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a08      	ldr	r2, [pc, #32]	; (800528c <TIM_Base_SetConfig+0xe4>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d103      	bne.n	8005278 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	691a      	ldr	r2, [r3, #16]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	615a      	str	r2, [r3, #20]
}
 800527e:	bf00      	nop
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40010000 	.word	0x40010000
 8005290:	40000400 	.word	0x40000400
 8005294:	40000800 	.word	0x40000800
 8005298:	40000c00 	.word	0x40000c00
 800529c:	40014000 	.word	0x40014000
 80052a0:	40014400 	.word	0x40014400
 80052a4:	40014800 	.word	0x40014800

080052a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	f023 0201 	bic.w	r2, r3, #1
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f023 030a 	bic.w	r3, r3, #10
 80052e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	621a      	str	r2, [r3, #32]
}
 80052fa:	bf00      	nop
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005306:	b480      	push	{r7}
 8005308:	b087      	sub	sp, #28
 800530a:	af00      	add	r7, sp, #0
 800530c:	60f8      	str	r0, [r7, #12]
 800530e:	60b9      	str	r1, [r7, #8]
 8005310:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f023 0210 	bic.w	r2, r3, #16
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005330:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	031b      	lsls	r3, r3, #12
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005342:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	621a      	str	r2, [r3, #32]
}
 800535a:	bf00      	nop
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005366:	b480      	push	{r7}
 8005368:	b085      	sub	sp, #20
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	f043 0307 	orr.w	r3, r3, #7
 8005388:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	609a      	str	r2, [r3, #8]
}
 8005390:	bf00      	nop
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	021a      	lsls	r2, r3, #8
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	431a      	orrs	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	609a      	str	r2, [r3, #8]
}
 80053d0:	bf00      	nop
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e050      	b.n	8005496 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a1c      	ldr	r2, [pc, #112]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d018      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005440:	d013      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a18      	ldr	r2, [pc, #96]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00e      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a16      	ldr	r2, [pc, #88]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d009      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a15      	ldr	r2, [pc, #84]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d004      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a13      	ldr	r2, [pc, #76]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d10c      	bne.n	8005484 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005470:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	4313      	orrs	r3, r2
 800547a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	40010000 	.word	0x40010000
 80054a8:	40000400 	.word	0x40000400
 80054ac:	40000800 	.word	0x40000800
 80054b0:	40000c00 	.word	0x40000c00
 80054b4:	40014000 	.word	0x40014000

080054b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e03f      	b.n	800554a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d106      	bne.n	80054e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7fd f898 	bl	8002614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2224      	movs	r2, #36	; 0x24
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f86d 	bl	80055dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	691a      	ldr	r2, [r3, #16]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005510:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695a      	ldr	r2, [r3, #20]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005520:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68da      	ldr	r2, [r3, #12]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005530:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2220      	movs	r2, #32
 8005544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005552:	b480      	push	{r7}
 8005554:	b085      	sub	sp, #20
 8005556:	af00      	add	r7, sp, #0
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	4613      	mov	r3, r2
 800555e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b20      	cmp	r3, #32
 800556a:	d130      	bne.n	80055ce <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d002      	beq.n	8005578 <HAL_UART_Transmit_IT+0x26>
 8005572:	88fb      	ldrh	r3, [r7, #6]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e029      	b.n	80055d0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005582:	2b01      	cmp	r3, #1
 8005584:	d101      	bne.n	800558a <HAL_UART_Transmit_IT+0x38>
 8005586:	2302      	movs	r3, #2
 8005588:	e022      	b.n	80055d0 <HAL_UART_Transmit_IT+0x7e>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	88fa      	ldrh	r2, [r7, #6]
 800559c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	88fa      	ldrh	r2, [r7, #6]
 80055a2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2221      	movs	r2, #33	; 0x21
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055c8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	e000      	b.n	80055d0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80055ce:	2302      	movs	r3, #2
  }
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055e0:	b0c0      	sub	sp, #256	; 0x100
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f8:	68d9      	ldr	r1, [r3, #12]
 80055fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	ea40 0301 	orr.w	r3, r0, r1
 8005604:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	431a      	orrs	r2, r3
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	431a      	orrs	r2, r3
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005634:	f021 010c 	bic.w	r1, r1, #12
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005642:	430b      	orrs	r3, r1
 8005644:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005656:	6999      	ldr	r1, [r3, #24]
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	ea40 0301 	orr.w	r3, r0, r1
 8005662:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	4b8f      	ldr	r3, [pc, #572]	; (80058a8 <UART_SetConfig+0x2cc>)
 800566c:	429a      	cmp	r2, r3
 800566e:	d005      	beq.n	800567c <UART_SetConfig+0xa0>
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	4b8d      	ldr	r3, [pc, #564]	; (80058ac <UART_SetConfig+0x2d0>)
 8005678:	429a      	cmp	r2, r3
 800567a:	d104      	bne.n	8005686 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800567c:	f7ff fc0e 	bl	8004e9c <HAL_RCC_GetPCLK2Freq>
 8005680:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005684:	e003      	b.n	800568e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005686:	f7ff fbf5 	bl	8004e74 <HAL_RCC_GetPCLK1Freq>
 800568a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800568e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005698:	f040 810c 	bne.w	80058b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800569c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056a0:	2200      	movs	r2, #0
 80056a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80056aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80056ae:	4622      	mov	r2, r4
 80056b0:	462b      	mov	r3, r5
 80056b2:	1891      	adds	r1, r2, r2
 80056b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80056b6:	415b      	adcs	r3, r3
 80056b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056be:	4621      	mov	r1, r4
 80056c0:	eb12 0801 	adds.w	r8, r2, r1
 80056c4:	4629      	mov	r1, r5
 80056c6:	eb43 0901 	adc.w	r9, r3, r1
 80056ca:	f04f 0200 	mov.w	r2, #0
 80056ce:	f04f 0300 	mov.w	r3, #0
 80056d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056de:	4690      	mov	r8, r2
 80056e0:	4699      	mov	r9, r3
 80056e2:	4623      	mov	r3, r4
 80056e4:	eb18 0303 	adds.w	r3, r8, r3
 80056e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056ec:	462b      	mov	r3, r5
 80056ee:	eb49 0303 	adc.w	r3, r9, r3
 80056f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005702:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005706:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800570a:	460b      	mov	r3, r1
 800570c:	18db      	adds	r3, r3, r3
 800570e:	653b      	str	r3, [r7, #80]	; 0x50
 8005710:	4613      	mov	r3, r2
 8005712:	eb42 0303 	adc.w	r3, r2, r3
 8005716:	657b      	str	r3, [r7, #84]	; 0x54
 8005718:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800571c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005720:	f7fb fa72 	bl	8000c08 <__aeabi_uldivmod>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4b61      	ldr	r3, [pc, #388]	; (80058b0 <UART_SetConfig+0x2d4>)
 800572a:	fba3 2302 	umull	r2, r3, r3, r2
 800572e:	095b      	lsrs	r3, r3, #5
 8005730:	011c      	lsls	r4, r3, #4
 8005732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005736:	2200      	movs	r2, #0
 8005738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800573c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005740:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005744:	4642      	mov	r2, r8
 8005746:	464b      	mov	r3, r9
 8005748:	1891      	adds	r1, r2, r2
 800574a:	64b9      	str	r1, [r7, #72]	; 0x48
 800574c:	415b      	adcs	r3, r3
 800574e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005750:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005754:	4641      	mov	r1, r8
 8005756:	eb12 0a01 	adds.w	sl, r2, r1
 800575a:	4649      	mov	r1, r9
 800575c:	eb43 0b01 	adc.w	fp, r3, r1
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800576c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005774:	4692      	mov	sl, r2
 8005776:	469b      	mov	fp, r3
 8005778:	4643      	mov	r3, r8
 800577a:	eb1a 0303 	adds.w	r3, sl, r3
 800577e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005782:	464b      	mov	r3, r9
 8005784:	eb4b 0303 	adc.w	r3, fp, r3
 8005788:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005798:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800579c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057a0:	460b      	mov	r3, r1
 80057a2:	18db      	adds	r3, r3, r3
 80057a4:	643b      	str	r3, [r7, #64]	; 0x40
 80057a6:	4613      	mov	r3, r2
 80057a8:	eb42 0303 	adc.w	r3, r2, r3
 80057ac:	647b      	str	r3, [r7, #68]	; 0x44
 80057ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80057b6:	f7fb fa27 	bl	8000c08 <__aeabi_uldivmod>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4611      	mov	r1, r2
 80057c0:	4b3b      	ldr	r3, [pc, #236]	; (80058b0 <UART_SetConfig+0x2d4>)
 80057c2:	fba3 2301 	umull	r2, r3, r3, r1
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	2264      	movs	r2, #100	; 0x64
 80057ca:	fb02 f303 	mul.w	r3, r2, r3
 80057ce:	1acb      	subs	r3, r1, r3
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057d6:	4b36      	ldr	r3, [pc, #216]	; (80058b0 <UART_SetConfig+0x2d4>)
 80057d8:	fba3 2302 	umull	r2, r3, r3, r2
 80057dc:	095b      	lsrs	r3, r3, #5
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057e4:	441c      	add	r4, r3
 80057e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057f8:	4642      	mov	r2, r8
 80057fa:	464b      	mov	r3, r9
 80057fc:	1891      	adds	r1, r2, r2
 80057fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005800:	415b      	adcs	r3, r3
 8005802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005804:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005808:	4641      	mov	r1, r8
 800580a:	1851      	adds	r1, r2, r1
 800580c:	6339      	str	r1, [r7, #48]	; 0x30
 800580e:	4649      	mov	r1, r9
 8005810:	414b      	adcs	r3, r1
 8005812:	637b      	str	r3, [r7, #52]	; 0x34
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005820:	4659      	mov	r1, fp
 8005822:	00cb      	lsls	r3, r1, #3
 8005824:	4651      	mov	r1, sl
 8005826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800582a:	4651      	mov	r1, sl
 800582c:	00ca      	lsls	r2, r1, #3
 800582e:	4610      	mov	r0, r2
 8005830:	4619      	mov	r1, r3
 8005832:	4603      	mov	r3, r0
 8005834:	4642      	mov	r2, r8
 8005836:	189b      	adds	r3, r3, r2
 8005838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800583c:	464b      	mov	r3, r9
 800583e:	460a      	mov	r2, r1
 8005840:	eb42 0303 	adc.w	r3, r2, r3
 8005844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005854:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005858:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800585c:	460b      	mov	r3, r1
 800585e:	18db      	adds	r3, r3, r3
 8005860:	62bb      	str	r3, [r7, #40]	; 0x28
 8005862:	4613      	mov	r3, r2
 8005864:	eb42 0303 	adc.w	r3, r2, r3
 8005868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800586a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800586e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005872:	f7fb f9c9 	bl	8000c08 <__aeabi_uldivmod>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4b0d      	ldr	r3, [pc, #52]	; (80058b0 <UART_SetConfig+0x2d4>)
 800587c:	fba3 1302 	umull	r1, r3, r3, r2
 8005880:	095b      	lsrs	r3, r3, #5
 8005882:	2164      	movs	r1, #100	; 0x64
 8005884:	fb01 f303 	mul.w	r3, r1, r3
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	3332      	adds	r3, #50	; 0x32
 800588e:	4a08      	ldr	r2, [pc, #32]	; (80058b0 <UART_SetConfig+0x2d4>)
 8005890:	fba2 2303 	umull	r2, r3, r2, r3
 8005894:	095b      	lsrs	r3, r3, #5
 8005896:	f003 0207 	and.w	r2, r3, #7
 800589a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4422      	add	r2, r4
 80058a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058a4:	e106      	b.n	8005ab4 <UART_SetConfig+0x4d8>
 80058a6:	bf00      	nop
 80058a8:	40011000 	.word	0x40011000
 80058ac:	40011400 	.word	0x40011400
 80058b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058c6:	4642      	mov	r2, r8
 80058c8:	464b      	mov	r3, r9
 80058ca:	1891      	adds	r1, r2, r2
 80058cc:	6239      	str	r1, [r7, #32]
 80058ce:	415b      	adcs	r3, r3
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24
 80058d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058d6:	4641      	mov	r1, r8
 80058d8:	1854      	adds	r4, r2, r1
 80058da:	4649      	mov	r1, r9
 80058dc:	eb43 0501 	adc.w	r5, r3, r1
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	f04f 0300 	mov.w	r3, #0
 80058e8:	00eb      	lsls	r3, r5, #3
 80058ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058ee:	00e2      	lsls	r2, r4, #3
 80058f0:	4614      	mov	r4, r2
 80058f2:	461d      	mov	r5, r3
 80058f4:	4643      	mov	r3, r8
 80058f6:	18e3      	adds	r3, r4, r3
 80058f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058fc:	464b      	mov	r3, r9
 80058fe:	eb45 0303 	adc.w	r3, r5, r3
 8005902:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005912:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	f04f 0300 	mov.w	r3, #0
 800591e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005922:	4629      	mov	r1, r5
 8005924:	008b      	lsls	r3, r1, #2
 8005926:	4621      	mov	r1, r4
 8005928:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800592c:	4621      	mov	r1, r4
 800592e:	008a      	lsls	r2, r1, #2
 8005930:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005934:	f7fb f968 	bl	8000c08 <__aeabi_uldivmod>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	4b60      	ldr	r3, [pc, #384]	; (8005ac0 <UART_SetConfig+0x4e4>)
 800593e:	fba3 2302 	umull	r2, r3, r3, r2
 8005942:	095b      	lsrs	r3, r3, #5
 8005944:	011c      	lsls	r4, r3, #4
 8005946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800594a:	2200      	movs	r2, #0
 800594c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005950:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005954:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005958:	4642      	mov	r2, r8
 800595a:	464b      	mov	r3, r9
 800595c:	1891      	adds	r1, r2, r2
 800595e:	61b9      	str	r1, [r7, #24]
 8005960:	415b      	adcs	r3, r3
 8005962:	61fb      	str	r3, [r7, #28]
 8005964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005968:	4641      	mov	r1, r8
 800596a:	1851      	adds	r1, r2, r1
 800596c:	6139      	str	r1, [r7, #16]
 800596e:	4649      	mov	r1, r9
 8005970:	414b      	adcs	r3, r1
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	f04f 0300 	mov.w	r3, #0
 800597c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005980:	4659      	mov	r1, fp
 8005982:	00cb      	lsls	r3, r1, #3
 8005984:	4651      	mov	r1, sl
 8005986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800598a:	4651      	mov	r1, sl
 800598c:	00ca      	lsls	r2, r1, #3
 800598e:	4610      	mov	r0, r2
 8005990:	4619      	mov	r1, r3
 8005992:	4603      	mov	r3, r0
 8005994:	4642      	mov	r2, r8
 8005996:	189b      	adds	r3, r3, r2
 8005998:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800599c:	464b      	mov	r3, r9
 800599e:	460a      	mov	r2, r1
 80059a0:	eb42 0303 	adc.w	r3, r2, r3
 80059a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80059b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059c0:	4649      	mov	r1, r9
 80059c2:	008b      	lsls	r3, r1, #2
 80059c4:	4641      	mov	r1, r8
 80059c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059ca:	4641      	mov	r1, r8
 80059cc:	008a      	lsls	r2, r1, #2
 80059ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059d2:	f7fb f919 	bl	8000c08 <__aeabi_uldivmod>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	4611      	mov	r1, r2
 80059dc:	4b38      	ldr	r3, [pc, #224]	; (8005ac0 <UART_SetConfig+0x4e4>)
 80059de:	fba3 2301 	umull	r2, r3, r3, r1
 80059e2:	095b      	lsrs	r3, r3, #5
 80059e4:	2264      	movs	r2, #100	; 0x64
 80059e6:	fb02 f303 	mul.w	r3, r2, r3
 80059ea:	1acb      	subs	r3, r1, r3
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	3332      	adds	r3, #50	; 0x32
 80059f0:	4a33      	ldr	r2, [pc, #204]	; (8005ac0 <UART_SetConfig+0x4e4>)
 80059f2:	fba2 2303 	umull	r2, r3, r2, r3
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059fc:	441c      	add	r4, r3
 80059fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a02:	2200      	movs	r2, #0
 8005a04:	673b      	str	r3, [r7, #112]	; 0x70
 8005a06:	677a      	str	r2, [r7, #116]	; 0x74
 8005a08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a0c:	4642      	mov	r2, r8
 8005a0e:	464b      	mov	r3, r9
 8005a10:	1891      	adds	r1, r2, r2
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	415b      	adcs	r3, r3
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a1c:	4641      	mov	r1, r8
 8005a1e:	1851      	adds	r1, r2, r1
 8005a20:	6039      	str	r1, [r7, #0]
 8005a22:	4649      	mov	r1, r9
 8005a24:	414b      	adcs	r3, r1
 8005a26:	607b      	str	r3, [r7, #4]
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	f04f 0300 	mov.w	r3, #0
 8005a30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a34:	4659      	mov	r1, fp
 8005a36:	00cb      	lsls	r3, r1, #3
 8005a38:	4651      	mov	r1, sl
 8005a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a3e:	4651      	mov	r1, sl
 8005a40:	00ca      	lsls	r2, r1, #3
 8005a42:	4610      	mov	r0, r2
 8005a44:	4619      	mov	r1, r3
 8005a46:	4603      	mov	r3, r0
 8005a48:	4642      	mov	r2, r8
 8005a4a:	189b      	adds	r3, r3, r2
 8005a4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a4e:	464b      	mov	r3, r9
 8005a50:	460a      	mov	r2, r1
 8005a52:	eb42 0303 	adc.w	r3, r2, r3
 8005a56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	663b      	str	r3, [r7, #96]	; 0x60
 8005a62:	667a      	str	r2, [r7, #100]	; 0x64
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a70:	4649      	mov	r1, r9
 8005a72:	008b      	lsls	r3, r1, #2
 8005a74:	4641      	mov	r1, r8
 8005a76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a7a:	4641      	mov	r1, r8
 8005a7c:	008a      	lsls	r2, r1, #2
 8005a7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a82:	f7fb f8c1 	bl	8000c08 <__aeabi_uldivmod>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4b0d      	ldr	r3, [pc, #52]	; (8005ac0 <UART_SetConfig+0x4e4>)
 8005a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a90:	095b      	lsrs	r3, r3, #5
 8005a92:	2164      	movs	r1, #100	; 0x64
 8005a94:	fb01 f303 	mul.w	r3, r1, r3
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	3332      	adds	r3, #50	; 0x32
 8005a9e:	4a08      	ldr	r2, [pc, #32]	; (8005ac0 <UART_SetConfig+0x4e4>)
 8005aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa4:	095b      	lsrs	r3, r3, #5
 8005aa6:	f003 020f 	and.w	r2, r3, #15
 8005aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4422      	add	r2, r4
 8005ab2:	609a      	str	r2, [r3, #8]
}
 8005ab4:	bf00      	nop
 8005ab6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005aba:	46bd      	mov	sp, r7
 8005abc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ac0:	51eb851f 	.word	0x51eb851f

08005ac4 <atoi>:
 8005ac4:	220a      	movs	r2, #10
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	f000 b93e 	b.w	8005d48 <strtol>

08005acc <malloc>:
 8005acc:	4b02      	ldr	r3, [pc, #8]	; (8005ad8 <malloc+0xc>)
 8005ace:	4601      	mov	r1, r0
 8005ad0:	6818      	ldr	r0, [r3, #0]
 8005ad2:	f000 b82b 	b.w	8005b2c <_malloc_r>
 8005ad6:	bf00      	nop
 8005ad8:	2000007c 	.word	0x2000007c

08005adc <free>:
 8005adc:	4b02      	ldr	r3, [pc, #8]	; (8005ae8 <free+0xc>)
 8005ade:	4601      	mov	r1, r0
 8005ae0:	6818      	ldr	r0, [r3, #0]
 8005ae2:	f000 bb4d 	b.w	8006180 <_free_r>
 8005ae6:	bf00      	nop
 8005ae8:	2000007c 	.word	0x2000007c

08005aec <sbrk_aligned>:
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	4e0e      	ldr	r6, [pc, #56]	; (8005b28 <sbrk_aligned+0x3c>)
 8005af0:	460c      	mov	r4, r1
 8005af2:	6831      	ldr	r1, [r6, #0]
 8005af4:	4605      	mov	r5, r0
 8005af6:	b911      	cbnz	r1, 8005afe <sbrk_aligned+0x12>
 8005af8:	f000 face 	bl	8006098 <_sbrk_r>
 8005afc:	6030      	str	r0, [r6, #0]
 8005afe:	4621      	mov	r1, r4
 8005b00:	4628      	mov	r0, r5
 8005b02:	f000 fac9 	bl	8006098 <_sbrk_r>
 8005b06:	1c43      	adds	r3, r0, #1
 8005b08:	d00a      	beq.n	8005b20 <sbrk_aligned+0x34>
 8005b0a:	1cc4      	adds	r4, r0, #3
 8005b0c:	f024 0403 	bic.w	r4, r4, #3
 8005b10:	42a0      	cmp	r0, r4
 8005b12:	d007      	beq.n	8005b24 <sbrk_aligned+0x38>
 8005b14:	1a21      	subs	r1, r4, r0
 8005b16:	4628      	mov	r0, r5
 8005b18:	f000 fabe 	bl	8006098 <_sbrk_r>
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	d101      	bne.n	8005b24 <sbrk_aligned+0x38>
 8005b20:	f04f 34ff 	mov.w	r4, #4294967295
 8005b24:	4620      	mov	r0, r4
 8005b26:	bd70      	pop	{r4, r5, r6, pc}
 8005b28:	20000234 	.word	0x20000234

08005b2c <_malloc_r>:
 8005b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b30:	1ccd      	adds	r5, r1, #3
 8005b32:	f025 0503 	bic.w	r5, r5, #3
 8005b36:	3508      	adds	r5, #8
 8005b38:	2d0c      	cmp	r5, #12
 8005b3a:	bf38      	it	cc
 8005b3c:	250c      	movcc	r5, #12
 8005b3e:	2d00      	cmp	r5, #0
 8005b40:	4607      	mov	r7, r0
 8005b42:	db01      	blt.n	8005b48 <_malloc_r+0x1c>
 8005b44:	42a9      	cmp	r1, r5
 8005b46:	d905      	bls.n	8005b54 <_malloc_r+0x28>
 8005b48:	230c      	movs	r3, #12
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	2600      	movs	r6, #0
 8005b4e:	4630      	mov	r0, r6
 8005b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c28 <_malloc_r+0xfc>
 8005b58:	f000 f868 	bl	8005c2c <__malloc_lock>
 8005b5c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b60:	461c      	mov	r4, r3
 8005b62:	bb5c      	cbnz	r4, 8005bbc <_malloc_r+0x90>
 8005b64:	4629      	mov	r1, r5
 8005b66:	4638      	mov	r0, r7
 8005b68:	f7ff ffc0 	bl	8005aec <sbrk_aligned>
 8005b6c:	1c43      	adds	r3, r0, #1
 8005b6e:	4604      	mov	r4, r0
 8005b70:	d155      	bne.n	8005c1e <_malloc_r+0xf2>
 8005b72:	f8d8 4000 	ldr.w	r4, [r8]
 8005b76:	4626      	mov	r6, r4
 8005b78:	2e00      	cmp	r6, #0
 8005b7a:	d145      	bne.n	8005c08 <_malloc_r+0xdc>
 8005b7c:	2c00      	cmp	r4, #0
 8005b7e:	d048      	beq.n	8005c12 <_malloc_r+0xe6>
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	4631      	mov	r1, r6
 8005b84:	4638      	mov	r0, r7
 8005b86:	eb04 0903 	add.w	r9, r4, r3
 8005b8a:	f000 fa85 	bl	8006098 <_sbrk_r>
 8005b8e:	4581      	cmp	r9, r0
 8005b90:	d13f      	bne.n	8005c12 <_malloc_r+0xe6>
 8005b92:	6821      	ldr	r1, [r4, #0]
 8005b94:	1a6d      	subs	r5, r5, r1
 8005b96:	4629      	mov	r1, r5
 8005b98:	4638      	mov	r0, r7
 8005b9a:	f7ff ffa7 	bl	8005aec <sbrk_aligned>
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	d037      	beq.n	8005c12 <_malloc_r+0xe6>
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	442b      	add	r3, r5
 8005ba6:	6023      	str	r3, [r4, #0]
 8005ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d038      	beq.n	8005c22 <_malloc_r+0xf6>
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	42a2      	cmp	r2, r4
 8005bb4:	d12b      	bne.n	8005c0e <_malloc_r+0xe2>
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	605a      	str	r2, [r3, #4]
 8005bba:	e00f      	b.n	8005bdc <_malloc_r+0xb0>
 8005bbc:	6822      	ldr	r2, [r4, #0]
 8005bbe:	1b52      	subs	r2, r2, r5
 8005bc0:	d41f      	bmi.n	8005c02 <_malloc_r+0xd6>
 8005bc2:	2a0b      	cmp	r2, #11
 8005bc4:	d917      	bls.n	8005bf6 <_malloc_r+0xca>
 8005bc6:	1961      	adds	r1, r4, r5
 8005bc8:	42a3      	cmp	r3, r4
 8005bca:	6025      	str	r5, [r4, #0]
 8005bcc:	bf18      	it	ne
 8005bce:	6059      	strne	r1, [r3, #4]
 8005bd0:	6863      	ldr	r3, [r4, #4]
 8005bd2:	bf08      	it	eq
 8005bd4:	f8c8 1000 	streq.w	r1, [r8]
 8005bd8:	5162      	str	r2, [r4, r5]
 8005bda:	604b      	str	r3, [r1, #4]
 8005bdc:	4638      	mov	r0, r7
 8005bde:	f104 060b 	add.w	r6, r4, #11
 8005be2:	f000 f829 	bl	8005c38 <__malloc_unlock>
 8005be6:	f026 0607 	bic.w	r6, r6, #7
 8005bea:	1d23      	adds	r3, r4, #4
 8005bec:	1af2      	subs	r2, r6, r3
 8005bee:	d0ae      	beq.n	8005b4e <_malloc_r+0x22>
 8005bf0:	1b9b      	subs	r3, r3, r6
 8005bf2:	50a3      	str	r3, [r4, r2]
 8005bf4:	e7ab      	b.n	8005b4e <_malloc_r+0x22>
 8005bf6:	42a3      	cmp	r3, r4
 8005bf8:	6862      	ldr	r2, [r4, #4]
 8005bfa:	d1dd      	bne.n	8005bb8 <_malloc_r+0x8c>
 8005bfc:	f8c8 2000 	str.w	r2, [r8]
 8005c00:	e7ec      	b.n	8005bdc <_malloc_r+0xb0>
 8005c02:	4623      	mov	r3, r4
 8005c04:	6864      	ldr	r4, [r4, #4]
 8005c06:	e7ac      	b.n	8005b62 <_malloc_r+0x36>
 8005c08:	4634      	mov	r4, r6
 8005c0a:	6876      	ldr	r6, [r6, #4]
 8005c0c:	e7b4      	b.n	8005b78 <_malloc_r+0x4c>
 8005c0e:	4613      	mov	r3, r2
 8005c10:	e7cc      	b.n	8005bac <_malloc_r+0x80>
 8005c12:	230c      	movs	r3, #12
 8005c14:	603b      	str	r3, [r7, #0]
 8005c16:	4638      	mov	r0, r7
 8005c18:	f000 f80e 	bl	8005c38 <__malloc_unlock>
 8005c1c:	e797      	b.n	8005b4e <_malloc_r+0x22>
 8005c1e:	6025      	str	r5, [r4, #0]
 8005c20:	e7dc      	b.n	8005bdc <_malloc_r+0xb0>
 8005c22:	605b      	str	r3, [r3, #4]
 8005c24:	deff      	udf	#255	; 0xff
 8005c26:	bf00      	nop
 8005c28:	20000230 	.word	0x20000230

08005c2c <__malloc_lock>:
 8005c2c:	4801      	ldr	r0, [pc, #4]	; (8005c34 <__malloc_lock+0x8>)
 8005c2e:	f000 ba7f 	b.w	8006130 <__retarget_lock_acquire_recursive>
 8005c32:	bf00      	nop
 8005c34:	20000378 	.word	0x20000378

08005c38 <__malloc_unlock>:
 8005c38:	4801      	ldr	r0, [pc, #4]	; (8005c40 <__malloc_unlock+0x8>)
 8005c3a:	f000 ba7a 	b.w	8006132 <__retarget_lock_release_recursive>
 8005c3e:	bf00      	nop
 8005c40:	20000378 	.word	0x20000378

08005c44 <_strtol_l.constprop.0>:
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c4a:	d001      	beq.n	8005c50 <_strtol_l.constprop.0+0xc>
 8005c4c:	2b24      	cmp	r3, #36	; 0x24
 8005c4e:	d906      	bls.n	8005c5e <_strtol_l.constprop.0+0x1a>
 8005c50:	f000 fa44 	bl	80060dc <__errno>
 8005c54:	2316      	movs	r3, #22
 8005c56:	6003      	str	r3, [r0, #0]
 8005c58:	2000      	movs	r0, #0
 8005c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005d44 <_strtol_l.constprop.0+0x100>
 8005c62:	460d      	mov	r5, r1
 8005c64:	462e      	mov	r6, r5
 8005c66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c6a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005c6e:	f017 0708 	ands.w	r7, r7, #8
 8005c72:	d1f7      	bne.n	8005c64 <_strtol_l.constprop.0+0x20>
 8005c74:	2c2d      	cmp	r4, #45	; 0x2d
 8005c76:	d132      	bne.n	8005cde <_strtol_l.constprop.0+0x9a>
 8005c78:	782c      	ldrb	r4, [r5, #0]
 8005c7a:	2701      	movs	r7, #1
 8005c7c:	1cb5      	adds	r5, r6, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d05b      	beq.n	8005d3a <_strtol_l.constprop.0+0xf6>
 8005c82:	2b10      	cmp	r3, #16
 8005c84:	d109      	bne.n	8005c9a <_strtol_l.constprop.0+0x56>
 8005c86:	2c30      	cmp	r4, #48	; 0x30
 8005c88:	d107      	bne.n	8005c9a <_strtol_l.constprop.0+0x56>
 8005c8a:	782c      	ldrb	r4, [r5, #0]
 8005c8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005c90:	2c58      	cmp	r4, #88	; 0x58
 8005c92:	d14d      	bne.n	8005d30 <_strtol_l.constprop.0+0xec>
 8005c94:	786c      	ldrb	r4, [r5, #1]
 8005c96:	2310      	movs	r3, #16
 8005c98:	3502      	adds	r5, #2
 8005c9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005c9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ca2:	f04f 0e00 	mov.w	lr, #0
 8005ca6:	fbb8 f9f3 	udiv	r9, r8, r3
 8005caa:	4676      	mov	r6, lr
 8005cac:	fb03 8a19 	mls	sl, r3, r9, r8
 8005cb0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005cb4:	f1bc 0f09 	cmp.w	ip, #9
 8005cb8:	d816      	bhi.n	8005ce8 <_strtol_l.constprop.0+0xa4>
 8005cba:	4664      	mov	r4, ip
 8005cbc:	42a3      	cmp	r3, r4
 8005cbe:	dd24      	ble.n	8005d0a <_strtol_l.constprop.0+0xc6>
 8005cc0:	f1be 3fff 	cmp.w	lr, #4294967295
 8005cc4:	d008      	beq.n	8005cd8 <_strtol_l.constprop.0+0x94>
 8005cc6:	45b1      	cmp	r9, r6
 8005cc8:	d31c      	bcc.n	8005d04 <_strtol_l.constprop.0+0xc0>
 8005cca:	d101      	bne.n	8005cd0 <_strtol_l.constprop.0+0x8c>
 8005ccc:	45a2      	cmp	sl, r4
 8005cce:	db19      	blt.n	8005d04 <_strtol_l.constprop.0+0xc0>
 8005cd0:	fb06 4603 	mla	r6, r6, r3, r4
 8005cd4:	f04f 0e01 	mov.w	lr, #1
 8005cd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cdc:	e7e8      	b.n	8005cb0 <_strtol_l.constprop.0+0x6c>
 8005cde:	2c2b      	cmp	r4, #43	; 0x2b
 8005ce0:	bf04      	itt	eq
 8005ce2:	782c      	ldrbeq	r4, [r5, #0]
 8005ce4:	1cb5      	addeq	r5, r6, #2
 8005ce6:	e7ca      	b.n	8005c7e <_strtol_l.constprop.0+0x3a>
 8005ce8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005cec:	f1bc 0f19 	cmp.w	ip, #25
 8005cf0:	d801      	bhi.n	8005cf6 <_strtol_l.constprop.0+0xb2>
 8005cf2:	3c37      	subs	r4, #55	; 0x37
 8005cf4:	e7e2      	b.n	8005cbc <_strtol_l.constprop.0+0x78>
 8005cf6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005cfa:	f1bc 0f19 	cmp.w	ip, #25
 8005cfe:	d804      	bhi.n	8005d0a <_strtol_l.constprop.0+0xc6>
 8005d00:	3c57      	subs	r4, #87	; 0x57
 8005d02:	e7db      	b.n	8005cbc <_strtol_l.constprop.0+0x78>
 8005d04:	f04f 3eff 	mov.w	lr, #4294967295
 8005d08:	e7e6      	b.n	8005cd8 <_strtol_l.constprop.0+0x94>
 8005d0a:	f1be 3fff 	cmp.w	lr, #4294967295
 8005d0e:	d105      	bne.n	8005d1c <_strtol_l.constprop.0+0xd8>
 8005d10:	2322      	movs	r3, #34	; 0x22
 8005d12:	6003      	str	r3, [r0, #0]
 8005d14:	4646      	mov	r6, r8
 8005d16:	b942      	cbnz	r2, 8005d2a <_strtol_l.constprop.0+0xe6>
 8005d18:	4630      	mov	r0, r6
 8005d1a:	e79e      	b.n	8005c5a <_strtol_l.constprop.0+0x16>
 8005d1c:	b107      	cbz	r7, 8005d20 <_strtol_l.constprop.0+0xdc>
 8005d1e:	4276      	negs	r6, r6
 8005d20:	2a00      	cmp	r2, #0
 8005d22:	d0f9      	beq.n	8005d18 <_strtol_l.constprop.0+0xd4>
 8005d24:	f1be 0f00 	cmp.w	lr, #0
 8005d28:	d000      	beq.n	8005d2c <_strtol_l.constprop.0+0xe8>
 8005d2a:	1e69      	subs	r1, r5, #1
 8005d2c:	6011      	str	r1, [r2, #0]
 8005d2e:	e7f3      	b.n	8005d18 <_strtol_l.constprop.0+0xd4>
 8005d30:	2430      	movs	r4, #48	; 0x30
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1b1      	bne.n	8005c9a <_strtol_l.constprop.0+0x56>
 8005d36:	2308      	movs	r3, #8
 8005d38:	e7af      	b.n	8005c9a <_strtol_l.constprop.0+0x56>
 8005d3a:	2c30      	cmp	r4, #48	; 0x30
 8005d3c:	d0a5      	beq.n	8005c8a <_strtol_l.constprop.0+0x46>
 8005d3e:	230a      	movs	r3, #10
 8005d40:	e7ab      	b.n	8005c9a <_strtol_l.constprop.0+0x56>
 8005d42:	bf00      	nop
 8005d44:	08007f95 	.word	0x08007f95

08005d48 <strtol>:
 8005d48:	4613      	mov	r3, r2
 8005d4a:	460a      	mov	r2, r1
 8005d4c:	4601      	mov	r1, r0
 8005d4e:	4802      	ldr	r0, [pc, #8]	; (8005d58 <strtol+0x10>)
 8005d50:	6800      	ldr	r0, [r0, #0]
 8005d52:	f7ff bf77 	b.w	8005c44 <_strtol_l.constprop.0>
 8005d56:	bf00      	nop
 8005d58:	2000007c 	.word	0x2000007c

08005d5c <std>:
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	b510      	push	{r4, lr}
 8005d60:	4604      	mov	r4, r0
 8005d62:	e9c0 3300 	strd	r3, r3, [r0]
 8005d66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d6a:	6083      	str	r3, [r0, #8]
 8005d6c:	8181      	strh	r1, [r0, #12]
 8005d6e:	6643      	str	r3, [r0, #100]	; 0x64
 8005d70:	81c2      	strh	r2, [r0, #14]
 8005d72:	6183      	str	r3, [r0, #24]
 8005d74:	4619      	mov	r1, r3
 8005d76:	2208      	movs	r2, #8
 8005d78:	305c      	adds	r0, #92	; 0x5c
 8005d7a:	f000 f8e2 	bl	8005f42 <memset>
 8005d7e:	4b05      	ldr	r3, [pc, #20]	; (8005d94 <std+0x38>)
 8005d80:	6263      	str	r3, [r4, #36]	; 0x24
 8005d82:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <std+0x3c>)
 8005d84:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d86:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <std+0x40>)
 8005d88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d8a:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <std+0x44>)
 8005d8c:	6224      	str	r4, [r4, #32]
 8005d8e:	6323      	str	r3, [r4, #48]	; 0x30
 8005d90:	bd10      	pop	{r4, pc}
 8005d92:	bf00      	nop
 8005d94:	08005ebd 	.word	0x08005ebd
 8005d98:	08005edf 	.word	0x08005edf
 8005d9c:	08005f17 	.word	0x08005f17
 8005da0:	08005f3b 	.word	0x08005f3b

08005da4 <stdio_exit_handler>:
 8005da4:	4a02      	ldr	r2, [pc, #8]	; (8005db0 <stdio_exit_handler+0xc>)
 8005da6:	4903      	ldr	r1, [pc, #12]	; (8005db4 <stdio_exit_handler+0x10>)
 8005da8:	4803      	ldr	r0, [pc, #12]	; (8005db8 <stdio_exit_handler+0x14>)
 8005daa:	f000 b869 	b.w	8005e80 <_fwalk_sglue>
 8005dae:	bf00      	nop
 8005db0:	20000024 	.word	0x20000024
 8005db4:	08006325 	.word	0x08006325
 8005db8:	20000030 	.word	0x20000030

08005dbc <cleanup_stdio>:
 8005dbc:	6841      	ldr	r1, [r0, #4]
 8005dbe:	4b0c      	ldr	r3, [pc, #48]	; (8005df0 <cleanup_stdio+0x34>)
 8005dc0:	4299      	cmp	r1, r3
 8005dc2:	b510      	push	{r4, lr}
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	d001      	beq.n	8005dcc <cleanup_stdio+0x10>
 8005dc8:	f000 faac 	bl	8006324 <_fflush_r>
 8005dcc:	68a1      	ldr	r1, [r4, #8]
 8005dce:	4b09      	ldr	r3, [pc, #36]	; (8005df4 <cleanup_stdio+0x38>)
 8005dd0:	4299      	cmp	r1, r3
 8005dd2:	d002      	beq.n	8005dda <cleanup_stdio+0x1e>
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	f000 faa5 	bl	8006324 <_fflush_r>
 8005dda:	68e1      	ldr	r1, [r4, #12]
 8005ddc:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <cleanup_stdio+0x3c>)
 8005dde:	4299      	cmp	r1, r3
 8005de0:	d004      	beq.n	8005dec <cleanup_stdio+0x30>
 8005de2:	4620      	mov	r0, r4
 8005de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005de8:	f000 ba9c 	b.w	8006324 <_fflush_r>
 8005dec:	bd10      	pop	{r4, pc}
 8005dee:	bf00      	nop
 8005df0:	20000238 	.word	0x20000238
 8005df4:	200002a0 	.word	0x200002a0
 8005df8:	20000308 	.word	0x20000308

08005dfc <global_stdio_init.part.0>:
 8005dfc:	b510      	push	{r4, lr}
 8005dfe:	4b0b      	ldr	r3, [pc, #44]	; (8005e2c <global_stdio_init.part.0+0x30>)
 8005e00:	4c0b      	ldr	r4, [pc, #44]	; (8005e30 <global_stdio_init.part.0+0x34>)
 8005e02:	4a0c      	ldr	r2, [pc, #48]	; (8005e34 <global_stdio_init.part.0+0x38>)
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	4620      	mov	r0, r4
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2104      	movs	r1, #4
 8005e0c:	f7ff ffa6 	bl	8005d5c <std>
 8005e10:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005e14:	2201      	movs	r2, #1
 8005e16:	2109      	movs	r1, #9
 8005e18:	f7ff ffa0 	bl	8005d5c <std>
 8005e1c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005e20:	2202      	movs	r2, #2
 8005e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e26:	2112      	movs	r1, #18
 8005e28:	f7ff bf98 	b.w	8005d5c <std>
 8005e2c:	20000370 	.word	0x20000370
 8005e30:	20000238 	.word	0x20000238
 8005e34:	08005da5 	.word	0x08005da5

08005e38 <__sfp_lock_acquire>:
 8005e38:	4801      	ldr	r0, [pc, #4]	; (8005e40 <__sfp_lock_acquire+0x8>)
 8005e3a:	f000 b979 	b.w	8006130 <__retarget_lock_acquire_recursive>
 8005e3e:	bf00      	nop
 8005e40:	20000379 	.word	0x20000379

08005e44 <__sfp_lock_release>:
 8005e44:	4801      	ldr	r0, [pc, #4]	; (8005e4c <__sfp_lock_release+0x8>)
 8005e46:	f000 b974 	b.w	8006132 <__retarget_lock_release_recursive>
 8005e4a:	bf00      	nop
 8005e4c:	20000379 	.word	0x20000379

08005e50 <__sinit>:
 8005e50:	b510      	push	{r4, lr}
 8005e52:	4604      	mov	r4, r0
 8005e54:	f7ff fff0 	bl	8005e38 <__sfp_lock_acquire>
 8005e58:	6a23      	ldr	r3, [r4, #32]
 8005e5a:	b11b      	cbz	r3, 8005e64 <__sinit+0x14>
 8005e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e60:	f7ff bff0 	b.w	8005e44 <__sfp_lock_release>
 8005e64:	4b04      	ldr	r3, [pc, #16]	; (8005e78 <__sinit+0x28>)
 8005e66:	6223      	str	r3, [r4, #32]
 8005e68:	4b04      	ldr	r3, [pc, #16]	; (8005e7c <__sinit+0x2c>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1f5      	bne.n	8005e5c <__sinit+0xc>
 8005e70:	f7ff ffc4 	bl	8005dfc <global_stdio_init.part.0>
 8005e74:	e7f2      	b.n	8005e5c <__sinit+0xc>
 8005e76:	bf00      	nop
 8005e78:	08005dbd 	.word	0x08005dbd
 8005e7c:	20000370 	.word	0x20000370

08005e80 <_fwalk_sglue>:
 8005e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e84:	4607      	mov	r7, r0
 8005e86:	4688      	mov	r8, r1
 8005e88:	4614      	mov	r4, r2
 8005e8a:	2600      	movs	r6, #0
 8005e8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e90:	f1b9 0901 	subs.w	r9, r9, #1
 8005e94:	d505      	bpl.n	8005ea2 <_fwalk_sglue+0x22>
 8005e96:	6824      	ldr	r4, [r4, #0]
 8005e98:	2c00      	cmp	r4, #0
 8005e9a:	d1f7      	bne.n	8005e8c <_fwalk_sglue+0xc>
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ea2:	89ab      	ldrh	r3, [r5, #12]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d907      	bls.n	8005eb8 <_fwalk_sglue+0x38>
 8005ea8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005eac:	3301      	adds	r3, #1
 8005eae:	d003      	beq.n	8005eb8 <_fwalk_sglue+0x38>
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	4638      	mov	r0, r7
 8005eb4:	47c0      	blx	r8
 8005eb6:	4306      	orrs	r6, r0
 8005eb8:	3568      	adds	r5, #104	; 0x68
 8005eba:	e7e9      	b.n	8005e90 <_fwalk_sglue+0x10>

08005ebc <__sread>:
 8005ebc:	b510      	push	{r4, lr}
 8005ebe:	460c      	mov	r4, r1
 8005ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ec4:	f000 f8d6 	bl	8006074 <_read_r>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	bfab      	itete	ge
 8005ecc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ece:	89a3      	ldrhlt	r3, [r4, #12]
 8005ed0:	181b      	addge	r3, r3, r0
 8005ed2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ed6:	bfac      	ite	ge
 8005ed8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005eda:	81a3      	strhlt	r3, [r4, #12]
 8005edc:	bd10      	pop	{r4, pc}

08005ede <__swrite>:
 8005ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee2:	461f      	mov	r7, r3
 8005ee4:	898b      	ldrh	r3, [r1, #12]
 8005ee6:	05db      	lsls	r3, r3, #23
 8005ee8:	4605      	mov	r5, r0
 8005eea:	460c      	mov	r4, r1
 8005eec:	4616      	mov	r6, r2
 8005eee:	d505      	bpl.n	8005efc <__swrite+0x1e>
 8005ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f000 f8aa 	bl	8006050 <_lseek_r>
 8005efc:	89a3      	ldrh	r3, [r4, #12]
 8005efe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f06:	81a3      	strh	r3, [r4, #12]
 8005f08:	4632      	mov	r2, r6
 8005f0a:	463b      	mov	r3, r7
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f12:	f000 b8d1 	b.w	80060b8 <_write_r>

08005f16 <__sseek>:
 8005f16:	b510      	push	{r4, lr}
 8005f18:	460c      	mov	r4, r1
 8005f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f1e:	f000 f897 	bl	8006050 <_lseek_r>
 8005f22:	1c43      	adds	r3, r0, #1
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	bf15      	itete	ne
 8005f28:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f32:	81a3      	strheq	r3, [r4, #12]
 8005f34:	bf18      	it	ne
 8005f36:	81a3      	strhne	r3, [r4, #12]
 8005f38:	bd10      	pop	{r4, pc}

08005f3a <__sclose>:
 8005f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f3e:	f000 b877 	b.w	8006030 <_close_r>

08005f42 <memset>:
 8005f42:	4402      	add	r2, r0
 8005f44:	4603      	mov	r3, r0
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d100      	bne.n	8005f4c <memset+0xa>
 8005f4a:	4770      	bx	lr
 8005f4c:	f803 1b01 	strb.w	r1, [r3], #1
 8005f50:	e7f9      	b.n	8005f46 <memset+0x4>

08005f52 <strncmp>:
 8005f52:	b510      	push	{r4, lr}
 8005f54:	b16a      	cbz	r2, 8005f72 <strncmp+0x20>
 8005f56:	3901      	subs	r1, #1
 8005f58:	1884      	adds	r4, r0, r2
 8005f5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f5e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d103      	bne.n	8005f6e <strncmp+0x1c>
 8005f66:	42a0      	cmp	r0, r4
 8005f68:	d001      	beq.n	8005f6e <strncmp+0x1c>
 8005f6a:	2a00      	cmp	r2, #0
 8005f6c:	d1f5      	bne.n	8005f5a <strncmp+0x8>
 8005f6e:	1ad0      	subs	r0, r2, r3
 8005f70:	bd10      	pop	{r4, pc}
 8005f72:	4610      	mov	r0, r2
 8005f74:	e7fc      	b.n	8005f70 <strncmp+0x1e>
	...

08005f78 <strtok>:
 8005f78:	4b16      	ldr	r3, [pc, #88]	; (8005fd4 <strtok+0x5c>)
 8005f7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f7c:	681e      	ldr	r6, [r3, #0]
 8005f7e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8005f80:	4605      	mov	r5, r0
 8005f82:	b9fc      	cbnz	r4, 8005fc4 <strtok+0x4c>
 8005f84:	2050      	movs	r0, #80	; 0x50
 8005f86:	9101      	str	r1, [sp, #4]
 8005f88:	f7ff fda0 	bl	8005acc <malloc>
 8005f8c:	9901      	ldr	r1, [sp, #4]
 8005f8e:	6470      	str	r0, [r6, #68]	; 0x44
 8005f90:	4602      	mov	r2, r0
 8005f92:	b920      	cbnz	r0, 8005f9e <strtok+0x26>
 8005f94:	4b10      	ldr	r3, [pc, #64]	; (8005fd8 <strtok+0x60>)
 8005f96:	4811      	ldr	r0, [pc, #68]	; (8005fdc <strtok+0x64>)
 8005f98:	215b      	movs	r1, #91	; 0x5b
 8005f9a:	f000 f8d3 	bl	8006144 <__assert_func>
 8005f9e:	e9c0 4400 	strd	r4, r4, [r0]
 8005fa2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005fa6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005faa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005fae:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005fb2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005fb6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005fba:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005fbe:	6184      	str	r4, [r0, #24]
 8005fc0:	7704      	strb	r4, [r0, #28]
 8005fc2:	6244      	str	r4, [r0, #36]	; 0x24
 8005fc4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	4628      	mov	r0, r5
 8005fca:	b002      	add	sp, #8
 8005fcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005fd0:	f000 b806 	b.w	8005fe0 <__strtok_r>
 8005fd4:	2000007c 	.word	0x2000007c
 8005fd8:	08008095 	.word	0x08008095
 8005fdc:	080080ac 	.word	0x080080ac

08005fe0 <__strtok_r>:
 8005fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fe2:	b908      	cbnz	r0, 8005fe8 <__strtok_r+0x8>
 8005fe4:	6810      	ldr	r0, [r2, #0]
 8005fe6:	b188      	cbz	r0, 800600c <__strtok_r+0x2c>
 8005fe8:	4604      	mov	r4, r0
 8005fea:	4620      	mov	r0, r4
 8005fec:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005ff0:	460f      	mov	r7, r1
 8005ff2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005ff6:	b91e      	cbnz	r6, 8006000 <__strtok_r+0x20>
 8005ff8:	b965      	cbnz	r5, 8006014 <__strtok_r+0x34>
 8005ffa:	6015      	str	r5, [r2, #0]
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	e005      	b.n	800600c <__strtok_r+0x2c>
 8006000:	42b5      	cmp	r5, r6
 8006002:	d1f6      	bne.n	8005ff2 <__strtok_r+0x12>
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1f0      	bne.n	8005fea <__strtok_r+0xa>
 8006008:	6014      	str	r4, [r2, #0]
 800600a:	7003      	strb	r3, [r0, #0]
 800600c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800600e:	461c      	mov	r4, r3
 8006010:	e00c      	b.n	800602c <__strtok_r+0x4c>
 8006012:	b915      	cbnz	r5, 800601a <__strtok_r+0x3a>
 8006014:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006018:	460e      	mov	r6, r1
 800601a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800601e:	42ab      	cmp	r3, r5
 8006020:	d1f7      	bne.n	8006012 <__strtok_r+0x32>
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0f3      	beq.n	800600e <__strtok_r+0x2e>
 8006026:	2300      	movs	r3, #0
 8006028:	f804 3c01 	strb.w	r3, [r4, #-1]
 800602c:	6014      	str	r4, [r2, #0]
 800602e:	e7ed      	b.n	800600c <__strtok_r+0x2c>

08006030 <_close_r>:
 8006030:	b538      	push	{r3, r4, r5, lr}
 8006032:	4d06      	ldr	r5, [pc, #24]	; (800604c <_close_r+0x1c>)
 8006034:	2300      	movs	r3, #0
 8006036:	4604      	mov	r4, r0
 8006038:	4608      	mov	r0, r1
 800603a:	602b      	str	r3, [r5, #0]
 800603c:	f7fc fbb7 	bl	80027ae <_close>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d102      	bne.n	800604a <_close_r+0x1a>
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	b103      	cbz	r3, 800604a <_close_r+0x1a>
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	bd38      	pop	{r3, r4, r5, pc}
 800604c:	20000374 	.word	0x20000374

08006050 <_lseek_r>:
 8006050:	b538      	push	{r3, r4, r5, lr}
 8006052:	4d07      	ldr	r5, [pc, #28]	; (8006070 <_lseek_r+0x20>)
 8006054:	4604      	mov	r4, r0
 8006056:	4608      	mov	r0, r1
 8006058:	4611      	mov	r1, r2
 800605a:	2200      	movs	r2, #0
 800605c:	602a      	str	r2, [r5, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	f7fc fbcc 	bl	80027fc <_lseek>
 8006064:	1c43      	adds	r3, r0, #1
 8006066:	d102      	bne.n	800606e <_lseek_r+0x1e>
 8006068:	682b      	ldr	r3, [r5, #0]
 800606a:	b103      	cbz	r3, 800606e <_lseek_r+0x1e>
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	bd38      	pop	{r3, r4, r5, pc}
 8006070:	20000374 	.word	0x20000374

08006074 <_read_r>:
 8006074:	b538      	push	{r3, r4, r5, lr}
 8006076:	4d07      	ldr	r5, [pc, #28]	; (8006094 <_read_r+0x20>)
 8006078:	4604      	mov	r4, r0
 800607a:	4608      	mov	r0, r1
 800607c:	4611      	mov	r1, r2
 800607e:	2200      	movs	r2, #0
 8006080:	602a      	str	r2, [r5, #0]
 8006082:	461a      	mov	r2, r3
 8006084:	f7fc fb5a 	bl	800273c <_read>
 8006088:	1c43      	adds	r3, r0, #1
 800608a:	d102      	bne.n	8006092 <_read_r+0x1e>
 800608c:	682b      	ldr	r3, [r5, #0]
 800608e:	b103      	cbz	r3, 8006092 <_read_r+0x1e>
 8006090:	6023      	str	r3, [r4, #0]
 8006092:	bd38      	pop	{r3, r4, r5, pc}
 8006094:	20000374 	.word	0x20000374

08006098 <_sbrk_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	4d06      	ldr	r5, [pc, #24]	; (80060b4 <_sbrk_r+0x1c>)
 800609c:	2300      	movs	r3, #0
 800609e:	4604      	mov	r4, r0
 80060a0:	4608      	mov	r0, r1
 80060a2:	602b      	str	r3, [r5, #0]
 80060a4:	f7fc fbb8 	bl	8002818 <_sbrk>
 80060a8:	1c43      	adds	r3, r0, #1
 80060aa:	d102      	bne.n	80060b2 <_sbrk_r+0x1a>
 80060ac:	682b      	ldr	r3, [r5, #0]
 80060ae:	b103      	cbz	r3, 80060b2 <_sbrk_r+0x1a>
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	bd38      	pop	{r3, r4, r5, pc}
 80060b4:	20000374 	.word	0x20000374

080060b8 <_write_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	4d07      	ldr	r5, [pc, #28]	; (80060d8 <_write_r+0x20>)
 80060bc:	4604      	mov	r4, r0
 80060be:	4608      	mov	r0, r1
 80060c0:	4611      	mov	r1, r2
 80060c2:	2200      	movs	r2, #0
 80060c4:	602a      	str	r2, [r5, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	f7fc fb55 	bl	8002776 <_write>
 80060cc:	1c43      	adds	r3, r0, #1
 80060ce:	d102      	bne.n	80060d6 <_write_r+0x1e>
 80060d0:	682b      	ldr	r3, [r5, #0]
 80060d2:	b103      	cbz	r3, 80060d6 <_write_r+0x1e>
 80060d4:	6023      	str	r3, [r4, #0]
 80060d6:	bd38      	pop	{r3, r4, r5, pc}
 80060d8:	20000374 	.word	0x20000374

080060dc <__errno>:
 80060dc:	4b01      	ldr	r3, [pc, #4]	; (80060e4 <__errno+0x8>)
 80060de:	6818      	ldr	r0, [r3, #0]
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	2000007c 	.word	0x2000007c

080060e8 <__libc_init_array>:
 80060e8:	b570      	push	{r4, r5, r6, lr}
 80060ea:	4d0d      	ldr	r5, [pc, #52]	; (8006120 <__libc_init_array+0x38>)
 80060ec:	4c0d      	ldr	r4, [pc, #52]	; (8006124 <__libc_init_array+0x3c>)
 80060ee:	1b64      	subs	r4, r4, r5
 80060f0:	10a4      	asrs	r4, r4, #2
 80060f2:	2600      	movs	r6, #0
 80060f4:	42a6      	cmp	r6, r4
 80060f6:	d109      	bne.n	800610c <__libc_init_array+0x24>
 80060f8:	4d0b      	ldr	r5, [pc, #44]	; (8006128 <__libc_init_array+0x40>)
 80060fa:	4c0c      	ldr	r4, [pc, #48]	; (800612c <__libc_init_array+0x44>)
 80060fc:	f001 ff28 	bl	8007f50 <_init>
 8006100:	1b64      	subs	r4, r4, r5
 8006102:	10a4      	asrs	r4, r4, #2
 8006104:	2600      	movs	r6, #0
 8006106:	42a6      	cmp	r6, r4
 8006108:	d105      	bne.n	8006116 <__libc_init_array+0x2e>
 800610a:	bd70      	pop	{r4, r5, r6, pc}
 800610c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006110:	4798      	blx	r3
 8006112:	3601      	adds	r6, #1
 8006114:	e7ee      	b.n	80060f4 <__libc_init_array+0xc>
 8006116:	f855 3b04 	ldr.w	r3, [r5], #4
 800611a:	4798      	blx	r3
 800611c:	3601      	adds	r6, #1
 800611e:	e7f2      	b.n	8006106 <__libc_init_array+0x1e>
 8006120:	08008220 	.word	0x08008220
 8006124:	08008220 	.word	0x08008220
 8006128:	08008220 	.word	0x08008220
 800612c:	08008224 	.word	0x08008224

08006130 <__retarget_lock_acquire_recursive>:
 8006130:	4770      	bx	lr

08006132 <__retarget_lock_release_recursive>:
 8006132:	4770      	bx	lr

08006134 <strcpy>:
 8006134:	4603      	mov	r3, r0
 8006136:	f811 2b01 	ldrb.w	r2, [r1], #1
 800613a:	f803 2b01 	strb.w	r2, [r3], #1
 800613e:	2a00      	cmp	r2, #0
 8006140:	d1f9      	bne.n	8006136 <strcpy+0x2>
 8006142:	4770      	bx	lr

08006144 <__assert_func>:
 8006144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006146:	4614      	mov	r4, r2
 8006148:	461a      	mov	r2, r3
 800614a:	4b09      	ldr	r3, [pc, #36]	; (8006170 <__assert_func+0x2c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4605      	mov	r5, r0
 8006150:	68d8      	ldr	r0, [r3, #12]
 8006152:	b14c      	cbz	r4, 8006168 <__assert_func+0x24>
 8006154:	4b07      	ldr	r3, [pc, #28]	; (8006174 <__assert_func+0x30>)
 8006156:	9100      	str	r1, [sp, #0]
 8006158:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800615c:	4906      	ldr	r1, [pc, #24]	; (8006178 <__assert_func+0x34>)
 800615e:	462b      	mov	r3, r5
 8006160:	f000 f908 	bl	8006374 <fiprintf>
 8006164:	f000 f918 	bl	8006398 <abort>
 8006168:	4b04      	ldr	r3, [pc, #16]	; (800617c <__assert_func+0x38>)
 800616a:	461c      	mov	r4, r3
 800616c:	e7f3      	b.n	8006156 <__assert_func+0x12>
 800616e:	bf00      	nop
 8006170:	2000007c 	.word	0x2000007c
 8006174:	08008106 	.word	0x08008106
 8006178:	08008113 	.word	0x08008113
 800617c:	08008141 	.word	0x08008141

08006180 <_free_r>:
 8006180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006182:	2900      	cmp	r1, #0
 8006184:	d044      	beq.n	8006210 <_free_r+0x90>
 8006186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800618a:	9001      	str	r0, [sp, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	f1a1 0404 	sub.w	r4, r1, #4
 8006192:	bfb8      	it	lt
 8006194:	18e4      	addlt	r4, r4, r3
 8006196:	f7ff fd49 	bl	8005c2c <__malloc_lock>
 800619a:	4a1e      	ldr	r2, [pc, #120]	; (8006214 <_free_r+0x94>)
 800619c:	9801      	ldr	r0, [sp, #4]
 800619e:	6813      	ldr	r3, [r2, #0]
 80061a0:	b933      	cbnz	r3, 80061b0 <_free_r+0x30>
 80061a2:	6063      	str	r3, [r4, #4]
 80061a4:	6014      	str	r4, [r2, #0]
 80061a6:	b003      	add	sp, #12
 80061a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061ac:	f7ff bd44 	b.w	8005c38 <__malloc_unlock>
 80061b0:	42a3      	cmp	r3, r4
 80061b2:	d908      	bls.n	80061c6 <_free_r+0x46>
 80061b4:	6825      	ldr	r5, [r4, #0]
 80061b6:	1961      	adds	r1, r4, r5
 80061b8:	428b      	cmp	r3, r1
 80061ba:	bf01      	itttt	eq
 80061bc:	6819      	ldreq	r1, [r3, #0]
 80061be:	685b      	ldreq	r3, [r3, #4]
 80061c0:	1949      	addeq	r1, r1, r5
 80061c2:	6021      	streq	r1, [r4, #0]
 80061c4:	e7ed      	b.n	80061a2 <_free_r+0x22>
 80061c6:	461a      	mov	r2, r3
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	b10b      	cbz	r3, 80061d0 <_free_r+0x50>
 80061cc:	42a3      	cmp	r3, r4
 80061ce:	d9fa      	bls.n	80061c6 <_free_r+0x46>
 80061d0:	6811      	ldr	r1, [r2, #0]
 80061d2:	1855      	adds	r5, r2, r1
 80061d4:	42a5      	cmp	r5, r4
 80061d6:	d10b      	bne.n	80061f0 <_free_r+0x70>
 80061d8:	6824      	ldr	r4, [r4, #0]
 80061da:	4421      	add	r1, r4
 80061dc:	1854      	adds	r4, r2, r1
 80061de:	42a3      	cmp	r3, r4
 80061e0:	6011      	str	r1, [r2, #0]
 80061e2:	d1e0      	bne.n	80061a6 <_free_r+0x26>
 80061e4:	681c      	ldr	r4, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	6053      	str	r3, [r2, #4]
 80061ea:	440c      	add	r4, r1
 80061ec:	6014      	str	r4, [r2, #0]
 80061ee:	e7da      	b.n	80061a6 <_free_r+0x26>
 80061f0:	d902      	bls.n	80061f8 <_free_r+0x78>
 80061f2:	230c      	movs	r3, #12
 80061f4:	6003      	str	r3, [r0, #0]
 80061f6:	e7d6      	b.n	80061a6 <_free_r+0x26>
 80061f8:	6825      	ldr	r5, [r4, #0]
 80061fa:	1961      	adds	r1, r4, r5
 80061fc:	428b      	cmp	r3, r1
 80061fe:	bf04      	itt	eq
 8006200:	6819      	ldreq	r1, [r3, #0]
 8006202:	685b      	ldreq	r3, [r3, #4]
 8006204:	6063      	str	r3, [r4, #4]
 8006206:	bf04      	itt	eq
 8006208:	1949      	addeq	r1, r1, r5
 800620a:	6021      	streq	r1, [r4, #0]
 800620c:	6054      	str	r4, [r2, #4]
 800620e:	e7ca      	b.n	80061a6 <_free_r+0x26>
 8006210:	b003      	add	sp, #12
 8006212:	bd30      	pop	{r4, r5, pc}
 8006214:	20000230 	.word	0x20000230

08006218 <__sflush_r>:
 8006218:	898a      	ldrh	r2, [r1, #12]
 800621a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800621e:	4605      	mov	r5, r0
 8006220:	0710      	lsls	r0, r2, #28
 8006222:	460c      	mov	r4, r1
 8006224:	d458      	bmi.n	80062d8 <__sflush_r+0xc0>
 8006226:	684b      	ldr	r3, [r1, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	dc05      	bgt.n	8006238 <__sflush_r+0x20>
 800622c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800622e:	2b00      	cmp	r3, #0
 8006230:	dc02      	bgt.n	8006238 <__sflush_r+0x20>
 8006232:	2000      	movs	r0, #0
 8006234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006238:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800623a:	2e00      	cmp	r6, #0
 800623c:	d0f9      	beq.n	8006232 <__sflush_r+0x1a>
 800623e:	2300      	movs	r3, #0
 8006240:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006244:	682f      	ldr	r7, [r5, #0]
 8006246:	6a21      	ldr	r1, [r4, #32]
 8006248:	602b      	str	r3, [r5, #0]
 800624a:	d032      	beq.n	80062b2 <__sflush_r+0x9a>
 800624c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800624e:	89a3      	ldrh	r3, [r4, #12]
 8006250:	075a      	lsls	r2, r3, #29
 8006252:	d505      	bpl.n	8006260 <__sflush_r+0x48>
 8006254:	6863      	ldr	r3, [r4, #4]
 8006256:	1ac0      	subs	r0, r0, r3
 8006258:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800625a:	b10b      	cbz	r3, 8006260 <__sflush_r+0x48>
 800625c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800625e:	1ac0      	subs	r0, r0, r3
 8006260:	2300      	movs	r3, #0
 8006262:	4602      	mov	r2, r0
 8006264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006266:	6a21      	ldr	r1, [r4, #32]
 8006268:	4628      	mov	r0, r5
 800626a:	47b0      	blx	r6
 800626c:	1c43      	adds	r3, r0, #1
 800626e:	89a3      	ldrh	r3, [r4, #12]
 8006270:	d106      	bne.n	8006280 <__sflush_r+0x68>
 8006272:	6829      	ldr	r1, [r5, #0]
 8006274:	291d      	cmp	r1, #29
 8006276:	d82b      	bhi.n	80062d0 <__sflush_r+0xb8>
 8006278:	4a29      	ldr	r2, [pc, #164]	; (8006320 <__sflush_r+0x108>)
 800627a:	410a      	asrs	r2, r1
 800627c:	07d6      	lsls	r6, r2, #31
 800627e:	d427      	bmi.n	80062d0 <__sflush_r+0xb8>
 8006280:	2200      	movs	r2, #0
 8006282:	6062      	str	r2, [r4, #4]
 8006284:	04d9      	lsls	r1, r3, #19
 8006286:	6922      	ldr	r2, [r4, #16]
 8006288:	6022      	str	r2, [r4, #0]
 800628a:	d504      	bpl.n	8006296 <__sflush_r+0x7e>
 800628c:	1c42      	adds	r2, r0, #1
 800628e:	d101      	bne.n	8006294 <__sflush_r+0x7c>
 8006290:	682b      	ldr	r3, [r5, #0]
 8006292:	b903      	cbnz	r3, 8006296 <__sflush_r+0x7e>
 8006294:	6560      	str	r0, [r4, #84]	; 0x54
 8006296:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006298:	602f      	str	r7, [r5, #0]
 800629a:	2900      	cmp	r1, #0
 800629c:	d0c9      	beq.n	8006232 <__sflush_r+0x1a>
 800629e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062a2:	4299      	cmp	r1, r3
 80062a4:	d002      	beq.n	80062ac <__sflush_r+0x94>
 80062a6:	4628      	mov	r0, r5
 80062a8:	f7ff ff6a 	bl	8006180 <_free_r>
 80062ac:	2000      	movs	r0, #0
 80062ae:	6360      	str	r0, [r4, #52]	; 0x34
 80062b0:	e7c0      	b.n	8006234 <__sflush_r+0x1c>
 80062b2:	2301      	movs	r3, #1
 80062b4:	4628      	mov	r0, r5
 80062b6:	47b0      	blx	r6
 80062b8:	1c41      	adds	r1, r0, #1
 80062ba:	d1c8      	bne.n	800624e <__sflush_r+0x36>
 80062bc:	682b      	ldr	r3, [r5, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d0c5      	beq.n	800624e <__sflush_r+0x36>
 80062c2:	2b1d      	cmp	r3, #29
 80062c4:	d001      	beq.n	80062ca <__sflush_r+0xb2>
 80062c6:	2b16      	cmp	r3, #22
 80062c8:	d101      	bne.n	80062ce <__sflush_r+0xb6>
 80062ca:	602f      	str	r7, [r5, #0]
 80062cc:	e7b1      	b.n	8006232 <__sflush_r+0x1a>
 80062ce:	89a3      	ldrh	r3, [r4, #12]
 80062d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062d4:	81a3      	strh	r3, [r4, #12]
 80062d6:	e7ad      	b.n	8006234 <__sflush_r+0x1c>
 80062d8:	690f      	ldr	r7, [r1, #16]
 80062da:	2f00      	cmp	r7, #0
 80062dc:	d0a9      	beq.n	8006232 <__sflush_r+0x1a>
 80062de:	0793      	lsls	r3, r2, #30
 80062e0:	680e      	ldr	r6, [r1, #0]
 80062e2:	bf08      	it	eq
 80062e4:	694b      	ldreq	r3, [r1, #20]
 80062e6:	600f      	str	r7, [r1, #0]
 80062e8:	bf18      	it	ne
 80062ea:	2300      	movne	r3, #0
 80062ec:	eba6 0807 	sub.w	r8, r6, r7
 80062f0:	608b      	str	r3, [r1, #8]
 80062f2:	f1b8 0f00 	cmp.w	r8, #0
 80062f6:	dd9c      	ble.n	8006232 <__sflush_r+0x1a>
 80062f8:	6a21      	ldr	r1, [r4, #32]
 80062fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062fc:	4643      	mov	r3, r8
 80062fe:	463a      	mov	r2, r7
 8006300:	4628      	mov	r0, r5
 8006302:	47b0      	blx	r6
 8006304:	2800      	cmp	r0, #0
 8006306:	dc06      	bgt.n	8006316 <__sflush_r+0xfe>
 8006308:	89a3      	ldrh	r3, [r4, #12]
 800630a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800630e:	81a3      	strh	r3, [r4, #12]
 8006310:	f04f 30ff 	mov.w	r0, #4294967295
 8006314:	e78e      	b.n	8006234 <__sflush_r+0x1c>
 8006316:	4407      	add	r7, r0
 8006318:	eba8 0800 	sub.w	r8, r8, r0
 800631c:	e7e9      	b.n	80062f2 <__sflush_r+0xda>
 800631e:	bf00      	nop
 8006320:	dfbffffe 	.word	0xdfbffffe

08006324 <_fflush_r>:
 8006324:	b538      	push	{r3, r4, r5, lr}
 8006326:	690b      	ldr	r3, [r1, #16]
 8006328:	4605      	mov	r5, r0
 800632a:	460c      	mov	r4, r1
 800632c:	b913      	cbnz	r3, 8006334 <_fflush_r+0x10>
 800632e:	2500      	movs	r5, #0
 8006330:	4628      	mov	r0, r5
 8006332:	bd38      	pop	{r3, r4, r5, pc}
 8006334:	b118      	cbz	r0, 800633e <_fflush_r+0x1a>
 8006336:	6a03      	ldr	r3, [r0, #32]
 8006338:	b90b      	cbnz	r3, 800633e <_fflush_r+0x1a>
 800633a:	f7ff fd89 	bl	8005e50 <__sinit>
 800633e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0f3      	beq.n	800632e <_fflush_r+0xa>
 8006346:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006348:	07d0      	lsls	r0, r2, #31
 800634a:	d404      	bmi.n	8006356 <_fflush_r+0x32>
 800634c:	0599      	lsls	r1, r3, #22
 800634e:	d402      	bmi.n	8006356 <_fflush_r+0x32>
 8006350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006352:	f7ff feed 	bl	8006130 <__retarget_lock_acquire_recursive>
 8006356:	4628      	mov	r0, r5
 8006358:	4621      	mov	r1, r4
 800635a:	f7ff ff5d 	bl	8006218 <__sflush_r>
 800635e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006360:	07da      	lsls	r2, r3, #31
 8006362:	4605      	mov	r5, r0
 8006364:	d4e4      	bmi.n	8006330 <_fflush_r+0xc>
 8006366:	89a3      	ldrh	r3, [r4, #12]
 8006368:	059b      	lsls	r3, r3, #22
 800636a:	d4e1      	bmi.n	8006330 <_fflush_r+0xc>
 800636c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800636e:	f7ff fee0 	bl	8006132 <__retarget_lock_release_recursive>
 8006372:	e7dd      	b.n	8006330 <_fflush_r+0xc>

08006374 <fiprintf>:
 8006374:	b40e      	push	{r1, r2, r3}
 8006376:	b503      	push	{r0, r1, lr}
 8006378:	4601      	mov	r1, r0
 800637a:	ab03      	add	r3, sp, #12
 800637c:	4805      	ldr	r0, [pc, #20]	; (8006394 <fiprintf+0x20>)
 800637e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006382:	6800      	ldr	r0, [r0, #0]
 8006384:	9301      	str	r3, [sp, #4]
 8006386:	f000 f837 	bl	80063f8 <_vfiprintf_r>
 800638a:	b002      	add	sp, #8
 800638c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006390:	b003      	add	sp, #12
 8006392:	4770      	bx	lr
 8006394:	2000007c 	.word	0x2000007c

08006398 <abort>:
 8006398:	b508      	push	{r3, lr}
 800639a:	2006      	movs	r0, #6
 800639c:	f000 fb94 	bl	8006ac8 <raise>
 80063a0:	2001      	movs	r0, #1
 80063a2:	f7fc f9c1 	bl	8002728 <_exit>

080063a6 <__sfputc_r>:
 80063a6:	6893      	ldr	r3, [r2, #8]
 80063a8:	3b01      	subs	r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	b410      	push	{r4}
 80063ae:	6093      	str	r3, [r2, #8]
 80063b0:	da08      	bge.n	80063c4 <__sfputc_r+0x1e>
 80063b2:	6994      	ldr	r4, [r2, #24]
 80063b4:	42a3      	cmp	r3, r4
 80063b6:	db01      	blt.n	80063bc <__sfputc_r+0x16>
 80063b8:	290a      	cmp	r1, #10
 80063ba:	d103      	bne.n	80063c4 <__sfputc_r+0x1e>
 80063bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063c0:	f000 bac4 	b.w	800694c <__swbuf_r>
 80063c4:	6813      	ldr	r3, [r2, #0]
 80063c6:	1c58      	adds	r0, r3, #1
 80063c8:	6010      	str	r0, [r2, #0]
 80063ca:	7019      	strb	r1, [r3, #0]
 80063cc:	4608      	mov	r0, r1
 80063ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <__sfputs_r>:
 80063d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d6:	4606      	mov	r6, r0
 80063d8:	460f      	mov	r7, r1
 80063da:	4614      	mov	r4, r2
 80063dc:	18d5      	adds	r5, r2, r3
 80063de:	42ac      	cmp	r4, r5
 80063e0:	d101      	bne.n	80063e6 <__sfputs_r+0x12>
 80063e2:	2000      	movs	r0, #0
 80063e4:	e007      	b.n	80063f6 <__sfputs_r+0x22>
 80063e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ea:	463a      	mov	r2, r7
 80063ec:	4630      	mov	r0, r6
 80063ee:	f7ff ffda 	bl	80063a6 <__sfputc_r>
 80063f2:	1c43      	adds	r3, r0, #1
 80063f4:	d1f3      	bne.n	80063de <__sfputs_r+0xa>
 80063f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080063f8 <_vfiprintf_r>:
 80063f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fc:	460d      	mov	r5, r1
 80063fe:	b09d      	sub	sp, #116	; 0x74
 8006400:	4614      	mov	r4, r2
 8006402:	4698      	mov	r8, r3
 8006404:	4606      	mov	r6, r0
 8006406:	b118      	cbz	r0, 8006410 <_vfiprintf_r+0x18>
 8006408:	6a03      	ldr	r3, [r0, #32]
 800640a:	b90b      	cbnz	r3, 8006410 <_vfiprintf_r+0x18>
 800640c:	f7ff fd20 	bl	8005e50 <__sinit>
 8006410:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006412:	07d9      	lsls	r1, r3, #31
 8006414:	d405      	bmi.n	8006422 <_vfiprintf_r+0x2a>
 8006416:	89ab      	ldrh	r3, [r5, #12]
 8006418:	059a      	lsls	r2, r3, #22
 800641a:	d402      	bmi.n	8006422 <_vfiprintf_r+0x2a>
 800641c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800641e:	f7ff fe87 	bl	8006130 <__retarget_lock_acquire_recursive>
 8006422:	89ab      	ldrh	r3, [r5, #12]
 8006424:	071b      	lsls	r3, r3, #28
 8006426:	d501      	bpl.n	800642c <_vfiprintf_r+0x34>
 8006428:	692b      	ldr	r3, [r5, #16]
 800642a:	b99b      	cbnz	r3, 8006454 <_vfiprintf_r+0x5c>
 800642c:	4629      	mov	r1, r5
 800642e:	4630      	mov	r0, r6
 8006430:	f000 faca 	bl	80069c8 <__swsetup_r>
 8006434:	b170      	cbz	r0, 8006454 <_vfiprintf_r+0x5c>
 8006436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006438:	07dc      	lsls	r4, r3, #31
 800643a:	d504      	bpl.n	8006446 <_vfiprintf_r+0x4e>
 800643c:	f04f 30ff 	mov.w	r0, #4294967295
 8006440:	b01d      	add	sp, #116	; 0x74
 8006442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006446:	89ab      	ldrh	r3, [r5, #12]
 8006448:	0598      	lsls	r0, r3, #22
 800644a:	d4f7      	bmi.n	800643c <_vfiprintf_r+0x44>
 800644c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800644e:	f7ff fe70 	bl	8006132 <__retarget_lock_release_recursive>
 8006452:	e7f3      	b.n	800643c <_vfiprintf_r+0x44>
 8006454:	2300      	movs	r3, #0
 8006456:	9309      	str	r3, [sp, #36]	; 0x24
 8006458:	2320      	movs	r3, #32
 800645a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800645e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006462:	2330      	movs	r3, #48	; 0x30
 8006464:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006618 <_vfiprintf_r+0x220>
 8006468:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800646c:	f04f 0901 	mov.w	r9, #1
 8006470:	4623      	mov	r3, r4
 8006472:	469a      	mov	sl, r3
 8006474:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006478:	b10a      	cbz	r2, 800647e <_vfiprintf_r+0x86>
 800647a:	2a25      	cmp	r2, #37	; 0x25
 800647c:	d1f9      	bne.n	8006472 <_vfiprintf_r+0x7a>
 800647e:	ebba 0b04 	subs.w	fp, sl, r4
 8006482:	d00b      	beq.n	800649c <_vfiprintf_r+0xa4>
 8006484:	465b      	mov	r3, fp
 8006486:	4622      	mov	r2, r4
 8006488:	4629      	mov	r1, r5
 800648a:	4630      	mov	r0, r6
 800648c:	f7ff ffa2 	bl	80063d4 <__sfputs_r>
 8006490:	3001      	adds	r0, #1
 8006492:	f000 80a9 	beq.w	80065e8 <_vfiprintf_r+0x1f0>
 8006496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006498:	445a      	add	r2, fp
 800649a:	9209      	str	r2, [sp, #36]	; 0x24
 800649c:	f89a 3000 	ldrb.w	r3, [sl]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 80a1 	beq.w	80065e8 <_vfiprintf_r+0x1f0>
 80064a6:	2300      	movs	r3, #0
 80064a8:	f04f 32ff 	mov.w	r2, #4294967295
 80064ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064b0:	f10a 0a01 	add.w	sl, sl, #1
 80064b4:	9304      	str	r3, [sp, #16]
 80064b6:	9307      	str	r3, [sp, #28]
 80064b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064bc:	931a      	str	r3, [sp, #104]	; 0x68
 80064be:	4654      	mov	r4, sl
 80064c0:	2205      	movs	r2, #5
 80064c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c6:	4854      	ldr	r0, [pc, #336]	; (8006618 <_vfiprintf_r+0x220>)
 80064c8:	f7f9 fe92 	bl	80001f0 <memchr>
 80064cc:	9a04      	ldr	r2, [sp, #16]
 80064ce:	b9d8      	cbnz	r0, 8006508 <_vfiprintf_r+0x110>
 80064d0:	06d1      	lsls	r1, r2, #27
 80064d2:	bf44      	itt	mi
 80064d4:	2320      	movmi	r3, #32
 80064d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064da:	0713      	lsls	r3, r2, #28
 80064dc:	bf44      	itt	mi
 80064de:	232b      	movmi	r3, #43	; 0x2b
 80064e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064e4:	f89a 3000 	ldrb.w	r3, [sl]
 80064e8:	2b2a      	cmp	r3, #42	; 0x2a
 80064ea:	d015      	beq.n	8006518 <_vfiprintf_r+0x120>
 80064ec:	9a07      	ldr	r2, [sp, #28]
 80064ee:	4654      	mov	r4, sl
 80064f0:	2000      	movs	r0, #0
 80064f2:	f04f 0c0a 	mov.w	ip, #10
 80064f6:	4621      	mov	r1, r4
 80064f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064fc:	3b30      	subs	r3, #48	; 0x30
 80064fe:	2b09      	cmp	r3, #9
 8006500:	d94d      	bls.n	800659e <_vfiprintf_r+0x1a6>
 8006502:	b1b0      	cbz	r0, 8006532 <_vfiprintf_r+0x13a>
 8006504:	9207      	str	r2, [sp, #28]
 8006506:	e014      	b.n	8006532 <_vfiprintf_r+0x13a>
 8006508:	eba0 0308 	sub.w	r3, r0, r8
 800650c:	fa09 f303 	lsl.w	r3, r9, r3
 8006510:	4313      	orrs	r3, r2
 8006512:	9304      	str	r3, [sp, #16]
 8006514:	46a2      	mov	sl, r4
 8006516:	e7d2      	b.n	80064be <_vfiprintf_r+0xc6>
 8006518:	9b03      	ldr	r3, [sp, #12]
 800651a:	1d19      	adds	r1, r3, #4
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	9103      	str	r1, [sp, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	bfbb      	ittet	lt
 8006524:	425b      	neglt	r3, r3
 8006526:	f042 0202 	orrlt.w	r2, r2, #2
 800652a:	9307      	strge	r3, [sp, #28]
 800652c:	9307      	strlt	r3, [sp, #28]
 800652e:	bfb8      	it	lt
 8006530:	9204      	strlt	r2, [sp, #16]
 8006532:	7823      	ldrb	r3, [r4, #0]
 8006534:	2b2e      	cmp	r3, #46	; 0x2e
 8006536:	d10c      	bne.n	8006552 <_vfiprintf_r+0x15a>
 8006538:	7863      	ldrb	r3, [r4, #1]
 800653a:	2b2a      	cmp	r3, #42	; 0x2a
 800653c:	d134      	bne.n	80065a8 <_vfiprintf_r+0x1b0>
 800653e:	9b03      	ldr	r3, [sp, #12]
 8006540:	1d1a      	adds	r2, r3, #4
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	9203      	str	r2, [sp, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	bfb8      	it	lt
 800654a:	f04f 33ff 	movlt.w	r3, #4294967295
 800654e:	3402      	adds	r4, #2
 8006550:	9305      	str	r3, [sp, #20]
 8006552:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006628 <_vfiprintf_r+0x230>
 8006556:	7821      	ldrb	r1, [r4, #0]
 8006558:	2203      	movs	r2, #3
 800655a:	4650      	mov	r0, sl
 800655c:	f7f9 fe48 	bl	80001f0 <memchr>
 8006560:	b138      	cbz	r0, 8006572 <_vfiprintf_r+0x17a>
 8006562:	9b04      	ldr	r3, [sp, #16]
 8006564:	eba0 000a 	sub.w	r0, r0, sl
 8006568:	2240      	movs	r2, #64	; 0x40
 800656a:	4082      	lsls	r2, r0
 800656c:	4313      	orrs	r3, r2
 800656e:	3401      	adds	r4, #1
 8006570:	9304      	str	r3, [sp, #16]
 8006572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006576:	4829      	ldr	r0, [pc, #164]	; (800661c <_vfiprintf_r+0x224>)
 8006578:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800657c:	2206      	movs	r2, #6
 800657e:	f7f9 fe37 	bl	80001f0 <memchr>
 8006582:	2800      	cmp	r0, #0
 8006584:	d03f      	beq.n	8006606 <_vfiprintf_r+0x20e>
 8006586:	4b26      	ldr	r3, [pc, #152]	; (8006620 <_vfiprintf_r+0x228>)
 8006588:	bb1b      	cbnz	r3, 80065d2 <_vfiprintf_r+0x1da>
 800658a:	9b03      	ldr	r3, [sp, #12]
 800658c:	3307      	adds	r3, #7
 800658e:	f023 0307 	bic.w	r3, r3, #7
 8006592:	3308      	adds	r3, #8
 8006594:	9303      	str	r3, [sp, #12]
 8006596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006598:	443b      	add	r3, r7
 800659a:	9309      	str	r3, [sp, #36]	; 0x24
 800659c:	e768      	b.n	8006470 <_vfiprintf_r+0x78>
 800659e:	fb0c 3202 	mla	r2, ip, r2, r3
 80065a2:	460c      	mov	r4, r1
 80065a4:	2001      	movs	r0, #1
 80065a6:	e7a6      	b.n	80064f6 <_vfiprintf_r+0xfe>
 80065a8:	2300      	movs	r3, #0
 80065aa:	3401      	adds	r4, #1
 80065ac:	9305      	str	r3, [sp, #20]
 80065ae:	4619      	mov	r1, r3
 80065b0:	f04f 0c0a 	mov.w	ip, #10
 80065b4:	4620      	mov	r0, r4
 80065b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065ba:	3a30      	subs	r2, #48	; 0x30
 80065bc:	2a09      	cmp	r2, #9
 80065be:	d903      	bls.n	80065c8 <_vfiprintf_r+0x1d0>
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d0c6      	beq.n	8006552 <_vfiprintf_r+0x15a>
 80065c4:	9105      	str	r1, [sp, #20]
 80065c6:	e7c4      	b.n	8006552 <_vfiprintf_r+0x15a>
 80065c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80065cc:	4604      	mov	r4, r0
 80065ce:	2301      	movs	r3, #1
 80065d0:	e7f0      	b.n	80065b4 <_vfiprintf_r+0x1bc>
 80065d2:	ab03      	add	r3, sp, #12
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	462a      	mov	r2, r5
 80065d8:	4b12      	ldr	r3, [pc, #72]	; (8006624 <_vfiprintf_r+0x22c>)
 80065da:	a904      	add	r1, sp, #16
 80065dc:	4630      	mov	r0, r6
 80065de:	f3af 8000 	nop.w
 80065e2:	4607      	mov	r7, r0
 80065e4:	1c78      	adds	r0, r7, #1
 80065e6:	d1d6      	bne.n	8006596 <_vfiprintf_r+0x19e>
 80065e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065ea:	07d9      	lsls	r1, r3, #31
 80065ec:	d405      	bmi.n	80065fa <_vfiprintf_r+0x202>
 80065ee:	89ab      	ldrh	r3, [r5, #12]
 80065f0:	059a      	lsls	r2, r3, #22
 80065f2:	d402      	bmi.n	80065fa <_vfiprintf_r+0x202>
 80065f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065f6:	f7ff fd9c 	bl	8006132 <__retarget_lock_release_recursive>
 80065fa:	89ab      	ldrh	r3, [r5, #12]
 80065fc:	065b      	lsls	r3, r3, #25
 80065fe:	f53f af1d 	bmi.w	800643c <_vfiprintf_r+0x44>
 8006602:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006604:	e71c      	b.n	8006440 <_vfiprintf_r+0x48>
 8006606:	ab03      	add	r3, sp, #12
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	462a      	mov	r2, r5
 800660c:	4b05      	ldr	r3, [pc, #20]	; (8006624 <_vfiprintf_r+0x22c>)
 800660e:	a904      	add	r1, sp, #16
 8006610:	4630      	mov	r0, r6
 8006612:	f000 f879 	bl	8006708 <_printf_i>
 8006616:	e7e4      	b.n	80065e2 <_vfiprintf_r+0x1ea>
 8006618:	08008142 	.word	0x08008142
 800661c:	0800814c 	.word	0x0800814c
 8006620:	00000000 	.word	0x00000000
 8006624:	080063d5 	.word	0x080063d5
 8006628:	08008148 	.word	0x08008148

0800662c <_printf_common>:
 800662c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006630:	4616      	mov	r6, r2
 8006632:	4699      	mov	r9, r3
 8006634:	688a      	ldr	r2, [r1, #8]
 8006636:	690b      	ldr	r3, [r1, #16]
 8006638:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800663c:	4293      	cmp	r3, r2
 800663e:	bfb8      	it	lt
 8006640:	4613      	movlt	r3, r2
 8006642:	6033      	str	r3, [r6, #0]
 8006644:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006648:	4607      	mov	r7, r0
 800664a:	460c      	mov	r4, r1
 800664c:	b10a      	cbz	r2, 8006652 <_printf_common+0x26>
 800664e:	3301      	adds	r3, #1
 8006650:	6033      	str	r3, [r6, #0]
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	0699      	lsls	r1, r3, #26
 8006656:	bf42      	ittt	mi
 8006658:	6833      	ldrmi	r3, [r6, #0]
 800665a:	3302      	addmi	r3, #2
 800665c:	6033      	strmi	r3, [r6, #0]
 800665e:	6825      	ldr	r5, [r4, #0]
 8006660:	f015 0506 	ands.w	r5, r5, #6
 8006664:	d106      	bne.n	8006674 <_printf_common+0x48>
 8006666:	f104 0a19 	add.w	sl, r4, #25
 800666a:	68e3      	ldr	r3, [r4, #12]
 800666c:	6832      	ldr	r2, [r6, #0]
 800666e:	1a9b      	subs	r3, r3, r2
 8006670:	42ab      	cmp	r3, r5
 8006672:	dc26      	bgt.n	80066c2 <_printf_common+0x96>
 8006674:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006678:	1e13      	subs	r3, r2, #0
 800667a:	6822      	ldr	r2, [r4, #0]
 800667c:	bf18      	it	ne
 800667e:	2301      	movne	r3, #1
 8006680:	0692      	lsls	r2, r2, #26
 8006682:	d42b      	bmi.n	80066dc <_printf_common+0xb0>
 8006684:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006688:	4649      	mov	r1, r9
 800668a:	4638      	mov	r0, r7
 800668c:	47c0      	blx	r8
 800668e:	3001      	adds	r0, #1
 8006690:	d01e      	beq.n	80066d0 <_printf_common+0xa4>
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	6922      	ldr	r2, [r4, #16]
 8006696:	f003 0306 	and.w	r3, r3, #6
 800669a:	2b04      	cmp	r3, #4
 800669c:	bf02      	ittt	eq
 800669e:	68e5      	ldreq	r5, [r4, #12]
 80066a0:	6833      	ldreq	r3, [r6, #0]
 80066a2:	1aed      	subeq	r5, r5, r3
 80066a4:	68a3      	ldr	r3, [r4, #8]
 80066a6:	bf0c      	ite	eq
 80066a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066ac:	2500      	movne	r5, #0
 80066ae:	4293      	cmp	r3, r2
 80066b0:	bfc4      	itt	gt
 80066b2:	1a9b      	subgt	r3, r3, r2
 80066b4:	18ed      	addgt	r5, r5, r3
 80066b6:	2600      	movs	r6, #0
 80066b8:	341a      	adds	r4, #26
 80066ba:	42b5      	cmp	r5, r6
 80066bc:	d11a      	bne.n	80066f4 <_printf_common+0xc8>
 80066be:	2000      	movs	r0, #0
 80066c0:	e008      	b.n	80066d4 <_printf_common+0xa8>
 80066c2:	2301      	movs	r3, #1
 80066c4:	4652      	mov	r2, sl
 80066c6:	4649      	mov	r1, r9
 80066c8:	4638      	mov	r0, r7
 80066ca:	47c0      	blx	r8
 80066cc:	3001      	adds	r0, #1
 80066ce:	d103      	bne.n	80066d8 <_printf_common+0xac>
 80066d0:	f04f 30ff 	mov.w	r0, #4294967295
 80066d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066d8:	3501      	adds	r5, #1
 80066da:	e7c6      	b.n	800666a <_printf_common+0x3e>
 80066dc:	18e1      	adds	r1, r4, r3
 80066de:	1c5a      	adds	r2, r3, #1
 80066e0:	2030      	movs	r0, #48	; 0x30
 80066e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066e6:	4422      	add	r2, r4
 80066e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066f0:	3302      	adds	r3, #2
 80066f2:	e7c7      	b.n	8006684 <_printf_common+0x58>
 80066f4:	2301      	movs	r3, #1
 80066f6:	4622      	mov	r2, r4
 80066f8:	4649      	mov	r1, r9
 80066fa:	4638      	mov	r0, r7
 80066fc:	47c0      	blx	r8
 80066fe:	3001      	adds	r0, #1
 8006700:	d0e6      	beq.n	80066d0 <_printf_common+0xa4>
 8006702:	3601      	adds	r6, #1
 8006704:	e7d9      	b.n	80066ba <_printf_common+0x8e>
	...

08006708 <_printf_i>:
 8006708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800670c:	7e0f      	ldrb	r7, [r1, #24]
 800670e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006710:	2f78      	cmp	r7, #120	; 0x78
 8006712:	4691      	mov	r9, r2
 8006714:	4680      	mov	r8, r0
 8006716:	460c      	mov	r4, r1
 8006718:	469a      	mov	sl, r3
 800671a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800671e:	d807      	bhi.n	8006730 <_printf_i+0x28>
 8006720:	2f62      	cmp	r7, #98	; 0x62
 8006722:	d80a      	bhi.n	800673a <_printf_i+0x32>
 8006724:	2f00      	cmp	r7, #0
 8006726:	f000 80d4 	beq.w	80068d2 <_printf_i+0x1ca>
 800672a:	2f58      	cmp	r7, #88	; 0x58
 800672c:	f000 80c0 	beq.w	80068b0 <_printf_i+0x1a8>
 8006730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006734:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006738:	e03a      	b.n	80067b0 <_printf_i+0xa8>
 800673a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800673e:	2b15      	cmp	r3, #21
 8006740:	d8f6      	bhi.n	8006730 <_printf_i+0x28>
 8006742:	a101      	add	r1, pc, #4	; (adr r1, 8006748 <_printf_i+0x40>)
 8006744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006748:	080067a1 	.word	0x080067a1
 800674c:	080067b5 	.word	0x080067b5
 8006750:	08006731 	.word	0x08006731
 8006754:	08006731 	.word	0x08006731
 8006758:	08006731 	.word	0x08006731
 800675c:	08006731 	.word	0x08006731
 8006760:	080067b5 	.word	0x080067b5
 8006764:	08006731 	.word	0x08006731
 8006768:	08006731 	.word	0x08006731
 800676c:	08006731 	.word	0x08006731
 8006770:	08006731 	.word	0x08006731
 8006774:	080068b9 	.word	0x080068b9
 8006778:	080067e1 	.word	0x080067e1
 800677c:	08006873 	.word	0x08006873
 8006780:	08006731 	.word	0x08006731
 8006784:	08006731 	.word	0x08006731
 8006788:	080068db 	.word	0x080068db
 800678c:	08006731 	.word	0x08006731
 8006790:	080067e1 	.word	0x080067e1
 8006794:	08006731 	.word	0x08006731
 8006798:	08006731 	.word	0x08006731
 800679c:	0800687b 	.word	0x0800687b
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	1d1a      	adds	r2, r3, #4
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	602a      	str	r2, [r5, #0]
 80067a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067b0:	2301      	movs	r3, #1
 80067b2:	e09f      	b.n	80068f4 <_printf_i+0x1ec>
 80067b4:	6820      	ldr	r0, [r4, #0]
 80067b6:	682b      	ldr	r3, [r5, #0]
 80067b8:	0607      	lsls	r7, r0, #24
 80067ba:	f103 0104 	add.w	r1, r3, #4
 80067be:	6029      	str	r1, [r5, #0]
 80067c0:	d501      	bpl.n	80067c6 <_printf_i+0xbe>
 80067c2:	681e      	ldr	r6, [r3, #0]
 80067c4:	e003      	b.n	80067ce <_printf_i+0xc6>
 80067c6:	0646      	lsls	r6, r0, #25
 80067c8:	d5fb      	bpl.n	80067c2 <_printf_i+0xba>
 80067ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80067ce:	2e00      	cmp	r6, #0
 80067d0:	da03      	bge.n	80067da <_printf_i+0xd2>
 80067d2:	232d      	movs	r3, #45	; 0x2d
 80067d4:	4276      	negs	r6, r6
 80067d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067da:	485a      	ldr	r0, [pc, #360]	; (8006944 <_printf_i+0x23c>)
 80067dc:	230a      	movs	r3, #10
 80067de:	e012      	b.n	8006806 <_printf_i+0xfe>
 80067e0:	682b      	ldr	r3, [r5, #0]
 80067e2:	6820      	ldr	r0, [r4, #0]
 80067e4:	1d19      	adds	r1, r3, #4
 80067e6:	6029      	str	r1, [r5, #0]
 80067e8:	0605      	lsls	r5, r0, #24
 80067ea:	d501      	bpl.n	80067f0 <_printf_i+0xe8>
 80067ec:	681e      	ldr	r6, [r3, #0]
 80067ee:	e002      	b.n	80067f6 <_printf_i+0xee>
 80067f0:	0641      	lsls	r1, r0, #25
 80067f2:	d5fb      	bpl.n	80067ec <_printf_i+0xe4>
 80067f4:	881e      	ldrh	r6, [r3, #0]
 80067f6:	4853      	ldr	r0, [pc, #332]	; (8006944 <_printf_i+0x23c>)
 80067f8:	2f6f      	cmp	r7, #111	; 0x6f
 80067fa:	bf0c      	ite	eq
 80067fc:	2308      	moveq	r3, #8
 80067fe:	230a      	movne	r3, #10
 8006800:	2100      	movs	r1, #0
 8006802:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006806:	6865      	ldr	r5, [r4, #4]
 8006808:	60a5      	str	r5, [r4, #8]
 800680a:	2d00      	cmp	r5, #0
 800680c:	bfa2      	ittt	ge
 800680e:	6821      	ldrge	r1, [r4, #0]
 8006810:	f021 0104 	bicge.w	r1, r1, #4
 8006814:	6021      	strge	r1, [r4, #0]
 8006816:	b90e      	cbnz	r6, 800681c <_printf_i+0x114>
 8006818:	2d00      	cmp	r5, #0
 800681a:	d04b      	beq.n	80068b4 <_printf_i+0x1ac>
 800681c:	4615      	mov	r5, r2
 800681e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006822:	fb03 6711 	mls	r7, r3, r1, r6
 8006826:	5dc7      	ldrb	r7, [r0, r7]
 8006828:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800682c:	4637      	mov	r7, r6
 800682e:	42bb      	cmp	r3, r7
 8006830:	460e      	mov	r6, r1
 8006832:	d9f4      	bls.n	800681e <_printf_i+0x116>
 8006834:	2b08      	cmp	r3, #8
 8006836:	d10b      	bne.n	8006850 <_printf_i+0x148>
 8006838:	6823      	ldr	r3, [r4, #0]
 800683a:	07de      	lsls	r6, r3, #31
 800683c:	d508      	bpl.n	8006850 <_printf_i+0x148>
 800683e:	6923      	ldr	r3, [r4, #16]
 8006840:	6861      	ldr	r1, [r4, #4]
 8006842:	4299      	cmp	r1, r3
 8006844:	bfde      	ittt	le
 8006846:	2330      	movle	r3, #48	; 0x30
 8006848:	f805 3c01 	strble.w	r3, [r5, #-1]
 800684c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006850:	1b52      	subs	r2, r2, r5
 8006852:	6122      	str	r2, [r4, #16]
 8006854:	f8cd a000 	str.w	sl, [sp]
 8006858:	464b      	mov	r3, r9
 800685a:	aa03      	add	r2, sp, #12
 800685c:	4621      	mov	r1, r4
 800685e:	4640      	mov	r0, r8
 8006860:	f7ff fee4 	bl	800662c <_printf_common>
 8006864:	3001      	adds	r0, #1
 8006866:	d14a      	bne.n	80068fe <_printf_i+0x1f6>
 8006868:	f04f 30ff 	mov.w	r0, #4294967295
 800686c:	b004      	add	sp, #16
 800686e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	f043 0320 	orr.w	r3, r3, #32
 8006878:	6023      	str	r3, [r4, #0]
 800687a:	4833      	ldr	r0, [pc, #204]	; (8006948 <_printf_i+0x240>)
 800687c:	2778      	movs	r7, #120	; 0x78
 800687e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	6829      	ldr	r1, [r5, #0]
 8006886:	061f      	lsls	r7, r3, #24
 8006888:	f851 6b04 	ldr.w	r6, [r1], #4
 800688c:	d402      	bmi.n	8006894 <_printf_i+0x18c>
 800688e:	065f      	lsls	r7, r3, #25
 8006890:	bf48      	it	mi
 8006892:	b2b6      	uxthmi	r6, r6
 8006894:	07df      	lsls	r7, r3, #31
 8006896:	bf48      	it	mi
 8006898:	f043 0320 	orrmi.w	r3, r3, #32
 800689c:	6029      	str	r1, [r5, #0]
 800689e:	bf48      	it	mi
 80068a0:	6023      	strmi	r3, [r4, #0]
 80068a2:	b91e      	cbnz	r6, 80068ac <_printf_i+0x1a4>
 80068a4:	6823      	ldr	r3, [r4, #0]
 80068a6:	f023 0320 	bic.w	r3, r3, #32
 80068aa:	6023      	str	r3, [r4, #0]
 80068ac:	2310      	movs	r3, #16
 80068ae:	e7a7      	b.n	8006800 <_printf_i+0xf8>
 80068b0:	4824      	ldr	r0, [pc, #144]	; (8006944 <_printf_i+0x23c>)
 80068b2:	e7e4      	b.n	800687e <_printf_i+0x176>
 80068b4:	4615      	mov	r5, r2
 80068b6:	e7bd      	b.n	8006834 <_printf_i+0x12c>
 80068b8:	682b      	ldr	r3, [r5, #0]
 80068ba:	6826      	ldr	r6, [r4, #0]
 80068bc:	6961      	ldr	r1, [r4, #20]
 80068be:	1d18      	adds	r0, r3, #4
 80068c0:	6028      	str	r0, [r5, #0]
 80068c2:	0635      	lsls	r5, r6, #24
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	d501      	bpl.n	80068cc <_printf_i+0x1c4>
 80068c8:	6019      	str	r1, [r3, #0]
 80068ca:	e002      	b.n	80068d2 <_printf_i+0x1ca>
 80068cc:	0670      	lsls	r0, r6, #25
 80068ce:	d5fb      	bpl.n	80068c8 <_printf_i+0x1c0>
 80068d0:	8019      	strh	r1, [r3, #0]
 80068d2:	2300      	movs	r3, #0
 80068d4:	6123      	str	r3, [r4, #16]
 80068d6:	4615      	mov	r5, r2
 80068d8:	e7bc      	b.n	8006854 <_printf_i+0x14c>
 80068da:	682b      	ldr	r3, [r5, #0]
 80068dc:	1d1a      	adds	r2, r3, #4
 80068de:	602a      	str	r2, [r5, #0]
 80068e0:	681d      	ldr	r5, [r3, #0]
 80068e2:	6862      	ldr	r2, [r4, #4]
 80068e4:	2100      	movs	r1, #0
 80068e6:	4628      	mov	r0, r5
 80068e8:	f7f9 fc82 	bl	80001f0 <memchr>
 80068ec:	b108      	cbz	r0, 80068f2 <_printf_i+0x1ea>
 80068ee:	1b40      	subs	r0, r0, r5
 80068f0:	6060      	str	r0, [r4, #4]
 80068f2:	6863      	ldr	r3, [r4, #4]
 80068f4:	6123      	str	r3, [r4, #16]
 80068f6:	2300      	movs	r3, #0
 80068f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068fc:	e7aa      	b.n	8006854 <_printf_i+0x14c>
 80068fe:	6923      	ldr	r3, [r4, #16]
 8006900:	462a      	mov	r2, r5
 8006902:	4649      	mov	r1, r9
 8006904:	4640      	mov	r0, r8
 8006906:	47d0      	blx	sl
 8006908:	3001      	adds	r0, #1
 800690a:	d0ad      	beq.n	8006868 <_printf_i+0x160>
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	079b      	lsls	r3, r3, #30
 8006910:	d413      	bmi.n	800693a <_printf_i+0x232>
 8006912:	68e0      	ldr	r0, [r4, #12]
 8006914:	9b03      	ldr	r3, [sp, #12]
 8006916:	4298      	cmp	r0, r3
 8006918:	bfb8      	it	lt
 800691a:	4618      	movlt	r0, r3
 800691c:	e7a6      	b.n	800686c <_printf_i+0x164>
 800691e:	2301      	movs	r3, #1
 8006920:	4632      	mov	r2, r6
 8006922:	4649      	mov	r1, r9
 8006924:	4640      	mov	r0, r8
 8006926:	47d0      	blx	sl
 8006928:	3001      	adds	r0, #1
 800692a:	d09d      	beq.n	8006868 <_printf_i+0x160>
 800692c:	3501      	adds	r5, #1
 800692e:	68e3      	ldr	r3, [r4, #12]
 8006930:	9903      	ldr	r1, [sp, #12]
 8006932:	1a5b      	subs	r3, r3, r1
 8006934:	42ab      	cmp	r3, r5
 8006936:	dcf2      	bgt.n	800691e <_printf_i+0x216>
 8006938:	e7eb      	b.n	8006912 <_printf_i+0x20a>
 800693a:	2500      	movs	r5, #0
 800693c:	f104 0619 	add.w	r6, r4, #25
 8006940:	e7f5      	b.n	800692e <_printf_i+0x226>
 8006942:	bf00      	nop
 8006944:	08008153 	.word	0x08008153
 8006948:	08008164 	.word	0x08008164

0800694c <__swbuf_r>:
 800694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694e:	460e      	mov	r6, r1
 8006950:	4614      	mov	r4, r2
 8006952:	4605      	mov	r5, r0
 8006954:	b118      	cbz	r0, 800695e <__swbuf_r+0x12>
 8006956:	6a03      	ldr	r3, [r0, #32]
 8006958:	b90b      	cbnz	r3, 800695e <__swbuf_r+0x12>
 800695a:	f7ff fa79 	bl	8005e50 <__sinit>
 800695e:	69a3      	ldr	r3, [r4, #24]
 8006960:	60a3      	str	r3, [r4, #8]
 8006962:	89a3      	ldrh	r3, [r4, #12]
 8006964:	071a      	lsls	r2, r3, #28
 8006966:	d525      	bpl.n	80069b4 <__swbuf_r+0x68>
 8006968:	6923      	ldr	r3, [r4, #16]
 800696a:	b31b      	cbz	r3, 80069b4 <__swbuf_r+0x68>
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	6922      	ldr	r2, [r4, #16]
 8006970:	1a98      	subs	r0, r3, r2
 8006972:	6963      	ldr	r3, [r4, #20]
 8006974:	b2f6      	uxtb	r6, r6
 8006976:	4283      	cmp	r3, r0
 8006978:	4637      	mov	r7, r6
 800697a:	dc04      	bgt.n	8006986 <__swbuf_r+0x3a>
 800697c:	4621      	mov	r1, r4
 800697e:	4628      	mov	r0, r5
 8006980:	f7ff fcd0 	bl	8006324 <_fflush_r>
 8006984:	b9e0      	cbnz	r0, 80069c0 <__swbuf_r+0x74>
 8006986:	68a3      	ldr	r3, [r4, #8]
 8006988:	3b01      	subs	r3, #1
 800698a:	60a3      	str	r3, [r4, #8]
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	6022      	str	r2, [r4, #0]
 8006992:	701e      	strb	r6, [r3, #0]
 8006994:	6962      	ldr	r2, [r4, #20]
 8006996:	1c43      	adds	r3, r0, #1
 8006998:	429a      	cmp	r2, r3
 800699a:	d004      	beq.n	80069a6 <__swbuf_r+0x5a>
 800699c:	89a3      	ldrh	r3, [r4, #12]
 800699e:	07db      	lsls	r3, r3, #31
 80069a0:	d506      	bpl.n	80069b0 <__swbuf_r+0x64>
 80069a2:	2e0a      	cmp	r6, #10
 80069a4:	d104      	bne.n	80069b0 <__swbuf_r+0x64>
 80069a6:	4621      	mov	r1, r4
 80069a8:	4628      	mov	r0, r5
 80069aa:	f7ff fcbb 	bl	8006324 <_fflush_r>
 80069ae:	b938      	cbnz	r0, 80069c0 <__swbuf_r+0x74>
 80069b0:	4638      	mov	r0, r7
 80069b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069b4:	4621      	mov	r1, r4
 80069b6:	4628      	mov	r0, r5
 80069b8:	f000 f806 	bl	80069c8 <__swsetup_r>
 80069bc:	2800      	cmp	r0, #0
 80069be:	d0d5      	beq.n	800696c <__swbuf_r+0x20>
 80069c0:	f04f 37ff 	mov.w	r7, #4294967295
 80069c4:	e7f4      	b.n	80069b0 <__swbuf_r+0x64>
	...

080069c8 <__swsetup_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4b2a      	ldr	r3, [pc, #168]	; (8006a74 <__swsetup_r+0xac>)
 80069cc:	4605      	mov	r5, r0
 80069ce:	6818      	ldr	r0, [r3, #0]
 80069d0:	460c      	mov	r4, r1
 80069d2:	b118      	cbz	r0, 80069dc <__swsetup_r+0x14>
 80069d4:	6a03      	ldr	r3, [r0, #32]
 80069d6:	b90b      	cbnz	r3, 80069dc <__swsetup_r+0x14>
 80069d8:	f7ff fa3a 	bl	8005e50 <__sinit>
 80069dc:	89a3      	ldrh	r3, [r4, #12]
 80069de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069e2:	0718      	lsls	r0, r3, #28
 80069e4:	d422      	bmi.n	8006a2c <__swsetup_r+0x64>
 80069e6:	06d9      	lsls	r1, r3, #27
 80069e8:	d407      	bmi.n	80069fa <__swsetup_r+0x32>
 80069ea:	2309      	movs	r3, #9
 80069ec:	602b      	str	r3, [r5, #0]
 80069ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069f2:	81a3      	strh	r3, [r4, #12]
 80069f4:	f04f 30ff 	mov.w	r0, #4294967295
 80069f8:	e034      	b.n	8006a64 <__swsetup_r+0x9c>
 80069fa:	0758      	lsls	r0, r3, #29
 80069fc:	d512      	bpl.n	8006a24 <__swsetup_r+0x5c>
 80069fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a00:	b141      	cbz	r1, 8006a14 <__swsetup_r+0x4c>
 8006a02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a06:	4299      	cmp	r1, r3
 8006a08:	d002      	beq.n	8006a10 <__swsetup_r+0x48>
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	f7ff fbb8 	bl	8006180 <_free_r>
 8006a10:	2300      	movs	r3, #0
 8006a12:	6363      	str	r3, [r4, #52]	; 0x34
 8006a14:	89a3      	ldrh	r3, [r4, #12]
 8006a16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a1a:	81a3      	strh	r3, [r4, #12]
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	6063      	str	r3, [r4, #4]
 8006a20:	6923      	ldr	r3, [r4, #16]
 8006a22:	6023      	str	r3, [r4, #0]
 8006a24:	89a3      	ldrh	r3, [r4, #12]
 8006a26:	f043 0308 	orr.w	r3, r3, #8
 8006a2a:	81a3      	strh	r3, [r4, #12]
 8006a2c:	6923      	ldr	r3, [r4, #16]
 8006a2e:	b94b      	cbnz	r3, 8006a44 <__swsetup_r+0x7c>
 8006a30:	89a3      	ldrh	r3, [r4, #12]
 8006a32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a3a:	d003      	beq.n	8006a44 <__swsetup_r+0x7c>
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f000 f884 	bl	8006b4c <__smakebuf_r>
 8006a44:	89a0      	ldrh	r0, [r4, #12]
 8006a46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a4a:	f010 0301 	ands.w	r3, r0, #1
 8006a4e:	d00a      	beq.n	8006a66 <__swsetup_r+0x9e>
 8006a50:	2300      	movs	r3, #0
 8006a52:	60a3      	str	r3, [r4, #8]
 8006a54:	6963      	ldr	r3, [r4, #20]
 8006a56:	425b      	negs	r3, r3
 8006a58:	61a3      	str	r3, [r4, #24]
 8006a5a:	6923      	ldr	r3, [r4, #16]
 8006a5c:	b943      	cbnz	r3, 8006a70 <__swsetup_r+0xa8>
 8006a5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a62:	d1c4      	bne.n	80069ee <__swsetup_r+0x26>
 8006a64:	bd38      	pop	{r3, r4, r5, pc}
 8006a66:	0781      	lsls	r1, r0, #30
 8006a68:	bf58      	it	pl
 8006a6a:	6963      	ldrpl	r3, [r4, #20]
 8006a6c:	60a3      	str	r3, [r4, #8]
 8006a6e:	e7f4      	b.n	8006a5a <__swsetup_r+0x92>
 8006a70:	2000      	movs	r0, #0
 8006a72:	e7f7      	b.n	8006a64 <__swsetup_r+0x9c>
 8006a74:	2000007c 	.word	0x2000007c

08006a78 <_raise_r>:
 8006a78:	291f      	cmp	r1, #31
 8006a7a:	b538      	push	{r3, r4, r5, lr}
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	460d      	mov	r5, r1
 8006a80:	d904      	bls.n	8006a8c <_raise_r+0x14>
 8006a82:	2316      	movs	r3, #22
 8006a84:	6003      	str	r3, [r0, #0]
 8006a86:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8a:	bd38      	pop	{r3, r4, r5, pc}
 8006a8c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006a8e:	b112      	cbz	r2, 8006a96 <_raise_r+0x1e>
 8006a90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a94:	b94b      	cbnz	r3, 8006aaa <_raise_r+0x32>
 8006a96:	4620      	mov	r0, r4
 8006a98:	f000 f830 	bl	8006afc <_getpid_r>
 8006a9c:	462a      	mov	r2, r5
 8006a9e:	4601      	mov	r1, r0
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006aa6:	f000 b817 	b.w	8006ad8 <_kill_r>
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d00a      	beq.n	8006ac4 <_raise_r+0x4c>
 8006aae:	1c59      	adds	r1, r3, #1
 8006ab0:	d103      	bne.n	8006aba <_raise_r+0x42>
 8006ab2:	2316      	movs	r3, #22
 8006ab4:	6003      	str	r3, [r0, #0]
 8006ab6:	2001      	movs	r0, #1
 8006ab8:	e7e7      	b.n	8006a8a <_raise_r+0x12>
 8006aba:	2400      	movs	r4, #0
 8006abc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	4798      	blx	r3
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	e7e0      	b.n	8006a8a <_raise_r+0x12>

08006ac8 <raise>:
 8006ac8:	4b02      	ldr	r3, [pc, #8]	; (8006ad4 <raise+0xc>)
 8006aca:	4601      	mov	r1, r0
 8006acc:	6818      	ldr	r0, [r3, #0]
 8006ace:	f7ff bfd3 	b.w	8006a78 <_raise_r>
 8006ad2:	bf00      	nop
 8006ad4:	2000007c 	.word	0x2000007c

08006ad8 <_kill_r>:
 8006ad8:	b538      	push	{r3, r4, r5, lr}
 8006ada:	4d07      	ldr	r5, [pc, #28]	; (8006af8 <_kill_r+0x20>)
 8006adc:	2300      	movs	r3, #0
 8006ade:	4604      	mov	r4, r0
 8006ae0:	4608      	mov	r0, r1
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	602b      	str	r3, [r5, #0]
 8006ae6:	f7fb fe0f 	bl	8002708 <_kill>
 8006aea:	1c43      	adds	r3, r0, #1
 8006aec:	d102      	bne.n	8006af4 <_kill_r+0x1c>
 8006aee:	682b      	ldr	r3, [r5, #0]
 8006af0:	b103      	cbz	r3, 8006af4 <_kill_r+0x1c>
 8006af2:	6023      	str	r3, [r4, #0]
 8006af4:	bd38      	pop	{r3, r4, r5, pc}
 8006af6:	bf00      	nop
 8006af8:	20000374 	.word	0x20000374

08006afc <_getpid_r>:
 8006afc:	f7fb bdfc 	b.w	80026f8 <_getpid>

08006b00 <__swhatbuf_r>:
 8006b00:	b570      	push	{r4, r5, r6, lr}
 8006b02:	460c      	mov	r4, r1
 8006b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b08:	2900      	cmp	r1, #0
 8006b0a:	b096      	sub	sp, #88	; 0x58
 8006b0c:	4615      	mov	r5, r2
 8006b0e:	461e      	mov	r6, r3
 8006b10:	da0d      	bge.n	8006b2e <__swhatbuf_r+0x2e>
 8006b12:	89a3      	ldrh	r3, [r4, #12]
 8006b14:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006b18:	f04f 0100 	mov.w	r1, #0
 8006b1c:	bf0c      	ite	eq
 8006b1e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006b22:	2340      	movne	r3, #64	; 0x40
 8006b24:	2000      	movs	r0, #0
 8006b26:	6031      	str	r1, [r6, #0]
 8006b28:	602b      	str	r3, [r5, #0]
 8006b2a:	b016      	add	sp, #88	; 0x58
 8006b2c:	bd70      	pop	{r4, r5, r6, pc}
 8006b2e:	466a      	mov	r2, sp
 8006b30:	f000 f848 	bl	8006bc4 <_fstat_r>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	dbec      	blt.n	8006b12 <__swhatbuf_r+0x12>
 8006b38:	9901      	ldr	r1, [sp, #4]
 8006b3a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006b3e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006b42:	4259      	negs	r1, r3
 8006b44:	4159      	adcs	r1, r3
 8006b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b4a:	e7eb      	b.n	8006b24 <__swhatbuf_r+0x24>

08006b4c <__smakebuf_r>:
 8006b4c:	898b      	ldrh	r3, [r1, #12]
 8006b4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b50:	079d      	lsls	r5, r3, #30
 8006b52:	4606      	mov	r6, r0
 8006b54:	460c      	mov	r4, r1
 8006b56:	d507      	bpl.n	8006b68 <__smakebuf_r+0x1c>
 8006b58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b5c:	6023      	str	r3, [r4, #0]
 8006b5e:	6123      	str	r3, [r4, #16]
 8006b60:	2301      	movs	r3, #1
 8006b62:	6163      	str	r3, [r4, #20]
 8006b64:	b002      	add	sp, #8
 8006b66:	bd70      	pop	{r4, r5, r6, pc}
 8006b68:	ab01      	add	r3, sp, #4
 8006b6a:	466a      	mov	r2, sp
 8006b6c:	f7ff ffc8 	bl	8006b00 <__swhatbuf_r>
 8006b70:	9900      	ldr	r1, [sp, #0]
 8006b72:	4605      	mov	r5, r0
 8006b74:	4630      	mov	r0, r6
 8006b76:	f7fe ffd9 	bl	8005b2c <_malloc_r>
 8006b7a:	b948      	cbnz	r0, 8006b90 <__smakebuf_r+0x44>
 8006b7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b80:	059a      	lsls	r2, r3, #22
 8006b82:	d4ef      	bmi.n	8006b64 <__smakebuf_r+0x18>
 8006b84:	f023 0303 	bic.w	r3, r3, #3
 8006b88:	f043 0302 	orr.w	r3, r3, #2
 8006b8c:	81a3      	strh	r3, [r4, #12]
 8006b8e:	e7e3      	b.n	8006b58 <__smakebuf_r+0xc>
 8006b90:	89a3      	ldrh	r3, [r4, #12]
 8006b92:	6020      	str	r0, [r4, #0]
 8006b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b98:	81a3      	strh	r3, [r4, #12]
 8006b9a:	9b00      	ldr	r3, [sp, #0]
 8006b9c:	6163      	str	r3, [r4, #20]
 8006b9e:	9b01      	ldr	r3, [sp, #4]
 8006ba0:	6120      	str	r0, [r4, #16]
 8006ba2:	b15b      	cbz	r3, 8006bbc <__smakebuf_r+0x70>
 8006ba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ba8:	4630      	mov	r0, r6
 8006baa:	f000 f81d 	bl	8006be8 <_isatty_r>
 8006bae:	b128      	cbz	r0, 8006bbc <__smakebuf_r+0x70>
 8006bb0:	89a3      	ldrh	r3, [r4, #12]
 8006bb2:	f023 0303 	bic.w	r3, r3, #3
 8006bb6:	f043 0301 	orr.w	r3, r3, #1
 8006bba:	81a3      	strh	r3, [r4, #12]
 8006bbc:	89a3      	ldrh	r3, [r4, #12]
 8006bbe:	431d      	orrs	r5, r3
 8006bc0:	81a5      	strh	r5, [r4, #12]
 8006bc2:	e7cf      	b.n	8006b64 <__smakebuf_r+0x18>

08006bc4 <_fstat_r>:
 8006bc4:	b538      	push	{r3, r4, r5, lr}
 8006bc6:	4d07      	ldr	r5, [pc, #28]	; (8006be4 <_fstat_r+0x20>)
 8006bc8:	2300      	movs	r3, #0
 8006bca:	4604      	mov	r4, r0
 8006bcc:	4608      	mov	r0, r1
 8006bce:	4611      	mov	r1, r2
 8006bd0:	602b      	str	r3, [r5, #0]
 8006bd2:	f7fb fdf8 	bl	80027c6 <_fstat>
 8006bd6:	1c43      	adds	r3, r0, #1
 8006bd8:	d102      	bne.n	8006be0 <_fstat_r+0x1c>
 8006bda:	682b      	ldr	r3, [r5, #0]
 8006bdc:	b103      	cbz	r3, 8006be0 <_fstat_r+0x1c>
 8006bde:	6023      	str	r3, [r4, #0]
 8006be0:	bd38      	pop	{r3, r4, r5, pc}
 8006be2:	bf00      	nop
 8006be4:	20000374 	.word	0x20000374

08006be8 <_isatty_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	4d06      	ldr	r5, [pc, #24]	; (8006c04 <_isatty_r+0x1c>)
 8006bec:	2300      	movs	r3, #0
 8006bee:	4604      	mov	r4, r0
 8006bf0:	4608      	mov	r0, r1
 8006bf2:	602b      	str	r3, [r5, #0]
 8006bf4:	f7fb fdf7 	bl	80027e6 <_isatty>
 8006bf8:	1c43      	adds	r3, r0, #1
 8006bfa:	d102      	bne.n	8006c02 <_isatty_r+0x1a>
 8006bfc:	682b      	ldr	r3, [r5, #0]
 8006bfe:	b103      	cbz	r3, 8006c02 <_isatty_r+0x1a>
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	bd38      	pop	{r3, r4, r5, pc}
 8006c04:	20000374 	.word	0x20000374

08006c08 <atan2>:
 8006c08:	f000 ba26 	b.w	8007058 <__ieee754_atan2>

08006c0c <pow>:
 8006c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0e:	ed2d 8b02 	vpush	{d8}
 8006c12:	eeb0 8a40 	vmov.f32	s16, s0
 8006c16:	eef0 8a60 	vmov.f32	s17, s1
 8006c1a:	ec55 4b11 	vmov	r4, r5, d1
 8006c1e:	f000 fae3 	bl	80071e8 <__ieee754_pow>
 8006c22:	4622      	mov	r2, r4
 8006c24:	462b      	mov	r3, r5
 8006c26:	4620      	mov	r0, r4
 8006c28:	4629      	mov	r1, r5
 8006c2a:	ec57 6b10 	vmov	r6, r7, d0
 8006c2e:	f7f9 ff85 	bl	8000b3c <__aeabi_dcmpun>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d13b      	bne.n	8006cae <pow+0xa2>
 8006c36:	ec51 0b18 	vmov	r0, r1, d8
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f7f9 ff4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c42:	b1b8      	cbz	r0, 8006c74 <pow+0x68>
 8006c44:	2200      	movs	r2, #0
 8006c46:	2300      	movs	r3, #0
 8006c48:	4620      	mov	r0, r4
 8006c4a:	4629      	mov	r1, r5
 8006c4c:	f7f9 ff44 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	d146      	bne.n	8006ce2 <pow+0xd6>
 8006c54:	ec45 4b10 	vmov	d0, r4, r5
 8006c58:	f000 f9f3 	bl	8007042 <finite>
 8006c5c:	b338      	cbz	r0, 8006cae <pow+0xa2>
 8006c5e:	2200      	movs	r2, #0
 8006c60:	2300      	movs	r3, #0
 8006c62:	4620      	mov	r0, r4
 8006c64:	4629      	mov	r1, r5
 8006c66:	f7f9 ff41 	bl	8000aec <__aeabi_dcmplt>
 8006c6a:	b300      	cbz	r0, 8006cae <pow+0xa2>
 8006c6c:	f7ff fa36 	bl	80060dc <__errno>
 8006c70:	2322      	movs	r3, #34	; 0x22
 8006c72:	e01b      	b.n	8006cac <pow+0xa0>
 8006c74:	ec47 6b10 	vmov	d0, r6, r7
 8006c78:	f000 f9e3 	bl	8007042 <finite>
 8006c7c:	b9e0      	cbnz	r0, 8006cb8 <pow+0xac>
 8006c7e:	eeb0 0a48 	vmov.f32	s0, s16
 8006c82:	eef0 0a68 	vmov.f32	s1, s17
 8006c86:	f000 f9dc 	bl	8007042 <finite>
 8006c8a:	b1a8      	cbz	r0, 8006cb8 <pow+0xac>
 8006c8c:	ec45 4b10 	vmov	d0, r4, r5
 8006c90:	f000 f9d7 	bl	8007042 <finite>
 8006c94:	b180      	cbz	r0, 8006cb8 <pow+0xac>
 8006c96:	4632      	mov	r2, r6
 8006c98:	463b      	mov	r3, r7
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	4639      	mov	r1, r7
 8006c9e:	f7f9 ff4d 	bl	8000b3c <__aeabi_dcmpun>
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	d0e2      	beq.n	8006c6c <pow+0x60>
 8006ca6:	f7ff fa19 	bl	80060dc <__errno>
 8006caa:	2321      	movs	r3, #33	; 0x21
 8006cac:	6003      	str	r3, [r0, #0]
 8006cae:	ecbd 8b02 	vpop	{d8}
 8006cb2:	ec47 6b10 	vmov	d0, r6, r7
 8006cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cb8:	2200      	movs	r2, #0
 8006cba:	2300      	movs	r3, #0
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	4639      	mov	r1, r7
 8006cc0:	f7f9 ff0a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d0f2      	beq.n	8006cae <pow+0xa2>
 8006cc8:	eeb0 0a48 	vmov.f32	s0, s16
 8006ccc:	eef0 0a68 	vmov.f32	s1, s17
 8006cd0:	f000 f9b7 	bl	8007042 <finite>
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	d0ea      	beq.n	8006cae <pow+0xa2>
 8006cd8:	ec45 4b10 	vmov	d0, r4, r5
 8006cdc:	f000 f9b1 	bl	8007042 <finite>
 8006ce0:	e7c3      	b.n	8006c6a <pow+0x5e>
 8006ce2:	4f01      	ldr	r7, [pc, #4]	; (8006ce8 <pow+0xdc>)
 8006ce4:	2600      	movs	r6, #0
 8006ce6:	e7e2      	b.n	8006cae <pow+0xa2>
 8006ce8:	3ff00000 	.word	0x3ff00000
 8006cec:	00000000 	.word	0x00000000

08006cf0 <atan>:
 8006cf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf4:	ec55 4b10 	vmov	r4, r5, d0
 8006cf8:	4bc3      	ldr	r3, [pc, #780]	; (8007008 <atan+0x318>)
 8006cfa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006cfe:	429e      	cmp	r6, r3
 8006d00:	46ab      	mov	fp, r5
 8006d02:	dd18      	ble.n	8006d36 <atan+0x46>
 8006d04:	4bc1      	ldr	r3, [pc, #772]	; (800700c <atan+0x31c>)
 8006d06:	429e      	cmp	r6, r3
 8006d08:	dc01      	bgt.n	8006d0e <atan+0x1e>
 8006d0a:	d109      	bne.n	8006d20 <atan+0x30>
 8006d0c:	b144      	cbz	r4, 8006d20 <atan+0x30>
 8006d0e:	4622      	mov	r2, r4
 8006d10:	462b      	mov	r3, r5
 8006d12:	4620      	mov	r0, r4
 8006d14:	4629      	mov	r1, r5
 8006d16:	f7f9 fac1 	bl	800029c <__adddf3>
 8006d1a:	4604      	mov	r4, r0
 8006d1c:	460d      	mov	r5, r1
 8006d1e:	e006      	b.n	8006d2e <atan+0x3e>
 8006d20:	f1bb 0f00 	cmp.w	fp, #0
 8006d24:	f300 8131 	bgt.w	8006f8a <atan+0x29a>
 8006d28:	a59b      	add	r5, pc, #620	; (adr r5, 8006f98 <atan+0x2a8>)
 8006d2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d2e:	ec45 4b10 	vmov	d0, r4, r5
 8006d32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d36:	4bb6      	ldr	r3, [pc, #728]	; (8007010 <atan+0x320>)
 8006d38:	429e      	cmp	r6, r3
 8006d3a:	dc14      	bgt.n	8006d66 <atan+0x76>
 8006d3c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006d40:	429e      	cmp	r6, r3
 8006d42:	dc0d      	bgt.n	8006d60 <atan+0x70>
 8006d44:	a396      	add	r3, pc, #600	; (adr r3, 8006fa0 <atan+0x2b0>)
 8006d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4a:	ee10 0a10 	vmov	r0, s0
 8006d4e:	4629      	mov	r1, r5
 8006d50:	f7f9 faa4 	bl	800029c <__adddf3>
 8006d54:	4baf      	ldr	r3, [pc, #700]	; (8007014 <atan+0x324>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	f7f9 fee6 	bl	8000b28 <__aeabi_dcmpgt>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	d1e6      	bne.n	8006d2e <atan+0x3e>
 8006d60:	f04f 3aff 	mov.w	sl, #4294967295
 8006d64:	e02b      	b.n	8006dbe <atan+0xce>
 8006d66:	f000 f963 	bl	8007030 <fabs>
 8006d6a:	4bab      	ldr	r3, [pc, #684]	; (8007018 <atan+0x328>)
 8006d6c:	429e      	cmp	r6, r3
 8006d6e:	ec55 4b10 	vmov	r4, r5, d0
 8006d72:	f300 80bf 	bgt.w	8006ef4 <atan+0x204>
 8006d76:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006d7a:	429e      	cmp	r6, r3
 8006d7c:	f300 80a0 	bgt.w	8006ec0 <atan+0x1d0>
 8006d80:	ee10 2a10 	vmov	r2, s0
 8006d84:	ee10 0a10 	vmov	r0, s0
 8006d88:	462b      	mov	r3, r5
 8006d8a:	4629      	mov	r1, r5
 8006d8c:	f7f9 fa86 	bl	800029c <__adddf3>
 8006d90:	4ba0      	ldr	r3, [pc, #640]	; (8007014 <atan+0x324>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	f7f9 fa80 	bl	8000298 <__aeabi_dsub>
 8006d98:	2200      	movs	r2, #0
 8006d9a:	4606      	mov	r6, r0
 8006d9c:	460f      	mov	r7, r1
 8006d9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006da2:	4620      	mov	r0, r4
 8006da4:	4629      	mov	r1, r5
 8006da6:	f7f9 fa79 	bl	800029c <__adddf3>
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4630      	mov	r0, r6
 8006db0:	4639      	mov	r1, r7
 8006db2:	f7f9 fd53 	bl	800085c <__aeabi_ddiv>
 8006db6:	f04f 0a00 	mov.w	sl, #0
 8006dba:	4604      	mov	r4, r0
 8006dbc:	460d      	mov	r5, r1
 8006dbe:	4622      	mov	r2, r4
 8006dc0:	462b      	mov	r3, r5
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	4629      	mov	r1, r5
 8006dc6:	f7f9 fc1f 	bl	8000608 <__aeabi_dmul>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4680      	mov	r8, r0
 8006dd0:	4689      	mov	r9, r1
 8006dd2:	f7f9 fc19 	bl	8000608 <__aeabi_dmul>
 8006dd6:	a374      	add	r3, pc, #464	; (adr r3, 8006fa8 <atan+0x2b8>)
 8006dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ddc:	4606      	mov	r6, r0
 8006dde:	460f      	mov	r7, r1
 8006de0:	f7f9 fc12 	bl	8000608 <__aeabi_dmul>
 8006de4:	a372      	add	r3, pc, #456	; (adr r3, 8006fb0 <atan+0x2c0>)
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	f7f9 fa57 	bl	800029c <__adddf3>
 8006dee:	4632      	mov	r2, r6
 8006df0:	463b      	mov	r3, r7
 8006df2:	f7f9 fc09 	bl	8000608 <__aeabi_dmul>
 8006df6:	a370      	add	r3, pc, #448	; (adr r3, 8006fb8 <atan+0x2c8>)
 8006df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfc:	f7f9 fa4e 	bl	800029c <__adddf3>
 8006e00:	4632      	mov	r2, r6
 8006e02:	463b      	mov	r3, r7
 8006e04:	f7f9 fc00 	bl	8000608 <__aeabi_dmul>
 8006e08:	a36d      	add	r3, pc, #436	; (adr r3, 8006fc0 <atan+0x2d0>)
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	f7f9 fa45 	bl	800029c <__adddf3>
 8006e12:	4632      	mov	r2, r6
 8006e14:	463b      	mov	r3, r7
 8006e16:	f7f9 fbf7 	bl	8000608 <__aeabi_dmul>
 8006e1a:	a36b      	add	r3, pc, #428	; (adr r3, 8006fc8 <atan+0x2d8>)
 8006e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e20:	f7f9 fa3c 	bl	800029c <__adddf3>
 8006e24:	4632      	mov	r2, r6
 8006e26:	463b      	mov	r3, r7
 8006e28:	f7f9 fbee 	bl	8000608 <__aeabi_dmul>
 8006e2c:	a368      	add	r3, pc, #416	; (adr r3, 8006fd0 <atan+0x2e0>)
 8006e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e32:	f7f9 fa33 	bl	800029c <__adddf3>
 8006e36:	4642      	mov	r2, r8
 8006e38:	464b      	mov	r3, r9
 8006e3a:	f7f9 fbe5 	bl	8000608 <__aeabi_dmul>
 8006e3e:	a366      	add	r3, pc, #408	; (adr r3, 8006fd8 <atan+0x2e8>)
 8006e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e44:	4680      	mov	r8, r0
 8006e46:	4689      	mov	r9, r1
 8006e48:	4630      	mov	r0, r6
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	f7f9 fbdc 	bl	8000608 <__aeabi_dmul>
 8006e50:	a363      	add	r3, pc, #396	; (adr r3, 8006fe0 <atan+0x2f0>)
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	f7f9 fa1f 	bl	8000298 <__aeabi_dsub>
 8006e5a:	4632      	mov	r2, r6
 8006e5c:	463b      	mov	r3, r7
 8006e5e:	f7f9 fbd3 	bl	8000608 <__aeabi_dmul>
 8006e62:	a361      	add	r3, pc, #388	; (adr r3, 8006fe8 <atan+0x2f8>)
 8006e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e68:	f7f9 fa16 	bl	8000298 <__aeabi_dsub>
 8006e6c:	4632      	mov	r2, r6
 8006e6e:	463b      	mov	r3, r7
 8006e70:	f7f9 fbca 	bl	8000608 <__aeabi_dmul>
 8006e74:	a35e      	add	r3, pc, #376	; (adr r3, 8006ff0 <atan+0x300>)
 8006e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7a:	f7f9 fa0d 	bl	8000298 <__aeabi_dsub>
 8006e7e:	4632      	mov	r2, r6
 8006e80:	463b      	mov	r3, r7
 8006e82:	f7f9 fbc1 	bl	8000608 <__aeabi_dmul>
 8006e86:	a35c      	add	r3, pc, #368	; (adr r3, 8006ff8 <atan+0x308>)
 8006e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8c:	f7f9 fa04 	bl	8000298 <__aeabi_dsub>
 8006e90:	4632      	mov	r2, r6
 8006e92:	463b      	mov	r3, r7
 8006e94:	f7f9 fbb8 	bl	8000608 <__aeabi_dmul>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4640      	mov	r0, r8
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	f7f9 f9fc 	bl	800029c <__adddf3>
 8006ea4:	4622      	mov	r2, r4
 8006ea6:	462b      	mov	r3, r5
 8006ea8:	f7f9 fbae 	bl	8000608 <__aeabi_dmul>
 8006eac:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	d14b      	bne.n	8006f4e <atan+0x25e>
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	4629      	mov	r1, r5
 8006eba:	f7f9 f9ed 	bl	8000298 <__aeabi_dsub>
 8006ebe:	e72c      	b.n	8006d1a <atan+0x2a>
 8006ec0:	ee10 0a10 	vmov	r0, s0
 8006ec4:	4b53      	ldr	r3, [pc, #332]	; (8007014 <atan+0x324>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	4629      	mov	r1, r5
 8006eca:	f7f9 f9e5 	bl	8000298 <__aeabi_dsub>
 8006ece:	4b51      	ldr	r3, [pc, #324]	; (8007014 <atan+0x324>)
 8006ed0:	4606      	mov	r6, r0
 8006ed2:	460f      	mov	r7, r1
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	4629      	mov	r1, r5
 8006eda:	f7f9 f9df 	bl	800029c <__adddf3>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	4639      	mov	r1, r7
 8006ee6:	f7f9 fcb9 	bl	800085c <__aeabi_ddiv>
 8006eea:	f04f 0a01 	mov.w	sl, #1
 8006eee:	4604      	mov	r4, r0
 8006ef0:	460d      	mov	r5, r1
 8006ef2:	e764      	b.n	8006dbe <atan+0xce>
 8006ef4:	4b49      	ldr	r3, [pc, #292]	; (800701c <atan+0x32c>)
 8006ef6:	429e      	cmp	r6, r3
 8006ef8:	da1d      	bge.n	8006f36 <atan+0x246>
 8006efa:	ee10 0a10 	vmov	r0, s0
 8006efe:	4b48      	ldr	r3, [pc, #288]	; (8007020 <atan+0x330>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	4629      	mov	r1, r5
 8006f04:	f7f9 f9c8 	bl	8000298 <__aeabi_dsub>
 8006f08:	4b45      	ldr	r3, [pc, #276]	; (8007020 <atan+0x330>)
 8006f0a:	4606      	mov	r6, r0
 8006f0c:	460f      	mov	r7, r1
 8006f0e:	2200      	movs	r2, #0
 8006f10:	4620      	mov	r0, r4
 8006f12:	4629      	mov	r1, r5
 8006f14:	f7f9 fb78 	bl	8000608 <__aeabi_dmul>
 8006f18:	4b3e      	ldr	r3, [pc, #248]	; (8007014 <atan+0x324>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f7f9 f9be 	bl	800029c <__adddf3>
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	4630      	mov	r0, r6
 8006f26:	4639      	mov	r1, r7
 8006f28:	f7f9 fc98 	bl	800085c <__aeabi_ddiv>
 8006f2c:	f04f 0a02 	mov.w	sl, #2
 8006f30:	4604      	mov	r4, r0
 8006f32:	460d      	mov	r5, r1
 8006f34:	e743      	b.n	8006dbe <atan+0xce>
 8006f36:	462b      	mov	r3, r5
 8006f38:	ee10 2a10 	vmov	r2, s0
 8006f3c:	4939      	ldr	r1, [pc, #228]	; (8007024 <atan+0x334>)
 8006f3e:	2000      	movs	r0, #0
 8006f40:	f7f9 fc8c 	bl	800085c <__aeabi_ddiv>
 8006f44:	f04f 0a03 	mov.w	sl, #3
 8006f48:	4604      	mov	r4, r0
 8006f4a:	460d      	mov	r5, r1
 8006f4c:	e737      	b.n	8006dbe <atan+0xce>
 8006f4e:	4b36      	ldr	r3, [pc, #216]	; (8007028 <atan+0x338>)
 8006f50:	4e36      	ldr	r6, [pc, #216]	; (800702c <atan+0x33c>)
 8006f52:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5a:	f7f9 f99d 	bl	8000298 <__aeabi_dsub>
 8006f5e:	4622      	mov	r2, r4
 8006f60:	462b      	mov	r3, r5
 8006f62:	f7f9 f999 	bl	8000298 <__aeabi_dsub>
 8006f66:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006f72:	f7f9 f991 	bl	8000298 <__aeabi_dsub>
 8006f76:	f1bb 0f00 	cmp.w	fp, #0
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	460d      	mov	r5, r1
 8006f7e:	f6bf aed6 	bge.w	8006d2e <atan+0x3e>
 8006f82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f86:	461d      	mov	r5, r3
 8006f88:	e6d1      	b.n	8006d2e <atan+0x3e>
 8006f8a:	a51d      	add	r5, pc, #116	; (adr r5, 8007000 <atan+0x310>)
 8006f8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f90:	e6cd      	b.n	8006d2e <atan+0x3e>
 8006f92:	bf00      	nop
 8006f94:	f3af 8000 	nop.w
 8006f98:	54442d18 	.word	0x54442d18
 8006f9c:	bff921fb 	.word	0xbff921fb
 8006fa0:	8800759c 	.word	0x8800759c
 8006fa4:	7e37e43c 	.word	0x7e37e43c
 8006fa8:	e322da11 	.word	0xe322da11
 8006fac:	3f90ad3a 	.word	0x3f90ad3a
 8006fb0:	24760deb 	.word	0x24760deb
 8006fb4:	3fa97b4b 	.word	0x3fa97b4b
 8006fb8:	a0d03d51 	.word	0xa0d03d51
 8006fbc:	3fb10d66 	.word	0x3fb10d66
 8006fc0:	c54c206e 	.word	0xc54c206e
 8006fc4:	3fb745cd 	.word	0x3fb745cd
 8006fc8:	920083ff 	.word	0x920083ff
 8006fcc:	3fc24924 	.word	0x3fc24924
 8006fd0:	5555550d 	.word	0x5555550d
 8006fd4:	3fd55555 	.word	0x3fd55555
 8006fd8:	2c6a6c2f 	.word	0x2c6a6c2f
 8006fdc:	bfa2b444 	.word	0xbfa2b444
 8006fe0:	52defd9a 	.word	0x52defd9a
 8006fe4:	3fadde2d 	.word	0x3fadde2d
 8006fe8:	af749a6d 	.word	0xaf749a6d
 8006fec:	3fb3b0f2 	.word	0x3fb3b0f2
 8006ff0:	fe231671 	.word	0xfe231671
 8006ff4:	3fbc71c6 	.word	0x3fbc71c6
 8006ff8:	9998ebc4 	.word	0x9998ebc4
 8006ffc:	3fc99999 	.word	0x3fc99999
 8007000:	54442d18 	.word	0x54442d18
 8007004:	3ff921fb 	.word	0x3ff921fb
 8007008:	440fffff 	.word	0x440fffff
 800700c:	7ff00000 	.word	0x7ff00000
 8007010:	3fdbffff 	.word	0x3fdbffff
 8007014:	3ff00000 	.word	0x3ff00000
 8007018:	3ff2ffff 	.word	0x3ff2ffff
 800701c:	40038000 	.word	0x40038000
 8007020:	3ff80000 	.word	0x3ff80000
 8007024:	bff00000 	.word	0xbff00000
 8007028:	08008198 	.word	0x08008198
 800702c:	08008178 	.word	0x08008178

08007030 <fabs>:
 8007030:	ec51 0b10 	vmov	r0, r1, d0
 8007034:	ee10 2a10 	vmov	r2, s0
 8007038:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800703c:	ec43 2b10 	vmov	d0, r2, r3
 8007040:	4770      	bx	lr

08007042 <finite>:
 8007042:	b082      	sub	sp, #8
 8007044:	ed8d 0b00 	vstr	d0, [sp]
 8007048:	9801      	ldr	r0, [sp, #4]
 800704a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800704e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007052:	0fc0      	lsrs	r0, r0, #31
 8007054:	b002      	add	sp, #8
 8007056:	4770      	bx	lr

08007058 <__ieee754_atan2>:
 8007058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800705c:	ec57 6b11 	vmov	r6, r7, d1
 8007060:	4273      	negs	r3, r6
 8007062:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80071e0 <__ieee754_atan2+0x188>
 8007066:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800706a:	4333      	orrs	r3, r6
 800706c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007070:	4543      	cmp	r3, r8
 8007072:	ec51 0b10 	vmov	r0, r1, d0
 8007076:	ee11 5a10 	vmov	r5, s2
 800707a:	d80a      	bhi.n	8007092 <__ieee754_atan2+0x3a>
 800707c:	4244      	negs	r4, r0
 800707e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007082:	4304      	orrs	r4, r0
 8007084:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007088:	4544      	cmp	r4, r8
 800708a:	ee10 9a10 	vmov	r9, s0
 800708e:	468e      	mov	lr, r1
 8007090:	d907      	bls.n	80070a2 <__ieee754_atan2+0x4a>
 8007092:	4632      	mov	r2, r6
 8007094:	463b      	mov	r3, r7
 8007096:	f7f9 f901 	bl	800029c <__adddf3>
 800709a:	ec41 0b10 	vmov	d0, r0, r1
 800709e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070a2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80070a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80070aa:	4334      	orrs	r4, r6
 80070ac:	d103      	bne.n	80070b6 <__ieee754_atan2+0x5e>
 80070ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070b2:	f7ff be1d 	b.w	8006cf0 <atan>
 80070b6:	17bc      	asrs	r4, r7, #30
 80070b8:	f004 0402 	and.w	r4, r4, #2
 80070bc:	ea53 0909 	orrs.w	r9, r3, r9
 80070c0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80070c4:	d107      	bne.n	80070d6 <__ieee754_atan2+0x7e>
 80070c6:	2c02      	cmp	r4, #2
 80070c8:	d05f      	beq.n	800718a <__ieee754_atan2+0x132>
 80070ca:	2c03      	cmp	r4, #3
 80070cc:	d1e5      	bne.n	800709a <__ieee754_atan2+0x42>
 80070ce:	a140      	add	r1, pc, #256	; (adr r1, 80071d0 <__ieee754_atan2+0x178>)
 80070d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070d4:	e7e1      	b.n	800709a <__ieee754_atan2+0x42>
 80070d6:	4315      	orrs	r5, r2
 80070d8:	d106      	bne.n	80070e8 <__ieee754_atan2+0x90>
 80070da:	f1be 0f00 	cmp.w	lr, #0
 80070de:	da5f      	bge.n	80071a0 <__ieee754_atan2+0x148>
 80070e0:	a13d      	add	r1, pc, #244	; (adr r1, 80071d8 <__ieee754_atan2+0x180>)
 80070e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070e6:	e7d8      	b.n	800709a <__ieee754_atan2+0x42>
 80070e8:	4542      	cmp	r2, r8
 80070ea:	d10f      	bne.n	800710c <__ieee754_atan2+0xb4>
 80070ec:	4293      	cmp	r3, r2
 80070ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80070f2:	d107      	bne.n	8007104 <__ieee754_atan2+0xac>
 80070f4:	2c02      	cmp	r4, #2
 80070f6:	d84c      	bhi.n	8007192 <__ieee754_atan2+0x13a>
 80070f8:	4b33      	ldr	r3, [pc, #204]	; (80071c8 <__ieee754_atan2+0x170>)
 80070fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007102:	e7ca      	b.n	800709a <__ieee754_atan2+0x42>
 8007104:	2c02      	cmp	r4, #2
 8007106:	d848      	bhi.n	800719a <__ieee754_atan2+0x142>
 8007108:	4b30      	ldr	r3, [pc, #192]	; (80071cc <__ieee754_atan2+0x174>)
 800710a:	e7f6      	b.n	80070fa <__ieee754_atan2+0xa2>
 800710c:	4543      	cmp	r3, r8
 800710e:	d0e4      	beq.n	80070da <__ieee754_atan2+0x82>
 8007110:	1a9b      	subs	r3, r3, r2
 8007112:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007116:	ea4f 5223 	mov.w	r2, r3, asr #20
 800711a:	da1e      	bge.n	800715a <__ieee754_atan2+0x102>
 800711c:	2f00      	cmp	r7, #0
 800711e:	da01      	bge.n	8007124 <__ieee754_atan2+0xcc>
 8007120:	323c      	adds	r2, #60	; 0x3c
 8007122:	db1e      	blt.n	8007162 <__ieee754_atan2+0x10a>
 8007124:	4632      	mov	r2, r6
 8007126:	463b      	mov	r3, r7
 8007128:	f7f9 fb98 	bl	800085c <__aeabi_ddiv>
 800712c:	ec41 0b10 	vmov	d0, r0, r1
 8007130:	f7ff ff7e 	bl	8007030 <fabs>
 8007134:	f7ff fddc 	bl	8006cf0 <atan>
 8007138:	ec51 0b10 	vmov	r0, r1, d0
 800713c:	2c01      	cmp	r4, #1
 800713e:	d013      	beq.n	8007168 <__ieee754_atan2+0x110>
 8007140:	2c02      	cmp	r4, #2
 8007142:	d015      	beq.n	8007170 <__ieee754_atan2+0x118>
 8007144:	2c00      	cmp	r4, #0
 8007146:	d0a8      	beq.n	800709a <__ieee754_atan2+0x42>
 8007148:	a317      	add	r3, pc, #92	; (adr r3, 80071a8 <__ieee754_atan2+0x150>)
 800714a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714e:	f7f9 f8a3 	bl	8000298 <__aeabi_dsub>
 8007152:	a317      	add	r3, pc, #92	; (adr r3, 80071b0 <__ieee754_atan2+0x158>)
 8007154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007158:	e014      	b.n	8007184 <__ieee754_atan2+0x12c>
 800715a:	a117      	add	r1, pc, #92	; (adr r1, 80071b8 <__ieee754_atan2+0x160>)
 800715c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007160:	e7ec      	b.n	800713c <__ieee754_atan2+0xe4>
 8007162:	2000      	movs	r0, #0
 8007164:	2100      	movs	r1, #0
 8007166:	e7e9      	b.n	800713c <__ieee754_atan2+0xe4>
 8007168:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800716c:	4619      	mov	r1, r3
 800716e:	e794      	b.n	800709a <__ieee754_atan2+0x42>
 8007170:	a30d      	add	r3, pc, #52	; (adr r3, 80071a8 <__ieee754_atan2+0x150>)
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007176:	f7f9 f88f 	bl	8000298 <__aeabi_dsub>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	a10c      	add	r1, pc, #48	; (adr r1, 80071b0 <__ieee754_atan2+0x158>)
 8007180:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007184:	f7f9 f888 	bl	8000298 <__aeabi_dsub>
 8007188:	e787      	b.n	800709a <__ieee754_atan2+0x42>
 800718a:	a109      	add	r1, pc, #36	; (adr r1, 80071b0 <__ieee754_atan2+0x158>)
 800718c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007190:	e783      	b.n	800709a <__ieee754_atan2+0x42>
 8007192:	a10b      	add	r1, pc, #44	; (adr r1, 80071c0 <__ieee754_atan2+0x168>)
 8007194:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007198:	e77f      	b.n	800709a <__ieee754_atan2+0x42>
 800719a:	2000      	movs	r0, #0
 800719c:	2100      	movs	r1, #0
 800719e:	e77c      	b.n	800709a <__ieee754_atan2+0x42>
 80071a0:	a105      	add	r1, pc, #20	; (adr r1, 80071b8 <__ieee754_atan2+0x160>)
 80071a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071a6:	e778      	b.n	800709a <__ieee754_atan2+0x42>
 80071a8:	33145c07 	.word	0x33145c07
 80071ac:	3ca1a626 	.word	0x3ca1a626
 80071b0:	54442d18 	.word	0x54442d18
 80071b4:	400921fb 	.word	0x400921fb
 80071b8:	54442d18 	.word	0x54442d18
 80071bc:	3ff921fb 	.word	0x3ff921fb
 80071c0:	54442d18 	.word	0x54442d18
 80071c4:	3fe921fb 	.word	0x3fe921fb
 80071c8:	080081b8 	.word	0x080081b8
 80071cc:	080081d0 	.word	0x080081d0
 80071d0:	54442d18 	.word	0x54442d18
 80071d4:	c00921fb 	.word	0xc00921fb
 80071d8:	54442d18 	.word	0x54442d18
 80071dc:	bff921fb 	.word	0xbff921fb
 80071e0:	7ff00000 	.word	0x7ff00000
 80071e4:	00000000 	.word	0x00000000

080071e8 <__ieee754_pow>:
 80071e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ec:	ed2d 8b06 	vpush	{d8-d10}
 80071f0:	b089      	sub	sp, #36	; 0x24
 80071f2:	ed8d 1b00 	vstr	d1, [sp]
 80071f6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80071fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80071fe:	ea58 0102 	orrs.w	r1, r8, r2
 8007202:	ec57 6b10 	vmov	r6, r7, d0
 8007206:	d115      	bne.n	8007234 <__ieee754_pow+0x4c>
 8007208:	19b3      	adds	r3, r6, r6
 800720a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800720e:	4152      	adcs	r2, r2
 8007210:	4299      	cmp	r1, r3
 8007212:	4b89      	ldr	r3, [pc, #548]	; (8007438 <__ieee754_pow+0x250>)
 8007214:	4193      	sbcs	r3, r2
 8007216:	f080 84d1 	bcs.w	8007bbc <__ieee754_pow+0x9d4>
 800721a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800721e:	4630      	mov	r0, r6
 8007220:	4639      	mov	r1, r7
 8007222:	f7f9 f83b 	bl	800029c <__adddf3>
 8007226:	ec41 0b10 	vmov	d0, r0, r1
 800722a:	b009      	add	sp, #36	; 0x24
 800722c:	ecbd 8b06 	vpop	{d8-d10}
 8007230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007234:	4b81      	ldr	r3, [pc, #516]	; (800743c <__ieee754_pow+0x254>)
 8007236:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800723a:	429c      	cmp	r4, r3
 800723c:	ee10 aa10 	vmov	sl, s0
 8007240:	463d      	mov	r5, r7
 8007242:	dc06      	bgt.n	8007252 <__ieee754_pow+0x6a>
 8007244:	d101      	bne.n	800724a <__ieee754_pow+0x62>
 8007246:	2e00      	cmp	r6, #0
 8007248:	d1e7      	bne.n	800721a <__ieee754_pow+0x32>
 800724a:	4598      	cmp	r8, r3
 800724c:	dc01      	bgt.n	8007252 <__ieee754_pow+0x6a>
 800724e:	d10f      	bne.n	8007270 <__ieee754_pow+0x88>
 8007250:	b172      	cbz	r2, 8007270 <__ieee754_pow+0x88>
 8007252:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007256:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800725a:	ea55 050a 	orrs.w	r5, r5, sl
 800725e:	d1dc      	bne.n	800721a <__ieee754_pow+0x32>
 8007260:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007264:	18db      	adds	r3, r3, r3
 8007266:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800726a:	4152      	adcs	r2, r2
 800726c:	429d      	cmp	r5, r3
 800726e:	e7d0      	b.n	8007212 <__ieee754_pow+0x2a>
 8007270:	2d00      	cmp	r5, #0
 8007272:	da3b      	bge.n	80072ec <__ieee754_pow+0x104>
 8007274:	4b72      	ldr	r3, [pc, #456]	; (8007440 <__ieee754_pow+0x258>)
 8007276:	4598      	cmp	r8, r3
 8007278:	dc51      	bgt.n	800731e <__ieee754_pow+0x136>
 800727a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800727e:	4598      	cmp	r8, r3
 8007280:	f340 84ab 	ble.w	8007bda <__ieee754_pow+0x9f2>
 8007284:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007288:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800728c:	2b14      	cmp	r3, #20
 800728e:	dd0f      	ble.n	80072b0 <__ieee754_pow+0xc8>
 8007290:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007294:	fa22 f103 	lsr.w	r1, r2, r3
 8007298:	fa01 f303 	lsl.w	r3, r1, r3
 800729c:	4293      	cmp	r3, r2
 800729e:	f040 849c 	bne.w	8007bda <__ieee754_pow+0x9f2>
 80072a2:	f001 0101 	and.w	r1, r1, #1
 80072a6:	f1c1 0302 	rsb	r3, r1, #2
 80072aa:	9304      	str	r3, [sp, #16]
 80072ac:	b182      	cbz	r2, 80072d0 <__ieee754_pow+0xe8>
 80072ae:	e05f      	b.n	8007370 <__ieee754_pow+0x188>
 80072b0:	2a00      	cmp	r2, #0
 80072b2:	d15b      	bne.n	800736c <__ieee754_pow+0x184>
 80072b4:	f1c3 0314 	rsb	r3, r3, #20
 80072b8:	fa48 f103 	asr.w	r1, r8, r3
 80072bc:	fa01 f303 	lsl.w	r3, r1, r3
 80072c0:	4543      	cmp	r3, r8
 80072c2:	f040 8487 	bne.w	8007bd4 <__ieee754_pow+0x9ec>
 80072c6:	f001 0101 	and.w	r1, r1, #1
 80072ca:	f1c1 0302 	rsb	r3, r1, #2
 80072ce:	9304      	str	r3, [sp, #16]
 80072d0:	4b5c      	ldr	r3, [pc, #368]	; (8007444 <__ieee754_pow+0x25c>)
 80072d2:	4598      	cmp	r8, r3
 80072d4:	d132      	bne.n	800733c <__ieee754_pow+0x154>
 80072d6:	f1b9 0f00 	cmp.w	r9, #0
 80072da:	f280 8477 	bge.w	8007bcc <__ieee754_pow+0x9e4>
 80072de:	4959      	ldr	r1, [pc, #356]	; (8007444 <__ieee754_pow+0x25c>)
 80072e0:	4632      	mov	r2, r6
 80072e2:	463b      	mov	r3, r7
 80072e4:	2000      	movs	r0, #0
 80072e6:	f7f9 fab9 	bl	800085c <__aeabi_ddiv>
 80072ea:	e79c      	b.n	8007226 <__ieee754_pow+0x3e>
 80072ec:	2300      	movs	r3, #0
 80072ee:	9304      	str	r3, [sp, #16]
 80072f0:	2a00      	cmp	r2, #0
 80072f2:	d13d      	bne.n	8007370 <__ieee754_pow+0x188>
 80072f4:	4b51      	ldr	r3, [pc, #324]	; (800743c <__ieee754_pow+0x254>)
 80072f6:	4598      	cmp	r8, r3
 80072f8:	d1ea      	bne.n	80072d0 <__ieee754_pow+0xe8>
 80072fa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80072fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007302:	ea53 030a 	orrs.w	r3, r3, sl
 8007306:	f000 8459 	beq.w	8007bbc <__ieee754_pow+0x9d4>
 800730a:	4b4f      	ldr	r3, [pc, #316]	; (8007448 <__ieee754_pow+0x260>)
 800730c:	429c      	cmp	r4, r3
 800730e:	dd08      	ble.n	8007322 <__ieee754_pow+0x13a>
 8007310:	f1b9 0f00 	cmp.w	r9, #0
 8007314:	f2c0 8456 	blt.w	8007bc4 <__ieee754_pow+0x9dc>
 8007318:	e9dd 0100 	ldrd	r0, r1, [sp]
 800731c:	e783      	b.n	8007226 <__ieee754_pow+0x3e>
 800731e:	2302      	movs	r3, #2
 8007320:	e7e5      	b.n	80072ee <__ieee754_pow+0x106>
 8007322:	f1b9 0f00 	cmp.w	r9, #0
 8007326:	f04f 0000 	mov.w	r0, #0
 800732a:	f04f 0100 	mov.w	r1, #0
 800732e:	f6bf af7a 	bge.w	8007226 <__ieee754_pow+0x3e>
 8007332:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007336:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800733a:	e774      	b.n	8007226 <__ieee754_pow+0x3e>
 800733c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007340:	d106      	bne.n	8007350 <__ieee754_pow+0x168>
 8007342:	4632      	mov	r2, r6
 8007344:	463b      	mov	r3, r7
 8007346:	4630      	mov	r0, r6
 8007348:	4639      	mov	r1, r7
 800734a:	f7f9 f95d 	bl	8000608 <__aeabi_dmul>
 800734e:	e76a      	b.n	8007226 <__ieee754_pow+0x3e>
 8007350:	4b3e      	ldr	r3, [pc, #248]	; (800744c <__ieee754_pow+0x264>)
 8007352:	4599      	cmp	r9, r3
 8007354:	d10c      	bne.n	8007370 <__ieee754_pow+0x188>
 8007356:	2d00      	cmp	r5, #0
 8007358:	db0a      	blt.n	8007370 <__ieee754_pow+0x188>
 800735a:	ec47 6b10 	vmov	d0, r6, r7
 800735e:	b009      	add	sp, #36	; 0x24
 8007360:	ecbd 8b06 	vpop	{d8-d10}
 8007364:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007368:	f000 bd18 	b.w	8007d9c <__ieee754_sqrt>
 800736c:	2300      	movs	r3, #0
 800736e:	9304      	str	r3, [sp, #16]
 8007370:	ec47 6b10 	vmov	d0, r6, r7
 8007374:	f7ff fe5c 	bl	8007030 <fabs>
 8007378:	ec51 0b10 	vmov	r0, r1, d0
 800737c:	f1ba 0f00 	cmp.w	sl, #0
 8007380:	d129      	bne.n	80073d6 <__ieee754_pow+0x1ee>
 8007382:	b124      	cbz	r4, 800738e <__ieee754_pow+0x1a6>
 8007384:	4b2f      	ldr	r3, [pc, #188]	; (8007444 <__ieee754_pow+0x25c>)
 8007386:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800738a:	429a      	cmp	r2, r3
 800738c:	d123      	bne.n	80073d6 <__ieee754_pow+0x1ee>
 800738e:	f1b9 0f00 	cmp.w	r9, #0
 8007392:	da05      	bge.n	80073a0 <__ieee754_pow+0x1b8>
 8007394:	4602      	mov	r2, r0
 8007396:	460b      	mov	r3, r1
 8007398:	2000      	movs	r0, #0
 800739a:	492a      	ldr	r1, [pc, #168]	; (8007444 <__ieee754_pow+0x25c>)
 800739c:	f7f9 fa5e 	bl	800085c <__aeabi_ddiv>
 80073a0:	2d00      	cmp	r5, #0
 80073a2:	f6bf af40 	bge.w	8007226 <__ieee754_pow+0x3e>
 80073a6:	9b04      	ldr	r3, [sp, #16]
 80073a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80073ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80073b0:	431c      	orrs	r4, r3
 80073b2:	d108      	bne.n	80073c6 <__ieee754_pow+0x1de>
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	4610      	mov	r0, r2
 80073ba:	4619      	mov	r1, r3
 80073bc:	f7f8 ff6c 	bl	8000298 <__aeabi_dsub>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	e78f      	b.n	80072e6 <__ieee754_pow+0xfe>
 80073c6:	9b04      	ldr	r3, [sp, #16]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	f47f af2c 	bne.w	8007226 <__ieee754_pow+0x3e>
 80073ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073d2:	4619      	mov	r1, r3
 80073d4:	e727      	b.n	8007226 <__ieee754_pow+0x3e>
 80073d6:	0feb      	lsrs	r3, r5, #31
 80073d8:	3b01      	subs	r3, #1
 80073da:	9306      	str	r3, [sp, #24]
 80073dc:	9a06      	ldr	r2, [sp, #24]
 80073de:	9b04      	ldr	r3, [sp, #16]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	d102      	bne.n	80073ea <__ieee754_pow+0x202>
 80073e4:	4632      	mov	r2, r6
 80073e6:	463b      	mov	r3, r7
 80073e8:	e7e6      	b.n	80073b8 <__ieee754_pow+0x1d0>
 80073ea:	4b19      	ldr	r3, [pc, #100]	; (8007450 <__ieee754_pow+0x268>)
 80073ec:	4598      	cmp	r8, r3
 80073ee:	f340 80fb 	ble.w	80075e8 <__ieee754_pow+0x400>
 80073f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80073f6:	4598      	cmp	r8, r3
 80073f8:	4b13      	ldr	r3, [pc, #76]	; (8007448 <__ieee754_pow+0x260>)
 80073fa:	dd0c      	ble.n	8007416 <__ieee754_pow+0x22e>
 80073fc:	429c      	cmp	r4, r3
 80073fe:	dc0f      	bgt.n	8007420 <__ieee754_pow+0x238>
 8007400:	f1b9 0f00 	cmp.w	r9, #0
 8007404:	da0f      	bge.n	8007426 <__ieee754_pow+0x23e>
 8007406:	2000      	movs	r0, #0
 8007408:	b009      	add	sp, #36	; 0x24
 800740a:	ecbd 8b06 	vpop	{d8-d10}
 800740e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007412:	f000 bcba 	b.w	8007d8a <__math_oflow>
 8007416:	429c      	cmp	r4, r3
 8007418:	dbf2      	blt.n	8007400 <__ieee754_pow+0x218>
 800741a:	4b0a      	ldr	r3, [pc, #40]	; (8007444 <__ieee754_pow+0x25c>)
 800741c:	429c      	cmp	r4, r3
 800741e:	dd19      	ble.n	8007454 <__ieee754_pow+0x26c>
 8007420:	f1b9 0f00 	cmp.w	r9, #0
 8007424:	dcef      	bgt.n	8007406 <__ieee754_pow+0x21e>
 8007426:	2000      	movs	r0, #0
 8007428:	b009      	add	sp, #36	; 0x24
 800742a:	ecbd 8b06 	vpop	{d8-d10}
 800742e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007432:	f000 bca1 	b.w	8007d78 <__math_uflow>
 8007436:	bf00      	nop
 8007438:	fff00000 	.word	0xfff00000
 800743c:	7ff00000 	.word	0x7ff00000
 8007440:	433fffff 	.word	0x433fffff
 8007444:	3ff00000 	.word	0x3ff00000
 8007448:	3fefffff 	.word	0x3fefffff
 800744c:	3fe00000 	.word	0x3fe00000
 8007450:	41e00000 	.word	0x41e00000
 8007454:	4b60      	ldr	r3, [pc, #384]	; (80075d8 <__ieee754_pow+0x3f0>)
 8007456:	2200      	movs	r2, #0
 8007458:	f7f8 ff1e 	bl	8000298 <__aeabi_dsub>
 800745c:	a354      	add	r3, pc, #336	; (adr r3, 80075b0 <__ieee754_pow+0x3c8>)
 800745e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007462:	4604      	mov	r4, r0
 8007464:	460d      	mov	r5, r1
 8007466:	f7f9 f8cf 	bl	8000608 <__aeabi_dmul>
 800746a:	a353      	add	r3, pc, #332	; (adr r3, 80075b8 <__ieee754_pow+0x3d0>)
 800746c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007470:	4606      	mov	r6, r0
 8007472:	460f      	mov	r7, r1
 8007474:	4620      	mov	r0, r4
 8007476:	4629      	mov	r1, r5
 8007478:	f7f9 f8c6 	bl	8000608 <__aeabi_dmul>
 800747c:	4b57      	ldr	r3, [pc, #348]	; (80075dc <__ieee754_pow+0x3f4>)
 800747e:	4682      	mov	sl, r0
 8007480:	468b      	mov	fp, r1
 8007482:	2200      	movs	r2, #0
 8007484:	4620      	mov	r0, r4
 8007486:	4629      	mov	r1, r5
 8007488:	f7f9 f8be 	bl	8000608 <__aeabi_dmul>
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	a14b      	add	r1, pc, #300	; (adr r1, 80075c0 <__ieee754_pow+0x3d8>)
 8007492:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007496:	f7f8 feff 	bl	8000298 <__aeabi_dsub>
 800749a:	4622      	mov	r2, r4
 800749c:	462b      	mov	r3, r5
 800749e:	f7f9 f8b3 	bl	8000608 <__aeabi_dmul>
 80074a2:	4602      	mov	r2, r0
 80074a4:	460b      	mov	r3, r1
 80074a6:	2000      	movs	r0, #0
 80074a8:	494d      	ldr	r1, [pc, #308]	; (80075e0 <__ieee754_pow+0x3f8>)
 80074aa:	f7f8 fef5 	bl	8000298 <__aeabi_dsub>
 80074ae:	4622      	mov	r2, r4
 80074b0:	4680      	mov	r8, r0
 80074b2:	4689      	mov	r9, r1
 80074b4:	462b      	mov	r3, r5
 80074b6:	4620      	mov	r0, r4
 80074b8:	4629      	mov	r1, r5
 80074ba:	f7f9 f8a5 	bl	8000608 <__aeabi_dmul>
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	4640      	mov	r0, r8
 80074c4:	4649      	mov	r1, r9
 80074c6:	f7f9 f89f 	bl	8000608 <__aeabi_dmul>
 80074ca:	a33f      	add	r3, pc, #252	; (adr r3, 80075c8 <__ieee754_pow+0x3e0>)
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	f7f9 f89a 	bl	8000608 <__aeabi_dmul>
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	4650      	mov	r0, sl
 80074da:	4659      	mov	r1, fp
 80074dc:	f7f8 fedc 	bl	8000298 <__aeabi_dsub>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	4680      	mov	r8, r0
 80074e6:	4689      	mov	r9, r1
 80074e8:	4630      	mov	r0, r6
 80074ea:	4639      	mov	r1, r7
 80074ec:	f7f8 fed6 	bl	800029c <__adddf3>
 80074f0:	2000      	movs	r0, #0
 80074f2:	4632      	mov	r2, r6
 80074f4:	463b      	mov	r3, r7
 80074f6:	4604      	mov	r4, r0
 80074f8:	460d      	mov	r5, r1
 80074fa:	f7f8 fecd 	bl	8000298 <__aeabi_dsub>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	4640      	mov	r0, r8
 8007504:	4649      	mov	r1, r9
 8007506:	f7f8 fec7 	bl	8000298 <__aeabi_dsub>
 800750a:	9b04      	ldr	r3, [sp, #16]
 800750c:	9a06      	ldr	r2, [sp, #24]
 800750e:	3b01      	subs	r3, #1
 8007510:	4313      	orrs	r3, r2
 8007512:	4682      	mov	sl, r0
 8007514:	468b      	mov	fp, r1
 8007516:	f040 81e7 	bne.w	80078e8 <__ieee754_pow+0x700>
 800751a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80075d0 <__ieee754_pow+0x3e8>
 800751e:	eeb0 8a47 	vmov.f32	s16, s14
 8007522:	eef0 8a67 	vmov.f32	s17, s15
 8007526:	e9dd 6700 	ldrd	r6, r7, [sp]
 800752a:	2600      	movs	r6, #0
 800752c:	4632      	mov	r2, r6
 800752e:	463b      	mov	r3, r7
 8007530:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007534:	f7f8 feb0 	bl	8000298 <__aeabi_dsub>
 8007538:	4622      	mov	r2, r4
 800753a:	462b      	mov	r3, r5
 800753c:	f7f9 f864 	bl	8000608 <__aeabi_dmul>
 8007540:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007544:	4680      	mov	r8, r0
 8007546:	4689      	mov	r9, r1
 8007548:	4650      	mov	r0, sl
 800754a:	4659      	mov	r1, fp
 800754c:	f7f9 f85c 	bl	8000608 <__aeabi_dmul>
 8007550:	4602      	mov	r2, r0
 8007552:	460b      	mov	r3, r1
 8007554:	4640      	mov	r0, r8
 8007556:	4649      	mov	r1, r9
 8007558:	f7f8 fea0 	bl	800029c <__adddf3>
 800755c:	4632      	mov	r2, r6
 800755e:	463b      	mov	r3, r7
 8007560:	4680      	mov	r8, r0
 8007562:	4689      	mov	r9, r1
 8007564:	4620      	mov	r0, r4
 8007566:	4629      	mov	r1, r5
 8007568:	f7f9 f84e 	bl	8000608 <__aeabi_dmul>
 800756c:	460b      	mov	r3, r1
 800756e:	4604      	mov	r4, r0
 8007570:	460d      	mov	r5, r1
 8007572:	4602      	mov	r2, r0
 8007574:	4649      	mov	r1, r9
 8007576:	4640      	mov	r0, r8
 8007578:	f7f8 fe90 	bl	800029c <__adddf3>
 800757c:	4b19      	ldr	r3, [pc, #100]	; (80075e4 <__ieee754_pow+0x3fc>)
 800757e:	4299      	cmp	r1, r3
 8007580:	ec45 4b19 	vmov	d9, r4, r5
 8007584:	4606      	mov	r6, r0
 8007586:	460f      	mov	r7, r1
 8007588:	468b      	mov	fp, r1
 800758a:	f340 82f0 	ble.w	8007b6e <__ieee754_pow+0x986>
 800758e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007592:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007596:	4303      	orrs	r3, r0
 8007598:	f000 81e4 	beq.w	8007964 <__ieee754_pow+0x77c>
 800759c:	ec51 0b18 	vmov	r0, r1, d8
 80075a0:	2200      	movs	r2, #0
 80075a2:	2300      	movs	r3, #0
 80075a4:	f7f9 faa2 	bl	8000aec <__aeabi_dcmplt>
 80075a8:	3800      	subs	r0, #0
 80075aa:	bf18      	it	ne
 80075ac:	2001      	movne	r0, #1
 80075ae:	e72b      	b.n	8007408 <__ieee754_pow+0x220>
 80075b0:	60000000 	.word	0x60000000
 80075b4:	3ff71547 	.word	0x3ff71547
 80075b8:	f85ddf44 	.word	0xf85ddf44
 80075bc:	3e54ae0b 	.word	0x3e54ae0b
 80075c0:	55555555 	.word	0x55555555
 80075c4:	3fd55555 	.word	0x3fd55555
 80075c8:	652b82fe 	.word	0x652b82fe
 80075cc:	3ff71547 	.word	0x3ff71547
 80075d0:	00000000 	.word	0x00000000
 80075d4:	bff00000 	.word	0xbff00000
 80075d8:	3ff00000 	.word	0x3ff00000
 80075dc:	3fd00000 	.word	0x3fd00000
 80075e0:	3fe00000 	.word	0x3fe00000
 80075e4:	408fffff 	.word	0x408fffff
 80075e8:	4bd5      	ldr	r3, [pc, #852]	; (8007940 <__ieee754_pow+0x758>)
 80075ea:	402b      	ands	r3, r5
 80075ec:	2200      	movs	r2, #0
 80075ee:	b92b      	cbnz	r3, 80075fc <__ieee754_pow+0x414>
 80075f0:	4bd4      	ldr	r3, [pc, #848]	; (8007944 <__ieee754_pow+0x75c>)
 80075f2:	f7f9 f809 	bl	8000608 <__aeabi_dmul>
 80075f6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80075fa:	460c      	mov	r4, r1
 80075fc:	1523      	asrs	r3, r4, #20
 80075fe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007602:	4413      	add	r3, r2
 8007604:	9305      	str	r3, [sp, #20]
 8007606:	4bd0      	ldr	r3, [pc, #832]	; (8007948 <__ieee754_pow+0x760>)
 8007608:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800760c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007610:	429c      	cmp	r4, r3
 8007612:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007616:	dd08      	ble.n	800762a <__ieee754_pow+0x442>
 8007618:	4bcc      	ldr	r3, [pc, #816]	; (800794c <__ieee754_pow+0x764>)
 800761a:	429c      	cmp	r4, r3
 800761c:	f340 8162 	ble.w	80078e4 <__ieee754_pow+0x6fc>
 8007620:	9b05      	ldr	r3, [sp, #20]
 8007622:	3301      	adds	r3, #1
 8007624:	9305      	str	r3, [sp, #20]
 8007626:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800762a:	2400      	movs	r4, #0
 800762c:	00e3      	lsls	r3, r4, #3
 800762e:	9307      	str	r3, [sp, #28]
 8007630:	4bc7      	ldr	r3, [pc, #796]	; (8007950 <__ieee754_pow+0x768>)
 8007632:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007636:	ed93 7b00 	vldr	d7, [r3]
 800763a:	4629      	mov	r1, r5
 800763c:	ec53 2b17 	vmov	r2, r3, d7
 8007640:	eeb0 9a47 	vmov.f32	s18, s14
 8007644:	eef0 9a67 	vmov.f32	s19, s15
 8007648:	4682      	mov	sl, r0
 800764a:	f7f8 fe25 	bl	8000298 <__aeabi_dsub>
 800764e:	4652      	mov	r2, sl
 8007650:	4606      	mov	r6, r0
 8007652:	460f      	mov	r7, r1
 8007654:	462b      	mov	r3, r5
 8007656:	ec51 0b19 	vmov	r0, r1, d9
 800765a:	f7f8 fe1f 	bl	800029c <__adddf3>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	2000      	movs	r0, #0
 8007664:	49bb      	ldr	r1, [pc, #748]	; (8007954 <__ieee754_pow+0x76c>)
 8007666:	f7f9 f8f9 	bl	800085c <__aeabi_ddiv>
 800766a:	ec41 0b1a 	vmov	d10, r0, r1
 800766e:	4602      	mov	r2, r0
 8007670:	460b      	mov	r3, r1
 8007672:	4630      	mov	r0, r6
 8007674:	4639      	mov	r1, r7
 8007676:	f7f8 ffc7 	bl	8000608 <__aeabi_dmul>
 800767a:	2300      	movs	r3, #0
 800767c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007680:	9302      	str	r3, [sp, #8]
 8007682:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007686:	46ab      	mov	fp, r5
 8007688:	106d      	asrs	r5, r5, #1
 800768a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800768e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007692:	ec41 0b18 	vmov	d8, r0, r1
 8007696:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800769a:	2200      	movs	r2, #0
 800769c:	4640      	mov	r0, r8
 800769e:	4649      	mov	r1, r9
 80076a0:	4614      	mov	r4, r2
 80076a2:	461d      	mov	r5, r3
 80076a4:	f7f8 ffb0 	bl	8000608 <__aeabi_dmul>
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	4630      	mov	r0, r6
 80076ae:	4639      	mov	r1, r7
 80076b0:	f7f8 fdf2 	bl	8000298 <__aeabi_dsub>
 80076b4:	ec53 2b19 	vmov	r2, r3, d9
 80076b8:	4606      	mov	r6, r0
 80076ba:	460f      	mov	r7, r1
 80076bc:	4620      	mov	r0, r4
 80076be:	4629      	mov	r1, r5
 80076c0:	f7f8 fdea 	bl	8000298 <__aeabi_dsub>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	4650      	mov	r0, sl
 80076ca:	4659      	mov	r1, fp
 80076cc:	f7f8 fde4 	bl	8000298 <__aeabi_dsub>
 80076d0:	4642      	mov	r2, r8
 80076d2:	464b      	mov	r3, r9
 80076d4:	f7f8 ff98 	bl	8000608 <__aeabi_dmul>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	4630      	mov	r0, r6
 80076de:	4639      	mov	r1, r7
 80076e0:	f7f8 fdda 	bl	8000298 <__aeabi_dsub>
 80076e4:	ec53 2b1a 	vmov	r2, r3, d10
 80076e8:	f7f8 ff8e 	bl	8000608 <__aeabi_dmul>
 80076ec:	ec53 2b18 	vmov	r2, r3, d8
 80076f0:	ec41 0b19 	vmov	d9, r0, r1
 80076f4:	ec51 0b18 	vmov	r0, r1, d8
 80076f8:	f7f8 ff86 	bl	8000608 <__aeabi_dmul>
 80076fc:	a37c      	add	r3, pc, #496	; (adr r3, 80078f0 <__ieee754_pow+0x708>)
 80076fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007702:	4604      	mov	r4, r0
 8007704:	460d      	mov	r5, r1
 8007706:	f7f8 ff7f 	bl	8000608 <__aeabi_dmul>
 800770a:	a37b      	add	r3, pc, #492	; (adr r3, 80078f8 <__ieee754_pow+0x710>)
 800770c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007710:	f7f8 fdc4 	bl	800029c <__adddf3>
 8007714:	4622      	mov	r2, r4
 8007716:	462b      	mov	r3, r5
 8007718:	f7f8 ff76 	bl	8000608 <__aeabi_dmul>
 800771c:	a378      	add	r3, pc, #480	; (adr r3, 8007900 <__ieee754_pow+0x718>)
 800771e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007722:	f7f8 fdbb 	bl	800029c <__adddf3>
 8007726:	4622      	mov	r2, r4
 8007728:	462b      	mov	r3, r5
 800772a:	f7f8 ff6d 	bl	8000608 <__aeabi_dmul>
 800772e:	a376      	add	r3, pc, #472	; (adr r3, 8007908 <__ieee754_pow+0x720>)
 8007730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007734:	f7f8 fdb2 	bl	800029c <__adddf3>
 8007738:	4622      	mov	r2, r4
 800773a:	462b      	mov	r3, r5
 800773c:	f7f8 ff64 	bl	8000608 <__aeabi_dmul>
 8007740:	a373      	add	r3, pc, #460	; (adr r3, 8007910 <__ieee754_pow+0x728>)
 8007742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007746:	f7f8 fda9 	bl	800029c <__adddf3>
 800774a:	4622      	mov	r2, r4
 800774c:	462b      	mov	r3, r5
 800774e:	f7f8 ff5b 	bl	8000608 <__aeabi_dmul>
 8007752:	a371      	add	r3, pc, #452	; (adr r3, 8007918 <__ieee754_pow+0x730>)
 8007754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007758:	f7f8 fda0 	bl	800029c <__adddf3>
 800775c:	4622      	mov	r2, r4
 800775e:	4606      	mov	r6, r0
 8007760:	460f      	mov	r7, r1
 8007762:	462b      	mov	r3, r5
 8007764:	4620      	mov	r0, r4
 8007766:	4629      	mov	r1, r5
 8007768:	f7f8 ff4e 	bl	8000608 <__aeabi_dmul>
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	4630      	mov	r0, r6
 8007772:	4639      	mov	r1, r7
 8007774:	f7f8 ff48 	bl	8000608 <__aeabi_dmul>
 8007778:	4642      	mov	r2, r8
 800777a:	4604      	mov	r4, r0
 800777c:	460d      	mov	r5, r1
 800777e:	464b      	mov	r3, r9
 8007780:	ec51 0b18 	vmov	r0, r1, d8
 8007784:	f7f8 fd8a 	bl	800029c <__adddf3>
 8007788:	ec53 2b19 	vmov	r2, r3, d9
 800778c:	f7f8 ff3c 	bl	8000608 <__aeabi_dmul>
 8007790:	4622      	mov	r2, r4
 8007792:	462b      	mov	r3, r5
 8007794:	f7f8 fd82 	bl	800029c <__adddf3>
 8007798:	4642      	mov	r2, r8
 800779a:	4682      	mov	sl, r0
 800779c:	468b      	mov	fp, r1
 800779e:	464b      	mov	r3, r9
 80077a0:	4640      	mov	r0, r8
 80077a2:	4649      	mov	r1, r9
 80077a4:	f7f8 ff30 	bl	8000608 <__aeabi_dmul>
 80077a8:	4b6b      	ldr	r3, [pc, #428]	; (8007958 <__ieee754_pow+0x770>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	4606      	mov	r6, r0
 80077ae:	460f      	mov	r7, r1
 80077b0:	f7f8 fd74 	bl	800029c <__adddf3>
 80077b4:	4652      	mov	r2, sl
 80077b6:	465b      	mov	r3, fp
 80077b8:	f7f8 fd70 	bl	800029c <__adddf3>
 80077bc:	2000      	movs	r0, #0
 80077be:	4604      	mov	r4, r0
 80077c0:	460d      	mov	r5, r1
 80077c2:	4602      	mov	r2, r0
 80077c4:	460b      	mov	r3, r1
 80077c6:	4640      	mov	r0, r8
 80077c8:	4649      	mov	r1, r9
 80077ca:	f7f8 ff1d 	bl	8000608 <__aeabi_dmul>
 80077ce:	4b62      	ldr	r3, [pc, #392]	; (8007958 <__ieee754_pow+0x770>)
 80077d0:	4680      	mov	r8, r0
 80077d2:	4689      	mov	r9, r1
 80077d4:	2200      	movs	r2, #0
 80077d6:	4620      	mov	r0, r4
 80077d8:	4629      	mov	r1, r5
 80077da:	f7f8 fd5d 	bl	8000298 <__aeabi_dsub>
 80077de:	4632      	mov	r2, r6
 80077e0:	463b      	mov	r3, r7
 80077e2:	f7f8 fd59 	bl	8000298 <__aeabi_dsub>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	4650      	mov	r0, sl
 80077ec:	4659      	mov	r1, fp
 80077ee:	f7f8 fd53 	bl	8000298 <__aeabi_dsub>
 80077f2:	ec53 2b18 	vmov	r2, r3, d8
 80077f6:	f7f8 ff07 	bl	8000608 <__aeabi_dmul>
 80077fa:	4622      	mov	r2, r4
 80077fc:	4606      	mov	r6, r0
 80077fe:	460f      	mov	r7, r1
 8007800:	462b      	mov	r3, r5
 8007802:	ec51 0b19 	vmov	r0, r1, d9
 8007806:	f7f8 feff 	bl	8000608 <__aeabi_dmul>
 800780a:	4602      	mov	r2, r0
 800780c:	460b      	mov	r3, r1
 800780e:	4630      	mov	r0, r6
 8007810:	4639      	mov	r1, r7
 8007812:	f7f8 fd43 	bl	800029c <__adddf3>
 8007816:	4606      	mov	r6, r0
 8007818:	460f      	mov	r7, r1
 800781a:	4602      	mov	r2, r0
 800781c:	460b      	mov	r3, r1
 800781e:	4640      	mov	r0, r8
 8007820:	4649      	mov	r1, r9
 8007822:	f7f8 fd3b 	bl	800029c <__adddf3>
 8007826:	a33e      	add	r3, pc, #248	; (adr r3, 8007920 <__ieee754_pow+0x738>)
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	2000      	movs	r0, #0
 800782e:	4604      	mov	r4, r0
 8007830:	460d      	mov	r5, r1
 8007832:	f7f8 fee9 	bl	8000608 <__aeabi_dmul>
 8007836:	4642      	mov	r2, r8
 8007838:	ec41 0b18 	vmov	d8, r0, r1
 800783c:	464b      	mov	r3, r9
 800783e:	4620      	mov	r0, r4
 8007840:	4629      	mov	r1, r5
 8007842:	f7f8 fd29 	bl	8000298 <__aeabi_dsub>
 8007846:	4602      	mov	r2, r0
 8007848:	460b      	mov	r3, r1
 800784a:	4630      	mov	r0, r6
 800784c:	4639      	mov	r1, r7
 800784e:	f7f8 fd23 	bl	8000298 <__aeabi_dsub>
 8007852:	a335      	add	r3, pc, #212	; (adr r3, 8007928 <__ieee754_pow+0x740>)
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	f7f8 fed6 	bl	8000608 <__aeabi_dmul>
 800785c:	a334      	add	r3, pc, #208	; (adr r3, 8007930 <__ieee754_pow+0x748>)
 800785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007862:	4606      	mov	r6, r0
 8007864:	460f      	mov	r7, r1
 8007866:	4620      	mov	r0, r4
 8007868:	4629      	mov	r1, r5
 800786a:	f7f8 fecd 	bl	8000608 <__aeabi_dmul>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	4630      	mov	r0, r6
 8007874:	4639      	mov	r1, r7
 8007876:	f7f8 fd11 	bl	800029c <__adddf3>
 800787a:	9a07      	ldr	r2, [sp, #28]
 800787c:	4b37      	ldr	r3, [pc, #220]	; (800795c <__ieee754_pow+0x774>)
 800787e:	4413      	add	r3, r2
 8007880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007884:	f7f8 fd0a 	bl	800029c <__adddf3>
 8007888:	4682      	mov	sl, r0
 800788a:	9805      	ldr	r0, [sp, #20]
 800788c:	468b      	mov	fp, r1
 800788e:	f7f8 fe51 	bl	8000534 <__aeabi_i2d>
 8007892:	9a07      	ldr	r2, [sp, #28]
 8007894:	4b32      	ldr	r3, [pc, #200]	; (8007960 <__ieee754_pow+0x778>)
 8007896:	4413      	add	r3, r2
 8007898:	e9d3 8900 	ldrd	r8, r9, [r3]
 800789c:	4606      	mov	r6, r0
 800789e:	460f      	mov	r7, r1
 80078a0:	4652      	mov	r2, sl
 80078a2:	465b      	mov	r3, fp
 80078a4:	ec51 0b18 	vmov	r0, r1, d8
 80078a8:	f7f8 fcf8 	bl	800029c <__adddf3>
 80078ac:	4642      	mov	r2, r8
 80078ae:	464b      	mov	r3, r9
 80078b0:	f7f8 fcf4 	bl	800029c <__adddf3>
 80078b4:	4632      	mov	r2, r6
 80078b6:	463b      	mov	r3, r7
 80078b8:	f7f8 fcf0 	bl	800029c <__adddf3>
 80078bc:	2000      	movs	r0, #0
 80078be:	4632      	mov	r2, r6
 80078c0:	463b      	mov	r3, r7
 80078c2:	4604      	mov	r4, r0
 80078c4:	460d      	mov	r5, r1
 80078c6:	f7f8 fce7 	bl	8000298 <__aeabi_dsub>
 80078ca:	4642      	mov	r2, r8
 80078cc:	464b      	mov	r3, r9
 80078ce:	f7f8 fce3 	bl	8000298 <__aeabi_dsub>
 80078d2:	ec53 2b18 	vmov	r2, r3, d8
 80078d6:	f7f8 fcdf 	bl	8000298 <__aeabi_dsub>
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	4650      	mov	r0, sl
 80078e0:	4659      	mov	r1, fp
 80078e2:	e610      	b.n	8007506 <__ieee754_pow+0x31e>
 80078e4:	2401      	movs	r4, #1
 80078e6:	e6a1      	b.n	800762c <__ieee754_pow+0x444>
 80078e8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007938 <__ieee754_pow+0x750>
 80078ec:	e617      	b.n	800751e <__ieee754_pow+0x336>
 80078ee:	bf00      	nop
 80078f0:	4a454eef 	.word	0x4a454eef
 80078f4:	3fca7e28 	.word	0x3fca7e28
 80078f8:	93c9db65 	.word	0x93c9db65
 80078fc:	3fcd864a 	.word	0x3fcd864a
 8007900:	a91d4101 	.word	0xa91d4101
 8007904:	3fd17460 	.word	0x3fd17460
 8007908:	518f264d 	.word	0x518f264d
 800790c:	3fd55555 	.word	0x3fd55555
 8007910:	db6fabff 	.word	0xdb6fabff
 8007914:	3fdb6db6 	.word	0x3fdb6db6
 8007918:	33333303 	.word	0x33333303
 800791c:	3fe33333 	.word	0x3fe33333
 8007920:	e0000000 	.word	0xe0000000
 8007924:	3feec709 	.word	0x3feec709
 8007928:	dc3a03fd 	.word	0xdc3a03fd
 800792c:	3feec709 	.word	0x3feec709
 8007930:	145b01f5 	.word	0x145b01f5
 8007934:	be3e2fe0 	.word	0xbe3e2fe0
 8007938:	00000000 	.word	0x00000000
 800793c:	3ff00000 	.word	0x3ff00000
 8007940:	7ff00000 	.word	0x7ff00000
 8007944:	43400000 	.word	0x43400000
 8007948:	0003988e 	.word	0x0003988e
 800794c:	000bb679 	.word	0x000bb679
 8007950:	080081e8 	.word	0x080081e8
 8007954:	3ff00000 	.word	0x3ff00000
 8007958:	40080000 	.word	0x40080000
 800795c:	08008208 	.word	0x08008208
 8007960:	080081f8 	.word	0x080081f8
 8007964:	a3b3      	add	r3, pc, #716	; (adr r3, 8007c34 <__ieee754_pow+0xa4c>)
 8007966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796a:	4640      	mov	r0, r8
 800796c:	4649      	mov	r1, r9
 800796e:	f7f8 fc95 	bl	800029c <__adddf3>
 8007972:	4622      	mov	r2, r4
 8007974:	ec41 0b1a 	vmov	d10, r0, r1
 8007978:	462b      	mov	r3, r5
 800797a:	4630      	mov	r0, r6
 800797c:	4639      	mov	r1, r7
 800797e:	f7f8 fc8b 	bl	8000298 <__aeabi_dsub>
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	ec51 0b1a 	vmov	r0, r1, d10
 800798a:	f7f9 f8cd 	bl	8000b28 <__aeabi_dcmpgt>
 800798e:	2800      	cmp	r0, #0
 8007990:	f47f ae04 	bne.w	800759c <__ieee754_pow+0x3b4>
 8007994:	4aa2      	ldr	r2, [pc, #648]	; (8007c20 <__ieee754_pow+0xa38>)
 8007996:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800799a:	4293      	cmp	r3, r2
 800799c:	f340 8107 	ble.w	8007bae <__ieee754_pow+0x9c6>
 80079a0:	151b      	asrs	r3, r3, #20
 80079a2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80079a6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80079aa:	fa4a fa03 	asr.w	sl, sl, r3
 80079ae:	44da      	add	sl, fp
 80079b0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80079b4:	489b      	ldr	r0, [pc, #620]	; (8007c24 <__ieee754_pow+0xa3c>)
 80079b6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80079ba:	4108      	asrs	r0, r1
 80079bc:	ea00 030a 	and.w	r3, r0, sl
 80079c0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80079c4:	f1c1 0114 	rsb	r1, r1, #20
 80079c8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80079cc:	fa4a fa01 	asr.w	sl, sl, r1
 80079d0:	f1bb 0f00 	cmp.w	fp, #0
 80079d4:	f04f 0200 	mov.w	r2, #0
 80079d8:	4620      	mov	r0, r4
 80079da:	4629      	mov	r1, r5
 80079dc:	bfb8      	it	lt
 80079de:	f1ca 0a00 	rsblt	sl, sl, #0
 80079e2:	f7f8 fc59 	bl	8000298 <__aeabi_dsub>
 80079e6:	ec41 0b19 	vmov	d9, r0, r1
 80079ea:	4642      	mov	r2, r8
 80079ec:	464b      	mov	r3, r9
 80079ee:	ec51 0b19 	vmov	r0, r1, d9
 80079f2:	f7f8 fc53 	bl	800029c <__adddf3>
 80079f6:	a37a      	add	r3, pc, #488	; (adr r3, 8007be0 <__ieee754_pow+0x9f8>)
 80079f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fc:	2000      	movs	r0, #0
 80079fe:	4604      	mov	r4, r0
 8007a00:	460d      	mov	r5, r1
 8007a02:	f7f8 fe01 	bl	8000608 <__aeabi_dmul>
 8007a06:	ec53 2b19 	vmov	r2, r3, d9
 8007a0a:	4606      	mov	r6, r0
 8007a0c:	460f      	mov	r7, r1
 8007a0e:	4620      	mov	r0, r4
 8007a10:	4629      	mov	r1, r5
 8007a12:	f7f8 fc41 	bl	8000298 <__aeabi_dsub>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4640      	mov	r0, r8
 8007a1c:	4649      	mov	r1, r9
 8007a1e:	f7f8 fc3b 	bl	8000298 <__aeabi_dsub>
 8007a22:	a371      	add	r3, pc, #452	; (adr r3, 8007be8 <__ieee754_pow+0xa00>)
 8007a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a28:	f7f8 fdee 	bl	8000608 <__aeabi_dmul>
 8007a2c:	a370      	add	r3, pc, #448	; (adr r3, 8007bf0 <__ieee754_pow+0xa08>)
 8007a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a32:	4680      	mov	r8, r0
 8007a34:	4689      	mov	r9, r1
 8007a36:	4620      	mov	r0, r4
 8007a38:	4629      	mov	r1, r5
 8007a3a:	f7f8 fde5 	bl	8000608 <__aeabi_dmul>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	460b      	mov	r3, r1
 8007a42:	4640      	mov	r0, r8
 8007a44:	4649      	mov	r1, r9
 8007a46:	f7f8 fc29 	bl	800029c <__adddf3>
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	460d      	mov	r5, r1
 8007a4e:	4602      	mov	r2, r0
 8007a50:	460b      	mov	r3, r1
 8007a52:	4630      	mov	r0, r6
 8007a54:	4639      	mov	r1, r7
 8007a56:	f7f8 fc21 	bl	800029c <__adddf3>
 8007a5a:	4632      	mov	r2, r6
 8007a5c:	463b      	mov	r3, r7
 8007a5e:	4680      	mov	r8, r0
 8007a60:	4689      	mov	r9, r1
 8007a62:	f7f8 fc19 	bl	8000298 <__aeabi_dsub>
 8007a66:	4602      	mov	r2, r0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	4629      	mov	r1, r5
 8007a6e:	f7f8 fc13 	bl	8000298 <__aeabi_dsub>
 8007a72:	4642      	mov	r2, r8
 8007a74:	4606      	mov	r6, r0
 8007a76:	460f      	mov	r7, r1
 8007a78:	464b      	mov	r3, r9
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	f7f8 fdc3 	bl	8000608 <__aeabi_dmul>
 8007a82:	a35d      	add	r3, pc, #372	; (adr r3, 8007bf8 <__ieee754_pow+0xa10>)
 8007a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a88:	4604      	mov	r4, r0
 8007a8a:	460d      	mov	r5, r1
 8007a8c:	f7f8 fdbc 	bl	8000608 <__aeabi_dmul>
 8007a90:	a35b      	add	r3, pc, #364	; (adr r3, 8007c00 <__ieee754_pow+0xa18>)
 8007a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a96:	f7f8 fbff 	bl	8000298 <__aeabi_dsub>
 8007a9a:	4622      	mov	r2, r4
 8007a9c:	462b      	mov	r3, r5
 8007a9e:	f7f8 fdb3 	bl	8000608 <__aeabi_dmul>
 8007aa2:	a359      	add	r3, pc, #356	; (adr r3, 8007c08 <__ieee754_pow+0xa20>)
 8007aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa8:	f7f8 fbf8 	bl	800029c <__adddf3>
 8007aac:	4622      	mov	r2, r4
 8007aae:	462b      	mov	r3, r5
 8007ab0:	f7f8 fdaa 	bl	8000608 <__aeabi_dmul>
 8007ab4:	a356      	add	r3, pc, #344	; (adr r3, 8007c10 <__ieee754_pow+0xa28>)
 8007ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aba:	f7f8 fbed 	bl	8000298 <__aeabi_dsub>
 8007abe:	4622      	mov	r2, r4
 8007ac0:	462b      	mov	r3, r5
 8007ac2:	f7f8 fda1 	bl	8000608 <__aeabi_dmul>
 8007ac6:	a354      	add	r3, pc, #336	; (adr r3, 8007c18 <__ieee754_pow+0xa30>)
 8007ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007acc:	f7f8 fbe6 	bl	800029c <__adddf3>
 8007ad0:	4622      	mov	r2, r4
 8007ad2:	462b      	mov	r3, r5
 8007ad4:	f7f8 fd98 	bl	8000608 <__aeabi_dmul>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	460b      	mov	r3, r1
 8007adc:	4640      	mov	r0, r8
 8007ade:	4649      	mov	r1, r9
 8007ae0:	f7f8 fbda 	bl	8000298 <__aeabi_dsub>
 8007ae4:	4604      	mov	r4, r0
 8007ae6:	460d      	mov	r5, r1
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	4640      	mov	r0, r8
 8007aee:	4649      	mov	r1, r9
 8007af0:	f7f8 fd8a 	bl	8000608 <__aeabi_dmul>
 8007af4:	2200      	movs	r2, #0
 8007af6:	ec41 0b19 	vmov	d9, r0, r1
 8007afa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007afe:	4620      	mov	r0, r4
 8007b00:	4629      	mov	r1, r5
 8007b02:	f7f8 fbc9 	bl	8000298 <__aeabi_dsub>
 8007b06:	4602      	mov	r2, r0
 8007b08:	460b      	mov	r3, r1
 8007b0a:	ec51 0b19 	vmov	r0, r1, d9
 8007b0e:	f7f8 fea5 	bl	800085c <__aeabi_ddiv>
 8007b12:	4632      	mov	r2, r6
 8007b14:	4604      	mov	r4, r0
 8007b16:	460d      	mov	r5, r1
 8007b18:	463b      	mov	r3, r7
 8007b1a:	4640      	mov	r0, r8
 8007b1c:	4649      	mov	r1, r9
 8007b1e:	f7f8 fd73 	bl	8000608 <__aeabi_dmul>
 8007b22:	4632      	mov	r2, r6
 8007b24:	463b      	mov	r3, r7
 8007b26:	f7f8 fbb9 	bl	800029c <__adddf3>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4620      	mov	r0, r4
 8007b30:	4629      	mov	r1, r5
 8007b32:	f7f8 fbb1 	bl	8000298 <__aeabi_dsub>
 8007b36:	4642      	mov	r2, r8
 8007b38:	464b      	mov	r3, r9
 8007b3a:	f7f8 fbad 	bl	8000298 <__aeabi_dsub>
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4602      	mov	r2, r0
 8007b42:	4939      	ldr	r1, [pc, #228]	; (8007c28 <__ieee754_pow+0xa40>)
 8007b44:	2000      	movs	r0, #0
 8007b46:	f7f8 fba7 	bl	8000298 <__aeabi_dsub>
 8007b4a:	ec41 0b10 	vmov	d0, r0, r1
 8007b4e:	ee10 3a90 	vmov	r3, s1
 8007b52:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b5a:	da2b      	bge.n	8007bb4 <__ieee754_pow+0x9cc>
 8007b5c:	4650      	mov	r0, sl
 8007b5e:	f000 f86f 	bl	8007c40 <scalbn>
 8007b62:	ec51 0b10 	vmov	r0, r1, d0
 8007b66:	ec53 2b18 	vmov	r2, r3, d8
 8007b6a:	f7ff bbee 	b.w	800734a <__ieee754_pow+0x162>
 8007b6e:	4b2f      	ldr	r3, [pc, #188]	; (8007c2c <__ieee754_pow+0xa44>)
 8007b70:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007b74:	429e      	cmp	r6, r3
 8007b76:	f77f af0d 	ble.w	8007994 <__ieee754_pow+0x7ac>
 8007b7a:	4b2d      	ldr	r3, [pc, #180]	; (8007c30 <__ieee754_pow+0xa48>)
 8007b7c:	440b      	add	r3, r1
 8007b7e:	4303      	orrs	r3, r0
 8007b80:	d009      	beq.n	8007b96 <__ieee754_pow+0x9ae>
 8007b82:	ec51 0b18 	vmov	r0, r1, d8
 8007b86:	2200      	movs	r2, #0
 8007b88:	2300      	movs	r3, #0
 8007b8a:	f7f8 ffaf 	bl	8000aec <__aeabi_dcmplt>
 8007b8e:	3800      	subs	r0, #0
 8007b90:	bf18      	it	ne
 8007b92:	2001      	movne	r0, #1
 8007b94:	e448      	b.n	8007428 <__ieee754_pow+0x240>
 8007b96:	4622      	mov	r2, r4
 8007b98:	462b      	mov	r3, r5
 8007b9a:	f7f8 fb7d 	bl	8000298 <__aeabi_dsub>
 8007b9e:	4642      	mov	r2, r8
 8007ba0:	464b      	mov	r3, r9
 8007ba2:	f7f8 ffb7 	bl	8000b14 <__aeabi_dcmpge>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	f43f aef4 	beq.w	8007994 <__ieee754_pow+0x7ac>
 8007bac:	e7e9      	b.n	8007b82 <__ieee754_pow+0x99a>
 8007bae:	f04f 0a00 	mov.w	sl, #0
 8007bb2:	e71a      	b.n	80079ea <__ieee754_pow+0x802>
 8007bb4:	ec51 0b10 	vmov	r0, r1, d0
 8007bb8:	4619      	mov	r1, r3
 8007bba:	e7d4      	b.n	8007b66 <__ieee754_pow+0x97e>
 8007bbc:	491a      	ldr	r1, [pc, #104]	; (8007c28 <__ieee754_pow+0xa40>)
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	f7ff bb31 	b.w	8007226 <__ieee754_pow+0x3e>
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	f7ff bb2d 	b.w	8007226 <__ieee754_pow+0x3e>
 8007bcc:	4630      	mov	r0, r6
 8007bce:	4639      	mov	r1, r7
 8007bd0:	f7ff bb29 	b.w	8007226 <__ieee754_pow+0x3e>
 8007bd4:	9204      	str	r2, [sp, #16]
 8007bd6:	f7ff bb7b 	b.w	80072d0 <__ieee754_pow+0xe8>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f7ff bb65 	b.w	80072aa <__ieee754_pow+0xc2>
 8007be0:	00000000 	.word	0x00000000
 8007be4:	3fe62e43 	.word	0x3fe62e43
 8007be8:	fefa39ef 	.word	0xfefa39ef
 8007bec:	3fe62e42 	.word	0x3fe62e42
 8007bf0:	0ca86c39 	.word	0x0ca86c39
 8007bf4:	be205c61 	.word	0xbe205c61
 8007bf8:	72bea4d0 	.word	0x72bea4d0
 8007bfc:	3e663769 	.word	0x3e663769
 8007c00:	c5d26bf1 	.word	0xc5d26bf1
 8007c04:	3ebbbd41 	.word	0x3ebbbd41
 8007c08:	af25de2c 	.word	0xaf25de2c
 8007c0c:	3f11566a 	.word	0x3f11566a
 8007c10:	16bebd93 	.word	0x16bebd93
 8007c14:	3f66c16c 	.word	0x3f66c16c
 8007c18:	5555553e 	.word	0x5555553e
 8007c1c:	3fc55555 	.word	0x3fc55555
 8007c20:	3fe00000 	.word	0x3fe00000
 8007c24:	fff00000 	.word	0xfff00000
 8007c28:	3ff00000 	.word	0x3ff00000
 8007c2c:	4090cbff 	.word	0x4090cbff
 8007c30:	3f6f3400 	.word	0x3f6f3400
 8007c34:	652b82fe 	.word	0x652b82fe
 8007c38:	3c971547 	.word	0x3c971547
 8007c3c:	00000000 	.word	0x00000000

08007c40 <scalbn>:
 8007c40:	b570      	push	{r4, r5, r6, lr}
 8007c42:	ec55 4b10 	vmov	r4, r5, d0
 8007c46:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007c4a:	4606      	mov	r6, r0
 8007c4c:	462b      	mov	r3, r5
 8007c4e:	b999      	cbnz	r1, 8007c78 <scalbn+0x38>
 8007c50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007c54:	4323      	orrs	r3, r4
 8007c56:	d03f      	beq.n	8007cd8 <scalbn+0x98>
 8007c58:	4b35      	ldr	r3, [pc, #212]	; (8007d30 <scalbn+0xf0>)
 8007c5a:	4629      	mov	r1, r5
 8007c5c:	ee10 0a10 	vmov	r0, s0
 8007c60:	2200      	movs	r2, #0
 8007c62:	f7f8 fcd1 	bl	8000608 <__aeabi_dmul>
 8007c66:	4b33      	ldr	r3, [pc, #204]	; (8007d34 <scalbn+0xf4>)
 8007c68:	429e      	cmp	r6, r3
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	460d      	mov	r5, r1
 8007c6e:	da10      	bge.n	8007c92 <scalbn+0x52>
 8007c70:	a327      	add	r3, pc, #156	; (adr r3, 8007d10 <scalbn+0xd0>)
 8007c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c76:	e01f      	b.n	8007cb8 <scalbn+0x78>
 8007c78:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007c7c:	4291      	cmp	r1, r2
 8007c7e:	d10c      	bne.n	8007c9a <scalbn+0x5a>
 8007c80:	ee10 2a10 	vmov	r2, s0
 8007c84:	4620      	mov	r0, r4
 8007c86:	4629      	mov	r1, r5
 8007c88:	f7f8 fb08 	bl	800029c <__adddf3>
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	460d      	mov	r5, r1
 8007c90:	e022      	b.n	8007cd8 <scalbn+0x98>
 8007c92:	460b      	mov	r3, r1
 8007c94:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007c98:	3936      	subs	r1, #54	; 0x36
 8007c9a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007c9e:	4296      	cmp	r6, r2
 8007ca0:	dd0d      	ble.n	8007cbe <scalbn+0x7e>
 8007ca2:	2d00      	cmp	r5, #0
 8007ca4:	a11c      	add	r1, pc, #112	; (adr r1, 8007d18 <scalbn+0xd8>)
 8007ca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007caa:	da02      	bge.n	8007cb2 <scalbn+0x72>
 8007cac:	a11c      	add	r1, pc, #112	; (adr r1, 8007d20 <scalbn+0xe0>)
 8007cae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cb2:	a319      	add	r3, pc, #100	; (adr r3, 8007d18 <scalbn+0xd8>)
 8007cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb8:	f7f8 fca6 	bl	8000608 <__aeabi_dmul>
 8007cbc:	e7e6      	b.n	8007c8c <scalbn+0x4c>
 8007cbe:	1872      	adds	r2, r6, r1
 8007cc0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007cc4:	428a      	cmp	r2, r1
 8007cc6:	dcec      	bgt.n	8007ca2 <scalbn+0x62>
 8007cc8:	2a00      	cmp	r2, #0
 8007cca:	dd08      	ble.n	8007cde <scalbn+0x9e>
 8007ccc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007cd0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007cd4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007cd8:	ec45 4b10 	vmov	d0, r4, r5
 8007cdc:	bd70      	pop	{r4, r5, r6, pc}
 8007cde:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007ce2:	da08      	bge.n	8007cf6 <scalbn+0xb6>
 8007ce4:	2d00      	cmp	r5, #0
 8007ce6:	a10a      	add	r1, pc, #40	; (adr r1, 8007d10 <scalbn+0xd0>)
 8007ce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cec:	dac0      	bge.n	8007c70 <scalbn+0x30>
 8007cee:	a10e      	add	r1, pc, #56	; (adr r1, 8007d28 <scalbn+0xe8>)
 8007cf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cf4:	e7bc      	b.n	8007c70 <scalbn+0x30>
 8007cf6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007cfa:	3236      	adds	r2, #54	; 0x36
 8007cfc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d00:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007d04:	4620      	mov	r0, r4
 8007d06:	4b0c      	ldr	r3, [pc, #48]	; (8007d38 <scalbn+0xf8>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	e7d5      	b.n	8007cb8 <scalbn+0x78>
 8007d0c:	f3af 8000 	nop.w
 8007d10:	c2f8f359 	.word	0xc2f8f359
 8007d14:	01a56e1f 	.word	0x01a56e1f
 8007d18:	8800759c 	.word	0x8800759c
 8007d1c:	7e37e43c 	.word	0x7e37e43c
 8007d20:	8800759c 	.word	0x8800759c
 8007d24:	fe37e43c 	.word	0xfe37e43c
 8007d28:	c2f8f359 	.word	0xc2f8f359
 8007d2c:	81a56e1f 	.word	0x81a56e1f
 8007d30:	43500000 	.word	0x43500000
 8007d34:	ffff3cb0 	.word	0xffff3cb0
 8007d38:	3c900000 	.word	0x3c900000

08007d3c <with_errno>:
 8007d3c:	b570      	push	{r4, r5, r6, lr}
 8007d3e:	4604      	mov	r4, r0
 8007d40:	460d      	mov	r5, r1
 8007d42:	4616      	mov	r6, r2
 8007d44:	f7fe f9ca 	bl	80060dc <__errno>
 8007d48:	4629      	mov	r1, r5
 8007d4a:	6006      	str	r6, [r0, #0]
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	bd70      	pop	{r4, r5, r6, pc}

08007d50 <xflow>:
 8007d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d52:	4614      	mov	r4, r2
 8007d54:	461d      	mov	r5, r3
 8007d56:	b108      	cbz	r0, 8007d5c <xflow+0xc>
 8007d58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007d5c:	e9cd 2300 	strd	r2, r3, [sp]
 8007d60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d64:	4620      	mov	r0, r4
 8007d66:	4629      	mov	r1, r5
 8007d68:	f7f8 fc4e 	bl	8000608 <__aeabi_dmul>
 8007d6c:	2222      	movs	r2, #34	; 0x22
 8007d6e:	b003      	add	sp, #12
 8007d70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d74:	f7ff bfe2 	b.w	8007d3c <with_errno>

08007d78 <__math_uflow>:
 8007d78:	b508      	push	{r3, lr}
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007d80:	f7ff ffe6 	bl	8007d50 <xflow>
 8007d84:	ec41 0b10 	vmov	d0, r0, r1
 8007d88:	bd08      	pop	{r3, pc}

08007d8a <__math_oflow>:
 8007d8a:	b508      	push	{r3, lr}
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007d92:	f7ff ffdd 	bl	8007d50 <xflow>
 8007d96:	ec41 0b10 	vmov	d0, r0, r1
 8007d9a:	bd08      	pop	{r3, pc}

08007d9c <__ieee754_sqrt>:
 8007d9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da0:	ec55 4b10 	vmov	r4, r5, d0
 8007da4:	4e67      	ldr	r6, [pc, #412]	; (8007f44 <__ieee754_sqrt+0x1a8>)
 8007da6:	43ae      	bics	r6, r5
 8007da8:	ee10 0a10 	vmov	r0, s0
 8007dac:	ee10 2a10 	vmov	r2, s0
 8007db0:	4629      	mov	r1, r5
 8007db2:	462b      	mov	r3, r5
 8007db4:	d10d      	bne.n	8007dd2 <__ieee754_sqrt+0x36>
 8007db6:	f7f8 fc27 	bl	8000608 <__aeabi_dmul>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	f7f8 fa6b 	bl	800029c <__adddf3>
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	460d      	mov	r5, r1
 8007dca:	ec45 4b10 	vmov	d0, r4, r5
 8007dce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd2:	2d00      	cmp	r5, #0
 8007dd4:	dc0b      	bgt.n	8007dee <__ieee754_sqrt+0x52>
 8007dd6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007dda:	4326      	orrs	r6, r4
 8007ddc:	d0f5      	beq.n	8007dca <__ieee754_sqrt+0x2e>
 8007dde:	b135      	cbz	r5, 8007dee <__ieee754_sqrt+0x52>
 8007de0:	f7f8 fa5a 	bl	8000298 <__aeabi_dsub>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	f7f8 fd38 	bl	800085c <__aeabi_ddiv>
 8007dec:	e7eb      	b.n	8007dc6 <__ieee754_sqrt+0x2a>
 8007dee:	1509      	asrs	r1, r1, #20
 8007df0:	f000 808d 	beq.w	8007f0e <__ieee754_sqrt+0x172>
 8007df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007df8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8007dfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e00:	07c9      	lsls	r1, r1, #31
 8007e02:	bf5c      	itt	pl
 8007e04:	005b      	lslpl	r3, r3, #1
 8007e06:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8007e0a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007e0e:	bf58      	it	pl
 8007e10:	0052      	lslpl	r2, r2, #1
 8007e12:	2500      	movs	r5, #0
 8007e14:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007e18:	1076      	asrs	r6, r6, #1
 8007e1a:	0052      	lsls	r2, r2, #1
 8007e1c:	f04f 0e16 	mov.w	lr, #22
 8007e20:	46ac      	mov	ip, r5
 8007e22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e26:	eb0c 0001 	add.w	r0, ip, r1
 8007e2a:	4298      	cmp	r0, r3
 8007e2c:	bfde      	ittt	le
 8007e2e:	1a1b      	suble	r3, r3, r0
 8007e30:	eb00 0c01 	addle.w	ip, r0, r1
 8007e34:	186d      	addle	r5, r5, r1
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	f1be 0e01 	subs.w	lr, lr, #1
 8007e3c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007e40:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007e44:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007e48:	d1ed      	bne.n	8007e26 <__ieee754_sqrt+0x8a>
 8007e4a:	4674      	mov	r4, lr
 8007e4c:	2720      	movs	r7, #32
 8007e4e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007e52:	4563      	cmp	r3, ip
 8007e54:	eb01 000e 	add.w	r0, r1, lr
 8007e58:	dc02      	bgt.n	8007e60 <__ieee754_sqrt+0xc4>
 8007e5a:	d113      	bne.n	8007e84 <__ieee754_sqrt+0xe8>
 8007e5c:	4290      	cmp	r0, r2
 8007e5e:	d811      	bhi.n	8007e84 <__ieee754_sqrt+0xe8>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	eb00 0e01 	add.w	lr, r0, r1
 8007e66:	da57      	bge.n	8007f18 <__ieee754_sqrt+0x17c>
 8007e68:	f1be 0f00 	cmp.w	lr, #0
 8007e6c:	db54      	blt.n	8007f18 <__ieee754_sqrt+0x17c>
 8007e6e:	f10c 0801 	add.w	r8, ip, #1
 8007e72:	eba3 030c 	sub.w	r3, r3, ip
 8007e76:	4290      	cmp	r0, r2
 8007e78:	bf88      	it	hi
 8007e7a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007e7e:	1a12      	subs	r2, r2, r0
 8007e80:	440c      	add	r4, r1
 8007e82:	46c4      	mov	ip, r8
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	3f01      	subs	r7, #1
 8007e88:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007e8c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007e90:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007e94:	d1dd      	bne.n	8007e52 <__ieee754_sqrt+0xb6>
 8007e96:	4313      	orrs	r3, r2
 8007e98:	d01b      	beq.n	8007ed2 <__ieee754_sqrt+0x136>
 8007e9a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007f48 <__ieee754_sqrt+0x1ac>
 8007e9e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007f4c <__ieee754_sqrt+0x1b0>
 8007ea2:	e9da 0100 	ldrd	r0, r1, [sl]
 8007ea6:	e9db 2300 	ldrd	r2, r3, [fp]
 8007eaa:	f7f8 f9f5 	bl	8000298 <__aeabi_dsub>
 8007eae:	e9da 8900 	ldrd	r8, r9, [sl]
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4640      	mov	r0, r8
 8007eb8:	4649      	mov	r1, r9
 8007eba:	f7f8 fe21 	bl	8000b00 <__aeabi_dcmple>
 8007ebe:	b140      	cbz	r0, 8007ed2 <__ieee754_sqrt+0x136>
 8007ec0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007ec4:	e9da 0100 	ldrd	r0, r1, [sl]
 8007ec8:	e9db 2300 	ldrd	r2, r3, [fp]
 8007ecc:	d126      	bne.n	8007f1c <__ieee754_sqrt+0x180>
 8007ece:	3501      	adds	r5, #1
 8007ed0:	463c      	mov	r4, r7
 8007ed2:	106a      	asrs	r2, r5, #1
 8007ed4:	0863      	lsrs	r3, r4, #1
 8007ed6:	07e9      	lsls	r1, r5, #31
 8007ed8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007edc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007ee0:	bf48      	it	mi
 8007ee2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007ee6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8007eea:	461c      	mov	r4, r3
 8007eec:	e76d      	b.n	8007dca <__ieee754_sqrt+0x2e>
 8007eee:	0ad3      	lsrs	r3, r2, #11
 8007ef0:	3815      	subs	r0, #21
 8007ef2:	0552      	lsls	r2, r2, #21
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d0fa      	beq.n	8007eee <__ieee754_sqrt+0x152>
 8007ef8:	02dc      	lsls	r4, r3, #11
 8007efa:	d50a      	bpl.n	8007f12 <__ieee754_sqrt+0x176>
 8007efc:	f1c1 0420 	rsb	r4, r1, #32
 8007f00:	fa22 f404 	lsr.w	r4, r2, r4
 8007f04:	1e4d      	subs	r5, r1, #1
 8007f06:	408a      	lsls	r2, r1
 8007f08:	4323      	orrs	r3, r4
 8007f0a:	1b41      	subs	r1, r0, r5
 8007f0c:	e772      	b.n	8007df4 <__ieee754_sqrt+0x58>
 8007f0e:	4608      	mov	r0, r1
 8007f10:	e7f0      	b.n	8007ef4 <__ieee754_sqrt+0x158>
 8007f12:	005b      	lsls	r3, r3, #1
 8007f14:	3101      	adds	r1, #1
 8007f16:	e7ef      	b.n	8007ef8 <__ieee754_sqrt+0x15c>
 8007f18:	46e0      	mov	r8, ip
 8007f1a:	e7aa      	b.n	8007e72 <__ieee754_sqrt+0xd6>
 8007f1c:	f7f8 f9be 	bl	800029c <__adddf3>
 8007f20:	e9da 8900 	ldrd	r8, r9, [sl]
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	4640      	mov	r0, r8
 8007f2a:	4649      	mov	r1, r9
 8007f2c:	f7f8 fdde 	bl	8000aec <__aeabi_dcmplt>
 8007f30:	b120      	cbz	r0, 8007f3c <__ieee754_sqrt+0x1a0>
 8007f32:	1ca0      	adds	r0, r4, #2
 8007f34:	bf08      	it	eq
 8007f36:	3501      	addeq	r5, #1
 8007f38:	3402      	adds	r4, #2
 8007f3a:	e7ca      	b.n	8007ed2 <__ieee754_sqrt+0x136>
 8007f3c:	3401      	adds	r4, #1
 8007f3e:	f024 0401 	bic.w	r4, r4, #1
 8007f42:	e7c6      	b.n	8007ed2 <__ieee754_sqrt+0x136>
 8007f44:	7ff00000 	.word	0x7ff00000
 8007f48:	20000080 	.word	0x20000080
 8007f4c:	20000088 	.word	0x20000088

08007f50 <_init>:
 8007f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f52:	bf00      	nop
 8007f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f56:	bc08      	pop	{r3}
 8007f58:	469e      	mov	lr, r3
 8007f5a:	4770      	bx	lr

08007f5c <_fini>:
 8007f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f5e:	bf00      	nop
 8007f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f62:	bc08      	pop	{r3}
 8007f64:	469e      	mov	lr, r3
 8007f66:	4770      	bx	lr
